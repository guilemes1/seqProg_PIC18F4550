

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Nov 29 14:48:49 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   106                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   111                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   112                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   113                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   114  0000                     
   115                           ; Version 2.20
   116                           ; Generated 12/02/2020 GMT
   117                           ; 
   118                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4550 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150 ;; Function _receita_livre is unused but had its address taken
   151  0000                     
   152 ;; Function _rxEUSART is unused but had its address taken
   153  0000                     
   154 ;; Function _rxStatusEUSART is unused but had its address taken
   155  0000                     
   156 ;; Function _rxErrorEUSART is unused but had its address taken
   157  0000                     
   158 ;; Function _rxResetErrorEUSART is unused but had its address taken
   159  0000                     
   160 ;; Function _search is unused but had its address taken
   161  0000                     
   162 ;; Function _wifi_receive is unused but had its address taken
   163  0000                     
   164 ;; Function _Wifi_scan is unused but had its address taken
   165  0000                     
   166 ;; Function _Wifi_ip is unused but had its address taken
   167  0000                     
   168 ;; Function _Wifi_autoconnect is unused but had its address taken
   169  0000                     
   170 ;; Function _Wifi_config_servidor is unused but had its address taken
   171  0000                     
   172                           	psect	idataCOMRAM
   173  00410A                     __pidataCOMRAM:
   174                           	callstack 0
   175                           
   176                           ;initializer for _indice_passos
   177  00410A  02                 	db	2
   178                           
   179                           ;initializer for _ind_print
   180  00410B  02                 	db	2
   181                           
   182                           ;initializer for _ind_fila
   183  00410C  02                 	db	2
   184                           
   185                           	psect	idataBANK0
   186  003C82                     __pidataBANK0:
   187                           	callstack 0
   188                           
   189                           ;initializer for _wifi
   190  003C82  5E                 	db	low _wifi_init
   191  003C83  3D                 	db	high _wifi_init
   192  003C84  44                 	db	low _wifi_send
   193  003C85  31                 	db	high _wifi_send
   194  003C86  00                 	db	0
   195  003C87  00                 	db	0
   196  003C88  EC                 	db	low _Wifi_mode
   197  003C89  2F                 	db	high _Wifi_mode
   198  003C8A  92                 	db	low _Wifi_connect
   199  003C8B  28                 	db	high _Wifi_connect
   200  003C8C  00                 	db	0
   201  003C8D  00                 	db	0
   202  003C8E  00                 	db	0
   203  003C8F  00                 	db	0
   204  003C90  00                 	db	0
   205  003C91  00                 	db	0
   206  003C92  00                 	db	0
   207  003C93  00                 	db	0
   208  003C94  04                 	db	low _Wifi_cipsend
   209  003C95  26                 	db	high _Wifi_cipsend
   210                           
   211                           ;initializer for _eusart
   212  003C96  00                 	db	0
   213  003C97  00                 	db	0
   214  003C98  00                 	db	0
   215  003C99  00                 	db	0
   216  003C9A  00                 	db	0
   217  003C9B  00                 	db	0
   218  003C9C  00                 	db	0
   219  003C9D  00                 	db	0
   220  003C9E  E4                 	db	low _txEUSART
   221  003C9F  40                 	db	high _txEUSART
   222  003CA0  10                 	db	low _txStatusEUSART
   223  003CA1  40                 	db	high _txStatusEUSART
   224  003CA2  DC                 	db	low _initEUSART
   225  003CA3  35                 	db	high _initEUSART
   226  003CA4  00                 	db	0
   227  003CA5  00                 	db	0
   228                           
   229                           ;initializer for _IHM
   230  003CA6  28                 	db	low _dispLCD_init
   231  003CA7  3D                 	db	high _dispLCD_init
   232  003CA8  74                 	db	low _dispLCD_str
   233  003CA9  37                 	db	high _dispLCD_str
   234  003CAA  70                 	db	low _dispLCD
   235  003CAB  3A                 	db	high _dispLCD
   236  003CAC  36                 	db	low _dispLCD_num
   237  003CAD  23                 	db	high _dispLCD_num
   238  003CAE  DC                 	db	low _dispLCD_clr
   239  003CAF  40                 	db	high _dispLCD_clr
   240                           
   241                           ;initializer for _EEPROM
   242  003CB0  48                 	db	low _salvar_receita
   243  003CB1  3B                 	db	high _salvar_receita
   244  003CB2  8C                 	db	low _buscar_receita
   245  003CB3  3B                 	db	high _buscar_receita
   246  003CB4  BA                 	db	low _deletar_receita
   247  003CB5  3C                 	db	high _deletar_receita
   248  003CB6  00                 	db	0
   249  003CB7  00                 	db	0
   250  003CB8  90                 	db	low _formatar_receitas
   251  003CB9  3F                 	db	high _formatar_receitas
   252                           
   253                           	psect	idataBANK1
   254  003934                     __pidataBANK1:
   255                           	callstack 0
   256                           
   257                           ;initializer for Wifi_connect@F3287
   258  003934  41                 	db	65
   259  003935  54                 	db	84
   260  003936  2B                 	db	43
   261  003937  43                 	db	67
   262  003938  57                 	db	87
   263  003939  4A                 	db	74
   264  00393A  41                 	db	65
   265  00393B  50                 	db	80
   266  00393C  3D                 	db	61
   267  00393D  22                 	db	34
   268  00393E  00                 	db	0
   269  00393F  00                 	db	0
   270  003940  00                 	db	0
   271  003941  00                 	db	0
   272  003942  00                 	db	0
   273  003943  00                 	db	0
   274  003944  00                 	db	0
   275  003945  00                 	db	0
   276  003946  00                 	db	0
   277  003947  00                 	db	0
   278  003948  00                 	db	0
   279  003949  00                 	db	0
   280  00394A  00                 	db	0
   281  00394B  00                 	db	0
   282  00394C  00                 	db	0
   283  00394D  00                 	db	0
   284  00394E  00                 	db	0
   285  00394F  00                 	db	0
   286  003950  00                 	db	0
   287  003951  00                 	db	0
   288                           
   289                           ;initializer for Wifi_cipsend@F3299
   290  003952  41                 	db	65
   291  003953  54                 	db	84
   292  003954  2B                 	db	43
   293  003955  43                 	db	67
   294  003956  49                 	db	73
   295  003957  50                 	db	80
   296  003958  53                 	db	83
   297  003959  45                 	db	69
   298  00395A  4E                 	db	78
   299  00395B  44                 	db	68
   300  00395C  3D                 	db	61
   301  00395D  22                 	db	34
   302  00395E  00                 	db	0
   303  00395F  00                 	db	0
   304  003960  00                 	db	0
   305  003961  00                 	db	0
   306  003962  00                 	db	0
   307  003963  00                 	db	0
   308  003964  00                 	db	0
   309  003965  00                 	db	0
   310                           
   311                           ;initializer for main@F3513
   312  003966  4D                 	db	77
   313  003967  75                 	db	117
   314  003968  6E                 	db	110
   315  003969  64                 	db	100
   316  00396A  6F                 	db	111
   317  00396B  20                 	db	32
   318  00396C  61                 	db	97
   319  00396D  6F                 	db	111
   320  00396E  20                 	db	32
   321  00396F  73                 	db	115
   322  003970  65                 	db	101
   323  003971  75                 	db	117
   324  003972  20                 	db	32
   325  003973  63                 	db	99
   326  003974  6F                 	db	111
   327  003975  6D                 	db	109
   328  003976  61                 	db	97
   329  003977  6E                 	db	110
   330  003978  64                 	db	100
   331  003979  6F                 	db	111
   332                           
   333                           ;initializer for _teclas
   334  00397A  31                 	db	49
   335  00397B  32                 	db	50
   336  00397C  33                 	db	51
   337  00397D  41                 	db	65
   338  00397E  34                 	db	52
   339  00397F  35                 	db	53
   340  003980  36                 	db	54
   341  003981  42                 	db	66
   342  003982  37                 	db	55
   343  003983  38                 	db	56
   344  003984  39                 	db	57
   345  003985  43                 	db	67
   346  003986  2A                 	db	42
   347  003987  30                 	db	48
   348  003988  23                 	db	35
   349  003989  44                 	db	68
   350  0000                     _SPBRbits	set	4015
   351  0000                     _BAUDCONbits	set	4024
   352  0000                     _TRISCbits	set	3988
   353  0000                     _TXSTAbits	set	4012
   354  0000                     _TXREG	set	4013
   355  0000                     _RCSTAbits	set	4011
   356  0000                     _RCREG	set	4014
   357  0000                     _T1CONbits	set	4045
   358  0000                     _TMR1L	set	4046
   359  0000                     _TMR1H	set	4047
   360  0000                     _TRISD	set	3989
   361  0000                     _PORTD	set	3971
   362  0000                     _SSPBUF	set	4041
   363  0000                     _SSPCON2bits	set	4037
   364  0000                     _SSPSTATbits	set	4039
   365  0000                     _SSPADD	set	4040
   366  0000                     _SSPCON1bits	set	4038
   367  0000                     _TRISAbits	set	3986
   368  0000                     _PORTAbits	set	3968
   369  0000                     _PIE1bits	set	3997
   370  0000                     _PIR1bits	set	3998
   371  0000                     _EECON2	set	4007
   372  0000                     _INTCONbits	set	4082
   373  0000                     _EEDATA	set	4008
   374  0000                     _EECON1bits	set	4006
   375  0000                     _EEADR	set	4009
   376  0000                     _TRISBbits	set	3987
   377  0000                     _ADCON1	set	4033
   378                           
   379                           	psect	mediumconst
   380  007BDE                     __pmediumconst:
   381                           	callstack 0
   382  007BDE  00                 	db	0
   383  007BDF                     STR_6:
   384  007BDF  31                 	db	49	;'1'
   385  007BE0  3A                 	db	58	;':'
   386  007BE1  20                 	db	32
   387  007BE2  49                 	db	73	;'I'
   388  007BE3  4E                 	db	78	;'N'
   389  007BE4  53                 	db	83	;'S'
   390  007BE5  45                 	db	69	;'E'
   391  007BE6  52                 	db	82	;'R'
   392  007BE7  49                 	db	73	;'I'
   393  007BE8  52                 	db	82	;'R'
   394  007BE9  20                 	db	32
   395  007BEA  53                 	db	83	;'S'
   396  007BEB  45                 	db	69	;'E'
   397  007BEC  51                 	db	81	;'Q'
   398  007BED  55                 	db	85	;'U'
   399  007BEE  45                 	db	69	;'E'
   400  007BEF  4E                 	db	78	;'N'
   401  007BF0  43                 	db	67	;'C'
   402  007BF1  49                 	db	73	;'I'
   403  007BF2  41                 	db	65	;'A'
   404  007BF3  0A                 	db	10
   405  007BF4  32                 	db	50	;'2'
   406  007BF5  3A                 	db	58	;':'
   407  007BF6  20                 	db	32
   408  007BF7  42                 	db	66	;'B'
   409  007BF8  55                 	db	85	;'U'
   410  007BF9  53                 	db	83	;'S'
   411  007BFA  43                 	db	67	;'C'
   412  007BFB  41                 	db	65	;'A'
   413  007BFC  52                 	db	82	;'R'
   414  007BFD  20                 	db	32
   415  007BFE  53                 	db	83	;'S'
   416  007BFF  45                 	db	69	;'E'
   417  007C00  51                 	db	81	;'Q'
   418  007C01  55                 	db	85	;'U'
   419  007C02  45                 	db	69	;'E'
   420  007C03  4E                 	db	78	;'N'
   421  007C04  43                 	db	67	;'C'
   422  007C05  49                 	db	73	;'I'
   423  007C06  41                 	db	65	;'A'
   424  007C07  0A                 	db	10
   425  007C08  33                 	db	51	;'3'
   426  007C09  3A                 	db	58	;':'
   427  007C0A  20                 	db	32
   428  007C0B  52                 	db	82	;'R'
   429  007C0C  45                 	db	69	;'E'
   430  007C0D  50                 	db	80	;'P'
   431  007C0E  45                 	db	69	;'E'
   432  007C0F  54                 	db	84	;'T'
   433  007C10  49                 	db	73	;'I'
   434  007C11  52                 	db	82	;'R'
   435  007C12  20                 	db	32
   436  007C13  55                 	db	85	;'U'
   437  007C14  4C                 	db	76	;'L'
   438  007C15  54                 	db	84	;'T'
   439  007C16  2E                 	db	46
   440  007C17  20                 	db	32
   441  007C18  53                 	db	83	;'S'
   442  007C19  45                 	db	69	;'E'
   443  007C1A  51                 	db	81	;'Q'
   444  007C1B  55                 	db	85	;'U'
   445  007C1C  0A                 	db	10
   446  007C1D  34                 	db	52	;'4'
   447  007C1E  3A                 	db	58	;':'
   448  007C1F  20                 	db	32
   449  007C20  43                 	db	67	;'C'
   450  007C21  4F                 	db	79	;'O'
   451  007C22  4E                 	db	78	;'N'
   452  007C23  46                 	db	70	;'F'
   453  007C24  49                 	db	73	;'I'
   454  007C25  47                 	db	71	;'G'
   455  007C26  55                 	db	85	;'U'
   456  007C27  52                 	db	82	;'R'
   457  007C28  41                 	db	65	;'A'
   458  007C29  43                 	db	67	;'C'
   459  007C2A  4F                 	db	79	;'O'
   460  007C2B  45                 	db	69	;'E'
   461  007C2C  53                 	db	83	;'S'
   462  007C2D  20                 	db	32
   463  007C2E  20                 	db	32
   464  007C2F  20                 	db	32
   465  007C30  20                 	db	32
   466  007C31  00                 	db	0
   467  007C32                     STR_17:
   468  007C32  20                 	db	32
   469  007C33  45                 	db	69	;'E'
   470  007C34  53                 	db	83	;'S'
   471  007C35  43                 	db	67	;'C'
   472  007C36  4F                 	db	79	;'O'
   473  007C37  4C                 	db	76	;'L'
   474  007C38  48                 	db	72	;'H'
   475  007C39  41                 	db	65	;'A'
   476  007C3A  20                 	db	32
   477  007C3B  41                 	db	65	;'A'
   478  007C3C  20                 	db	32
   479  007C3D  4D                 	db	77	;'M'
   480  007C3E  45                 	db	69	;'E'
   481  007C3F  4D                 	db	77	;'M'
   482  007C40  4F                 	db	79	;'O'
   483  007C41  52                 	db	82	;'R'
   484  007C42  49                 	db	73	;'I'
   485  007C43  41                 	db	65	;'A'
   486  007C44  20                 	db	32
   487  007C45  0A                 	db	10
   488  007C46  51                 	db	81	;'Q'
   489  007C47  55                 	db	85	;'U'
   490  007C48  45                 	db	69	;'E'
   491  007C49  20                 	db	32
   492  007C4A  44                 	db	68	;'D'
   493  007C4B  45                 	db	69	;'E'
   494  007C4C  53                 	db	83	;'S'
   495  007C4D  45                 	db	69	;'E'
   496  007C4E  4A                 	db	74	;'J'
   497  007C4F  41                 	db	65	;'A'
   498  007C50  20                 	db	32
   499  007C51  45                 	db	69	;'E'
   500  007C52  58                 	db	88	;'X'
   501  007C53  45                 	db	69	;'E'
   502  007C54  43                 	db	67	;'C'
   503  007C55  55                 	db	85	;'U'
   504  007C56  54                 	db	84	;'T'
   505  007C57  41                 	db	65	;'A'
   506  007C58  52                 	db	82	;'R'
   507  007C59  0A                 	db	10
   508  007C5A  20                 	db	32
   509  007C5B  30                 	db	48	;'0'
   510  007C5C  20                 	db	32
   511  007C5D  20                 	db	32
   512  007C5E  20                 	db	32
   513  007C5F  31                 	db	49	;'1'
   514  007C60  20                 	db	32
   515  007C61  20                 	db	32
   516  007C62  20                 	db	32
   517  007C63  32                 	db	50	;'2'
   518  007C64  20                 	db	32
   519  007C65  20                 	db	32
   520  007C66  20                 	db	32
   521  007C67  33                 	db	51	;'3'
   522  007C68  20                 	db	32
   523  007C69  20                 	db	32
   524  007C6A  20                 	db	32
   525  007C6B  34                 	db	52	;'4'
   526  007C6C  20                 	db	32
   527  007C6D  0A                 	db	10
   528  007C6E  20                 	db	32
   529  007C6F  35                 	db	53	;'5'
   530  007C70  20                 	db	32
   531  007C71  20                 	db	32
   532  007C72  20                 	db	32
   533  007C73  36                 	db	54	;'6'
   534  007C74  20                 	db	32
   535  007C75  20                 	db	32
   536  007C76  20                 	db	32
   537  007C77  37                 	db	55	;'7'
   538  007C78  20                 	db	32
   539  007C79  20                 	db	32
   540  007C7A  20                 	db	32
   541  007C7B  38                 	db	56	;'8'
   542  007C7C  20                 	db	32
   543  007C7D  20                 	db	32
   544  007C7E  20                 	db	32
   545  007C7F  39                 	db	57	;'9'
   546  007C80  20                 	db	32
   547  007C81  0A                 	db	10
   548  007C82  00                 	db	0
   549  007C83                     STR_29:
   550  007C83  20                 	db	32
   551  007C84  45                 	db	69	;'E'
   552  007C85  53                 	db	83	;'S'
   553  007C86  43                 	db	67	;'C'
   554  007C87  4F                 	db	79	;'O'
   555  007C88  4C                 	db	76	;'L'
   556  007C89  48                 	db	72	;'H'
   557  007C8A  41                 	db	65	;'A'
   558  007C8B  20                 	db	32
   559  007C8C  41                 	db	65	;'A'
   560  007C8D  20                 	db	32
   561  007C8E  4D                 	db	77	;'M'
   562  007C8F  45                 	db	69	;'E'
   563  007C90  4D                 	db	77	;'M'
   564  007C91  4F                 	db	79	;'O'
   565  007C92  52                 	db	82	;'R'
   566  007C93  49                 	db	73	;'I'
   567  007C94  41                 	db	65	;'A'
   568  007C95  0A                 	db	10
   569  007C96  20                 	db	32
   570  007C97  51                 	db	81	;'Q'
   571  007C98  55                 	db	85	;'U'
   572  007C99  45                 	db	69	;'E'
   573  007C9A  20                 	db	32
   574  007C9B  44                 	db	68	;'D'
   575  007C9C  45                 	db	69	;'E'
   576  007C9D  53                 	db	83	;'S'
   577  007C9E  45                 	db	69	;'E'
   578  007C9F  4A                 	db	74	;'J'
   579  007CA0  41                 	db	65	;'A'
   580  007CA1  20                 	db	32
   581  007CA2  53                 	db	83	;'S'
   582  007CA3  41                 	db	65	;'A'
   583  007CA4  4C                 	db	76	;'L'
   584  007CA5  56                 	db	86	;'V'
   585  007CA6  41                 	db	65	;'A'
   586  007CA7  52                 	db	82	;'R'
   587  007CA8  0A                 	db	10
   588  007CA9  20                 	db	32
   589  007CAA  30                 	db	48	;'0'
   590  007CAB  20                 	db	32
   591  007CAC  20                 	db	32
   592  007CAD  20                 	db	32
   593  007CAE  31                 	db	49	;'1'
   594  007CAF  20                 	db	32
   595  007CB0  20                 	db	32
   596  007CB1  20                 	db	32
   597  007CB2  32                 	db	50	;'2'
   598  007CB3  20                 	db	32
   599  007CB4  20                 	db	32
   600  007CB5  20                 	db	32
   601  007CB6  33                 	db	51	;'3'
   602  007CB7  20                 	db	32
   603  007CB8  20                 	db	32
   604  007CB9  20                 	db	32
   605  007CBA  34                 	db	52	;'4'
   606  007CBB  0A                 	db	10
   607  007CBC  20                 	db	32
   608  007CBD  35                 	db	53	;'5'
   609  007CBE  20                 	db	32
   610  007CBF  20                 	db	32
   611  007CC0  20                 	db	32
   612  007CC1  36                 	db	54	;'6'
   613  007CC2  20                 	db	32
   614  007CC3  20                 	db	32
   615  007CC4  20                 	db	32
   616  007CC5  37                 	db	55	;'7'
   617  007CC6  20                 	db	32
   618  007CC7  20                 	db	32
   619  007CC8  20                 	db	32
   620  007CC9  38                 	db	56	;'8'
   621  007CCA  20                 	db	32
   622  007CCB  20                 	db	32
   623  007CCC  20                 	db	32
   624  007CCD  39                 	db	57	;'9'
   625  007CCE  20                 	db	32
   626  007CCF  20                 	db	32
   627  007CD0  00                 	db	0
   628  007CD1                     STR_28:
   629  007CD1  20                 	db	32
   630  007CD2  20                 	db	32
   631  007CD3  20                 	db	32
   632  007CD4  20                 	db	32
   633  007CD5  44                 	db	68	;'D'
   634  007CD6  45                 	db	69	;'E'
   635  007CD7  53                 	db	83	;'S'
   636  007CD8  45                 	db	69	;'E'
   637  007CD9  4A                 	db	74	;'J'
   638  007CDA  41                 	db	65	;'A'
   639  007CDB  20                 	db	32
   640  007CDC  53                 	db	83	;'S'
   641  007CDD  41                 	db	65	;'A'
   642  007CDE  4C                 	db	76	;'L'
   643  007CDF  56                 	db	86	;'V'
   644  007CE0  41                 	db	65	;'A'
   645  007CE1  52                 	db	82	;'R'
   646  007CE2  20                 	db	32
   647  007CE3  20                 	db	32
   648  007CE4  20                 	db	32
   649  007CE5  0A                 	db	10
   650  007CE6  20                 	db	32
   651  007CE7  20                 	db	32
   652  007CE8  20                 	db	32
   653  007CE9  20                 	db	32
   654  007CEA  20                 	db	32
   655  007CEB  53                 	db	83	;'S'
   656  007CEC  45                 	db	69	;'E'
   657  007CED  51                 	db	81	;'Q'
   658  007CEE  55                 	db	85	;'U'
   659  007CEF  45                 	db	69	;'E'
   660  007CF0  4E                 	db	78	;'N'
   661  007CF1  43                 	db	67	;'C'
   662  007CF2  49                 	db	73	;'I'
   663  007CF3  41                 	db	65	;'A'
   664  007CF4  20                 	db	32
   665  007CF5  3F                 	db	63	;'?'
   666  007CF6  20                 	db	32
   667  007CF7  20                 	db	32
   668  007CF8  0A                 	db	10
   669  007CF9  0A                 	db	10
   670  007CFA  23                 	db	35
   671  007CFB  20                 	db	32
   672  007CFC  2D                 	db	45
   673  007CFD  20                 	db	32
   674  007CFE  53                 	db	83	;'S'
   675  007CFF  49                 	db	73	;'I'
   676  007D00  4D                 	db	77	;'M'
   677  007D01  20                 	db	32
   678  007D02  20                 	db	32
   679  007D03  20                 	db	32
   680  007D04  20                 	db	32
   681  007D05  20                 	db	32
   682  007D06  20                 	db	32
   683  007D07  2A                 	db	42
   684  007D08  20                 	db	32
   685  007D09  2D                 	db	45
   686  007D0A  20                 	db	32
   687  007D0B  4E                 	db	78	;'N'
   688  007D0C  41                 	db	65	;'A'
   689  007D0D  4F                 	db	79	;'O'
   690  007D0E  00                 	db	0
   691  007D0F                     STR_42:
   692  007D0F  41                 	db	65	;'A'
   693  007D10  54                 	db	84	;'T'
   694  007D11  2B                 	db	43
   695  007D12  43                 	db	67	;'C'
   696  007D13  57                 	db	87	;'W'
   697  007D14  53                 	db	83	;'S'
   698  007D15  41                 	db	65	;'A'
   699  007D16  50                 	db	80	;'P'
   700  007D17  3D                 	db	61	;'='
   701  007D18  22                 	db	34
   702  007D19  57                 	db	87	;'W'
   703  007D1A  69                 	db	105	;'i'
   704  007D1B  72                 	db	114	;'r'
   705  007D1C  65                 	db	101	;'e'
   706  007D1D  6C                 	db	108	;'l'
   707  007D1E  65                 	db	101	;'e'
   708  007D1F  73                 	db	115	;'s'
   709  007D20  73                 	db	115	;'s'
   710  007D21  22                 	db	34
   711  007D22  2C                 	db	44
   712  007D23  22                 	db	34
   713  007D24  2A                 	db	42
   714  007D25  2A                 	db	42
   715  007D26  2A                 	db	42
   716  007D27  2A                 	db	42
   717  007D28  2A                 	db	42
   718  007D29  2A                 	db	42
   719  007D2A  2A                 	db	42
   720  007D2B  2A                 	db	42
   721  007D2C  22                 	db	34
   722  007D2D  2C                 	db	44
   723  007D2E  31                 	db	49	;'1'
   724  007D2F  2C                 	db	44
   725  007D30  32                 	db	50	;'2'
   726  007D31  2C                 	db	44
   727  007D32  34                 	db	52	;'4'
   728  007D33  2C                 	db	44
   729  007D34  30                 	db	48	;'0'
   730  007D35  0D                 	db	13
   731  007D36  0A                 	db	10
   732  007D37  00                 	db	0
   733  007D38                     STR_52:
   734  007D38  41                 	db	65	;'A'
   735  007D39  54                 	db	84	;'T'
   736  007D3A  2B                 	db	43
   737  007D3B  43                 	db	67	;'C'
   738  007D3C  49                 	db	73	;'I'
   739  007D3D  50                 	db	80	;'P'
   740  007D3E  53                 	db	83	;'S'
   741  007D3F  54                 	db	84	;'T'
   742  007D40  41                 	db	65	;'A'
   743  007D41  52                 	db	82	;'R'
   744  007D42  54                 	db	84	;'T'
   745  007D43  3D                 	db	61	;'='
   746  007D44  22                 	db	34
   747  007D45  54                 	db	84	;'T'
   748  007D46  43                 	db	67	;'C'
   749  007D47  50                 	db	80	;'P'
   750  007D48  22                 	db	34
   751  007D49  2C                 	db	44
   752  007D4A  22                 	db	34
   753  007D4B  31                 	db	49	;'1'
   754  007D4C  39                 	db	57	;'9'
   755  007D4D  32                 	db	50	;'2'
   756  007D4E  2E                 	db	46
   757  007D4F  31                 	db	49	;'1'
   758  007D50  36                 	db	54	;'6'
   759  007D51  38                 	db	56	;'8'
   760  007D52  2E                 	db	46
   761  007D53  34                 	db	52	;'4'
   762  007D54  2E                 	db	46
   763  007D55  31                 	db	49	;'1'
   764  007D56  22                 	db	34
   765  007D57  2C                 	db	44
   766  007D58  22                 	db	34
   767  007D59  33                 	db	51	;'3'
   768  007D5A  33                 	db	51	;'3'
   769  007D5B  33                 	db	51	;'3'
   770  007D5C  22                 	db	34
   771  007D5D  0D                 	db	13
   772  007D5E  0A                 	db	10
   773  007D5F  00                 	db	0
   774  007D60                     STR_40:
   775  007D60  41                 	db	65	;'A'
   776  007D61  54                 	db	84	;'T'
   777  007D62  2B                 	db	43
   778  007D63  43                 	db	67	;'C'
   779  007D64  57                 	db	87	;'W'
   780  007D65  53                 	db	83	;'S'
   781  007D66  41                 	db	65	;'A'
   782  007D67  50                 	db	80	;'P'
   783  007D68  3D                 	db	61	;'='
   784  007D69  22                 	db	34
   785  007D6A  54                 	db	84	;'T'
   786  007D6B  43                 	db	67	;'C'
   787  007D6C  43                 	db	67	;'C'
   788  007D6D  22                 	db	34
   789  007D6E  2C                 	db	44
   790  007D6F  22                 	db	34
   791  007D70  38                 	db	56	;'8'
   792  007D71  37                 	db	55	;'7'
   793  007D72  36                 	db	54	;'6'
   794  007D73  35                 	db	53	;'5'
   795  007D74  34                 	db	52	;'4'
   796  007D75  33                 	db	51	;'3'
   797  007D76  32                 	db	50	;'2'
   798  007D77  31                 	db	49	;'1'
   799  007D78  22                 	db	34
   800  007D79  2C                 	db	44
   801  007D7A  31                 	db	49	;'1'
   802  007D7B  2C                 	db	44
   803  007D7C  32                 	db	50	;'2'
   804  007D7D  2C                 	db	44
   805  007D7E  34                 	db	52	;'4'
   806  007D7F  2C                 	db	44
   807  007D80  30                 	db	48	;'0'
   808  007D81  0D                 	db	13
   809  007D82  0A                 	db	10
   810  007D83  00                 	db	0
   811  007D84  41                 	db	65	;'A'
   812  007D85  54                 	db	84	;'T'
   813  007D86  2B                 	db	43
   814  007D87  43                 	db	67	;'C'
   815  007D88  49                 	db	73	;'I'
   816  007D89  50                 	db	80	;'P'
   817  007D8A  53                 	db	83	;'S'
   818  007D8B  45                 	db	69	;'E'
   819  007D8C  52                 	db	82	;'R'
   820  007D8D  56                 	db	86	;'V'
   821  007D8E  45                 	db	69	;'E'
   822  007D8F  52                 	db	82	;'R'
   823  007D90  3D                 	db	61	;'='
   824  007D91  31                 	db	49	;'1'
   825  007D92  2C                 	db	44
   826  007D93  33                 	db	51	;'3'
   827  007D94  33                 	db	51	;'3'
   828  007D95  33                 	db	51	;'3'
   829  007D96  0D                 	db	13
   830  007D97  0A                 	db	10
   831  007D98  00                 	db	0
   832  007D99                     STR_26:
   833  007D99  43                 	db	67	;'C'
   834  007D9A  69                 	db	105	;'i'
   835  007D9B  63                 	db	99	;'c'
   836  007D9C  6C                 	db	108	;'l'
   837  007D9D  6F                 	db	111	;'o'
   838  007D9E  73                 	db	115	;'s'
   839  007D9F  3A                 	db	58	;':'
   840  007DA0  20                 	db	32
   841  007DA1  20                 	db	32
   842  007DA2  20                 	db	32
   843  007DA3  20                 	db	32
   844  007DA4  20                 	db	32
   845  007DA5  20                 	db	32
   846  007DA6  20                 	db	32
   847  007DA7  20                 	db	32
   848  007DA8  20                 	db	32
   849  007DA9  20                 	db	32
   850  007DAA  20                 	db	32
   851  007DAB  20                 	db	32
   852  007DAC  20                 	db	32
   853  007DAD  00                 	db	0
   854  007DAE                     STR_24:
   855  007DAE  3C                 	db	60	;'<'
   856  007DAF  20                 	db	32
   857  007DB0  20                 	db	32
   858  007DB1  2F                 	db	47
   859  007DB2  20                 	db	32
   860  007DB3  20                 	db	32
   861  007DB4  3E                 	db	62	;'>'
   862  007DB5  20                 	db	32
   863  007DB6  63                 	db	99	;'c'
   864  007DB7  3A                 	db	58	;':'
   865  007DB8  20                 	db	32
   866  007DB9  20                 	db	32
   867  007DBA  20                 	db	32
   868  007DBB  20                 	db	32
   869  007DBC  20                 	db	32
   870  007DBD  20                 	db	32
   871  007DBE  20                 	db	32
   872  007DBF  20                 	db	32
   873  007DC0  20                 	db	32
   874  007DC1  20                 	db	32
   875  007DC2  00                 	db	0
   876  007DC3                     STR_33:
   877  007DC3  20                 	db	32
   878  007DC4  20                 	db	32
   879  007DC5  20                 	db	32
   880  007DC6  20                 	db	32
   881  007DC7  20                 	db	32
   882  007DC8  20                 	db	32
   883  007DC9  20                 	db	32
   884  007DCA  20                 	db	32
   885  007DCB  53                 	db	83	;'S'
   886  007DCC  41                 	db	65	;'A'
   887  007DCD  4C                 	db	76	;'L'
   888  007DCE  56                 	db	86	;'V'
   889  007DCF  41                 	db	65	;'A'
   890  007DD0  20                 	db	32
   891  007DD1  20                 	db	32
   892  007DD2  20                 	db	32
   893  007DD3  20                 	db	32
   894  007DD4  20                 	db	32
   895  007DD5  20                 	db	32
   896  007DD6  20                 	db	32
   897  007DD7  00                 	db	0
   898  007DD8                     STR_5:
   899  007DD8  20                 	db	32
   900  007DD9  20                 	db	32
   901  007DDA  20                 	db	32
   902  007DDB  20                 	db	32
   903  007DDC  20                 	db	32
   904  007DDD  20                 	db	32
   905  007DDE  53                 	db	83	;'S'
   906  007DDF  45                 	db	69	;'E'
   907  007DE0  47                 	db	71	;'G'
   908  007DE1  47                 	db	71	;'G'
   909  007DE2  55                 	db	85	;'U'
   910  007DE3  49                 	db	73	;'I'
   911  007DE4  54                 	db	84	;'T'
   912  007DE5  20                 	db	32
   913  007DE6  20                 	db	32
   914  007DE7  20                 	db	32
   915  007DE8  20                 	db	32
   916  007DE9  20                 	db	32
   917  007DEA  20                 	db	32
   918  007DEB  20                 	db	32
   919  007DEC  00                 	db	0
   920  007DED                     STR_23:
   921  007DED  20                 	db	32
   922  007DEE  20                 	db	32
   923  007DEF  20                 	db	32
   924  007DF0  20                 	db	32
   925  007DF1  20                 	db	32
   926  007DF2  20                 	db	32
   927  007DF3  20                 	db	32
   928  007DF4  5B                 	db	91	;'['
   929  007DF5  20                 	db	32
   930  007DF6  20                 	db	32
   931  007DF7  20                 	db	32
   932  007DF8  20                 	db	32
   933  007DF9  5D                 	db	93	;']'
   934  007DFA  20                 	db	32
   935  007DFB  20                 	db	32
   936  007DFC  20                 	db	32
   937  007DFD  20                 	db	32
   938  007DFE  20                 	db	32
   939  007DFF  20                 	db	32
   940  007E00  20                 	db	32
   941  007E01  00                 	db	0
   942  007E02                     STR_15:
   943  007E02  20                 	db	32
   944  007E03  20                 	db	32
   945  007E04  20                 	db	32
   946  007E05  20                 	db	32
   947  007E06  20                 	db	32
   948  007E07  20                 	db	32
   949  007E08  20                 	db	32
   950  007E09  44                 	db	68	;'D'
   951  007E0A  45                 	db	69	;'E'
   952  007E0B  4C                 	db	76	;'L'
   953  007E0C  45                 	db	69	;'E'
   954  007E0D  54                 	db	84	;'T'
   955  007E0E  45                 	db	69	;'E'
   956  007E0F  44                 	db	68	;'D'
   957  007E10  20                 	db	32
   958  007E11  20                 	db	32
   959  007E12  20                 	db	32
   960  007E13  20                 	db	32
   961  007E14  20                 	db	32
   962  007E15  20                 	db	32
   963  007E16  00                 	db	0
   964  007E17                     STR_16:
   965  007E17  20                 	db	32
   966  007E18  20                 	db	32
   967  007E19  20                 	db	32
   968  007E1A  20                 	db	32
   969  007E1B  20                 	db	32
   970  007E1C  20                 	db	32
   971  007E1D  20                 	db	32
   972  007E1E  20                 	db	32
   973  007E1F  4D                 	db	77	;'M'
   974  007E20  45                 	db	69	;'E'
   975  007E21  4D                 	db	77	;'M'
   976  007E22  4F                 	db	79	;'O'
   977  007E23  52                 	db	82	;'R'
   978  007E24  59                 	db	89	;'Y'
   979  007E25  20                 	db	32
   980  007E26  20                 	db	32
   981  007E27  20                 	db	32
   982  007E28  20                 	db	32
   983  007E29  20                 	db	32
   984  007E2A  20                 	db	32
   985  007E2B  00                 	db	0
   986  007E2C                     STR_11:
   987  007E2C  20                 	db	32
   988  007E2D  20                 	db	32
   989  007E2E  20                 	db	32
   990  007E2F  20                 	db	32
   991  007E30  20                 	db	32
   992  007E31  20                 	db	32
   993  007E32  4D                 	db	77	;'M'
   994  007E33  45                 	db	69	;'E'
   995  007E34  4D                 	db	77	;'M'
   996  007E35  4F                 	db	79	;'O'
   997  007E36  52                 	db	82	;'R'
   998  007E37  49                 	db	73	;'I'
   999  007E38  41                 	db	65	;'A'
  1000  007E39  20                 	db	32
  1001  007E3A  3F                 	db	63	;'?'
  1002  007E3B  20                 	db	32
  1003  007E3C  20                 	db	32
  1004  007E3D  20                 	db	32
  1005  007E3E  20                 	db	32
  1006  007E3F  20                 	db	32
  1007  007E40  00                 	db	0
  1008  007E41                     STR_32:
  1009  007E41  20                 	db	32
  1010  007E42  20                 	db	32
  1011  007E43  20                 	db	32
  1012  007E44  20                 	db	32
  1013  007E45  20                 	db	32
  1014  007E46  20                 	db	32
  1015  007E47  53                 	db	83	;'S'
  1016  007E48  45                 	db	69	;'E'
  1017  007E49  51                 	db	81	;'Q'
  1018  007E4A  55                 	db	85	;'U'
  1019  007E4B  45                 	db	69	;'E'
  1020  007E4C  4E                 	db	78	;'N'
  1021  007E4D  43                 	db	67	;'C'
  1022  007E4E  49                 	db	73	;'I'
  1023  007E4F  41                 	db	65	;'A'
  1024  007E50  20                 	db	32
  1025  007E51  20                 	db	32
  1026  007E52  20                 	db	32
  1027  007E53  20                 	db	32
  1028  007E54  20                 	db	32
  1029  007E55  00                 	db	0
  1030  007E56                     STR_19:
  1031  007E56  20                 	db	32
  1032  007E57  20                 	db	32
  1033  007E58  20                 	db	32
  1034  007E59  20                 	db	32
  1035  007E5A  20                 	db	32
  1036  007E5B  44                 	db	68	;'D'
  1037  007E5C  4F                 	db	79	;'O'
  1038  007E5D  20                 	db	32
  1039  007E5E  53                 	db	83	;'S'
  1040  007E5F  49                 	db	73	;'I'
  1041  007E60  53                 	db	83	;'S'
  1042  007E61  54                 	db	84	;'T'
  1043  007E62  45                 	db	69	;'E'
  1044  007E63  4D                 	db	77	;'M'
  1045  007E64  41                 	db	65	;'A'
  1046  007E65  20                 	db	32
  1047  007E66  20                 	db	32
  1048  007E67  20                 	db	32
  1049  007E68  20                 	db	32
  1050  007E69  20                 	db	32
  1051  007E6A  00                 	db	0
  1052  007E6B                     STR_20:
  1053  007E6B  20                 	db	32
  1054  007E6C  20                 	db	32
  1055  007E6D  20                 	db	32
  1056  007E6E  41                 	db	65	;'A'
  1057  007E6F  20                 	db	32
  1058  007E70  20                 	db	32
  1059  007E71  20                 	db	32
  1060  007E72  42                 	db	66	;'B'
  1061  007E73  20                 	db	32
  1062  007E74  20                 	db	32
  1063  007E75  20                 	db	32
  1064  007E76  43                 	db	67	;'C'
  1065  007E77  20                 	db	32
  1066  007E78  20                 	db	32
  1067  007E79  20                 	db	32
  1068  007E7A  44                 	db	68	;'D'
  1069  007E7B  20                 	db	32
  1070  007E7C  20                 	db	32
  1071  007E7D  20                 	db	32
  1072  007E7E  20                 	db	32
  1073  007E7F  00                 	db	0
  1074  007E80                     STR_10:
  1075  007E80  20                 	db	32
  1076  007E81  20                 	db	32
  1077  007E82  20                 	db	32
  1078  007E83  44                 	db	68	;'D'
  1079  007E84  45                 	db	69	;'E'
  1080  007E85  4C                 	db	76	;'L'
  1081  007E86  45                 	db	69	;'E'
  1082  007E87  54                 	db	84	;'T'
  1083  007E88  41                 	db	65	;'A'
  1084  007E89  52                 	db	82	;'R'
  1085  007E8A  20                 	db	32
  1086  007E8B  54                 	db	84	;'T'
  1087  007E8C  4F                 	db	79	;'O'
  1088  007E8D  44                 	db	68	;'D'
  1089  007E8E  41                 	db	65	;'A'
  1090  007E8F  20                 	db	32
  1091  007E90  41                 	db	65	;'A'
  1092  007E91  20                 	db	32
  1093  007E92  20                 	db	32
  1094  007E93  20                 	db	32
  1095  007E94  00                 	db	0
  1096  007E95                     STR_8:
  1097  007E95  32                 	db	50	;'2'
  1098  007E96  3A                 	db	58	;':'
  1099  007E97  20                 	db	32
  1100  007E98  4C                 	db	76	;'L'
  1101  007E99  49                 	db	73	;'I'
  1102  007E9A  4D                 	db	77	;'M'
  1103  007E9B  50                 	db	80	;'P'
  1104  007E9C  41                 	db	65	;'A'
  1105  007E9D  52                 	db	82	;'R'
  1106  007E9E  20                 	db	32
  1107  007E9F  4D                 	db	77	;'M'
  1108  007EA0  45                 	db	69	;'E'
  1109  007EA1  4D                 	db	77	;'M'
  1110  007EA2  4F                 	db	79	;'O'
  1111  007EA3  52                 	db	82	;'R'
  1112  007EA4  49                 	db	73	;'I'
  1113  007EA5  41                 	db	65	;'A'
  1114  007EA6  20                 	db	32
  1115  007EA7  20                 	db	32
  1116  007EA8  20                 	db	32
  1117  007EA9  00                 	db	0
  1118  007EAA                     STR_18:
  1119  007EAA  20                 	db	32
  1120  007EAB  20                 	db	32
  1121  007EAC  20                 	db	32
  1122  007EAD  41                 	db	65	;'A'
  1123  007EAE  4A                 	db	74	;'J'
  1124  007EAF  55                 	db	85	;'U'
  1125  007EB0  53                 	db	83	;'S'
  1126  007EB1  54                 	db	84	;'T'
  1127  007EB2  45                 	db	69	;'E'
  1128  007EB3  20                 	db	32
  1129  007EB4  4F                 	db	79	;'O'
  1130  007EB5  20                 	db	32
  1131  007EB6  49                 	db	73	;'I'
  1132  007EB7  4E                 	db	78	;'N'
  1133  007EB8  49                 	db	73	;'I'
  1134  007EB9  43                 	db	67	;'C'
  1135  007EBA  49                 	db	73	;'I'
  1136  007EBB  4F                 	db	79	;'O'
  1137  007EBC  20                 	db	32
  1138  007EBD  20                 	db	32
  1139  007EBE  00                 	db	0
  1140  007EBF                     STR_21:
  1141  007EBF  20                 	db	32
  1142  007EC0  20                 	db	32
  1143  007EC1  49                 	db	73	;'I'
  1144  007EC2  4E                 	db	78	;'N'
  1145  007EC3  53                 	db	83	;'S'
  1146  007EC4  49                 	db	73	;'I'
  1147  007EC5  52                 	db	82	;'R'
  1148  007EC6  41                 	db	65	;'A'
  1149  007EC7  20                 	db	32
  1150  007EC8  4F                 	db	79	;'O'
  1151  007EC9  53                 	db	83	;'S'
  1152  007ECA  20                 	db	32
  1153  007ECB  50                 	db	80	;'P'
  1154  007ECC  41                 	db	65	;'A'
  1155  007ECD  53                 	db	83	;'S'
  1156  007ECE  53                 	db	83	;'S'
  1157  007ECF  4F                 	db	79	;'O'
  1158  007ED0  53                 	db	83	;'S'
  1159  007ED1  20                 	db	32
  1160  007ED2  20                 	db	32
  1161  007ED3  00                 	db	0
  1162  007ED4                     STR_27:
  1163  007ED4  30                 	db	48	;'0'
  1164  007ED5  20                 	db	32
  1165  007ED6  2D                 	db	45
  1166  007ED7  20                 	db	32
  1167  007ED8  43                 	db	67	;'C'
  1168  007ED9  69                 	db	105	;'i'
  1169  007EDA  63                 	db	99	;'c'
  1170  007EDB  6C                 	db	108	;'l'
  1171  007EDC  6F                 	db	111	;'o'
  1172  007EDD  20                 	db	32
  1173  007EDE  63                 	db	99	;'c'
  1174  007EDF  6F                 	db	111	;'o'
  1175  007EE0  6E                 	db	110	;'n'
  1176  007EE1  74                 	db	116	;'t'
  1177  007EE2  69                 	db	105	;'i'
  1178  007EE3  6E                 	db	110	;'n'
  1179  007EE4  75                 	db	117	;'u'
  1180  007EE5  6F                 	db	111	;'o'
  1181  007EE6  20                 	db	32
  1182  007EE7  20                 	db	32
  1183  007EE8  00                 	db	0
  1184  007EE9                     STR_9:
  1185  007EE9  20                 	db	32
  1186  007EEA  43                 	db	67	;'C'
  1187  007EEB  45                 	db	69	;'E'
  1188  007EEC  52                 	db	82	;'R'
  1189  007EED  54                 	db	84	;'T'
  1190  007EEE  45                 	db	69	;'E'
  1191  007EEF  5A                 	db	90	;'Z'
  1192  007EF0  41                 	db	65	;'A'
  1193  007EF1  20                 	db	32
  1194  007EF2  51                 	db	81	;'Q'
  1195  007EF3  55                 	db	85	;'U'
  1196  007EF4  45                 	db	69	;'E'
  1197  007EF5  20                 	db	32
  1198  007EF6  44                 	db	68	;'D'
  1199  007EF7  45                 	db	69	;'E'
  1200  007EF8  53                 	db	83	;'S'
  1201  007EF9  45                 	db	69	;'E'
  1202  007EFA  4A                 	db	74	;'J'
  1203  007EFB  41                 	db	65	;'A'
  1204  007EFC  20                 	db	32
  1205  007EFD  00                 	db	0
  1206  007EFE                     STR_34:
  1207  007EFE  63                 	db	99	;'c'
  1208  007EFF  6F                 	db	111	;'o'
  1209  007F00  6E                 	db	110	;'n'
  1210  007F01  66                 	db	102	;'f'
  1211  007F02  69                 	db	105	;'i'
  1212  007F03  67                 	db	103	;'g'
  1213  007F04  20                 	db	32
  1214  007F05  63                 	db	99	;'c'
  1215  007F06  6F                 	db	111	;'o'
  1216  007F07  6E                 	db	110	;'n'
  1217  007F08  74                 	db	116	;'t'
  1218  007F09  72                 	db	114	;'r'
  1219  007F0A  6C                 	db	108	;'l'
  1220  007F0B  3A                 	db	58	;':'
  1221  007F0C  20                 	db	32
  1222  007F0D  20                 	db	32
  1223  007F0E  20                 	db	32
  1224  007F0F  20                 	db	32
  1225  007F10  20                 	db	32
  1226  007F11  25                 	db	37
  1227  007F12  00                 	db	0
  1228  007F13                     STR_7:
  1229  007F13  31                 	db	49	;'1'
  1230  007F14  3A                 	db	58	;':'
  1231  007F15  20                 	db	32
  1232  007F16  56                 	db	86	;'V'
  1233  007F17  45                 	db	69	;'E'
  1234  007F18  52                 	db	82	;'R'
  1235  007F19  49                 	db	73	;'I'
  1236  007F1A  46                 	db	70	;'F'
  1237  007F1B  49                 	db	73	;'I'
  1238  007F1C  43                 	db	67	;'C'
  1239  007F1D  41                 	db	65	;'A'
  1240  007F1E  52                 	db	82	;'R'
  1241  007F1F  20                 	db	32
  1242  007F20  4D                 	db	77	;'M'
  1243  007F21  45                 	db	69	;'E'
  1244  007F22  4D                 	db	77	;'M'
  1245  007F23  4F                 	db	79	;'O'
  1246  007F24  52                 	db	82	;'R'
  1247  007F25  49                 	db	73	;'I'
  1248  007F26  41                 	db	65	;'A'
  1249  007F27  00                 	db	0
  1250  007F28                     STR_25:
  1251  007F28  63                 	db	99	;'c'
  1252  007F29  6F                 	db	111	;'o'
  1253  007F2A  6E                 	db	110	;'n'
  1254  007F2B  66                 	db	102	;'f'
  1255  007F2C  69                 	db	105	;'i'
  1256  007F2D  67                 	db	103	;'g'
  1257  007F2E  20                 	db	32
  1258  007F2F  74                 	db	116	;'t'
  1259  007F30  65                 	db	101	;'e'
  1260  007F31  6D                 	db	109	;'m'
  1261  007F32  70                 	db	112	;'p'
  1262  007F33  6F                 	db	111	;'o'
  1263  007F34  3A                 	db	58	;':'
  1264  007F35  20                 	db	32
  1265  007F36  20                 	db	32
  1266  007F37  20                 	db	32
  1267  007F38  20                 	db	32
  1268  007F39  20                 	db	32
  1269  007F3A  20                 	db	32
  1270  007F3B  73                 	db	115	;'s'
  1271  007F3C  00                 	db	0
  1272  007F3D  41                 	db	65	;'A'
  1273  007F3E  54                 	db	84	;'T'
  1274  007F3F  2B                 	db	43
  1275  007F40  43                 	db	67	;'C'
  1276  007F41  57                 	db	87	;'W'
  1277  007F42  41                 	db	65	;'A'
  1278  007F43  55                 	db	85	;'U'
  1279  007F44  54                 	db	84	;'T'
  1280  007F45  4F                 	db	79	;'O'
  1281  007F46  43                 	db	67	;'C'
  1282  007F47  4F                 	db	79	;'O'
  1283  007F48  4E                 	db	78	;'N'
  1284  007F49  4E                 	db	78	;'N'
  1285  007F4A  3D                 	db	61	;'='
  1286  007F4B  30                 	db	48	;'0'
  1287  007F4C  0D                 	db	13
  1288  007F4D  0A                 	db	10
  1289  007F4E  00                 	db	0
  1290  007F4F                     STR_36:
  1291  007F4F  41                 	db	65	;'A'
  1292  007F50  54                 	db	84	;'T'
  1293  007F51  2B                 	db	43
  1294  007F52  43                 	db	67	;'C'
  1295  007F53  49                 	db	73	;'I'
  1296  007F54  50                 	db	80	;'P'
  1297  007F55  53                 	db	83	;'S'
  1298  007F56  45                 	db	69	;'E'
  1299  007F57  52                 	db	82	;'R'
  1300  007F58  56                 	db	86	;'V'
  1301  007F59  45                 	db	69	;'E'
  1302  007F5A  52                 	db	82	;'R'
  1303  007F5B  3D                 	db	61	;'='
  1304  007F5C  30                 	db	48	;'0'
  1305  007F5D  0D                 	db	13
  1306  007F5E  0A                 	db	10
  1307  007F5F  00                 	db	0
  1308  007F60  41                 	db	65	;'A'
  1309  007F61  54                 	db	84	;'T'
  1310  007F62  2B                 	db	43
  1311  007F63  43                 	db	67	;'C'
  1312  007F64  49                 	db	73	;'I'
  1313  007F65  50                 	db	80	;'P'
  1314  007F66  4D                 	db	77	;'M'
  1315  007F67  4F                 	db	79	;'O'
  1316  007F68  44                 	db	68	;'D'
  1317  007F69  45                 	db	69	;'E'
  1318  007F6A  3D                 	db	61	;'='
  1319  007F6B  30                 	db	48	;'0'
  1320  007F6C  0D                 	db	13
  1321  007F6D  0A                 	db	10
  1322  007F6E  00                 	db	0
  1323  007F6F                     STR_38:
  1324  007F6F  41                 	db	65	;'A'
  1325  007F70  54                 	db	84	;'T'
  1326  007F71  2B                 	db	43
  1327  007F72  43                 	db	67	;'C'
  1328  007F73  49                 	db	73	;'I'
  1329  007F74  50                 	db	80	;'P'
  1330  007F75  4D                 	db	77	;'M'
  1331  007F76  4F                 	db	79	;'O'
  1332  007F77  44                 	db	68	;'D'
  1333  007F78  45                 	db	69	;'E'
  1334  007F79  3D                 	db	61	;'='
  1335  007F7A  31                 	db	49	;'1'
  1336  007F7B  0D                 	db	13
  1337  007F7C  0A                 	db	10
  1338  007F7D  00                 	db	0
  1339  007F7E                     STR_37:
  1340  007F7E  41                 	db	65	;'A'
  1341  007F7F  54                 	db	84	;'T'
  1342  007F80  2B                 	db	43
  1343  007F81  43                 	db	67	;'C'
  1344  007F82  49                 	db	73	;'I'
  1345  007F83  50                 	db	80	;'P'
  1346  007F84  4D                 	db	77	;'M'
  1347  007F85  55                 	db	85	;'U'
  1348  007F86  58                 	db	88	;'X'
  1349  007F87  3D                 	db	61	;'='
  1350  007F88  30                 	db	48	;'0'
  1351  007F89  0D                 	db	13
  1352  007F8A  0A                 	db	10
  1353  007F8B  00                 	db	0
  1354  007F8C                     STR_35:
  1355  007F8C  41                 	db	65	;'A'
  1356  007F8D  54                 	db	84	;'T'
  1357  007F8E  2B                 	db	43
  1358  007F8F  43                 	db	67	;'C'
  1359  007F90  57                 	db	87	;'W'
  1360  007F91  4D                 	db	77	;'M'
  1361  007F92  4F                 	db	79	;'O'
  1362  007F93  44                 	db	68	;'D'
  1363  007F94  45                 	db	69	;'E'
  1364  007F95  3D                 	db	61	;'='
  1365  007F96  31                 	db	49	;'1'
  1366  007F97  0D                 	db	13
  1367  007F98  0A                 	db	10
  1368  007F99  00                 	db	0
  1369  007F9A  41                 	db	65	;'A'
  1370  007F9B  54                 	db	84	;'T'
  1371  007F9C  2B                 	db	43
  1372  007F9D  43                 	db	67	;'C'
  1373  007F9E  49                 	db	73	;'I'
  1374  007F9F  50                 	db	80	;'P'
  1375  007FA0  4D                 	db	77	;'M'
  1376  007FA1  55                 	db	85	;'U'
  1377  007FA2  58                 	db	88	;'X'
  1378  007FA3  3D                 	db	61	;'='
  1379  007FA4  31                 	db	49	;'1'
  1380  007FA5  0D                 	db	13
  1381  007FA6  0A                 	db	10
  1382  007FA7  00                 	db	0
  1383  007FA8                     STR_39:
  1384  007FA8  41                 	db	65	;'A'
  1385  007FA9  54                 	db	84	;'T'
  1386  007FAA  2B                 	db	43
  1387  007FAB  43                 	db	67	;'C'
  1388  007FAC  57                 	db	87	;'W'
  1389  007FAD  4D                 	db	77	;'M'
  1390  007FAE  4F                 	db	79	;'O'
  1391  007FAF  44                 	db	68	;'D'
  1392  007FB0  45                 	db	69	;'E'
  1393  007FB1  3D                 	db	61	;'='
  1394  007FB2  32                 	db	50	;'2'
  1395  007FB3  0D                 	db	13
  1396  007FB4  0A                 	db	10
  1397  007FB5  00                 	db	0
  1398  007FB6                     STR_41:
  1399  007FB6  41                 	db	65	;'A'
  1400  007FB7  54                 	db	84	;'T'
  1401  007FB8  2B                 	db	43
  1402  007FB9  43                 	db	67	;'C'
  1403  007FBA  57                 	db	87	;'W'
  1404  007FBB  4D                 	db	77	;'M'
  1405  007FBC  4F                 	db	79	;'O'
  1406  007FBD  44                 	db	68	;'D'
  1407  007FBE  45                 	db	69	;'E'
  1408  007FBF  3D                 	db	61	;'='
  1409  007FC0  33                 	db	51	;'3'
  1410  007FC1  0D                 	db	13
  1411  007FC2  0A                 	db	10
  1412  007FC3  00                 	db	0
  1413  007FC4                     STR_53:
  1414  007FC4  41                 	db	65	;'A'
  1415  007FC5  54                 	db	84	;'T'
  1416  007FC6  2B                 	db	43
  1417  007FC7  43                 	db	67	;'C'
  1418  007FC8  49                 	db	73	;'I'
  1419  007FC9  50                 	db	80	;'P'
  1420  007FCA  43                 	db	67	;'C'
  1421  007FCB  4C                 	db	76	;'L'
  1422  007FCC  4F                 	db	79	;'O'
  1423  007FCD  53                 	db	83	;'S'
  1424  007FCE  45                 	db	69	;'E'
  1425  007FCF  0D                 	db	13
  1426  007FD0  0A                 	db	10
  1427  007FD1  00                 	db	0
  1428  007FD2  41                 	db	65	;'A'
  1429  007FD3  54                 	db	84	;'T'
  1430  007FD4  2B                 	db	43
  1431  007FD5  43                 	db	67	;'C'
  1432  007FD6  57                 	db	87	;'W'
  1433  007FD7  4C                 	db	76	;'L'
  1434  007FD8  41                 	db	65	;'A'
  1435  007FD9  50                 	db	80	;'P'
  1436  007FDA  0D                 	db	13
  1437  007FDB  0A                 	db	10
  1438  007FDC  00                 	db	0
  1439  007FDD  41                 	db	65	;'A'
  1440  007FDE  54                 	db	84	;'T'
  1441  007FDF  2B                 	db	43
  1442  007FE0  43                 	db	67	;'C'
  1443  007FE1  49                 	db	73	;'I'
  1444  007FE2  46                 	db	70	;'F'
  1445  007FE3  53                 	db	83	;'S'
  1446  007FE4  52                 	db	82	;'R'
  1447  007FE5  0D                 	db	13
  1448  007FE6  0A                 	db	10
  1449  007FE7  00                 	db	0
  1450  007FE8                     STR_2:
  1451  007FE8  39                 	db	57	;'9'
  1452  007FE9  38                 	db	56	;'8'
  1453  007FEA  37                 	db	55	;'7'
  1454  007FEB  36                 	db	54	;'6'
  1455  007FEC  35                 	db	53	;'5'
  1456  007FED  34                 	db	52	;'4'
  1457  007FEE  33                 	db	51	;'3'
  1458  007FEF  32                 	db	50	;'2'
  1459  007FF0  00                 	db	0
  1460  007FF1                     STR_22:
  1461  007FF1  3C                 	db	60	;'<'
  1462  007FF2  20                 	db	32
  1463  007FF3  20                 	db	32
  1464  007FF4  2F                 	db	47
  1465  007FF5  20                 	db	32
  1466  007FF6  20                 	db	32
  1467  007FF7  3E                 	db	62	;'>'
  1468  007FF8  00                 	db	0
  1469  007FF9                     STR_1:
  1470  007FF9  54                 	db	84	;'T'
  1471  007FFA  43                 	db	67	;'C'
  1472  007FFB  43                 	db	67	;'C'
  1473  007FFC  00                 	db	0
  1474  007FFD                     STR_3:
  1475  007FFD  FF                 	db	-1
  1476  007FFE  00                 	db	0
  1477  007FFF  00                 	db	0	; dummy byte at the end
  1478  0000                     
  1479                           ; #config settings
  1480                           
  1481                           	psect	cinit
  1482  003460                     __pcinit:
  1483                           	callstack 0
  1484  003460                     start_initialization:
  1485                           	callstack 0
  1486  003460                     __initialization:
  1487                           	callstack 0
  1488                           
  1489                           ; Initialize objects allocated to BANK1 (86 bytes)
  1490                           ; load TBLPTR registers with __pidataBANK1
  1491  003460  0E34               	movlw	low __pidataBANK1
  1492  003462  6EF6               	movwf	tblptrl,c
  1493  003464  0E39               	movlw	high __pidataBANK1
  1494  003466  6EF7               	movwf	tblptrh,c
  1495  003468  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1496  00346A  6EF8               	movwf	tblptru,c
  1497  00346C  EE01  F000         	lfsr	0,__pdataBANK1
  1498  003470  EE10 F056          	lfsr	1,86
  1499  003474                     copy_data0:
  1500  003474  0009               	tblrd		*+
  1501  003476  CFF5 FFEE          	movff	tablat,postinc0
  1502  00347A  50E5               	movf	postdec1,w,c
  1503  00347C  50E1               	movf	fsr1l,w,c
  1504  00347E  E1FA               	bnz	copy_data0
  1505                           
  1506                           ; Initialize objects allocated to BANK0 (56 bytes)
  1507                           ; load TBLPTR registers with __pidataBANK0
  1508  003480  0E82               	movlw	low __pidataBANK0
  1509  003482  6EF6               	movwf	tblptrl,c
  1510  003484  0E3C               	movlw	high __pidataBANK0
  1511  003486  6EF7               	movwf	tblptrh,c
  1512  003488  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1513  00348A  6EF8               	movwf	tblptru,c
  1514  00348C  EE00  F0BD         	lfsr	0,__pdataBANK0
  1515  003490  EE10 F038          	lfsr	1,56
  1516  003494                     copy_data1:
  1517  003494  0009               	tblrd		*+
  1518  003496  CFF5 FFEE          	movff	tablat,postinc0
  1519  00349A  50E5               	movf	postdec1,w,c
  1520  00349C  50E1               	movf	fsr1l,w,c
  1521  00349E  E1FA               	bnz	copy_data1
  1522                           
  1523                           ; Initialize objects allocated to COMRAM (3 bytes)
  1524                           ; load TBLPTR registers with __pidataCOMRAM
  1525  0034A0  0E0A               	movlw	low __pidataCOMRAM
  1526  0034A2  6EF6               	movwf	tblptrl,c
  1527  0034A4  0E41               	movlw	high __pidataCOMRAM
  1528  0034A6  6EF7               	movwf	tblptrh,c
  1529  0034A8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1530  0034AA  6EF8               	movwf	tblptru,c
  1531  0034AC  0009               	tblrd		*+	;fetch initializer
  1532  0034AE  CFF5 F05B          	movff	tablat,__pdataCOMRAM
  1533  0034B2  0009               	tblrd		*+	;fetch initializer
  1534  0034B4  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
  1535  0034B8  0009               	tblrd		*+	;fetch initializer
  1536  0034BA  CFF5 F05D          	movff	tablat,__pdataCOMRAM+2
  1537                           
  1538                           ; Clear objects allocated to BANK1 (20 bytes)
  1539  0034BE  EE01  F056         	lfsr	0,__pbssBANK1
  1540  0034C2  0E14               	movlw	20
  1541  0034C4                     clear_0:
  1542  0034C4  6AEE               	clrf	postinc0,c
  1543  0034C6  06E8               	decf	wreg,f,c
  1544  0034C8  E1FD               	bnz	clear_0
  1545                           
  1546                           ; Clear objects allocated to BANK0 (2 bytes)
  1547  0034CA  0100               	movlb	0
  1548  0034CC  6BF6               	clrf	(__pbssBANK0+1)& (0+255),b
  1549  0034CE  6BF5               	clrf	__pbssBANK0& (0+255),b
  1550                           
  1551                           ; Clear objects allocated to COMRAM (48 bytes)
  1552  0034D0  EE00  F001         	lfsr	0,__pbssCOMRAM
  1553  0034D4  0E30               	movlw	48
  1554  0034D6                     clear_1:
  1555  0034D6  6AEE               	clrf	postinc0,c
  1556  0034D8  06E8               	decf	wreg,f,c
  1557  0034DA  E1FD               	bnz	clear_1
  1558  0034DC                     end_of_initialization:
  1559                           	callstack 0
  1560  0034DC                     __end_of__initialization:
  1561                           	callstack 0
  1562  0034DC  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1563  0034DE  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1564  0034E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1565  0034E2  6EF8               	movwf	tblptru,c
  1566  0034E4  0100               	movlb	0
  1567  0034E6  EF09  F000         	goto	_main	;jump to C main() function
  1568                           
  1569                           	psect	bssCOMRAM
  1570  000001                     __pbssCOMRAM:
  1571                           	callstack 0
  1572  000001                     	ds	10
  1573  00000B                     _t1cont:
  1574                           	callstack 0
  1575  00000B                     	ds	4
  1576  00000F                     	ds	4
  1577  000013                     _ptrSerialOut:
  1578                           	callstack 0
  1579  000013                     	ds	2
  1580  000015                     _ptrSerialIn:
  1581                           	callstack 0
  1582  000015                     	ds	2
  1583  000017                     _cont_ciclos:
  1584                           	callstack 0
  1585  000017                     	ds	2
  1586  000019                     _ciclos:
  1587                           	callstack 0
  1588  000019                     	ds	2
  1589  00001B                     _teclaAnterior:
  1590                           	callstack 0
  1591  00001B                     	ds	1
  1592  00001C                     _lenSerialIO:
  1593                           	callstack 0
  1594  00001C                     	ds	1
  1595  00001D                     _d:
  1596                           	callstack 0
  1597  00001D                     	ds	1
  1598  00001E                     _atuador:
  1599                           	callstack 0
  1600  00001E                     	ds	1
  1601  00001F                     _fila:
  1602                           	callstack 0
  1603  00001F                     	ds	18
  1604                           
  1605                           	psect	dataCOMRAM
  1606  00005B                     __pdataCOMRAM:
  1607                           	callstack 0
  1608  00005B                     _indice_passos:
  1609                           	callstack 0
  1610  00005B                     	ds	1
  1611  00005C                     _ind_print:
  1612                           	callstack 0
  1613  00005C                     	ds	1
  1614  00005D                     _ind_fila:
  1615                           	callstack 0
  1616  00005D                     	ds	1
  1617                           
  1618                           	psect	bssBANK0
  1619  0000F5                     __pbssBANK0:
  1620                           	callstack 0
  1621  0000F5                     	ds	1
  1622  0000F6                     	ds	1
  1623                           
  1624                           	psect	dataBANK0
  1625  0000BD                     __pdataBANK0:
  1626                           	callstack 0
  1627  0000BD                     _wifi:
  1628                           	callstack 0
  1629  0000BD                     	ds	20
  1630  0000D1                     _eusart:
  1631                           	callstack 0
  1632  0000D1                     	ds	16
  1633  0000E1                     _IHM:
  1634                           	callstack 0
  1635  0000E1                     	ds	10
  1636  0000EB                     _EEPROM:
  1637                           	callstack 0
  1638  0000EB                     	ds	10
  1639                           
  1640                           	psect	bssBANK1
  1641  000156                     __pbssBANK1:
  1642                           	callstack 0
  1643  000156                     _aux:
  1644                           	callstack 0
  1645  000156                     	ds	20
  1646                           
  1647                           	psect	dataBANK1
  1648  000100                     __pdataBANK1:
  1649                           	callstack 0
  1650  000100                     Wifi_connect@F3287:
  1651                           	callstack 0
  1652  000100                     	ds	30
  1653  00011E                     Wifi_cipsend@F3299:
  1654                           	callstack 0
  1655  00011E                     	ds	20
  1656  000132                     main@F3513:
  1657                           	callstack 0
  1658  000132                     	ds	20
  1659  000146                     _teclas:
  1660                           	callstack 0
  1661  000146                     	ds	16
  1662                           
  1663                           	psect	cstackBANK0
  1664  000060                     __pcstackBANK0:
  1665                           	callstack 0
  1666  000060                     main@lema:
  1667                           	callstack 0
  1668                           
  1669                           ; 20 bytes @ 0x0
  1670  000060                     	ds	20
  1671  000074                     main@contPassos:
  1672                           	callstack 0
  1673                           
  1674                           ; 1 bytes @ 0x14
  1675  000074                     	ds	1
  1676  000075                     main@aux:
  1677                           	callstack 0
  1678                           
  1679                           ; 1 bytes @ 0x15
  1680  000075                     	ds	1
  1681  000076                     main@vetor_aux:
  1682                           	callstack 0
  1683                           
  1684                           ; 16 bytes @ 0x16
  1685  000076                     	ds	16
  1686  000086                     _main$919:
  1687                           	callstack 0
  1688                           
  1689                           ; 2 bytes @ 0x26
  1690  000086                     	ds	2
  1691  000088                     _main$941:
  1692                           	callstack 0
  1693                           
  1694                           ; 2 bytes @ 0x28
  1695  000088                     	ds	2
  1696  00008A                     _main$945:
  1697                           	callstack 0
  1698                           
  1699                           ; 2 bytes @ 0x2A
  1700  00008A                     	ds	2
  1701  00008C                     _main$946:
  1702                           	callstack 0
  1703                           
  1704                           ; 2 bytes @ 0x2C
  1705  00008C                     	ds	2
  1706  00008E                     _main$947:
  1707                           	callstack 0
  1708                           
  1709                           ; 2 bytes @ 0x2E
  1710  00008E                     	ds	2
  1711  000090                     _main$948:
  1712                           	callstack 0
  1713                           
  1714                           ; 2 bytes @ 0x30
  1715  000090                     	ds	2
  1716  000092                     _main$949:
  1717                           	callstack 0
  1718                           
  1719                           ; 2 bytes @ 0x32
  1720  000092                     	ds	2
  1721  000094                     _main$950:
  1722                           	callstack 0
  1723                           
  1724                           ; 2 bytes @ 0x34
  1725  000094                     	ds	2
  1726  000096                     _main$951:
  1727                           	callstack 0
  1728                           
  1729                           ; 2 bytes @ 0x36
  1730  000096                     	ds	2
  1731  000098                     _main$952:
  1732                           	callstack 0
  1733                           
  1734                           ; 2 bytes @ 0x38
  1735  000098                     	ds	2
  1736  00009A                     _main$956:
  1737                           	callstack 0
  1738                           
  1739                           ; 2 bytes @ 0x3A
  1740  00009A                     	ds	2
  1741  00009C                     main@i_909:
  1742                           	callstack 0
  1743                           
  1744                           ; 1 bytes @ 0x3C
  1745  00009C                     	ds	1
  1746  00009D                     main@pt:
  1747                           	callstack 0
  1748                           
  1749                           ; 2 bytes @ 0x3D
  1750  00009D                     	ds	2
  1751  00009F                     main@ptr:
  1752                           	callstack 0
  1753                           
  1754                           ; 2 bytes @ 0x3F
  1755  00009F                     	ds	2
  1756  0000A1                     main@i:
  1757                           	callstack 0
  1758                           
  1759                           ; 1 bytes @ 0x41
  1760  0000A1                     	ds	1
  1761  0000A2                     main@j:
  1762                           	callstack 0
  1763                           
  1764                           ; 1 bytes @ 0x42
  1765  0000A2                     	ds	1
  1766  0000A3                     main@i_903:
  1767                           	callstack 0
  1768                           
  1769                           ; 1 bytes @ 0x43
  1770  0000A3                     	ds	1
  1771  0000A4                     main@j_904:
  1772                           	callstack 0
  1773                           
  1774                           ; 1 bytes @ 0x44
  1775  0000A4                     	ds	1
  1776  0000A5                     main@i_930:
  1777                           	callstack 0
  1778                           
  1779                           ; 1 bytes @ 0x45
  1780  0000A5                     	ds	1
  1781  0000A6                     main@j_931:
  1782                           	callstack 0
  1783                           
  1784                           ; 1 bytes @ 0x46
  1785  0000A6                     	ds	1
  1786  0000A7                     main@i_933:
  1787                           	callstack 0
  1788                           
  1789                           ; 1 bytes @ 0x47
  1790  0000A7                     	ds	1
  1791  0000A8                     main@j_934:
  1792                           	callstack 0
  1793                           
  1794                           ; 1 bytes @ 0x48
  1795  0000A8                     	ds	1
  1796  0000A9                     main@i_975:
  1797                           	callstack 0
  1798                           
  1799                           ; 1 bytes @ 0x49
  1800  0000A9                     	ds	1
  1801  0000AA                     main@j_976:
  1802                           	callstack 0
  1803                           
  1804                           ; 1 bytes @ 0x4A
  1805  0000AA                     	ds	1
  1806  0000AB                     main@i_978:
  1807                           	callstack 0
  1808                           
  1809                           ; 1 bytes @ 0x4B
  1810  0000AB                     	ds	1
  1811  0000AC                     main@j_979:
  1812                           	callstack 0
  1813                           
  1814                           ; 1 bytes @ 0x4C
  1815  0000AC                     	ds	1
  1816  0000AD                     main@vetorIn:
  1817                           	callstack 0
  1818                           
  1819                           ; 1 bytes @ 0x4D
  1820  0000AD                     	ds	1
  1821  0000AE                     main@vetorOut:
  1822                           	callstack 0
  1823                           
  1824                           ; 1 bytes @ 0x4E
  1825  0000AE                     	ds	1
  1826  0000AF                     main@meAtuadores:
  1827                           	callstack 0
  1828                           
  1829                           ; 1 bytes @ 0x4F
  1830  0000AF                     	ds	1
  1831  0000B0                     main@ciclos:
  1832                           	callstack 0
  1833                           
  1834                           ; 2 bytes @ 0x50
  1835  0000B0                     	ds	2
  1836  0000B2                     main@init_cond:
  1837                           	callstack 0
  1838                           
  1839                           ; 1 bytes @ 0x52
  1840  0000B2                     	ds	1
  1841  0000B3                     main@botao:
  1842                           	callstack 0
  1843                           
  1844                           ; 1 bytes @ 0x53
  1845  0000B3                     	ds	1
  1846  0000B4                     main@num:
  1847                           	callstack 0
  1848                           
  1849                           ; 2 bytes @ 0x54
  1850  0000B4                     	ds	2
  1851  0000B6                     main@ptr_915:
  1852                           	callstack 0
  1853                           
  1854                           ; 2 bytes @ 0x56
  1855  0000B6                     	ds	2
  1856  0000B8                     main@ptr_940:
  1857                           	callstack 0
  1858                           
  1859                           ; 2 bytes @ 0x58
  1860  0000B8                     	ds	2
  1861  0000BA                     main@estado:
  1862                           	callstack 0
  1863                           
  1864                           ; 1 bytes @ 0x5A
  1865  0000BA                     	ds	1
  1866  0000BB                     main@auxPasso:
  1867                           	callstack 0
  1868                           
  1869                           ; 1 bytes @ 0x5B
  1870  0000BB                     	ds	1
  1871  0000BC                     main@tecla:
  1872                           	callstack 0
  1873                           
  1874                           ; 1 bytes @ 0x5C
  1875  0000BC                     	ds	1
  1876                           
  1877                           	psect	cstackCOMRAM
  1878  000031                     __pcstackCOMRAM:
  1879                           	callstack 0
  1880  000031                     ??_dispLCD_instReg:
  1881  000031                     ??_dispLCD_dataReg:
  1882  000031                     ??_ler_atuador:
  1883  000031                     ??_alt_atuador:
  1884  000031                     ??_fifo_indicePrint_inc:
  1885  000031                     ??_teclado_scan:
  1886  000031                     ?_fifo_adrs:
  1887                           	callstack 0
  1888  000031                     ?_end_receita:
  1889                           	callstack 0
  1890  000031                     ?_getCiclos:
  1891                           	callstack 0
  1892  000031                     ?_getContCiclos:
  1893                           	callstack 0
  1894  000031                     ?___wmul:
  1895                           	callstack 0
  1896  000031                     ?___awdiv:
  1897                           	callstack 0
  1898  000031                     ?___awmod:
  1899                           	callstack 0
  1900  000031                     ?___lwdiv:
  1901                           	callstack 0
  1902  000031                     ?_statusT1:
  1903                           	callstack 0
  1904  000031                     ?___lmul:
  1905                           	callstack 0
  1906  000031                     ?___lldiv:
  1907                           	callstack 0
  1908  000031                     EEPROM_read@addr:
  1909                           	callstack 0
  1910  000031                     EEPROM_write@data:
  1911                           	callstack 0
  1912  000031                     fifo_lerPos@i:
  1913                           	callstack 0
  1914  000031                     serialIObyteShift@dataIn:
  1915                           	callstack 0
  1916  000031                     I2C_tx@b:
  1917                           	callstack 0
  1918  000031                     txEUSART@d:
  1919                           	callstack 0
  1920  000031                     set_passo@ptr:
  1921                           	callstack 0
  1922  000031                     ler_sensor@ptr:
  1923                           	callstack 0
  1924  000031                     delay@t:
  1925                           	callstack 0
  1926  000031                     end_receita@x:
  1927                           	callstack 0
  1928  000031                     codifica@dado:
  1929                           	callstack 0
  1930  000031                     decodifica@d:
  1931                           	callstack 0
  1932  000031                     fifo_add_ciclo@ciclos:
  1933                           	callstack 0
  1934  000031                     initSerialIO@ptrIn:
  1935                           	callstack 0
  1936  000031                     ___wmul@multiplier:
  1937                           	callstack 0
  1938  000031                     ___awdiv@dividend:
  1939                           	callstack 0
  1940  000031                     ___awmod@dividend:
  1941                           	callstack 0
  1942  000031                     ___lwdiv@dividend:
  1943                           	callstack 0
  1944  000031                     ___lmul@multiplier:
  1945                           	callstack 0
  1946  000031                     ___lldiv@dividend:
  1947                           	callstack 0
  1948                           
  1949                           ; 4 bytes @ 0x0
  1950  000031                     	ds	1
  1951  000032                     dispLCD_instReg@i:
  1952                           	callstack 0
  1953  000032                     dispLCD_dataReg@d:
  1954                           	callstack 0
  1955  000032                     EEPROM_write@addr:
  1956                           	callstack 0
  1957  000032                     posAtual@ind:
  1958                           	callstack 0
  1959  000032                     serialIObyteShift@dataOut:
  1960                           	callstack 0
  1961  000032                     wifi_send@msg:
  1962                           	callstack 0
  1963                           
  1964                           ; 2 bytes @ 0x1
  1965  000032                     	ds	1
  1966  000033                     ??_delay:
  1967  000033                     ??_decodifica:
  1968  000033                     ??_codifica:
  1969  000033                     ??_set_passo:
  1970  000033                     ??_ler_sensor:
  1971  000033                     ??_end_receita:
  1972  000033                     dispLCD_lincol@col:
  1973                           	callstack 0
  1974  000033                     formatar_receitas@i:
  1975                           	callstack 0
  1976  000033                     ler_atuador@tecla:
  1977                           	callstack 0
  1978  000033                     alt_atuador@tecla:
  1979                           	callstack 0
  1980  000033                     posAtual@passo:
  1981                           	callstack 0
  1982  000033                     serialIObyteShift@dataBit:
  1983                           	callstack 0
  1984  000033                     teclado_scan@tecla:
  1985                           	callstack 0
  1986  000033                     getCiclos@aux:
  1987                           	callstack 0
  1988  000033                     initSerialIO@ptrOut:
  1989                           	callstack 0
  1990  000033                     ___wmul@multiplicand:
  1991                           	callstack 0
  1992  000033                     ___awdiv@divisor:
  1993                           	callstack 0
  1994  000033                     ___awmod@divisor:
  1995                           	callstack 0
  1996  000033                     ___lwdiv@divisor:
  1997                           	callstack 0
  1998                           
  1999                           ; 2 bytes @ 0x2
  2000  000033                     	ds	1
  2001  000034                     ??_serialIOscan:
  2002  000034                     ??_dispLCD_lincol:
  2003  000034                     manipula_atuadores_init@atuador:
  2004                           	callstack 0
  2005  000034                     teclado_scan@l:
  2006                           	callstack 0
  2007  000034                     Wifi_mode@d:
  2008                           	callstack 0
  2009  000034                     dac_write@code:
  2010                           	callstack 0
  2011  000034                     Wifi_connect@ssid:
  2012                           	callstack 0
  2013  000034                     Wifi_cipsend@tam:
  2014                           	callstack 0
  2015  000034                     salva_atuadores_init@condi_init:
  2016                           	callstack 0
  2017                           
  2018                           ; 4 bytes @ 0x3
  2019  000034                     	ds	1
  2020  000035                     set_passo@passo:
  2021                           	callstack 0
  2022  000035                     ler_sensor@passo:
  2023                           	callstack 0
  2024  000035                     manipula_atuadores_init@aux:
  2025                           	callstack 0
  2026  000035                     codifica@tipo:
  2027                           	callstack 0
  2028  000035                     initSerialIO@length:
  2029                           	callstack 0
  2030  000035                     teclado_scan@c:
  2031                           	callstack 0
  2032  000035                     ___awdiv@counter:
  2033                           	callstack 0
  2034  000035                     ___awmod@counter:
  2035                           	callstack 0
  2036  000035                     deletar_receita@aux:
  2037                           	callstack 0
  2038  000035                     ___wmul@product:
  2039                           	callstack 0
  2040  000035                     ___lwdiv@quotient:
  2041                           	callstack 0
  2042  000035                     ___lmul@multiplicand:
  2043                           	callstack 0
  2044  000035                     ___lldiv@divisor:
  2045                           	callstack 0
  2046                           
  2047                           ; 4 bytes @ 0x4
  2048  000035                     	ds	1
  2049  000036                     ??_dac_write:
  2050  000036                     dispLCD_lincol@lin:
  2051                           	callstack 0
  2052  000036                     manipula_atuadores_init@mask:
  2053                           	callstack 0
  2054  000036                     serialIOscan@j:
  2055                           	callstack 0
  2056  000036                     teclado_borda@aux:
  2057                           	callstack 0
  2058  000036                     ___awdiv@sign:
  2059                           	callstack 0
  2060  000036                     ___awmod@sign:
  2061                           	callstack 0
  2062  000036                     Wifi_connect@pass:
  2063                           	callstack 0
  2064  000036                     Wifi_cipsend@msg:
  2065                           	callstack 0
  2066                           
  2067                           ; 2 bytes @ 0x5
  2068  000036                     	ds	1
  2069  000037                     dispLCD_lincol@aux:
  2070                           	callstack 0
  2071  000037                     salvar_dado@col:
  2072                           	callstack 0
  2073  000037                     buscar_dado@col:
  2074                           	callstack 0
  2075  000037                     deletar_receita@receita:
  2076                           	callstack 0
  2077  000037                     serialIOscan@i:
  2078                           	callstack 0
  2079  000037                     teclado_borda@tecla:
  2080                           	callstack 0
  2081  000037                     ___lwdiv@counter:
  2082                           	callstack 0
  2083  000037                     salvar_receita@data:
  2084                           	callstack 0
  2085  000037                     buscar_receita@data:
  2086                           	callstack 0
  2087  000037                     dignum_conc@ptrNum:
  2088                           	callstack 0
  2089  000037                     ___awdiv@quotient:
  2090                           	callstack 0
  2091  000037                     setT1@c:
  2092                           	callstack 0
  2093                           
  2094                           ; 4 bytes @ 0x6
  2095  000037                     	ds	1
  2096  000038                     ??_Wifi_connect:
  2097  000038                     dispLCD@col:
  2098                           	callstack 0
  2099  000038                     salvar_dado@data:
  2100                           	callstack 0
  2101  000038                     deletar_receita@i:
  2102                           	callstack 0
  2103  000038                     dispLCD_str@str:
  2104                           	callstack 0
  2105  000038                     buscar_dado@data:
  2106                           	callstack 0
  2107  000038                     salva_atuadores_init@pt:
  2108                           	callstack 0
  2109  000038                     dignum_apagar@ptrNum:
  2110                           	callstack 0
  2111  000038                     Wifi_cipsend@str:
  2112                           	callstack 0
  2113                           
  2114                           ; 20 bytes @ 0x7
  2115  000038                     	ds	1
  2116  000039                     ??_fifo_print:
  2117  000039                     ??_dignum_conc:
  2118  000039                     dispLCD@str:
  2119                           	callstack 0
  2120  000039                     salvar_receita@aux:
  2121                           	callstack 0
  2122  000039                     buscar_receita@aux:
  2123                           	callstack 0
  2124  000039                     salvar_dado@aux:
  2125                           	callstack 0
  2126  000039                     dignum_tam@num:
  2127                           	callstack 0
  2128  000039                     ___lmul@product:
  2129                           	callstack 0
  2130  000039                     ___lldiv@quotient:
  2131                           	callstack 0
  2132                           
  2133                           ; 4 bytes @ 0x8
  2134  000039                     	ds	1
  2135  00003A                     dispLCD_str@lin:
  2136                           	callstack 0
  2137  00003A                     salva_atuadores_init@dado:
  2138                           	callstack 0
  2139  00003A                     buscar_dado@aux:
  2140                           	callstack 0
  2141  00003A                     Wifi_connect@str:
  2142                           	callstack 0
  2143                           
  2144                           ; 30 bytes @ 0x9
  2145  00003A                     	ds	1
  2146  00003B                     dispLCD@pos:
  2147                           	callstack 0
  2148  00003B                     dispLCD_str@c:
  2149                           	callstack 0
  2150  00003B                     salvar_receita@adrs:
  2151                           	callstack 0
  2152  00003B                     buscar_receita@adrs:
  2153                           	callstack 0
  2154  00003B                     salvar_dado@adrs:
  2155                           	callstack 0
  2156  00003B                     salva_atuadores_init@mask:
  2157                           	callstack 0
  2158  00003B                     dignum_conc@dig:
  2159                           	callstack 0
  2160  00003B                     dignum_tam@tam:
  2161                           	callstack 0
  2162  00003B                     _fifo_print$473:
  2163                           	callstack 0
  2164                           
  2165                           ; 2 bytes @ 0xA
  2166  00003B                     	ds	1
  2167  00003C                     ??_fifo_alinharPrint:
  2168  00003C                     dispLCD@lin:
  2169                           	callstack 0
  2170  00003C                     dispLCD_num@col:
  2171                           	callstack 0
  2172  00003C                     salvar_receita@i:
  2173                           	callstack 0
  2174  00003C                     buscar_receita@i:
  2175                           	callstack 0
  2176  00003C                     buscar_dado@adrs:
  2177                           	callstack 0
  2178                           
  2179                           ; 1 bytes @ 0xB
  2180  00003C                     	ds	1
  2181  00003D                     ?___aldiv:
  2182                           	callstack 0
  2183  00003D                     fifo_print@completar:
  2184                           	callstack 0
  2185  00003D                     fifo_alinharPrint@cont:
  2186                           	callstack 0
  2187  00003D                     ___lldiv@counter:
  2188                           	callstack 0
  2189  00003D                     dispLCD_num@num:
  2190                           	callstack 0
  2191  00003D                     ___aldiv@dividend:
  2192                           	callstack 0
  2193                           
  2194                           ; 4 bytes @ 0xC
  2195  00003D                     	ds	1
  2196  00003E                     fifo_print@indPrint:
  2197                           	callstack 0
  2198  00003E                     fifo_alinharPrint@i:
  2199                           	callstack 0
  2200  00003E                     I2C_init@freq:
  2201                           	callstack 0
  2202  00003E                     initEUSART@baudRate:
  2203                           	callstack 0
  2204                           
  2205                           ; 4 bytes @ 0xD
  2206  00003E                     	ds	1
  2207  00003F                     dispLCD_num@tam:
  2208                           	callstack 0
  2209  00003F                     fifo_print@i:
  2210                           	callstack 0
  2211  00003F                     fifo_alinharPrint@aux:
  2212                           	callstack 0
  2213                           
  2214                           ; 1 bytes @ 0xE
  2215  00003F                     	ds	1
  2216  000040                     ??_dispLCD_num:
  2217  000040                     ??_fifo_delete:
  2218  000040                     fifo_add@passo:
  2219                           	callstack 0
  2220  000040                     fifo_add_tempo@t:
  2221                           	callstack 0
  2222  000040                     fifo_add_control@c:
  2223                           	callstack 0
  2224  000040                     fifo_print@atraso:
  2225                           	callstack 0
  2226                           
  2227                           ; 1 bytes @ 0xF
  2228  000040                     	ds	1
  2229  000041                     fifo_print@comando:
  2230                           	callstack 0
  2231  000041                     ___aldiv@divisor:
  2232                           	callstack 0
  2233                           
  2234                           ; 4 bytes @ 0x10
  2235  000041                     	ds	1
  2236  000042                     ??_initEUSART:
  2237                           
  2238                           ; 1 bytes @ 0x11
  2239  000042                     	ds	3
  2240  000045                     dispLCD_num@lin:
  2241                           	callstack 0
  2242  000045                     ___aldiv@counter:
  2243                           	callstack 0
  2244                           
  2245                           ; 1 bytes @ 0x14
  2246  000045                     	ds	1
  2247  000046                     dispLCD_num@size:
  2248                           	callstack 0
  2249  000046                     ___aldiv@sign:
  2250                           	callstack 0
  2251  000046                     wifi_init@br:
  2252                           	callstack 0
  2253                           
  2254                           ; 4 bytes @ 0x15
  2255  000046                     	ds	1
  2256  000047                     dispLCD_num@sinal:
  2257                           	callstack 0
  2258  000047                     ___aldiv@quotient:
  2259                           	callstack 0
  2260                           
  2261                           ; 4 bytes @ 0x16
  2262  000047                     	ds	1
  2263  000048                     dispLCD_num@div:
  2264                           	callstack 0
  2265                           
  2266                           ; 2 bytes @ 0x17
  2267  000048                     	ds	2
  2268  00004A                     printExec@ind:
  2269                           	callstack 0
  2270                           
  2271                           ; 1 bytes @ 0x19
  2272  00004A                     	ds	1
  2273  00004B                     MCP4725@Vout:
  2274                           	callstack 0
  2275  00004B                     _printExec$498:
  2276                           	callstack 0
  2277                           
  2278                           ; 2 bytes @ 0x1A
  2279  00004B                     	ds	1
  2280  00004C                     Wifi_cipsend@vtr:
  2281                           	callstack 0
  2282                           
  2283                           ; 10 bytes @ 0x1B
  2284  00004C                     	ds	1
  2285  00004D                     printExec@col:
  2286                           	callstack 0
  2287                           
  2288                           ; 1 bytes @ 0x1C
  2289  00004D                     	ds	1
  2290  00004E                     printExec@passo:
  2291                           	callstack 0
  2292                           
  2293                           ; 1 bytes @ 0x1D
  2294  00004E                     	ds	8
  2295  000056                     Wifi_cipsend@i:
  2296                           	callstack 0
  2297                           
  2298                           ; 1 bytes @ 0x25
  2299  000056                     	ds	1
  2300  000057                     Wifi_cipsend@d:
  2301                           	callstack 0
  2302                           
  2303                           ; 1 bytes @ 0x26
  2304  000057                     	ds	1
  2305  000058                     Wifi_connect@i:
  2306                           	callstack 0
  2307                           
  2308                           ; 1 bytes @ 0x27
  2309  000058                     	ds	1
  2310  000059                     ??_main:
  2311                           
  2312                           ; 1 bytes @ 0x28
  2313  000059                     	ds	2
  2314                           
  2315 ;;
  2316 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2317 ;;
  2318 ;; *************** function _main *****************
  2319 ;; Defined at:
  2320 ;;		line 71 in file "main.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  j               1   76[BANK0 ] unsigned char 
  2325 ;;  j               1   74[BANK0 ] unsigned char 
  2326 ;;  j               1   72[BANK0 ] unsigned char 
  2327 ;;  j               1   70[BANK0 ] unsigned char 
  2328 ;;  j               1   68[BANK0 ] unsigned char 
  2329 ;;  j               1   66[BANK0 ] unsigned char 
  2330 ;;  ptr             2   88[BANK0 ] PTR unsigned char 
  2331 ;;		 -> main@vetor_aux(16), 
  2332 ;;  i               1   75[BANK0 ] unsigned char 
  2333 ;;  i               1   73[BANK0 ] unsigned char 
  2334 ;;  i               1   71[BANK0 ] unsigned char 
  2335 ;;  i               1   69[BANK0 ] unsigned char 
  2336 ;;  ptr             2   86[BANK0 ] PTR unsigned char 
  2337 ;;		 -> main@vetor_aux(16), 
  2338 ;;  i               1   67[BANK0 ] unsigned char 
  2339 ;;  i               1   65[BANK0 ] unsigned char 
  2340 ;;  lema           20    0[BANK0 ] unsigned char [20]
  2341 ;;  ptr             2   63[BANK0 ] PTR unsigned char 
  2342 ;;		 -> main@lema(20), 
  2343 ;;  i               1   60[BANK0 ] unsigned char 
  2344 ;;  vetor_aux      16   22[BANK0 ] unsigned char [16]
  2345 ;;  num             2   84[BANK0 ] unsigned int 
  2346 ;;  ciclos          2   80[BANK0 ] unsigned int 
  2347 ;;  pt              2   61[BANK0 ] PTR unsigned char 
  2348 ;;		 -> main@vetor_aux(16), 
  2349 ;;  tecla           1   92[BANK0 ] unsigned char 
  2350 ;;  auxPasso        1   91[BANK0 ] unsigned char 
  2351 ;;  estado          1   90[BANK0 ] unsigned char 
  2352 ;;  botao           1   83[BANK0 ] unsigned char 
  2353 ;;  init_cond       1   82[BANK0 ] unsigned char 
  2354 ;;  meAtuadores     1   79[BANK0 ] unsigned char 
  2355 ;;  vetorOut        1   78[BANK0 ] unsigned char [1]
  2356 ;;  vetorIn         1   77[BANK0 ] unsigned char [1]
  2357 ;;  aux             1   21[BANK0 ] unsigned char 
  2358 ;;  contPassos      1   20[BANK0 ] unsigned char 
  2359 ;;  atuador         1    0        unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2369 ;;      Params:         0       0       0       0       0       0       0       0       0
  2370 ;;      Locals:         0      93       0       0       0       0       0       0       0
  2371 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2372 ;;      Totals:         2      93       0       0       0       0       0       0       0
  2373 ;;Total ram usage:       95 bytes
  2374 ;; Hardware stack levels required when called:    6
  2375 ;; This function calls:
  2376 ;;		_I2C_init
  2377 ;;		_MCP4725
  2378 ;;		_Wifi_cipsend
  2379 ;;		_Wifi_connect
  2380 ;;		_Wifi_mode
  2381 ;;		___aldiv
  2382 ;;		___awmod
  2383 ;;		___lmul
  2384 ;;		___wmul
  2385 ;;		_addContCiclos
  2386 ;;		_addIndicePassos
  2387 ;;		_alt_atuador
  2388 ;;		_buscar_dado
  2389 ;;		_buscar_receita
  2390 ;;		_decodifica
  2391 ;;		_delay
  2392 ;;		_deletar_receita
  2393 ;;		_dignum_apagar
  2394 ;;		_dignum_conc
  2395 ;;		_dispLCD
  2396 ;;		_dispLCD_clr
  2397 ;;		_dispLCD_dataReg
  2398 ;;		_dispLCD_init
  2399 ;;		_dispLCD_lincol
  2400 ;;		_dispLCD_num
  2401 ;;		_dispLCD_str
  2402 ;;		_fifo_add
  2403 ;;		_fifo_add_ciclo
  2404 ;;		_fifo_add_control
  2405 ;;		_fifo_add_tempo
  2406 ;;		_fifo_adrs
  2407 ;;		_fifo_delete
  2408 ;;		_fifo_disponivel
  2409 ;;		_fifo_indice
  2410 ;;		_fifo_indicePrint_dec
  2411 ;;		_fifo_indicePrint_inc
  2412 ;;		_fifo_lerPos
  2413 ;;		_fifo_print
  2414 ;;		_fifo_tam
  2415 ;;		_formatar_receitas
  2416 ;;		_getCiclos
  2417 ;;		_getContCiclos
  2418 ;;		_getIndicePassos
  2419 ;;		_initSerialIO
  2420 ;;		_init_atuadores
  2421 ;;		_ler_atuador
  2422 ;;		_ler_sensor
  2423 ;;		_manipula_atuadores_init
  2424 ;;		_printExec
  2425 ;;		_resetContCiclos
  2426 ;;		_resetIndicePassos
  2427 ;;		_salva_atuadores_init
  2428 ;;		_salvar_dado
  2429 ;;		_salvar_receita
  2430 ;;		_serialIOscan
  2431 ;;		_setT1
  2432 ;;		_set_passo
  2433 ;;		_statusT1
  2434 ;;		_teclado_borda
  2435 ;;		_teclado_init
  2436 ;;		_timer1_init
  2437 ;;		_wifi_init
  2438 ;; This function is called by:
  2439 ;;		Startup code after reset
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text0
  2444  000012                     __ptext0:
  2445                           	callstack 0
  2446  000012                     _main:
  2447                           	callstack 25
  2448  000012                     
  2449                           ;main.c: 73:     dispLCD_init();
  2450  000012  EC94  F01E         	call	_dispLCD_init	;wreg free
  2451  000016                     
  2452                           ;main.c: 74:     teclado_init();
  2453  000016  EC50  F020         	call	_teclado_init	;wreg free
  2454  00001A                     
  2455                           ;main.c: 75:     timer1_init();
  2456  00001A  ECBB  F01F         	call	_timer1_init	;wreg free
  2457                           
  2458                           ;main.c: 76:     I2C_init(20000000);
  2459  00001E  0E00               	movlw	0
  2460  000020  6E3E               	movwf	I2C_init@freq^0,c
  2461  000022  0E2D               	movlw	45
  2462  000024  6E3F               	movwf	(I2C_init@freq+1)^0,c
  2463  000026  0E31               	movlw	49
  2464  000028  6E40               	movwf	(I2C_init@freq+2)^0,c
  2465  00002A  0E01               	movlw	1
  2466  00002C  6E41               	movwf	(I2C_init@freq+3)^0,c
  2467  00002E  EC24  F01E         	call	_I2C_init	;wreg free
  2468                           
  2469                           ;main.c: 77:     MCP4725(0);
  2470  000032  0E00               	movlw	0
  2471  000034  6E4C               	movwf	(MCP4725@Vout+1)^0,c
  2472  000036  0E00               	movlw	0
  2473  000038  6E4B               	movwf	MCP4725@Vout^0,c
  2474  00003A  EC9B  F01F         	call	_MCP4725	;wreg free
  2475  00003E                     
  2476                           ;main.c: 78:     wifi.init(115200);
  2477  00003E  0E00               	movlw	0
  2478  000040  6E46               	movwf	wifi_init@br^0,c
  2479  000042  0EC2               	movlw	194
  2480  000044  6E47               	movwf	(wifi_init@br+1)^0,c
  2481  000046  0E01               	movlw	1
  2482  000048  6E48               	movwf	(wifi_init@br+2)^0,c
  2483  00004A  0E00               	movlw	0
  2484  00004C  6E49               	movwf	(wifi_init@br+3)^0,c
  2485  00004E  D802               	call	u4648
  2486  000050  EF35  F000         	goto	u4649
  2487  000054                     u4648:
  2488  000054  0005               	push	
  2489  000056  0100               	movlb	0	; () banked
  2490  000058  6EFA               	movwf	pclath,c
  2491  00005A  51BD               	movf	_wifi& (0+255),w,b
  2492  00005C  6EFD               	movwf	tosl,c
  2493  00005E  51BE               	movf	(_wifi+1)& (0+255),w,b
  2494  000060  6EFE               	movwf	tosh,c
  2495  000062  50F8               	movf	tblptru,w,c
  2496  000064  6EFF               	movwf	tosu,c
  2497  000066  50FA               	movf	pclath,w,c
  2498  000068  0012               	return		;indir
  2499  00006A                     u4649:
  2500  00006A                     
  2501                           ;main.c: 79:     delay(1000);
  2502  00006A  0E03               	movlw	3
  2503  00006C  6E32               	movwf	(delay@t+1)^0,c
  2504  00006E  0EE8               	movlw	232
  2505  000070  6E31               	movwf	delay@t^0,c
  2506  000072  EC24  F01F         	call	_delay	;wreg free
  2507  000076                     
  2508                           ;main.c: 80:     wifi.mode(1);
  2509  000076  EE20  F0C3         	lfsr	2,_wifi+6
  2510  00007A  D802               	call	u4658
  2511  00007C  EF4B  F000         	goto	u4659
  2512  000080                     u4658:
  2513  000080  0005               	push	
  2514  000082  6EFA               	movwf	pclath,c
  2515  000084  50DE               	movf	postinc2,w,c
  2516  000086  6EFD               	movwf	tosl,c
  2517  000088  50DE               	movf	postinc2,w,c
  2518  00008A  6EFE               	movwf	tosh,c
  2519  00008C  50F8               	movf	tblptru,w,c
  2520  00008E  6EFF               	movwf	tosu,c
  2521  000090  50FA               	movf	pclath,w,c
  2522  000092  0E01               	movlw	1
  2523  000094  0012               	return		;indir
  2524  000096                     u4659:
  2525  000096                     
  2526                           ;main.c: 81:     delay(1000);
  2527  000096  0E03               	movlw	3
  2528  000098  6E32               	movwf	(delay@t+1)^0,c
  2529  00009A  0EE8               	movlw	232
  2530  00009C  6E31               	movwf	delay@t^0,c
  2531  00009E  EC24  F01F         	call	_delay
  2532  0000A2                     
  2533                           ;main.c: 82:     wifi.connect("TCC","98765432");
  2534  0000A2  0EF9               	movlw	low STR_1
  2535  0000A4  6E34               	movwf	Wifi_connect@ssid^0,c
  2536  0000A6  0E7F               	movlw	high STR_1
  2537  0000A8  6E35               	movwf	(Wifi_connect@ssid+1)^0,c
  2538  0000AA  0EE8               	movlw	low STR_2
  2539  0000AC  6E36               	movwf	Wifi_connect@pass^0,c
  2540  0000AE  0E7F               	movlw	high STR_2
  2541  0000B0  6E37               	movwf	(Wifi_connect@pass+1)^0,c
  2542  0000B2  EE20  F0C5         	lfsr	2,_wifi+8
  2543  0000B6  D802               	call	u4668
  2544  0000B8  EF68  F000         	goto	u4669
  2545  0000BC                     u4668:
  2546  0000BC  0005               	push	
  2547  0000BE  6EFA               	movwf	pclath,c
  2548  0000C0  50DE               	movf	postinc2,w,c
  2549  0000C2  6EFD               	movwf	tosl,c
  2550  0000C4  50DE               	movf	postinc2,w,c
  2551  0000C6  6EFE               	movwf	tosh,c
  2552  0000C8  50F8               	movf	tblptru,w,c
  2553  0000CA  6EFF               	movwf	tosu,c
  2554  0000CC  50FA               	movf	pclath,w,c
  2555  0000CE  0012               	return		;indir
  2556  0000D0                     u4669:
  2557  0000D0                     
  2558                           ;main.c: 89:     char tecla = 0;
  2559  0000D0  0E00               	movlw	0
  2560  0000D2  0100               	movlb	0	; () banked
  2561  0000D4  6FBC               	movwf	main@tecla& (0+255),b
  2562  0000D6                     
  2563                           ; BSR set to: 0
  2564                           ;main.c: 90:     char estado = 0;
  2565  0000D6  0E00               	movlw	0
  2566  0000D8  6FBA               	movwf	main@estado& (0+255),b
  2567  0000DA                     
  2568                           ; BSR set to: 0
  2569                           ;main.c: 91:     char atuador;;main.c: 92:     char vetor_aux[16];;main.c: 93:     char 
      +                          init_cond = 0;
  2570  0000DA  0E00               	movlw	0
  2571  0000DC  6FB2               	movwf	main@init_cond& (0+255),b
  2572  0000DE                     
  2573                           ; BSR set to: 0
  2574                           ;main.c: 94:     char *pt;;main.c: 96:     char contPassos = 0;
  2575  0000DE  0E00               	movlw	0
  2576  0000E0  6F74               	movwf	main@contPassos& (0+255),b
  2577  0000E2                     
  2578                           ; BSR set to: 0
  2579                           ;main.c: 97:     char vetorIn[1] = { 0 };
  2580  0000E2  0E00               	movlw	0
  2581  0000E4  6FAD               	movwf	main@vetorIn& (0+255),b
  2582  0000E6                     
  2583                           ; BSR set to: 0
  2584                           ;main.c: 98:     char vetorOut[1] = { 0 };
  2585  0000E6  0E00               	movlw	0
  2586  0000E8  6FAE               	movwf	main@vetorOut& (0+255),b
  2587  0000EA                     
  2588                           ; BSR set to: 0
  2589                           ;main.c: 99:     initSerialIO( vetorIn, vetorOut, 1 );
  2590  0000EA  0EAD               	movlw	low main@vetorIn
  2591  0000EC  6E31               	movwf	initSerialIO@ptrIn^0,c
  2592  0000EE  0E00               	movlw	high main@vetorIn
  2593  0000F0  6E32               	movwf	(initSerialIO@ptrIn+1)^0,c
  2594  0000F2  0EAE               	movlw	low main@vetorOut
  2595  0000F4  6E33               	movwf	initSerialIO@ptrOut^0,c
  2596  0000F6  0E00               	movlw	high main@vetorOut
  2597  0000F8  6E34               	movwf	(initSerialIO@ptrOut+1)^0,c
  2598  0000FA  0E01               	movlw	1
  2599  0000FC  6E35               	movwf	initSerialIO@length^0,c
  2600  0000FE  ECDF  F01E         	call	_initSerialIO	;wreg free
  2601  000102                     
  2602                           ;main.c: 100:     char meAtuadores = -1;
  2603  000102  0100               	movlb	0	; () banked
  2604  000104  69AF               	setf	main@meAtuadores& (0+255),b
  2605  000106                     
  2606                           ; BSR set to: 0
  2607                           ;main.c: 101:     char auxPasso = 0;
  2608  000106  0E00               	movlw	0
  2609  000108  6FBB               	movwf	main@auxPasso& (0+255),b
  2610  00010A                     
  2611                           ; BSR set to: 0
  2612                           ;main.c: 102:     char aux = 2;
  2613  00010A  0E02               	movlw	2
  2614  00010C  6F75               	movwf	main@aux& (0+255),b
  2615  00010E                     
  2616                           ; BSR set to: 0
  2617                           ;main.c: 103:     unsigned int num = 0;
  2618  00010E  0E00               	movlw	0
  2619  000110  6FB5               	movwf	(main@num+1)& (0+255),b
  2620  000112  0E00               	movlw	0
  2621  000114  6FB4               	movwf	main@num& (0+255),b
  2622  000116                     
  2623                           ; BSR set to: 0
  2624                           ;main.c: 104:     unsigned int ciclos = 0;
  2625  000116  0E00               	movlw	0
  2626  000118  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  2627  00011A  0E00               	movlw	0
  2628  00011C  6FB0               	movwf	main@ciclos& (0+255),b
  2629  00011E                     
  2630                           ; BSR set to: 0
  2631                           ;main.c: 105:     char botao = 0;
  2632  00011E  0E00               	movlw	0
  2633  000120  6FB3               	movwf	main@botao& (0+255),b
  2634  000122  EF47  F00D         	goto	l7189
  2635  000126                     l6455:
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 123:                             for(char i = 0; i <= 3; i++)
  2639  000126  0E00               	movlw	0
  2640  000128  6FA1               	movwf	main@i& (0+255),b
  2641  00012A                     l6457:
  2642                           
  2643                           ; BSR set to: 0
  2644  00012A  0E03               	movlw	3
  2645  00012C  65A1               	cpfsgt	main@i& (0+255),b
  2646  00012E  EF9B  F000         	goto	u4671
  2647  000132  EF9D  F000         	goto	u4670
  2648  000136                     u4671:
  2649  000136  EF9F  F000         	goto	l6461
  2650  00013A                     u4670:
  2651  00013A  EFCE  F000         	goto	l6479
  2652  00013E                     l6461:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 124:                             {;main.c: 125:                                
      +                           for(char j = 0; j <= 19; j++)
  2656  00013E  0E00               	movlw	0
  2657  000140  6FA2               	movwf	main@j& (0+255),b
  2658  000142                     l6463:
  2659                           
  2660                           ; BSR set to: 0
  2661  000142  0E13               	movlw	19
  2662  000144  65A2               	cpfsgt	main@j& (0+255),b
  2663  000146  EFA7  F000         	goto	u4681
  2664  00014A  EFA9  F000         	goto	u4680
  2665  00014E                     u4681:
  2666  00014E  EFAB  F000         	goto	l6467
  2667  000152                     u4680:
  2668  000152  EFCB  F000         	goto	l6475
  2669  000156                     l6467:
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 126:                                 {;main.c: 127:                            
      +                                   IHM.printpos(i, j, "\377");
  2673  000156  EE20  F0E5         	lfsr	2,_IHM+4
  2674  00015A  D802               	call	u4698
  2675  00015C  EFC1  F000         	goto	u4699
  2676  000160                     u4698:
  2677  000160  0005               	push	
  2678  000162  6EFA               	movwf	pclath,c
  2679  000164  50DE               	movf	postinc2,w,c
  2680  000166  6EFD               	movwf	tosl,c
  2681  000168  50DE               	movf	postinc2,w,c
  2682  00016A  6EFE               	movwf	tosh,c
  2683  00016C  50F8               	movf	tblptru,w,c
  2684  00016E  6EFF               	movwf	tosu,c
  2685  000170  50FA               	movf	pclath,w,c
  2686  000172  C0A2  F038         	movff	main@j,dispLCD@col
  2687  000176  0EFD               	movlw	low STR_3
  2688  000178  6E39               	movwf	dispLCD@str^0,c
  2689  00017A  0E7F               	movlw	high STR_3
  2690  00017C  6E3A               	movwf	(dispLCD@str+1)^0,c
  2691  00017E  51A1               	movf	main@i& (0+255),w,b
  2692  000180  0012               	return		;indir
  2693  000182                     u4699:
  2694  000182                     
  2695                           ;main.c: 128:                                     delay(10);
  2696  000182  0E00               	movlw	0
  2697  000184  6E32               	movwf	(delay@t+1)^0,c
  2698  000186  0E0A               	movlw	10
  2699  000188  6E31               	movwf	delay@t^0,c
  2700  00018A  EC24  F01F         	call	_delay
  2701  00018E                     
  2702                           ;main.c: 129:                                 }
  2703  00018E  0100               	movlb	0	; () banked
  2704  000190  2BA2               	incf	main@j& (0+255),f,b
  2705  000192  EFA1  F000         	goto	l6463
  2706  000196                     l6475:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 130:                             }
  2710  000196  2BA1               	incf	main@i& (0+255),f,b
  2711  000198  EF95  F000         	goto	l6457
  2712  00019C                     l6479:
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 132:                             for(char i = 0; i <= 3; i++)
  2716  00019C  0E00               	movlw	0
  2717  00019E  6FA3               	movwf	main@i_903& (0+255),b
  2718  0001A0                     l6481:
  2719                           
  2720                           ; BSR set to: 0
  2721  0001A0  0E03               	movlw	3
  2722  0001A2  65A3               	cpfsgt	main@i_903& (0+255),b
  2723  0001A4  EFD6  F000         	goto	u4701
  2724  0001A8  EFD8  F000         	goto	u4700
  2725  0001AC                     u4701:
  2726  0001AC  EFDA  F000         	goto	l6485
  2727  0001B0                     u4700:
  2728  0001B0  EF09  F001         	goto	l6503
  2729  0001B4                     l6485:
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;main.c: 133:                             {;main.c: 134:                                
      +                           for(char j = 0; j <= 19; j++)
  2733  0001B4  0E00               	movlw	0
  2734  0001B6  6FA4               	movwf	main@j_904& (0+255),b
  2735  0001B8                     l6487:
  2736                           
  2737                           ; BSR set to: 0
  2738  0001B8  0E13               	movlw	19
  2739  0001BA  65A4               	cpfsgt	main@j_904& (0+255),b
  2740  0001BC  EFE2  F000         	goto	u4711
  2741  0001C0  EFE4  F000         	goto	u4710
  2742  0001C4                     u4711:
  2743  0001C4  EFE6  F000         	goto	l6491
  2744  0001C8                     u4710:
  2745  0001C8  EF06  F001         	goto	l6499
  2746  0001CC                     l6491:
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 135:                                 {;main.c: 136:                            
      +                                   IHM.printpos(i, j, " ");
  2750  0001CC  EE20  F0E5         	lfsr	2,_IHM+4
  2751  0001D0  D802               	call	u4728
  2752  0001D2  EFFC  F000         	goto	u4729
  2753  0001D6                     u4728:
  2754  0001D6  0005               	push	
  2755  0001D8  6EFA               	movwf	pclath,c
  2756  0001DA  50DE               	movf	postinc2,w,c
  2757  0001DC  6EFD               	movwf	tosl,c
  2758  0001DE  50DE               	movf	postinc2,w,c
  2759  0001E0  6EFE               	movwf	tosh,c
  2760  0001E2  50F8               	movf	tblptru,w,c
  2761  0001E4  6EFF               	movwf	tosu,c
  2762  0001E6  50FA               	movf	pclath,w,c
  2763  0001E8  C0A4  F038         	movff	main@j_904,dispLCD@col
  2764  0001EC  0EAC               	movlw	low (STR_26+19)
  2765  0001EE  6E39               	movwf	dispLCD@str^0,c
  2766  0001F0  0E7D               	movlw	high (STR_26+19)
  2767  0001F2  6E3A               	movwf	(dispLCD@str+1)^0,c
  2768  0001F4  51A3               	movf	main@i_903& (0+255),w,b
  2769  0001F6  0012               	return		;indir
  2770  0001F8                     u4729:
  2771  0001F8                     
  2772                           ;main.c: 137:                                     delay(10);
  2773  0001F8  0E00               	movlw	0
  2774  0001FA  6E32               	movwf	(delay@t+1)^0,c
  2775  0001FC  0E0A               	movlw	10
  2776  0001FE  6E31               	movwf	delay@t^0,c
  2777  000200  EC24  F01F         	call	_delay
  2778  000204                     
  2779                           ;main.c: 138:                                 }
  2780  000204  0100               	movlb	0	; () banked
  2781  000206  2BA4               	incf	main@j_904& (0+255),f,b
  2782  000208  EFDC  F000         	goto	l6487
  2783  00020C                     l6499:
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;main.c: 139:                             }
  2787  00020C  2BA3               	incf	main@i_903& (0+255),f,b
  2788  00020E  EFD0  F000         	goto	l6481
  2789  000212                     l6503:
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 140:                             estado = 1;
  2793  000212  0E01               	movlw	1
  2794  000214  6FBA               	movwf	main@estado& (0+255),b
  2795                           
  2796                           ;main.c: 141:                             break;
  2797  000216  EFED  F00D         	goto	l7191
  2798  00021A                     l6505:
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 144:                             IHM.printpos(1, 0, "      SEGGUIT       ");
  2802  00021A  EE20  F0E5         	lfsr	2,_IHM+4
  2803  00021E  D802               	call	u4738
  2804  000220  EF23  F001         	goto	u4739
  2805  000224                     u4738:
  2806  000224  0005               	push	
  2807  000226  6EFA               	movwf	pclath,c
  2808  000228  50DE               	movf	postinc2,w,c
  2809  00022A  6EFD               	movwf	tosl,c
  2810  00022C  50DE               	movf	postinc2,w,c
  2811  00022E  6EFE               	movwf	tosh,c
  2812  000230  50F8               	movf	tblptru,w,c
  2813  000232  6EFF               	movwf	tosu,c
  2814  000234  50FA               	movf	pclath,w,c
  2815  000236  0E00               	movlw	0
  2816  000238  6E38               	movwf	dispLCD@col^0,c
  2817  00023A  0ED8               	movlw	low STR_5
  2818  00023C  6E39               	movwf	dispLCD@str^0,c
  2819  00023E  0E7D               	movlw	high STR_5
  2820  000240  6E3A               	movwf	(dispLCD@str+1)^0,c
  2821  000242  0E01               	movlw	1
  2822  000244  0012               	return		;indir
  2823  000246                     u4739:
  2824  000246                     
  2825                           ;main.c: 146:                             char lema[20] = "Mundo ao seu comando";
  2826  000246  EE21  F032         	lfsr	2,main@F3513
  2827  00024A  EE10  F060         	lfsr	1,main@lema
  2828  00024E  0E13               	movlw	19
  2829  000250                     u4741:
  2830  000250  CFDB FFE3          	movff	plusw2,plusw1
  2831  000254  06E8               	decf	wreg,f,c
  2832  000256  E2FC               	bc	u4741
  2833  000258                     
  2834                           ;main.c: 147:                             char i = 0;
  2835  000258  0E00               	movlw	0
  2836  00025A  0100               	movlb	0	; () banked
  2837  00025C  6F9C               	movwf	main@i_909& (0+255),b
  2838  00025E                     
  2839                           ; BSR set to: 0
  2840                           ;main.c: 148:                             char *ptr;;main.c: 150:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  2841  00025E  0E60               	movlw	low main@lema
  2842  000260  6F9F               	movwf	main@ptr& (0+255),b
  2843  000262  0E00               	movlw	high main@lema
  2844  000264  6FA0               	movwf	(main@ptr+1)& (0+255),b
  2845  000266  EF4C  F001         	goto	l6523
  2846  00026A                     l6513:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 151:                             {;main.c: 152:                                
      +                           dispLCD_lincol( 2, i );
  2850  00026A  C09C  F033         	movff	main@i_909,dispLCD_lincol@col
  2851  00026E  0E02               	movlw	2
  2852  000270  EC5A  F01B         	call	_dispLCD_lincol
  2853  000274                     
  2854                           ;main.c: 153:                                 dispLCD_dataReg( *ptr );
  2855  000274  C09F  FFD9         	movff	main@ptr,fsr2l
  2856  000278  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2857  00027C  50DF               	movf	indf2,w,c
  2858  00027E  ECED  F01C         	call	_dispLCD_dataReg
  2859  000282                     
  2860                           ;main.c: 154:                                 i++;
  2861  000282  0100               	movlb	0	; () banked
  2862  000284  2B9C               	incf	main@i_909& (0+255),f,b
  2863  000286                     
  2864                           ; BSR set to: 0
  2865                           ;main.c: 155:                                 delay(50);
  2866  000286  0E00               	movlw	0
  2867  000288  6E32               	movwf	(delay@t+1)^0,c
  2868  00028A  0E32               	movlw	50
  2869  00028C  6E31               	movwf	delay@t^0,c
  2870  00028E  EC24  F01F         	call	_delay	;wreg free
  2871  000292                     
  2872                           ;main.c: 156:                             }
  2873  000292  0100               	movlb	0	; () banked
  2874  000294  4B9F               	infsnz	main@ptr& (0+255),f,b
  2875  000296  2BA0               	incf	(main@ptr+1)& (0+255),f,b
  2876  000298                     l6523:
  2877                           
  2878                           ; BSR set to: 0
  2879  000298  C09F  FFD9         	movff	main@ptr,fsr2l
  2880  00029C  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2881  0002A0  50DF               	movf	indf2,w,c
  2882  0002A2  A4D8               	btfss	status,2,c
  2883  0002A4  EF56  F001         	goto	u4751
  2884  0002A8  EF58  F001         	goto	u4750
  2885  0002AC                     u4751:
  2886  0002AC  EF35  F001         	goto	l6513
  2887  0002B0                     u4750:
  2888  0002B0                     
  2889                           ; BSR set to: 0
  2890                           ;main.c: 158:                             setT1(1500);
  2891  0002B0  0EDC               	movlw	220
  2892  0002B2  6E37               	movwf	setT1@c^0,c
  2893  0002B4  0E05               	movlw	5
  2894  0002B6  6E38               	movwf	(setT1@c+1)^0,c
  2895  0002B8  0E00               	movlw	0
  2896  0002BA  6E39               	movwf	(setT1@c+2)^0,c
  2897  0002BC  0E00               	movlw	0
  2898  0002BE  6E3A               	movwf	(setT1@c+3)^0,c
  2899  0002C0  ECF4  F01F         	call	_setT1	;wreg free
  2900  0002C4                     
  2901                           ;main.c: 159:                             estado = 2;
  2902  0002C4  0E02               	movlw	2
  2903  0002C6  0100               	movlb	0	; () banked
  2904  0002C8  6FBA               	movwf	main@estado& (0+255),b
  2905                           
  2906                           ;main.c: 160:                             break;
  2907  0002CA  EFED  F00D         	goto	l7191
  2908  0002CE                     l6529:
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;main.c: 163:                             if(!statusT1())
  2912  0002CE  EC26  F020         	call	_statusT1	;wreg free
  2913  0002D2  5031               	movf	?_statusT1^0,w,c
  2914  0002D4  1032               	iorwf	(?_statusT1+1)^0,w,c
  2915  0002D6  1033               	iorwf	(?_statusT1+2)^0,w,c
  2916  0002D8  1034               	iorwf	(?_statusT1+3)^0,w,c
  2917  0002DA  A4D8               	btfss	status,2,c
  2918  0002DC  EF72  F001         	goto	u4761
  2919  0002E0  EF74  F001         	goto	u4760
  2920  0002E4                     u4761:
  2921  0002E4  EFED  F00D         	goto	l7191
  2922  0002E8                     u4760:
  2923  0002E8                     l6531:
  2924                           
  2925                           ;main.c: 164:                                 estado = 8;
  2926  0002E8  0E08               	movlw	8
  2927  0002EA  0100               	movlb	0	; () banked
  2928  0002EC  6FBA               	movwf	main@estado& (0+255),b
  2929  0002EE  EFED  F00D         	goto	l7191
  2930  0002F2                     l6533:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 183:                             init_atuadores();
  2934  0002F2  EC5A  F020         	call	_init_atuadores	;wreg free
  2935  0002F6                     
  2936                           ;main.c: 184:                             IHM.print("1: INSERIR SEQUENCIA\n"
  2937  0002F6  0EDF               	movlw	low STR_6
  2938  0002F8  6E38               	movwf	dispLCD_str@str^0,c
  2939  0002FA  0E7B               	movlw	high STR_6
  2940  0002FC  6E39               	movwf	(dispLCD_str@str+1)^0,c
  2941  0002FE  EE20  F0E3         	lfsr	2,_IHM+2
  2942  000302  D802               	call	u4778
  2943  000304  EF8E  F001         	goto	u4779
  2944  000308                     u4778:
  2945  000308  0005               	push	
  2946  00030A  6EFA               	movwf	pclath,c
  2947  00030C  50DE               	movf	postinc2,w,c
  2948  00030E  6EFD               	movwf	tosl,c
  2949  000310  50DE               	movf	postinc2,w,c
  2950  000312  6EFE               	movwf	tosh,c
  2951  000314  50F8               	movf	tblptru,w,c
  2952  000316  6EFF               	movwf	tosu,c
  2953  000318  50FA               	movf	pclath,w,c
  2954  00031A  0012               	return		;indir
  2955  00031C                     u4779:
  2956  00031C                     
  2957                           ;main.c: 188:                             setT1(1000);
  2958  00031C  0EE8               	movlw	232
  2959  00031E  6E37               	movwf	setT1@c^0,c
  2960  000320  0E03               	movlw	3
  2961  000322  6E38               	movwf	(setT1@c+1)^0,c
  2962  000324  0E00               	movlw	0
  2963  000326  6E39               	movwf	(setT1@c+2)^0,c
  2964  000328  0E00               	movlw	0
  2965  00032A  6E3A               	movwf	(setT1@c+3)^0,c
  2966  00032C  ECF4  F01F         	call	_setT1	;wreg free
  2967  000330                     
  2968                           ;main.c: 189:                             estado = 9;
  2969  000330  0E09               	movlw	9
  2970  000332  0100               	movlb	0	; () banked
  2971  000334  6FBA               	movwf	main@estado& (0+255),b
  2972                           
  2973                           ;main.c: 190:                             break;
  2974  000336  EFED  F00D         	goto	l7191
  2975  00033A                     l6541:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 193:                             if(!statusT1())
  2979  00033A  EC26  F020         	call	_statusT1	;wreg free
  2980  00033E  5031               	movf	?_statusT1^0,w,c
  2981  000340  1032               	iorwf	(?_statusT1+1)^0,w,c
  2982  000342  1033               	iorwf	(?_statusT1+2)^0,w,c
  2983  000344  1034               	iorwf	(?_statusT1+3)^0,w,c
  2984  000346  A4D8               	btfss	status,2,c
  2985  000348  EFA8  F001         	goto	u4781
  2986  00034C  EFAA  F001         	goto	u4780
  2987  000350                     u4781:
  2988  000350  EFED  F00D         	goto	l7191
  2989  000354                     u4780:
  2990  000354                     
  2991                           ;main.c: 194:                                 estado = 71;
  2992  000354  0E47               	movlw	71
  2993  000356  0100               	movlb	0	; () banked
  2994  000358  6FBA               	movwf	main@estado& (0+255),b
  2995  00035A  EFED  F00D         	goto	l7191
  2996  00035E                     l6545:
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;main.c: 198:                             tecla = teclado_borda();
  3000  00035E  EC79  F01E         	call	_teclado_borda	;wreg free
  3001  000362  0100               	movlb	0	; () banked
  3002  000364  6FBC               	movwf	main@tecla& (0+255),b
  3003                           
  3004                           ;main.c: 199:                             switch(tecla)
  3005  000366  EFC7  F001         	goto	l6557
  3006  00036A                     l6547:
  3007  00036A  0E03               	movlw	3
  3008  00036C  0100               	movlb	0	; () banked
  3009  00036E  6FBA               	movwf	main@estado& (0+255),b
  3010  000370  EFED  F00D         	goto	l7191
  3011  000374                     l6549:
  3012                           
  3013                           ; BSR set to: 0
  3014  000374  0E48               	movlw	72
  3015  000376  6FBA               	movwf	main@estado& (0+255),b
  3016  000378  EFED  F00D         	goto	l7191
  3017  00037C                     l6551:
  3018                           
  3019                           ; BSR set to: 0
  3020  00037C  0E64               	movlw	100
  3021  00037E  6FBA               	movwf	main@estado& (0+255),b
  3022  000380  EFED  F00D         	goto	l7191
  3023  000384                     l6553:
  3024  000384  0E50               	movlw	80
  3025  000386  0100               	movlb	0	; () banked
  3026  000388  6FBA               	movwf	main@estado& (0+255),b
  3027  00038A  EFED  F00D         	goto	l7191
  3028  00038E                     l6557:
  3029                           
  3030                           ; BSR set to: 0
  3031  00038E  51BC               	movf	main@tecla& (0+255),w,b
  3032  000390  6E59               	movwf	??_main^0,c
  3033  000392  6A5A               	clrf	(??_main+1)^0,c
  3034                           
  3035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3036                           ; Switch size 1, requested type "simple"
  3037                           ; Number of cases is 1, Range of values is 0 to 0
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte            4     3 (average)
  3041                           ;	Chosen strategy is simple_byte
  3042  000394  505A               	movf	(??_main+1)^0,w,c
  3043  000396  0A00               	xorlw	0	; case 0
  3044  000398  B4D8               	btfsc	status,2,c
  3045  00039A  EFD1  F001         	goto	l7991
  3046  00039E  EFED  F00D         	goto	l7191
  3047  0003A2                     l7991:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ; Switch size 1, requested type "simple"
  3051                           ; Number of cases is 4, Range of values is 49 to 52
  3052                           ; switch strategies available:
  3053                           ; Name         Instructions Cycles
  3054                           ; simple_byte           13     7 (average)
  3055                           ;	Chosen strategy is simple_byte
  3056  0003A2  5059               	movf	??_main^0,w,c
  3057  0003A4  0A31               	xorlw	49	; case 49
  3058  0003A6  B4D8               	btfsc	status,2,c
  3059  0003A8  EFB5  F001         	goto	l6547
  3060  0003AC  0A03               	xorlw	3	; case 50
  3061  0003AE  B4D8               	btfsc	status,2,c
  3062  0003B0  EFBA  F001         	goto	l6549
  3063  0003B4  0A01               	xorlw	1	; case 51
  3064  0003B6  B4D8               	btfsc	status,2,c
  3065  0003B8  EFBE  F001         	goto	l6551
  3066  0003BC  0A07               	xorlw	7	; case 52
  3067  0003BE  B4D8               	btfsc	status,2,c
  3068  0003C0  EFC2  F001         	goto	l6553
  3069  0003C4  EFED  F00D         	goto	l7191
  3070  0003C8                     l6559:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 210:                             buscar_dado(10, 10, &init_cond);
  3074  0003C8  0E0A               	movlw	10
  3075  0003CA  6E37               	movwf	buscar_dado@col^0,c
  3076  0003CC  0EB2               	movlw	low main@init_cond
  3077  0003CE  6E38               	movwf	buscar_dado@data^0,c
  3078  0003D0  0E00               	movlw	high main@init_cond
  3079  0003D2  6E39               	movwf	(buscar_dado@data+1)^0,c
  3080  0003D4  0E0A               	movlw	10
  3081  0003D6  EC51  F01F         	call	_buscar_dado
  3082  0003DA                     
  3083                           ;main.c: 211:                             manipula_atuadores_init(init_cond);
  3084  0003DA  0100               	movlb	0	; () banked
  3085  0003DC  51B2               	movf	main@init_cond& (0+255),w,b
  3086  0003DE  ECC5  F01C         	call	_manipula_atuadores_init
  3087  0003E2                     
  3088                           ;main.c: 213:                             EEPROM.buscar(11, vetor_aux);
  3089  0003E2  EE20  F0ED         	lfsr	2,_EEPROM+2
  3090  0003E6  D802               	call	u4798
  3091  0003E8  EF05  F002         	goto	u4799
  3092  0003EC                     u4798:
  3093  0003EC  0005               	push	
  3094  0003EE  6EFA               	movwf	pclath,c
  3095  0003F0  50DE               	movf	postinc2,w,c
  3096  0003F2  6EFD               	movwf	tosl,c
  3097  0003F4  50DE               	movf	postinc2,w,c
  3098  0003F6  6EFE               	movwf	tosh,c
  3099  0003F8  50F8               	movf	tblptru,w,c
  3100  0003FA  6EFF               	movwf	tosu,c
  3101  0003FC  50FA               	movf	pclath,w,c
  3102  0003FE  0E76               	movlw	low main@vetor_aux
  3103  000400  6E37               	movwf	buscar_receita@data^0,c
  3104  000402  0E00               	movlw	high main@vetor_aux
  3105  000404  6E38               	movwf	(buscar_receita@data+1)^0,c
  3106  000406  0E0B               	movlw	11
  3107  000408  0012               	return		;indir
  3108  00040A                     u4799:
  3109  00040A                     
  3110                           ;main.c: 214:                             pt = vetor_aux;
  3111  00040A  0E76               	movlw	low main@vetor_aux
  3112  00040C  0100               	movlb	0	; () banked
  3113  00040E  6F9D               	movwf	main@pt& (0+255),b
  3114  000410  0E00               	movlw	high main@vetor_aux
  3115  000412  6F9E               	movwf	(main@pt+1)& (0+255),b
  3116  000414                     
  3117                           ; BSR set to: 0
  3118                           ;main.c: 216:                             if(*pt == 0xFF)
  3119  000414  C09D  FFD9         	movff	main@pt,fsr2l
  3120  000418  C09E  FFDA         	movff	main@pt+1,fsr2h
  3121  00041C  28DE               	incf	postinc2,w,c
  3122  00041E  A4D8               	btfss	status,2,c
  3123  000420  EF14  F002         	goto	u4801
  3124  000424  EF16  F002         	goto	u4800
  3125  000428                     u4801:
  3126  000428  EF32  F002         	goto	l6573
  3127  00042C                     u4800:
  3128  00042C                     
  3129                           ; BSR set to: 0
  3130                           ;main.c: 217:                             {;main.c: 218:                                
      +                           EEPROM.deletar(tecla % 0x30);
  3131  00042C  EE20  F0EF         	lfsr	2,_EEPROM+4
  3132  000430  D802               	call	u4818
  3133  000432  EF2F  F002         	goto	u4819
  3134  000436                     u4818:
  3135  000436  0005               	push	
  3136  000438  6EFA               	movwf	pclath,c
  3137  00043A  50DE               	movf	postinc2,w,c
  3138  00043C  6EFD               	movwf	tosl,c
  3139  00043E  50DE               	movf	postinc2,w,c
  3140  000440  6EFE               	movwf	tosh,c
  3141  000442  50F8               	movf	tblptru,w,c
  3142  000444  6EFF               	movwf	tosu,c
  3143  000446  50FA               	movf	pclath,w,c
  3144  000448  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3145  00044C  6A32               	clrf	(___awmod@dividend+1)^0,c
  3146  00044E  0E00               	movlw	0
  3147  000450  6E34               	movwf	(___awmod@divisor+1)^0,c
  3148  000452  0E30               	movlw	48
  3149  000454  6E33               	movwf	___awmod@divisor^0,c
  3150  000456  EC9E  F017         	call	___awmod
  3151  00045A  5031               	movf	?___awmod^0,w,c
  3152  00045C  0012               	return		;indir
  3153  00045E                     u4819:
  3154  00045E                     
  3155                           ;main.c: 219:                                 vetor_aux[0] = 0;
  3156  00045E  0E00               	movlw	0
  3157  000460  0100               	movlb	0	; () banked
  3158  000462  6F76               	movwf	main@vetor_aux& (0+255),b
  3159  000464                     l6573:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;main.c: 223:                             for(char *ptr = vetor_aux; *ptr != 0; ptr++)
  3163  000464  0E76               	movlw	low main@vetor_aux
  3164  000466  6FB6               	movwf	main@ptr_915& (0+255),b
  3165  000468  0E00               	movlw	high main@vetor_aux
  3166  00046A  6FB7               	movwf	(main@ptr_915+1)& (0+255),b
  3167  00046C  EFFF  F002         	goto	l6607
  3168  000470                     l6575:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 224:                             {;main.c: 225:                                
      +                           if(*ptr <= 0x64 || *ptr == 0xFE)
  3172  000470  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3173  000474  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3174  000478  0E64               	movlw	100
  3175  00047A  64DF               	cpfsgt	indf2,c
  3176  00047C  EF42  F002         	goto	u4821
  3177  000480  EF44  F002         	goto	u4820
  3178  000484                     u4821:
  3179  000484  EF51  F002         	goto	l6579
  3180  000488                     u4820:
  3181  000488                     
  3182                           ; BSR set to: 0
  3183  000488  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3184  00048C  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3185  000490  0EFE               	movlw	254
  3186  000492  18DE               	xorwf	postinc2,w,c
  3187  000494  A4D8               	btfss	status,2,c
  3188  000496  EF4F  F002         	goto	u4831
  3189  00049A  EF51  F002         	goto	u4830
  3190  00049E                     u4831:
  3191  00049E  EF60  F002         	goto	l6581
  3192  0004A2                     u4830:
  3193  0004A2                     l6579:
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;main.c: 226:                                 {;main.c: 227:                            
      +                                   decodifica(&*ptr);
  3197  0004A2  C0B6  F031         	movff	main@ptr_915,decodifica@d
  3198  0004A6  C0B7  F032         	movff	main@ptr_915+1,decodifica@d+1
  3199  0004AA  ECA9  F013         	call	_decodifica
  3200                           
  3201                           ;main.c: 228:                                     fifo_add_control(*ptr);
  3202  0004AE  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3203  0004B2  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3204  0004B6  50DF               	movf	indf2,w,c
  3205  0004B8  EC14  F01D         	call	_fifo_add_control
  3206                           
  3207                           ;main.c: 229:                                 }
  3208  0004BC  EFFA  F002         	goto	l6603
  3209  0004C0                     l6581:
  3210                           
  3211                           ; BSR set to: 0
  3212  0004C0  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3213  0004C4  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3214  0004C8  0E64               	movlw	100
  3215  0004CA  64DF               	cpfsgt	indf2,c
  3216  0004CC  EF6A  F002         	goto	u4841
  3217  0004D0  EF6C  F002         	goto	u4840
  3218  0004D4                     u4841:
  3219  0004D4  EF87  F002         	goto	l6587
  3220  0004D8                     u4840:
  3221  0004D8                     
  3222                           ; BSR set to: 0
  3223  0004D8  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3224  0004DC  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3225  0004E0  0EDD               	movlw	221
  3226  0004E2  60DF               	cpfslt	indf2,c
  3227  0004E4  EF76  F002         	goto	u4851
  3228  0004E8  EF78  F002         	goto	u4850
  3229  0004EC                     u4851:
  3230  0004EC  EF87  F002         	goto	l6587
  3231  0004F0                     u4850:
  3232  0004F0                     
  3233                           ; BSR set to: 0
  3234                           ;main.c: 231:                                 {;main.c: 232:                            
      +                                   decodifica(&*ptr);
  3235  0004F0  C0B6  F031         	movff	main@ptr_915,decodifica@d
  3236  0004F4  C0B7  F032         	movff	main@ptr_915+1,decodifica@d+1
  3237  0004F8  ECA9  F013         	call	_decodifica	;wreg free
  3238                           
  3239                           ;main.c: 233:                                     fifo_add_tempo(*ptr);
  3240  0004FC  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3241  000500  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3242  000504  50DF               	movf	indf2,w,c
  3243  000506  EC42  F01C         	call	_fifo_add_tempo
  3244                           
  3245                           ;main.c: 234:                                 }
  3246  00050A  EFFA  F002         	goto	l6603
  3247  00050E                     l6587:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 236:                                 {;main.c: 237:                            
      +                                   decodifica(&*ptr);
  3251  00050E  C0B6  F031         	movff	main@ptr_915,decodifica@d
  3252  000512  C0B7  F032         	movff	main@ptr_915+1,decodifica@d+1
  3253  000516  ECA9  F013         	call	_decodifica	;wreg free
  3254                           
  3255                           ;main.c: 238:                                     switch( *ptr )
  3256  00051A  EF97  F002         	goto	l6593
  3257  00051E                     l664:
  3258  00051E                     l6589:
  3259                           
  3260                           ;main.c: 248:                                                 *ptr &= ~0x20;
  3261  00051E  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3262  000522  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3263  000526  0EDF               	movlw	223
  3264  000528  16DF               	andwf	indf2,f,c
  3265                           
  3266                           ;main.c: 249:                                                 break;
  3267  00052A  EFC8  F002         	goto	l6595
  3268  00052E                     l6593:
  3269  00052E  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3270  000532  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3271  000536  50DF               	movf	indf2,w,c
  3272  000538  6E59               	movwf	??_main^0,c
  3273  00053A  6A5A               	clrf	(??_main+1)^0,c
  3274                           
  3275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3276                           ; Switch size 1, requested type "simple"
  3277                           ; Number of cases is 1, Range of values is 0 to 0
  3278                           ; switch strategies available:
  3279                           ; Name         Instructions Cycles
  3280                           ; simple_byte            4     3 (average)
  3281                           ;	Chosen strategy is simple_byte
  3282  00053C  505A               	movf	(??_main+1)^0,w,c
  3283  00053E  0A00               	xorlw	0	; case 0
  3284  000540  B4D8               	btfsc	status,2,c
  3285  000542  EFA5  F002         	goto	l7993
  3286  000546  EFC8  F002         	goto	l6595
  3287  00054A                     l7993:
  3288                           
  3289                           ; Switch size 1, requested type "simple"
  3290                           ; Number of cases is 8, Range of values is 65 to 100
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte           25    13 (average)
  3294                           ;	Chosen strategy is simple_byte
  3295  00054A  5059               	movf	??_main^0,w,c
  3296  00054C  0A41               	xorlw	65	; case 65
  3297  00054E  B4D8               	btfsc	status,2,c
  3298  000550  EF8F  F002         	goto	l664
  3299  000554  0A03               	xorlw	3	; case 66
  3300  000556  B4D8               	btfsc	status,2,c
  3301  000558  EF8F  F002         	goto	l6589
  3302  00055C  0A01               	xorlw	1	; case 67
  3303  00055E  B4D8               	btfsc	status,2,c
  3304  000560  EF8F  F002         	goto	l6589
  3305  000564  0A07               	xorlw	7	; case 68
  3306  000566  B4D8               	btfsc	status,2,c
  3307  000568  EF8F  F002         	goto	l6589
  3308  00056C  0A25               	xorlw	37	; case 97
  3309  00056E  B4D8               	btfsc	status,2,c
  3310  000570  EF8F  F002         	goto	l6589
  3311  000574  0A03               	xorlw	3	; case 98
  3312  000576  B4D8               	btfsc	status,2,c
  3313  000578  EF8F  F002         	goto	l6589
  3314  00057C  0A01               	xorlw	1	; case 99
  3315  00057E  B4D8               	btfsc	status,2,c
  3316  000580  EF8F  F002         	goto	l6589
  3317  000584  0A07               	xorlw	7	; case 100
  3318  000586  B4D8               	btfsc	status,2,c
  3319  000588  EF8F  F002         	goto	l6589
  3320  00058C  EFC8  F002         	goto	l6595
  3321  000590                     l6595:
  3322                           
  3323                           ;main.c: 251:                                         alt_atuador(*ptr);
  3324  000590  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3325  000594  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3326  000598  50DF               	movf	indf2,w,c
  3327  00059A  EC97  F019         	call	_alt_atuador
  3328                           
  3329                           ;main.c: 252:                                         fifo_add( ler_atuador(*ptr) ? *ptr
      +                           : *ptr|0x20 );
  3330  00059E  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3331  0005A2  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3332  0005A6  50DF               	movf	indf2,w,c
  3333  0005A8  EC47  F019         	call	_ler_atuador
  3334  0005AC  0900               	iorlw	0
  3335  0005AE  A4D8               	btfss	status,2,c
  3336  0005B0  EFDC  F002         	goto	u4861
  3337  0005B4  EFDE  F002         	goto	u4860
  3338  0005B8                     u4861:
  3339  0005B8  EFED  F002         	goto	l6599
  3340  0005BC                     u4860:
  3341  0005BC  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3342  0005C0  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3343  0005C4  50DF               	movf	indf2,w,c
  3344  0005C6  6E59               	movwf	??_main^0,c
  3345  0005C8  6A5A               	clrf	(??_main+1)^0,c
  3346  0005CA  0E20               	movlw	32
  3347  0005CC  1059               	iorwf	??_main^0,w,c
  3348  0005CE  0100               	movlb	0	; () banked
  3349  0005D0  6F86               	movwf	_main$919& (0+255),b
  3350  0005D2  505A               	movf	(??_main+1)^0,w,c
  3351  0005D4  6F87               	movwf	(_main$919+1)& (0+255),b
  3352  0005D6  EFF7  F002         	goto	l6601
  3353  0005DA                     l6599:
  3354  0005DA  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3355  0005DE  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3356  0005E2  50DF               	movf	indf2,w,c
  3357  0005E4  6E59               	movwf	??_main^0,c
  3358  0005E6  5059               	movf	??_main^0,w,c
  3359  0005E8  0100               	movlb	0	; () banked
  3360  0005EA  6F86               	movwf	_main$919& (0+255),b
  3361  0005EC  6B87               	clrf	(_main$919+1)& (0+255),b
  3362  0005EE                     l6601:
  3363                           
  3364                           ; BSR set to: 0
  3365  0005EE  5186               	movf	_main$919& (0+255),w,b
  3366  0005F0  EC6E  F01C         	call	_fifo_add
  3367  0005F4                     l6603:
  3368                           
  3369                           ;main.c: 254:                                 fifo_print();
  3370  0005F4  EC64  F00F         	call	_fifo_print	;wreg free
  3371  0005F8                     
  3372                           ;main.c: 255:                             }
  3373  0005F8  0100               	movlb	0	; () banked
  3374  0005FA  4BB6               	infsnz	main@ptr_915& (0+255),f,b
  3375  0005FC  2BB7               	incf	(main@ptr_915+1)& (0+255),f,b
  3376  0005FE                     l6607:
  3377                           
  3378                           ; BSR set to: 0
  3379  0005FE  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3380  000602  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3381  000606  50DF               	movf	indf2,w,c
  3382  000608  A4D8               	btfss	status,2,c
  3383  00060A  EF09  F003         	goto	u4871
  3384  00060E  EF0B  F003         	goto	u4870
  3385  000612                     u4871:
  3386  000612  EF38  F002         	goto	l6575
  3387  000616                     u4870:
  3388  000616                     l6609:
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 257:                             dispLCD_clr();
  3392  000616  EC6E  F020         	call	_dispLCD_clr	;wreg free
  3393  00061A                     l6611:
  3394                           
  3395                           ;main.c: 258:                             estado = 16;
  3396  00061A  0E10               	movlw	16
  3397  00061C  0100               	movlb	0	; () banked
  3398  00061E  6FBA               	movwf	main@estado& (0+255),b
  3399                           
  3400                           ;main.c: 259:                             break;
  3401  000620  EFED  F00D         	goto	l7191
  3402  000624                     l6613:
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 262:                             dispLCD_clr();
  3406  000624  EC6E  F020         	call	_dispLCD_clr	;wreg free
  3407  000628                     
  3408                           ;main.c: 263:                             dispLCD(0,0,"1: VERIFICAR MEMORIA");
  3409  000628  0E00               	movlw	0
  3410  00062A  6E38               	movwf	dispLCD@col^0,c
  3411  00062C  0E13               	movlw	low STR_7
  3412  00062E  6E39               	movwf	dispLCD@str^0,c
  3413  000630  0E7F               	movlw	high STR_7
  3414  000632  6E3A               	movwf	(dispLCD@str+1)^0,c
  3415  000634  0E00               	movlw	0
  3416  000636  EC38  F01D         	call	_dispLCD
  3417  00063A                     
  3418                           ;main.c: 264:                             dispLCD(1,0,"2: LIMPAR MEMORIA   ");
  3419  00063A  0E00               	movlw	0
  3420  00063C  6E38               	movwf	dispLCD@col^0,c
  3421  00063E  0E95               	movlw	low STR_8
  3422  000640  6E39               	movwf	dispLCD@str^0,c
  3423  000642  0E7E               	movlw	high STR_8
  3424  000644  6E3A               	movwf	(dispLCD@str+1)^0,c
  3425  000646  0E01               	movlw	1
  3426  000648  EC38  F01D         	call	_dispLCD
  3427  00064C                     
  3428                           ;main.c: 266:                             setT1(1000);
  3429  00064C  0EE8               	movlw	232
  3430  00064E  6E37               	movwf	setT1@c^0,c
  3431  000650  0E03               	movlw	3
  3432  000652  6E38               	movwf	(setT1@c+1)^0,c
  3433  000654  0E00               	movlw	0
  3434  000656  6E39               	movwf	(setT1@c+2)^0,c
  3435  000658  0E00               	movlw	0
  3436  00065A  6E3A               	movwf	(setT1@c+3)^0,c
  3437  00065C  ECF4  F01F         	call	_setT1	;wreg free
  3438  000660                     
  3439                           ;main.c: 267:                             estado = 81;
  3440  000660  0E51               	movlw	81
  3441  000662  0100               	movlb	0	; () banked
  3442  000664  6FBA               	movwf	main@estado& (0+255),b
  3443                           
  3444                           ;main.c: 268:                             break;
  3445  000666  EFED  F00D         	goto	l7191
  3446  00066A                     l6623:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;main.c: 271:                             if(!statusT1())
  3450  00066A  EC26  F020         	call	_statusT1	;wreg free
  3451  00066E  5031               	movf	?_statusT1^0,w,c
  3452  000670  1032               	iorwf	(?_statusT1+1)^0,w,c
  3453  000672  1033               	iorwf	(?_statusT1+2)^0,w,c
  3454  000674  1034               	iorwf	(?_statusT1+3)^0,w,c
  3455  000676  A4D8               	btfss	status,2,c
  3456  000678  EF40  F003         	goto	u4881
  3457  00067C  EF42  F003         	goto	u4880
  3458  000680                     u4881:
  3459  000680  EFED  F00D         	goto	l7191
  3460  000684                     u4880:
  3461  000684                     
  3462                           ;main.c: 272:                                 estado = 82;
  3463  000684  0E52               	movlw	82
  3464  000686  0100               	movlb	0	; () banked
  3465  000688  6FBA               	movwf	main@estado& (0+255),b
  3466  00068A  EFED  F00D         	goto	l7191
  3467  00068E                     l6627:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;main.c: 276:                             tecla = teclado_borda();
  3471  00068E  EC79  F01E         	call	_teclado_borda	;wreg free
  3472  000692  0100               	movlb	0	; () banked
  3473  000694  6FBC               	movwf	main@tecla& (0+255),b
  3474                           
  3475                           ;main.c: 277:                             switch(tecla)
  3476  000696  EF55  F003         	goto	l6637
  3477  00069A                     l6629:
  3478                           
  3479                           ; BSR set to: 0
  3480  00069A  0E53               	movlw	83
  3481  00069C  6FBA               	movwf	main@estado& (0+255),b
  3482  00069E  EFED  F00D         	goto	l7191
  3483  0006A2                     l6631:
  3484                           
  3485                           ; BSR set to: 0
  3486  0006A2  0E54               	movlw	84
  3487  0006A4  6FBA               	movwf	main@estado& (0+255),b
  3488  0006A6  EFED  F00D         	goto	l7191
  3489  0006AA                     l6637:
  3490                           
  3491                           ; BSR set to: 0
  3492  0006AA  51BC               	movf	main@tecla& (0+255),w,b
  3493  0006AC  6E59               	movwf	??_main^0,c
  3494  0006AE  6A5A               	clrf	(??_main+1)^0,c
  3495                           
  3496                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3497                           ; Switch size 1, requested type "simple"
  3498                           ; Number of cases is 1, Range of values is 0 to 0
  3499                           ; switch strategies available:
  3500                           ; Name         Instructions Cycles
  3501                           ; simple_byte            4     3 (average)
  3502                           ;	Chosen strategy is simple_byte
  3503  0006B0  505A               	movf	(??_main+1)^0,w,c
  3504  0006B2  0A00               	xorlw	0	; case 0
  3505  0006B4  B4D8               	btfsc	status,2,c
  3506  0006B6  EF5F  F003         	goto	l7995
  3507  0006BA  EFED  F00D         	goto	l7191
  3508  0006BE                     l7995:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ; Switch size 1, requested type "simple"
  3512                           ; Number of cases is 3, Range of values is 42 to 50
  3513                           ; switch strategies available:
  3514                           ; Name         Instructions Cycles
  3515                           ; simple_byte           10     6 (average)
  3516                           ;	Chosen strategy is simple_byte
  3517  0006BE  5059               	movf	??_main^0,w,c
  3518  0006C0  0A2A               	xorlw	42	; case 42
  3519  0006C2  B4D8               	btfsc	status,2,c
  3520  0006C4  EF74  F001         	goto	l6531
  3521  0006C8  0A1B               	xorlw	27	; case 49
  3522  0006CA  B4D8               	btfsc	status,2,c
  3523  0006CC  EF4D  F003         	goto	l6629
  3524  0006D0  0A03               	xorlw	3	; case 50
  3525  0006D2  B4D8               	btfsc	status,2,c
  3526  0006D4  EF51  F003         	goto	l6631
  3527  0006D8  EFED  F00D         	goto	l7191
  3528  0006DC                     l6639:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;main.c: 286:                             dispLCD(0, 0, " CERTEZA QUE DESEJA ");
  3532  0006DC  0E00               	movlw	0
  3533  0006DE  6E38               	movwf	dispLCD@col^0,c
  3534  0006E0  0EE9               	movlw	low STR_9
  3535  0006E2  6E39               	movwf	dispLCD@str^0,c
  3536  0006E4  0E7E               	movlw	high STR_9
  3537  0006E6  6E3A               	movwf	(dispLCD@str+1)^0,c
  3538  0006E8  0E00               	movlw	0
  3539  0006EA  EC38  F01D         	call	_dispLCD
  3540                           
  3541                           ;main.c: 287:                             dispLCD(1, 0, "   DELETAR TODA A   ");
  3542  0006EE  0E00               	movlw	0
  3543  0006F0  6E38               	movwf	dispLCD@col^0,c
  3544  0006F2  0E80               	movlw	low STR_10
  3545  0006F4  6E39               	movwf	dispLCD@str^0,c
  3546  0006F6  0E7E               	movlw	high STR_10
  3547  0006F8  6E3A               	movwf	(dispLCD@str+1)^0,c
  3548  0006FA  0E01               	movlw	1
  3549  0006FC  EC38  F01D         	call	_dispLCD
  3550                           
  3551                           ;main.c: 288:                             dispLCD(2, 0, "      MEMORIA ?     ");
  3552  000700  0E00               	movlw	0
  3553  000702  6E38               	movwf	dispLCD@col^0,c
  3554  000704  0E2C               	movlw	low STR_11
  3555  000706  6E39               	movwf	dispLCD@str^0,c
  3556  000708  0E7E               	movlw	high STR_11
  3557  00070A  6E3A               	movwf	(dispLCD@str+1)^0,c
  3558  00070C  0E02               	movlw	2
  3559  00070E  EC38  F01D         	call	_dispLCD
  3560                           
  3561                           ;main.c: 289:                             dispLCD(3, 0, "# - SIM      * - NAO");
  3562  000712  0E00               	movlw	0
  3563  000714  6E38               	movwf	dispLCD@col^0,c
  3564  000716  0EFA               	movlw	low (STR_28+41)
  3565  000718  6E39               	movwf	dispLCD@str^0,c
  3566  00071A  0E7C               	movlw	high (STR_28+41)
  3567  00071C  6E3A               	movwf	(dispLCD@str+1)^0,c
  3568  00071E  0E03               	movlw	3
  3569  000720  EC38  F01D         	call	_dispLCD
  3570  000724                     
  3571                           ;main.c: 291:                             tecla = teclado_borda();
  3572  000724  EC79  F01E         	call	_teclado_borda	;wreg free
  3573  000728  0100               	movlb	0	; () banked
  3574  00072A  6FBC               	movwf	main@tecla& (0+255),b
  3575                           
  3576                           ;main.c: 292:                             switch(tecla)
  3577  00072C  EFA0  F003         	goto	l6651
  3578  000730                     l6643:
  3579                           
  3580                           ; BSR set to: 0
  3581  000730  0E55               	movlw	85
  3582  000732  6FBA               	movwf	main@estado& (0+255),b
  3583  000734  EFED  F00D         	goto	l7191
  3584  000738                     l6645:
  3585                           
  3586                           ; BSR set to: 0
  3587  000738  EC6E  F020         	call	_dispLCD_clr	;wreg free
  3588  00073C  EFC2  F001         	goto	l6553
  3589  000740                     l6651:
  3590                           
  3591                           ; BSR set to: 0
  3592  000740  51BC               	movf	main@tecla& (0+255),w,b
  3593  000742  6E59               	movwf	??_main^0,c
  3594  000744  6A5A               	clrf	(??_main+1)^0,c
  3595                           
  3596                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3597                           ; Switch size 1, requested type "simple"
  3598                           ; Number of cases is 1, Range of values is 0 to 0
  3599                           ; switch strategies available:
  3600                           ; Name         Instructions Cycles
  3601                           ; simple_byte            4     3 (average)
  3602                           ;	Chosen strategy is simple_byte
  3603  000746  505A               	movf	(??_main+1)^0,w,c
  3604  000748  0A00               	xorlw	0	; case 0
  3605  00074A  B4D8               	btfsc	status,2,c
  3606  00074C  EFAA  F003         	goto	l7997
  3607  000750  EFED  F00D         	goto	l7191
  3608  000754                     l7997:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ; Switch size 1, requested type "simple"
  3612                           ; Number of cases is 2, Range of values is 35 to 42
  3613                           ; switch strategies available:
  3614                           ; Name         Instructions Cycles
  3615                           ; simple_byte            7     4 (average)
  3616                           ;	Chosen strategy is simple_byte
  3617  000754  5059               	movf	??_main^0,w,c
  3618  000756  0A23               	xorlw	35	; case 35
  3619  000758  B4D8               	btfsc	status,2,c
  3620  00075A  EF98  F003         	goto	l6643
  3621  00075E  0A09               	xorlw	9	; case 42
  3622  000760  B4D8               	btfsc	status,2,c
  3623  000762  EF9C  F003         	goto	l6645
  3624  000766  EFED  F00D         	goto	l7191
  3625  00076A                     l6653:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;main.c: 301:                             EEPROM.formatar();
  3629  00076A  EE20  F0F3         	lfsr	2,_EEPROM+8
  3630  00076E  D802               	call	u4898
  3631  000770  EFC4  F003         	goto	u4899
  3632  000774                     u4898:
  3633  000774  0005               	push	
  3634  000776  6EFA               	movwf	pclath,c
  3635  000778  50DE               	movf	postinc2,w,c
  3636  00077A  6EFD               	movwf	tosl,c
  3637  00077C  50DE               	movf	postinc2,w,c
  3638  00077E  6EFE               	movwf	tosh,c
  3639  000780  50F8               	movf	tblptru,w,c
  3640  000782  6EFF               	movwf	tosu,c
  3641  000784  50FA               	movf	pclath,w,c
  3642  000786  0012               	return		;indir
  3643  000788                     u4899:
  3644  000788                     
  3645                           ;main.c: 302:                             dispLCD_clr();
  3646  000788  EC6E  F020         	call	_dispLCD_clr	;wreg free
  3647  00078C                     
  3648                           ;main.c: 303:                             for(char i = 0; i <= 3; i++)
  3649  00078C  0E00               	movlw	0
  3650  00078E  0100               	movlb	0	; () banked
  3651  000790  6FA5               	movwf	main@i_930& (0+255),b
  3652  000792                     l6659:
  3653                           
  3654                           ; BSR set to: 0
  3655  000792  0E03               	movlw	3
  3656  000794  65A5               	cpfsgt	main@i_930& (0+255),b
  3657  000796  EFCF  F003         	goto	u4901
  3658  00079A  EFD1  F003         	goto	u4900
  3659  00079E                     u4901:
  3660  00079E  EFD3  F003         	goto	l6663
  3661  0007A2                     u4900:
  3662  0007A2  EFF5  F003         	goto	l6681
  3663  0007A6                     l6663:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;main.c: 304:                             {;main.c: 305:                                
      +                           for(char j = 0; j <= 19; j++)
  3667  0007A6  0E00               	movlw	0
  3668  0007A8  6FA6               	movwf	main@j_931& (0+255),b
  3669  0007AA                     l6665:
  3670                           
  3671                           ; BSR set to: 0
  3672  0007AA  0E13               	movlw	19
  3673  0007AC  65A6               	cpfsgt	main@j_931& (0+255),b
  3674  0007AE  EFDB  F003         	goto	u4911
  3675  0007B2  EFDD  F003         	goto	u4910
  3676  0007B6                     u4911:
  3677  0007B6  EFDF  F003         	goto	l6669
  3678  0007BA                     u4910:
  3679  0007BA  EFF2  F003         	goto	l6677
  3680  0007BE                     l6669:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;main.c: 306:                                 {;main.c: 307:                            
      +                                   dispLCD(i, j, "\377");
  3684  0007BE  C0A6  F038         	movff	main@j_931,dispLCD@col
  3685  0007C2  0EFD               	movlw	low STR_3
  3686  0007C4  6E39               	movwf	dispLCD@str^0,c
  3687  0007C6  0E7F               	movlw	high STR_3
  3688  0007C8  6E3A               	movwf	(dispLCD@str+1)^0,c
  3689  0007CA  51A5               	movf	main@i_930& (0+255),w,b
  3690  0007CC  EC38  F01D         	call	_dispLCD
  3691  0007D0                     
  3692                           ;main.c: 308:                                     delay(10);
  3693  0007D0  0E00               	movlw	0
  3694  0007D2  6E32               	movwf	(delay@t+1)^0,c
  3695  0007D4  0E0A               	movlw	10
  3696  0007D6  6E31               	movwf	delay@t^0,c
  3697  0007D8  EC24  F01F         	call	_delay	;wreg free
  3698  0007DC                     
  3699                           ;main.c: 309:                                 }
  3700  0007DC  0100               	movlb	0	; () banked
  3701  0007DE  2BA6               	incf	main@j_931& (0+255),f,b
  3702  0007E0  EFD5  F003         	goto	l6665
  3703  0007E4                     l6677:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 310:                             }
  3707  0007E4  2BA5               	incf	main@i_930& (0+255),f,b
  3708  0007E6  EFC9  F003         	goto	l6659
  3709  0007EA                     l6681:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;main.c: 312:                             for(char i = 0; i <= 3; i++)
  3713  0007EA  0E00               	movlw	0
  3714  0007EC  6FA7               	movwf	main@i_933& (0+255),b
  3715  0007EE                     l6683:
  3716                           
  3717                           ; BSR set to: 0
  3718  0007EE  0E03               	movlw	3
  3719  0007F0  65A7               	cpfsgt	main@i_933& (0+255),b
  3720  0007F2  EFFD  F003         	goto	u4921
  3721  0007F6  EFFF  F003         	goto	u4920
  3722  0007FA                     u4921:
  3723  0007FA  EF01  F004         	goto	l6687
  3724  0007FE                     u4920:
  3725  0007FE  EF23  F004         	goto	l6705
  3726  000802                     l6687:
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;main.c: 313:                             {;main.c: 314:                                
      +                           for(char j = 0; j <= 19; j++)
  3730  000802  0E00               	movlw	0
  3731  000804  6FA8               	movwf	main@j_934& (0+255),b
  3732  000806                     l6689:
  3733                           
  3734                           ; BSR set to: 0
  3735  000806  0E13               	movlw	19
  3736  000808  65A8               	cpfsgt	main@j_934& (0+255),b
  3737  00080A  EF09  F004         	goto	u4931
  3738  00080E  EF0B  F004         	goto	u4930
  3739  000812                     u4931:
  3740  000812  EF0D  F004         	goto	l6693
  3741  000816                     u4930:
  3742  000816  EF20  F004         	goto	l6701
  3743  00081A                     l6693:
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 315:                                 {;main.c: 316:                            
      +                                   dispLCD(i, j, " ");
  3747  00081A  C0A8  F038         	movff	main@j_934,dispLCD@col
  3748  00081E  0EAC               	movlw	low (STR_26+19)
  3749  000820  6E39               	movwf	dispLCD@str^0,c
  3750  000822  0E7D               	movlw	high (STR_26+19)
  3751  000824  6E3A               	movwf	(dispLCD@str+1)^0,c
  3752  000826  51A7               	movf	main@i_933& (0+255),w,b
  3753  000828  EC38  F01D         	call	_dispLCD
  3754  00082C                     
  3755                           ;main.c: 317:                                     delay(10);
  3756  00082C  0E00               	movlw	0
  3757  00082E  6E32               	movwf	(delay@t+1)^0,c
  3758  000830  0E0A               	movlw	10
  3759  000832  6E31               	movwf	delay@t^0,c
  3760  000834  EC24  F01F         	call	_delay	;wreg free
  3761  000838                     
  3762                           ;main.c: 318:                                 }
  3763  000838  0100               	movlb	0	; () banked
  3764  00083A  2BA8               	incf	main@j_934& (0+255),f,b
  3765  00083C  EF03  F004         	goto	l6689
  3766  000840                     l6701:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;main.c: 319:                             }
  3770  000840  2BA7               	incf	main@i_933& (0+255),f,b
  3771  000842  EFF7  F003         	goto	l6683
  3772  000846                     l6705:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 320:                             dispLCD(1, 0, "       DELETED      ");
  3776  000846  0E00               	movlw	0
  3777  000848  6E38               	movwf	dispLCD@col^0,c
  3778  00084A  0E02               	movlw	low STR_15
  3779  00084C  6E39               	movwf	dispLCD@str^0,c
  3780  00084E  0E7E               	movlw	high STR_15
  3781  000850  6E3A               	movwf	(dispLCD@str+1)^0,c
  3782  000852  0E01               	movlw	1
  3783  000854  EC38  F01D         	call	_dispLCD
  3784                           
  3785                           ;main.c: 321:                             dispLCD(2, 0, "        MEMORY      ");
  3786  000858  0E00               	movlw	0
  3787  00085A  6E38               	movwf	dispLCD@col^0,c
  3788  00085C  0E17               	movlw	low STR_16
  3789  00085E  6E39               	movwf	dispLCD@str^0,c
  3790  000860  0E7E               	movlw	high STR_16
  3791  000862  6E3A               	movwf	(dispLCD@str+1)^0,c
  3792  000864  0E02               	movlw	2
  3793  000866  EC38  F01D         	call	_dispLCD
  3794  00086A                     
  3795                           ;main.c: 323:                             setT1(1000);
  3796  00086A  0EE8               	movlw	232
  3797  00086C  6E37               	movwf	setT1@c^0,c
  3798  00086E  0E03               	movlw	3
  3799  000870  6E38               	movwf	(setT1@c+1)^0,c
  3800  000872  0E00               	movlw	0
  3801  000874  6E39               	movwf	(setT1@c+2)^0,c
  3802  000876  0E00               	movlw	0
  3803  000878  6E3A               	movwf	(setT1@c+3)^0,c
  3804  00087A  ECF4  F01F         	call	_setT1	;wreg free
  3805  00087E                     
  3806                           ;main.c: 324:                             estado = 86;
  3807  00087E  0E56               	movlw	86
  3808  000880  0100               	movlb	0	; () banked
  3809  000882  6FBA               	movwf	main@estado& (0+255),b
  3810                           
  3811                           ;main.c: 325:                             break;
  3812  000884  EFED  F00D         	goto	l7191
  3813  000888                     l6711:
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;main.c: 328:                             if(!statusT1())
  3817  000888  EC26  F020         	call	_statusT1	;wreg free
  3818  00088C  5031               	movf	?_statusT1^0,w,c
  3819  00088E  1032               	iorwf	(?_statusT1+1)^0,w,c
  3820  000890  1033               	iorwf	(?_statusT1+2)^0,w,c
  3821  000892  1034               	iorwf	(?_statusT1+3)^0,w,c
  3822  000894  A4D8               	btfss	status,2,c
  3823  000896  EF4F  F004         	goto	u4941
  3824  00089A  EF51  F004         	goto	u4940
  3825  00089E                     u4941:
  3826  00089E  EFED  F00D         	goto	l7191
  3827  0008A2                     u4940:
  3828  0008A2  EFC2  F001         	goto	l6553
  3829  0008A6                     l6715:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 333:                             IHM.clr();
  3833  0008A6  EE20  F0E9         	lfsr	2,_IHM+8
  3834  0008AA  D802               	call	u4958
  3835  0008AC  EF62  F004         	goto	u4959
  3836  0008B0                     u4958:
  3837  0008B0  0005               	push	
  3838  0008B2  6EFA               	movwf	pclath,c
  3839  0008B4  50DE               	movf	postinc2,w,c
  3840  0008B6  6EFD               	movwf	tosl,c
  3841  0008B8  50DE               	movf	postinc2,w,c
  3842  0008BA  6EFE               	movwf	tosh,c
  3843  0008BC  50F8               	movf	tblptru,w,c
  3844  0008BE  6EFF               	movwf	tosu,c
  3845  0008C0  50FA               	movf	pclath,w,c
  3846  0008C2  0012               	return		;indir
  3847  0008C4                     u4959:
  3848  0008C4                     
  3849                           ;main.c: 334:                             IHM.print(" ESCOLHA A MEMORIA \n"
  3850  0008C4  0E32               	movlw	low STR_17
  3851  0008C6  6E38               	movwf	dispLCD_str@str^0,c
  3852  0008C8  0E7C               	movlw	high STR_17
  3853  0008CA  6E39               	movwf	(dispLCD_str@str+1)^0,c
  3854  0008CC  EE20  F0E3         	lfsr	2,_IHM+2
  3855  0008D0  D802               	call	u4968
  3856  0008D2  EF75  F004         	goto	u4969
  3857  0008D6                     u4968:
  3858  0008D6  0005               	push	
  3859  0008D8  6EFA               	movwf	pclath,c
  3860  0008DA  50DE               	movf	postinc2,w,c
  3861  0008DC  6EFD               	movwf	tosl,c
  3862  0008DE  50DE               	movf	postinc2,w,c
  3863  0008E0  6EFE               	movwf	tosh,c
  3864  0008E2  50F8               	movf	tblptru,w,c
  3865  0008E4  6EFF               	movwf	tosu,c
  3866  0008E6  50FA               	movf	pclath,w,c
  3867  0008E8  0012               	return		;indir
  3868  0008EA                     u4969:
  3869  0008EA                     
  3870                           ;main.c: 338:                             estado = 73;
  3871  0008EA  0E49               	movlw	73
  3872  0008EC  0100               	movlb	0	; () banked
  3873  0008EE  6FBA               	movwf	main@estado& (0+255),b
  3874  0008F0                     l6721:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;main.c: 341:                             tecla = teclado_borda();
  3878  0008F0  EC79  F01E         	call	_teclado_borda	;wreg free
  3879  0008F4  0100               	movlb	0	; () banked
  3880  0008F6  6FBC               	movwf	main@tecla& (0+255),b
  3881                           
  3882                           ;main.c: 342:                             switch(tecla)
  3883  0008F8  EFB9  F005         	goto	l6781
  3884  0008FC                     l706:
  3885  0008FC                     l6723:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 354:                                            buscar_dado(10, tecla % 0x30, &
      +                          init_cond);
  3889  0008FC  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3890  000900  6A32               	clrf	(___awmod@dividend+1)^0,c
  3891  000902  0E00               	movlw	0
  3892  000904  6E34               	movwf	(___awmod@divisor+1)^0,c
  3893  000906  0E30               	movlw	48
  3894  000908  6E33               	movwf	___awmod@divisor^0,c
  3895  00090A  EC9E  F017         	call	___awmod	;wreg free
  3896  00090E  5031               	movf	?___awmod^0,w,c
  3897  000910  6E37               	movwf	buscar_dado@col^0,c
  3898  000912  0EB2               	movlw	low main@init_cond
  3899  000914  6E38               	movwf	buscar_dado@data^0,c
  3900  000916  0E00               	movlw	high main@init_cond
  3901  000918  6E39               	movwf	(buscar_dado@data+1)^0,c
  3902  00091A  0E0A               	movlw	10
  3903  00091C  EC51  F01F         	call	_buscar_dado
  3904  000920                     
  3905                           ;main.c: 355:                                            manipula_atuadores_init(init_co
      +                          nd);
  3906  000920  0100               	movlb	0	; () banked
  3907  000922  51B2               	movf	main@init_cond& (0+255),w,b
  3908  000924  ECC5  F01C         	call	_manipula_atuadores_init
  3909  000928                     
  3910                           ;main.c: 357:                                            EEPROM.buscar(tecla % 0x30, vet
      +                          or_aux);
  3911  000928  EE20  F0ED         	lfsr	2,_EEPROM+2
  3912  00092C  D802               	call	u4978
  3913  00092E  EFB1  F004         	goto	u4979
  3914  000932                     u4978:
  3915  000932  0005               	push	
  3916  000934  6EFA               	movwf	pclath,c
  3917  000936  50DE               	movf	postinc2,w,c
  3918  000938  6EFD               	movwf	tosl,c
  3919  00093A  50DE               	movf	postinc2,w,c
  3920  00093C  6EFE               	movwf	tosh,c
  3921  00093E  50F8               	movf	tblptru,w,c
  3922  000940  6EFF               	movwf	tosu,c
  3923  000942  50FA               	movf	pclath,w,c
  3924  000944  0E76               	movlw	low main@vetor_aux
  3925  000946  6E37               	movwf	buscar_receita@data^0,c
  3926  000948  0E00               	movlw	high main@vetor_aux
  3927  00094A  6E38               	movwf	(buscar_receita@data+1)^0,c
  3928  00094C  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3929  000950  6A32               	clrf	(___awmod@dividend+1)^0,c
  3930  000952  0E00               	movlw	0
  3931  000954  6E34               	movwf	(___awmod@divisor+1)^0,c
  3932  000956  0E30               	movlw	48
  3933  000958  6E33               	movwf	___awmod@divisor^0,c
  3934  00095A  EC9E  F017         	call	___awmod	;wreg free
  3935  00095E  5031               	movf	?___awmod^0,w,c
  3936  000960  0012               	return		;indir
  3937  000962                     u4979:
  3938  000962                     
  3939                           ;main.c: 358:                                            pt = vetor_aux;
  3940  000962  0E76               	movlw	low main@vetor_aux
  3941  000964  0100               	movlb	0	; () banked
  3942  000966  6F9D               	movwf	main@pt& (0+255),b
  3943  000968  0E00               	movlw	high main@vetor_aux
  3944  00096A  6F9E               	movwf	(main@pt+1)& (0+255),b
  3945  00096C                     
  3946                           ; BSR set to: 0
  3947                           ;main.c: 360:                                            if(*pt == 0xFF)
  3948  00096C  C09D  FFD9         	movff	main@pt,fsr2l
  3949  000970  C09E  FFDA         	movff	main@pt+1,fsr2h
  3950  000974  28DE               	incf	postinc2,w,c
  3951  000976  A4D8               	btfss	status,2,c
  3952  000978  EFC0  F004         	goto	u4981
  3953  00097C  EFC2  F004         	goto	u4980
  3954  000980                     u4981:
  3955  000980  EFDE  F004         	goto	l6737
  3956  000984                     u4980:
  3957  000984                     
  3958                           ; BSR set to: 0
  3959                           ;main.c: 361:                                            {;main.c: 362:                 
      +                                                         EEPROM.deletar(tecla % 0x30);
  3960  000984  EE20  F0EF         	lfsr	2,_EEPROM+4
  3961  000988  D802               	call	u4998
  3962  00098A  EFDB  F004         	goto	u4999
  3963  00098E                     u4998:
  3964  00098E  0005               	push	
  3965  000990  6EFA               	movwf	pclath,c
  3966  000992  50DE               	movf	postinc2,w,c
  3967  000994  6EFD               	movwf	tosl,c
  3968  000996  50DE               	movf	postinc2,w,c
  3969  000998  6EFE               	movwf	tosh,c
  3970  00099A  50F8               	movf	tblptru,w,c
  3971  00099C  6EFF               	movwf	tosu,c
  3972  00099E  50FA               	movf	pclath,w,c
  3973  0009A0  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3974  0009A4  6A32               	clrf	(___awmod@dividend+1)^0,c
  3975  0009A6  0E00               	movlw	0
  3976  0009A8  6E34               	movwf	(___awmod@divisor+1)^0,c
  3977  0009AA  0E30               	movlw	48
  3978  0009AC  6E33               	movwf	___awmod@divisor^0,c
  3979  0009AE  EC9E  F017         	call	___awmod
  3980  0009B2  5031               	movf	?___awmod^0,w,c
  3981  0009B4  0012               	return		;indir
  3982  0009B6                     u4999:
  3983  0009B6                     
  3984                           ;main.c: 363:                                                vetor_aux[0] = 0;
  3985  0009B6  0E00               	movlw	0
  3986  0009B8  0100               	movlb	0	; () banked
  3987  0009BA  6F76               	movwf	main@vetor_aux& (0+255),b
  3988  0009BC                     l6737:
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;main.c: 367:                                            for(char *ptr = vetor_aux; *ptr
      +                           != 0; ptr++)
  3992  0009BC  0E76               	movlw	low main@vetor_aux
  3993  0009BE  6FB8               	movwf	main@ptr_940& (0+255),b
  3994  0009C0  0E00               	movlw	high main@vetor_aux
  3995  0009C2  6FB9               	movwf	(main@ptr_940+1)& (0+255),b
  3996  0009C4  EFAB  F005         	goto	l6771
  3997  0009C8                     l6739:
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;main.c: 368:                                            {;main.c: 369:                 
      +                                                          if(*ptr <= 0x64 || *ptr == 0xFE)
  4001  0009C8  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4002  0009CC  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4003  0009D0  0E64               	movlw	100
  4004  0009D2  64DF               	cpfsgt	indf2,c
  4005  0009D4  EFEE  F004         	goto	u5001
  4006  0009D8  EFF0  F004         	goto	u5000
  4007  0009DC                     u5001:
  4008  0009DC  EFFD  F004         	goto	l6743
  4009  0009E0                     u5000:
  4010  0009E0                     
  4011                           ; BSR set to: 0
  4012  0009E0  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4013  0009E4  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4014  0009E8  0EFE               	movlw	254
  4015  0009EA  18DE               	xorwf	postinc2,w,c
  4016  0009EC  A4D8               	btfss	status,2,c
  4017  0009EE  EFFB  F004         	goto	u5011
  4018  0009F2  EFFD  F004         	goto	u5010
  4019  0009F6                     u5011:
  4020  0009F6  EF0C  F005         	goto	l6745
  4021  0009FA                     u5010:
  4022  0009FA                     l6743:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;main.c: 370:                                                 {;main.c: 371:            
      +                                                                   decodifica(&*ptr);
  4026  0009FA  C0B8  F031         	movff	main@ptr_940,decodifica@d
  4027  0009FE  C0B9  F032         	movff	main@ptr_940+1,decodifica@d+1
  4028  000A02  ECA9  F013         	call	_decodifica
  4029                           
  4030                           ;main.c: 372:                                                     fifo_add_control(*ptr)
      +                          ;
  4031  000A06  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4032  000A0A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4033  000A0E  50DF               	movf	indf2,w,c
  4034  000A10  EC14  F01D         	call	_fifo_add_control
  4035                           
  4036                           ;main.c: 373:                                                 }
  4037  000A14  EFA6  F005         	goto	l6767
  4038  000A18                     l6745:
  4039                           
  4040                           ; BSR set to: 0
  4041  000A18  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4042  000A1C  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4043  000A20  0E64               	movlw	100
  4044  000A22  64DF               	cpfsgt	indf2,c
  4045  000A24  EF16  F005         	goto	u5021
  4046  000A28  EF18  F005         	goto	u5020
  4047  000A2C                     u5021:
  4048  000A2C  EF33  F005         	goto	l6751
  4049  000A30                     u5020:
  4050  000A30                     
  4051                           ; BSR set to: 0
  4052  000A30  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4053  000A34  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4054  000A38  0EDD               	movlw	221
  4055  000A3A  60DF               	cpfslt	indf2,c
  4056  000A3C  EF22  F005         	goto	u5031
  4057  000A40  EF24  F005         	goto	u5030
  4058  000A44                     u5031:
  4059  000A44  EF33  F005         	goto	l6751
  4060  000A48                     u5030:
  4061  000A48                     
  4062                           ; BSR set to: 0
  4063                           ;main.c: 375:                                                 {;main.c: 376:            
      +                                                                   decodifica(&*ptr);
  4064  000A48  C0B8  F031         	movff	main@ptr_940,decodifica@d
  4065  000A4C  C0B9  F032         	movff	main@ptr_940+1,decodifica@d+1
  4066  000A50  ECA9  F013         	call	_decodifica	;wreg free
  4067                           
  4068                           ;main.c: 377:                                                     fifo_add_tempo(*ptr);
  4069  000A54  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4070  000A58  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4071  000A5C  50DF               	movf	indf2,w,c
  4072  000A5E  EC42  F01C         	call	_fifo_add_tempo
  4073                           
  4074                           ;main.c: 378:                                                 }
  4075  000A62  EFA6  F005         	goto	l6767
  4076  000A66                     l6751:
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;main.c: 380:                                                 {;main.c: 381:            
      +                                                                   decodifica(&*ptr);
  4080  000A66  C0B8  F031         	movff	main@ptr_940,decodifica@d
  4081  000A6A  C0B9  F032         	movff	main@ptr_940+1,decodifica@d+1
  4082  000A6E  ECA9  F013         	call	_decodifica	;wreg free
  4083                           
  4084                           ;main.c: 382:                                                     switch( *ptr )
  4085  000A72  EF43  F005         	goto	l6757
  4086  000A76                     l726:
  4087  000A76                     l6753:
  4088                           
  4089                           ;main.c: 392:                                                                 *ptr &= ~0
      +                          x20;
  4090  000A76  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4091  000A7A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4092  000A7E  0EDF               	movlw	223
  4093  000A80  16DF               	andwf	indf2,f,c
  4094                           
  4095                           ;main.c: 393:                                                                 break;
  4096  000A82  EF74  F005         	goto	l6759
  4097  000A86                     l6757:
  4098  000A86  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4099  000A8A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4100  000A8E  50DF               	movf	indf2,w,c
  4101  000A90  6E59               	movwf	??_main^0,c
  4102  000A92  6A5A               	clrf	(??_main+1)^0,c
  4103                           
  4104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4105                           ; Switch size 1, requested type "simple"
  4106                           ; Number of cases is 1, Range of values is 0 to 0
  4107                           ; switch strategies available:
  4108                           ; Name         Instructions Cycles
  4109                           ; simple_byte            4     3 (average)
  4110                           ;	Chosen strategy is simple_byte
  4111  000A94  505A               	movf	(??_main+1)^0,w,c
  4112  000A96  0A00               	xorlw	0	; case 0
  4113  000A98  B4D8               	btfsc	status,2,c
  4114  000A9A  EF51  F005         	goto	l7999
  4115  000A9E  EF74  F005         	goto	l6759
  4116  000AA2                     l7999:
  4117                           
  4118                           ; Switch size 1, requested type "simple"
  4119                           ; Number of cases is 8, Range of values is 65 to 100
  4120                           ; switch strategies available:
  4121                           ; Name         Instructions Cycles
  4122                           ; simple_byte           25    13 (average)
  4123                           ;	Chosen strategy is simple_byte
  4124  000AA2  5059               	movf	??_main^0,w,c
  4125  000AA4  0A41               	xorlw	65	; case 65
  4126  000AA6  B4D8               	btfsc	status,2,c
  4127  000AA8  EF3B  F005         	goto	l726
  4128  000AAC  0A03               	xorlw	3	; case 66
  4129  000AAE  B4D8               	btfsc	status,2,c
  4130  000AB0  EF3B  F005         	goto	l6753
  4131  000AB4  0A01               	xorlw	1	; case 67
  4132  000AB6  B4D8               	btfsc	status,2,c
  4133  000AB8  EF3B  F005         	goto	l6753
  4134  000ABC  0A07               	xorlw	7	; case 68
  4135  000ABE  B4D8               	btfsc	status,2,c
  4136  000AC0  EF3B  F005         	goto	l6753
  4137  000AC4  0A25               	xorlw	37	; case 97
  4138  000AC6  B4D8               	btfsc	status,2,c
  4139  000AC8  EF3B  F005         	goto	l6753
  4140  000ACC  0A03               	xorlw	3	; case 98
  4141  000ACE  B4D8               	btfsc	status,2,c
  4142  000AD0  EF3B  F005         	goto	l6753
  4143  000AD4  0A01               	xorlw	1	; case 99
  4144  000AD6  B4D8               	btfsc	status,2,c
  4145  000AD8  EF3B  F005         	goto	l6753
  4146  000ADC  0A07               	xorlw	7	; case 100
  4147  000ADE  B4D8               	btfsc	status,2,c
  4148  000AE0  EF3B  F005         	goto	l6753
  4149  000AE4  EF74  F005         	goto	l6759
  4150  000AE8                     l6759:
  4151                           
  4152                           ;main.c: 395:                                                     alt_atuador(*ptr);
  4153  000AE8  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4154  000AEC  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4155  000AF0  50DF               	movf	indf2,w,c
  4156  000AF2  EC97  F019         	call	_alt_atuador
  4157                           
  4158                           ;main.c: 396:                                                     fifo_add( ler_atuador(
      +                          *ptr) ? *ptr : *ptr|0x20 );
  4159  000AF6  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4160  000AFA  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4161  000AFE  50DF               	movf	indf2,w,c
  4162  000B00  EC47  F019         	call	_ler_atuador
  4163  000B04  0900               	iorlw	0
  4164  000B06  A4D8               	btfss	status,2,c
  4165  000B08  EF88  F005         	goto	u5041
  4166  000B0C  EF8A  F005         	goto	u5040
  4167  000B10                     u5041:
  4168  000B10  EF99  F005         	goto	l6763
  4169  000B14                     u5040:
  4170  000B14  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4171  000B18  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4172  000B1C  50DF               	movf	indf2,w,c
  4173  000B1E  6E59               	movwf	??_main^0,c
  4174  000B20  6A5A               	clrf	(??_main+1)^0,c
  4175  000B22  0E20               	movlw	32
  4176  000B24  1059               	iorwf	??_main^0,w,c
  4177  000B26  0100               	movlb	0	; () banked
  4178  000B28  6F88               	movwf	_main$941& (0+255),b
  4179  000B2A  505A               	movf	(??_main+1)^0,w,c
  4180  000B2C  6F89               	movwf	(_main$941+1)& (0+255),b
  4181  000B2E  EFA3  F005         	goto	l6765
  4182  000B32                     l6763:
  4183  000B32  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4184  000B36  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4185  000B3A  50DF               	movf	indf2,w,c
  4186  000B3C  6E59               	movwf	??_main^0,c
  4187  000B3E  5059               	movf	??_main^0,w,c
  4188  000B40  0100               	movlb	0	; () banked
  4189  000B42  6F88               	movwf	_main$941& (0+255),b
  4190  000B44  6B89               	clrf	(_main$941+1)& (0+255),b
  4191  000B46                     l6765:
  4192                           
  4193                           ; BSR set to: 0
  4194  000B46  5188               	movf	_main$941& (0+255),w,b
  4195  000B48  EC6E  F01C         	call	_fifo_add
  4196  000B4C                     l6767:
  4197                           
  4198                           ;main.c: 398:                                                 fifo_print();
  4199  000B4C  EC64  F00F         	call	_fifo_print	;wreg free
  4200  000B50                     
  4201                           ;main.c: 399:                                            }
  4202  000B50  0100               	movlb	0	; () banked
  4203  000B52  4BB8               	infsnz	main@ptr_940& (0+255),f,b
  4204  000B54  2BB9               	incf	(main@ptr_940+1)& (0+255),f,b
  4205  000B56                     l6771:
  4206                           
  4207                           ; BSR set to: 0
  4208  000B56  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4209  000B5A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4210  000B5E  50DF               	movf	indf2,w,c
  4211  000B60  A4D8               	btfss	status,2,c
  4212  000B62  EFB5  F005         	goto	u5051
  4213  000B66  EFB7  F005         	goto	u5050
  4214  000B6A                     u5051:
  4215  000B6A  EFE4  F004         	goto	l6739
  4216  000B6E                     u5050:
  4217  000B6E  EF0B  F003         	goto	l6609
  4218  000B72                     l6781:
  4219                           
  4220                           ; BSR set to: 0
  4221  000B72  51BC               	movf	main@tecla& (0+255),w,b
  4222  000B74  6E59               	movwf	??_main^0,c
  4223  000B76  6A5A               	clrf	(??_main+1)^0,c
  4224                           
  4225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4226                           ; Switch size 1, requested type "simple"
  4227                           ; Number of cases is 1, Range of values is 0 to 0
  4228                           ; switch strategies available:
  4229                           ; Name         Instructions Cycles
  4230                           ; simple_byte            4     3 (average)
  4231                           ;	Chosen strategy is simple_byte
  4232  000B78  505A               	movf	(??_main+1)^0,w,c
  4233  000B7A  0A00               	xorlw	0	; case 0
  4234  000B7C  B4D8               	btfsc	status,2,c
  4235  000B7E  EFC3  F005         	goto	l8001
  4236  000B82  EFED  F00D         	goto	l7191
  4237  000B86                     l8001:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ; Switch size 1, requested type "simple"
  4241                           ; Number of cases is 11, Range of values is 42 to 57
  4242                           ; switch strategies available:
  4243                           ; Name         Instructions Cycles
  4244                           ; simple_byte           34    18 (average)
  4245                           ;	Chosen strategy is simple_byte
  4246  000B86  5059               	movf	??_main^0,w,c
  4247  000B88  0A2A               	xorlw	42	; case 42
  4248  000B8A  B4D8               	btfsc	status,2,c
  4249  000B8C  EF74  F001         	goto	l6531
  4250  000B90  0A1A               	xorlw	26	; case 48
  4251  000B92  B4D8               	btfsc	status,2,c
  4252  000B94  EF7E  F004         	goto	l706
  4253  000B98  0A01               	xorlw	1	; case 49
  4254  000B9A  B4D8               	btfsc	status,2,c
  4255  000B9C  EF7E  F004         	goto	l706
  4256  000BA0  0A03               	xorlw	3	; case 50
  4257  000BA2  B4D8               	btfsc	status,2,c
  4258  000BA4  EF7E  F004         	goto	l6723
  4259  000BA8  0A01               	xorlw	1	; case 51
  4260  000BAA  B4D8               	btfsc	status,2,c
  4261  000BAC  EF7E  F004         	goto	l6723
  4262  000BB0  0A07               	xorlw	7	; case 52
  4263  000BB2  B4D8               	btfsc	status,2,c
  4264  000BB4  EF7E  F004         	goto	l6723
  4265  000BB8  0A01               	xorlw	1	; case 53
  4266  000BBA  B4D8               	btfsc	status,2,c
  4267  000BBC  EF7E  F004         	goto	l6723
  4268  000BC0  0A03               	xorlw	3	; case 54
  4269  000BC2  B4D8               	btfsc	status,2,c
  4270  000BC4  EF7E  F004         	goto	l6723
  4271  000BC8  0A01               	xorlw	1	; case 55
  4272  000BCA  B4D8               	btfsc	status,2,c
  4273  000BCC  EF7E  F004         	goto	l6723
  4274  000BD0  0A0F               	xorlw	15	; case 56
  4275  000BD2  B4D8               	btfsc	status,2,c
  4276  000BD4  EF7E  F004         	goto	l6723
  4277  000BD8  0A01               	xorlw	1	; case 57
  4278  000BDA  B4D8               	btfsc	status,2,c
  4279  000BDC  EF7E  F004         	goto	l6723
  4280  000BE0  EFED  F00D         	goto	l7191
  4281  000BE4                     l6783:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;main.c: 410:                             IHM.clr();
  4285  000BE4  EE20  F0E9         	lfsr	2,_IHM+8
  4286  000BE8  D802               	call	u5068
  4287  000BEA  EF01  F006         	goto	u5069
  4288  000BEE                     u5068:
  4289  000BEE  0005               	push	
  4290  000BF0  6EFA               	movwf	pclath,c
  4291  000BF2  50DE               	movf	postinc2,w,c
  4292  000BF4  6EFD               	movwf	tosl,c
  4293  000BF6  50DE               	movf	postinc2,w,c
  4294  000BF8  6EFE               	movwf	tosh,c
  4295  000BFA  50F8               	movf	tblptru,w,c
  4296  000BFC  6EFF               	movwf	tosu,c
  4297  000BFE  50FA               	movf	pclath,w,c
  4298  000C00  0012               	return		;indir
  4299  000C02                     u5069:
  4300  000C02                     
  4301                           ;main.c: 411:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
  4302  000C02  EE20  F0E5         	lfsr	2,_IHM+4
  4303  000C06  D802               	call	u5078
  4304  000C08  EF17  F006         	goto	u5079
  4305  000C0C                     u5078:
  4306  000C0C  0005               	push	
  4307  000C0E  6EFA               	movwf	pclath,c
  4308  000C10  50DE               	movf	postinc2,w,c
  4309  000C12  6EFD               	movwf	tosl,c
  4310  000C14  50DE               	movf	postinc2,w,c
  4311  000C16  6EFE               	movwf	tosh,c
  4312  000C18  50F8               	movf	tblptru,w,c
  4313  000C1A  6EFF               	movwf	tosu,c
  4314  000C1C  50FA               	movf	pclath,w,c
  4315  000C1E  0E00               	movlw	0
  4316  000C20  6E38               	movwf	dispLCD@col^0,c
  4317  000C22  0EAA               	movlw	low STR_18
  4318  000C24  6E39               	movwf	dispLCD@str^0,c
  4319  000C26  0E7E               	movlw	high STR_18
  4320  000C28  6E3A               	movwf	(dispLCD@str+1)^0,c
  4321  000C2A  0E00               	movlw	0
  4322  000C2C  0012               	return		;indir
  4323  000C2E                     u5079:
  4324  000C2E                     
  4325                           ;main.c: 412:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
  4326  000C2E  EE20  F0E5         	lfsr	2,_IHM+4
  4327  000C32  D802               	call	u5088
  4328  000C34  EF2D  F006         	goto	u5089
  4329  000C38                     u5088:
  4330  000C38  0005               	push	
  4331  000C3A  6EFA               	movwf	pclath,c
  4332  000C3C  50DE               	movf	postinc2,w,c
  4333  000C3E  6EFD               	movwf	tosl,c
  4334  000C40  50DE               	movf	postinc2,w,c
  4335  000C42  6EFE               	movwf	tosh,c
  4336  000C44  50F8               	movf	tblptru,w,c
  4337  000C46  6EFF               	movwf	tosu,c
  4338  000C48  50FA               	movf	pclath,w,c
  4339  000C4A  0E00               	movlw	0
  4340  000C4C  6E38               	movwf	dispLCD@col^0,c
  4341  000C4E  0E56               	movlw	low STR_19
  4342  000C50  6E39               	movwf	dispLCD@str^0,c
  4343  000C52  0E7E               	movlw	high STR_19
  4344  000C54  6E3A               	movwf	(dispLCD@str+1)^0,c
  4345  000C56  0E01               	movlw	1
  4346  000C58  0012               	return		;indir
  4347  000C5A                     u5089:
  4348  000C5A                     
  4349                           ;main.c: 413:                             estado = 6;
  4350  000C5A  0E06               	movlw	6
  4351  000C5C  0100               	movlb	0	; () banked
  4352  000C5E  6FBA               	movwf	main@estado& (0+255),b
  4353                           
  4354                           ;main.c: 414:                             break;
  4355  000C60  EFED  F00D         	goto	l7191
  4356  000C64                     l6791:
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;main.c: 417:                             IHM.printpos(3,0,"   A   B   C   D    ");
  4360  000C64  EE20  F0E5         	lfsr	2,_IHM+4
  4361  000C68  D802               	call	u5098
  4362  000C6A  EF48  F006         	goto	u5099
  4363  000C6E                     u5098:
  4364  000C6E  0005               	push	
  4365  000C70  6EFA               	movwf	pclath,c
  4366  000C72  50DE               	movf	postinc2,w,c
  4367  000C74  6EFD               	movwf	tosl,c
  4368  000C76  50DE               	movf	postinc2,w,c
  4369  000C78  6EFE               	movwf	tosh,c
  4370  000C7A  50F8               	movf	tblptru,w,c
  4371  000C7C  6EFF               	movwf	tosu,c
  4372  000C7E  50FA               	movf	pclath,w,c
  4373  000C80  0E00               	movlw	0
  4374  000C82  6E38               	movwf	dispLCD@col^0,c
  4375  000C84  0E6B               	movlw	low STR_20
  4376  000C86  6E39               	movwf	dispLCD@str^0,c
  4377  000C88  0E7E               	movlw	high STR_20
  4378  000C8A  6E3A               	movwf	(dispLCD@str+1)^0,c
  4379  000C8C  0E03               	movlw	3
  4380  000C8E  0012               	return		;indir
  4381  000C90                     u5099:
  4382  000C90                     
  4383                           ;main.c: 418:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
  4384  000C90  0E04               	movlw	4
  4385  000C92  6E33               	movwf	dispLCD_lincol@col^0,c
  4386  000C94  0E03               	movlw	3
  4387  000C96  EC5A  F01B         	call	_dispLCD_lincol
  4388  000C9A  0E41               	movlw	65
  4389  000C9C  EC47  F019         	call	_ler_atuador
  4390  000CA0  0900               	iorlw	0
  4391  000CA2  A4D8               	btfss	status,2,c
  4392  000CA4  EF56  F006         	goto	u5101
  4393  000CA8  EF58  F006         	goto	u5100
  4394  000CAC                     u5101:
  4395  000CAC  EF5F  F006         	goto	l6799
  4396  000CB0                     u5100:
  4397  000CB0  0E00               	movlw	0
  4398  000CB2  0100               	movlb	0	; () banked
  4399  000CB4  6F8B               	movwf	(_main$945+1)& (0+255),b
  4400  000CB6  0E2D               	movlw	45
  4401  000CB8  6F8A               	movwf	_main$945& (0+255),b
  4402  000CBA  EF64  F006         	goto	l6801
  4403  000CBE                     l6799:
  4404  000CBE  0E00               	movlw	0
  4405  000CC0  0100               	movlb	0	; () banked
  4406  000CC2  6F8B               	movwf	(_main$945+1)& (0+255),b
  4407  000CC4  0E2B               	movlw	43
  4408  000CC6  6F8A               	movwf	_main$945& (0+255),b
  4409  000CC8                     l6801:
  4410                           
  4411                           ; BSR set to: 0
  4412  000CC8  518A               	movf	_main$945& (0+255),w,b
  4413  000CCA  ECED  F01C         	call	_dispLCD_dataReg
  4414  000CCE                     
  4415                           ;main.c: 419:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
  4416  000CCE  0E08               	movlw	8
  4417  000CD0  6E33               	movwf	dispLCD_lincol@col^0,c
  4418  000CD2  0E03               	movlw	3
  4419  000CD4  EC5A  F01B         	call	_dispLCD_lincol
  4420  000CD8  0E42               	movlw	66
  4421  000CDA  EC47  F019         	call	_ler_atuador
  4422  000CDE  0900               	iorlw	0
  4423  000CE0  A4D8               	btfss	status,2,c
  4424  000CE2  EF75  F006         	goto	u5111
  4425  000CE6  EF77  F006         	goto	u5110
  4426  000CEA                     u5111:
  4427  000CEA  EF7E  F006         	goto	l6809
  4428  000CEE                     u5110:
  4429  000CEE  0E00               	movlw	0
  4430  000CF0  0100               	movlb	0	; () banked
  4431  000CF2  6F8D               	movwf	(_main$946+1)& (0+255),b
  4432  000CF4  0E2D               	movlw	45
  4433  000CF6  6F8C               	movwf	_main$946& (0+255),b
  4434  000CF8  EF83  F006         	goto	l6811
  4435  000CFC                     l6809:
  4436  000CFC  0E00               	movlw	0
  4437  000CFE  0100               	movlb	0	; () banked
  4438  000D00  6F8D               	movwf	(_main$946+1)& (0+255),b
  4439  000D02  0E2B               	movlw	43
  4440  000D04  6F8C               	movwf	_main$946& (0+255),b
  4441  000D06                     l6811:
  4442                           
  4443                           ; BSR set to: 0
  4444  000D06  518C               	movf	_main$946& (0+255),w,b
  4445  000D08  ECED  F01C         	call	_dispLCD_dataReg
  4446  000D0C                     
  4447                           ;main.c: 420:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
  4448  000D0C  0E0C               	movlw	12
  4449  000D0E  6E33               	movwf	dispLCD_lincol@col^0,c
  4450  000D10  0E03               	movlw	3
  4451  000D12  EC5A  F01B         	call	_dispLCD_lincol
  4452  000D16  0E43               	movlw	67
  4453  000D18  EC47  F019         	call	_ler_atuador
  4454  000D1C  0900               	iorlw	0
  4455  000D1E  A4D8               	btfss	status,2,c
  4456  000D20  EF94  F006         	goto	u5121
  4457  000D24  EF96  F006         	goto	u5120
  4458  000D28                     u5121:
  4459  000D28  EF9D  F006         	goto	l6819
  4460  000D2C                     u5120:
  4461  000D2C  0E00               	movlw	0
  4462  000D2E  0100               	movlb	0	; () banked
  4463  000D30  6F8F               	movwf	(_main$947+1)& (0+255),b
  4464  000D32  0E2D               	movlw	45
  4465  000D34  6F8E               	movwf	_main$947& (0+255),b
  4466  000D36  EFA2  F006         	goto	l6821
  4467  000D3A                     l6819:
  4468  000D3A  0E00               	movlw	0
  4469  000D3C  0100               	movlb	0	; () banked
  4470  000D3E  6F8F               	movwf	(_main$947+1)& (0+255),b
  4471  000D40  0E2B               	movlw	43
  4472  000D42  6F8E               	movwf	_main$947& (0+255),b
  4473  000D44                     l6821:
  4474                           
  4475                           ; BSR set to: 0
  4476  000D44  518E               	movf	_main$947& (0+255),w,b
  4477  000D46  ECED  F01C         	call	_dispLCD_dataReg
  4478  000D4A                     
  4479                           ;main.c: 421:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
  4480  000D4A  0E10               	movlw	16
  4481  000D4C  6E33               	movwf	dispLCD_lincol@col^0,c
  4482  000D4E  0E03               	movlw	3
  4483  000D50  EC5A  F01B         	call	_dispLCD_lincol
  4484  000D54  0E44               	movlw	68
  4485  000D56  EC47  F019         	call	_ler_atuador
  4486  000D5A  0900               	iorlw	0
  4487  000D5C  A4D8               	btfss	status,2,c
  4488  000D5E  EFB3  F006         	goto	u5131
  4489  000D62  EFB5  F006         	goto	u5130
  4490  000D66                     u5131:
  4491  000D66  EFBC  F006         	goto	l6829
  4492  000D6A                     u5130:
  4493  000D6A  0E00               	movlw	0
  4494  000D6C  0100               	movlb	0	; () banked
  4495  000D6E  6F91               	movwf	(_main$948+1)& (0+255),b
  4496  000D70  0E2D               	movlw	45
  4497  000D72  6F90               	movwf	_main$948& (0+255),b
  4498  000D74  EFC1  F006         	goto	l6831
  4499  000D78                     l6829:
  4500  000D78  0E00               	movlw	0
  4501  000D7A  0100               	movlb	0	; () banked
  4502  000D7C  6F91               	movwf	(_main$948+1)& (0+255),b
  4503  000D7E  0E2B               	movlw	43
  4504  000D80  6F90               	movwf	_main$948& (0+255),b
  4505  000D82                     l6831:
  4506                           
  4507                           ; BSR set to: 0
  4508  000D82  5190               	movf	_main$948& (0+255),w,b
  4509  000D84  ECED  F01C         	call	_dispLCD_dataReg
  4510  000D88                     
  4511                           ;main.c: 422:                             estado = 7;
  4512  000D88  0E07               	movlw	7
  4513  000D8A  0100               	movlb	0	; () banked
  4514  000D8C  6FBA               	movwf	main@estado& (0+255),b
  4515                           
  4516                           ;main.c: 423:                             break;
  4517  000D8E  EFED  F00D         	goto	l7191
  4518  000D92                     l6835:
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;main.c: 426:                             tecla = teclado_borda();
  4522  000D92  EC79  F01E         	call	_teclado_borda	;wreg free
  4523  000D96  0100               	movlb	0	; () banked
  4524  000D98  6FBC               	movwf	main@tecla& (0+255),b
  4525                           
  4526                           ;main.c: 427:                             switch(tecla)
  4527  000D9A  EF63  F007         	goto	l6875
  4528  000D9E                     l6837:
  4529                           
  4530                           ; BSR set to: 0
  4531  000D9E  51BC               	movf	main@tecla& (0+255),w,b
  4532  000DA0  EC97  F019         	call	_alt_atuador
  4533  000DA4  0E04               	movlw	4
  4534  000DA6  6E33               	movwf	dispLCD_lincol@col^0,c
  4535  000DA8  0E03               	movlw	3
  4536  000DAA  EC5A  F01B         	call	_dispLCD_lincol
  4537  000DAE  0E41               	movlw	65
  4538  000DB0  EC47  F019         	call	_ler_atuador
  4539  000DB4  0900               	iorlw	0
  4540  000DB6  A4D8               	btfss	status,2,c
  4541  000DB8  EFE0  F006         	goto	u5141
  4542  000DBC  EFE2  F006         	goto	u5140
  4543  000DC0                     u5141:
  4544  000DC0  EFE9  F006         	goto	l6841
  4545  000DC4                     u5140:
  4546  000DC4  0E00               	movlw	0
  4547  000DC6  0100               	movlb	0	; () banked
  4548  000DC8  6F93               	movwf	(_main$949+1)& (0+255),b
  4549  000DCA  0E2D               	movlw	45
  4550  000DCC  6F92               	movwf	_main$949& (0+255),b
  4551  000DCE  EFEE  F006         	goto	l6843
  4552  000DD2                     l6841:
  4553  000DD2  0E00               	movlw	0
  4554  000DD4  0100               	movlb	0	; () banked
  4555  000DD6  6F93               	movwf	(_main$949+1)& (0+255),b
  4556  000DD8  0E2B               	movlw	43
  4557  000DDA  6F92               	movwf	_main$949& (0+255),b
  4558  000DDC                     l6843:
  4559                           
  4560                           ; BSR set to: 0
  4561  000DDC  5192               	movf	_main$949& (0+255),w,b
  4562  000DDE  ECED  F01C         	call	_dispLCD_dataReg
  4563  000DE2  EFED  F00D         	goto	l7191
  4564  000DE6                     l6845:
  4565                           
  4566                           ; BSR set to: 0
  4567  000DE6  51BC               	movf	main@tecla& (0+255),w,b
  4568  000DE8  EC97  F019         	call	_alt_atuador
  4569  000DEC  0E08               	movlw	8
  4570  000DEE  6E33               	movwf	dispLCD_lincol@col^0,c
  4571  000DF0  0E03               	movlw	3
  4572  000DF2  EC5A  F01B         	call	_dispLCD_lincol
  4573  000DF6  0E42               	movlw	66
  4574  000DF8  EC47  F019         	call	_ler_atuador
  4575  000DFC  0900               	iorlw	0
  4576  000DFE  A4D8               	btfss	status,2,c
  4577  000E00  EF04  F007         	goto	u5151
  4578  000E04  EF06  F007         	goto	u5150
  4579  000E08                     u5151:
  4580  000E08  EF0D  F007         	goto	l6849
  4581  000E0C                     u5150:
  4582  000E0C  0E00               	movlw	0
  4583  000E0E  0100               	movlb	0	; () banked
  4584  000E10  6F95               	movwf	(_main$950+1)& (0+255),b
  4585  000E12  0E2D               	movlw	45
  4586  000E14  6F94               	movwf	_main$950& (0+255),b
  4587  000E16  EF12  F007         	goto	l6851
  4588  000E1A                     l6849:
  4589  000E1A  0E00               	movlw	0
  4590  000E1C  0100               	movlb	0	; () banked
  4591  000E1E  6F95               	movwf	(_main$950+1)& (0+255),b
  4592  000E20  0E2B               	movlw	43
  4593  000E22  6F94               	movwf	_main$950& (0+255),b
  4594  000E24                     l6851:
  4595                           
  4596                           ; BSR set to: 0
  4597  000E24  5194               	movf	_main$950& (0+255),w,b
  4598  000E26  ECED  F01C         	call	_dispLCD_dataReg
  4599  000E2A  EFED  F00D         	goto	l7191
  4600  000E2E                     l6853:
  4601                           
  4602                           ; BSR set to: 0
  4603  000E2E  51BC               	movf	main@tecla& (0+255),w,b
  4604  000E30  EC97  F019         	call	_alt_atuador
  4605  000E34  0E0C               	movlw	12
  4606  000E36  6E33               	movwf	dispLCD_lincol@col^0,c
  4607  000E38  0E03               	movlw	3
  4608  000E3A  EC5A  F01B         	call	_dispLCD_lincol
  4609  000E3E  0E43               	movlw	67
  4610  000E40  EC47  F019         	call	_ler_atuador
  4611  000E44  0900               	iorlw	0
  4612  000E46  A4D8               	btfss	status,2,c
  4613  000E48  EF28  F007         	goto	u5161
  4614  000E4C  EF2A  F007         	goto	u5160
  4615  000E50                     u5161:
  4616  000E50  EF31  F007         	goto	l6857
  4617  000E54                     u5160:
  4618  000E54  0E00               	movlw	0
  4619  000E56  0100               	movlb	0	; () banked
  4620  000E58  6F97               	movwf	(_main$951+1)& (0+255),b
  4621  000E5A  0E2D               	movlw	45
  4622  000E5C  6F96               	movwf	_main$951& (0+255),b
  4623  000E5E  EF36  F007         	goto	l6859
  4624  000E62                     l6857:
  4625  000E62  0E00               	movlw	0
  4626  000E64  0100               	movlb	0	; () banked
  4627  000E66  6F97               	movwf	(_main$951+1)& (0+255),b
  4628  000E68  0E2B               	movlw	43
  4629  000E6A  6F96               	movwf	_main$951& (0+255),b
  4630  000E6C                     l6859:
  4631                           
  4632                           ; BSR set to: 0
  4633  000E6C  5196               	movf	_main$951& (0+255),w,b
  4634  000E6E  ECED  F01C         	call	_dispLCD_dataReg
  4635  000E72  EFED  F00D         	goto	l7191
  4636  000E76                     l6861:
  4637                           
  4638                           ; BSR set to: 0
  4639  000E76  51BC               	movf	main@tecla& (0+255),w,b
  4640  000E78  EC97  F019         	call	_alt_atuador
  4641  000E7C  0E10               	movlw	16
  4642  000E7E  6E33               	movwf	dispLCD_lincol@col^0,c
  4643  000E80  0E03               	movlw	3
  4644  000E82  EC5A  F01B         	call	_dispLCD_lincol
  4645  000E86  0E44               	movlw	68
  4646  000E88  EC47  F019         	call	_ler_atuador
  4647  000E8C  0900               	iorlw	0
  4648  000E8E  A4D8               	btfss	status,2,c
  4649  000E90  EF4C  F007         	goto	u5171
  4650  000E94  EF4E  F007         	goto	u5170
  4651  000E98                     u5171:
  4652  000E98  EF55  F007         	goto	l6865
  4653  000E9C                     u5170:
  4654  000E9C  0E00               	movlw	0
  4655  000E9E  0100               	movlb	0	; () banked
  4656  000EA0  6F99               	movwf	(_main$952+1)& (0+255),b
  4657  000EA2  0E2D               	movlw	45
  4658  000EA4  6F98               	movwf	_main$952& (0+255),b
  4659  000EA6  EF5A  F007         	goto	l6867
  4660  000EAA                     l6865:
  4661  000EAA  0E00               	movlw	0
  4662  000EAC  0100               	movlb	0	; () banked
  4663  000EAE  6F99               	movwf	(_main$952+1)& (0+255),b
  4664  000EB0  0E2B               	movlw	43
  4665  000EB2  6F98               	movwf	_main$952& (0+255),b
  4666  000EB4                     l6867:
  4667                           
  4668                           ; BSR set to: 0
  4669  000EB4  5198               	movf	_main$952& (0+255),w,b
  4670  000EB6  ECED  F01C         	call	_dispLCD_dataReg
  4671  000EBA  EFED  F00D         	goto	l7191
  4672  000EBE                     l6869:
  4673                           
  4674                           ; BSR set to: 0
  4675  000EBE  0E0A               	movlw	10
  4676  000EC0  6FBA               	movwf	main@estado& (0+255),b
  4677  000EC2  EFED  F00D         	goto	l7191
  4678  000EC6                     l6875:
  4679                           
  4680                           ; BSR set to: 0
  4681  000EC6  51BC               	movf	main@tecla& (0+255),w,b
  4682  000EC8  6E59               	movwf	??_main^0,c
  4683  000ECA  6A5A               	clrf	(??_main+1)^0,c
  4684                           
  4685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4686                           ; Switch size 1, requested type "simple"
  4687                           ; Number of cases is 1, Range of values is 0 to 0
  4688                           ; switch strategies available:
  4689                           ; Name         Instructions Cycles
  4690                           ; simple_byte            4     3 (average)
  4691                           ;	Chosen strategy is simple_byte
  4692  000ECC  505A               	movf	(??_main+1)^0,w,c
  4693  000ECE  0A00               	xorlw	0	; case 0
  4694  000ED0  B4D8               	btfsc	status,2,c
  4695  000ED2  EF6D  F007         	goto	l8003
  4696  000ED6  EFED  F00D         	goto	l7191
  4697  000EDA                     l8003:
  4698                           
  4699                           ; BSR set to: 0
  4700                           ; Switch size 1, requested type "simple"
  4701                           ; Number of cases is 6, Range of values is 35 to 68
  4702                           ; switch strategies available:
  4703                           ; Name         Instructions Cycles
  4704                           ; simple_byte           19    10 (average)
  4705                           ;	Chosen strategy is simple_byte
  4706  000EDA  5059               	movf	??_main^0,w,c
  4707  000EDC  0A23               	xorlw	35	; case 35
  4708  000EDE  B4D8               	btfsc	status,2,c
  4709  000EE0  EF5F  F007         	goto	l6869
  4710  000EE4  0A09               	xorlw	9	; case 42
  4711  000EE6  B4D8               	btfsc	status,2,c
  4712  000EE8  EF74  F001         	goto	l6531
  4713  000EEC  0A6B               	xorlw	107	; case 65
  4714  000EEE  B4D8               	btfsc	status,2,c
  4715  000EF0  EFCF  F006         	goto	l6837
  4716  000EF4  0A03               	xorlw	3	; case 66
  4717  000EF6  B4D8               	btfsc	status,2,c
  4718  000EF8  EFF3  F006         	goto	l6845
  4719  000EFC  0A01               	xorlw	1	; case 67
  4720  000EFE  B4D8               	btfsc	status,2,c
  4721  000F00  EF17  F007         	goto	l6853
  4722  000F04  0A07               	xorlw	7	; case 68
  4723  000F06  B4D8               	btfsc	status,2,c
  4724  000F08  EF3B  F007         	goto	l6861
  4725  000F0C  EFED  F00D         	goto	l7191
  4726  000F10                     l6877:
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;main.c: 441:                             init_cond = salva_atuadores_init();
  4730  000F10  EC75  F01A         	call	_salva_atuadores_init	;wreg free
  4731  000F14  0100               	movlb	0	; () banked
  4732  000F16  6FB2               	movwf	main@init_cond& (0+255),b
  4733  000F18                     
  4734                           ; BSR set to: 0
  4735                           ;main.c: 442:                             IHM.clr();
  4736  000F18  EE20  F0E9         	lfsr	2,_IHM+8
  4737  000F1C  D802               	call	u5188
  4738  000F1E  EF9B  F007         	goto	u5189
  4739  000F22                     u5188:
  4740  000F22  0005               	push	
  4741  000F24  6EFA               	movwf	pclath,c
  4742  000F26  50DE               	movf	postinc2,w,c
  4743  000F28  6EFD               	movwf	tosl,c
  4744  000F2A  50DE               	movf	postinc2,w,c
  4745  000F2C  6EFE               	movwf	tosh,c
  4746  000F2E  50F8               	movf	tblptru,w,c
  4747  000F30  6EFF               	movwf	tosu,c
  4748  000F32  50FA               	movf	pclath,w,c
  4749  000F34  0012               	return		;indir
  4750  000F36                     u5189:
  4751  000F36                     
  4752                           ;main.c: 443:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
  4753  000F36  EE20  F0E5         	lfsr	2,_IHM+4
  4754  000F3A  D802               	call	u5198
  4755  000F3C  EFB1  F007         	goto	u5199
  4756  000F40                     u5198:
  4757  000F40  0005               	push	
  4758  000F42  6EFA               	movwf	pclath,c
  4759  000F44  50DE               	movf	postinc2,w,c
  4760  000F46  6EFD               	movwf	tosl,c
  4761  000F48  50DE               	movf	postinc2,w,c
  4762  000F4A  6EFE               	movwf	tosh,c
  4763  000F4C  50F8               	movf	tblptru,w,c
  4764  000F4E  6EFF               	movwf	tosu,c
  4765  000F50  50FA               	movf	pclath,w,c
  4766  000F52  0E00               	movlw	0
  4767  000F54  6E38               	movwf	dispLCD@col^0,c
  4768  000F56  0EBF               	movlw	low STR_21
  4769  000F58  6E39               	movwf	dispLCD@str^0,c
  4770  000F5A  0E7E               	movlw	high STR_21
  4771  000F5C  6E3A               	movwf	(dispLCD@str+1)^0,c
  4772  000F5E  0E00               	movlw	0
  4773  000F60  0012               	return		;indir
  4774  000F62                     u5199:
  4775  000F62                     l6883:
  4776                           
  4777                           ;main.c: 444:                             estado = 14;
  4778  000F62  0E0E               	movlw	14
  4779  000F64  0100               	movlb	0	; () banked
  4780  000F66  6FBA               	movwf	main@estado& (0+255),b
  4781                           
  4782                           ;main.c: 445:                             break;
  4783  000F68  EFED  F00D         	goto	l7191
  4784  000F6C                     l6885:
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;main.c: 448:                             tecla = teclado_borda();
  4788  000F6C  EC79  F01E         	call	_teclado_borda
  4789  000F70  0100               	movlb	0	; () banked
  4790  000F72  6FBC               	movwf	main@tecla& (0+255),b
  4791                           
  4792                           ;main.c: 449:                             switch( tecla )
  4793  000F74  EF0F  F008         	goto	l6921
  4794  000F78                     l787:
  4795  000F78                     l6887:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;main.c: 455:                                             if( fifo_disponivel() )
  4799  000F78  ECD3  F01F         	call	_fifo_disponivel	;wreg free
  4800  000F7C  0900               	iorlw	0
  4801  000F7E  B4D8               	btfsc	status,2,c
  4802  000F80  EFC4  F007         	goto	u5201
  4803  000F84  EFC6  F007         	goto	u5200
  4804  000F88                     u5201:
  4805  000F88  EFED  F00D         	goto	l7191
  4806  000F8C                     u5200:
  4807  000F8C                     
  4808                           ;main.c: 456:                                             {;main.c: 457:                
      +                                                           alt_atuador(tecla);
  4809  000F8C  0100               	movlb	0	; () banked
  4810  000F8E  51BC               	movf	main@tecla& (0+255),w,b
  4811  000F90  EC97  F019         	call	_alt_atuador
  4812                           
  4813                           ;main.c: 458:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
  4814  000F94  0100               	movlb	0	; () banked
  4815  000F96  51BC               	movf	main@tecla& (0+255),w,b
  4816  000F98  EC47  F019         	call	_ler_atuador
  4817  000F9C  0900               	iorlw	0
  4818  000F9E  A4D8               	btfss	status,2,c
  4819  000FA0  EFD4  F007         	goto	u5211
  4820  000FA4  EFD6  F007         	goto	u5210
  4821  000FA8                     u5211:
  4822  000FA8  EFE1  F007         	goto	l791
  4823  000FAC                     u5210:
  4824  000FAC  0E20               	movlw	32
  4825  000FAE  C0BC  F059         	movff	main@tecla,??_main
  4826  000FB2  6A5A               	clrf	(??_main+1)^0,c
  4827  000FB4  1059               	iorwf	??_main^0,w,c
  4828  000FB6  0100               	movlb	0	; () banked
  4829  000FB8  6F9A               	movwf	_main$956& (0+255),b
  4830  000FBA  505A               	movf	(??_main+1)^0,w,c
  4831  000FBC  6F9B               	movwf	(_main$956+1)& (0+255),b
  4832  000FBE  EFE5  F007         	goto	l6893
  4833  000FC2                     l791:
  4834  000FC2  C0BC  F09A         	movff	main@tecla,_main$956
  4835  000FC6  0100               	movlb	0	; () banked
  4836  000FC8  6B9B               	clrf	(_main$956+1)& (0+255),b
  4837  000FCA                     l6893:
  4838                           
  4839                           ; BSR set to: 0
  4840  000FCA  519A               	movf	_main$956& (0+255),w,b
  4841  000FCC  EC6E  F01C         	call	_fifo_add
  4842  000FD0  EF0D  F003         	goto	l6611
  4843  000FD4                     l6897:
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;main.c: 463:                                             fifo_indicePrint_inc();
  4847  000FD4  EC8B  F01B         	call	_fifo_indicePrint_inc	;wreg free
  4848  000FD8  EF0D  F003         	goto	l6611
  4849  000FDC                     l6901:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;main.c: 467:                                             fifo_indicePrint_dec();
  4853  000FDC  ECFE  F01F         	call	_fifo_indicePrint_dec	;wreg free
  4854  000FE0  EF0D  F003         	goto	l6611
  4855  000FE4                     l6905:
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;main.c: 472:                                             if(fifo_indice() == 2 )
  4859  000FE4  EC83  F020         	call	_fifo_indice	;wreg free
  4860  000FE8  0A02               	xorlw	2
  4861  000FEA  A4D8               	btfss	status,2,c
  4862  000FEC  EFFA  F007         	goto	u5221
  4863  000FF0  EFFC  F007         	goto	u5220
  4864  000FF4                     u5221:
  4865  000FF4  EFFE  F007         	goto	l6909
  4866  000FF8                     u5220:
  4867  000FF8  EFB5  F001         	goto	l6547
  4868  000FFC                     l6909:
  4869                           
  4870                           ;main.c: 475:                                             {;main.c: 476:                
      +                                                           fifo_delete();
  4871  000FFC  ECE4  F019         	call	_fifo_delete	;wreg free
  4872  001000  EF0D  F003         	goto	l6611
  4873  001004                     l6913:
  4874  001004  0E4A               	movlw	74
  4875  001006  0100               	movlb	0	; () banked
  4876  001008  6FBA               	movwf	main@estado& (0+255),b
  4877  00100A  EFED  F00D         	goto	l7191
  4878  00100E                     l6915:
  4879                           
  4880                           ; BSR set to: 0
  4881  00100E  0E29               	movlw	41
  4882  001010  6FBA               	movwf	main@estado& (0+255),b
  4883  001012  EFED  F00D         	goto	l7191
  4884  001016                     l6917:
  4885                           
  4886                           ; BSR set to: 0
  4887  001016  0E5A               	movlw	90
  4888  001018  6FBA               	movwf	main@estado& (0+255),b
  4889  00101A  EFED  F00D         	goto	l7191
  4890  00101E                     l6921:
  4891                           
  4892                           ; BSR set to: 0
  4893  00101E  51BC               	movf	main@tecla& (0+255),w,b
  4894  001020  6E59               	movwf	??_main^0,c
  4895  001022  6A5A               	clrf	(??_main+1)^0,c
  4896                           
  4897                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4898                           ; Switch size 1, requested type "simple"
  4899                           ; Number of cases is 1, Range of values is 0 to 0
  4900                           ; switch strategies available:
  4901                           ; Name         Instructions Cycles
  4902                           ; simple_byte            4     3 (average)
  4903                           ;	Chosen strategy is simple_byte
  4904  001024  505A               	movf	(??_main+1)^0,w,c
  4905  001026  0A00               	xorlw	0	; case 0
  4906  001028  B4D8               	btfsc	status,2,c
  4907  00102A  EF19  F008         	goto	l8005
  4908  00102E  EFED  F00D         	goto	l7191
  4909  001032                     l8005:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ; Switch size 1, requested type "simple"
  4913                           ; Number of cases is 10, Range of values is 35 to 68
  4914                           ; switch strategies available:
  4915                           ; Name         Instructions Cycles
  4916                           ; simple_byte           31    16 (average)
  4917                           ;	Chosen strategy is simple_byte
  4918  001032  5059               	movf	??_main^0,w,c
  4919  001034  0A23               	xorlw	35	; case 35
  4920  001036  B4D8               	btfsc	status,2,c
  4921  001038  EF02  F008         	goto	l6913
  4922  00103C  0A09               	xorlw	9	; case 42
  4923  00103E  B4D8               	btfsc	status,2,c
  4924  001040  EFF2  F007         	goto	l6905
  4925  001044  0A1A               	xorlw	26	; case 48
  4926  001046  B4D8               	btfsc	status,2,c
  4927  001048  EF07  F008         	goto	l6915
  4928  00104C  0A04               	xorlw	4	; case 52
  4929  00104E  B4D8               	btfsc	status,2,c
  4930  001050  EFEE  F007         	goto	l6901
  4931  001054  0A02               	xorlw	2	; case 54
  4932  001056  B4D8               	btfsc	status,2,c
  4933  001058  EFEA  F007         	goto	l6897
  4934  00105C  0A0F               	xorlw	15	; case 57
  4935  00105E  B4D8               	btfsc	status,2,c
  4936  001060  EF0B  F008         	goto	l6917
  4937  001064  0A78               	xorlw	120	; case 65
  4938  001066  B4D8               	btfsc	status,2,c
  4939  001068  EFBC  F007         	goto	l787
  4940  00106C  0A03               	xorlw	3	; case 66
  4941  00106E  B4D8               	btfsc	status,2,c
  4942  001070  EFBC  F007         	goto	l6887
  4943  001074  0A01               	xorlw	1	; case 67
  4944  001076  B4D8               	btfsc	status,2,c
  4945  001078  EFBC  F007         	goto	l6887
  4946  00107C  0A07               	xorlw	7	; case 68
  4947  00107E  B4D8               	btfsc	status,2,c
  4948  001080  EFBC  F007         	goto	l6887
  4949  001084  EFED  F00D         	goto	l7191
  4950  001088                     l6923:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;main.c: 490:                             fifo_print();
  4954  001088  EC64  F00F         	call	_fifo_print	;wreg free
  4955  00108C  EFB1  F007         	goto	l6883
  4956  001090                     l6927:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;main.c: 495:                             IHM.printpos(3,0,"<  /  >");
  4960  001090  EE20  F0E5         	lfsr	2,_IHM+4
  4961  001094  D802               	call	u5238
  4962  001096  EF5E  F008         	goto	u5239
  4963  00109A                     u5238:
  4964  00109A  0005               	push	
  4965  00109C  6EFA               	movwf	pclath,c
  4966  00109E  50DE               	movf	postinc2,w,c
  4967  0010A0  6EFD               	movwf	tosl,c
  4968  0010A2  50DE               	movf	postinc2,w,c
  4969  0010A4  6EFE               	movwf	tosh,c
  4970  0010A6  50F8               	movf	tblptru,w,c
  4971  0010A8  6EFF               	movwf	tosu,c
  4972  0010AA  50FA               	movf	pclath,w,c
  4973  0010AC  0E00               	movlw	0
  4974  0010AE  6E38               	movwf	dispLCD@col^0,c
  4975  0010B0  0EF1               	movlw	low STR_22
  4976  0010B2  6E39               	movwf	dispLCD@str^0,c
  4977  0010B4  0E7F               	movlw	high STR_22
  4978  0010B6  6E3A               	movwf	(dispLCD@str+1)^0,c
  4979  0010B8  0E03               	movlw	3
  4980  0010BA  0012               	return		;indir
  4981  0010BC                     u5239:
  4982  0010BC                     
  4983                           ;main.c: 496:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
  4984  0010BC  EE20  F0E7         	lfsr	2,_IHM+6
  4985  0010C0  D802               	call	u5248
  4986  0010C2  EF7B  F008         	goto	u5249
  4987  0010C6                     u5248:
  4988  0010C6  0005               	push	
  4989  0010C8  6EFA               	movwf	pclath,c
  4990  0010CA  50DE               	movf	postinc2,w,c
  4991  0010CC  6EFD               	movwf	tosl,c
  4992  0010CE  50DE               	movf	postinc2,w,c
  4993  0010D0  6EFE               	movwf	tosh,c
  4994  0010D2  50F8               	movf	tblptru,w,c
  4995  0010D4  6EFF               	movwf	tosu,c
  4996  0010D6  50FA               	movf	pclath,w,c
  4997  0010D8  0E01               	movlw	1
  4998  0010DA  6E3C               	movwf	dispLCD_num@col^0,c
  4999  0010DC  EC83  F020         	call	_fifo_indice
  5000  0010E0  6E59               	movwf	??_main^0,c
  5001  0010E2  0EFE               	movlw	254
  5002  0010E4  2459               	addwf	??_main^0,w,c
  5003  0010E6  6E3D               	movwf	dispLCD_num@num^0,c
  5004  0010E8  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5005  0010EA  0EFF               	movlw	255
  5006  0010EC  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5007  0010EE  0E02               	movlw	2
  5008  0010F0  6E3F               	movwf	dispLCD_num@tam^0,c
  5009  0010F2  0E03               	movlw	3
  5010  0010F4  0012               	return		;indir
  5011  0010F6                     u5249:
  5012  0010F6                     
  5013                           ;main.c: 497:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
  5014  0010F6  EE20  F0E7         	lfsr	2,_IHM+6
  5015  0010FA  D802               	call	u5258
  5016  0010FC  EF98  F008         	goto	u5259
  5017  001100                     u5258:
  5018  001100  0005               	push	
  5019  001102  6EFA               	movwf	pclath,c
  5020  001104  50DE               	movf	postinc2,w,c
  5021  001106  6EFD               	movwf	tosl,c
  5022  001108  50DE               	movf	postinc2,w,c
  5023  00110A  6EFE               	movwf	tosh,c
  5024  00110C  50F8               	movf	tblptru,w,c
  5025  00110E  6EFF               	movwf	tosu,c
  5026  001110  50FA               	movf	pclath,w,c
  5027  001112  0E04               	movlw	4
  5028  001114  6E3C               	movwf	dispLCD_num@col^0,c
  5029  001116  EC81  F020         	call	_fifo_tam
  5030  00111A  6E59               	movwf	??_main^0,c
  5031  00111C  0EFE               	movlw	254
  5032  00111E  2459               	addwf	??_main^0,w,c
  5033  001120  6E3D               	movwf	dispLCD_num@num^0,c
  5034  001122  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5035  001124  0EFF               	movlw	255
  5036  001126  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5037  001128  0E02               	movlw	2
  5038  00112A  6E3F               	movwf	dispLCD_num@tam^0,c
  5039  00112C  0E03               	movlw	3
  5040  00112E  0012               	return		;indir
  5041  001130                     u5259:
  5042  001130                     
  5043                           ;main.c: 498:                             estado = 11;
  5044  001130  0E0B               	movlw	11
  5045  001132  0100               	movlb	0	; () banked
  5046  001134  6FBA               	movwf	main@estado& (0+255),b
  5047                           
  5048                           ;main.c: 499:                             break;
  5049  001136  EFED  F00D         	goto	l7191
  5050  00113A                     l6935:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;main.c: 503:                             estado = 70;
  5054  00113A  0E46               	movlw	70
  5055  00113C  6FBA               	movwf	main@estado& (0+255),b
  5056                           
  5057                           ;main.c: 504:                             meAtuadores = 1;
  5058  00113E  0E01               	movlw	1
  5059  001140  6FAF               	movwf	main@meAtuadores& (0+255),b
  5060                           
  5061                           ;main.c: 505:                             break;
  5062  001142  EFED  F00D         	goto	l7191
  5063  001146                     l6937:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;main.c: 508:                             if( meAtuadores == 3 && botao != 2 )
  5067  001146  0E03               	movlw	3
  5068  001148  19AF               	xorwf	main@meAtuadores& (0+255),w,b
  5069  00114A  A4D8               	btfss	status,2,c
  5070  00114C  EFAA  F008         	goto	u5261
  5071  001150  EFAC  F008         	goto	u5260
  5072  001154                     u5261:
  5073  001154  EF46  F009         	goto	l6957
  5074  001158                     u5260:
  5075  001158                     
  5076                           ; BSR set to: 0
  5077  001158  0E02               	movlw	2
  5078  00115A  19B3               	xorwf	main@botao& (0+255),w,b
  5079  00115C  B4D8               	btfsc	status,2,c
  5080  00115E  EFB3  F008         	goto	u5271
  5081  001162  EFB5  F008         	goto	u5270
  5082  001166                     u5271:
  5083  001166  EF46  F009         	goto	l6957
  5084  00116A                     u5270:
  5085  00116A                     
  5086                           ; BSR set to: 0
  5087                           ;main.c: 509:                             {;main.c: 510:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
  5088  00116A  EE20  F0E5         	lfsr	2,_IHM+4
  5089  00116E  D802               	call	u5288
  5090  001170  EFCB  F008         	goto	u5289
  5091  001174                     u5288:
  5092  001174  0005               	push	
  5093  001176  6EFA               	movwf	pclath,c
  5094  001178  50DE               	movf	postinc2,w,c
  5095  00117A  6EFD               	movwf	tosl,c
  5096  00117C  50DE               	movf	postinc2,w,c
  5097  00117E  6EFE               	movwf	tosh,c
  5098  001180  50F8               	movf	tblptru,w,c
  5099  001182  6EFF               	movwf	tosu,c
  5100  001184  50FA               	movf	pclath,w,c
  5101  001186  0E00               	movlw	0
  5102  001188  6E38               	movwf	dispLCD@col^0,c
  5103  00118A  0EED               	movlw	low STR_23
  5104  00118C  6E39               	movwf	dispLCD@str^0,c
  5105  00118E  0E7D               	movlw	high STR_23
  5106  001190  6E3A               	movwf	(dispLCD@str+1)^0,c
  5107  001192  0E00               	movlw	0
  5108  001194  0012               	return		;indir
  5109  001196                     u5289:
  5110  001196                     
  5111                           ;main.c: 511:                                 printExec(1, -1);
  5112  001196  0EFF               	movlw	255
  5113  001198  6E4A               	movwf	printExec@ind^0,c
  5114  00119A  0E01               	movlw	1
  5115  00119C  ECD6  F010         	call	_printExec
  5116  0011A0                     
  5117                           ;main.c: 512:                                 printExec(9, 0);
  5118  0011A0  0E00               	movlw	0
  5119  0011A2  6E4A               	movwf	printExec@ind^0,c
  5120  0011A4  0E09               	movlw	9
  5121  0011A6  ECD6  F010         	call	_printExec
  5122  0011AA                     
  5123                           ;main.c: 513:                                 printExec(14, 1);
  5124  0011AA  0E01               	movlw	1
  5125  0011AC  6E4A               	movwf	printExec@ind^0,c
  5126  0011AE  0E0E               	movlw	14
  5127  0011B0  ECD6  F010         	call	_printExec
  5128  0011B4                     
  5129                           ;main.c: 514:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
  5130  0011B4  EE20  F0E5         	lfsr	2,_IHM+4
  5131  0011B8  D802               	call	u5298
  5132  0011BA  EFF0  F008         	goto	u5299
  5133  0011BE                     u5298:
  5134  0011BE  0005               	push	
  5135  0011C0  6EFA               	movwf	pclath,c
  5136  0011C2  50DE               	movf	postinc2,w,c
  5137  0011C4  6EFD               	movwf	tosl,c
  5138  0011C6  50DE               	movf	postinc2,w,c
  5139  0011C8  6EFE               	movwf	tosh,c
  5140  0011CA  50F8               	movf	tblptru,w,c
  5141  0011CC  6EFF               	movwf	tosu,c
  5142  0011CE  50FA               	movf	pclath,w,c
  5143  0011D0  0E00               	movlw	0
  5144  0011D2  6E38               	movwf	dispLCD@col^0,c
  5145  0011D4  0EAE               	movlw	low STR_24
  5146  0011D6  6E39               	movwf	dispLCD@str^0,c
  5147  0011D8  0E7D               	movlw	high STR_24
  5148  0011DA  6E3A               	movwf	(dispLCD@str+1)^0,c
  5149  0011DC  0E02               	movlw	2
  5150  0011DE  0012               	return		;indir
  5151  0011E0                     u5299:
  5152  0011E0                     
  5153                           ;main.c: 515:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
  5154  0011E0  EE20  F0E7         	lfsr	2,_IHM+6
  5155  0011E4  D802               	call	u5308
  5156  0011E6  EF0D  F009         	goto	u5309
  5157  0011EA                     u5308:
  5158  0011EA  0005               	push	
  5159  0011EC  6EFA               	movwf	pclath,c
  5160  0011EE  50DE               	movf	postinc2,w,c
  5161  0011F0  6EFD               	movwf	tosl,c
  5162  0011F2  50DE               	movf	postinc2,w,c
  5163  0011F4  6EFE               	movwf	tosh,c
  5164  0011F6  50F8               	movf	tblptru,w,c
  5165  0011F8  6EFF               	movwf	tosu,c
  5166  0011FA  50FA               	movf	pclath,w,c
  5167  0011FC  0E04               	movlw	4
  5168  0011FE  6E3C               	movwf	dispLCD_num@col^0,c
  5169  001200  EC83  F020         	call	_fifo_indice
  5170  001204  6E59               	movwf	??_main^0,c
  5171  001206  0EFE               	movlw	254
  5172  001208  2459               	addwf	??_main^0,w,c
  5173  00120A  6E3D               	movwf	dispLCD_num@num^0,c
  5174  00120C  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5175  00120E  0EFF               	movlw	255
  5176  001210  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5177  001212  0E02               	movlw	2
  5178  001214  6E3F               	movwf	dispLCD_num@tam^0,c
  5179  001216  0E02               	movlw	2
  5180  001218  0012               	return		;indir
  5181  00121A                     u5309:
  5182  00121A                     
  5183                           ;main.c: 516:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
  5184  00121A  EE20  F0E7         	lfsr	2,_IHM+6
  5185  00121E  D802               	call	u5318
  5186  001220  EF2A  F009         	goto	u5319
  5187  001224                     u5318:
  5188  001224  0005               	push	
  5189  001226  6EFA               	movwf	pclath,c
  5190  001228  50DE               	movf	postinc2,w,c
  5191  00122A  6EFD               	movwf	tosl,c
  5192  00122C  50DE               	movf	postinc2,w,c
  5193  00122E  6EFE               	movwf	tosh,c
  5194  001230  50F8               	movf	tblptru,w,c
  5195  001232  6EFF               	movwf	tosu,c
  5196  001234  50FA               	movf	pclath,w,c
  5197  001236  0E01               	movlw	1
  5198  001238  6E3C               	movwf	dispLCD_num@col^0,c
  5199  00123A  EC7F  F020         	call	_getIndicePassos
  5200  00123E  6E59               	movwf	??_main^0,c
  5201  001240  0EFF               	movlw	255
  5202  001242  2459               	addwf	??_main^0,w,c
  5203  001244  6E3D               	movwf	dispLCD_num@num^0,c
  5204  001246  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5205  001248  0EFF               	movlw	255
  5206  00124A  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5207  00124C  0E02               	movlw	2
  5208  00124E  6E3F               	movwf	dispLCD_num@tam^0,c
  5209  001250  0E02               	movlw	2
  5210  001252  0012               	return		;indir
  5211  001254                     u5319:
  5212  001254                     
  5213                           ;main.c: 517:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
  5214  001254  EE20  F0E7         	lfsr	2,_IHM+6
  5215  001258  D802               	call	u5328
  5216  00125A  EF46  F009         	goto	u5329
  5217  00125E                     u5328:
  5218  00125E  0005               	push	
  5219  001260  6EFA               	movwf	pclath,c
  5220  001262  50DE               	movf	postinc2,w,c
  5221  001264  6EFD               	movwf	tosl,c
  5222  001266  50DE               	movf	postinc2,w,c
  5223  001268  6EFE               	movwf	tosh,c
  5224  00126A  50F8               	movf	tblptru,w,c
  5225  00126C  6EFF               	movwf	tosu,c
  5226  00126E  50FA               	movf	pclath,w,c
  5227  001270  0E0B               	movlw	11
  5228  001272  6E3C               	movwf	dispLCD_num@col^0,c
  5229  001274  EC5F  F020         	call	_getContCiclos
  5230  001278  0E01               	movlw	1
  5231  00127A  2431               	addwf	?_getContCiclos^0,w,c
  5232  00127C  6E3D               	movwf	dispLCD_num@num^0,c
  5233  00127E  0E00               	movlw	0
  5234  001280  2032               	addwfc	(?_getContCiclos+1)^0,w,c
  5235  001282  6E3E               	movwf	(dispLCD_num@num+1)^0,c
  5236  001284  0E05               	movlw	5
  5237  001286  6E3F               	movwf	dispLCD_num@tam^0,c
  5238  001288  0E02               	movlw	2
  5239  00128A  0012               	return		;indir
  5240  00128C                     u5329:
  5241  00128C                     l6957:
  5242                           
  5243                           ;main.c: 520:                             if(meAtuadores == 0)
  5244  00128C  0100               	movlb	0	; () banked
  5245  00128E  51AF               	movf	main@meAtuadores& (0+255),w,b
  5246  001290  A4D8               	btfss	status,2,c
  5247  001292  EF4D  F009         	goto	u5331
  5248  001296  EF4F  F009         	goto	u5330
  5249  00129A                     u5331:
  5250  00129A  EF60  F009         	goto	l6963
  5251  00129E                     u5330:
  5252  00129E                     
  5253                           ; BSR set to: 0
  5254                           ;main.c: 521:                             {;main.c: 522:                                
      +                           estado = 16;
  5255  00129E  0E10               	movlw	16
  5256  0012A0  6FBA               	movwf	main@estado& (0+255),b
  5257  0012A2                     
  5258                           ; BSR set to: 0
  5259                           ;main.c: 523:                                 IHM.clr();
  5260  0012A2  EE20  F0E9         	lfsr	2,_IHM+8
  5261  0012A6  D802               	call	u5348
  5262  0012A8  EF60  F009         	goto	u5349
  5263  0012AC                     u5348:
  5264  0012AC  0005               	push	
  5265  0012AE  6EFA               	movwf	pclath,c
  5266  0012B0  50DE               	movf	postinc2,w,c
  5267  0012B2  6EFD               	movwf	tosl,c
  5268  0012B4  50DE               	movf	postinc2,w,c
  5269  0012B6  6EFE               	movwf	tosh,c
  5270  0012B8  50F8               	movf	tblptru,w,c
  5271  0012BA  6EFF               	movwf	tosu,c
  5272  0012BC  50FA               	movf	pclath,w,c
  5273  0012BE  0012               	return		;indir
  5274  0012C0                     u5349:
  5275  0012C0                     l6963:
  5276                           
  5277                           ;main.c: 525:                             tecla = teclado_borda();
  5278  0012C0  EC79  F01E         	call	_teclado_borda
  5279  0012C4  0100               	movlb	0	; () banked
  5280  0012C6  6FBC               	movwf	main@tecla& (0+255),b
  5281                           
  5282                           ;main.c: 526:                             switch(tecla)
  5283  0012C8  EF7F  F009         	goto	l6977
  5284  0012CC                     l6965:
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;main.c: 529:                                     botao = 1;
  5288  0012CC  0E01               	movlw	1
  5289  0012CE  6FB3               	movwf	main@botao& (0+255),b
  5290                           
  5291                           ;main.c: 530:                                     break;
  5292  0012D0  EFED  F00D         	goto	l7191
  5293  0012D4                     l6967:
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;main.c: 533:                                     botao = 2;
  5297  0012D4  0E02               	movlw	2
  5298  0012D6  6FB3               	movwf	main@botao& (0+255),b
  5299                           
  5300                           ;main.c: 534:                                     break;
  5301  0012D8  EFED  F00D         	goto	l7191
  5302  0012DC                     l6969:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;main.c: 537:                                     botao = 0;
  5306  0012DC  0E00               	movlw	0
  5307  0012DE  6FB3               	movwf	main@botao& (0+255),b
  5308                           
  5309                           ;main.c: 538:                                     break;
  5310  0012E0  EFED  F00D         	goto	l7191
  5311  0012E4                     l6971:
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;main.c: 541:                                     if(botao == 2)
  5315  0012E4  0E02               	movlw	2
  5316  0012E6  19B3               	xorwf	main@botao& (0+255),w,b
  5317  0012E8  A4D8               	btfss	status,2,c
  5318  0012EA  EF79  F009         	goto	u5351
  5319  0012EE  EF7B  F009         	goto	u5350
  5320  0012F2                     u5351:
  5321  0012F2  EFED  F00D         	goto	l7191
  5322  0012F6                     u5350:
  5323  0012F6                     
  5324                           ; BSR set to: 0
  5325                           ;main.c: 542:                                         botao = 3;
  5326  0012F6  0E03               	movlw	3
  5327  0012F8  6FB3               	movwf	main@botao& (0+255),b
  5328  0012FA  EFED  F00D         	goto	l7191
  5329  0012FE                     l6977:
  5330                           
  5331                           ; BSR set to: 0
  5332  0012FE  51BC               	movf	main@tecla& (0+255),w,b
  5333  001300  6E59               	movwf	??_main^0,c
  5334  001302  6A5A               	clrf	(??_main+1)^0,c
  5335                           
  5336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5337                           ; Switch size 1, requested type "simple"
  5338                           ; Number of cases is 1, Range of values is 0 to 0
  5339                           ; switch strategies available:
  5340                           ; Name         Instructions Cycles
  5341                           ; simple_byte            4     3 (average)
  5342                           ;	Chosen strategy is simple_byte
  5343  001304  505A               	movf	(??_main+1)^0,w,c
  5344  001306  0A00               	xorlw	0	; case 0
  5345  001308  B4D8               	btfsc	status,2,c
  5346  00130A  EF89  F009         	goto	l8007
  5347  00130E  EFED  F00D         	goto	l7191
  5348  001312                     l8007:
  5349                           
  5350                           ; BSR set to: 0
  5351                           ; Switch size 1, requested type "simple"
  5352                           ; Number of cases is 4, Range of values is 35 to 53
  5353                           ; switch strategies available:
  5354                           ; Name         Instructions Cycles
  5355                           ; simple_byte           13     7 (average)
  5356                           ;	Chosen strategy is simple_byte
  5357  001312  5059               	movf	??_main^0,w,c
  5358  001314  0A23               	xorlw	35	; case 35
  5359  001316  B4D8               	btfsc	status,2,c
  5360  001318  EF66  F009         	goto	l6965
  5361  00131C  0A13               	xorlw	19	; case 48
  5362  00131E  B4D8               	btfsc	status,2,c
  5363  001320  EF6E  F009         	goto	l6969
  5364  001324  0A01               	xorlw	1	; case 49
  5365  001326  B4D8               	btfsc	status,2,c
  5366  001328  EF72  F009         	goto	l6971
  5367  00132C  0A04               	xorlw	4	; case 53
  5368  00132E  B4D8               	btfsc	status,2,c
  5369  001330  EF6A  F009         	goto	l6967
  5370  001334  EFED  F00D         	goto	l7191
  5371  001338                     l6979:
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;main.c: 548:                             tecla = teclado_borda();
  5375  001338  EC79  F01E         	call	_teclado_borda	;wreg free
  5376  00133C  0100               	movlb	0	; () banked
  5377  00133E  6FBC               	movwf	main@tecla& (0+255),b
  5378  001340                     
  5379                           ; BSR set to: 0
  5380                           ;main.c: 549:                             if(tecla >= '0' && tecla <= '9')
  5381  001340  0E2F               	movlw	47
  5382  001342  65BC               	cpfsgt	main@tecla& (0+255),b
  5383  001344  EFA6  F009         	goto	u5361
  5384  001348  EFA8  F009         	goto	u5360
  5385  00134C                     u5361:
  5386  00134C  EFC9  F009         	goto	l6991
  5387  001350                     u5360:
  5388  001350                     
  5389                           ; BSR set to: 0
  5390  001350  0E3A               	movlw	58
  5391  001352  61BC               	cpfslt	main@tecla& (0+255),b
  5392  001354  EFAE  F009         	goto	u5371
  5393  001358  EFB0  F009         	goto	u5370
  5394  00135C                     u5371:
  5395  00135C  EFC9  F009         	goto	l6991
  5396  001360                     u5370:
  5397  001360                     
  5398                           ; BSR set to: 0
  5399                           ;main.c: 550:                             {;main.c: 551:                                
      +                           dignum_conc(tecla, &num);
  5400  001360  0EB4               	movlw	low main@num
  5401  001362  6E37               	movwf	dignum_conc@ptrNum^0,c
  5402  001364  0E00               	movlw	high main@num
  5403  001366  6E38               	movwf	(dignum_conc@ptrNum+1)^0,c
  5404  001368  51BC               	movf	main@tecla& (0+255),w,b
  5405  00136A  EC5C  F01D         	call	_dignum_conc
  5406  00136E                     
  5407                           ;main.c: 552:                                 if(num > 120)
  5408  00136E  0100               	movlb	0	; () banked
  5409  001370  51B5               	movf	(main@num+1)& (0+255),w,b
  5410  001372  E109               	bnz	u5380
  5411  001374  0E79               	movlw	121
  5412  001376  5DB4               	subwf	main@num& (0+255),w,b
  5413  001378  A0D8               	btfss	status,0,c
  5414  00137A  EFC1  F009         	goto	u5381
  5415  00137E  EFC3  F009         	goto	u5380
  5416  001382                     u5381:
  5417  001382  EFC7  F009         	goto	l818
  5418  001386                     u5380:
  5419  001386                     
  5420                           ; BSR set to: 0
  5421                           ;main.c: 553:                                     num = 120;
  5422  001386  0E00               	movlw	0
  5423  001388  6FB5               	movwf	(main@num+1)& (0+255),b
  5424  00138A  0E78               	movlw	120
  5425  00138C  6FB4               	movwf	main@num& (0+255),b
  5426  00138E                     l818:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;main.c: 554:                                 estado = 41;
  5430  00138E  0E29               	movlw	41
  5431  001390  6FBA               	movwf	main@estado& (0+255),b
  5432  001392                     l6991:
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;main.c: 556:                             if(tecla == '*')
  5436  001392  0E2A               	movlw	42
  5437  001394  19BC               	xorwf	main@tecla& (0+255),w,b
  5438  001396  A4D8               	btfss	status,2,c
  5439  001398  EFD0  F009         	goto	u5391
  5440  00139C  EFD2  F009         	goto	u5390
  5441  0013A0                     u5391:
  5442  0013A0  EFDB  F009         	goto	l6997
  5443  0013A4                     u5390:
  5444  0013A4                     
  5445                           ; BSR set to: 0
  5446                           ;main.c: 557:                             {;main.c: 558:                                
      +                           dignum_apagar(&num);
  5447  0013A4  0EB4               	movlw	low main@num
  5448  0013A6  6E38               	movwf	dignum_apagar@ptrNum^0,c
  5449  0013A8  0E00               	movlw	high main@num
  5450  0013AA  6E39               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5451  0013AC  ECF6  F01E         	call	_dignum_apagar	;wreg free
  5452  0013B0                     
  5453                           ;main.c: 559:                                 estado = 41;
  5454  0013B0  0E29               	movlw	41
  5455  0013B2  0100               	movlb	0	; () banked
  5456  0013B4  6FBA               	movwf	main@estado& (0+255),b
  5457  0013B6                     l6997:
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;main.c: 561:                             if(tecla == '#')
  5461  0013B6  0E23               	movlw	35
  5462  0013B8  19BC               	xorwf	main@tecla& (0+255),w,b
  5463  0013BA  A4D8               	btfss	status,2,c
  5464  0013BC  EFE2  F009         	goto	u5401
  5465  0013C0  EFE4  F009         	goto	u5400
  5466  0013C4                     u5401:
  5467  0013C4  EFED  F00D         	goto	l7191
  5468  0013C8                     u5400:
  5469  0013C8                     
  5470                           ; BSR set to: 0
  5471                           ;main.c: 562:                                 estado = 42;
  5472  0013C8  0E2A               	movlw	42
  5473  0013CA  6FBA               	movwf	main@estado& (0+255),b
  5474  0013CC  EFED  F00D         	goto	l7191
  5475  0013D0                     l7001:
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;main.c: 567:                             IHM.printpos(2, 0, "config tempo:      s");
  5479  0013D0  EE20  F0E5         	lfsr	2,_IHM+4
  5480  0013D4  D802               	call	u5418
  5481  0013D6  EFFE  F009         	goto	u5419
  5482  0013DA                     u5418:
  5483  0013DA  0005               	push	
  5484  0013DC  6EFA               	movwf	pclath,c
  5485  0013DE  50DE               	movf	postinc2,w,c
  5486  0013E0  6EFD               	movwf	tosl,c
  5487  0013E2  50DE               	movf	postinc2,w,c
  5488  0013E4  6EFE               	movwf	tosh,c
  5489  0013E6  50F8               	movf	tblptru,w,c
  5490  0013E8  6EFF               	movwf	tosu,c
  5491  0013EA  50FA               	movf	pclath,w,c
  5492  0013EC  0E00               	movlw	0
  5493  0013EE  6E38               	movwf	dispLCD@col^0,c
  5494  0013F0  0E28               	movlw	low STR_25
  5495  0013F2  6E39               	movwf	dispLCD@str^0,c
  5496  0013F4  0E7F               	movlw	high STR_25
  5497  0013F6  6E3A               	movwf	(dispLCD@str+1)^0,c
  5498  0013F8  0E02               	movlw	2
  5499  0013FA  0012               	return		;indir
  5500  0013FC                     u5419:
  5501  0013FC                     
  5502                           ;main.c: 568:                             IHM.printv(2, 15, num, 3);
  5503  0013FC  EE20  F0E7         	lfsr	2,_IHM+6
  5504  001400  D802               	call	u5428
  5505  001402  EF16  F00A         	goto	u5429
  5506  001406                     u5428:
  5507  001406  0005               	push	
  5508  001408  6EFA               	movwf	pclath,c
  5509  00140A  50DE               	movf	postinc2,w,c
  5510  00140C  6EFD               	movwf	tosl,c
  5511  00140E  50DE               	movf	postinc2,w,c
  5512  001410  6EFE               	movwf	tosh,c
  5513  001412  50F8               	movf	tblptru,w,c
  5514  001414  6EFF               	movwf	tosu,c
  5515  001416  50FA               	movf	pclath,w,c
  5516  001418  0E0F               	movlw	15
  5517  00141A  6E3C               	movwf	dispLCD_num@col^0,c
  5518  00141C  C0B4  F03D         	movff	main@num,dispLCD_num@num
  5519  001420  C0B5  F03E         	movff	main@num+1,dispLCD_num@num+1
  5520  001424  0E03               	movlw	3
  5521  001426  6E3F               	movwf	dispLCD_num@tam^0,c
  5522  001428  0E02               	movlw	2
  5523  00142A  0012               	return		;indir
  5524  00142C                     u5429:
  5525  00142C                     
  5526                           ;main.c: 569:                             estado = 40;
  5527  00142C  0E28               	movlw	40
  5528  00142E  0100               	movlb	0	; () banked
  5529  001430  6FBA               	movwf	main@estado& (0+255),b
  5530                           
  5531                           ;main.c: 570:                             break;
  5532  001432  EFED  F00D         	goto	l7191
  5533  001436                     l7007:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;main.c: 573:                             fifo_add_tempo(num);
  5537  001436  51B4               	movf	main@num& (0+255),w,b
  5538  001438  EC42  F01C         	call	_fifo_add_tempo
  5539  00143C                     l7009:
  5540                           
  5541                           ;main.c: 574:                             IHM.clr();
  5542  00143C  EE20  F0E9         	lfsr	2,_IHM+8
  5543  001440  D802               	call	u5438
  5544  001442  EF2D  F00A         	goto	u5439
  5545  001446                     u5438:
  5546  001446  0005               	push	
  5547  001448  6EFA               	movwf	pclath,c
  5548  00144A  50DE               	movf	postinc2,w,c
  5549  00144C  6EFD               	movwf	tosl,c
  5550  00144E  50DE               	movf	postinc2,w,c
  5551  001450  6EFE               	movwf	tosh,c
  5552  001452  50F8               	movf	tblptru,w,c
  5553  001454  6EFF               	movwf	tosu,c
  5554  001456  50FA               	movf	pclath,w,c
  5555  001458  0012               	return		;indir
  5556  00145A                     u5439:
  5557  00145A  EF0D  F003         	goto	l6611
  5558  00145E                     l7013:
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;main.c: 607:                             tecla = teclado_borda();
  5562  00145E  EC79  F01E         	call	_teclado_borda	;wreg free
  5563  001462  0100               	movlb	0	; () banked
  5564  001464  6FBC               	movwf	main@tecla& (0+255),b
  5565  001466                     
  5566                           ; BSR set to: 0
  5567                           ;main.c: 608:                             if(tecla >= '0' && tecla <= '9')
  5568  001466  0E2F               	movlw	47
  5569  001468  65BC               	cpfsgt	main@tecla& (0+255),b
  5570  00146A  EF39  F00A         	goto	u5441
  5571  00146E  EF3B  F00A         	goto	u5440
  5572  001472                     u5441:
  5573  001472  EF6D  F00A         	goto	l7037
  5574  001476                     u5440:
  5575  001476                     
  5576                           ; BSR set to: 0
  5577  001476  0E3A               	movlw	58
  5578  001478  61BC               	cpfslt	main@tecla& (0+255),b
  5579  00147A  EF41  F00A         	goto	u5451
  5580  00147E  EF43  F00A         	goto	u5450
  5581  001482                     u5451:
  5582  001482  EF6D  F00A         	goto	l7037
  5583  001486                     u5450:
  5584  001486                     
  5585                           ; BSR set to: 0
  5586                           ;main.c: 609:                                {;main.c: 610:                             
      +                              dignum_conc(tecla, &ciclos);
  5587  001486  0EB0               	movlw	low main@ciclos
  5588  001488  6E37               	movwf	dignum_conc@ptrNum^0,c
  5589  00148A  0E00               	movlw	high main@ciclos
  5590  00148C  6E38               	movwf	(dignum_conc@ptrNum+1)^0,c
  5591  00148E  51BC               	movf	main@tecla& (0+255),w,b
  5592  001490  EC5C  F01D         	call	_dignum_conc
  5593  001494                     
  5594                           ;main.c: 611:                                 if(ciclos > 10000)
  5595  001494  0E11               	movlw	17
  5596  001496  0100               	movlb	0	; () banked
  5597  001498  5DB0               	subwf	main@ciclos& (0+255),w,b
  5598  00149A  0E27               	movlw	39
  5599  00149C  59B1               	subwfb	(main@ciclos+1)& (0+255),w,b
  5600  00149E  A0D8               	btfss	status,0,c
  5601  0014A0  EF54  F00A         	goto	u5461
  5602  0014A4  EF56  F00A         	goto	u5460
  5603  0014A8                     u5461:
  5604  0014A8  EF5A  F00A         	goto	l825
  5605  0014AC                     u5460:
  5606  0014AC                     
  5607                           ; BSR set to: 0
  5608                           ;main.c: 612:                                     ciclos = 10000;
  5609  0014AC  0E27               	movlw	39
  5610  0014AE  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  5611  0014B0  0E10               	movlw	16
  5612  0014B2  6FB0               	movwf	main@ciclos& (0+255),b
  5613  0014B4                     l825:
  5614                           
  5615                           ;main.c: 613:                                 estado = 53;
  5616  0014B4  0E35               	movlw	53
  5617  0014B6  0100               	movlb	0	; () banked
  5618  0014B8  6FBA               	movwf	main@estado& (0+255),b
  5619                           
  5620                           ;main.c: 614:                                 break;
  5621  0014BA  EFED  F00D         	goto	l7191
  5622  0014BE                     l829:
  5623                           
  5624                           ; BSR set to: 0
  5625  0014BE  EF0B  F003         	goto	l6609
  5626  0014C2                     l7029:
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;main.c: 626:                                        estado = 54;
  5630  0014C2  0E36               	movlw	54
  5631  0014C4  6FBA               	movwf	main@estado& (0+255),b
  5632                           
  5633                           ;main.c: 627:                                        break;
  5634  0014C6  EFED  F00D         	goto	l7191
  5635  0014CA                     l7031:
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;main.c: 629:                                        dignum_apagar(&ciclos);
  5639  0014CA  0EB0               	movlw	low main@ciclos
  5640  0014CC  6E38               	movwf	dignum_apagar@ptrNum^0,c
  5641  0014CE  0E00               	movlw	high main@ciclos
  5642  0014D0  6E39               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5643  0014D2  ECF6  F01E         	call	_dignum_apagar	;wreg free
  5644  0014D6  EF5A  F00A         	goto	l825
  5645  0014DA                     l7037:
  5646                           
  5647                           ; BSR set to: 0
  5648  0014DA  51BC               	movf	main@tecla& (0+255),w,b
  5649  0014DC  6E59               	movwf	??_main^0,c
  5650  0014DE  6A5A               	clrf	(??_main+1)^0,c
  5651                           
  5652                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5653                           ; Switch size 1, requested type "simple"
  5654                           ; Number of cases is 1, Range of values is 0 to 0
  5655                           ; switch strategies available:
  5656                           ; Name         Instructions Cycles
  5657                           ; simple_byte            4     3 (average)
  5658                           ;	Chosen strategy is simple_byte
  5659  0014E0  505A               	movf	(??_main+1)^0,w,c
  5660  0014E2  0A00               	xorlw	0	; case 0
  5661  0014E4  B4D8               	btfsc	status,2,c
  5662  0014E6  EF77  F00A         	goto	l8009
  5663  0014EA  EFED  F00D         	goto	l7191
  5664  0014EE                     l8009:
  5665                           
  5666                           ; BSR set to: 0
  5667                           ; Switch size 1, requested type "simple"
  5668                           ; Number of cases is 6, Range of values is 35 to 68
  5669                           ; switch strategies available:
  5670                           ; Name         Instructions Cycles
  5671                           ; simple_byte           19    10 (average)
  5672                           ;	Chosen strategy is simple_byte
  5673  0014EE  5059               	movf	??_main^0,w,c
  5674  0014F0  0A23               	xorlw	35	; case 35
  5675  0014F2  B4D8               	btfsc	status,2,c
  5676  0014F4  EF61  F00A         	goto	l7029
  5677  0014F8  0A09               	xorlw	9	; case 42
  5678  0014FA  B4D8               	btfsc	status,2,c
  5679  0014FC  EF65  F00A         	goto	l7031
  5680  001500  0A6B               	xorlw	107	; case 65
  5681  001502  B4D8               	btfsc	status,2,c
  5682  001504  EF5F  F00A         	goto	l829
  5683  001508  0A03               	xorlw	3	; case 66
  5684  00150A  B4D8               	btfsc	status,2,c
  5685  00150C  EF0B  F003         	goto	l6609
  5686  001510  0A01               	xorlw	1	; case 67
  5687  001512  B4D8               	btfsc	status,2,c
  5688  001514  EF0B  F003         	goto	l6609
  5689  001518  0A07               	xorlw	7	; case 68
  5690  00151A  B4D8               	btfsc	status,2,c
  5691  00151C  EF0B  F003         	goto	l6609
  5692  001520  EFED  F00D         	goto	l7191
  5693  001524                     l7039:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;main.c: 636:                             IHM.clr();
  5697  001524  EE20  F0E9         	lfsr	2,_IHM+8
  5698  001528  D802               	call	u5478
  5699  00152A  EFA1  F00A         	goto	u5479
  5700  00152E                     u5478:
  5701  00152E  0005               	push	
  5702  001530  6EFA               	movwf	pclath,c
  5703  001532  50DE               	movf	postinc2,w,c
  5704  001534  6EFD               	movwf	tosl,c
  5705  001536  50DE               	movf	postinc2,w,c
  5706  001538  6EFE               	movwf	tosh,c
  5707  00153A  50F8               	movf	tblptru,w,c
  5708  00153C  6EFF               	movwf	tosu,c
  5709  00153E  50FA               	movf	pclath,w,c
  5710  001540  0012               	return		;indir
  5711  001542                     u5479:
  5712  001542                     
  5713                           ;main.c: 637:                             IHM.printpos(0, 0, "Ciclos:             ");
  5714  001542  EE20  F0E5         	lfsr	2,_IHM+4
  5715  001546  D802               	call	u5488
  5716  001548  EFB7  F00A         	goto	u5489
  5717  00154C                     u5488:
  5718  00154C  0005               	push	
  5719  00154E  6EFA               	movwf	pclath,c
  5720  001550  50DE               	movf	postinc2,w,c
  5721  001552  6EFD               	movwf	tosl,c
  5722  001554  50DE               	movf	postinc2,w,c
  5723  001556  6EFE               	movwf	tosh,c
  5724  001558  50F8               	movf	tblptru,w,c
  5725  00155A  6EFF               	movwf	tosu,c
  5726  00155C  50FA               	movf	pclath,w,c
  5727  00155E  0E00               	movlw	0
  5728  001560  6E38               	movwf	dispLCD@col^0,c
  5729  001562  0E99               	movlw	low STR_26
  5730  001564  6E39               	movwf	dispLCD@str^0,c
  5731  001566  0E7D               	movlw	high STR_26
  5732  001568  6E3A               	movwf	(dispLCD@str+1)^0,c
  5733  00156A  0E00               	movlw	0
  5734  00156C  0012               	return		;indir
  5735  00156E                     u5489:
  5736  00156E                     
  5737                           ;main.c: 638:                             IHM.printv(0, 15, ciclos, 5);
  5738  00156E  EE20  F0E7         	lfsr	2,_IHM+6
  5739  001572  D802               	call	u5498
  5740  001574  EFCF  F00A         	goto	u5499
  5741  001578                     u5498:
  5742  001578  0005               	push	
  5743  00157A  6EFA               	movwf	pclath,c
  5744  00157C  50DE               	movf	postinc2,w,c
  5745  00157E  6EFD               	movwf	tosl,c
  5746  001580  50DE               	movf	postinc2,w,c
  5747  001582  6EFE               	movwf	tosh,c
  5748  001584  50F8               	movf	tblptru,w,c
  5749  001586  6EFF               	movwf	tosu,c
  5750  001588  50FA               	movf	pclath,w,c
  5751  00158A  0E0F               	movlw	15
  5752  00158C  6E3C               	movwf	dispLCD_num@col^0,c
  5753  00158E  C0B0  F03D         	movff	main@ciclos,dispLCD_num@num
  5754  001592  C0B1  F03E         	movff	main@ciclos+1,dispLCD_num@num+1
  5755  001596  0E05               	movlw	5
  5756  001598  6E3F               	movwf	dispLCD_num@tam^0,c
  5757  00159A  0E00               	movlw	0
  5758  00159C  0012               	return		;indir
  5759  00159E                     u5499:
  5760                           
  5761                           ;main.c: 639:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
  5762  00159E  EE20  F0E5         	lfsr	2,_IHM+4
  5763  0015A2  D802               	call	u5508
  5764  0015A4  EFE5  F00A         	goto	u5509
  5765  0015A8                     u5508:
  5766  0015A8  0005               	push	
  5767  0015AA  6EFA               	movwf	pclath,c
  5768  0015AC  50DE               	movf	postinc2,w,c
  5769  0015AE  6EFD               	movwf	tosl,c
  5770  0015B0  50DE               	movf	postinc2,w,c
  5771  0015B2  6EFE               	movwf	tosh,c
  5772  0015B4  50F8               	movf	tblptru,w,c
  5773  0015B6  6EFF               	movwf	tosu,c
  5774  0015B8  50FA               	movf	pclath,w,c
  5775  0015BA  0E00               	movlw	0
  5776  0015BC  6E38               	movwf	dispLCD@col^0,c
  5777  0015BE  0ED4               	movlw	low STR_27
  5778  0015C0  6E39               	movwf	dispLCD@str^0,c
  5779  0015C2  0E7E               	movlw	high STR_27
  5780  0015C4  6E3A               	movwf	(dispLCD@str+1)^0,c
  5781  0015C6  0E02               	movlw	2
  5782  0015C8  0012               	return		;indir
  5783  0015CA                     u5509:
  5784  0015CA                     
  5785                           ;main.c: 640:                             estado = 52;
  5786  0015CA  0E34               	movlw	52
  5787  0015CC  0100               	movlb	0	; () banked
  5788  0015CE  6FBA               	movwf	main@estado& (0+255),b
  5789                           
  5790                           ;main.c: 641:                             break;
  5791  0015D0  EFED  F00D         	goto	l7191
  5792  0015D4                     l7047:
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;main.c: 644:                             salvar_dado(10, 10, init_cond);
  5796  0015D4  0E0A               	movlw	10
  5797  0015D6  6E37               	movwf	salvar_dado@col^0,c
  5798  0015D8  C0B2  F038         	movff	main@init_cond,salvar_dado@data
  5799  0015DC  0E0A               	movlw	10
  5800  0015DE  EC8A  F01F         	call	_salvar_dado
  5801  0015E2                     
  5802                           ;main.c: 645:                             EEPROM.salvar(11, fifo_adrs() + 2);
  5803  0015E2  D802               	call	u5518
  5804  0015E4  EF08  F00B         	goto	u5519
  5805  0015E8                     u5518:
  5806  0015E8  0005               	push	
  5807  0015EA  0100               	movlb	0	; () banked
  5808  0015EC  6EFA               	movwf	pclath,c
  5809  0015EE  51EB               	movf	_EEPROM& (0+255),w,b
  5810  0015F0  6EFD               	movwf	tosl,c
  5811  0015F2  51EC               	movf	(_EEPROM+1)& (0+255),w,b
  5812  0015F4  6EFE               	movwf	tosh,c
  5813  0015F6  50F8               	movf	tblptru,w,c
  5814  0015F8  6EFF               	movwf	tosu,c
  5815  0015FA  50FA               	movf	pclath,w,c
  5816  0015FC  EC64  F020         	call	_fifo_adrs	;wreg free
  5817  001600  0E02               	movlw	2
  5818  001602  2431               	addwf	?_fifo_adrs^0,w,c
  5819  001604  6E37               	movwf	salvar_receita@data^0,c
  5820  001606  0E00               	movlw	0
  5821  001608  2032               	addwfc	(?_fifo_adrs+1)^0,w,c
  5822  00160A  6E38               	movwf	(salvar_receita@data+1)^0,c
  5823  00160C  0E0B               	movlw	11
  5824  00160E  0012               	return		;indir
  5825  001610                     u5519:
  5826  001610                     
  5827                           ;main.c: 646:                             IHM.print("    DESEJA SALVAR   \n"
  5828  001610  0ED1               	movlw	low STR_28
  5829  001612  6E38               	movwf	dispLCD_str@str^0,c
  5830  001614  0E7C               	movlw	high STR_28
  5831  001616  6E39               	movwf	(dispLCD_str@str+1)^0,c
  5832  001618  EE20  F0E3         	lfsr	2,_IHM+2
  5833  00161C  D802               	call	u5528
  5834  00161E  EF1B  F00B         	goto	u5529
  5835  001622                     u5528:
  5836  001622  0005               	push	
  5837  001624  6EFA               	movwf	pclath,c
  5838  001626  50DE               	movf	postinc2,w,c
  5839  001628  6EFD               	movwf	tosl,c
  5840  00162A  50DE               	movf	postinc2,w,c
  5841  00162C  6EFE               	movwf	tosh,c
  5842  00162E  50F8               	movf	tblptru,w,c
  5843  001630  6EFF               	movwf	tosu,c
  5844  001632  50FA               	movf	pclath,w,c
  5845  001634  0012               	return		;indir
  5846  001636                     u5529:
  5847  001636                     
  5848                           ;main.c: 650:                             tecla = teclado_borda();
  5849  001636  EC79  F01E         	call	_teclado_borda
  5850  00163A  0100               	movlb	0	; () banked
  5851  00163C  6FBC               	movwf	main@tecla& (0+255),b
  5852                           
  5853                           ;main.c: 651:                             switch(tecla)
  5854  00163E  EF29  F00B         	goto	l7063
  5855  001642                     l7055:
  5856                           
  5857                           ; BSR set to: 0
  5858  001642  0E4B               	movlw	75
  5859  001644  6FBA               	movwf	main@estado& (0+255),b
  5860  001646  EFED  F00D         	goto	l7191
  5861  00164A                     l7057:
  5862                           
  5863                           ; BSR set to: 0
  5864  00164A  EC6E  F020         	call	_dispLCD_clr	;wreg free
  5865  00164E  EF5A  F00A         	goto	l825
  5866  001652                     l7063:
  5867                           
  5868                           ; BSR set to: 0
  5869  001652  51BC               	movf	main@tecla& (0+255),w,b
  5870  001654  6E59               	movwf	??_main^0,c
  5871  001656  6A5A               	clrf	(??_main+1)^0,c
  5872                           
  5873                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5874                           ; Switch size 1, requested type "simple"
  5875                           ; Number of cases is 1, Range of values is 0 to 0
  5876                           ; switch strategies available:
  5877                           ; Name         Instructions Cycles
  5878                           ; simple_byte            4     3 (average)
  5879                           ;	Chosen strategy is simple_byte
  5880  001658  505A               	movf	(??_main+1)^0,w,c
  5881  00165A  0A00               	xorlw	0	; case 0
  5882  00165C  B4D8               	btfsc	status,2,c
  5883  00165E  EF33  F00B         	goto	l8011
  5884  001662  EFED  F00D         	goto	l7191
  5885  001666                     l8011:
  5886                           
  5887                           ; BSR set to: 0
  5888                           ; Switch size 1, requested type "simple"
  5889                           ; Number of cases is 2, Range of values is 35 to 42
  5890                           ; switch strategies available:
  5891                           ; Name         Instructions Cycles
  5892                           ; simple_byte            7     4 (average)
  5893                           ;	Chosen strategy is simple_byte
  5894  001666  5059               	movf	??_main^0,w,c
  5895  001668  0A23               	xorlw	35	; case 35
  5896  00166A  B4D8               	btfsc	status,2,c
  5897  00166C  EF21  F00B         	goto	l7055
  5898  001670  0A09               	xorlw	9	; case 42
  5899  001672  B4D8               	btfsc	status,2,c
  5900  001674  EF25  F00B         	goto	l7057
  5901  001678  EFED  F00D         	goto	l7191
  5902  00167C                     l7065:
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;main.c: 659:                             IHM.clr();
  5906  00167C  EE20  F0E9         	lfsr	2,_IHM+8
  5907  001680  D802               	call	u5538
  5908  001682  EF4D  F00B         	goto	u5539
  5909  001686                     u5538:
  5910  001686  0005               	push	
  5911  001688  6EFA               	movwf	pclath,c
  5912  00168A  50DE               	movf	postinc2,w,c
  5913  00168C  6EFD               	movwf	tosl,c
  5914  00168E  50DE               	movf	postinc2,w,c
  5915  001690  6EFE               	movwf	tosh,c
  5916  001692  50F8               	movf	tblptru,w,c
  5917  001694  6EFF               	movwf	tosu,c
  5918  001696  50FA               	movf	pclath,w,c
  5919  001698  0012               	return		;indir
  5920  00169A                     u5539:
  5921  00169A                     
  5922                           ;main.c: 660:                             IHM.print(" ESCOLHA A MEMORIA\n"
  5923  00169A  0E83               	movlw	low STR_29
  5924  00169C  6E38               	movwf	dispLCD_str@str^0,c
  5925  00169E  0E7C               	movlw	high STR_29
  5926  0016A0  6E39               	movwf	(dispLCD_str@str+1)^0,c
  5927  0016A2  EE20  F0E3         	lfsr	2,_IHM+2
  5928  0016A6  D802               	call	u5548
  5929  0016A8  EF60  F00B         	goto	u5549
  5930  0016AC                     u5548:
  5931  0016AC  0005               	push	
  5932  0016AE  6EFA               	movwf	pclath,c
  5933  0016B0  50DE               	movf	postinc2,w,c
  5934  0016B2  6EFD               	movwf	tosl,c
  5935  0016B4  50DE               	movf	postinc2,w,c
  5936  0016B6  6EFE               	movwf	tosh,c
  5937  0016B8  50F8               	movf	tblptru,w,c
  5938  0016BA  6EFF               	movwf	tosu,c
  5939  0016BC  50FA               	movf	pclath,w,c
  5940  0016BE  0012               	return		;indir
  5941  0016C0                     u5549:
  5942  0016C0                     
  5943                           ;main.c: 664:                             estado = 76;
  5944  0016C0  0E4C               	movlw	76
  5945  0016C2  0100               	movlb	0	; () banked
  5946  0016C4  6FBA               	movwf	main@estado& (0+255),b
  5947  0016C6                     l7071:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;main.c: 667:                             tecla = teclado_borda();
  5951  0016C6  EC79  F01E         	call	_teclado_borda	;wreg free
  5952  0016CA  0100               	movlb	0	; () banked
  5953  0016CC  6FBC               	movwf	main@tecla& (0+255),b
  5954                           
  5955                           ;main.c: 668:                             switch(tecla)
  5956  0016CE  EFAF  F00B         	goto	l7085
  5957  0016D2                     l846:
  5958  0016D2                     l7073:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;main.c: 680:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
  5962  0016D2  C0BC  F031         	movff	main@tecla,___awmod@dividend
  5963  0016D6  6A32               	clrf	(___awmod@dividend+1)^0,c
  5964  0016D8  0E00               	movlw	0
  5965  0016DA  6E34               	movwf	(___awmod@divisor+1)^0,c
  5966  0016DC  0E30               	movlw	48
  5967  0016DE  6E33               	movwf	___awmod@divisor^0,c
  5968  0016E0  EC9E  F017         	call	___awmod	;wreg free
  5969  0016E4  5031               	movf	?___awmod^0,w,c
  5970  0016E6  6E37               	movwf	salvar_dado@col^0,c
  5971  0016E8  C0B2  F038         	movff	main@init_cond,salvar_dado@data
  5972  0016EC  0E0A               	movlw	10
  5973  0016EE  EC8A  F01F         	call	_salvar_dado
  5974  0016F2                     
  5975                           ;main.c: 681:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
  5976  0016F2  D802               	call	u5558
  5977  0016F4  EF99  F00B         	goto	u5559
  5978  0016F8                     u5558:
  5979  0016F8  0005               	push	
  5980  0016FA  0100               	movlb	0	; () banked
  5981  0016FC  6EFA               	movwf	pclath,c
  5982  0016FE  51EB               	movf	_EEPROM& (0+255),w,b
  5983  001700  6EFD               	movwf	tosl,c
  5984  001702  51EC               	movf	(_EEPROM+1)& (0+255),w,b
  5985  001704  6EFE               	movwf	tosh,c
  5986  001706  50F8               	movf	tblptru,w,c
  5987  001708  6EFF               	movwf	tosu,c
  5988  00170A  50FA               	movf	pclath,w,c
  5989  00170C  EC64  F020         	call	_fifo_adrs	;wreg free
  5990  001710  0E02               	movlw	2
  5991  001712  2431               	addwf	?_fifo_adrs^0,w,c
  5992  001714  6E37               	movwf	salvar_receita@data^0,c
  5993  001716  0E00               	movlw	0
  5994  001718  2032               	addwfc	(?_fifo_adrs+1)^0,w,c
  5995  00171A  6E38               	movwf	(salvar_receita@data+1)^0,c
  5996  00171C  C0BC  F031         	movff	main@tecla,___awmod@dividend
  5997  001720  6A32               	clrf	(___awmod@dividend+1)^0,c
  5998  001722  0E00               	movlw	0
  5999  001724  6E34               	movwf	(___awmod@divisor+1)^0,c
  6000  001726  0E30               	movlw	48
  6001  001728  6E33               	movwf	___awmod@divisor^0,c
  6002  00172A  EC9E  F017         	call	___awmod	;wreg free
  6003  00172E  5031               	movf	?___awmod^0,w,c
  6004  001730  0012               	return		;indir
  6005  001732                     u5559:
  6006  001732                     
  6007                           ;main.c: 682:                                            estado = 77;
  6008  001732  0E4D               	movlw	77
  6009  001734  0100               	movlb	0	; () banked
  6010  001736  6FBA               	movwf	main@estado& (0+255),b
  6011                           
  6012                           ;main.c: 683:                                            break;
  6013  001738  EFED  F00D         	goto	l7191
  6014  00173C                     l7079:
  6015                           
  6016                           ; BSR set to: 0
  6017  00173C  EE20  F0E9         	lfsr	2,_IHM+8
  6018  001740  D802               	call	u5568
  6019  001742  EFAD  F00B         	goto	u5569
  6020  001746                     u5568:
  6021  001746  0005               	push	
  6022  001748  6EFA               	movwf	pclath,c
  6023  00174A  50DE               	movf	postinc2,w,c
  6024  00174C  6EFD               	movwf	tosl,c
  6025  00174E  50DE               	movf	postinc2,w,c
  6026  001750  6EFE               	movwf	tosh,c
  6027  001752  50F8               	movf	tblptru,w,c
  6028  001754  6EFF               	movwf	tosu,c
  6029  001756  50FA               	movf	pclath,w,c
  6030  001758  0012               	return		;indir
  6031  00175A                     u5569:
  6032  00175A  EF02  F008         	goto	l6913
  6033  00175E                     l7085:
  6034                           
  6035                           ; BSR set to: 0
  6036  00175E  51BC               	movf	main@tecla& (0+255),w,b
  6037  001760  6E59               	movwf	??_main^0,c
  6038  001762  6A5A               	clrf	(??_main+1)^0,c
  6039                           
  6040                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6041                           ; Switch size 1, requested type "simple"
  6042                           ; Number of cases is 1, Range of values is 0 to 0
  6043                           ; switch strategies available:
  6044                           ; Name         Instructions Cycles
  6045                           ; simple_byte            4     3 (average)
  6046                           ;	Chosen strategy is simple_byte
  6047  001764  505A               	movf	(??_main+1)^0,w,c
  6048  001766  0A00               	xorlw	0	; case 0
  6049  001768  B4D8               	btfsc	status,2,c
  6050  00176A  EFB9  F00B         	goto	l8013
  6051  00176E  EFED  F00D         	goto	l7191
  6052  001772                     l8013:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ; Switch size 1, requested type "simple"
  6056                           ; Number of cases is 11, Range of values is 42 to 57
  6057                           ; switch strategies available:
  6058                           ; Name         Instructions Cycles
  6059                           ; simple_byte           34    18 (average)
  6060                           ;	Chosen strategy is simple_byte
  6061  001772  5059               	movf	??_main^0,w,c
  6062  001774  0A2A               	xorlw	42	; case 42
  6063  001776  B4D8               	btfsc	status,2,c
  6064  001778  EF9E  F00B         	goto	l7079
  6065  00177C  0A1A               	xorlw	26	; case 48
  6066  00177E  B4D8               	btfsc	status,2,c
  6067  001780  EF69  F00B         	goto	l846
  6068  001784  0A01               	xorlw	1	; case 49
  6069  001786  B4D8               	btfsc	status,2,c
  6070  001788  EF69  F00B         	goto	l846
  6071  00178C  0A03               	xorlw	3	; case 50
  6072  00178E  B4D8               	btfsc	status,2,c
  6073  001790  EF69  F00B         	goto	l7073
  6074  001794  0A01               	xorlw	1	; case 51
  6075  001796  B4D8               	btfsc	status,2,c
  6076  001798  EF69  F00B         	goto	l7073
  6077  00179C  0A07               	xorlw	7	; case 52
  6078  00179E  B4D8               	btfsc	status,2,c
  6079  0017A0  EF69  F00B         	goto	l7073
  6080  0017A4  0A01               	xorlw	1	; case 53
  6081  0017A6  B4D8               	btfsc	status,2,c
  6082  0017A8  EF69  F00B         	goto	l7073
  6083  0017AC  0A03               	xorlw	3	; case 54
  6084  0017AE  B4D8               	btfsc	status,2,c
  6085  0017B0  EF69  F00B         	goto	l7073
  6086  0017B4  0A01               	xorlw	1	; case 55
  6087  0017B6  B4D8               	btfsc	status,2,c
  6088  0017B8  EF69  F00B         	goto	l7073
  6089  0017BC  0A0F               	xorlw	15	; case 56
  6090  0017BE  B4D8               	btfsc	status,2,c
  6091  0017C0  EF69  F00B         	goto	l7073
  6092  0017C4  0A01               	xorlw	1	; case 57
  6093  0017C6  B4D8               	btfsc	status,2,c
  6094  0017C8  EF69  F00B         	goto	l7073
  6095  0017CC  EFED  F00D         	goto	l7191
  6096  0017D0                     l7087:
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;main.c: 690:                             IHM.clr();
  6100  0017D0  EE20  F0E9         	lfsr	2,_IHM+8
  6101  0017D4  D802               	call	u5578
  6102  0017D6  EFF7  F00B         	goto	u5579
  6103  0017DA                     u5578:
  6104  0017DA  0005               	push	
  6105  0017DC  6EFA               	movwf	pclath,c
  6106  0017DE  50DE               	movf	postinc2,w,c
  6107  0017E0  6EFD               	movwf	tosl,c
  6108  0017E2  50DE               	movf	postinc2,w,c
  6109  0017E4  6EFE               	movwf	tosh,c
  6110  0017E6  50F8               	movf	tblptru,w,c
  6111  0017E8  6EFF               	movwf	tosu,c
  6112  0017EA  50FA               	movf	pclath,w,c
  6113  0017EC  0012               	return		;indir
  6114  0017EE                     u5579:
  6115  0017EE                     
  6116                           ;main.c: 691:                             for(char i = 0; i <= 3; i++)
  6117  0017EE  0E00               	movlw	0
  6118  0017F0  0100               	movlb	0	; () banked
  6119  0017F2  6FA9               	movwf	main@i_975& (0+255),b
  6120  0017F4                     l7091:
  6121                           
  6122                           ; BSR set to: 0
  6123  0017F4  0E03               	movlw	3
  6124  0017F6  65A9               	cpfsgt	main@i_975& (0+255),b
  6125  0017F8  EF00  F00C         	goto	u5581
  6126  0017FC  EF02  F00C         	goto	u5580
  6127  001800                     u5581:
  6128  001800  EF04  F00C         	goto	l7095
  6129  001804                     u5580:
  6130  001804  EF33  F00C         	goto	l7113
  6131  001808                     l7095:
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;main.c: 692:                             {;main.c: 693:                                
      +                           for(char j = 0; j <= 19; j++)
  6135  001808  0E00               	movlw	0
  6136  00180A  6FAA               	movwf	main@j_976& (0+255),b
  6137  00180C                     l7097:
  6138                           
  6139                           ; BSR set to: 0
  6140  00180C  0E13               	movlw	19
  6141  00180E  65AA               	cpfsgt	main@j_976& (0+255),b
  6142  001810  EF0C  F00C         	goto	u5591
  6143  001814  EF0E  F00C         	goto	u5590
  6144  001818                     u5591:
  6145  001818  EF10  F00C         	goto	l7101
  6146  00181C                     u5590:
  6147  00181C  EF30  F00C         	goto	l7109
  6148  001820                     l7101:
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;main.c: 694:                                 {;main.c: 695:                            
      +                                   IHM.printpos(i, j, "\377");
  6152  001820  EE20  F0E5         	lfsr	2,_IHM+4
  6153  001824  D802               	call	u5608
  6154  001826  EF26  F00C         	goto	u5609
  6155  00182A                     u5608:
  6156  00182A  0005               	push	
  6157  00182C  6EFA               	movwf	pclath,c
  6158  00182E  50DE               	movf	postinc2,w,c
  6159  001830  6EFD               	movwf	tosl,c
  6160  001832  50DE               	movf	postinc2,w,c
  6161  001834  6EFE               	movwf	tosh,c
  6162  001836  50F8               	movf	tblptru,w,c
  6163  001838  6EFF               	movwf	tosu,c
  6164  00183A  50FA               	movf	pclath,w,c
  6165  00183C  C0AA  F038         	movff	main@j_976,dispLCD@col
  6166  001840  0EFD               	movlw	low STR_3
  6167  001842  6E39               	movwf	dispLCD@str^0,c
  6168  001844  0E7F               	movlw	high STR_3
  6169  001846  6E3A               	movwf	(dispLCD@str+1)^0,c
  6170  001848  51A9               	movf	main@i_975& (0+255),w,b
  6171  00184A  0012               	return		;indir
  6172  00184C                     u5609:
  6173  00184C                     
  6174                           ;main.c: 696:                                     delay(10);
  6175  00184C  0E00               	movlw	0
  6176  00184E  6E32               	movwf	(delay@t+1)^0,c
  6177  001850  0E0A               	movlw	10
  6178  001852  6E31               	movwf	delay@t^0,c
  6179  001854  EC24  F01F         	call	_delay
  6180  001858                     
  6181                           ;main.c: 697:                                 }
  6182  001858  0100               	movlb	0	; () banked
  6183  00185A  2BAA               	incf	main@j_976& (0+255),f,b
  6184  00185C  EF06  F00C         	goto	l7097
  6185  001860                     l7109:
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;main.c: 698:                             }
  6189  001860  2BA9               	incf	main@i_975& (0+255),f,b
  6190  001862  EFFA  F00B         	goto	l7091
  6191  001866                     l7113:
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;main.c: 700:                             for(char i = 0; i <= 3; i++)
  6195  001866  0E00               	movlw	0
  6196  001868  6FAB               	movwf	main@i_978& (0+255),b
  6197  00186A                     l7115:
  6198                           
  6199                           ; BSR set to: 0
  6200  00186A  0E03               	movlw	3
  6201  00186C  65AB               	cpfsgt	main@i_978& (0+255),b
  6202  00186E  EF3B  F00C         	goto	u5611
  6203  001872  EF3D  F00C         	goto	u5610
  6204  001876                     u5611:
  6205  001876  EF3F  F00C         	goto	l7119
  6206  00187A                     u5610:
  6207  00187A  EF6E  F00C         	goto	l7137
  6208  00187E                     l7119:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;main.c: 701:                             {;main.c: 702:                                
      +                           for(char j = 0; j <= 19; j++)
  6212  00187E  0E00               	movlw	0
  6213  001880  6FAC               	movwf	main@j_979& (0+255),b
  6214  001882                     l7121:
  6215                           
  6216                           ; BSR set to: 0
  6217  001882  0E13               	movlw	19
  6218  001884  65AC               	cpfsgt	main@j_979& (0+255),b
  6219  001886  EF47  F00C         	goto	u5621
  6220  00188A  EF49  F00C         	goto	u5620
  6221  00188E                     u5621:
  6222  00188E  EF4B  F00C         	goto	l7125
  6223  001892                     u5620:
  6224  001892  EF6B  F00C         	goto	l7133
  6225  001896                     l7125:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;main.c: 703:                                 {;main.c: 704:                            
      +                                   IHM.printpos(i, j, " ");
  6229  001896  EE20  F0E5         	lfsr	2,_IHM+4
  6230  00189A  D802               	call	u5638
  6231  00189C  EF61  F00C         	goto	u5639
  6232  0018A0                     u5638:
  6233  0018A0  0005               	push	
  6234  0018A2  6EFA               	movwf	pclath,c
  6235  0018A4  50DE               	movf	postinc2,w,c
  6236  0018A6  6EFD               	movwf	tosl,c
  6237  0018A8  50DE               	movf	postinc2,w,c
  6238  0018AA  6EFE               	movwf	tosh,c
  6239  0018AC  50F8               	movf	tblptru,w,c
  6240  0018AE  6EFF               	movwf	tosu,c
  6241  0018B0  50FA               	movf	pclath,w,c
  6242  0018B2  C0AC  F038         	movff	main@j_979,dispLCD@col
  6243  0018B6  0EAC               	movlw	low (STR_26+19)
  6244  0018B8  6E39               	movwf	dispLCD@str^0,c
  6245  0018BA  0E7D               	movlw	high (STR_26+19)
  6246  0018BC  6E3A               	movwf	(dispLCD@str+1)^0,c
  6247  0018BE  51AB               	movf	main@i_978& (0+255),w,b
  6248  0018C0  0012               	return		;indir
  6249  0018C2                     u5639:
  6250  0018C2                     
  6251                           ;main.c: 705:                                     delay(10);
  6252  0018C2  0E00               	movlw	0
  6253  0018C4  6E32               	movwf	(delay@t+1)^0,c
  6254  0018C6  0E0A               	movlw	10
  6255  0018C8  6E31               	movwf	delay@t^0,c
  6256  0018CA  EC24  F01F         	call	_delay
  6257  0018CE                     
  6258                           ;main.c: 706:                                 }
  6259  0018CE  0100               	movlb	0	; () banked
  6260  0018D0  2BAC               	incf	main@j_979& (0+255),f,b
  6261  0018D2  EF41  F00C         	goto	l7121
  6262  0018D6                     l7133:
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;main.c: 707:                             }
  6266  0018D6  2BAB               	incf	main@i_978& (0+255),f,b
  6267  0018D8  EF35  F00C         	goto	l7115
  6268  0018DC                     l7137:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;main.c: 708:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
  6272  0018DC  EE20  F0E5         	lfsr	2,_IHM+4
  6273  0018E0  D802               	call	u5648
  6274  0018E2  EF84  F00C         	goto	u5649
  6275  0018E6                     u5648:
  6276  0018E6  0005               	push	
  6277  0018E8  6EFA               	movwf	pclath,c
  6278  0018EA  50DE               	movf	postinc2,w,c
  6279  0018EC  6EFD               	movwf	tosl,c
  6280  0018EE  50DE               	movf	postinc2,w,c
  6281  0018F0  6EFE               	movwf	tosh,c
  6282  0018F2  50F8               	movf	tblptru,w,c
  6283  0018F4  6EFF               	movwf	tosu,c
  6284  0018F6  50FA               	movf	pclath,w,c
  6285  0018F8  0E00               	movlw	0
  6286  0018FA  6E38               	movwf	dispLCD@col^0,c
  6287  0018FC  0E41               	movlw	low STR_32
  6288  0018FE  6E39               	movwf	dispLCD@str^0,c
  6289  001900  0E7E               	movlw	high STR_32
  6290  001902  6E3A               	movwf	(dispLCD@str+1)^0,c
  6291  001904  0E01               	movlw	1
  6292  001906  0012               	return		;indir
  6293  001908                     u5649:
  6294                           
  6295                           ;main.c: 709:                             IHM.printpos(2, 0, "        SALVA       ");
  6296  001908  EE20  F0E5         	lfsr	2,_IHM+4
  6297  00190C  D802               	call	u5658
  6298  00190E  EF9A  F00C         	goto	u5659
  6299  001912                     u5658:
  6300  001912  0005               	push	
  6301  001914  6EFA               	movwf	pclath,c
  6302  001916  50DE               	movf	postinc2,w,c
  6303  001918  6EFD               	movwf	tosl,c
  6304  00191A  50DE               	movf	postinc2,w,c
  6305  00191C  6EFE               	movwf	tosh,c
  6306  00191E  50F8               	movf	tblptru,w,c
  6307  001920  6EFF               	movwf	tosu,c
  6308  001922  50FA               	movf	pclath,w,c
  6309  001924  0E00               	movlw	0
  6310  001926  6E38               	movwf	dispLCD@col^0,c
  6311  001928  0EC3               	movlw	low STR_33
  6312  00192A  6E39               	movwf	dispLCD@str^0,c
  6313  00192C  0E7D               	movlw	high STR_33
  6314  00192E  6E3A               	movwf	(dispLCD@str+1)^0,c
  6315  001930  0E02               	movlw	2
  6316  001932  0012               	return		;indir
  6317  001934                     u5659:
  6318  001934                     
  6319                           ;main.c: 711:                             setT1(1000);
  6320  001934  0EE8               	movlw	232
  6321  001936  6E37               	movwf	setT1@c^0,c
  6322  001938  0E03               	movlw	3
  6323  00193A  6E38               	movwf	(setT1@c+1)^0,c
  6324  00193C  0E00               	movlw	0
  6325  00193E  6E39               	movwf	(setT1@c+2)^0,c
  6326  001940  0E00               	movlw	0
  6327  001942  6E3A               	movwf	(setT1@c+3)^0,c
  6328  001944  ECF4  F01F         	call	_setT1
  6329  001948                     
  6330                           ;main.c: 712:                             estado = 78;
  6331  001948  0E4E               	movlw	78
  6332  00194A  0100               	movlb	0	; () banked
  6333  00194C  6FBA               	movwf	main@estado& (0+255),b
  6334                           
  6335                           ;main.c: 713:                             break;
  6336  00194E  EFED  F00D         	goto	l7191
  6337  001952                     l7143:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;main.c: 716:                             if(!statusT1())
  6341  001952  EC26  F020         	call	_statusT1	;wreg free
  6342  001956  5031               	movf	?_statusT1^0,w,c
  6343  001958  1032               	iorwf	(?_statusT1+1)^0,w,c
  6344  00195A  1033               	iorwf	(?_statusT1+2)^0,w,c
  6345  00195C  1034               	iorwf	(?_statusT1+3)^0,w,c
  6346  00195E  A4D8               	btfss	status,2,c
  6347  001960  EFB4  F00C         	goto	u5661
  6348  001964  EFB6  F00C         	goto	u5660
  6349  001968                     u5661:
  6350  001968  EFED  F00D         	goto	l7191
  6351  00196C                     u5660:
  6352  00196C  EF5A  F00A         	goto	l825
  6353  001970                     l7147:
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;main.c: 721:                             IHM.printpos(2, 0, "config contrl:     %");
  6357  001970  EE20  F0E5         	lfsr	2,_IHM+4
  6358  001974  D802               	call	u5678
  6359  001976  EFCE  F00C         	goto	u5679
  6360  00197A                     u5678:
  6361  00197A  0005               	push	
  6362  00197C  6EFA               	movwf	pclath,c
  6363  00197E  50DE               	movf	postinc2,w,c
  6364  001980  6EFD               	movwf	tosl,c
  6365  001982  50DE               	movf	postinc2,w,c
  6366  001984  6EFE               	movwf	tosh,c
  6367  001986  50F8               	movf	tblptru,w,c
  6368  001988  6EFF               	movwf	tosu,c
  6369  00198A  50FA               	movf	pclath,w,c
  6370  00198C  0E00               	movlw	0
  6371  00198E  6E38               	movwf	dispLCD@col^0,c
  6372  001990  0EFE               	movlw	low STR_34
  6373  001992  6E39               	movwf	dispLCD@str^0,c
  6374  001994  0E7E               	movlw	high STR_34
  6375  001996  6E3A               	movwf	(dispLCD@str+1)^0,c
  6376  001998  0E02               	movlw	2
  6377  00199A  0012               	return		;indir
  6378  00199C                     u5679:
  6379  00199C                     
  6380                           ;main.c: 722:                             IHM.printv(2, 15, num, 3);
  6381  00199C  EE20  F0E7         	lfsr	2,_IHM+6
  6382  0019A0  D802               	call	u5688
  6383  0019A2  EFE6  F00C         	goto	u5689
  6384  0019A6                     u5688:
  6385  0019A6  0005               	push	
  6386  0019A8  6EFA               	movwf	pclath,c
  6387  0019AA  50DE               	movf	postinc2,w,c
  6388  0019AC  6EFD               	movwf	tosl,c
  6389  0019AE  50DE               	movf	postinc2,w,c
  6390  0019B0  6EFE               	movwf	tosh,c
  6391  0019B2  50F8               	movf	tblptru,w,c
  6392  0019B4  6EFF               	movwf	tosu,c
  6393  0019B6  50FA               	movf	pclath,w,c
  6394  0019B8  0E0F               	movlw	15
  6395  0019BA  6E3C               	movwf	dispLCD_num@col^0,c
  6396  0019BC  C0B4  F03D         	movff	main@num,dispLCD_num@num
  6397  0019C0  C0B5  F03E         	movff	main@num+1,dispLCD_num@num+1
  6398  0019C4  0E03               	movlw	3
  6399  0019C6  6E3F               	movwf	dispLCD_num@tam^0,c
  6400  0019C8  0E02               	movlw	2
  6401  0019CA  0012               	return		;indir
  6402  0019CC                     u5689:
  6403  0019CC                     
  6404                           ;main.c: 723:                             estado = 91;
  6405  0019CC  0E5B               	movlw	91
  6406  0019CE  0100               	movlb	0	; () banked
  6407  0019D0  6FBA               	movwf	main@estado& (0+255),b
  6408                           
  6409                           ;main.c: 724:                             break;
  6410  0019D2  EFED  F00D         	goto	l7191
  6411  0019D6                     l7153:
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;main.c: 727:                             tecla = teclado_borda();
  6415  0019D6  EC79  F01E         	call	_teclado_borda
  6416  0019DA  0100               	movlb	0	; () banked
  6417  0019DC  6FBC               	movwf	main@tecla& (0+255),b
  6418  0019DE                     
  6419                           ; BSR set to: 0
  6420                           ;main.c: 728:                             if(tecla >= '0' && tecla <= '9')
  6421  0019DE  0E2F               	movlw	47
  6422  0019E0  65BC               	cpfsgt	main@tecla& (0+255),b
  6423  0019E2  EFF5  F00C         	goto	u5691
  6424  0019E6  EFF7  F00C         	goto	u5690
  6425  0019EA                     u5691:
  6426  0019EA  EF18  F00D         	goto	l7165
  6427  0019EE                     u5690:
  6428  0019EE                     
  6429                           ; BSR set to: 0
  6430  0019EE  0E3A               	movlw	58
  6431  0019F0  61BC               	cpfslt	main@tecla& (0+255),b
  6432  0019F2  EFFD  F00C         	goto	u5701
  6433  0019F6  EFFF  F00C         	goto	u5700
  6434  0019FA                     u5701:
  6435  0019FA  EF18  F00D         	goto	l7165
  6436  0019FE                     u5700:
  6437  0019FE                     
  6438                           ; BSR set to: 0
  6439                           ;main.c: 729:                             {;main.c: 730:                                
      +                           dignum_conc(tecla, &num);
  6440  0019FE  0EB4               	movlw	low main@num
  6441  001A00  6E37               	movwf	dignum_conc@ptrNum^0,c
  6442  001A02  0E00               	movlw	high main@num
  6443  001A04  6E38               	movwf	(dignum_conc@ptrNum+1)^0,c
  6444  001A06  51BC               	movf	main@tecla& (0+255),w,b
  6445  001A08  EC5C  F01D         	call	_dignum_conc
  6446  001A0C                     
  6447                           ;main.c: 731:                                 if(num > 100)
  6448  001A0C  0100               	movlb	0	; () banked
  6449  001A0E  51B5               	movf	(main@num+1)& (0+255),w,b
  6450  001A10  E109               	bnz	u5710
  6451  001A12  0E65               	movlw	101
  6452  001A14  5DB4               	subwf	main@num& (0+255),w,b
  6453  001A16  A0D8               	btfss	status,0,c
  6454  001A18  EF10  F00D         	goto	u5711
  6455  001A1C  EF12  F00D         	goto	u5710
  6456  001A20                     u5711:
  6457  001A20  EF16  F00D         	goto	l869
  6458  001A24                     u5710:
  6459  001A24                     
  6460                           ; BSR set to: 0
  6461                           ;main.c: 732:                                     num = 100;
  6462  001A24  0E00               	movlw	0
  6463  001A26  6FB5               	movwf	(main@num+1)& (0+255),b
  6464  001A28  0E64               	movlw	100
  6465  001A2A  6FB4               	movwf	main@num& (0+255),b
  6466  001A2C                     l869:
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;main.c: 733:                                 estado = 90;
  6470  001A2C  0E5A               	movlw	90
  6471  001A2E  6FBA               	movwf	main@estado& (0+255),b
  6472  001A30                     l7165:
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;main.c: 735:                             if(tecla == '*')
  6476  001A30  0E2A               	movlw	42
  6477  001A32  19BC               	xorwf	main@tecla& (0+255),w,b
  6478  001A34  A4D8               	btfss	status,2,c
  6479  001A36  EF1F  F00D         	goto	u5721
  6480  001A3A  EF21  F00D         	goto	u5720
  6481  001A3E                     u5721:
  6482  001A3E  EF2A  F00D         	goto	l7171
  6483  001A42                     u5720:
  6484  001A42                     
  6485                           ; BSR set to: 0
  6486                           ;main.c: 736:                             {;main.c: 737:                                
      +                           dignum_apagar(&num);
  6487  001A42  0EB4               	movlw	low main@num
  6488  001A44  6E38               	movwf	dignum_apagar@ptrNum^0,c
  6489  001A46  0E00               	movlw	high main@num
  6490  001A48  6E39               	movwf	(dignum_apagar@ptrNum+1)^0,c
  6491  001A4A  ECF6  F01E         	call	_dignum_apagar	;wreg free
  6492  001A4E                     
  6493                           ;main.c: 738:                                 estado = 90;
  6494  001A4E  0E5A               	movlw	90
  6495  001A50  0100               	movlb	0	; () banked
  6496  001A52  6FBA               	movwf	main@estado& (0+255),b
  6497  001A54                     l7171:
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;main.c: 740:                             if(tecla == '#')
  6501  001A54  0E23               	movlw	35
  6502  001A56  19BC               	xorwf	main@tecla& (0+255),w,b
  6503  001A58  A4D8               	btfss	status,2,c
  6504  001A5A  EF31  F00D         	goto	u5731
  6505  001A5E  EF33  F00D         	goto	u5730
  6506  001A62                     u5731:
  6507  001A62  EFED  F00D         	goto	l7191
  6508  001A66                     u5730:
  6509  001A66                     
  6510                           ; BSR set to: 0
  6511                           ;main.c: 741:                                 estado = 92;
  6512  001A66  0E5C               	movlw	92
  6513  001A68  6FBA               	movwf	main@estado& (0+255),b
  6514  001A6A  EFED  F00D         	goto	l7191
  6515  001A6E                     l7175:
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;main.c: 745:                             fifo_add_control(num);
  6519  001A6E  51B4               	movf	main@num& (0+255),w,b
  6520  001A70  EC14  F01D         	call	_fifo_add_control
  6521  001A74  EF1E  F00A         	goto	l7009
  6522  001A78                     l7181:
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;main.c: 751:                             fifo_add_ciclo(ciclos);
  6526  001A78  C0B0  F031         	movff	main@ciclos,fifo_add_ciclo@ciclos
  6527  001A7C  C0B1  F032         	movff	main@ciclos+1,fifo_add_ciclo@ciclos+1
  6528  001A80  EC69  F020         	call	_fifo_add_ciclo	;wreg free
  6529  001A84                     
  6530                           ;main.c: 752:                             estado = 30;
  6531  001A84  0E1E               	movlw	30
  6532  001A86  0100               	movlb	0	; () banked
  6533  001A88  6FBA               	movwf	main@estado& (0+255),b
  6534  001A8A  EF66  F009         	goto	l6965
  6535  001A8E                     l621:
  6536  001A8E                     l7189:
  6537  001A8E  0100               	movlb	0	; () banked
  6538  001A90  51BA               	movf	main@estado& (0+255),w,b
  6539  001A92  6E59               	movwf	??_main^0,c
  6540  001A94  6A5A               	clrf	(??_main+1)^0,c
  6541                           
  6542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6543                           ; Switch size 1, requested type "simple"
  6544                           ; Number of cases is 1, Range of values is 0 to 0
  6545                           ; switch strategies available:
  6546                           ; Name         Instructions Cycles
  6547                           ; simple_byte            4     3 (average)
  6548                           ;	Chosen strategy is simple_byte
  6549  001A96  505A               	movf	(??_main+1)^0,w,c
  6550  001A98  0A00               	xorlw	0	; case 0
  6551  001A9A  B4D8               	btfsc	status,2,c
  6552  001A9C  EF52  F00D         	goto	l8015
  6553  001AA0  EFED  F00D         	goto	l7191
  6554  001AA4                     l8015:
  6555                           
  6556                           ; BSR set to: 0
  6557                           ; Switch size 1, requested type "simple"
  6558                           ; Number of cases is 38, Range of values is 0 to 100
  6559                           ; switch strategies available:
  6560                           ; Name         Instructions Cycles
  6561                           ; simple_byte          115    58 (average)
  6562                           ;	Chosen strategy is simple_byte
  6563  001AA4  5059               	movf	??_main^0,w,c
  6564  001AA6  0A00               	xorlw	0	; case 0
  6565  001AA8  B4D8               	btfsc	status,2,c
  6566  001AAA  EF93  F000         	goto	l6455
  6567  001AAE  0A01               	xorlw	1	; case 1
  6568  001AB0  B4D8               	btfsc	status,2,c
  6569  001AB2  EF0D  F001         	goto	l6505
  6570  001AB6  0A03               	xorlw	3	; case 2
  6571  001AB8  B4D8               	btfsc	status,2,c
  6572  001ABA  EF67  F001         	goto	l6529
  6573  001ABE  0A01               	xorlw	1	; case 3
  6574  001AC0  B4D8               	btfsc	status,2,c
  6575  001AC2  EFF2  F005         	goto	l6783
  6576  001AC6  0A05               	xorlw	5	; case 6
  6577  001AC8  B4D8               	btfsc	status,2,c
  6578  001ACA  EF32  F006         	goto	l6791
  6579  001ACE  0A01               	xorlw	1	; case 7
  6580  001AD0  B4D8               	btfsc	status,2,c
  6581  001AD2  EFC9  F006         	goto	l6835
  6582  001AD6  0A0F               	xorlw	15	; case 8
  6583  001AD8  B4D8               	btfsc	status,2,c
  6584  001ADA  EF79  F001         	goto	l6533
  6585  001ADE  0A01               	xorlw	1	; case 9
  6586  001AE0  B4D8               	btfsc	status,2,c
  6587  001AE2  EF9D  F001         	goto	l6541
  6588  001AE6  0A03               	xorlw	3	; case 10
  6589  001AE8  B4D8               	btfsc	status,2,c
  6590  001AEA  EF88  F007         	goto	l6877
  6591  001AEE  0A01               	xorlw	1	; case 11
  6592  001AF0  B4D8               	btfsc	status,2,c
  6593  001AF2  EFB6  F007         	goto	l6885
  6594  001AF6  0A05               	xorlw	5	; case 14
  6595  001AF8  B4D8               	btfsc	status,2,c
  6596  001AFA  EF48  F008         	goto	l6927
  6597  001AFE  0A1E               	xorlw	30	; case 16
  6598  001B00  B4D8               	btfsc	status,2,c
  6599  001B02  EF44  F008         	goto	l6923
  6600  001B06  0A0E               	xorlw	14	; case 30
  6601  001B08  B4D8               	btfsc	status,2,c
  6602  001B0A  EF9D  F008         	goto	l6935
  6603  001B0E  0A36               	xorlw	54	; case 40
  6604  001B10  B4D8               	btfsc	status,2,c
  6605  001B12  EF9C  F009         	goto	l6979
  6606  001B16  0A01               	xorlw	1	; case 41
  6607  001B18  B4D8               	btfsc	status,2,c
  6608  001B1A  EFE8  F009         	goto	l7001
  6609  001B1E  0A03               	xorlw	3	; case 42
  6610  001B20  B4D8               	btfsc	status,2,c
  6611  001B22  EF1B  F00A         	goto	l7007
  6612  001B26  0A1E               	xorlw	30	; case 52
  6613  001B28  B4D8               	btfsc	status,2,c
  6614  001B2A  EF2F  F00A         	goto	l7013
  6615  001B2E  0A01               	xorlw	1	; case 53
  6616  001B30  B4D8               	btfsc	status,2,c
  6617  001B32  EF92  F00A         	goto	l7039
  6618  001B36  0A03               	xorlw	3	; case 54
  6619  001B38  B4D8               	btfsc	status,2,c
  6620  001B3A  EF3C  F00D         	goto	l7181
  6621  001B3E  0A70               	xorlw	112	; case 70
  6622  001B40  B4D8               	btfsc	status,2,c
  6623  001B42  EFA3  F008         	goto	l6937
  6624  001B46  0A01               	xorlw	1	; case 71
  6625  001B48  B4D8               	btfsc	status,2,c
  6626  001B4A  EFAF  F001         	goto	l6545
  6627  001B4E  0A0F               	xorlw	15	; case 72
  6628  001B50  B4D8               	btfsc	status,2,c
  6629  001B52  EF53  F004         	goto	l6715
  6630  001B56  0A01               	xorlw	1	; case 73
  6631  001B58  B4D8               	btfsc	status,2,c
  6632  001B5A  EF78  F004         	goto	l6721
  6633  001B5E  0A03               	xorlw	3	; case 74
  6634  001B60  B4D8               	btfsc	status,2,c
  6635  001B62  EFEA  F00A         	goto	l7047
  6636  001B66  0A01               	xorlw	1	; case 75
  6637  001B68  B4D8               	btfsc	status,2,c
  6638  001B6A  EF3E  F00B         	goto	l7065
  6639  001B6E  0A07               	xorlw	7	; case 76
  6640  001B70  B4D8               	btfsc	status,2,c
  6641  001B72  EF63  F00B         	goto	l7071
  6642  001B76  0A01               	xorlw	1	; case 77
  6643  001B78  B4D8               	btfsc	status,2,c
  6644  001B7A  EFE8  F00B         	goto	l7087
  6645  001B7E  0A03               	xorlw	3	; case 78
  6646  001B80  B4D8               	btfsc	status,2,c
  6647  001B82  EFA9  F00C         	goto	l7143
  6648  001B86  0A1E               	xorlw	30	; case 80
  6649  001B88  B4D8               	btfsc	status,2,c
  6650  001B8A  EF12  F003         	goto	l6613
  6651  001B8E  0A01               	xorlw	1	; case 81
  6652  001B90  B4D8               	btfsc	status,2,c
  6653  001B92  EF35  F003         	goto	l6623
  6654  001B96  0A03               	xorlw	3	; case 82
  6655  001B98  B4D8               	btfsc	status,2,c
  6656  001B9A  EF47  F003         	goto	l6627
  6657  001B9E  0A06               	xorlw	6	; case 84
  6658  001BA0  B4D8               	btfsc	status,2,c
  6659  001BA2  EF6E  F003         	goto	l6639
  6660  001BA6  0A01               	xorlw	1	; case 85
  6661  001BA8  B4D8               	btfsc	status,2,c
  6662  001BAA  EFB5  F003         	goto	l6653
  6663  001BAE  0A03               	xorlw	3	; case 86
  6664  001BB0  B4D8               	btfsc	status,2,c
  6665  001BB2  EF44  F004         	goto	l6711
  6666  001BB6  0A0C               	xorlw	12	; case 90
  6667  001BB8  B4D8               	btfsc	status,2,c
  6668  001BBA  EFB8  F00C         	goto	l7147
  6669  001BBE  0A01               	xorlw	1	; case 91
  6670  001BC0  B4D8               	btfsc	status,2,c
  6671  001BC2  EFEB  F00C         	goto	l7153
  6672  001BC6  0A07               	xorlw	7	; case 92
  6673  001BC8  B4D8               	btfsc	status,2,c
  6674  001BCA  EF37  F00D         	goto	l7175
  6675  001BCE  0A38               	xorlw	56	; case 100
  6676  001BD0  B4D8               	btfsc	status,2,c
  6677  001BD2  EFE4  F001         	goto	l6559
  6678  001BD6  EFED  F00D         	goto	l7191
  6679  001BDA                     l7191:
  6680                           
  6681                           ;main.c: 757:         serialIOscan();
  6682  001BDA  EC16  F01C         	call	_serialIOscan	;wreg free
  6683                           
  6684                           ;main.c: 759:         switch(meAtuadores)
  6685  001BDE  EF30  F00F         	goto	l7269
  6686  001BE2                     l7193:
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;main.c: 764:                             resetIndicePassos();
  6690  001BE2  EC79  F020         	call	_resetIndicePassos	;wreg free
  6691                           
  6692                           ;main.c: 765:                             resetContCiclos();
  6693  001BE6  EC55  F020         	call	_resetContCiclos	;wreg free
  6694  001BEA                     l7195:
  6695                           
  6696                           ;main.c: 766:                             meAtuadores = 2;
  6697  001BEA  0E02               	movlw	2
  6698  001BEC  0100               	movlb	0	; () banked
  6699  001BEE  6FAF               	movwf	main@meAtuadores& (0+255),b
  6700                           
  6701                           ;main.c: 767:                             break;
  6702  001BF0  EF47  F00D         	goto	l7189
  6703  001BF4                     l7197:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;main.c: 770:                             auxPasso = fifo_lerPos(getIndicePassos());
  6707  001BF4  EC7F  F020         	call	_getIndicePassos	;wreg free
  6708  001BF8  EC38  F020         	call	_fifo_lerPos
  6709  001BFC  0100               	movlb	0	; () banked
  6710  001BFE  6FBB               	movwf	main@auxPasso& (0+255),b
  6711  001C00                     
  6712                           ; BSR set to: 0
  6713                           ;main.c: 772:                             if(botao == 1 || botao == 3 || botao == 0)
  6714  001C00  05B3               	decf	main@botao& (0+255),w,b
  6715  001C02  B4D8               	btfsc	status,2,c
  6716  001C04  EF06  F00E         	goto	u5741
  6717  001C08  EF08  F00E         	goto	u5740
  6718  001C0C                     u5741:
  6719  001C0C  EF19  F00E         	goto	l7205
  6720  001C10                     u5740:
  6721  001C10                     
  6722                           ; BSR set to: 0
  6723  001C10  0E03               	movlw	3
  6724  001C12  19B3               	xorwf	main@botao& (0+255),w,b
  6725  001C14  B4D8               	btfsc	status,2,c
  6726  001C16  EF0F  F00E         	goto	u5751
  6727  001C1A  EF11  F00E         	goto	u5750
  6728  001C1E                     u5751:
  6729  001C1E  EF19  F00E         	goto	l7205
  6730  001C22                     u5750:
  6731  001C22                     
  6732                           ; BSR set to: 0
  6733  001C22  51B3               	movf	main@botao& (0+255),w,b
  6734  001C24  A4D8               	btfss	status,2,c
  6735  001C26  EF17  F00E         	goto	u5761
  6736  001C2A  EF19  F00E         	goto	u5760
  6737  001C2E                     u5761:
  6738  001C2E  EF47  F00D         	goto	l621
  6739  001C32                     u5760:
  6740  001C32                     l7205:
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;main.c: 773:                                 meAtuadores = 3;
  6744  001C32  0E03               	movlw	3
  6745  001C34  6FAF               	movwf	main@meAtuadores& (0+255),b
  6746  001C36  EF47  F00D         	goto	l7189
  6747  001C3A                     l7207:
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;main.c: 777:                             if(auxPasso <= 0x64 || auxPasso == 0xFE)
  6751  001C3A  0E64               	movlw	100
  6752  001C3C  65BB               	cpfsgt	main@auxPasso& (0+255),b
  6753  001C3E  EF23  F00E         	goto	u5771
  6754  001C42  EF25  F00E         	goto	u5770
  6755  001C46                     u5771:
  6756  001C46  EF2E  F00E         	goto	l7211
  6757  001C4A                     u5770:
  6758  001C4A                     
  6759                           ; BSR set to: 0
  6760  001C4A  0EFE               	movlw	254
  6761  001C4C  19BB               	xorwf	main@auxPasso& (0+255),w,b
  6762  001C4E  A4D8               	btfss	status,2,c
  6763  001C50  EF2C  F00E         	goto	u5781
  6764  001C54  EF2E  F00E         	goto	u5780
  6765  001C58                     u5781:
  6766  001C58  EF61  F00E         	goto	l7217
  6767  001C5C                     u5780:
  6768  001C5C                     l7211:
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;main.c: 778:                             {;main.c: 779:                                
      +                           decodifica(&auxPasso);
  6772  001C5C  0EBB               	movlw	low main@auxPasso
  6773  001C5E  6E31               	movwf	decodifica@d^0,c
  6774  001C60  0E00               	movlw	high main@auxPasso
  6775  001C62  6E32               	movwf	(decodifica@d+1)^0,c
  6776  001C64  ECA9  F013         	call	_decodifica	;wreg free
  6777  001C68                     
  6778                           ;main.c: 780:                                 MCP4725((long)((4095L * auxPasso)/100));
  6779  001C68  0100               	movlb	0	; () banked
  6780  001C6A  51BB               	movf	main@auxPasso& (0+255),w,b
  6781  001C6C  6E31               	movwf	___lmul@multiplier^0,c
  6782  001C6E  6A32               	clrf	(___lmul@multiplier+1)^0,c
  6783  001C70  6A33               	clrf	(___lmul@multiplier+2)^0,c
  6784  001C72  6A34               	clrf	(___lmul@multiplier+3)^0,c
  6785  001C74  0EFF               	movlw	255
  6786  001C76  6E35               	movwf	___lmul@multiplicand^0,c
  6787  001C78  0E0F               	movlw	15
  6788  001C7A  6E36               	movwf	(___lmul@multiplicand+1)^0,c
  6789  001C7C  0E00               	movlw	0
  6790  001C7E  6E37               	movwf	(___lmul@multiplicand+2)^0,c
  6791  001C80  0E00               	movlw	0
  6792  001C82  6E38               	movwf	(___lmul@multiplicand+3)^0,c
  6793  001C84  EC25  F01B         	call	___lmul	;wreg free
  6794  001C88  C031  F03D         	movff	?___lmul,___aldiv@dividend
  6795  001C8C  C032  F03E         	movff	?___lmul+1,___aldiv@dividend+1
  6796  001C90  C033  F03F         	movff	?___lmul+2,___aldiv@dividend+2
  6797  001C94  C034  F040         	movff	?___lmul+3,___aldiv@dividend+3
  6798  001C98  0E64               	movlw	100
  6799  001C9A  6E41               	movwf	___aldiv@divisor^0,c
  6800  001C9C  0E00               	movlw	0
  6801  001C9E  6E42               	movwf	(___aldiv@divisor+1)^0,c
  6802  001CA0  0E00               	movlw	0
  6803  001CA2  6E43               	movwf	(___aldiv@divisor+2)^0,c
  6804  001CA4  0E00               	movlw	0
  6805  001CA6  6E44               	movwf	(___aldiv@divisor+3)^0,c
  6806  001CA8  ECE5  F014         	call	___aldiv	;wreg free
  6807  001CAC  C03D  F04B         	movff	?___aldiv,MCP4725@Vout
  6808  001CB0  C03E  F04C         	movff	?___aldiv+1,MCP4725@Vout+1
  6809  001CB4  EC9B  F01F         	call	_MCP4725	;wreg free
  6810  001CB8                     l7215:
  6811                           
  6812                           ;main.c: 781:                                 meAtuadores = 6;
  6813  001CB8  0E06               	movlw	6
  6814  001CBA  0100               	movlb	0	; () banked
  6815  001CBC  6FAF               	movwf	main@meAtuadores& (0+255),b
  6816                           
  6817                           ;main.c: 782:                             }
  6818  001CBE  EF47  F00D         	goto	l7189
  6819  001CC2                     l7217:
  6820                           
  6821                           ; BSR set to: 0
  6822  001CC2  0E64               	movlw	100
  6823  001CC4  65BB               	cpfsgt	main@auxPasso& (0+255),b
  6824  001CC6  EF67  F00E         	goto	u5791
  6825  001CCA  EF69  F00E         	goto	u5790
  6826  001CCE                     u5791:
  6827  001CCE  EF8C  F00E         	goto	l7227
  6828  001CD2                     u5790:
  6829  001CD2                     
  6830                           ; BSR set to: 0
  6831  001CD2  0EDD               	movlw	221
  6832  001CD4  61BB               	cpfslt	main@auxPasso& (0+255),b
  6833  001CD6  EF6F  F00E         	goto	u5801
  6834  001CDA  EF71  F00E         	goto	u5800
  6835  001CDE                     u5801:
  6836  001CDE  EF8C  F00E         	goto	l7227
  6837  001CE2                     u5800:
  6838  001CE2                     
  6839                           ; BSR set to: 0
  6840                           ;main.c: 784:                             {;main.c: 785:                                
      +                           auxPasso -= 0x64;
  6841  001CE2  0E64               	movlw	100
  6842  001CE4  5FBB               	subwf	main@auxPasso& (0+255),f,b
  6843  001CE6                     
  6844                           ; BSR set to: 0
  6845                           ;main.c: 786:                                 setT1(auxPasso * 1000 );
  6846  001CE6  C0BB  F031         	movff	main@auxPasso,___wmul@multiplier
  6847  001CEA  6A32               	clrf	(___wmul@multiplier+1)^0,c
  6848  001CEC  0E03               	movlw	3
  6849  001CEE  6E34               	movwf	(___wmul@multiplicand+1)^0,c
  6850  001CF0  0EE8               	movlw	232
  6851  001CF2  6E33               	movwf	___wmul@multiplicand^0,c
  6852  001CF4  EC65  F01F         	call	___wmul	;wreg free
  6853  001CF8  C031  F037         	movff	?___wmul,setT1@c
  6854  001CFC  C032  F038         	movff	?___wmul+1,setT1@c+1
  6855  001D00  0E00               	movlw	0
  6856  001D02  BE38               	btfsc	(setT1@c+1)^0,7,c
  6857  001D04  0EFF               	movlw	-1
  6858  001D06  6E39               	movwf	(setT1@c+2)^0,c
  6859  001D08  6E3A               	movwf	(setT1@c+3)^0,c
  6860  001D0A  ECF4  F01F         	call	_setT1	;wreg free
  6861  001D0E                     
  6862                           ;main.c: 787:                                 meAtuadores = 4;
  6863  001D0E  0E04               	movlw	4
  6864  001D10  0100               	movlb	0	; () banked
  6865  001D12  6FAF               	movwf	main@meAtuadores& (0+255),b
  6866                           
  6867                           ;main.c: 788:                             }
  6868  001D14  EF47  F00D         	goto	l7189
  6869  001D18                     l7227:
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 790:                             {;main.c: 791:                                
      +                           decodifica(&auxPasso);
  6873  001D18  0EBB               	movlw	low main@auxPasso
  6874  001D1A  6E31               	movwf	decodifica@d^0,c
  6875  001D1C  0E00               	movlw	high main@auxPasso
  6876  001D1E  6E32               	movwf	(decodifica@d+1)^0,c
  6877  001D20  ECA9  F013         	call	_decodifica	;wreg free
  6878  001D24                     
  6879                           ;main.c: 792:                                 wifi.cipsend(1,auxPasso);
  6880  001D24  0E01               	movlw	1
  6881  001D26  6E34               	movwf	Wifi_cipsend@tam^0,c
  6882  001D28  0E00               	movlw	0
  6883  001D2A  6E35               	movwf	(Wifi_cipsend@tam+1)^0,c
  6884  001D2C  0100               	movlb	0	; () banked
  6885  001D2E  51BB               	movf	main@auxPasso& (0+255),w,b
  6886  001D30  6E59               	movwf	??_main^0,c
  6887  001D32  6A5A               	clrf	(??_main+1)^0,c
  6888  001D34  C059  F036         	movff	??_main,Wifi_cipsend@msg
  6889  001D38  C05A  F037         	movff	??_main+1,Wifi_cipsend@msg+1
  6890  001D3C  EE20  F0CF         	lfsr	2,_wifi+18
  6891  001D40  D802               	call	u5818
  6892  001D42  EFAD  F00E         	goto	u5819
  6893  001D46                     u5818:
  6894  001D46  0005               	push	
  6895  001D48  6EFA               	movwf	pclath,c
  6896  001D4A  50DE               	movf	postinc2,w,c
  6897  001D4C  6EFD               	movwf	tosl,c
  6898  001D4E  50DE               	movf	postinc2,w,c
  6899  001D50  6EFE               	movwf	tosh,c
  6900  001D52  50F8               	movf	tblptru,w,c
  6901  001D54  6EFF               	movwf	tosu,c
  6902  001D56  50FA               	movf	pclath,w,c
  6903  001D58  0012               	return		;indir
  6904  001D5A                     u5819:
  6905  001D5A                     
  6906                           ;main.c: 793:                                 set_passo(auxPasso, vetorOut);
  6907  001D5A  0EAE               	movlw	low main@vetorOut
  6908  001D5C  6E31               	movwf	set_passo@ptr^0,c
  6909  001D5E  0E00               	movlw	high main@vetorOut
  6910  001D60  6E32               	movwf	(set_passo@ptr+1)^0,c
  6911  001D62  0100               	movlb	0	; () banked
  6912  001D64  51BB               	movf	main@auxPasso& (0+255),w,b
  6913  001D66  ECCB  F016         	call	_set_passo
  6914  001D6A                     
  6915                           ;main.c: 794:                                 meAtuadores = 5;
  6916  001D6A  0E05               	movlw	5
  6917  001D6C  0100               	movlb	0	; () banked
  6918  001D6E  6FAF               	movwf	main@meAtuadores& (0+255),b
  6919  001D70  EF47  F00D         	goto	l7189
  6920  001D74                     l7235:
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;main.c: 799:                             if(!statusT1())
  6924  001D74  EC26  F020         	call	_statusT1	;wreg free
  6925  001D78  5031               	movf	?_statusT1^0,w,c
  6926  001D7A  1032               	iorwf	(?_statusT1+1)^0,w,c
  6927  001D7C  1033               	iorwf	(?_statusT1+2)^0,w,c
  6928  001D7E  1034               	iorwf	(?_statusT1+3)^0,w,c
  6929  001D80  A4D8               	btfss	status,2,c
  6930  001D82  EFC5  F00E         	goto	u5821
  6931  001D86  EFC7  F00E         	goto	u5820
  6932  001D8A                     u5821:
  6933  001D8A  EF47  F00D         	goto	l621
  6934  001D8E                     u5820:
  6935  001D8E  EF5C  F00E         	goto	l7215
  6936  001D92                     l7239:
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;main.c: 804:                             if(ler_sensor(auxPasso, vetorIn))
  6940  001D92  0EAD               	movlw	low main@vetorIn
  6941  001D94  6E31               	movwf	ler_sensor@ptr^0,c
  6942  001D96  0E00               	movlw	high main@vetorIn
  6943  001D98  6E32               	movwf	(ler_sensor@ptr+1)^0,c
  6944  001D9A  51BB               	movf	main@auxPasso& (0+255),w,b
  6945  001D9C  ECE3  F015         	call	_ler_sensor
  6946  001DA0  0900               	iorlw	0
  6947  001DA2  B4D8               	btfsc	status,2,c
  6948  001DA4  EFD6  F00E         	goto	u5831
  6949  001DA8  EFD8  F00E         	goto	u5830
  6950  001DAC                     u5831:
  6951  001DAC  EF47  F00D         	goto	l621
  6952  001DB0                     u5830:
  6953  001DB0  EF5C  F00E         	goto	l7215
  6954  001DB4                     l7243:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;main.c: 809:                             if(botao == 3)
  6958  001DB4  0E03               	movlw	3
  6959  001DB6  19B3               	xorwf	main@botao& (0+255),w,b
  6960  001DB8  A4D8               	btfss	status,2,c
  6961  001DBA  EFE1  F00E         	goto	u5841
  6962  001DBE  EFE3  F00E         	goto	u5840
  6963  001DC2                     u5841:
  6964  001DC2  EFE5  F00E         	goto	l894
  6965  001DC6                     u5840:
  6966  001DC6                     
  6967                           ; BSR set to: 0
  6968                           ;main.c: 810:                             {;main.c: 811:                                
      +                           botao = 2;
  6969  001DC6  0E02               	movlw	2
  6970  001DC8  6FB3               	movwf	main@botao& (0+255),b
  6971  001DCA                     l894:
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;main.c: 813:                             meAtuadores = 7;
  6975  001DCA  0E07               	movlw	7
  6976  001DCC  6FAF               	movwf	main@meAtuadores& (0+255),b
  6977                           
  6978                           ;main.c: 815:                             break;
  6979  001DCE  EF47  F00D         	goto	l7189
  6980  001DD2                     l7247:
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;main.c: 818:                             addIndicePassos();
  6984  001DD2  ECDE  F01F         	call	_addIndicePassos	;wreg free
  6985                           
  6986                           ;main.c: 819:                             if(getIndicePassos() < fifo_indice())
  6987  001DD6  EC7F  F020         	call	_getIndicePassos	;wreg free
  6988  001DDA  6E59               	movwf	??_main^0,c
  6989  001DDC  EC83  F020         	call	_fifo_indice	;wreg free
  6990  001DE0  5C59               	subwf	??_main^0,w,c
  6991  001DE2  B0D8               	btfsc	status,0,c
  6992  001DE4  EFF6  F00E         	goto	u5851
  6993  001DE8  EFF8  F00E         	goto	u5850
  6994  001DEC                     u5851:
  6995  001DEC  EFFA  F00E         	goto	l7251
  6996  001DF0                     u5850:
  6997  001DF0  EFF5  F00D         	goto	l7195
  6998  001DF4                     l7251:
  6999                           
  7000                           ;main.c: 822:                             {;main.c: 823:                                
      +                           addContCiclos();
  7001  001DF4  EC7C  F020         	call	_addContCiclos	;wreg free
  7002  001DF8                     
  7003                           ;main.c: 824:                                 meAtuadores = 8;
  7004  001DF8  0E08               	movlw	8
  7005  001DFA  0100               	movlb	0	; () banked
  7006  001DFC  6FAF               	movwf	main@meAtuadores& (0+255),b
  7007  001DFE  EF47  F00D         	goto	l7189
  7008  001E02                     l7255:
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;main.c: 829:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
  7012  001E02  51B3               	movf	main@botao& (0+255),w,b
  7013  001E04  B4D8               	btfsc	status,2,c
  7014  001E06  EF07  F00F         	goto	u5861
  7015  001E0A  EF09  F00F         	goto	u5860
  7016  001E0E                     u5861:
  7017  001E0E  EF2B  F00F         	goto	l7265
  7018  001E12                     u5860:
  7019  001E12                     
  7020                           ; BSR set to: 0
  7021  001E12  EC5F  F020         	call	_getContCiclos	;wreg free
  7022  001E16  C031  F059         	movff	?_getContCiclos,??_main
  7023  001E1A  C032  F05A         	movff	?_getContCiclos+1,??_main+1
  7024  001E1E  ECAC  F01F         	call	_getCiclos	;wreg free
  7025  001E22  5031               	movf	?_getCiclos^0,w,c
  7026  001E24  5C59               	subwf	??_main^0,w,c
  7027  001E26  5032               	movf	(?_getCiclos+1)^0,w,c
  7028  001E28  585A               	subwfb	(??_main+1)^0,w,c
  7029  001E2A  A0D8               	btfss	status,0,c
  7030  001E2C  EF1A  F00F         	goto	u5871
  7031  001E30  EF1C  F00F         	goto	u5870
  7032  001E34                     u5871:
  7033  001E34  EF27  F00F         	goto	l7261
  7034  001E38                     u5870:
  7035  001E38  ECAC  F01F         	call	_getCiclos	;wreg free
  7036  001E3C  5031               	movf	?_getCiclos^0,w,c
  7037  001E3E  1032               	iorwf	(?_getCiclos+1)^0,w,c
  7038  001E40  A4D8               	btfss	status,2,c
  7039  001E42  EF25  F00F         	goto	u5881
  7040  001E46  EF27  F00F         	goto	u5880
  7041  001E4A                     u5881:
  7042  001E4A  EF2B  F00F         	goto	l7265
  7043  001E4E                     u5880:
  7044  001E4E                     l7261:
  7045                           
  7046                           ;main.c: 830:                             {;main.c: 831:                                
      +                           resetIndicePassos();
  7047  001E4E  EC79  F020         	call	_resetIndicePassos	;wreg free
  7048  001E52  EFF5  F00D         	goto	l7195
  7049  001E56                     l7265:
  7050                           
  7051                           ;main.c: 835:                             {;main.c: 836:                                
      +                           meAtuadores = 0;
  7052  001E56  0E00               	movlw	0
  7053  001E58  0100               	movlb	0	; () banked
  7054  001E5A  6FAF               	movwf	main@meAtuadores& (0+255),b
  7055  001E5C  EF47  F00D         	goto	l7189
  7056  001E60                     l7269:
  7057  001E60  0100               	movlb	0	; () banked
  7058  001E62  51AF               	movf	main@meAtuadores& (0+255),w,b
  7059  001E64  6E59               	movwf	??_main^0,c
  7060  001E66  6A5A               	clrf	(??_main+1)^0,c
  7061                           
  7062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7063                           ; Switch size 1, requested type "simple"
  7064                           ; Number of cases is 1, Range of values is 0 to 0
  7065                           ; switch strategies available:
  7066                           ; Name         Instructions Cycles
  7067                           ; simple_byte            4     3 (average)
  7068                           ;	Chosen strategy is simple_byte
  7069  001E68  505A               	movf	(??_main+1)^0,w,c
  7070  001E6A  0A00               	xorlw	0	; case 0
  7071  001E6C  B4D8               	btfsc	status,2,c
  7072  001E6E  EF3B  F00F         	goto	l8017
  7073  001E72  EF47  F00D         	goto	l7189
  7074  001E76                     l8017:
  7075                           
  7076                           ; BSR set to: 0
  7077                           ; Switch size 1, requested type "simple"
  7078                           ; Number of cases is 9, Range of values is 0 to 8
  7079                           ; switch strategies available:
  7080                           ; Name         Instructions Cycles
  7081                           ; simple_byte           28    15 (average)
  7082                           ;	Chosen strategy is simple_byte
  7083  001E76  5059               	movf	??_main^0,w,c
  7084  001E78  0A00               	xorlw	0	; case 0
  7085  001E7A  B4D8               	btfsc	status,2,c
  7086  001E7C  EF47  F00D         	goto	l7189
  7087  001E80  0A01               	xorlw	1	; case 1
  7088  001E82  B4D8               	btfsc	status,2,c
  7089  001E84  EFF1  F00D         	goto	l7193
  7090  001E88  0A03               	xorlw	3	; case 2
  7091  001E8A  B4D8               	btfsc	status,2,c
  7092  001E8C  EFFA  F00D         	goto	l7197
  7093  001E90  0A01               	xorlw	1	; case 3
  7094  001E92  B4D8               	btfsc	status,2,c
  7095  001E94  EF1D  F00E         	goto	l7207
  7096  001E98  0A07               	xorlw	7	; case 4
  7097  001E9A  B4D8               	btfsc	status,2,c
  7098  001E9C  EFBA  F00E         	goto	l7235
  7099  001EA0  0A01               	xorlw	1	; case 5
  7100  001EA2  B4D8               	btfsc	status,2,c
  7101  001EA4  EFC9  F00E         	goto	l7239
  7102  001EA8  0A03               	xorlw	3	; case 6
  7103  001EAA  B4D8               	btfsc	status,2,c
  7104  001EAC  EFDA  F00E         	goto	l7243
  7105  001EB0  0A01               	xorlw	1	; case 7
  7106  001EB2  B4D8               	btfsc	status,2,c
  7107  001EB4  EFE9  F00E         	goto	l7247
  7108  001EB8  0A0F               	xorlw	15	; case 8
  7109  001EBA  B4D8               	btfsc	status,2,c
  7110  001EBC  EF01  F00F         	goto	l7255
  7111  001EC0  EF47  F00D         	goto	l7189
  7112  001EC4  EF07  F000         	goto	start
  7113  001EC8                     __end_of_main:
  7114                           	callstack 0
  7115                           
  7116 ;; *************** function _wifi_init *****************
  7117 ;; Defined at:
  7118 ;;		line 13 in file "wifi.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  br              4   21[COMRAM] long 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7132 ;;      Params:         4       0       0       0       0       0       0       0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7135 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7136 ;;Total ram usage:        4 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    4
  7139 ;; This function calls:
  7140 ;;		_initEUSART
  7141 ;; This function is called by:
  7142 ;;		_main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text1
  7147  003D5E                     __ptext1:
  7148                           	callstack 0
  7149  003D5E                     _wifi_init:
  7150                           	callstack 26
  7151  003D5E                     
  7152                           ;wifi.c: 13: void wifi_init( long br);wifi.c: 14: {;wifi.c: 15:     eusart.init(br);
  7153  003D5E  C046  F03E         	movff	wifi_init@br,initEUSART@baudRate
  7154  003D62  C047  F03F         	movff	wifi_init@br+1,initEUSART@baudRate+1
  7155  003D66  C048  F040         	movff	wifi_init@br+2,initEUSART@baudRate+2
  7156  003D6A  C049  F041         	movff	wifi_init@br+3,initEUSART@baudRate+3
  7157  003D6E  EE20  F0DD         	lfsr	2,_eusart+12
  7158  003D72  D802               	call	u4438
  7159  003D74  EFC6  F01E         	goto	u4439
  7160  003D78                     u4438:
  7161  003D78  0005               	push	
  7162  003D7A  6EFA               	movwf	pclath,c
  7163  003D7C  50DE               	movf	postinc2,w,c
  7164  003D7E  6EFD               	movwf	tosl,c
  7165  003D80  50DE               	movf	postinc2,w,c
  7166  003D82  6EFE               	movwf	tosh,c
  7167  003D84  50F8               	movf	tblptru,w,c
  7168  003D86  6EFF               	movwf	tosu,c
  7169  003D88  50FA               	movf	pclath,w,c
  7170  003D8A  0012               	return		;indir
  7171  003D8C                     u4439:
  7172  003D8C  0012               	return		;funcret
  7173  003D8E                     __end_of_wifi_init:
  7174                           	callstack 0
  7175                           
  7176 ;; *************** function _initEUSART *****************
  7177 ;; Defined at:
  7178 ;;		line 137 in file "eusart.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  baudRate        4   13[COMRAM] unsigned long 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, status,0, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7192 ;;      Params:         4       0       0       0       0       0       0       0       0
  7193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7194 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7195 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7196 ;;Total ram usage:        8 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    3
  7199 ;; This function calls:
  7200 ;;		___lldiv
  7201 ;; This function is called by:
  7202 ;;		_wifi_init
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           	psect	text2
  7207  0035DC                     __ptext2:
  7208                           	callstack 0
  7209  0035DC                     _initEUSART:
  7210                           	callstack 26
  7211  0035DC                     
  7212                           ;eusart.c: 137: void initEUSART( unsigned long baudRate );eusart.c: 138: {;eusart.c: 139
      +                          :     TRISCbits.TRISC6 = 0;
  7213  0035DC  9C94               	bcf	148,6,c	;volatile
  7214                           
  7215                           ;eusart.c: 140:     TRISCbits.TRISC7 = 1;
  7216  0035DE  8E94               	bsf	148,7,c	;volatile
  7217                           
  7218                           ;eusart.c: 141:     INTCONbits.GIE = 0;
  7219  0035E0  9EF2               	bcf	242,7,c	;volatile
  7220  0035E2                     
  7221                           ;eusart.c: 144:     SPBRbits.u16 = (unsigned int)( (20000000 / (baudRate<<2)) - 1);
  7222  0035E2  0E00               	movlw	0
  7223  0035E4  6E31               	movwf	___lldiv@dividend^0,c
  7224  0035E6  0E2D               	movlw	45
  7225  0035E8  6E32               	movwf	(___lldiv@dividend+1)^0,c
  7226  0035EA  0E31               	movlw	49
  7227  0035EC  6E33               	movwf	(___lldiv@dividend+2)^0,c
  7228  0035EE  0E01               	movlw	1
  7229  0035F0  6E34               	movwf	(___lldiv@dividend+3)^0,c
  7230  0035F2  C03E  F042         	movff	initEUSART@baudRate,??_initEUSART
  7231  0035F6  C03F  F043         	movff	initEUSART@baudRate+1,??_initEUSART+1
  7232  0035FA  C040  F044         	movff	initEUSART@baudRate+2,??_initEUSART+2
  7233  0035FE  C041  F045         	movff	initEUSART@baudRate+3,??_initEUSART+3
  7234  003602  0E02               	movlw	2
  7235  003604                     u3785:
  7236  003604  90D8               	bcf	status,0,c
  7237  003606  3642               	rlcf	??_initEUSART^0,f,c
  7238  003608  3643               	rlcf	(??_initEUSART+1)^0,f,c
  7239  00360A  3644               	rlcf	(??_initEUSART+2)^0,f,c
  7240  00360C  3645               	rlcf	(??_initEUSART+3)^0,f,c
  7241  00360E  2EE8               	decfsz	wreg,f,c
  7242  003610  EF02  F01B         	goto	u3785
  7243  003614  C042  F035         	movff	??_initEUSART,___lldiv@divisor
  7244  003618  C043  F036         	movff	??_initEUSART+1,___lldiv@divisor+1
  7245  00361C  C044  F037         	movff	??_initEUSART+2,___lldiv@divisor+2
  7246  003620  C045  F038         	movff	??_initEUSART+3,___lldiv@divisor+3
  7247  003624  ECF5  F018         	call	___lldiv	;wreg free
  7248  003628  0EFF               	movlw	255
  7249  00362A  2431               	addwf	?___lldiv^0,w,c
  7250  00362C  6EAF               	movwf	175,c	;volatile
  7251  00362E  0EFF               	movlw	255
  7252  003630  2032               	addwfc	(?___lldiv+1)^0,w,c
  7253  003632  6EB0               	movwf	176,c	;volatile
  7254  003634                     
  7255                           ;eusart.c: 148:     TXSTAbits.SYNC = 0;
  7256  003634  98AC               	bcf	172,4,c	;volatile
  7257  003636                     
  7258                           ;eusart.c: 149:     BAUDCONbits.BRG16 = 1;
  7259  003636  86B8               	bsf	184,3,c	;volatile
  7260  003638                     
  7261                           ;eusart.c: 150:     TXSTAbits.BRGH = 1;
  7262  003638  84AC               	bsf	172,2,c	;volatile
  7263  00363A                     
  7264                           ;eusart.c: 152:     RCSTAbits.SPEN = 1;
  7265  00363A  8EAB               	bsf	171,7,c	;volatile
  7266  00363C                     
  7267                           ;eusart.c: 153:     TXSTAbits.TXEN = 1;
  7268  00363C  8AAC               	bsf	172,5,c	;volatile
  7269  00363E                     
  7270                           ;eusart.c: 154:     RCSTAbits.CREN = 1;
  7271  00363E  88AB               	bsf	171,4,c	;volatile
  7272  003640                     
  7273                           ;eusart.c: 156:     PIE1bits.RCIE = 1;
  7274  003640  8A9D               	bsf	157,5,c	;volatile
  7275  003642                     
  7276                           ;eusart.c: 157:     PIE1bits.TXIE = 0;
  7277  003642  989D               	bcf	157,4,c	;volatile
  7278  003644                     
  7279                           ;eusart.c: 158:     INTCONbits.PEIE = 1;
  7280  003644  8CF2               	bsf	242,6,c	;volatile
  7281  003646                     
  7282                           ;eusart.c: 159:     INTCONbits.GIE = 1;
  7283  003646  8EF2               	bsf	242,7,c	;volatile
  7284  003648  0012               	return		;funcret
  7285  00364A                     __end_of_initEUSART:
  7286                           	callstack 0
  7287                           
  7288 ;; *************** function _timer1_init *****************
  7289 ;; Defined at:
  7290 ;;		line 16 in file "timer1.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, status,2
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7307 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7308 ;;Total ram usage:        0 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    2
  7311 ;; This function calls:
  7312 ;;		Nothing
  7313 ;; This function is called by:
  7314 ;;		_main
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text3
  7319  003F76                     __ptext3:
  7320                           	callstack 0
  7321  003F76                     _timer1_init:
  7322                           	callstack 28
  7323  003F76                     
  7324                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  7325  003F76  92CD               	bcf	205,1,c	;volatile
  7326  003F78                     
  7327                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  7328  003F78  0E30               	movlw	48
  7329  003F7A  12CD               	iorwf	205,f,c	;volatile
  7330  003F7C                     
  7331                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  7332  003F7C  84CD               	bsf	205,2,c	;volatile
  7333                           
  7334                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  7335  003F7E  0EFD               	movlw	253
  7336  003F80  6ECF               	movwf	207,c	;volatile
  7337                           
  7338                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  7339  003F82  0E8F               	movlw	143
  7340  003F84  6ECE               	movwf	206,c	;volatile
  7341  003F86                     
  7342                           ;timer1.c: 23:     T1CONbits.T1RUN = 0;
  7343  003F86  9CCD               	bcf	205,6,c	;volatile
  7344  003F88                     
  7345                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  7346  003F88  809D               	bsf	157,0,c	;volatile
  7347  003F8A                     
  7348                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  7349  003F8A  8CF2               	bsf	242,6,c	;volatile
  7350  003F8C                     
  7351                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  7352  003F8C  8EF2               	bsf	242,7,c	;volatile
  7353  003F8E  0012               	return		;funcret
  7354  003F90                     __end_of_timer1_init:
  7355                           	callstack 0
  7356                           
  7357 ;; *************** function _teclado_init *****************
  7358 ;; Defined at:
  7359 ;;		line 29 in file "teclado.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7376 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7377 ;;Total ram usage:        0 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    2
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_main
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text4
  7388  0040A0                     __ptext4:
  7389                           	callstack 0
  7390  0040A0                     _teclado_init:
  7391                           	callstack 28
  7392  0040A0                     
  7393                           ;teclado.c: 31:     PORTD = 0x00;
  7394  0040A0  0E00               	movlw	0
  7395  0040A2  6E83               	movwf	131,c	;volatile
  7396                           
  7397                           ;teclado.c: 32:     TRISD = 0xF0;
  7398  0040A4  0EF0               	movlw	240
  7399  0040A6  6E95               	movwf	149,c	;volatile
  7400  0040A8  0012               	return		;funcret
  7401  0040AA                     __end_of_teclado_init:
  7402                           	callstack 0
  7403                           
  7404 ;; *************** function _teclado_borda *****************
  7405 ;; Defined at:
  7406 ;;		line 92 in file "teclado.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  tecla           1    6[COMRAM] unsigned char 
  7411 ;;  aux             1    5[COMRAM] unsigned char 
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      unsigned char 
  7414 ;; Registers used:
  7415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0
  7422 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7424 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7425 ;;Total ram usage:        2 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    3
  7428 ;; This function calls:
  7429 ;;		_teclado_scan
  7430 ;; This function is called by:
  7431 ;;		_main
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           	psect	text5
  7436  003CF2                     __ptext5:
  7437                           	callstack 0
  7438  003CF2                     _teclado_borda:
  7439                           	callstack 27
  7440  003CF2                     
  7441                           ;teclado.c: 95:     char aux = 0;
  7442  003CF2  0E00               	movlw	0
  7443  003CF4  6E36               	movwf	teclado_borda@aux^0,c
  7444  003CF6                     
  7445                           ;teclado.c: 97:     tecla = teclado_scan();
  7446  003CF6  EC4E  F018         	call	_teclado_scan	;wreg free
  7447  003CFA  6E37               	movwf	teclado_borda@tecla^0,c
  7448  003CFC                     
  7449                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  7450  003CFC  5037               	movf	teclado_borda@tecla^0,w,c
  7451  003CFE  B4D8               	btfsc	status,2,c
  7452  003D00  EF84  F01E         	goto	u4391
  7453  003D04  EF86  F01E         	goto	u4390
  7454  003D08                     u4391:
  7455  003D08  EF90  F01E         	goto	l1029
  7456  003D0C                     u4390:
  7457  003D0C  501B               	movf	_teclaAnterior^0,w,c
  7458  003D0E  A4D8               	btfss	status,2,c
  7459  003D10  EF8C  F01E         	goto	u4401
  7460  003D14  EF8E  F01E         	goto	u4400
  7461  003D18                     u4401:
  7462  003D18  EF90  F01E         	goto	l1029
  7463  003D1C                     u4400:
  7464  003D1C                     
  7465                           ;teclado.c: 100:         aux = tecla;
  7466  003D1C  C037  F036         	movff	teclado_borda@tecla,teclado_borda@aux
  7467  003D20                     l1029:
  7468                           
  7469                           ;teclado.c: 102:     teclaAnterior = tecla;
  7470  003D20  C037  F01B         	movff	teclado_borda@tecla,_teclaAnterior
  7471  003D24                     
  7472                           ;teclado.c: 104:     return(aux);
  7473  003D24  5036               	movf	teclado_borda@aux^0,w,c
  7474  003D26  0012               	return		;funcret
  7475  003D28                     __end_of_teclado_borda:
  7476                           	callstack 0
  7477                           
  7478 ;; *************** function _teclado_scan *****************
  7479 ;; Defined at:
  7480 ;;		line 55 in file "teclado.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;		None
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  c               1    4[COMRAM] unsigned char 
  7485 ;;  l               1    3[COMRAM] unsigned char 
  7486 ;;  tecla           1    2[COMRAM] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      unsigned char 
  7489 ;; Registers used:
  7490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7496 ;;      Params:         0       0       0       0       0       0       0       0       0
  7497 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7498 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7499 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7500 ;;Total ram usage:        5 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    2
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_teclado_borda
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text6
  7511  00309C                     __ptext6:
  7512                           	callstack 0
  7513  00309C                     _teclado_scan:
  7514                           	callstack 27
  7515  00309C                     
  7516                           ;teclado.c: 57:    char tecla = 0;
  7517  00309C  0E00               	movlw	0
  7518  00309E  6E33               	movwf	teclado_scan@tecla^0,c
  7519                           
  7520                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  7521  0030A0  0E00               	movlw	0
  7522  0030A2  6E34               	movwf	teclado_scan@l^0,c
  7523  0030A4                     l5505:
  7524  0030A4  0E03               	movlw	3
  7525  0030A6  6434               	cpfsgt	teclado_scan@l^0,c
  7526  0030A8  EF58  F018         	goto	u3731
  7527  0030AC  EF5A  F018         	goto	u3730
  7528  0030B0                     u3731:
  7529  0030B0  EF5C  F018         	goto	l5509
  7530  0030B4                     u3730:
  7531  0030B4  EFA0  F018         	goto	l5529
  7532  0030B8                     l5509:
  7533                           
  7534                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  7535  0030B8  C034  F031         	movff	teclado_scan@l,??_teclado_scan
  7536  0030BC  0E01               	movlw	1
  7537  0030BE  6E32               	movwf	(??_teclado_scan+1)^0,c
  7538  0030C0  2A31               	incf	??_teclado_scan^0,f,c
  7539  0030C2  EF65  F018         	goto	u3744
  7540  0030C6                     u3745:
  7541  0030C6  90D8               	bcf	status,0,c
  7542  0030C8  3632               	rlcf	(??_teclado_scan+1)^0,f,c
  7543  0030CA                     u3744:
  7544  0030CA  2E31               	decfsz	??_teclado_scan^0,f,c
  7545  0030CC  EF63  F018         	goto	u3745
  7546  0030D0  5032               	movf	(??_teclado_scan+1)^0,w,c
  7547  0030D2  6E83               	movwf	131,c	;volatile
  7548  0030D4                     
  7549                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  7550  0030D4  0E00               	movlw	0
  7551  0030D6  6E35               	movwf	teclado_scan@c^0,c
  7552  0030D8                     l5517:
  7553                           
  7554                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  7555  0030D8  C035  F031         	movff	teclado_scan@c,??_teclado_scan
  7556  0030DC  0E10               	movlw	16
  7557  0030DE  6E32               	movwf	(??_teclado_scan+1)^0,c
  7558  0030E0  2A31               	incf	??_teclado_scan^0,f,c
  7559  0030E2  EF75  F018         	goto	u3754
  7560  0030E6                     u3755:
  7561  0030E6  90D8               	bcf	status,0,c
  7562  0030E8  3632               	rlcf	(??_teclado_scan+1)^0,f,c
  7563  0030EA                     u3754:
  7564  0030EA  2E31               	decfsz	??_teclado_scan^0,f,c
  7565  0030EC  EF73  F018         	goto	u3755
  7566  0030F0  5032               	movf	(??_teclado_scan+1)^0,w,c
  7567  0030F2  1483               	andwf	131,w,c	;volatile
  7568  0030F4  0900               	iorlw	0
  7569  0030F6  B4D8               	btfsc	status,2,c
  7570  0030F8  EF80  F018         	goto	u3761
  7571  0030FC  EF82  F018         	goto	u3760
  7572  003100                     u3761:
  7573  003100  EF94  F018         	goto	l5521
  7574  003104                     u3760:
  7575  003104                     
  7576                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  7577  003104  5034               	movf	teclado_scan@l^0,w,c
  7578  003106  0D04               	mullw	4
  7579  003108  0E46               	movlw	low _teclas
  7580  00310A  6E31               	movwf	??_teclado_scan^0,c
  7581  00310C  0E01               	movlw	high _teclas
  7582  00310E  6E32               	movwf	(??_teclado_scan+1)^0,c
  7583  003110  50F3               	movf	243,w,c
  7584  003112  2631               	addwf	??_teclado_scan^0,f,c
  7585  003114  50F4               	movf	244,w,c
  7586  003116  2232               	addwfc	(??_teclado_scan+1)^0,f,c
  7587  003118  5035               	movf	teclado_scan@c^0,w,c
  7588  00311A  2431               	addwf	??_teclado_scan^0,w,c
  7589  00311C  6ED9               	movwf	fsr2l,c
  7590  00311E  0E00               	movlw	0
  7591  003120  2032               	addwfc	(??_teclado_scan+1)^0,w,c
  7592  003122  6EDA               	movwf	fsr2h,c
  7593  003124  50DF               	movf	indf2,w,c
  7594  003126  6E33               	movwf	teclado_scan@tecla^0,c
  7595  003128                     l5521:
  7596                           
  7597                           ;teclado.c: 85:         }
  7598  003128  2A35               	incf	teclado_scan@c^0,f,c
  7599  00312A  0E03               	movlw	3
  7600  00312C  6435               	cpfsgt	teclado_scan@c^0,c
  7601  00312E  EF9B  F018         	goto	u3771
  7602  003132  EF9D  F018         	goto	u3770
  7603  003136                     u3771:
  7604  003136  EF6C  F018         	goto	l5517
  7605  00313A                     u3770:
  7606  00313A                     
  7607                           ;teclado.c: 86:     }
  7608  00313A  2A34               	incf	teclado_scan@l^0,f,c
  7609  00313C  EF52  F018         	goto	l5505
  7610  003140                     l5529:
  7611                           
  7612                           ;teclado.c: 87:     return( tecla );
  7613  003140  5033               	movf	teclado_scan@tecla^0,w,c
  7614  003142  0012               	return		;funcret
  7615  003144                     __end_of_teclado_scan:
  7616                           	callstack 0
  7617                           
  7618 ;; *************** function _statusT1 *****************
  7619 ;; Defined at:
  7620 ;;		line 38 in file "timer1.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;		None
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;		None
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  4    0[COMRAM] unsigned long 
  7627 ;; Registers used:
  7628 ;;		None
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7634 ;;      Params:         4       0       0       0       0       0       0       0       0
  7635 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7637 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7638 ;;Total ram usage:        4 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    2
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_main
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text7
  7649  00404C                     __ptext7:
  7650                           	callstack 0
  7651  00404C                     _statusT1:
  7652                           	callstack 28
  7653  00404C                     
  7654                           ;timer1.c: 40:     return( t1cont );
  7655  00404C  C00B  F031         	movff	_t1cont,?_statusT1
  7656  004050  C00C  F032         	movff	_t1cont+1,?_statusT1+1
  7657  004054  C00D  F033         	movff	_t1cont+2,?_statusT1+2
  7658  004058  C00E  F034         	movff	_t1cont+3,?_statusT1+3
  7659  00405C  0012               	return		;funcret
  7660  00405E                     __end_of_statusT1:
  7661                           	callstack 0
  7662                           
  7663 ;; *************** function _set_passo *****************
  7664 ;; Defined at:
  7665 ;;		line 53 in file "atuadores.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  passo           1    wreg     unsigned char 
  7668 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7669 ;;		 -> main@vetorOut(1), 
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;  passo           1    4[COMRAM] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7681 ;;      Params:         2       0       0       0       0       0       0       0       0
  7682 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7683 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7684 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7685 ;;Total ram usage:        5 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    2
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_main
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text8
  7696  002D96                     __ptext8:
  7697                           	callstack 0
  7698  002D96                     _set_passo:
  7699                           	callstack 28
  7700                           
  7701                           ;incstack = 0
  7702                           ;set_passo@passo stored from wreg
  7703  002D96  6E35               	movwf	set_passo@passo^0,c
  7704  002D98                     
  7705                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  7706  002D98  EF0E  F017         	goto	l5621
  7707  002D9C                     l5603:
  7708  002D9C  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7709  002DA0  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7710  002DA4  0E00               	movlw	0
  7711  002DA6  80DB               	bsf	plusw2,0,c
  7712  002DA8  EF3B  F017         	goto	l35
  7713  002DAC                     l5605:
  7714  002DAC  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7715  002DB0  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7716  002DB4  0EFE               	movlw	254
  7717  002DB6  16DF               	andwf	indf2,f,c
  7718  002DB8  EF3B  F017         	goto	l35
  7719  002DBC                     l5607:
  7720  002DBC  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7721  002DC0  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7722  002DC4  0E00               	movlw	0
  7723  002DC6  82DB               	bsf	plusw2,1,c
  7724  002DC8  EF3B  F017         	goto	l35
  7725  002DCC                     l5609:
  7726  002DCC  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7727  002DD0  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7728  002DD4  0EFD               	movlw	253
  7729  002DD6  16DF               	andwf	indf2,f,c
  7730  002DD8  EF3B  F017         	goto	l35
  7731  002DDC                     l5611:
  7732  002DDC  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7733  002DE0  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7734  002DE4  0E00               	movlw	0
  7735  002DE6  84DB               	bsf	plusw2,2,c
  7736  002DE8  EF3B  F017         	goto	l35
  7737  002DEC                     l5613:
  7738  002DEC  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7739  002DF0  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7740  002DF4  0EFB               	movlw	251
  7741  002DF6  16DF               	andwf	indf2,f,c
  7742  002DF8  EF3B  F017         	goto	l35
  7743  002DFC                     l5615:
  7744  002DFC  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7745  002E00  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7746  002E04  0E00               	movlw	0
  7747  002E06  86DB               	bsf	plusw2,3,c
  7748  002E08  EF3B  F017         	goto	l35
  7749  002E0C                     l5617:
  7750  002E0C  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7751  002E10  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7752  002E14  0EF7               	movlw	247
  7753  002E16  16DF               	andwf	indf2,f,c
  7754  002E18  EF3B  F017         	goto	l35
  7755  002E1C                     l5621:
  7756  002E1C  5035               	movf	set_passo@passo^0,w,c
  7757  002E1E  6E33               	movwf	??_set_passo^0,c
  7758  002E20  6A34               	clrf	(??_set_passo+1)^0,c
  7759                           
  7760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7761                           ; Switch size 1, requested type "simple"
  7762                           ; Number of cases is 1, Range of values is 0 to 0
  7763                           ; switch strategies available:
  7764                           ; Name         Instructions Cycles
  7765                           ; simple_byte            4     3 (average)
  7766                           ;	Chosen strategy is simple_byte
  7767  002E22  5034               	movf	(??_set_passo+1)^0,w,c
  7768  002E24  0A00               	xorlw	0	; case 0
  7769  002E26  B4D8               	btfsc	status,2,c
  7770  002E28  EF18  F017         	goto	l8019
  7771  002E2C  EF3B  F017         	goto	l35
  7772  002E30                     l8019:
  7773                           
  7774                           ; Switch size 1, requested type "simple"
  7775                           ; Number of cases is 8, Range of values is 65 to 100
  7776                           ; switch strategies available:
  7777                           ; Name         Instructions Cycles
  7778                           ; simple_byte           25    13 (average)
  7779                           ;	Chosen strategy is simple_byte
  7780  002E30  5033               	movf	??_set_passo^0,w,c
  7781  002E32  0A41               	xorlw	65	; case 65
  7782  002E34  B4D8               	btfsc	status,2,c
  7783  002E36  EFCE  F016         	goto	l5603
  7784  002E3A  0A03               	xorlw	3	; case 66
  7785  002E3C  B4D8               	btfsc	status,2,c
  7786  002E3E  EFDE  F016         	goto	l5607
  7787  002E42  0A01               	xorlw	1	; case 67
  7788  002E44  B4D8               	btfsc	status,2,c
  7789  002E46  EFEE  F016         	goto	l5611
  7790  002E4A  0A07               	xorlw	7	; case 68
  7791  002E4C  B4D8               	btfsc	status,2,c
  7792  002E4E  EFFE  F016         	goto	l5615
  7793  002E52  0A25               	xorlw	37	; case 97
  7794  002E54  B4D8               	btfsc	status,2,c
  7795  002E56  EFD6  F016         	goto	l5605
  7796  002E5A  0A03               	xorlw	3	; case 98
  7797  002E5C  B4D8               	btfsc	status,2,c
  7798  002E5E  EFE6  F016         	goto	l5609
  7799  002E62  0A01               	xorlw	1	; case 99
  7800  002E64  B4D8               	btfsc	status,2,c
  7801  002E66  EFF6  F016         	goto	l5613
  7802  002E6A  0A07               	xorlw	7	; case 100
  7803  002E6C  B4D8               	btfsc	status,2,c
  7804  002E6E  EF06  F017         	goto	l5617
  7805  002E72  EF3B  F017         	goto	l35
  7806  002E76                     l35:
  7807  002E76  0012               	return		;funcret
  7808  002E78                     __end_of_set_passo:
  7809                           	callstack 0
  7810                           
  7811 ;; *************** function _setT1 *****************
  7812 ;; Defined at:
  7813 ;;		line 31 in file "timer1.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;  c               4    6[COMRAM] unsigned long 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      void 
  7820 ;; Registers used:
  7821 ;;		None
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7827 ;;      Params:         4       0       0       0       0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7830 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7831 ;;Total ram usage:        4 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    2
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_main
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text9
  7842  003FE8                     __ptext9:
  7843                           	callstack 0
  7844  003FE8                     _setT1:
  7845                           	callstack 28
  7846  003FE8                     
  7847                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  7848  003FE8  C037  F00B         	movff	setT1@c,_t1cont
  7849  003FEC  C038  F00C         	movff	setT1@c+1,_t1cont+1
  7850  003FF0  C039  F00D         	movff	setT1@c+2,_t1cont+2
  7851  003FF4  C03A  F00E         	movff	setT1@c+3,_t1cont+3
  7852                           
  7853                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  7854  003FF8  80CD               	bsf	205,0,c	;volatile
  7855  003FFA  0012               	return		;funcret
  7856  003FFC                     __end_of_setT1:
  7857                           	callstack 0
  7858                           
  7859 ;; *************** function _serialIOscan *****************
  7860 ;; Defined at:
  7861 ;;		line 76 in file "serialIO.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  i               1    6[COMRAM] unsigned char 
  7866 ;;  j               1    5[COMRAM] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7876 ;;      Params:         0       0       0       0       0       0       0       0       0
  7877 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7878 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7879 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7880 ;;Total ram usage:        4 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    3
  7883 ;; This function calls:
  7884 ;;		_serialIObyteShift
  7885 ;;		_serialIOload
  7886 ;; This function is called by:
  7887 ;;		_main
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text10
  7892  00382C                     __ptext10:
  7893                           	callstack 0
  7894  00382C                     _serialIOscan:
  7895                           	callstack 27
  7896  00382C                     
  7897                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  7898  00382C  041C               	decf	_lenSerialIO^0,w,c
  7899  00382E  6E36               	movwf	serialIOscan@j^0,c
  7900  003830                     
  7901                           ;serialIO.c: 80:     serialIOload();
  7902  003830  EC76  F020         	call	_serialIOload	;wreg free
  7903  003834                     
  7904                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  7905  003834  0E00               	movlw	0
  7906  003836  6E37               	movwf	serialIOscan@i^0,c
  7907  003838  EF36  F01C         	goto	l6209
  7908  00383C                     l6205:
  7909                           
  7910                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  7911  00383C  5037               	movf	serialIOscan@i^0,w,c
  7912  00383E  2415               	addwf	_ptrSerialIn^0,w,c
  7913  003840  6ED9               	movwf	fsr2l,c
  7914  003842  0E00               	movlw	0
  7915  003844  2016               	addwfc	(_ptrSerialIn+1)^0,w,c
  7916  003846  6EDA               	movwf	fsr2h,c
  7917  003848  5036               	movf	serialIOscan@j^0,w,c
  7918  00384A  2413               	addwf	_ptrSerialOut^0,w,c
  7919  00384C  6E34               	movwf	??_serialIOscan^0,c
  7920  00384E  0E00               	movlw	0
  7921  003850  2014               	addwfc	(_ptrSerialOut+1)^0,w,c
  7922  003852  6E35               	movwf	(??_serialIOscan+1)^0,c
  7923  003854  5037               	movf	serialIOscan@i^0,w,c
  7924  003856  5C34               	subwf	??_serialIOscan^0,w,c
  7925  003858  6EE1               	movwf	fsr1l,c
  7926  00385A  5035               	movf	(??_serialIOscan+1)^0,w,c
  7927  00385C  A0D8               	btfss	status,0,c
  7928  00385E  0435               	decf	(??_serialIOscan+1)^0,w,c
  7929  003860  6EE2               	movwf	fsr1h,c
  7930  003862  50E7               	movf	indf1,w,c
  7931  003864  ECE9  F01B         	call	_serialIObyteShift
  7932  003868  6EDF               	movwf	indf2,c
  7933  00386A                     
  7934                           ;serialIO.c: 84:     }
  7935  00386A  2A37               	incf	serialIOscan@i^0,f,c
  7936  00386C                     l6209:
  7937  00386C  501C               	movf	_lenSerialIO^0,w,c
  7938  00386E  5C37               	subwf	serialIOscan@i^0,w,c
  7939  003870  A0D8               	btfss	status,0,c
  7940  003872  EF3D  F01C         	goto	u4411
  7941  003876  EF3F  F01C         	goto	u4410
  7942  00387A                     u4411:
  7943  00387A  EF1E  F01C         	goto	l6205
  7944  00387E                     u4410:
  7945  00387E                     
  7946                           ;serialIO.c: 85:     serialIOload();
  7947  00387E  EC76  F020         	call	_serialIOload	;wreg free
  7948  003882  0012               	return		;funcret
  7949  003884                     __end_of_serialIOscan:
  7950                           	callstack 0
  7951                           
  7952 ;; *************** function _serialIOload *****************
  7953 ;; Defined at:
  7954 ;;		line 45 in file "serialIO.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;		None
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;		None
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		None
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7968 ;;      Params:         0       0       0       0       0       0       0       0       0
  7969 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7971 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7972 ;;Total ram usage:        0 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    2
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		_serialIOscan
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text11
  7983  0040EC                     __ptext11:
  7984                           	callstack 0
  7985  0040EC                     _serialIOload:
  7986                           	callstack 27
  7987  0040EC                     
  7988                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  7989  0040EC  9680               	bcf	128,3,c	;volatile
  7990                           
  7991                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  7992  0040EE  8680               	bsf	128,3,c	;volatile
  7993  0040F0  0012               	return		;funcret
  7994  0040F2                     __end_of_serialIOload:
  7995                           	callstack 0
  7996                           
  7997 ;; *************** function _serialIObyteShift *****************
  7998 ;; Defined at:
  7999 ;;		line 50 in file "serialIO.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;  dataIn          1    wreg     unsigned char 
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;  dataIn          1    0[COMRAM] unsigned char 
  8004 ;;  dataBit         1    2[COMRAM] unsigned char 
  8005 ;;  dataOut         1    1[COMRAM] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      unsigned char 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8015 ;;      Params:         0       0       0       0       0       0       0       0       0
  8016 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8018 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8019 ;;Total ram usage:        3 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    2
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_serialIOscan
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text12
  8030  0037D2                     __ptext12:
  8031                           	callstack 0
  8032  0037D2                     _serialIObyteShift:
  8033                           	callstack 27
  8034                           
  8035                           ;incstack = 0
  8036                           ;serialIObyteShift@dataIn stored from wreg
  8037  0037D2  6E31               	movwf	serialIObyteShift@dataIn^0,c
  8038  0037D4                     
  8039                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  8040  0037D4  0E80               	movlw	128
  8041  0037D6  6E33               	movwf	serialIObyteShift@dataBit^0,c
  8042                           
  8043                           ;serialIO.c: 56:     dataOut = 0;
  8044  0037D8  0E00               	movlw	0
  8045  0037DA  6E32               	movwf	serialIObyteShift@dataOut^0,c
  8046                           
  8047                           ;serialIO.c: 58:     while( dataBit )
  8048  0037DC  EF0B  F01C         	goto	l5497
  8049  0037E0                     l926:
  8050                           
  8051                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  8052  0037E0  9480               	bcf	128,2,c	;volatile
  8053  0037E2                     
  8054                           ;serialIO.c: 61:         if( dataIn & dataBit )
  8055  0037E2  5031               	movf	serialIObyteShift@dataIn^0,w,c
  8056  0037E4  1433               	andwf	serialIObyteShift@dataBit^0,w,c
  8057  0037E6  0900               	iorlw	0
  8058  0037E8  B4D8               	btfsc	status,2,c
  8059  0037EA  EFF9  F01B         	goto	u3701
  8060  0037EE  EFFB  F01B         	goto	u3700
  8061  0037F2                     u3701:
  8062  0037F2  EFFE  F01B         	goto	l927
  8063  0037F6                     u3700:
  8064  0037F6                     
  8065                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  8066  0037F6  8080               	bsf	128,0,c	;volatile
  8067  0037F8  EFFF  F01B         	goto	l928
  8068  0037FC                     l927:
  8069                           
  8070                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  8071  0037FC  9080               	bcf	128,0,c	;volatile
  8072  0037FE                     l928:
  8073                           
  8074                           ;serialIO.c: 66:         if( SERIALIO.IN )
  8075  0037FE  A280               	btfss	128,1,c	;volatile
  8076  003800  EF04  F01C         	goto	u3711
  8077  003804  EF06  F01C         	goto	u3710
  8078  003808                     u3711:
  8079  003808  EF08  F01C         	goto	l5495
  8080  00380C                     u3710:
  8081  00380C                     
  8082                           ;serialIO.c: 67:             dataOut |= dataBit;
  8083  00380C  5033               	movf	serialIObyteShift@dataBit^0,w,c
  8084  00380E  1232               	iorwf	serialIObyteShift@dataOut^0,f,c
  8085  003810                     l5495:
  8086                           
  8087                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  8088  003810  8480               	bsf	128,2,c	;volatile
  8089                           
  8090                           ;serialIO.c: 69:         dataBit >>= 1;
  8091  003812  90D8               	bcf	status,0,c
  8092  003814  3233               	rrcf	serialIObyteShift@dataBit^0,f,c
  8093  003816                     l5497:
  8094                           
  8095                           ;serialIO.c: 58:     while( dataBit )
  8096  003816  5033               	movf	serialIObyteShift@dataBit^0,w,c
  8097  003818  A4D8               	btfss	status,2,c
  8098  00381A  EF11  F01C         	goto	u3721
  8099  00381E  EF13  F01C         	goto	u3720
  8100  003822                     u3721:
  8101  003822  EFF0  F01B         	goto	l926
  8102  003826                     u3720:
  8103  003826                     
  8104                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  8105  003826  9480               	bcf	128,2,c	;volatile
  8106  003828                     
  8107                           ;serialIO.c: 72:     return( dataOut );
  8108  003828  5032               	movf	serialIObyteShift@dataOut^0,w,c
  8109  00382A  0012               	return		;funcret
  8110  00382C                     __end_of_serialIObyteShift:
  8111                           	callstack 0
  8112                           
  8113 ;; *************** function _salvar_receita *****************
  8114 ;; Defined at:
  8115 ;;		line 46 in file "eeprom.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  adrs            1    wreg     unsigned char 
  8118 ;;  data            2    6[COMRAM] PTR unsigned char 
  8119 ;;		 -> fila(18), 
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;  adrs            1   10[COMRAM] unsigned char 
  8122 ;;  i               1   11[COMRAM] unsigned char 
  8123 ;;  aux             2    8[COMRAM] int 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  1    wreg      void 
  8126 ;; Registers used:
  8127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8133 ;;      Params:         2       0       0       0       0       0       0       0       0
  8134 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8136 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8137 ;;Total ram usage:        6 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    3
  8140 ;; This function calls:
  8141 ;;		_EEPROM_write
  8142 ;;		_end_receita
  8143 ;; This function is called by:
  8144 ;;		_main
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	text13
  8149  003B48                     __ptext13:
  8150                           	callstack 0
  8151  003B48                     _salvar_receita:
  8152                           	callstack 27
  8153                           
  8154                           ;incstack = 0
  8155                           ;salvar_receita@adrs stored from wreg
  8156  003B48  6E3B               	movwf	salvar_receita@adrs^0,c
  8157  003B4A                     
  8158                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  8159  003B4A  C03B  F031         	movff	salvar_receita@adrs,end_receita@x
  8160  003B4E  6A32               	clrf	(end_receita@x+1)^0,c
  8161  003B50  EC78  F01F         	call	_end_receita	;wreg free
  8162  003B54  C031  F039         	movff	?_end_receita,salvar_receita@aux
  8163  003B58  C032  F03A         	movff	?_end_receita+1,salvar_receita@aux+1
  8164  003B5C                     
  8165                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  8166  003B5C  0E00               	movlw	0
  8167  003B5E  6E3C               	movwf	salvar_receita@i^0,c
  8168  003B60                     l5731:
  8169                           
  8170                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  8171  003B60  503C               	movf	salvar_receita@i^0,w,c
  8172  003B62  2437               	addwf	salvar_receita@data^0,w,c
  8173  003B64  6ED9               	movwf	fsr2l,c
  8174  003B66  0E00               	movlw	0
  8175  003B68  2038               	addwfc	(salvar_receita@data+1)^0,w,c
  8176  003B6A  6EDA               	movwf	fsr2h,c
  8177  003B6C  50DF               	movf	indf2,w,c
  8178  003B6E  6E31               	movwf	EEPROM_write@data^0,c
  8179  003B70  503C               	movf	salvar_receita@i^0,w,c
  8180  003B72  2439               	addwf	salvar_receita@aux^0,w,c
  8181  003B74  EC0D  F01F         	call	_EEPROM_write
  8182  003B78  2A3C               	incf	salvar_receita@i^0,f,c
  8183  003B7A  0E0F               	movlw	15
  8184  003B7C  643C               	cpfsgt	salvar_receita@i^0,c
  8185  003B7E  EFC3  F01D         	goto	u3911
  8186  003B82  EFC5  F01D         	goto	u3910
  8187  003B86                     u3911:
  8188  003B86  EFB0  F01D         	goto	l5731
  8189  003B8A                     u3910:
  8190  003B8A  0012               	return		;funcret
  8191  003B8C                     __end_of_salvar_receita:
  8192                           	callstack 0
  8193                           
  8194 ;; *************** function _salvar_dado *****************
  8195 ;; Defined at:
  8196 ;;		line 63 in file "eeprom.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  adrs            1    wreg     unsigned char 
  8199 ;;  col             1    6[COMRAM] unsigned char 
  8200 ;;  data            1    7[COMRAM] unsigned char 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  adrs            1   10[COMRAM] unsigned char 
  8203 ;;  aux             2    8[COMRAM] int 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;                  1    wreg      void 
  8206 ;; Registers used:
  8207 ;;		wreg, status,2, status,0, cstack
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8213 ;;      Params:         2       0       0       0       0       0       0       0       0
  8214 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8216 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8217 ;;Total ram usage:        5 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    3
  8220 ;; This function calls:
  8221 ;;		_EEPROM_write
  8222 ;;		_end_receita
  8223 ;; This function is called by:
  8224 ;;		_main
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text14
  8229  003F14                     __ptext14:
  8230                           	callstack 0
  8231  003F14                     _salvar_dado:
  8232                           	callstack 27
  8233                           
  8234                           ;incstack = 0
  8235                           ;salvar_dado@adrs stored from wreg
  8236  003F14  6E3B               	movwf	salvar_dado@adrs^0,c
  8237  003F16                     
  8238                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  8239  003F16  C03B  F031         	movff	salvar_dado@adrs,end_receita@x
  8240  003F1A  6A32               	clrf	(end_receita@x+1)^0,c
  8241  003F1C  EC78  F01F         	call	_end_receita	;wreg free
  8242  003F20  C031  F039         	movff	?_end_receita,salvar_dado@aux
  8243  003F24  C032  F03A         	movff	?_end_receita+1,salvar_dado@aux+1
  8244                           
  8245                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  8246  003F28  C038  F031         	movff	salvar_dado@data,EEPROM_write@data
  8247  003F2C  5037               	movf	salvar_dado@col^0,w,c
  8248  003F2E  2439               	addwf	salvar_dado@aux^0,w,c
  8249  003F30  EC0D  F01F         	call	_EEPROM_write
  8250  003F34  0012               	return		;funcret
  8251  003F36                     __end_of_salvar_dado:
  8252                           	callstack 0
  8253                           
  8254 ;; *************** function _salva_atuadores_init *****************
  8255 ;; Defined at:
  8256 ;;		line 117 in file "fifo.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;		None
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  condi_init      4    3[COMRAM] unsigned char [4]
  8261 ;;  pt              2    7[COMRAM] PTR unsigned char 
  8262 ;;		 -> salva_atuadores_init@condi_init(4), 
  8263 ;;  mask            1   10[COMRAM] unsigned char 
  8264 ;;  dado            1    9[COMRAM] unsigned char 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  1    wreg      unsigned char 
  8267 ;; Registers used:
  8268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8274 ;;      Params:         0       0       0       0       0       0       0       0       0
  8275 ;;      Locals:         8       0       0       0       0       0       0       0       0
  8276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8277 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8278 ;;Total ram usage:        8 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    3
  8281 ;; This function calls:
  8282 ;;		_ler_atuador
  8283 ;; This function is called by:
  8284 ;;		_main
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           	psect	text15
  8289  0034EA                     __ptext15:
  8290                           	callstack 0
  8291  0034EA                     _salva_atuadores_init:
  8292                           	callstack 27
  8293  0034EA                     
  8294                           ;fifo.c: 119:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  8295  0034EA  0E00               	movlw	0
  8296  0034EC  6E34               	movwf	salva_atuadores_init@condi_init^0,c
  8297  0034EE  0E00               	movlw	0
  8298  0034F0  6E35               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  8299  0034F2  0E00               	movlw	0
  8300  0034F4  6E36               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  8301  0034F6  0E00               	movlw	0
  8302  0034F8  6E37               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  8303  0034FA  0E41               	movlw	65
  8304  0034FC  EC47  F019         	call	_ler_atuador
  8305  003500  6E34               	movwf	salva_atuadores_init@condi_init^0,c
  8306  003502  0E42               	movlw	66
  8307  003504  EC47  F019         	call	_ler_atuador
  8308  003508  6E35               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  8309  00350A  0E43               	movlw	67
  8310  00350C  EC47  F019         	call	_ler_atuador
  8311  003510  6E36               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  8312  003512  0E44               	movlw	68
  8313  003514  EC47  F019         	call	_ler_atuador
  8314  003518  6E37               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  8315  00351A                     
  8316                           ;fifo.c: 121:     char *pt = condi_init;
  8317  00351A  0E34               	movlw	low salva_atuadores_init@condi_init
  8318  00351C  6E38               	movwf	salva_atuadores_init@pt^0,c
  8319  00351E  0E00               	movlw	high salva_atuadores_init@condi_init
  8320  003520  6E39               	movwf	(salva_atuadores_init@pt+1)^0,c
  8321  003522                     
  8322                           ;fifo.c: 122:     char dado = 0;
  8323  003522  0E00               	movlw	0
  8324  003524  6E3A               	movwf	salva_atuadores_init@dado^0,c
  8325  003526                     
  8326                           ;fifo.c: 123:     char mask = 0x08;
  8327  003526  0E08               	movlw	8
  8328  003528  6E3B               	movwf	salva_atuadores_init@mask^0,c
  8329                           
  8330                           ;fifo.c: 125:     while( mask )
  8331  00352A  EFAA  F01A         	goto	l5827
  8332  00352E                     l5819:
  8333                           
  8334                           ;fifo.c: 126:     {;fifo.c: 127:         if( *pt )
  8335  00352E  C038  FFD9         	movff	salva_atuadores_init@pt,fsr2l
  8336  003532  C039  FFDA         	movff	salva_atuadores_init@pt+1,fsr2h
  8337  003536  50DF               	movf	indf2,w,c
  8338  003538  B4D8               	btfsc	status,2,c
  8339  00353A  EFA1  F01A         	goto	u3951
  8340  00353E  EFA3  F01A         	goto	u3950
  8341  003542                     u3951:
  8342  003542  EFA6  F01A         	goto	l5823
  8343  003546                     u3950:
  8344  003546                     
  8345                           ;fifo.c: 128:         {;fifo.c: 129:             dado = dado | mask;
  8346  003546  503A               	movf	salva_atuadores_init@dado^0,w,c
  8347  003548  103B               	iorwf	salva_atuadores_init@mask^0,w,c
  8348  00354A  6E3A               	movwf	salva_atuadores_init@dado^0,c
  8349  00354C                     l5823:
  8350                           
  8351                           ;fifo.c: 131:         pt++;
  8352  00354C  4A38               	infsnz	salva_atuadores_init@pt^0,f,c
  8353  00354E  2A39               	incf	(salva_atuadores_init@pt+1)^0,f,c
  8354  003550                     
  8355                           ;fifo.c: 132:         mask >>= 1;
  8356  003550  90D8               	bcf	status,0,c
  8357  003552  323B               	rrcf	salva_atuadores_init@mask^0,f,c
  8358  003554                     l5827:
  8359                           
  8360                           ;fifo.c: 125:     while( mask )
  8361  003554  503B               	movf	salva_atuadores_init@mask^0,w,c
  8362  003556  A4D8               	btfss	status,2,c
  8363  003558  EFB0  F01A         	goto	u3961
  8364  00355C  EFB2  F01A         	goto	u3960
  8365  003560                     u3961:
  8366  003560  EF97  F01A         	goto	l5819
  8367  003564                     u3960:
  8368  003564                     
  8369                           ;fifo.c: 134:     return(dado);
  8370  003564  503A               	movf	salva_atuadores_init@dado^0,w,c
  8371  003566  0012               	return		;funcret
  8372  003568                     __end_of_salva_atuadores_init:
  8373                           	callstack 0
  8374                           
  8375 ;; *************** function _ler_atuador *****************
  8376 ;; Defined at:
  8377 ;;		line 80 in file "fifo.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  tecla           1    wreg     unsigned char 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  tecla           1    2[COMRAM] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      unsigned char 
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0
  8392 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8393 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8394 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8395 ;;Total ram usage:        3 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    2
  8398 ;; This function calls:
  8399 ;;		Nothing
  8400 ;; This function is called by:
  8401 ;;		_salva_atuadores_init
  8402 ;;		_main
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           	psect	text16
  8407  00328E                     __ptext16:
  8408                           	callstack 0
  8409  00328E                     _ler_atuador:
  8410                           	callstack 27
  8411                           
  8412                           ;incstack = 0
  8413                           ;ler_atuador@tecla stored from wreg
  8414  00328E  6E33               	movwf	ler_atuador@tecla^0,c
  8415  003290                     
  8416                           ;fifo.c: 80: char ler_atuador(char tecla);fifo.c: 81: {;fifo.c: 82:     switch(tecla)
  8417  003290  EF79  F019         	goto	l5349
  8418  003294                     l251:
  8419  003294  B01E               	btfsc	_atuador^0,0,c
  8420  003296  EF4F  F019         	goto	u3471
  8421  00329A  EF52  F019         	goto	u3470
  8422  00329E                     u3471:
  8423  00329E  0E01               	movlw	1
  8424  0032A0  EF53  F019         	goto	u3476
  8425  0032A4                     u3470:
  8426  0032A4  0E00               	movlw	0
  8427  0032A6                     u3476:
  8428  0032A6  EF96  F019         	goto	l252
  8429  0032AA                     l254:
  8430  0032AA  B21E               	btfsc	_atuador^0,1,c
  8431  0032AC  EF5A  F019         	goto	u3481
  8432  0032B0  EF5D  F019         	goto	u3480
  8433  0032B4                     u3481:
  8434  0032B4  0E01               	movlw	1
  8435  0032B6  EF5E  F019         	goto	u3486
  8436  0032BA                     u3480:
  8437  0032BA  0E00               	movlw	0
  8438  0032BC                     u3486:
  8439  0032BC  EF96  F019         	goto	l252
  8440  0032C0                     l255:
  8441  0032C0  B41E               	btfsc	_atuador^0,2,c
  8442  0032C2  EF65  F019         	goto	u3491
  8443  0032C6  EF68  F019         	goto	u3490
  8444  0032CA                     u3491:
  8445  0032CA  0E01               	movlw	1
  8446  0032CC  EF69  F019         	goto	u3496
  8447  0032D0                     u3490:
  8448  0032D0  0E00               	movlw	0
  8449  0032D2                     u3496:
  8450  0032D2  EF96  F019         	goto	l252
  8451  0032D6                     l256:
  8452  0032D6  B61E               	btfsc	_atuador^0,3,c
  8453  0032D8  EF70  F019         	goto	u3501
  8454  0032DC  EF73  F019         	goto	u3500
  8455  0032E0                     u3501:
  8456  0032E0  0E01               	movlw	1
  8457  0032E2  EF74  F019         	goto	u3506
  8458  0032E6                     u3500:
  8459  0032E6  0E00               	movlw	0
  8460  0032E8                     u3506:
  8461  0032E8  EF96  F019         	goto	l252
  8462  0032EC                     l5341:
  8463  0032EC  0E00               	movlw	0
  8464  0032EE  EF96  F019         	goto	l252
  8465  0032F2                     l5349:
  8466  0032F2  5033               	movf	ler_atuador@tecla^0,w,c
  8467  0032F4  6E31               	movwf	??_ler_atuador^0,c
  8468  0032F6  6A32               	clrf	(??_ler_atuador+1)^0,c
  8469                           
  8470                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8471                           ; Switch size 1, requested type "simple"
  8472                           ; Number of cases is 1, Range of values is 0 to 0
  8473                           ; switch strategies available:
  8474                           ; Name         Instructions Cycles
  8475                           ; simple_byte            4     3 (average)
  8476                           ;	Chosen strategy is simple_byte
  8477  0032F8  5032               	movf	(??_ler_atuador+1)^0,w,c
  8478  0032FA  0A00               	xorlw	0	; case 0
  8479  0032FC  B4D8               	btfsc	status,2,c
  8480  0032FE  EF83  F019         	goto	l8021
  8481  003302  EF76  F019         	goto	l5341
  8482  003306                     l8021:
  8483                           
  8484                           ; Switch size 1, requested type "simple"
  8485                           ; Number of cases is 4, Range of values is 65 to 68
  8486                           ; switch strategies available:
  8487                           ; Name         Instructions Cycles
  8488                           ; simple_byte           13     7 (average)
  8489                           ;	Chosen strategy is simple_byte
  8490  003306  5031               	movf	??_ler_atuador^0,w,c
  8491  003308  0A41               	xorlw	65	; case 65
  8492  00330A  B4D8               	btfsc	status,2,c
  8493  00330C  EF4A  F019         	goto	l251
  8494  003310  0A03               	xorlw	3	; case 66
  8495  003312  B4D8               	btfsc	status,2,c
  8496  003314  EF55  F019         	goto	l254
  8497  003318  0A01               	xorlw	1	; case 67
  8498  00331A  B4D8               	btfsc	status,2,c
  8499  00331C  EF60  F019         	goto	l255
  8500  003320  0A07               	xorlw	7	; case 68
  8501  003322  B4D8               	btfsc	status,2,c
  8502  003324  EF6B  F019         	goto	l256
  8503  003328  EF76  F019         	goto	l5341
  8504  00332C                     l252:
  8505  00332C  0012               	return		;funcret
  8506  00332E                     __end_of_ler_atuador:
  8507                           	callstack 0
  8508                           
  8509 ;; *************** function _resetIndicePassos *****************
  8510 ;; Defined at:
  8511 ;;		line 36 in file "fifo.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;		None
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;		None
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg, status,2
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8525 ;;      Params:         0       0       0       0       0       0       0       0       0
  8526 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8528 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8529 ;;Total ram usage:        0 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    2
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_main
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text17
  8540  0040F2                     __ptext17:
  8541                           	callstack 0
  8542  0040F2                     _resetIndicePassos:
  8543                           	callstack 28
  8544  0040F2                     
  8545                           ;fifo.c: 38:     indice_passos = 2;
  8546  0040F2  0E02               	movlw	2
  8547  0040F4  6E5B               	movwf	_indice_passos^0,c
  8548  0040F6  0012               	return		;funcret
  8549  0040F8                     __end_of_resetIndicePassos:
  8550                           	callstack 0
  8551                           
  8552 ;; *************** function _resetContCiclos *****************
  8553 ;; Defined at:
  8554 ;;		line 54 in file "fifo.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;		None
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;		None
  8559 ;; Return value:  Size  Location     Type
  8560 ;;                  1    wreg      void 
  8561 ;; Registers used:
  8562 ;;		wreg, status,2
  8563 ;; Tracked objects:
  8564 ;;		On entry : 0/0
  8565 ;;		On exit  : 0/0
  8566 ;;		Unchanged: 0/0
  8567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8568 ;;      Params:         0       0       0       0       0       0       0       0       0
  8569 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8570 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8571 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8572 ;;Total ram usage:        0 bytes
  8573 ;; Hardware stack levels used:    1
  8574 ;; Hardware stack levels required when called:    2
  8575 ;; This function calls:
  8576 ;;		Nothing
  8577 ;; This function is called by:
  8578 ;;		_main
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           	psect	text18
  8583  0040AA                     __ptext18:
  8584                           	callstack 0
  8585  0040AA                     _resetContCiclos:
  8586                           	callstack 28
  8587  0040AA                     
  8588                           ;fifo.c: 56:     cont_ciclos = 0;
  8589  0040AA  0E00               	movlw	0
  8590  0040AC  6E18               	movwf	(_cont_ciclos+1)^0,c
  8591  0040AE  0E00               	movlw	0
  8592  0040B0  6E17               	movwf	_cont_ciclos^0,c
  8593  0040B2  0012               	return		;funcret
  8594  0040B4                     __end_of_resetContCiclos:
  8595                           	callstack 0
  8596                           
  8597 ;; *************** function _printExec *****************
  8598 ;; Defined at:
  8599 ;;		line 520 in file "fifo.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;  col             1    wreg     unsigned char 
  8602 ;;  ind             1   25[COMRAM] unsigned char 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  col             1   28[COMRAM] unsigned char 
  8605 ;;  passo           1   29[COMRAM] unsigned char 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      void 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8615 ;;      Params:         1       0       0       0       0       0       0       0       0
  8616 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8618 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8619 ;;Total ram usage:        5 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    5
  8622 ;; This function calls:
  8623 ;;		_decodifica
  8624 ;;		_dignum_tam
  8625 ;;		_dispLCD_dataReg
  8626 ;;		_dispLCD_lincol
  8627 ;;		_dispLCD_num
  8628 ;;		_posAtual
  8629 ;; This function is called by:
  8630 ;;		_main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text19
  8635  0021AC                     __ptext19:
  8636                           	callstack 0
  8637  0021AC                     _printExec:
  8638                           	callstack 25
  8639                           
  8640                           ;incstack = 0
  8641                           ;printExec@col stored from wreg
  8642  0021AC  6E4D               	movwf	printExec@col^0,c
  8643  0021AE                     
  8644                           ;fifo.c: 520: void printExec (char col, char ind);fifo.c: 521: {;fifo.c: 522:     char p
      +                          asso = posAtual( ind );
  8645  0021AE  504A               	movf	printExec@ind^0,w,c
  8646  0021B0  EC2F  F020         	call	_posAtual
  8647  0021B4  6E4E               	movwf	printExec@passo^0,c
  8648  0021B6                     
  8649                           ;fifo.c: 524:     if(passo > 0 && passo <= 0x64)
  8650  0021B6  504E               	movf	printExec@passo^0,w,c
  8651  0021B8  B4D8               	btfsc	status,2,c
  8652  0021BA  EFE1  F010         	goto	u4291
  8653  0021BE  EFE3  F010         	goto	u4290
  8654  0021C2                     u4291:
  8655  0021C2  EF0C  F011         	goto	l6087
  8656  0021C6                     u4290:
  8657  0021C6  0E65               	movlw	101
  8658  0021C8  604E               	cpfslt	printExec@passo^0,c
  8659  0021CA  EFE9  F010         	goto	u4301
  8660  0021CE  EFEB  F010         	goto	u4300
  8661  0021D2                     u4301:
  8662  0021D2  EF0C  F011         	goto	l6087
  8663  0021D6                     u4300:
  8664  0021D6                     
  8665                           ;fifo.c: 525:     {;fifo.c: 526:         if( dignum_tam( (int) passo ) == 3 )
  8666  0021D6  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8667  0021DA  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8668  0021DC  EC06  F01E         	call	_dignum_tam	;wreg free
  8669  0021E0  0A03               	xorlw	3
  8670  0021E2  A4D8               	btfss	status,2,c
  8671  0021E4  EFF6  F010         	goto	u4311
  8672  0021E8  EFF8  F010         	goto	u4310
  8673  0021EC                     u4311:
  8674  0021EC  EFF9  F010         	goto	l6083
  8675  0021F0                     u4310:
  8676  0021F0                     
  8677                           ;fifo.c: 527:             col-=1;
  8678  0021F0  064D               	decf	printExec@col^0,f,c
  8679  0021F2                     l6083:
  8680                           
  8681                           ;fifo.c: 528:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8682  0021F2  C04D  F03C         	movff	printExec@col,dispLCD_num@col
  8683  0021F6  C04E  F03D         	movff	printExec@passo,dispLCD_num@num
  8684  0021FA  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  8685  0021FC  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8686  002200  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8687  002202  EC06  F01E         	call	_dignum_tam	;wreg free
  8688  002206  6E3F               	movwf	dispLCD_num@tam^0,c
  8689  002208  0E00               	movlw	0
  8690  00220A  EC9B  F011         	call	_dispLCD_num
  8691  00220E                     
  8692                           ;fifo.c: 529:         dispLCD_dataReg('%');
  8693  00220E  0E25               	movlw	37
  8694  002210  ECED  F01C         	call	_dispLCD_dataReg
  8695                           
  8696                           ;fifo.c: 530:     }
  8697  002214  EF9A  F011         	goto	l459
  8698  002218                     l6087:
  8699  002218  0E64               	movlw	100
  8700  00221A  644E               	cpfsgt	printExec@passo^0,c
  8701  00221C  EF12  F011         	goto	u4321
  8702  002220  EF14  F011         	goto	u4320
  8703  002224                     u4321:
  8704  002224  EF43  F011         	goto	l6101
  8705  002228                     u4320:
  8706  002228  0EDD               	movlw	221
  8707  00222A  604E               	cpfslt	printExec@passo^0,c
  8708  00222C  EF1A  F011         	goto	u4331
  8709  002230  EF1C  F011         	goto	u4330
  8710  002234                     u4331:
  8711  002234  EF43  F011         	goto	l6101
  8712  002238                     u4330:
  8713  002238                     
  8714                           ;fifo.c: 532:     {;fifo.c: 533:         decodifica(&passo);
  8715  002238  0E4E               	movlw	low printExec@passo
  8716  00223A  6E31               	movwf	decodifica@d^0,c
  8717  00223C  0E00               	movlw	high printExec@passo
  8718  00223E  6E32               	movwf	(decodifica@d+1)^0,c
  8719  002240  ECA9  F013         	call	_decodifica	;wreg free
  8720  002244                     
  8721                           ;fifo.c: 534:         if( dignum_tam( (int) passo ) == 3 )
  8722  002244  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8723  002248  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8724  00224A  EC06  F01E         	call	_dignum_tam	;wreg free
  8725  00224E  0A03               	xorlw	3
  8726  002250  A4D8               	btfss	status,2,c
  8727  002252  EF2D  F011         	goto	u4341
  8728  002256  EF2F  F011         	goto	u4340
  8729  00225A                     u4341:
  8730  00225A  EF30  F011         	goto	l6097
  8731  00225E                     u4340:
  8732  00225E                     
  8733                           ;fifo.c: 535:             col-=1;
  8734  00225E  064D               	decf	printExec@col^0,f,c
  8735  002260                     l6097:
  8736                           
  8737                           ;fifo.c: 536:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8738  002260  C04D  F03C         	movff	printExec@col,dispLCD_num@col
  8739  002264  C04E  F03D         	movff	printExec@passo,dispLCD_num@num
  8740  002268  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  8741  00226A  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8742  00226E  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8743  002270  EC06  F01E         	call	_dignum_tam	;wreg free
  8744  002274  6E3F               	movwf	dispLCD_num@tam^0,c
  8745  002276  0E00               	movlw	0
  8746  002278  EC9B  F011         	call	_dispLCD_num
  8747  00227C                     
  8748                           ;fifo.c: 537:         dispLCD_dataReg('s');
  8749  00227C  0E73               	movlw	115
  8750  00227E  ECED  F01C         	call	_dispLCD_dataReg
  8751                           
  8752                           ;fifo.c: 538:     }
  8753  002282  EF9A  F011         	goto	l459
  8754  002286                     l6101:
  8755  002286  0EDC               	movlw	220
  8756  002288  644E               	cpfsgt	printExec@passo^0,c
  8757  00228A  EF49  F011         	goto	u4351
  8758  00228E  EF4B  F011         	goto	u4350
  8759  002292                     u4351:
  8760  002292  EF78  F011         	goto	l6119
  8761  002296                     u4350:
  8762  002296  0EFE               	movlw	254
  8763  002298  604E               	cpfslt	printExec@passo^0,c
  8764  00229A  EF51  F011         	goto	u4361
  8765  00229E  EF53  F011         	goto	u4360
  8766  0022A2                     u4361:
  8767  0022A2  EF78  F011         	goto	l6119
  8768  0022A6                     u4360:
  8769  0022A6                     
  8770                           ;fifo.c: 540:     {;fifo.c: 541:         decodifica(&passo);
  8771  0022A6  0E4E               	movlw	low printExec@passo
  8772  0022A8  6E31               	movwf	decodifica@d^0,c
  8773  0022AA  0E00               	movlw	high printExec@passo
  8774  0022AC  6E32               	movwf	(decodifica@d+1)^0,c
  8775  0022AE  ECA9  F013         	call	_decodifica	;wreg free
  8776  0022B2                     
  8777                           ;fifo.c: 542:         dispLCD_lincol(0, col);
  8778  0022B2  C04D  F033         	movff	printExec@col,dispLCD_lincol@col
  8779  0022B6  0E00               	movlw	0
  8780  0022B8  EC5A  F01B         	call	_dispLCD_lincol
  8781  0022BC                     
  8782                           ;fifo.c: 543:         dispLCD_dataReg( passo & ~0x20 );
  8783  0022BC  504E               	movf	printExec@passo^0,w,c
  8784  0022BE  0BDF               	andlw	223
  8785  0022C0  ECED  F01C         	call	_dispLCD_dataReg
  8786  0022C4                     
  8787                           ;fifo.c: 544:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  8788  0022C4  BA4E               	btfsc	printExec@passo^0,5,c
  8789  0022C6  EF67  F011         	goto	u4371
  8790  0022CA  EF69  F011         	goto	u4370
  8791  0022CE                     u4371:
  8792  0022CE  EF6F  F011         	goto	l6115
  8793  0022D2                     u4370:
  8794  0022D2  0E00               	movlw	0
  8795  0022D4  6E4C               	movwf	(_printExec$498+1)^0,c
  8796  0022D6  0E2B               	movlw	43
  8797  0022D8  6E4B               	movwf	_printExec$498^0,c
  8798  0022DA  EF73  F011         	goto	l6117
  8799  0022DE                     l6115:
  8800  0022DE  0E00               	movlw	0
  8801  0022E0  6E4C               	movwf	(_printExec$498+1)^0,c
  8802  0022E2  0E2D               	movlw	45
  8803  0022E4  6E4B               	movwf	_printExec$498^0,c
  8804  0022E6                     l6117:
  8805  0022E6  504B               	movf	_printExec$498^0,w,c
  8806  0022E8  ECED  F01C         	call	_dispLCD_dataReg
  8807                           
  8808                           ;fifo.c: 545:     }
  8809  0022EC  EF9A  F011         	goto	l459
  8810  0022F0                     l6119:
  8811  0022F0  0EFE               	movlw	254
  8812  0022F2  184E               	xorwf	printExec@passo^0,w,c
  8813  0022F4  A4D8               	btfss	status,2,c
  8814  0022F6  EF7F  F011         	goto	u4381
  8815  0022FA  EF81  F011         	goto	u4380
  8816  0022FE                     u4381:
  8817  0022FE  EF9A  F011         	goto	l451
  8818  002302                     u4380:
  8819  002302                     
  8820                           ;fifo.c: 547:     {;fifo.c: 548:         decodifica(&passo);
  8821  002302  0E4E               	movlw	low printExec@passo
  8822  002304  6E31               	movwf	decodifica@d^0,c
  8823  002306  0E00               	movlw	high printExec@passo
  8824  002308  6E32               	movwf	(decodifica@d+1)^0,c
  8825  00230A  ECA9  F013         	call	_decodifica	;wreg free
  8826  00230E                     
  8827                           ;fifo.c: 549:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8828  00230E  C04D  F03C         	movff	printExec@col,dispLCD_num@col
  8829  002312  C04E  F03D         	movff	printExec@passo,dispLCD_num@num
  8830  002316  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  8831  002318  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8832  00231C  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8833  00231E  EC06  F01E         	call	_dignum_tam	;wreg free
  8834  002322  6E3F               	movwf	dispLCD_num@tam^0,c
  8835  002324  0E00               	movlw	0
  8836  002326  EC9B  F011         	call	_dispLCD_num
  8837  00232A                     
  8838                           ;fifo.c: 550:         dispLCD_dataReg('%');
  8839  00232A  0E25               	movlw	37
  8840  00232C  ECED  F01C         	call	_dispLCD_dataReg
  8841  002330  EF9A  F011         	goto	l459
  8842  002334                     l451:
  8843  002334                     l459:
  8844  002334  0012               	return		;funcret
  8845  002336                     __end_of_printExec:
  8846                           	callstack 0
  8847                           
  8848 ;; *************** function _posAtual *****************
  8849 ;; Defined at:
  8850 ;;		line 512 in file "fifo.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  ind             1    wreg     unsigned char 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  ind             1    1[COMRAM] unsigned char 
  8855 ;;  passo           1    2[COMRAM] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      unsigned char 
  8858 ;; Registers used:
  8859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0
  8866 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8868 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8869 ;;Total ram usage:        2 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    3
  8872 ;; This function calls:
  8873 ;;		_fifo_lerPos
  8874 ;;		_getIndicePassos
  8875 ;; This function is called by:
  8876 ;;		_printExec
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text20
  8881  00405E                     __ptext20:
  8882                           	callstack 0
  8883  00405E                     _posAtual:
  8884                           	callstack 26
  8885                           
  8886                           ;incstack = 0
  8887                           ;posAtual@ind stored from wreg
  8888  00405E  6E32               	movwf	posAtual@ind^0,c
  8889  004060                     
  8890                           ;fifo.c: 516:     passo = fifo_lerPos( getIndicePassos() + ind );
  8891  004060  EC7F  F020         	call	_getIndicePassos	;wreg free
  8892  004064  2432               	addwf	posAtual@ind^0,w,c
  8893  004066  EC38  F020         	call	_fifo_lerPos
  8894  00406A  6E33               	movwf	posAtual@passo^0,c
  8895  00406C                     
  8896                           ;fifo.c: 517:     return(passo);
  8897  00406C  5033               	movf	posAtual@passo^0,w,c
  8898  00406E  0012               	return		;funcret
  8899  004070                     __end_of_posAtual:
  8900                           	callstack 0
  8901                           
  8902 ;; *************** function _getIndicePassos *****************
  8903 ;; Defined at:
  8904 ;;		line 31 in file "fifo.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;		None
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;		None
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      unsigned char 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8918 ;;      Params:         0       0       0       0       0       0       0       0       0
  8919 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8921 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8922 ;;Total ram usage:        0 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    2
  8925 ;; This function calls:
  8926 ;;		Nothing
  8927 ;; This function is called by:
  8928 ;;		_posAtual
  8929 ;;		_main
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text21
  8934  0040FE                     __ptext21:
  8935                           	callstack 0
  8936  0040FE                     _getIndicePassos:
  8937                           	callstack 26
  8938  0040FE                     
  8939                           ;fifo.c: 33:     return(indice_passos);
  8940  0040FE  505B               	movf	_indice_passos^0,w,c
  8941  004100  0012               	return		;funcret
  8942  004102                     __end_of_getIndicePassos:
  8943                           	callstack 0
  8944                           
  8945 ;; *************** function _fifo_lerPos *****************
  8946 ;; Defined at:
  8947 ;;		line 168 in file "fifo.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;  i               1    wreg     unsigned char 
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;  i               1    0[COMRAM] unsigned char 
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      unsigned char 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0
  8962 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8964 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8965 ;;Total ram usage:        1 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    2
  8968 ;; This function calls:
  8969 ;;		Nothing
  8970 ;; This function is called by:
  8971 ;;		_posAtual
  8972 ;;		_main
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           	psect	text22
  8977  004070                     __ptext22:
  8978                           	callstack 0
  8979  004070                     _fifo_lerPos:
  8980                           	callstack 26
  8981                           
  8982                           ;incstack = 0
  8983                           ;fifo_lerPos@i stored from wreg
  8984  004070  6E31               	movwf	fifo_lerPos@i^0,c
  8985  004072                     
  8986                           ;fifo.c: 168: char fifo_lerPos(char i);fifo.c: 169: {;fifo.c: 170:     return ( fila[i] 
      +                          );
  8987  004072  0E1F               	movlw	low _fila
  8988  004074  2431               	addwf	fifo_lerPos@i^0,w,c
  8989  004076  6ED9               	movwf	fsr2l,c
  8990  004078  6ADA               	clrf	fsr2h,c
  8991  00407A  0E00               	movlw	high _fila
  8992  00407C  22DA               	addwfc	fsr2h,f,c
  8993  00407E  50DF               	movf	indf2,w,c
  8994  004080  0012               	return		;funcret
  8995  004082                     __end_of_fifo_lerPos:
  8996                           	callstack 0
  8997                           
  8998 ;; *************** function _dispLCD_num *****************
  8999 ;; Defined at:
  9000 ;;		line 201 in file "dispLCD4vias.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;  lin             1    wreg     unsigned char 
  9003 ;;  col             1   11[COMRAM] unsigned char 
  9004 ;;  num             2   12[COMRAM] int 
  9005 ;;  tam             1   14[COMRAM] unsigned char 
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  lin             1   20[COMRAM] unsigned char 
  9008 ;;  div             2   23[COMRAM] int 
  9009 ;;  sinal           1   22[COMRAM] unsigned char 
  9010 ;;  size            1   21[COMRAM] unsigned char 
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      void 
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9020 ;;      Params:         4       0       0       0       0       0       0       0       0
  9021 ;;      Locals:         5       0       0       0       0       0       0       0       0
  9022 ;;      Temps:          5       0       0       0       0       0       0       0       0
  9023 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9024 ;;Total ram usage:       14 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    4
  9027 ;; This function calls:
  9028 ;;		___awdiv
  9029 ;;		___awmod
  9030 ;;		_dispLCD_dataReg
  9031 ;;		_dispLCD_lincol
  9032 ;; This function is called by:
  9033 ;;		_printExec
  9034 ;;		_main
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text23
  9039  002336                     __ptext23:
  9040                           	callstack 0
  9041  002336                     _dispLCD_num:
  9042                           	callstack 25
  9043                           
  9044                           ;incstack = 0
  9045                           ;dispLCD_num@lin stored from wreg
  9046  002336  6E45               	movwf	dispLCD_num@lin^0,c
  9047  002338                     
  9048                           ;dispLCD4vias.c: 201: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 202:                     int num, unsigned char tam );dispLCD4vias.c: 203: {;dispL
      +                          CD4vias.c: 204:     int div;;dispLCD4vias.c: 205:     unsigned char size;;dispLCD4vias.c
      +                          : 206:     char sinal;;dispLCD4vias.c: 208:     sinal = num < 0;
  9049  002338  BE3E               	btfsc	(dispLCD_num@num+1)^0,7,c
  9050  00233A  EFA1  F011         	goto	u3371
  9051  00233E  EFA4  F011         	goto	u3370
  9052  002342                     u3371:
  9053  002342  0E01               	movlw	1
  9054  002344  EFA5  F011         	goto	u3380
  9055  002348                     u3370:
  9056  002348  0E00               	movlw	0
  9057  00234A                     u3380:
  9058  00234A  6E47               	movwf	dispLCD_num@sinal^0,c
  9059  00234C                     
  9060                           ;dispLCD4vias.c: 209:     if( sinal )
  9061  00234C  5047               	movf	dispLCD_num@sinal^0,w,c
  9062  00234E  B4D8               	btfsc	status,2,c
  9063  002350  EFAC  F011         	goto	u3391
  9064  002354  EFAE  F011         	goto	u3390
  9065  002358                     u3391:
  9066  002358  EFB2  F011         	goto	l5273
  9067  00235C                     u3390:
  9068  00235C                     
  9069                           ;dispLCD4vias.c: 210:         num = (~num) + 1;
  9070  00235C  6C3D               	negf	dispLCD_num@num^0,c
  9071  00235E  1E3E               	comf	(dispLCD_num@num+1)^0,f,c
  9072  002360  B0D8               	btfsc	status,0,c
  9073  002362  2A3E               	incf	(dispLCD_num@num+1)^0,f,c
  9074  002364                     l5273:
  9075                           
  9076                           ;dispLCD4vias.c: 212:     dispLCD_lincol(lin, col);
  9077  002364  C03C  F033         	movff	dispLCD_num@col,dispLCD_lincol@col
  9078  002368  5045               	movf	dispLCD_num@lin^0,w,c
  9079  00236A  EC5A  F01B         	call	_dispLCD_lincol
  9080  00236E                     
  9081                           ;dispLCD4vias.c: 214:     div=10000;
  9082  00236E  0E27               	movlw	39
  9083  002370  6E49               	movwf	(dispLCD_num@div+1)^0,c
  9084  002372  0E10               	movlw	16
  9085  002374  6E48               	movwf	dispLCD_num@div^0,c
  9086  002376                     
  9087                           ;dispLCD4vias.c: 215:     size = 5;
  9088  002376  0E05               	movlw	5
  9089  002378  6E46               	movwf	dispLCD_num@size^0,c
  9090                           
  9091                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  9092  00237A  EFE1  F011         	goto	l5285
  9093  00237E                     l5279:
  9094                           
  9095                           ;dispLCD4vias.c: 217:     {;dispLCD4vias.c: 218:         if( num/div == 0 )
  9096  00237E  C03D  F031         	movff	dispLCD_num@num,___awdiv@dividend
  9097  002382  C03E  F032         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  9098  002386  C048  F033         	movff	dispLCD_num@div,___awdiv@divisor
  9099  00238A  C049  F034         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  9100  00238E  EC3C  F017         	call	___awdiv	;wreg free
  9101  002392  5031               	movf	?___awdiv^0,w,c
  9102  002394  1032               	iorwf	(?___awdiv+1)^0,w,c
  9103  002396  A4D8               	btfss	status,2,c
  9104  002398  EFD0  F011         	goto	u3401
  9105  00239C  EFD2  F011         	goto	u3400
  9106  0023A0                     u3401:
  9107  0023A0  EFF4  F011         	goto	l5291
  9108  0023A4                     u3400:
  9109  0023A4                     
  9110                           ;dispLCD4vias.c: 219:             --size;
  9111  0023A4  0646               	decf	dispLCD_num@size^0,f,c
  9112  0023A6                     
  9113                           ;dispLCD4vias.c: 222:         div/=10;
  9114  0023A6  C048  F031         	movff	dispLCD_num@div,___awdiv@dividend
  9115  0023AA  C049  F032         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  9116  0023AE  0E00               	movlw	0
  9117  0023B0  6E34               	movwf	(___awdiv@divisor+1)^0,c
  9118  0023B2  0E0A               	movlw	10
  9119  0023B4  6E33               	movwf	___awdiv@divisor^0,c
  9120  0023B6  EC3C  F017         	call	___awdiv	;wreg free
  9121  0023BA  C031  F048         	movff	?___awdiv,dispLCD_num@div
  9122  0023BE  C032  F049         	movff	?___awdiv+1,dispLCD_num@div+1
  9123  0023C2                     l5285:
  9124                           
  9125                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  9126  0023C2  BE49               	btfsc	(dispLCD_num@div+1)^0,7,c
  9127  0023C4  EFEE  F011         	goto	u3410
  9128  0023C8  5049               	movf	(dispLCD_num@div+1)^0,w,c
  9129  0023CA  E106               	bnz	u3411
  9130  0023CC  0448               	decf	dispLCD_num@div^0,w,c
  9131  0023CE  B0D8               	btfsc	status,0,c
  9132  0023D0  EFEC  F011         	goto	u3411
  9133  0023D4  EFEE  F011         	goto	u3410
  9134  0023D8                     u3411:
  9135  0023D8  EFBF  F011         	goto	l5279
  9136  0023DC                     u3410:
  9137  0023DC  EFF4  F011         	goto	l5291
  9138  0023E0                     l5287:
  9139                           
  9140                           ;dispLCD4vias.c: 226:     {;dispLCD4vias.c: 227:         dispLCD_dataReg(' ');
  9141  0023E0  0E20               	movlw	32
  9142  0023E2  ECED  F01C         	call	_dispLCD_dataReg
  9143  0023E6                     
  9144                           ;dispLCD4vias.c: 228:         --tam;
  9145  0023E6  063F               	decf	dispLCD_num@tam^0,f,c
  9146  0023E8                     l5291:
  9147                           
  9148                           ;dispLCD4vias.c: 225:     while( tam > (size+sinal) && tam > 1 )
  9149  0023E8  503F               	movf	dispLCD_num@tam^0,w,c
  9150  0023EA  6E40               	movwf	??_dispLCD_num^0,c
  9151  0023EC  6A41               	clrf	(??_dispLCD_num+1)^0,c
  9152  0023EE  5047               	movf	dispLCD_num@sinal^0,w,c
  9153  0023F0  C046  F042         	movff	dispLCD_num@size,??_dispLCD_num+2
  9154  0023F4  6A43               	clrf	(??_dispLCD_num+3)^0,c
  9155  0023F6  2642               	addwf	(??_dispLCD_num+2)^0,f,c
  9156  0023F8  0E00               	movlw	0
  9157  0023FA  2243               	addwfc	(??_dispLCD_num+3)^0,f,c
  9158  0023FC  5040               	movf	??_dispLCD_num^0,w,c
  9159  0023FE  5C42               	subwf	(??_dispLCD_num+2)^0,w,c
  9160  002400  5043               	movf	(??_dispLCD_num+3)^0,w,c
  9161  002402  0A80               	xorlw	128
  9162  002404  6E44               	movwf	(??_dispLCD_num+4)^0,c
  9163  002406  5041               	movf	(??_dispLCD_num+1)^0,w,c
  9164  002408  0A80               	xorlw	128
  9165  00240A  5844               	subwfb	(??_dispLCD_num+4)^0,w,c
  9166  00240C  B0D8               	btfsc	status,0,c
  9167  00240E  EF0B  F012         	goto	u3421
  9168  002412  EF0D  F012         	goto	u3420
  9169  002416                     u3421:
  9170  002416  EF15  F012         	goto	l5295
  9171  00241A                     u3420:
  9172  00241A  0E02               	movlw	2
  9173  00241C  603F               	cpfslt	dispLCD_num@tam^0,c
  9174  00241E  EF13  F012         	goto	u3431
  9175  002422  EF15  F012         	goto	u3430
  9176  002426                     u3431:
  9177  002426  EFF0  F011         	goto	l5287
  9178  00242A                     u3430:
  9179  00242A                     l5295:
  9180                           
  9181                           ;dispLCD4vias.c: 231:     if( sinal )
  9182  00242A  5047               	movf	dispLCD_num@sinal^0,w,c
  9183  00242C  B4D8               	btfsc	status,2,c
  9184  00242E  EF1B  F012         	goto	u3441
  9185  002432  EF1D  F012         	goto	u3440
  9186  002436                     u3441:
  9187  002436  EF20  F012         	goto	l114
  9188  00243A                     u3440:
  9189  00243A                     
  9190                           ;dispLCD4vias.c: 232:         dispLCD_dataReg('-');
  9191  00243A  0E2D               	movlw	45
  9192  00243C  ECED  F01C         	call	_dispLCD_dataReg
  9193  002440                     l114:
  9194                           
  9195                           ;dispLCD4vias.c: 235:     {;dispLCD4vias.c: 236:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  9196  002440  C03D  F031         	movff	dispLCD_num@num,___awdiv@dividend
  9197  002444  C03E  F032         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  9198  002448  C048  F033         	movff	dispLCD_num@div,___awdiv@divisor
  9199  00244C  C049  F034         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  9200  002450  EC3C  F017         	call	___awdiv	;wreg free
  9201  002454  5031               	movf	?___awdiv^0,w,c
  9202  002456  0F30               	addlw	48
  9203  002458  ECED  F01C         	call	_dispLCD_dataReg
  9204                           
  9205                           ;dispLCD4vias.c: 237:         num = num % div;
  9206  00245C  C03D  F031         	movff	dispLCD_num@num,___awmod@dividend
  9207  002460  C03E  F032         	movff	dispLCD_num@num+1,___awmod@dividend+1
  9208  002464  C048  F033         	movff	dispLCD_num@div,___awmod@divisor
  9209  002468  C049  F034         	movff	dispLCD_num@div+1,___awmod@divisor+1
  9210  00246C  EC9E  F017         	call	___awmod	;wreg free
  9211  002470  C031  F03D         	movff	?___awmod,dispLCD_num@num
  9212  002474  C032  F03E         	movff	?___awmod+1,dispLCD_num@num+1
  9213                           
  9214                           ;dispLCD4vias.c: 238:         div/=10;
  9215  002478  C048  F031         	movff	dispLCD_num@div,___awdiv@dividend
  9216  00247C  C049  F032         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  9217  002480  0E00               	movlw	0
  9218  002482  6E34               	movwf	(___awdiv@divisor+1)^0,c
  9219  002484  0E0A               	movlw	10
  9220  002486  6E33               	movwf	___awdiv@divisor^0,c
  9221  002488  EC3C  F017         	call	___awdiv	;wreg free
  9222  00248C  C031  F048         	movff	?___awdiv,dispLCD_num@div
  9223  002490  C032  F049         	movff	?___awdiv+1,dispLCD_num@div+1
  9224  002494                     
  9225                           ;dispLCD4vias.c: 239:     }
  9226  002494  BE49               	btfsc	(dispLCD_num@div+1)^0,7,c
  9227  002496  EF57  F012         	goto	u3450
  9228  00249A  5049               	movf	(dispLCD_num@div+1)^0,w,c
  9229  00249C  E106               	bnz	u3451
  9230  00249E  0448               	decf	dispLCD_num@div^0,w,c
  9231  0024A0  B0D8               	btfsc	status,0,c
  9232  0024A2  EF55  F012         	goto	u3451
  9233  0024A6  EF57  F012         	goto	u3450
  9234  0024AA                     u3451:
  9235  0024AA  EF20  F012         	goto	l114
  9236  0024AE                     u3450:
  9237  0024AE  0012               	return		;funcret
  9238  0024B0                     __end_of_dispLCD_num:
  9239                           	callstack 0
  9240                           
  9241 ;; *************** function _manipula_atuadores_init *****************
  9242 ;; Defined at:
  9243 ;;		line 137 in file "fifo.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;  aux             1    wreg     unsigned char 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  aux             1    4[COMRAM] unsigned char 
  9248 ;;  mask            1    5[COMRAM] unsigned char 
  9249 ;;  atuador         1    3[COMRAM] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  1    wreg      void 
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0, cstack
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0
  9260 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9262 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9263 ;;Total ram usage:        3 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    3
  9266 ;; This function calls:
  9267 ;;		_alt_atuador
  9268 ;; This function is called by:
  9269 ;;		_main
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           	psect	text24
  9274  00398A                     __ptext24:
  9275                           	callstack 0
  9276  00398A                     _manipula_atuadores_init:
  9277                           	callstack 27
  9278                           
  9279                           ;incstack = 0
  9280                           ;manipula_atuadores_init@aux stored from wreg
  9281  00398A  6E35               	movwf	manipula_atuadores_init@aux^0,c
  9282  00398C                     
  9283                           ;fifo.c: 137: void manipula_atuadores_init(char aux);fifo.c: 138: {;fifo.c: 139:     cha
      +                          r mask = 0x08;
  9284  00398C  0E08               	movlw	8
  9285  00398E  6E36               	movwf	manipula_atuadores_init@mask^0,c
  9286                           
  9287                           ;fifo.c: 140:     char atuador = 0x41;
  9288  003990  0E41               	movlw	65
  9289  003992  6E34               	movwf	manipula_atuadores_init@atuador^0,c
  9290  003994                     
  9291                           ;fifo.c: 142:     if(aux ==0xFF)
  9292  003994  2835               	incf	manipula_atuadores_init@aux^0,w,c
  9293  003996  A4D8               	btfss	status,2,c
  9294  003998  EFD0  F01C         	goto	u3971
  9295  00399C  EFD2  F01C         	goto	u3970
  9296  0039A0                     u3971:
  9297  0039A0  EFE4  F01C         	goto	l5847
  9298  0039A4                     u3970:
  9299  0039A4  EFEC  F01C         	goto	l287
  9300  0039A8                     l5839:
  9301                           
  9302                           ;fifo.c: 148:         {;fifo.c: 150:             if(aux & mask)
  9303  0039A8  5035               	movf	manipula_atuadores_init@aux^0,w,c
  9304  0039AA  1436               	andwf	manipula_atuadores_init@mask^0,w,c
  9305  0039AC  0900               	iorlw	0
  9306  0039AE  B4D8               	btfsc	status,2,c
  9307  0039B0  EFDC  F01C         	goto	u3981
  9308  0039B4  EFDE  F01C         	goto	u3980
  9309  0039B8                     u3981:
  9310  0039B8  EFE1  F01C         	goto	l5843
  9311  0039BC                     u3980:
  9312  0039BC                     
  9313                           ;fifo.c: 151:             {;fifo.c: 152:                 alt_atuador(atuador);
  9314  0039BC  5034               	movf	manipula_atuadores_init@atuador^0,w,c
  9315  0039BE  EC97  F019         	call	_alt_atuador
  9316  0039C2                     l5843:
  9317                           
  9318                           ;fifo.c: 154:             atuador++;
  9319  0039C2  2A34               	incf	manipula_atuadores_init@atuador^0,f,c
  9320  0039C4                     
  9321                           ;fifo.c: 155:             mask >>= 1;
  9322  0039C4  90D8               	bcf	status,0,c
  9323  0039C6  3236               	rrcf	manipula_atuadores_init@mask^0,f,c
  9324  0039C8                     l5847:
  9325                           
  9326                           ;fifo.c: 147:         while(mask)
  9327  0039C8  5036               	movf	manipula_atuadores_init@mask^0,w,c
  9328  0039CA  A4D8               	btfss	status,2,c
  9329  0039CC  EFEA  F01C         	goto	u3991
  9330  0039D0  EFEC  F01C         	goto	u3990
  9331  0039D4                     u3991:
  9332  0039D4  EFD4  F01C         	goto	l5839
  9333  0039D8                     u3990:
  9334  0039D8                     l287:
  9335  0039D8  0012               	return		;funcret
  9336  0039DA                     __end_of_manipula_atuadores_init:
  9337                           	callstack 0
  9338                           
  9339 ;; *************** function _ler_sensor *****************
  9340 ;; Defined at:
  9341 ;;		line 68 in file "atuadores.c"
  9342 ;; Parameters:    Size  Location     Type
  9343 ;;  passo           1    wreg     unsigned char 
  9344 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  9345 ;;		 -> main@vetorIn(1), 
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;  passo           1    4[COMRAM] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  1    wreg      unsigned char 
  9350 ;; Registers used:
  9351 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9357 ;;      Params:         2       0       0       0       0       0       0       0       0
  9358 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9359 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9360 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9361 ;;Total ram usage:        5 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    2
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_main
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text25
  9372  002BC6                     __ptext25:
  9373                           	callstack 0
  9374  002BC6                     _ler_sensor:
  9375                           	callstack 28
  9376                           
  9377                           ;incstack = 0
  9378                           ;ler_sensor@passo stored from wreg
  9379  002BC6  6E35               	movwf	ler_sensor@passo^0,c
  9380  002BC8                     
  9381                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  9382  002BC8  EF29  F016         	goto	l5685
  9383  002BCC                     l5629:
  9384  002BCC  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9385  002BD0  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9386  002BD4  50DF               	movf	indf2,w,c
  9387  002BD6  0B02               	andlw	2
  9388  002BD8  EF56  F016         	goto	l40
  9389  002BDC                     l5635:
  9390  002BDC  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9391  002BE0  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9392  002BE4  50DF               	movf	indf2,w,c
  9393  002BE6  0B01               	andlw	1
  9394  002BE8  EF56  F016         	goto	l40
  9395  002BEC                     l5641:
  9396  002BEC  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9397  002BF0  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9398  002BF4  50DF               	movf	indf2,w,c
  9399  002BF6  0B08               	andlw	8
  9400  002BF8  EF56  F016         	goto	l40
  9401  002BFC                     l5647:
  9402  002BFC  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9403  002C00  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9404  002C04  50DF               	movf	indf2,w,c
  9405  002C06  0B04               	andlw	4
  9406  002C08  EF56  F016         	goto	l40
  9407  002C0C                     l5653:
  9408  002C0C  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9409  002C10  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9410  002C14  50DF               	movf	indf2,w,c
  9411  002C16  0B20               	andlw	32
  9412  002C18  EF56  F016         	goto	l40
  9413  002C1C                     l5659:
  9414  002C1C  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9415  002C20  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9416  002C24  50DF               	movf	indf2,w,c
  9417  002C26  0B10               	andlw	16
  9418  002C28  EF56  F016         	goto	l40
  9419  002C2C                     l5665:
  9420  002C2C  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9421  002C30  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9422  002C34  50DF               	movf	indf2,w,c
  9423  002C36  0B80               	andlw	128
  9424  002C38  EF56  F016         	goto	l40
  9425  002C3C                     l5671:
  9426  002C3C  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9427  002C40  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9428  002C44  50DF               	movf	indf2,w,c
  9429  002C46  0B40               	andlw	64
  9430  002C48  EF56  F016         	goto	l40
  9431  002C4C                     l5677:
  9432  002C4C  0E00               	movlw	0
  9433  002C4E  EF56  F016         	goto	l40
  9434  002C52                     l5685:
  9435  002C52  5035               	movf	ler_sensor@passo^0,w,c
  9436  002C54  6E33               	movwf	??_ler_sensor^0,c
  9437  002C56  6A34               	clrf	(??_ler_sensor+1)^0,c
  9438                           
  9439                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9440                           ; Switch size 1, requested type "simple"
  9441                           ; Number of cases is 1, Range of values is 0 to 0
  9442                           ; switch strategies available:
  9443                           ; Name         Instructions Cycles
  9444                           ; simple_byte            4     3 (average)
  9445                           ;	Chosen strategy is simple_byte
  9446  002C58  5034               	movf	(??_ler_sensor+1)^0,w,c
  9447  002C5A  0A00               	xorlw	0	; case 0
  9448  002C5C  B4D8               	btfsc	status,2,c
  9449  002C5E  EF33  F016         	goto	l8023
  9450  002C62  EF26  F016         	goto	l5677
  9451  002C66                     l8023:
  9452                           
  9453                           ; Switch size 1, requested type "simple"
  9454                           ; Number of cases is 8, Range of values is 65 to 100
  9455                           ; switch strategies available:
  9456                           ; Name         Instructions Cycles
  9457                           ; simple_byte           25    13 (average)
  9458                           ;	Chosen strategy is simple_byte
  9459  002C66  5033               	movf	??_ler_sensor^0,w,c
  9460  002C68  0A41               	xorlw	65	; case 65
  9461  002C6A  B4D8               	btfsc	status,2,c
  9462  002C6C  EFE6  F015         	goto	l5629
  9463  002C70  0A03               	xorlw	3	; case 66
  9464  002C72  B4D8               	btfsc	status,2,c
  9465  002C74  EFF6  F015         	goto	l5641
  9466  002C78  0A01               	xorlw	1	; case 67
  9467  002C7A  B4D8               	btfsc	status,2,c
  9468  002C7C  EF06  F016         	goto	l5653
  9469  002C80  0A07               	xorlw	7	; case 68
  9470  002C82  B4D8               	btfsc	status,2,c
  9471  002C84  EF16  F016         	goto	l5665
  9472  002C88  0A25               	xorlw	37	; case 97
  9473  002C8A  B4D8               	btfsc	status,2,c
  9474  002C8C  EFEE  F015         	goto	l5635
  9475  002C90  0A03               	xorlw	3	; case 98
  9476  002C92  B4D8               	btfsc	status,2,c
  9477  002C94  EFFE  F015         	goto	l5647
  9478  002C98  0A01               	xorlw	1	; case 99
  9479  002C9A  B4D8               	btfsc	status,2,c
  9480  002C9C  EF0E  F016         	goto	l5659
  9481  002CA0  0A07               	xorlw	7	; case 100
  9482  002CA2  B4D8               	btfsc	status,2,c
  9483  002CA4  EF1E  F016         	goto	l5671
  9484  002CA8  EF26  F016         	goto	l5677
  9485  002CAC                     l40:
  9486  002CAC  0012               	return		;funcret
  9487  002CAE                     __end_of_ler_sensor:
  9488                           	callstack 0
  9489                           
  9490 ;; *************** function _init_atuadores *****************
  9491 ;; Defined at:
  9492 ;;		line 103 in file "fifo.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;		None
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;		None
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		None
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9506 ;;      Params:         0       0       0       0       0       0       0       0       0
  9507 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9508 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9509 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9510 ;;Total ram usage:        0 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    2
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_main
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           	psect	text26
  9521  0040B4                     __ptext26:
  9522                           	callstack 0
  9523  0040B4                     _init_atuadores:
  9524                           	callstack 28
  9525  0040B4                     
  9526                           ;fifo.c: 105:     atuador.A = 0;
  9527  0040B4  901E               	bcf	_atuador^0,0,c
  9528                           
  9529                           ;fifo.c: 106:     atuador.B = 0;
  9530  0040B6  921E               	bcf	_atuador^0,1,c
  9531                           
  9532                           ;fifo.c: 107:     atuador.C = 0;
  9533  0040B8  941E               	bcf	_atuador^0,2,c
  9534                           
  9535                           ;fifo.c: 108:     atuador.D = 0;
  9536  0040BA  961E               	bcf	_atuador^0,3,c
  9537  0040BC  0012               	return		;funcret
  9538  0040BE                     __end_of_init_atuadores:
  9539                           	callstack 0
  9540                           
  9541 ;; *************** function _initSerialIO *****************
  9542 ;; Defined at:
  9543 ;;		line 89 in file "serialIO.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  ptrIn           2    0[COMRAM] PTR unsigned char 
  9546 ;;		 -> main@vetorIn(1), 
  9547 ;;  ptrOut          2    2[COMRAM] PTR unsigned char 
  9548 ;;		 -> main@vetorOut(1), 
  9549 ;;  length          1    4[COMRAM] unsigned char 
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, status,2, status,0
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9561 ;;      Params:         5       0       0       0       0       0       0       0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9564 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9565 ;;Total ram usage:        5 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    2
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_main
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text27
  9576  003DBE                     __ptext27:
  9577                           	callstack 0
  9578  003DBE                     _initSerialIO:
  9579                           	callstack 28
  9580  003DBE                     
  9581                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ADCON1 = 0xFF;
  9582  003DBE  68C1               	setf	193,c	;volatile
  9583  003DC0                     
  9584                           ;serialIO.c: 93:     ptrSerialIn = ptrIn;
  9585  003DC0  C031  F015         	movff	initSerialIO@ptrIn,_ptrSerialIn
  9586  003DC4  C032  F016         	movff	initSerialIO@ptrIn+1,_ptrSerialIn+1
  9587                           
  9588                           ;serialIO.c: 94:     ptrSerialOut = ptrOut;
  9589  003DC8  C033  F013         	movff	initSerialIO@ptrOut,_ptrSerialOut
  9590  003DCC  C034  F014         	movff	initSerialIO@ptrOut+1,_ptrSerialOut+1
  9591  003DD0                     
  9592                           ;serialIO.c: 95:     lenSerialIO = length;
  9593  003DD0  C035  F01C         	movff	initSerialIO@length,_lenSerialIO
  9594  003DD4                     
  9595                           ;serialIO.c: 97:     PORTAbits.RA3 = 0;
  9596  003DD4  9680               	bcf	128,3,c	;volatile
  9597  003DD6                     
  9598                           ;serialIO.c: 99:     TRISAbits.TRISA3 = 0;
  9599  003DD6  9692               	bcf	146,3,c	;volatile
  9600  003DD8                     
  9601                           ;serialIO.c: 102:     PORTAbits.RA2 = 0;
  9602  003DD8  9480               	bcf	128,2,c	;volatile
  9603  003DDA                     
  9604                           ;serialIO.c: 104:     TRISAbits.TRISA2 = 0;
  9605  003DDA  9492               	bcf	146,2,c	;volatile
  9606  003DDC                     
  9607                           ;serialIO.c: 107:     PORTAbits.RA0 = 0;
  9608  003DDC  9080               	bcf	128,0,c	;volatile
  9609  003DDE                     
  9610                           ;serialIO.c: 109:     TRISAbits.TRISA0 = 0;
  9611  003DDE  9092               	bcf	146,0,c	;volatile
  9612  003DE0                     
  9613                           ;serialIO.c: 112:     PORTAbits.RA1 = 0;
  9614  003DE0  9280               	bcf	128,1,c	;volatile
  9615  003DE2                     
  9616                           ;serialIO.c: 114:     TRISAbits.TRISA1 = 1;
  9617  003DE2  8292               	bsf	146,1,c	;volatile
  9618  003DE4                     
  9619                           ;serialIO.c: 117:     SERIALIO.CLK = 0;
  9620  003DE4  9480               	bcf	128,2,c	;volatile
  9621  003DE6                     
  9622                           ;serialIO.c: 118:     SERIALIO.OUT = 0;
  9623  003DE6  9080               	bcf	128,0,c	;volatile
  9624  003DE8                     
  9625                           ;serialIO.c: 119:     SERIALIO.SHLD = 1;
  9626  003DE8  8680               	bsf	128,3,c	;volatile
  9627  003DEA  0012               	return		;funcret
  9628  003DEC                     __end_of_initSerialIO:
  9629                           	callstack 0
  9630                           
  9631 ;; *************** function _getContCiclos *****************
  9632 ;; Defined at:
  9633 ;;		line 49 in file "fifo.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  2    0[COMRAM] unsigned int 
  9640 ;; Registers used:
  9641 ;;		None
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9647 ;;      Params:         2       0       0       0       0       0       0       0       0
  9648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9650 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9651 ;;Total ram usage:        2 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    2
  9654 ;; This function calls:
  9655 ;;		Nothing
  9656 ;; This function is called by:
  9657 ;;		_main
  9658 ;; This function uses a non-reentrant model
  9659 ;;
  9660                           
  9661                           	psect	text28
  9662  0040BE                     __ptext28:
  9663                           	callstack 0
  9664  0040BE                     _getContCiclos:
  9665                           	callstack 28
  9666  0040BE                     
  9667                           ;fifo.c: 51:     return(cont_ciclos);
  9668  0040BE  C017  F031         	movff	_cont_ciclos,?_getContCiclos
  9669  0040C2  C018  F032         	movff	_cont_ciclos+1,?_getContCiclos+1
  9670  0040C6  0012               	return		;funcret
  9671  0040C8                     __end_of_getContCiclos:
  9672                           	callstack 0
  9673                           
  9674 ;; *************** function _getCiclos *****************
  9675 ;; Defined at:
  9676 ;;		line 41 in file "fifo.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;		None
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;  aux             2    2[COMRAM] int 
  9681 ;; Return value:  Size  Location     Type
  9682 ;;                  2    0[COMRAM] unsigned int 
  9683 ;; Registers used:
  9684 ;;		wreg, status,2, status,0
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9690 ;;      Params:         2       0       0       0       0       0       0       0       0
  9691 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9693 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9694 ;;Total ram usage:        4 bytes
  9695 ;; Hardware stack levels used:    1
  9696 ;; Hardware stack levels required when called:    2
  9697 ;; This function calls:
  9698 ;;		Nothing
  9699 ;; This function is called by:
  9700 ;;		_main
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           	psect	text29
  9705  003F58                     __ptext29:
  9706                           	callstack 0
  9707  003F58                     _getCiclos:
  9708                           	callstack 28
  9709  003F58                     
  9710                           ;fifo.c: 43:     int aux = fila[1];
  9711  003F58  C020  F033         	movff	_fila+1,getCiclos@aux
  9712  003F5C  6A34               	clrf	(getCiclos@aux+1)^0,c
  9713  003F5E                     
  9714                           ;fifo.c: 44:     aux <<= 8;
  9715  003F5E  5033               	movf	getCiclos@aux^0,w,c
  9716  003F60  6E34               	movwf	(getCiclos@aux+1)^0,c
  9717  003F62  6A33               	clrf	getCiclos@aux^0,c
  9718  003F64                     
  9719                           ;fifo.c: 45:     aux +=fila[0];
  9720  003F64  501F               	movf	_fila^0,w,c
  9721  003F66  2633               	addwf	getCiclos@aux^0,f,c
  9722  003F68  0E00               	movlw	0
  9723  003F6A  2234               	addwfc	(getCiclos@aux+1)^0,f,c
  9724  003F6C                     
  9725                           ;fifo.c: 46:     return(aux);
  9726  003F6C  C033  F031         	movff	getCiclos@aux,?_getCiclos
  9727  003F70  C034  F032         	movff	getCiclos@aux+1,?_getCiclos+1
  9728  003F74  0012               	return		;funcret
  9729  003F76                     __end_of_getCiclos:
  9730                           	callstack 0
  9731                           
  9732 ;; *************** function _formatar_receitas *****************
  9733 ;; Defined at:
  9734 ;;		line 100 in file "eeprom.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  i               1    2[COMRAM] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      void 
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0, cstack
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0
  9749 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9751 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9752 ;;Total ram usage:        1 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    3
  9755 ;; This function calls:
  9756 ;;		_EEPROM_write
  9757 ;; This function is called by:
  9758 ;;		_main
  9759 ;; This function uses a non-reentrant model
  9760 ;;
  9761                           
  9762                           	psect	text30
  9763  003F90                     __ptext30:
  9764                           	callstack 0
  9765  003F90                     _formatar_receitas:
  9766                           	callstack 27
  9767  003F90                     
  9768                           ;eeprom.c: 102:     for( char i = 0;i<256;i++)
  9769  003F90  0E00               	movlw	0
  9770  003F92  6E33               	movwf	formatar_receitas@i^0,c
  9771  003F94                     l5775:
  9772                           
  9773                           ;eeprom.c: 103:            EEPROM_write(i,0);
  9774  003F94  0E00               	movlw	0
  9775  003F96  6E31               	movwf	EEPROM_write@data^0,c
  9776  003F98  5033               	movf	formatar_receitas@i^0,w,c
  9777  003F9A  EC0D  F01F         	call	_EEPROM_write
  9778  003F9E  2A33               	incf	formatar_receitas@i^0,f,c
  9779  003FA0  EFCA  F01F         	goto	l5775
  9780  003FA4  0012               	return		;funcret
  9781  003FA6                     __end_of_formatar_receitas:
  9782                           	callstack 0
  9783                           
  9784 ;; *************** function _fifo_tam *****************
  9785 ;; Defined at:
  9786 ;;		line 317 in file "fifo.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;		None
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;		None
  9791 ;; Return value:  Size  Location     Type
  9792 ;;                  1    wreg      unsigned char 
  9793 ;; Registers used:
  9794 ;;		wreg
  9795 ;; Tracked objects:
  9796 ;;		On entry : 0/0
  9797 ;;		On exit  : 0/0
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9800 ;;      Params:         0       0       0       0       0       0       0       0       0
  9801 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9803 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9804 ;;Total ram usage:        0 bytes
  9805 ;; Hardware stack levels used:    1
  9806 ;; Hardware stack levels required when called:    2
  9807 ;; This function calls:
  9808 ;;		Nothing
  9809 ;; This function is called by:
  9810 ;;		_main
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           	psect	text31
  9815  004102                     __ptext31:
  9816                           	callstack 0
  9817  004102                     _fifo_tam:
  9818                           	callstack 28
  9819  004102                     
  9820                           ;fifo.c: 319:     return( 18 );
  9821  004102  0E12               	movlw	18
  9822  004104  0012               	return		;funcret
  9823  004106                     __end_of_fifo_tam:
  9824                           	callstack 0
  9825                           
  9826 ;; *************** function _fifo_print *****************
  9827 ;; Defined at:
  9828 ;;		line 342 in file "fifo.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;		None
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;  comando         1   16[COMRAM] unsigned char 
  9833 ;;  atraso          1   15[COMRAM] unsigned char 
  9834 ;;  i               1   14[COMRAM] unsigned char 
  9835 ;;  indPrint        1   13[COMRAM] unsigned char 
  9836 ;;  completar       1   12[COMRAM] unsigned char 
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0
  9847 ;;      Locals:         7       0       0       0       0       0       0       0       0
  9848 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9849 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9850 ;;Total ram usage:        9 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    4
  9853 ;; This function calls:
  9854 ;;		___awdiv
  9855 ;;		___awmod
  9856 ;;		_decodifica
  9857 ;;		_dispLCD_dataReg
  9858 ;;		_dispLCD_lincol
  9859 ;; This function is called by:
  9860 ;;		_main
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text32
  9865  001EC8                     __ptext32:
  9866                           	callstack 0
  9867  001EC8                     _fifo_print:
  9868                           	callstack 26
  9869  001EC8                     
  9870                           ;fifo.c: 344:     char completar = 0;
  9871  001EC8  0E00               	movlw	0
  9872  001ECA  6E3D               	movwf	fifo_print@completar^0,c
  9873                           
  9874                           ;fifo.c: 346:     char atraso = 0;
  9875  001ECC  0E00               	movlw	0
  9876  001ECE  6E40               	movwf	fifo_print@atraso^0,c
  9877                           
  9878                           ;fifo.c: 347:     char i = 0;
  9879  001ED0  0E00               	movlw	0
  9880  001ED2  6E3F               	movwf	fifo_print@i^0,c
  9881  001ED4                     
  9882                           ;fifo.c: 348:     char indPrint = ind_print;
  9883  001ED4  C05C  F03E         	movff	_ind_print,fifo_print@indPrint
  9884  001ED8                     
  9885                           ;fifo.c: 350:     dispLCD_lincol(0, 0);
  9886  001ED8  0E00               	movlw	0
  9887  001EDA  6E33               	movwf	dispLCD_lincol@col^0,c
  9888  001EDC  0E00               	movlw	0
  9889  001EDE  EC5A  F01B         	call	_dispLCD_lincol
  9890  001EE2                     l5943:
  9891                           
  9892                           ;fifo.c: 352:     {;fifo.c: 353:         if( completar )
  9893  001EE2  503D               	movf	fifo_print@completar^0,w,c
  9894  001EE4  B4D8               	btfsc	status,2,c
  9895  001EE6  EF77  F00F         	goto	u4131
  9896  001EEA  EF79  F00F         	goto	u4130
  9897  001EEE                     u4131:
  9898  001EEE  EF7F  F00F         	goto	l5949
  9899  001EF2                     u4130:
  9900  001EF2                     
  9901                           ;fifo.c: 354:         {;fifo.c: 355:             dispLCD_dataReg(' ');
  9902  001EF2  0E20               	movlw	32
  9903  001EF4  ECED  F01C         	call	_dispLCD_dataReg
  9904  001EF8                     l5947:
  9905                           
  9906                           ;fifo.c: 356:             ++i;
  9907  001EF8  2A3F               	incf	fifo_print@i^0,f,c
  9908                           
  9909                           ;fifo.c: 357:         }
  9910  001EFA  EFCD  F010         	goto	l6063
  9911  001EFE                     l5949:
  9912                           
  9913                           ;fifo.c: 359:         {;fifo.c: 360:             comando = fila[indPrint++];
  9914  001EFE  0E1F               	movlw	low _fila
  9915  001F00  243E               	addwf	fifo_print@indPrint^0,w,c
  9916  001F02  6ED9               	movwf	fsr2l,c
  9917  001F04  6ADA               	clrf	fsr2h,c
  9918  001F06  0E00               	movlw	high _fila
  9919  001F08  22DA               	addwfc	fsr2h,f,c
  9920  001F0A  50DF               	movf	indf2,w,c
  9921  001F0C  6E41               	movwf	fifo_print@comando^0,c
  9922  001F0E  2A3E               	incf	fifo_print@indPrint^0,f,c
  9923  001F10                     
  9924                           ;fifo.c: 362:             if( comando == 0 )
  9925  001F10  5041               	movf	fifo_print@comando^0,w,c
  9926  001F12  A4D8               	btfss	status,2,c
  9927  001F14  EF8E  F00F         	goto	u4141
  9928  001F18  EF90  F00F         	goto	u4140
  9929  001F1C                     u4141:
  9930  001F1C  EF94  F00F         	goto	l5957
  9931  001F20                     u4140:
  9932  001F20                     
  9933                           ;fifo.c: 363:                 completar = 1;
  9934  001F20  0E01               	movlw	1
  9935  001F22  6E3D               	movwf	fifo_print@completar^0,c
  9936  001F24  EFCD  F010         	goto	l6063
  9937  001F28                     l5957:
  9938  001F28  0E65               	movlw	101
  9939  001F2A  6041               	cpfslt	fifo_print@comando^0,c
  9940  001F2C  EF9A  F00F         	goto	u4151
  9941  001F30  EF9C  F00F         	goto	u4150
  9942  001F34                     u4151:
  9943  001F34  EFEC  F00F         	goto	l5989
  9944  001F38                     u4150:
  9945  001F38                     
  9946                           ;fifo.c: 365:             {;fifo.c: 366:                 atraso = comando;
  9947  001F38  C041  F040         	movff	fifo_print@comando,fifo_print@atraso
  9948  001F3C                     
  9949                           ;fifo.c: 367:                 if( atraso >= 100 )
  9950  001F3C  0E63               	movlw	99
  9951  001F3E  6440               	cpfsgt	fifo_print@atraso^0,c
  9952  001F40  EFA4  F00F         	goto	u4161
  9953  001F44  EFA6  F00F         	goto	u4160
  9954  001F48                     u4161:
  9955  001F48  EFC1  F00F         	goto	l5975
  9956  001F4C                     u4160:
  9957  001F4C                     
  9958                           ;fifo.c: 368:                 {;fifo.c: 369:                     dispLCD_dataReg('1');
  9959  001F4C  0E31               	movlw	49
  9960  001F4E  ECED  F01C         	call	_dispLCD_dataReg
  9961  001F52                     
  9962                           ;fifo.c: 370:                     ++i;
  9963  001F52  2A3F               	incf	fifo_print@i^0,f,c
  9964  001F54                     
  9965                           ;fifo.c: 371:                     atraso %= 100;
  9966  001F54  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
  9967  001F58  6A32               	clrf	(___awmod@dividend+1)^0,c
  9968  001F5A  0E00               	movlw	0
  9969  001F5C  6E34               	movwf	(___awmod@divisor+1)^0,c
  9970  001F5E  0E64               	movlw	100
  9971  001F60  6E33               	movwf	___awmod@divisor^0,c
  9972  001F62  EC9E  F017         	call	___awmod	;wreg free
  9973  001F66  5031               	movf	?___awmod^0,w,c
  9974  001F68  6E40               	movwf	fifo_print@atraso^0,c
  9975  001F6A                     
  9976                           ;fifo.c: 372:                     if(atraso < 10)
  9977  001F6A  0E0A               	movlw	10
  9978  001F6C  6040               	cpfslt	fifo_print@atraso^0,c
  9979  001F6E  EFBB  F00F         	goto	u4171
  9980  001F72  EFBD  F00F         	goto	u4170
  9981  001F76                     u4171:
  9982  001F76  EFC1  F00F         	goto	l5975
  9983  001F7A                     u4170:
  9984  001F7A                     
  9985                           ;fifo.c: 373:                     {;fifo.c: 374:                         dispLCD_dataReg
      +                          ('0');
  9986  001F7A  0E30               	movlw	48
  9987  001F7C  ECED  F01C         	call	_dispLCD_dataReg
  9988  001F80                     
  9989                           ;fifo.c: 375:                         ++i;
  9990  001F80  2A3F               	incf	fifo_print@i^0,f,c
  9991  001F82                     l5975:
  9992                           
  9993                           ;fifo.c: 378:                 if( atraso >= 10 )
  9994  001F82  0E09               	movlw	9
  9995  001F84  6440               	cpfsgt	fifo_print@atraso^0,c
  9996  001F86  EFC7  F00F         	goto	u4181
  9997  001F8A  EFC9  F00F         	goto	u4180
  9998  001F8E                     u4181:
  9999  001F8E  EFE2  F00F         	goto	l5983
 10000  001F92                     u4180:
 10001  001F92                     
 10002                           ;fifo.c: 379:                 {;fifo.c: 380:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
 10003  001F92  C040  F031         	movff	fifo_print@atraso,___awdiv@dividend
 10004  001F96  6A32               	clrf	(___awdiv@dividend+1)^0,c
 10005  001F98  0E00               	movlw	0
 10006  001F9A  6E34               	movwf	(___awdiv@divisor+1)^0,c
 10007  001F9C  0E0A               	movlw	10
 10008  001F9E  6E33               	movwf	___awdiv@divisor^0,c
 10009  001FA0  EC3C  F017         	call	___awdiv	;wreg free
 10010  001FA4  5031               	movf	?___awdiv^0,w,c
 10011  001FA6  0F30               	addlw	48
 10012  001FA8  ECED  F01C         	call	_dispLCD_dataReg
 10013  001FAC                     
 10014                           ;fifo.c: 381:                     ++i;
 10015  001FAC  2A3F               	incf	fifo_print@i^0,f,c
 10016  001FAE                     
 10017                           ;fifo.c: 382:                     atraso %= 10;
 10018  001FAE  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
 10019  001FB2  6A32               	clrf	(___awmod@dividend+1)^0,c
 10020  001FB4  0E00               	movlw	0
 10021  001FB6  6E34               	movwf	(___awmod@divisor+1)^0,c
 10022  001FB8  0E0A               	movlw	10
 10023  001FBA  6E33               	movwf	___awmod@divisor^0,c
 10024  001FBC  EC9E  F017         	call	___awmod	;wreg free
 10025  001FC0  5031               	movf	?___awmod^0,w,c
 10026  001FC2  6E40               	movwf	fifo_print@atraso^0,c
 10027  001FC4                     l5983:
 10028                           
 10029                           ;fifo.c: 385:                 dispLCD_dataReg(atraso + '0');
 10030  001FC4  5040               	movf	fifo_print@atraso^0,w,c
 10031  001FC6  0F30               	addlw	48
 10032  001FC8  ECED  F01C         	call	_dispLCD_dataReg
 10033  001FCC                     
 10034                           ;fifo.c: 386:                 ++i;
 10035  001FCC  2A3F               	incf	fifo_print@i^0,f,c
 10036                           
 10037                           ;fifo.c: 388:                 dispLCD_dataReg('%');
 10038  001FCE  0E25               	movlw	37
 10039  001FD0  ECED  F01C         	call	_dispLCD_dataReg
 10040  001FD4  EF7C  F00F         	goto	l5947
 10041  001FD8                     l5989:
 10042  001FD8  0E64               	movlw	100
 10043  001FDA  6441               	cpfsgt	fifo_print@comando^0,c
 10044  001FDC  EFF2  F00F         	goto	u4191
 10045  001FE0  EFF4  F00F         	goto	u4190
 10046  001FE4                     u4191:
 10047  001FE4  EF52  F010         	goto	l6025
 10048  001FE8                     u4190:
 10049  001FE8  0EDD               	movlw	221
 10050  001FEA  6041               	cpfslt	fifo_print@comando^0,c
 10051  001FEC  EFFA  F00F         	goto	u4201
 10052  001FF0  EFFC  F00F         	goto	u4200
 10053  001FF4                     u4201:
 10054  001FF4  EF52  F010         	goto	l6025
 10055  001FF8                     u4200:
 10056  001FF8                     
 10057                           ;fifo.c: 393:             {;fifo.c: 394:                 decodifica(&comando);
 10058  001FF8  0E41               	movlw	low fifo_print@comando
 10059  001FFA  6E31               	movwf	decodifica@d^0,c
 10060  001FFC  0E00               	movlw	high fifo_print@comando
 10061  001FFE  6E32               	movwf	(decodifica@d+1)^0,c
 10062  002000  ECA9  F013         	call	_decodifica	;wreg free
 10063  002004                     
 10064                           ;fifo.c: 395:                 atraso = comando;
 10065  002004  C041  F040         	movff	fifo_print@comando,fifo_print@atraso
 10066  002008                     
 10067                           ;fifo.c: 397:                 if( atraso >= 100 )
 10068  002008  0E63               	movlw	99
 10069  00200A  6440               	cpfsgt	fifo_print@atraso^0,c
 10070  00200C  EF0A  F010         	goto	u4211
 10071  002010  EF0C  F010         	goto	u4210
 10072  002014                     u4211:
 10073  002014  EF27  F010         	goto	l6011
 10074  002018                     u4210:
 10075  002018                     
 10076                           ;fifo.c: 398:                 {;fifo.c: 399:                     dispLCD_dataReg('1');
 10077  002018  0E31               	movlw	49
 10078  00201A  ECED  F01C         	call	_dispLCD_dataReg
 10079  00201E                     
 10080                           ;fifo.c: 400:                     ++i;
 10081  00201E  2A3F               	incf	fifo_print@i^0,f,c
 10082  002020                     
 10083                           ;fifo.c: 401:                     atraso %= 100;
 10084  002020  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
 10085  002024  6A32               	clrf	(___awmod@dividend+1)^0,c
 10086  002026  0E00               	movlw	0
 10087  002028  6E34               	movwf	(___awmod@divisor+1)^0,c
 10088  00202A  0E64               	movlw	100
 10089  00202C  6E33               	movwf	___awmod@divisor^0,c
 10090  00202E  EC9E  F017         	call	___awmod	;wreg free
 10091  002032  5031               	movf	?___awmod^0,w,c
 10092  002034  6E40               	movwf	fifo_print@atraso^0,c
 10093  002036                     
 10094                           ;fifo.c: 402:                     if(atraso < 10)
 10095  002036  0E0A               	movlw	10
 10096  002038  6040               	cpfslt	fifo_print@atraso^0,c
 10097  00203A  EF21  F010         	goto	u4221
 10098  00203E  EF23  F010         	goto	u4220
 10099  002042                     u4221:
 10100  002042  EF27  F010         	goto	l6011
 10101  002046                     u4220:
 10102  002046                     
 10103                           ;fifo.c: 403:                     {;fifo.c: 404:                         dispLCD_dataReg
      +                          ('0');
 10104  002046  0E30               	movlw	48
 10105  002048  ECED  F01C         	call	_dispLCD_dataReg
 10106  00204C                     
 10107                           ;fifo.c: 405:                         ++i;
 10108  00204C  2A3F               	incf	fifo_print@i^0,f,c
 10109  00204E                     l6011:
 10110                           
 10111                           ;fifo.c: 408:                 if( atraso >= 10 )
 10112  00204E  0E09               	movlw	9
 10113  002050  6440               	cpfsgt	fifo_print@atraso^0,c
 10114  002052  EF2D  F010         	goto	u4231
 10115  002056  EF2F  F010         	goto	u4230
 10116  00205A                     u4231:
 10117  00205A  EF48  F010         	goto	l6019
 10118  00205E                     u4230:
 10119  00205E                     
 10120                           ;fifo.c: 409:                 {;fifo.c: 410:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
 10121  00205E  C040  F031         	movff	fifo_print@atraso,___awdiv@dividend
 10122  002062  6A32               	clrf	(___awdiv@dividend+1)^0,c
 10123  002064  0E00               	movlw	0
 10124  002066  6E34               	movwf	(___awdiv@divisor+1)^0,c
 10125  002068  0E0A               	movlw	10
 10126  00206A  6E33               	movwf	___awdiv@divisor^0,c
 10127  00206C  EC3C  F017         	call	___awdiv	;wreg free
 10128  002070  5031               	movf	?___awdiv^0,w,c
 10129  002072  0F30               	addlw	48
 10130  002074  ECED  F01C         	call	_dispLCD_dataReg
 10131  002078                     
 10132                           ;fifo.c: 411:                     ++i;
 10133  002078  2A3F               	incf	fifo_print@i^0,f,c
 10134  00207A                     
 10135                           ;fifo.c: 412:                     atraso %= 10;
 10136  00207A  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
 10137  00207E  6A32               	clrf	(___awmod@dividend+1)^0,c
 10138  002080  0E00               	movlw	0
 10139  002082  6E34               	movwf	(___awmod@divisor+1)^0,c
 10140  002084  0E0A               	movlw	10
 10141  002086  6E33               	movwf	___awmod@divisor^0,c
 10142  002088  EC9E  F017         	call	___awmod	;wreg free
 10143  00208C  5031               	movf	?___awmod^0,w,c
 10144  00208E  6E40               	movwf	fifo_print@atraso^0,c
 10145  002090                     l6019:
 10146                           
 10147                           ;fifo.c: 415:                 dispLCD_dataReg(atraso + '0');
 10148  002090  5040               	movf	fifo_print@atraso^0,w,c
 10149  002092  0F30               	addlw	48
 10150  002094  ECED  F01C         	call	_dispLCD_dataReg
 10151  002098                     
 10152                           ;fifo.c: 416:                 ++i;
 10153  002098  2A3F               	incf	fifo_print@i^0,f,c
 10154                           
 10155                           ;fifo.c: 418:                 dispLCD_dataReg('s');
 10156  00209A  0E73               	movlw	115
 10157  00209C  ECED  F01C         	call	_dispLCD_dataReg
 10158  0020A0  EF7C  F00F         	goto	l5947
 10159  0020A4                     l6025:
 10160  0020A4  0EDC               	movlw	220
 10161  0020A6  6441               	cpfsgt	fifo_print@comando^0,c
 10162  0020A8  EF58  F010         	goto	u4241
 10163  0020AC  EF5A  F010         	goto	u4240
 10164  0020B0                     u4241:
 10165  0020B0  EFB2  F010         	goto	l6049
 10166  0020B4                     u4240:
 10167  0020B4  0EFE               	movlw	254
 10168  0020B6  6041               	cpfslt	fifo_print@comando^0,c
 10169  0020B8  EF60  F010         	goto	u4251
 10170  0020BC  EF62  F010         	goto	u4250
 10171  0020C0                     u4251:
 10172  0020C0  EFB2  F010         	goto	l6049
 10173  0020C4                     u4250:
 10174  0020C4                     
 10175                           ;fifo.c: 422:             {;fifo.c: 423:                 decodifica(&comando);
 10176  0020C4  0E41               	movlw	low fifo_print@comando
 10177  0020C6  6E31               	movwf	decodifica@d^0,c
 10178  0020C8  0E00               	movlw	high fifo_print@comando
 10179  0020CA  6E32               	movwf	(decodifica@d+1)^0,c
 10180  0020CC  ECA9  F013         	call	_decodifica	;wreg free
 10181                           
 10182                           ;fifo.c: 424:                 switch( comando )
 10183  0020D0  EF85  F010         	goto	l6047
 10184  0020D4                     l404:
 10185  0020D4                     l6031:
 10186                           
 10187                           ;fifo.c: 434:                                 dispLCD_dataReg( comando & ~0x20 );
 10188  0020D4  5041               	movf	fifo_print@comando^0,w,c
 10189  0020D6  0BDF               	andlw	223
 10190  0020D8  ECED  F01C         	call	_dispLCD_dataReg
 10191  0020DC                     
 10192                           ;fifo.c: 435:                                 ++i;
 10193  0020DC  2A3F               	incf	fifo_print@i^0,f,c
 10194  0020DE                     
 10195                           ;fifo.c: 436:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
 10196  0020DE  BA41               	btfsc	fifo_print@comando^0,5,c
 10197  0020E0  EF74  F010         	goto	u4261
 10198  0020E4  EF76  F010         	goto	u4260
 10199  0020E8                     u4261:
 10200  0020E8  EF7C  F010         	goto	l6039
 10201  0020EC                     u4260:
 10202  0020EC  0E00               	movlw	0
 10203  0020EE  6E3C               	movwf	(_fifo_print$473+1)^0,c
 10204  0020F0  0E2B               	movlw	43
 10205  0020F2  6E3B               	movwf	_fifo_print$473^0,c
 10206  0020F4  EF80  F010         	goto	l6041
 10207  0020F8                     l6039:
 10208  0020F8  0E00               	movlw	0
 10209  0020FA  6E3C               	movwf	(_fifo_print$473+1)^0,c
 10210  0020FC  0E2D               	movlw	45
 10211  0020FE  6E3B               	movwf	_fifo_print$473^0,c
 10212  002100                     l6041:
 10213  002100  503B               	movf	_fifo_print$473^0,w,c
 10214  002102  ECED  F01C         	call	_dispLCD_dataReg
 10215  002106  EF7C  F00F         	goto	l5947
 10216  00210A                     l6047:
 10217  00210A  5041               	movf	fifo_print@comando^0,w,c
 10218  00210C  6E39               	movwf	??_fifo_print^0,c
 10219  00210E  6A3A               	clrf	(??_fifo_print+1)^0,c
 10220                           
 10221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10222                           ; Switch size 1, requested type "simple"
 10223                           ; Number of cases is 1, Range of values is 0 to 0
 10224                           ; switch strategies available:
 10225                           ; Name         Instructions Cycles
 10226                           ; simple_byte            4     3 (average)
 10227                           ;	Chosen strategy is simple_byte
 10228  002110  503A               	movf	(??_fifo_print+1)^0,w,c
 10229  002112  0A00               	xorlw	0	; case 0
 10230  002114  B4D8               	btfsc	status,2,c
 10231  002116  EF8F  F010         	goto	l8025
 10232  00211A  EFCD  F010         	goto	l393
 10233  00211E                     l8025:
 10234                           
 10235                           ; Switch size 1, requested type "simple"
 10236                           ; Number of cases is 8, Range of values is 65 to 100
 10237                           ; switch strategies available:
 10238                           ; Name         Instructions Cycles
 10239                           ; simple_byte           25    13 (average)
 10240                           ;	Chosen strategy is simple_byte
 10241  00211E  5039               	movf	??_fifo_print^0,w,c
 10242  002120  0A41               	xorlw	65	; case 65
 10243  002122  B4D8               	btfsc	status,2,c
 10244  002124  EF6A  F010         	goto	l404
 10245  002128  0A03               	xorlw	3	; case 66
 10246  00212A  B4D8               	btfsc	status,2,c
 10247  00212C  EF6A  F010         	goto	l6031
 10248  002130  0A01               	xorlw	1	; case 67
 10249  002132  B4D8               	btfsc	status,2,c
 10250  002134  EF6A  F010         	goto	l6031
 10251  002138  0A07               	xorlw	7	; case 68
 10252  00213A  B4D8               	btfsc	status,2,c
 10253  00213C  EF6A  F010         	goto	l6031
 10254  002140  0A25               	xorlw	37	; case 97
 10255  002142  B4D8               	btfsc	status,2,c
 10256  002144  EF6A  F010         	goto	l6031
 10257  002148  0A03               	xorlw	3	; case 98
 10258  00214A  B4D8               	btfsc	status,2,c
 10259  00214C  EF6A  F010         	goto	l6031
 10260  002150  0A01               	xorlw	1	; case 99
 10261  002152  B4D8               	btfsc	status,2,c
 10262  002154  EF6A  F010         	goto	l6031
 10263  002158  0A07               	xorlw	7	; case 100
 10264  00215A  B4D8               	btfsc	status,2,c
 10265  00215C  EF6A  F010         	goto	l6031
 10266  002160  EFCD  F010         	goto	l393
 10267  002164                     l6049:
 10268                           
 10269                           ;fifo.c: 442:             {;fifo.c: 443:                 if(comando == 0xFE)
 10270  002164  0EFE               	movlw	254
 10271  002166  1841               	xorwf	fifo_print@comando^0,w,c
 10272  002168  A4D8               	btfss	status,2,c
 10273  00216A  EFB9  F010         	goto	u4271
 10274  00216E  EFBB  F010         	goto	u4270
 10275  002172                     u4271:
 10276  002172  EFCD  F010         	goto	l393
 10277  002176                     u4270:
 10278  002176                     
 10279                           ;fifo.c: 444:                 {;fifo.c: 445:                     decodifica(&comando);
 10280  002176  0E41               	movlw	low fifo_print@comando
 10281  002178  6E31               	movwf	decodifica@d^0,c
 10282  00217A  0E00               	movlw	high fifo_print@comando
 10283  00217C  6E32               	movwf	(decodifica@d+1)^0,c
 10284  00217E  ECA9  F013         	call	_decodifica	;wreg free
 10285  002182                     
 10286                           ;fifo.c: 446:                     atraso = comando;
 10287  002182  C041  F040         	movff	fifo_print@comando,fifo_print@atraso
 10288  002186                     
 10289                           ;fifo.c: 448:                     dispLCD_dataReg(atraso + '0');
 10290  002186  5040               	movf	fifo_print@atraso^0,w,c
 10291  002188  0F30               	addlw	48
 10292  00218A  ECED  F01C         	call	_dispLCD_dataReg
 10293  00218E                     
 10294                           ;fifo.c: 449:                     ++i;
 10295  00218E  2A3F               	incf	fifo_print@i^0,f,c
 10296  002190                     
 10297                           ;fifo.c: 451:                     dispLCD_dataReg('%');
 10298  002190  0E25               	movlw	37
 10299  002192  ECED  F01C         	call	_dispLCD_dataReg
 10300  002196  EF7C  F00F         	goto	l5947
 10301  00219A                     l393:
 10302  00219A                     l6063:
 10303                           
 10304                           ;fifo.c: 456:     }
 10305  00219A  0E14               	movlw	20
 10306  00219C  643F               	cpfsgt	fifo_print@i^0,c
 10307  00219E  EFD3  F010         	goto	u4281
 10308  0021A2  EFD5  F010         	goto	u4280
 10309  0021A6                     u4281:
 10310  0021A6  EF71  F00F         	goto	l5943
 10311  0021AA                     u4280:
 10312  0021AA  0012               	return		;funcret
 10313  0021AC                     __end_of_fifo_print:
 10314                           	callstack 0
 10315                           
 10316 ;; *************** function ___awmod *****************
 10317 ;; Defined at:
 10318 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awmod.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;  dividend        2    0[COMRAM] int 
 10321 ;;  divisor         2    2[COMRAM] int 
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;  sign            1    5[COMRAM] unsigned char 
 10324 ;;  counter         1    4[COMRAM] unsigned char 
 10325 ;; Return value:  Size  Location     Type
 10326 ;;                  2    0[COMRAM] int 
 10327 ;; Registers used:
 10328 ;;		wreg, status,2, status,0
 10329 ;; Tracked objects:
 10330 ;;		On entry : 0/0
 10331 ;;		On exit  : 0/0
 10332 ;;		Unchanged: 0/0
 10333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10334 ;;      Params:         4       0       0       0       0       0       0       0       0
 10335 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10336 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10337 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10338 ;;Total ram usage:        6 bytes
 10339 ;; Hardware stack levels used:    1
 10340 ;; Hardware stack levels required when called:    2
 10341 ;; This function calls:
 10342 ;;		Nothing
 10343 ;; This function is called by:
 10344 ;;		_dispLCD_num
 10345 ;;		_fifo_print
 10346 ;;		_main
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           	psect	text33
 10351  002F3C                     __ptext33:
 10352                           	callstack 0
 10353  002F3C                     ___awmod:
 10354                           	callstack 26
 10355  002F3C  0E00               	movlw	0
 10356  002F3E  6E36               	movwf	___awmod@sign^0,c
 10357  002F40  BE32               	btfsc	(___awmod@dividend+1)^0,7,c
 10358  002F42  EFA7  F017         	goto	u3290
 10359  002F46  EFA5  F017         	goto	u3291
 10360  002F4A                     u3291:
 10361  002F4A  EFAD  F017         	goto	l5213
 10362  002F4E                     u3290:
 10363  002F4E  6C31               	negf	___awmod@dividend^0,c
 10364  002F50  1E32               	comf	(___awmod@dividend+1)^0,f,c
 10365  002F52  B0D8               	btfsc	status,0,c
 10366  002F54  2A32               	incf	(___awmod@dividend+1)^0,f,c
 10367  002F56  0E01               	movlw	1
 10368  002F58  6E36               	movwf	___awmod@sign^0,c
 10369  002F5A                     l5213:
 10370  002F5A  BE34               	btfsc	(___awmod@divisor+1)^0,7,c
 10371  002F5C  EFB4  F017         	goto	u3300
 10372  002F60  EFB2  F017         	goto	u3301
 10373  002F64                     u3301:
 10374  002F64  EFB8  F017         	goto	l5217
 10375  002F68                     u3300:
 10376  002F68  6C33               	negf	___awmod@divisor^0,c
 10377  002F6A  1E34               	comf	(___awmod@divisor+1)^0,f,c
 10378  002F6C  B0D8               	btfsc	status,0,c
 10379  002F6E  2A34               	incf	(___awmod@divisor+1)^0,f,c
 10380  002F70                     l5217:
 10381  002F70  5033               	movf	___awmod@divisor^0,w,c
 10382  002F72  1034               	iorwf	(___awmod@divisor+1)^0,w,c
 10383  002F74  B4D8               	btfsc	status,2,c
 10384  002F76  EFBF  F017         	goto	u3311
 10385  002F7A  EFC1  F017         	goto	u3310
 10386  002F7E                     u3311:
 10387  002F7E  EFE5  F017         	goto	l5233
 10388  002F82                     u3310:
 10389  002F82  0E01               	movlw	1
 10390  002F84  6E35               	movwf	___awmod@counter^0,c
 10391  002F86  EFC9  F017         	goto	l5223
 10392  002F8A                     l5221:
 10393  002F8A  90D8               	bcf	status,0,c
 10394  002F8C  3633               	rlcf	___awmod@divisor^0,f,c
 10395  002F8E  3634               	rlcf	(___awmod@divisor+1)^0,f,c
 10396  002F90  2A35               	incf	___awmod@counter^0,f,c
 10397  002F92                     l5223:
 10398  002F92  AE34               	btfss	(___awmod@divisor+1)^0,7,c
 10399  002F94  EFCE  F017         	goto	u3321
 10400  002F98  EFD0  F017         	goto	u3320
 10401  002F9C                     u3321:
 10402  002F9C  EFC5  F017         	goto	l5221
 10403  002FA0                     u3320:
 10404  002FA0                     l5225:
 10405  002FA0  5033               	movf	___awmod@divisor^0,w,c
 10406  002FA2  5C31               	subwf	___awmod@dividend^0,w,c
 10407  002FA4  5034               	movf	(___awmod@divisor+1)^0,w,c
 10408  002FA6  5832               	subwfb	(___awmod@dividend+1)^0,w,c
 10409  002FA8  A0D8               	btfss	status,0,c
 10410  002FAA  EFD9  F017         	goto	u3331
 10411  002FAE  EFDB  F017         	goto	u3330
 10412  002FB2                     u3331:
 10413  002FB2  EFDF  F017         	goto	l5229
 10414  002FB6                     u3330:
 10415  002FB6  5033               	movf	___awmod@divisor^0,w,c
 10416  002FB8  5E31               	subwf	___awmod@dividend^0,f,c
 10417  002FBA  5034               	movf	(___awmod@divisor+1)^0,w,c
 10418  002FBC  5A32               	subwfb	(___awmod@dividend+1)^0,f,c
 10419  002FBE                     l5229:
 10420  002FBE  90D8               	bcf	status,0,c
 10421  002FC0  3234               	rrcf	(___awmod@divisor+1)^0,f,c
 10422  002FC2  3233               	rrcf	___awmod@divisor^0,f,c
 10423  002FC4  2E35               	decfsz	___awmod@counter^0,f,c
 10424  002FC6  EFD0  F017         	goto	l5225
 10425  002FCA                     l5233:
 10426  002FCA  5036               	movf	___awmod@sign^0,w,c
 10427  002FCC  B4D8               	btfsc	status,2,c
 10428  002FCE  EFEB  F017         	goto	u3341
 10429  002FD2  EFED  F017         	goto	u3340
 10430  002FD6                     u3341:
 10431  002FD6  EFF1  F017         	goto	l5237
 10432  002FDA                     u3340:
 10433  002FDA  6C31               	negf	___awmod@dividend^0,c
 10434  002FDC  1E32               	comf	(___awmod@dividend+1)^0,f,c
 10435  002FDE  B0D8               	btfsc	status,0,c
 10436  002FE0  2A32               	incf	(___awmod@dividend+1)^0,f,c
 10437  002FE2                     l5237:
 10438  002FE2  C031  F031         	movff	___awmod@dividend,?___awmod
 10439  002FE6  C032  F032         	movff	___awmod@dividend+1,?___awmod+1
 10440  002FEA  0012               	return		;funcret
 10441  002FEC                     __end_of___awmod:
 10442                           	callstack 0
 10443                           
 10444 ;; *************** function _fifo_indicePrint_inc *****************
 10445 ;; Defined at:
 10446 ;;		line 322 in file "fifo.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;		None
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;		None
 10451 ;; Return value:  Size  Location     Type
 10452 ;;                  1    wreg      void 
 10453 ;; Registers used:
 10454 ;;		wreg, status,2, status,0
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10460 ;;      Params:         0       0       0       0       0       0       0       0       0
 10461 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10462 ;;      Temps:          7       0       0       0       0       0       0       0       0
 10463 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10464 ;;Total ram usage:        7 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    2
 10467 ;; This function calls:
 10468 ;;		Nothing
 10469 ;; This function is called by:
 10470 ;;		_main
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           	psect	text34
 10475  003716                     __ptext34:
 10476                           	callstack 0
 10477  003716                     _fifo_indicePrint_inc:
 10478                           	callstack 28
 10479  003716                     
 10480                           ;fifo.c: 324:     if( ind_print < 18 -1 )
 10481  003716  0E11               	movlw	17
 10482  003718  605C               	cpfslt	_ind_print^0,c
 10483  00371A  EF91  F01B         	goto	u4101
 10484  00371E  EF93  F01B         	goto	u4100
 10485  003722                     u4101:
 10486  003722  EFB7  F01B         	goto	l5931
 10487  003726                     u4100:
 10488  003726                     
 10489                           ;fifo.c: 325:     {;fifo.c: 326:         if( ind_print < ind_fila-1 )
 10490  003726  0EFF               	movlw	255
 10491  003728  6E31               	movwf	??_fifo_indicePrint_inc^0,c
 10492  00372A  0EFF               	movlw	255
 10493  00372C  6E32               	movwf	(??_fifo_indicePrint_inc+1)^0,c
 10494  00372E  505D               	movf	_ind_fila^0,w,c
 10495  003730  6E33               	movwf	(??_fifo_indicePrint_inc+2)^0,c
 10496  003732  6A34               	clrf	(??_fifo_indicePrint_inc+3)^0,c
 10497  003734  5031               	movf	??_fifo_indicePrint_inc^0,w,c
 10498  003736  2633               	addwf	(??_fifo_indicePrint_inc+2)^0,f,c
 10499  003738  5032               	movf	(??_fifo_indicePrint_inc+1)^0,w,c
 10500  00373A  2234               	addwfc	(??_fifo_indicePrint_inc+3)^0,f,c
 10501  00373C  505C               	movf	_ind_print^0,w,c
 10502  00373E  6E35               	movwf	(??_fifo_indicePrint_inc+4)^0,c
 10503  003740  6A36               	clrf	(??_fifo_indicePrint_inc+5)^0,c
 10504  003742  5033               	movf	(??_fifo_indicePrint_inc+2)^0,w,c
 10505  003744  5C35               	subwf	(??_fifo_indicePrint_inc+4)^0,w,c
 10506  003746  5036               	movf	(??_fifo_indicePrint_inc+5)^0,w,c
 10507  003748  0A80               	xorlw	128
 10508  00374A  6E37               	movwf	(??_fifo_indicePrint_inc+6)^0,c
 10509  00374C  5034               	movf	(??_fifo_indicePrint_inc+3)^0,w,c
 10510  00374E  0A80               	xorlw	128
 10511  003750  5837               	subwfb	(??_fifo_indicePrint_inc+6)^0,w,c
 10512  003752  B0D8               	btfsc	status,0,c
 10513  003754  EFAE  F01B         	goto	u4111
 10514  003758  EFB0  F01B         	goto	u4110
 10515  00375C                     u4111:
 10516  00375C  EFB3  F01B         	goto	l5929
 10517  003760                     u4110:
 10518  003760                     
 10519                           ;fifo.c: 327:             ind_print++;
 10520  003760  2A5C               	incf	_ind_print^0,f,c
 10521  003762  EFB9  F01B         	goto	l377
 10522  003766                     l5929:
 10523                           
 10524                           ;fifo.c: 329:             ind_print = ind_fila-1;
 10525  003766  045D               	decf	_ind_fila^0,w,c
 10526  003768  6E5C               	movwf	_ind_print^0,c
 10527  00376A  EFB9  F01B         	goto	l377
 10528  00376E                     l5931:
 10529                           
 10530                           ;fifo.c: 332:         ind_print = 18 -1;
 10531  00376E  0E11               	movlw	17
 10532  003770  6E5C               	movwf	_ind_print^0,c
 10533  003772                     l377:
 10534  003772  0012               	return		;funcret
 10535  003774                     __end_of_fifo_indicePrint_inc:
 10536                           	callstack 0
 10537                           
 10538 ;; *************** function _fifo_indicePrint_dec *****************
 10539 ;; Defined at:
 10540 ;;		line 334 in file "fifo.c"
 10541 ;; Parameters:    Size  Location     Type
 10542 ;;		None
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;		None
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  1    wreg      void 
 10547 ;; Registers used:
 10548 ;;		wreg, status,2, status,0
 10549 ;; Tracked objects:
 10550 ;;		On entry : 0/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10554 ;;      Params:         0       0       0       0       0       0       0       0       0
 10555 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10557 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10558 ;;Total ram usage:        0 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    2
 10561 ;; This function calls:
 10562 ;;		Nothing
 10563 ;; This function is called by:
 10564 ;;		_main
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           	psect	text35
 10569  003FFC                     __ptext35:
 10570                           	callstack 0
 10571  003FFC                     _fifo_indicePrint_dec:
 10572                           	callstack 28
 10573  003FFC                     
 10574                           ;fifo.c: 336:     if( ind_print > 2 )
 10575  003FFC  0E02               	movlw	2
 10576  003FFE  645C               	cpfsgt	_ind_print^0,c
 10577  004000  EF04  F020         	goto	u4121
 10578  004004  EF06  F020         	goto	u4120
 10579  004008                     u4121:
 10580  004008  EF07  F020         	goto	l381
 10581  00400C                     u4120:
 10582  00400C                     
 10583                           ;fifo.c: 337:         ind_print--;
 10584  00400C  065C               	decf	_ind_print^0,f,c
 10585  00400E                     l381:
 10586  00400E  0012               	return		;funcret
 10587  004010                     __end_of_fifo_indicePrint_dec:
 10588                           	callstack 0
 10589                           
 10590 ;; *************** function _fifo_indice *****************
 10591 ;; Defined at:
 10592 ;;		line 307 in file "fifo.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;		None
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;                  1    wreg      unsigned char 
 10599 ;; Registers used:
 10600 ;;		wreg, status,2
 10601 ;; Tracked objects:
 10602 ;;		On entry : 0/0
 10603 ;;		On exit  : 0/0
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10606 ;;      Params:         0       0       0       0       0       0       0       0       0
 10607 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10609 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10610 ;;Total ram usage:        0 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; Hardware stack levels required when called:    2
 10613 ;; This function calls:
 10614 ;;		Nothing
 10615 ;; This function is called by:
 10616 ;;		_main
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           	psect	text36
 10621  004106                     __ptext36:
 10622                           	callstack 0
 10623  004106                     _fifo_indice:
 10624                           	callstack 28
 10625  004106                     
 10626                           ;fifo.c: 309:     return ( ind_fila );
 10627  004106  505D               	movf	_ind_fila^0,w,c
 10628  004108  0012               	return		;funcret
 10629  00410A                     __end_of_fifo_indice:
 10630                           	callstack 0
 10631                           
 10632 ;; *************** function _fifo_disponivel *****************
 10633 ;; Defined at:
 10634 ;;		line 312 in file "fifo.c"
 10635 ;; Parameters:    Size  Location     Type
 10636 ;;		None
 10637 ;; Auto vars:     Size  Location     Type
 10638 ;;		None
 10639 ;; Return value:  Size  Location     Type
 10640 ;;                  1    wreg      unsigned char 
 10641 ;; Registers used:
 10642 ;;		wreg, status,2, status,0
 10643 ;; Tracked objects:
 10644 ;;		On entry : 0/0
 10645 ;;		On exit  : 0/0
 10646 ;;		Unchanged: 0/0
 10647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10648 ;;      Params:         0       0       0       0       0       0       0       0       0
 10649 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10650 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10651 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10652 ;;Total ram usage:        0 bytes
 10653 ;; Hardware stack levels used:    1
 10654 ;; Hardware stack levels required when called:    2
 10655 ;; This function calls:
 10656 ;;		Nothing
 10657 ;; This function is called by:
 10658 ;;		_main
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           	psect	text37
 10663  003FA6                     __ptext37:
 10664                           	callstack 0
 10665  003FA6                     _fifo_disponivel:
 10666                           	callstack 28
 10667  003FA6                     
 10668                           ;fifo.c: 314:     return( ind_fila < 18 );
 10669  003FA6  0E11               	movlw	17
 10670  003FA8  645D               	cpfsgt	_ind_fila^0,c
 10671  003FAA  EFD9  F01F         	goto	u4081
 10672  003FAE  EFDC  F01F         	goto	u4080
 10673  003FB2                     u4081:
 10674  003FB2  0E01               	movlw	1
 10675  003FB4  EFDD  F01F         	goto	u4090
 10676  003FB8                     u4080:
 10677  003FB8  0E00               	movlw	0
 10678  003FBA                     u4090:
 10679  003FBA  0012               	return		;funcret
 10680  003FBC                     __end_of_fifo_disponivel:
 10681                           	callstack 0
 10682                           
 10683 ;; *************** function _fifo_delete *****************
 10684 ;; Defined at:
 10685 ;;		line 183 in file "fifo.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;		None
 10688 ;; Auto vars:     Size  Location     Type
 10689 ;;		None
 10690 ;; Return value:  Size  Location     Type
 10691 ;;                  1    wreg      void 
 10692 ;; Registers used:
 10693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10694 ;; Tracked objects:
 10695 ;;		On entry : 0/0
 10696 ;;		On exit  : 0/0
 10697 ;;		Unchanged: 0/0
 10698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10699 ;;      Params:         0       0       0       0       0       0       0       0       0
 10700 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10701 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10702 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10703 ;;Total ram usage:        2 bytes
 10704 ;; Hardware stack levels used:    1
 10705 ;; Hardware stack levels required when called:    5
 10706 ;; This function calls:
 10707 ;;		_alt_atuador
 10708 ;;		_codifica
 10709 ;;		_decodifica
 10710 ;;		_fifo_alinharPrint
 10711 ;; This function is called by:
 10712 ;;		_main
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           	psect	text38
 10717  0033C8                     __ptext38:
 10718                           	callstack 0
 10719  0033C8                     _fifo_delete:
 10720                           	callstack 25
 10721  0033C8                     
 10722                           ;fifo.c: 185:     if(ind_fila)
 10723  0033C8  505D               	movf	_ind_fila^0,w,c
 10724  0033CA  B4D8               	btfsc	status,2,c
 10725  0033CC  EFEA  F019         	goto	u4001
 10726  0033D0  EFEC  F019         	goto	u4000
 10727  0033D4                     u4001:
 10728  0033D4  EF2D  F01A         	goto	l5865
 10729  0033D8                     u4000:
 10730  0033D8                     
 10731                           ;fifo.c: 186:     {;fifo.c: 187:         if(ind_fila > 2)
 10732  0033D8  0E02               	movlw	2
 10733  0033DA  645D               	cpfsgt	_ind_fila^0,c
 10734  0033DC  EFF2  F019         	goto	u4011
 10735  0033E0  EFF4  F019         	goto	u4010
 10736  0033E4                     u4011:
 10737  0033E4  EFF5  F019         	goto	l5859
 10738  0033E8                     u4010:
 10739  0033E8                     
 10740                           ;fifo.c: 188:             ind_fila--;
 10741  0033E8  065D               	decf	_ind_fila^0,f,c
 10742  0033EA                     l5859:
 10743                           
 10744                           ;fifo.c: 189:         if(fila[ind_fila] > 0xDC)
 10745  0033EA  0E1F               	movlw	low _fila
 10746  0033EC  245D               	addwf	_ind_fila^0,w,c
 10747  0033EE  6ED9               	movwf	fsr2l,c
 10748  0033F0  6ADA               	clrf	fsr2h,c
 10749  0033F2  0E00               	movlw	high _fila
 10750  0033F4  22DA               	addwfc	fsr2h,f,c
 10751  0033F6  0EDC               	movlw	220
 10752  0033F8  64DF               	cpfsgt	indf2,c
 10753  0033FA  EF01  F01A         	goto	u4021
 10754  0033FE  EF03  F01A         	goto	u4020
 10755  003402                     u4021:
 10756  003402  EF25  F01A         	goto	l5863
 10757  003406                     u4020:
 10758  003406                     
 10759                           ;fifo.c: 190:         {;fifo.c: 191:             decodifica(&fila[ind_fila]);
 10760  003406  0E1F               	movlw	low _fila
 10761  003408  245D               	addwf	_ind_fila^0,w,c
 10762  00340A  6E31               	movwf	decodifica@d^0,c
 10763  00340C  6A32               	clrf	(decodifica@d+1)^0,c
 10764  00340E  0E00               	movlw	high _fila
 10765  003410  2232               	addwfc	(decodifica@d+1)^0,f,c
 10766  003412  ECA9  F013         	call	_decodifica	;wreg free
 10767                           
 10768                           ;fifo.c: 192:             alt_atuador(fila[ind_fila] & ~0x20);
 10769  003416  0E1F               	movlw	low _fila
 10770  003418  245D               	addwf	_ind_fila^0,w,c
 10771  00341A  6ED9               	movwf	fsr2l,c
 10772  00341C  6ADA               	clrf	fsr2h,c
 10773  00341E  0E00               	movlw	high _fila
 10774  003420  22DA               	addwfc	fsr2h,f,c
 10775  003422  50DF               	movf	indf2,w,c
 10776  003424  0BDF               	andlw	223
 10777  003426  EC97  F019         	call	_alt_atuador
 10778                           
 10779                           ;fifo.c: 193:             codifica('a',fila[ind_fila]);
 10780  00342A  0E1F               	movlw	low _fila
 10781  00342C  245D               	addwf	_ind_fila^0,w,c
 10782  00342E  6ED9               	movwf	fsr2l,c
 10783  003430  6ADA               	clrf	fsr2h,c
 10784  003432  0E00               	movlw	high _fila
 10785  003434  22DA               	addwfc	fsr2h,f,c
 10786  003436  50DF               	movf	indf2,w,c
 10787  003438  6E40               	movwf	??_fifo_delete^0,c
 10788  00343A  6A41               	clrf	(??_fifo_delete+1)^0,c
 10789  00343C  C040  F031         	movff	??_fifo_delete,codifica@dado
 10790  003440  C041  F032         	movff	??_fifo_delete+1,codifica@dado+1
 10791  003444  0E61               	movlw	97
 10792  003446  EC58  F012         	call	_codifica
 10793  00344A                     l5863:
 10794                           
 10795                           ;fifo.c: 195:         fila[ind_fila] = 0;
 10796  00344A  0E1F               	movlw	low _fila
 10797  00344C  245D               	addwf	_ind_fila^0,w,c
 10798  00344E  6ED9               	movwf	fsr2l,c
 10799  003450  6ADA               	clrf	fsr2h,c
 10800  003452  0E00               	movlw	high _fila
 10801  003454  22DA               	addwfc	fsr2h,f,c
 10802  003456  0E00               	movlw	0
 10803  003458  6EDF               	movwf	indf2,c
 10804  00345A                     l5865:
 10805                           
 10806                           ;fifo.c: 197:     fifo_alinharPrint();
 10807  00345A  EC57  F016         	call	_fifo_alinharPrint	;wreg free
 10808  00345E  0012               	return		;funcret
 10809  003460                     __end_of_fifo_delete:
 10810                           	callstack 0
 10811                           
 10812 ;; *************** function _decodifica *****************
 10813 ;; Defined at:
 10814 ;;		line 228 in file "fifo.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;  d               2    0[COMRAM] PTR unsigned char 
 10817 ;;		 -> main@vetor_aux(16), main@auxPasso(1), printExec@passo(1), fifo_print@comando(1), 
 10818 ;;		 -> fila(18), 
 10819 ;; Auto vars:     Size  Location     Type
 10820 ;;		None
 10821 ;; Return value:  Size  Location     Type
 10822 ;;                  1    wreg      void 
 10823 ;; Registers used:
 10824 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10825 ;; Tracked objects:
 10826 ;;		On entry : 0/0
 10827 ;;		On exit  : 0/0
 10828 ;;		Unchanged: 0/0
 10829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10830 ;;      Params:         2       0       0       0       0       0       0       0       0
 10831 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10832 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10833 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10834 ;;Total ram usage:        4 bytes
 10835 ;; Hardware stack levels used:    1
 10836 ;; Hardware stack levels required when called:    2
 10837 ;; This function calls:
 10838 ;;		Nothing
 10839 ;; This function is called by:
 10840 ;;		_fifo_delete
 10841 ;;		_fifo_print
 10842 ;;		_printExec
 10843 ;;		_main
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           	psect	text39
 10848  002752                     __ptext39:
 10849                           	callstack 0
 10850  002752                     _decodifica:
 10851                           	callstack 27
 10852  002752                     
 10853                           ;fifo.c: 228: void decodifica( unsigned char *d );fifo.c: 229: {;fifo.c: 230:     if( *d
      +                           <= 100 )
 10854  002752  C031  FFD9         	movff	decodifica@d,fsr2l
 10855  002756  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10856  00275A  0E65               	movlw	101
 10857  00275C  60DF               	cpfslt	indf2,c
 10858  00275E  EFB3  F013         	goto	u3591
 10859  002762  EFB5  F013         	goto	u3590
 10860  002766                     u3591:
 10861  002766  EFB7  F013         	goto	l5369
 10862  00276A                     u3590:
 10863  00276A  EF48  F014         	goto	l344
 10864  00276E                     l5369:
 10865  00276E  C031  FFD9         	movff	decodifica@d,fsr2l
 10866  002772  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10867  002776  0EDD               	movlw	221
 10868  002778  60DF               	cpfslt	indf2,c
 10869  00277A  EFC1  F013         	goto	u3601
 10870  00277E  EFC3  F013         	goto	u3600
 10871  002782                     u3601:
 10872  002782  EF13  F014         	goto	l5393
 10873  002786                     u3600:
 10874  002786                     
 10875                           ;fifo.c: 235:     {;fifo.c: 236:         *d -= 0x64;
 10876  002786  C031  FFD9         	movff	decodifica@d,fsr2l
 10877  00278A  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10878  00278E  0E64               	movlw	100
 10879  002790  5EDF               	subwf	indf2,f,c
 10880                           
 10881                           ;fifo.c: 237:     } else
 10882  002792  EF48  F014         	goto	l344
 10883  002796                     l5373:
 10884  002796  C031  FFD9         	movff	decodifica@d,fsr2l
 10885  00279A  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10886  00279E  0E41               	movlw	65
 10887  0027A0  6EDF               	movwf	indf2,c
 10888  0027A2  EF48  F014         	goto	l344
 10889  0027A6                     l5375:
 10890  0027A6  C031  FFD9         	movff	decodifica@d,fsr2l
 10891  0027AA  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10892  0027AE  0E61               	movlw	97
 10893  0027B0  6EDF               	movwf	indf2,c
 10894  0027B2  EF48  F014         	goto	l344
 10895  0027B6                     l5377:
 10896  0027B6  C031  FFD9         	movff	decodifica@d,fsr2l
 10897  0027BA  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10898  0027BE  0E42               	movlw	66
 10899  0027C0  6EDF               	movwf	indf2,c
 10900  0027C2  EF48  F014         	goto	l344
 10901  0027C6                     l5379:
 10902  0027C6  C031  FFD9         	movff	decodifica@d,fsr2l
 10903  0027CA  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10904  0027CE  0E62               	movlw	98
 10905  0027D0  6EDF               	movwf	indf2,c
 10906  0027D2  EF48  F014         	goto	l344
 10907  0027D6                     l5381:
 10908  0027D6  C031  FFD9         	movff	decodifica@d,fsr2l
 10909  0027DA  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10910  0027DE  0E43               	movlw	67
 10911  0027E0  6EDF               	movwf	indf2,c
 10912  0027E2  EF48  F014         	goto	l344
 10913  0027E6                     l5383:
 10914  0027E6  C031  FFD9         	movff	decodifica@d,fsr2l
 10915  0027EA  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10916  0027EE  0E63               	movlw	99
 10917  0027F0  6EDF               	movwf	indf2,c
 10918  0027F2  EF48  F014         	goto	l344
 10919  0027F6                     l5385:
 10920  0027F6  C031  FFD9         	movff	decodifica@d,fsr2l
 10921  0027FA  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10922  0027FE  0E44               	movlw	68
 10923  002800  6EDF               	movwf	indf2,c
 10924  002802  EF48  F014         	goto	l344
 10925  002806                     l5387:
 10926  002806  C031  FFD9         	movff	decodifica@d,fsr2l
 10927  00280A  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10928  00280E  0E64               	movlw	100
 10929  002810  6EDF               	movwf	indf2,c
 10930  002812  EF48  F014         	goto	l344
 10931  002816                     l5389:
 10932  002816  C031  FFD9         	movff	decodifica@d,fsr2l
 10933  00281A  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10934  00281E  0E00               	movlw	0
 10935  002820  6EDF               	movwf	indf2,c
 10936  002822  EF48  F014         	goto	l344
 10937  002826                     l5393:
 10938  002826  C031  FFD9         	movff	decodifica@d,fsr2l
 10939  00282A  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10940  00282E  50DF               	movf	indf2,w,c
 10941  002830  6E33               	movwf	??_decodifica^0,c
 10942  002832  6A34               	clrf	(??_decodifica+1)^0,c
 10943                           
 10944                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10945                           ; Switch size 1, requested type "simple"
 10946                           ; Number of cases is 1, Range of values is 0 to 0
 10947                           ; switch strategies available:
 10948                           ; Name         Instructions Cycles
 10949                           ; simple_byte            4     3 (average)
 10950                           ;	Chosen strategy is simple_byte
 10951  002834  5034               	movf	(??_decodifica+1)^0,w,c
 10952  002836  0A00               	xorlw	0	; case 0
 10953  002838  B4D8               	btfsc	status,2,c
 10954  00283A  EF21  F014         	goto	l8027
 10955  00283E  EF48  F014         	goto	l344
 10956  002842                     l8027:
 10957                           
 10958                           ; Switch size 1, requested type "simple"
 10959                           ; Number of cases is 9, Range of values is 221 to 254
 10960                           ; switch strategies available:
 10961                           ; Name         Instructions Cycles
 10962                           ; simple_byte           28    15 (average)
 10963                           ;	Chosen strategy is simple_byte
 10964  002842  5033               	movf	??_decodifica^0,w,c
 10965  002844  0ADD               	xorlw	221	; case 221
 10966  002846  B4D8               	btfsc	status,2,c
 10967  002848  EFCB  F013         	goto	l5373
 10968  00284C  0A03               	xorlw	3	; case 222
 10969  00284E  B4D8               	btfsc	status,2,c
 10970  002850  EFD3  F013         	goto	l5375
 10971  002854  0A01               	xorlw	1	; case 223
 10972  002856  B4D8               	btfsc	status,2,c
 10973  002858  EFDB  F013         	goto	l5377
 10974  00285C  0A3F               	xorlw	63	; case 224
 10975  00285E  B4D8               	btfsc	status,2,c
 10976  002860  EFE3  F013         	goto	l5379
 10977  002864  0A01               	xorlw	1	; case 225
 10978  002866  B4D8               	btfsc	status,2,c
 10979  002868  EFEB  F013         	goto	l5381
 10980  00286C  0A03               	xorlw	3	; case 226
 10981  00286E  B4D8               	btfsc	status,2,c
 10982  002870  EFF3  F013         	goto	l5383
 10983  002874  0A01               	xorlw	1	; case 227
 10984  002876  B4D8               	btfsc	status,2,c
 10985  002878  EFFB  F013         	goto	l5385
 10986  00287C  0A07               	xorlw	7	; case 228
 10987  00287E  B4D8               	btfsc	status,2,c
 10988  002880  EF03  F014         	goto	l5387
 10989  002884  0A1A               	xorlw	26	; case 254
 10990  002886  B4D8               	btfsc	status,2,c
 10991  002888  EF0B  F014         	goto	l5389
 10992  00288C  EF48  F014         	goto	l344
 10993  002890                     l344:
 10994  002890  0012               	return		;funcret
 10995  002892                     __end_of_decodifica:
 10996                           	callstack 0
 10997                           
 10998 ;; *************** function _alt_atuador *****************
 10999 ;; Defined at:
 11000 ;;		line 92 in file "fifo.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  tecla           1    wreg     unsigned char 
 11003 ;; Auto vars:     Size  Location     Type
 11004 ;;  tecla           1    2[COMRAM] unsigned char 
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  1    wreg      void 
 11007 ;; Registers used:
 11008 ;;		wreg, status,2, status,0
 11009 ;; Tracked objects:
 11010 ;;		On entry : 0/0
 11011 ;;		On exit  : 0/0
 11012 ;;		Unchanged: 0/0
 11013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11014 ;;      Params:         0       0       0       0       0       0       0       0       0
 11015 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11016 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11017 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11018 ;;Total ram usage:        3 bytes
 11019 ;; Hardware stack levels used:    1
 11020 ;; Hardware stack levels required when called:    2
 11021 ;; This function calls:
 11022 ;;		Nothing
 11023 ;; This function is called by:
 11024 ;;		_manipula_atuadores_init
 11025 ;;		_fifo_delete
 11026 ;;		_main
 11027 ;; This function uses a non-reentrant model
 11028 ;;
 11029                           
 11030                           	psect	text40
 11031  00332E                     __ptext40:
 11032                           	callstack 0
 11033  00332E                     _alt_atuador:
 11034                           	callstack 27
 11035                           
 11036                           ;incstack = 0
 11037                           ;alt_atuador@tecla stored from wreg
 11038  00332E  6E33               	movwf	alt_atuador@tecla^0,c
 11039  003330                     
 11040                           ;fifo.c: 92: void alt_atuador( char tecla );fifo.c: 93: {;fifo.c: 94:     switch(tecla)
 11041  003330  EFC6  F019         	goto	l5359
 11042  003334                     l261:
 11043  003334  A01E               	btfss	_atuador^0,0,c
 11044  003336  EF9F  F019         	goto	u3511
 11045  00333A  EFA2  F019         	goto	u3510
 11046  00333E                     u3511:
 11047  00333E  801E               	bsf	_atuador^0,0,c
 11048  003340  EFA3  F019         	goto	u3525
 11049  003344                     u3510:
 11050  003344  901E               	bcf	_atuador^0,0,c
 11051  003346                     u3525:
 11052  003346  EFE3  F019         	goto	l266
 11053  00334A                     l263:
 11054  00334A  A21E               	btfss	_atuador^0,1,c
 11055  00334C  EFAA  F019         	goto	u3531
 11056  003350  EFAD  F019         	goto	u3530
 11057  003354                     u3531:
 11058  003354  821E               	bsf	_atuador^0,1,c
 11059  003356  EFAE  F019         	goto	u3545
 11060  00335A                     u3530:
 11061  00335A  921E               	bcf	_atuador^0,1,c
 11062  00335C                     u3545:
 11063  00335C  EFE3  F019         	goto	l266
 11064  003360                     l264:
 11065  003360  A41E               	btfss	_atuador^0,2,c
 11066  003362  EFB5  F019         	goto	u3551
 11067  003366  EFB8  F019         	goto	u3550
 11068  00336A                     u3551:
 11069  00336A  841E               	bsf	_atuador^0,2,c
 11070  00336C  EFB9  F019         	goto	u3565
 11071  003370                     u3550:
 11072  003370  941E               	bcf	_atuador^0,2,c
 11073  003372                     u3565:
 11074  003372  EFE3  F019         	goto	l266
 11075  003376                     l265:
 11076  003376  A61E               	btfss	_atuador^0,3,c
 11077  003378  EFC0  F019         	goto	u3571
 11078  00337C  EFC3  F019         	goto	u3570
 11079  003380                     u3571:
 11080  003380  861E               	bsf	_atuador^0,3,c
 11081  003382  EFC4  F019         	goto	u3585
 11082  003386                     u3570:
 11083  003386  961E               	bcf	_atuador^0,3,c
 11084  003388                     u3585:
 11085  003388  EFE3  F019         	goto	l266
 11086  00338C                     l5359:
 11087  00338C  5033               	movf	alt_atuador@tecla^0,w,c
 11088  00338E  6E31               	movwf	??_alt_atuador^0,c
 11089  003390  6A32               	clrf	(??_alt_atuador+1)^0,c
 11090                           
 11091                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11092                           ; Switch size 1, requested type "simple"
 11093                           ; Number of cases is 1, Range of values is 0 to 0
 11094                           ; switch strategies available:
 11095                           ; Name         Instructions Cycles
 11096                           ; simple_byte            4     3 (average)
 11097                           ;	Chosen strategy is simple_byte
 11098  003392  5032               	movf	(??_alt_atuador+1)^0,w,c
 11099  003394  0A00               	xorlw	0	; case 0
 11100  003396  B4D8               	btfsc	status,2,c
 11101  003398  EFD0  F019         	goto	l8029
 11102  00339C  EFE3  F019         	goto	l266
 11103  0033A0                     l8029:
 11104                           
 11105                           ; Switch size 1, requested type "simple"
 11106                           ; Number of cases is 4, Range of values is 65 to 68
 11107                           ; switch strategies available:
 11108                           ; Name         Instructions Cycles
 11109                           ; simple_byte           13     7 (average)
 11110                           ;	Chosen strategy is simple_byte
 11111  0033A0  5031               	movf	??_alt_atuador^0,w,c
 11112  0033A2  0A41               	xorlw	65	; case 65
 11113  0033A4  B4D8               	btfsc	status,2,c
 11114  0033A6  EF9A  F019         	goto	l261
 11115  0033AA  0A03               	xorlw	3	; case 66
 11116  0033AC  B4D8               	btfsc	status,2,c
 11117  0033AE  EFA5  F019         	goto	l263
 11118  0033B2  0A01               	xorlw	1	; case 67
 11119  0033B4  B4D8               	btfsc	status,2,c
 11120  0033B6  EFB0  F019         	goto	l264
 11121  0033BA  0A07               	xorlw	7	; case 68
 11122  0033BC  B4D8               	btfsc	status,2,c
 11123  0033BE  EFBB  F019         	goto	l265
 11124  0033C2  EFE3  F019         	goto	l266
 11125  0033C6                     l266:
 11126  0033C6  0012               	return		;funcret
 11127  0033C8                     __end_of_alt_atuador:
 11128                           	callstack 0
 11129                           
 11130 ;; *************** function _fifo_adrs *****************
 11131 ;; Defined at:
 11132 ;;		line 178 in file "fifo.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;		None
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;		None
 11137 ;; Return value:  Size  Location     Type
 11138 ;;                  2    0[COMRAM] PTR unsigned char 
 11139 ;; Registers used:
 11140 ;;		wreg, status,2, status,0
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11146 ;;      Params:         2       0       0       0       0       0       0       0       0
 11147 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11148 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11149 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11150 ;;Total ram usage:        2 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    2
 11153 ;; This function calls:
 11154 ;;		Nothing
 11155 ;; This function is called by:
 11156 ;;		_main
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           	psect	text41
 11161  0040C8                     __ptext41:
 11162                           	callstack 0
 11163  0040C8                     _fifo_adrs:
 11164                           	callstack 28
 11165  0040C8                     
 11166                           ;fifo.c: 180:     return fila;
 11167  0040C8  0E1F               	movlw	low _fila
 11168  0040CA  6E31               	movwf	?_fifo_adrs^0,c
 11169  0040CC  0E00               	movlw	high _fila
 11170  0040CE  6E32               	movwf	(?_fifo_adrs+1)^0,c
 11171  0040D0  0012               	return		;funcret
 11172  0040D2                     __end_of_fifo_adrs:
 11173                           	callstack 0
 11174                           
 11175 ;; *************** function _fifo_add_tempo *****************
 11176 ;; Defined at:
 11177 ;;		line 269 in file "fifo.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;  t               1    wreg     const unsigned char 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;  t               1   15[COMRAM] const unsigned char 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11191 ;;      Params:         0       0       0       0       0       0       0       0       0
 11192 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11194 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11195 ;;Total ram usage:        1 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    5
 11198 ;; This function calls:
 11199 ;;		_codifica
 11200 ;;		_fifo_alinharPrint
 11201 ;; This function is called by:
 11202 ;;		_main
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           	psect	text42
 11207  003884                     __ptext42:
 11208                           	callstack 0
 11209  003884                     _fifo_add_tempo:
 11210                           	callstack 25
 11211                           
 11212                           ;incstack = 0
 11213                           ;fifo_add_tempo@t stored from wreg
 11214  003884  6E40               	movwf	fifo_add_tempo@t^0,c
 11215  003886                     
 11216                           ;fifo.c: 269: void fifo_add_tempo(const char t);fifo.c: 270: {;fifo.c: 271:     if(ind_f
      +                          ila < 18)
 11217  003886  0E12               	movlw	18
 11218  003888  605D               	cpfslt	_ind_fila^0,c
 11219  00388A  EF49  F01C         	goto	u4051
 11220  00388E  EF4B  F01C         	goto	u4050
 11221  003892                     u4051:
 11222  003892  EF6B  F01C         	goto	l5893
 11223  003896                     u4050:
 11224  003896                     
 11225                           ;fifo.c: 272:     {;fifo.c: 273:         if(t)
 11226  003896  5040               	movf	fifo_add_tempo@t^0,w,c
 11227  003898  B4D8               	btfsc	status,2,c
 11228  00389A  EF51  F01C         	goto	u4061
 11229  00389E  EF53  F01C         	goto	u4060
 11230  0038A2                     u4061:
 11231  0038A2  EF6B  F01C         	goto	l5893
 11232  0038A6                     u4060:
 11233  0038A6                     
 11234                           ;fifo.c: 274:         {;fifo.c: 275:             codifica('t', &t);
 11235  0038A6  0E40               	movlw	low fifo_add_tempo@t
 11236  0038A8  6E31               	movwf	codifica@dado^0,c
 11237  0038AA  0E00               	movlw	high fifo_add_tempo@t
 11238  0038AC  6E32               	movwf	(codifica@dado+1)^0,c
 11239  0038AE  0E74               	movlw	116
 11240  0038B0  EC58  F012         	call	_codifica
 11241  0038B4                     
 11242                           ;fifo.c: 276:             fila[ind_fila] = t;
 11243  0038B4  0E1F               	movlw	low _fila
 11244  0038B6  245D               	addwf	_ind_fila^0,w,c
 11245  0038B8  6ED9               	movwf	fsr2l,c
 11246  0038BA  6ADA               	clrf	fsr2h,c
 11247  0038BC  0E00               	movlw	high _fila
 11248  0038BE  22DA               	addwfc	fsr2h,f,c
 11249  0038C0  C040  FFDF         	movff	fifo_add_tempo@t,indf2
 11250  0038C4                     
 11251                           ;fifo.c: 277:             ind_fila++;
 11252  0038C4  2A5D               	incf	_ind_fila^0,f,c
 11253  0038C6                     
 11254                           ;fifo.c: 278:             fila[ind_fila] = 0;
 11255  0038C6  0E1F               	movlw	low _fila
 11256  0038C8  245D               	addwf	_ind_fila^0,w,c
 11257  0038CA  6ED9               	movwf	fsr2l,c
 11258  0038CC  6ADA               	clrf	fsr2h,c
 11259  0038CE  0E00               	movlw	high _fila
 11260  0038D0  22DA               	addwfc	fsr2h,f,c
 11261  0038D2  0E00               	movlw	0
 11262  0038D4  6EDF               	movwf	indf2,c
 11263  0038D6                     l5893:
 11264                           
 11265                           ;fifo.c: 281:     fifo_alinharPrint();
 11266  0038D6  EC57  F016         	call	_fifo_alinharPrint	;wreg free
 11267  0038DA  0012               	return		;funcret
 11268  0038DC                     __end_of_fifo_add_tempo:
 11269                           	callstack 0
 11270                           
 11271 ;; *************** function _fifo_add_control *****************
 11272 ;; Defined at:
 11273 ;;		line 284 in file "fifo.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;  c               1    wreg     const unsigned char 
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  c               1   15[COMRAM] const unsigned char 
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  1    wreg      void 
 11280 ;; Registers used:
 11281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11287 ;;      Params:         0       0       0       0       0       0       0       0       0
 11288 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11290 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11291 ;;Total ram usage:        1 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:    5
 11294 ;; This function calls:
 11295 ;;		_codifica
 11296 ;;		_fifo_alinharPrint
 11297 ;; This function is called by:
 11298 ;;		_main
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text43
 11303  003A28                     __ptext43:
 11304                           	callstack 0
 11305  003A28                     _fifo_add_control:
 11306                           	callstack 25
 11307                           
 11308                           ;incstack = 0
 11309                           ;fifo_add_control@c stored from wreg
 11310  003A28  6E40               	movwf	fifo_add_control@c^0,c
 11311  003A2A                     
 11312                           ;fifo.c: 284: void fifo_add_control(const char c);fifo.c: 285: {;fifo.c: 286:     if(ind
      +                          _fila < 18)
 11313  003A2A  0E12               	movlw	18
 11314  003A2C  605D               	cpfslt	_ind_fila^0,c
 11315  003A2E  EF1B  F01D         	goto	u4071
 11316  003A32  EF1D  F01D         	goto	u4070
 11317  003A36                     u4071:
 11318  003A36  EF35  F01D         	goto	l5905
 11319  003A3A                     u4070:
 11320  003A3A                     
 11321                           ;fifo.c: 287:     {;fifo.c: 290:             codifica('p', &c);
 11322  003A3A  0E40               	movlw	low fifo_add_control@c
 11323  003A3C  6E31               	movwf	codifica@dado^0,c
 11324  003A3E  0E00               	movlw	high fifo_add_control@c
 11325  003A40  6E32               	movwf	(codifica@dado+1)^0,c
 11326  003A42  0E70               	movlw	112
 11327  003A44  EC58  F012         	call	_codifica
 11328  003A48                     
 11329                           ;fifo.c: 291:             fila[ind_fila] = c;
 11330  003A48  0E1F               	movlw	low _fila
 11331  003A4A  245D               	addwf	_ind_fila^0,w,c
 11332  003A4C  6ED9               	movwf	fsr2l,c
 11333  003A4E  6ADA               	clrf	fsr2h,c
 11334  003A50  0E00               	movlw	high _fila
 11335  003A52  22DA               	addwfc	fsr2h,f,c
 11336  003A54  C040  FFDF         	movff	fifo_add_control@c,indf2
 11337  003A58                     
 11338                           ;fifo.c: 292:             ind_fila++;
 11339  003A58  2A5D               	incf	_ind_fila^0,f,c
 11340  003A5A                     
 11341                           ;fifo.c: 293:             fila[ind_fila] = 0;
 11342  003A5A  0E1F               	movlw	low _fila
 11343  003A5C  245D               	addwf	_ind_fila^0,w,c
 11344  003A5E  6ED9               	movwf	fsr2l,c
 11345  003A60  6ADA               	clrf	fsr2h,c
 11346  003A62  0E00               	movlw	high _fila
 11347  003A64  22DA               	addwfc	fsr2h,f,c
 11348  003A66  0E00               	movlw	0
 11349  003A68  6EDF               	movwf	indf2,c
 11350  003A6A                     l5905:
 11351                           
 11352                           ;fifo.c: 296:     fifo_alinharPrint();
 11353  003A6A  EC57  F016         	call	_fifo_alinharPrint	;wreg free
 11354  003A6E  0012               	return		;funcret
 11355  003A70                     __end_of_fifo_add_control:
 11356                           	callstack 0
 11357                           
 11358 ;; *************** function _fifo_add_ciclo *****************
 11359 ;; Defined at:
 11360 ;;		line 299 in file "fifo.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;  ciclos          2    0[COMRAM] unsigned int 
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;		None
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  1    wreg      void 
 11367 ;; Registers used:
 11368 ;;		wreg, status,2
 11369 ;; Tracked objects:
 11370 ;;		On entry : 0/0
 11371 ;;		On exit  : 0/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11374 ;;      Params:         2       0       0       0       0       0       0       0       0
 11375 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11376 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11377 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11378 ;;Total ram usage:        2 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    2
 11381 ;; This function calls:
 11382 ;;		Nothing
 11383 ;; This function is called by:
 11384 ;;		_main
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text44
 11389  0040D2                     __ptext44:
 11390                           	callstack 0
 11391  0040D2                     _fifo_add_ciclo:
 11392                           	callstack 28
 11393  0040D2                     
 11394                           ;fifo.c: 299: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 300: {;fifo.c: 301:     f
      +                          ila[0] = ciclos & 0x00ff;
 11395  0040D2  C031  F01F         	movff	fifo_add_ciclo@ciclos,_fila
 11396  0040D6                     
 11397                           ;fifo.c: 302:     fila[1] = ciclos >> 8;
 11398  0040D6  5032               	movf	(fifo_add_ciclo@ciclos+1)^0,w,c
 11399  0040D8  6E20               	movwf	(_fila+1)^0,c
 11400  0040DA  0012               	return		;funcret
 11401  0040DC                     __end_of_fifo_add_ciclo:
 11402                           	callstack 0
 11403                           
 11404 ;; *************** function _fifo_add *****************
 11405 ;; Defined at:
 11406 ;;		line 254 in file "fifo.c"
 11407 ;; Parameters:    Size  Location     Type
 11408 ;;  passo           1    wreg     const unsigned char 
 11409 ;; Auto vars:     Size  Location     Type
 11410 ;;  passo           1   15[COMRAM] const unsigned char 
 11411 ;; Return value:  Size  Location     Type
 11412 ;;                  1    wreg      void 
 11413 ;; Registers used:
 11414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : 0/0
 11417 ;;		On exit  : 0/0
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11420 ;;      Params:         0       0       0       0       0       0       0       0       0
 11421 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11422 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11423 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11424 ;;Total ram usage:        1 bytes
 11425 ;; Hardware stack levels used:    1
 11426 ;; Hardware stack levels required when called:    5
 11427 ;; This function calls:
 11428 ;;		_codifica
 11429 ;;		_fifo_alinharPrint
 11430 ;; This function is called by:
 11431 ;;		_main
 11432 ;; This function uses a non-reentrant model
 11433 ;;
 11434                           
 11435                           	psect	text45
 11436  0038DC                     __ptext45:
 11437                           	callstack 0
 11438  0038DC                     _fifo_add:
 11439                           	callstack 25
 11440                           
 11441                           ;incstack = 0
 11442                           ;fifo_add@passo stored from wreg
 11443  0038DC  6E40               	movwf	fifo_add@passo^0,c
 11444  0038DE                     
 11445                           ;fifo.c: 254: void fifo_add(const char passo);fifo.c: 255: {;fifo.c: 256:     if(ind_fil
      +                          a < 18)
 11446  0038DE  0E12               	movlw	18
 11447  0038E0  605D               	cpfslt	_ind_fila^0,c
 11448  0038E2  EF75  F01C         	goto	u4031
 11449  0038E6  EF77  F01C         	goto	u4030
 11450  0038EA                     u4031:
 11451  0038EA  EF97  F01C         	goto	l5879
 11452  0038EE                     u4030:
 11453  0038EE                     
 11454                           ;fifo.c: 257:     {;fifo.c: 258:         if(passo)
 11455  0038EE  5040               	movf	fifo_add@passo^0,w,c
 11456  0038F0  B4D8               	btfsc	status,2,c
 11457  0038F2  EF7D  F01C         	goto	u4041
 11458  0038F6  EF7F  F01C         	goto	u4040
 11459  0038FA                     u4041:
 11460  0038FA  EF97  F01C         	goto	l5879
 11461  0038FE                     u4040:
 11462  0038FE                     
 11463                           ;fifo.c: 259:         {;fifo.c: 260:             codifica('a', &passo);
 11464  0038FE  0E40               	movlw	low fifo_add@passo
 11465  003900  6E31               	movwf	codifica@dado^0,c
 11466  003902  0E00               	movlw	high fifo_add@passo
 11467  003904  6E32               	movwf	(codifica@dado+1)^0,c
 11468  003906  0E61               	movlw	97
 11469  003908  EC58  F012         	call	_codifica
 11470  00390C                     
 11471                           ;fifo.c: 261:             fila[ind_fila] = passo;
 11472  00390C  0E1F               	movlw	low _fila
 11473  00390E  245D               	addwf	_ind_fila^0,w,c
 11474  003910  6ED9               	movwf	fsr2l,c
 11475  003912  6ADA               	clrf	fsr2h,c
 11476  003914  0E00               	movlw	high _fila
 11477  003916  22DA               	addwfc	fsr2h,f,c
 11478  003918  C040  FFDF         	movff	fifo_add@passo,indf2
 11479  00391C                     
 11480                           ;fifo.c: 262:             ind_fila++;
 11481  00391C  2A5D               	incf	_ind_fila^0,f,c
 11482  00391E                     
 11483                           ;fifo.c: 263:             fila[ind_fila] = 0;
 11484  00391E  0E1F               	movlw	low _fila
 11485  003920  245D               	addwf	_ind_fila^0,w,c
 11486  003922  6ED9               	movwf	fsr2l,c
 11487  003924  6ADA               	clrf	fsr2h,c
 11488  003926  0E00               	movlw	high _fila
 11489  003928  22DA               	addwfc	fsr2h,f,c
 11490  00392A  0E00               	movlw	0
 11491  00392C  6EDF               	movwf	indf2,c
 11492  00392E                     l5879:
 11493                           
 11494                           ;fifo.c: 266:      fifo_alinharPrint();
 11495  00392E  EC57  F016         	call	_fifo_alinharPrint	;wreg free
 11496  003932  0012               	return		;funcret
 11497  003934                     __end_of_fifo_add:
 11498                           	callstack 0
 11499                           
 11500 ;; *************** function _fifo_alinharPrint *****************
 11501 ;; Defined at:
 11502 ;;		line 482 in file "fifo.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;  aux             1   14[COMRAM] unsigned char 
 11507 ;;  i               1   13[COMRAM] unsigned char 
 11508 ;;  cont            1   12[COMRAM] unsigned char 
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11518 ;;      Params:         0       0       0       0       0       0       0       0       0
 11519 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11520 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11521 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11522 ;;Total ram usage:        4 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    4
 11525 ;; This function calls:
 11526 ;;		_dignum_tam
 11527 ;; This function is called by:
 11528 ;;		_fifo_delete
 11529 ;;		_fifo_add
 11530 ;;		_fifo_add_tempo
 11531 ;;		_fifo_add_control
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text46
 11536  002CAE                     __ptext46:
 11537                           	callstack 0
 11538  002CAE                     _fifo_alinharPrint:
 11539                           	callstack 25
 11540  002CAE                     
 11541                           ;fifo.c: 484:     unsigned char i;;fifo.c: 485:     unsigned char aux;;fifo.c: 486:     
      +                          unsigned char cont = 0;
 11542  002CAE  0E00               	movlw	0
 11543  002CB0  6E3D               	movwf	fifo_alinharPrint@cont^0,c
 11544  002CB2                     
 11545                           ;fifo.c: 488:     for( i=ind_fila-1; i>=2; i-- )
 11546  002CB2  045D               	decf	_ind_fila^0,w,c
 11547  002CB4  6E3E               	movwf	fifo_alinharPrint@i^0,c
 11548  002CB6                     l5443:
 11549  002CB6  0E02               	movlw	2
 11550  002CB8  603E               	cpfslt	fifo_alinharPrint@i^0,c
 11551  002CBA  EF61  F016         	goto	u3621
 11552  002CBE  EF63  F016         	goto	u3620
 11553  002CC2                     u3621:
 11554  002CC2  EF65  F016         	goto	l5447
 11555  002CC6                     u3620:
 11556  002CC6  EFCA  F016         	goto	l440
 11557  002CCA                     l5447:
 11558                           
 11559                           ;fifo.c: 489:     {;fifo.c: 490:         aux = fila[i];
 11560  002CCA  0E1F               	movlw	low _fila
 11561  002CCC  243E               	addwf	fifo_alinharPrint@i^0,w,c
 11562  002CCE  6ED9               	movwf	fsr2l,c
 11563  002CD0  6ADA               	clrf	fsr2h,c
 11564  002CD2  0E00               	movlw	high _fila
 11565  002CD4  22DA               	addwfc	fsr2h,f,c
 11566  002CD6  50DF               	movf	indf2,w,c
 11567  002CD8  6E3F               	movwf	fifo_alinharPrint@aux^0,c
 11568  002CDA                     
 11569                           ;fifo.c: 491:         if( aux <= 0x64 )
 11570  002CDA  0E65               	movlw	101
 11571  002CDC  603F               	cpfslt	fifo_alinharPrint@aux^0,c
 11572  002CDE  EF73  F016         	goto	u3631
 11573  002CE2  EF75  F016         	goto	u3630
 11574  002CE6                     u3631:
 11575  002CE6  EF7D  F016         	goto	l5453
 11576  002CEA                     u3630:
 11577  002CEA                     
 11578                           ;fifo.c: 492:             cont += dignum_tam( aux )+1;
 11579  002CEA  C03F  F039         	movff	fifo_alinharPrint@aux,dignum_tam@num
 11580  002CEE  6A3A               	clrf	(dignum_tam@num+1)^0,c
 11581  002CF0  EC06  F01E         	call	_dignum_tam	;wreg free
 11582  002CF4  6E3C               	movwf	??_fifo_alinharPrint^0,c
 11583  002CF6  283C               	incf	??_fifo_alinharPrint^0,w,c
 11584  002CF8  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11585  002CFA                     l5453:
 11586                           
 11587                           ;fifo.c: 494:         if( aux > 0x64 && aux <= 0xDC )
 11588  002CFA  0E64               	movlw	100
 11589  002CFC  643F               	cpfsgt	fifo_alinharPrint@aux^0,c
 11590  002CFE  EF83  F016         	goto	u3641
 11591  002D02  EF85  F016         	goto	u3640
 11592  002D06                     u3641:
 11593  002D06  EF98  F016         	goto	l5459
 11594  002D0A                     u3640:
 11595  002D0A  0EDD               	movlw	221
 11596  002D0C  603F               	cpfslt	fifo_alinharPrint@aux^0,c
 11597  002D0E  EF8B  F016         	goto	u3651
 11598  002D12  EF8D  F016         	goto	u3650
 11599  002D16                     u3651:
 11600  002D16  EF98  F016         	goto	l5459
 11601  002D1A                     u3650:
 11602  002D1A                     
 11603                           ;fifo.c: 495:             cont += dignum_tam( aux - 0x64 )+1;
 11604  002D1A  0E9C               	movlw	156
 11605  002D1C  243F               	addwf	fifo_alinharPrint@aux^0,w,c
 11606  002D1E  6E39               	movwf	dignum_tam@num^0,c
 11607  002D20  6A3A               	clrf	(dignum_tam@num+1)^0,c
 11608  002D22  0EFF               	movlw	255
 11609  002D24  223A               	addwfc	(dignum_tam@num+1)^0,f,c
 11610  002D26  EC06  F01E         	call	_dignum_tam	;wreg free
 11611  002D2A  6E3C               	movwf	??_fifo_alinharPrint^0,c
 11612  002D2C  283C               	incf	??_fifo_alinharPrint^0,w,c
 11613  002D2E  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11614  002D30                     l5459:
 11615                           
 11616                           ;fifo.c: 497:         if( aux > 0xDC && aux < 0xFE )
 11617  002D30  0EDC               	movlw	220
 11618  002D32  643F               	cpfsgt	fifo_alinharPrint@aux^0,c
 11619  002D34  EF9E  F016         	goto	u3661
 11620  002D38  EFA0  F016         	goto	u3660
 11621  002D3C                     u3661:
 11622  002D3C  EFAA  F016         	goto	l436
 11623  002D40                     u3660:
 11624  002D40  0EFE               	movlw	254
 11625  002D42  603F               	cpfslt	fifo_alinharPrint@aux^0,c
 11626  002D44  EFA6  F016         	goto	u3671
 11627  002D48  EFA8  F016         	goto	u3670
 11628  002D4C                     u3671:
 11629  002D4C  EFAA  F016         	goto	l436
 11630  002D50                     u3670:
 11631  002D50                     
 11632                           ;fifo.c: 498:             cont += 2;
 11633  002D50  0E02               	movlw	2
 11634  002D52  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11635  002D54                     l436:
 11636                           
 11637                           ;fifo.c: 500:         if( aux == 0xFE )
 11638  002D54  0EFE               	movlw	254
 11639  002D56  183F               	xorwf	fifo_alinharPrint@aux^0,w,c
 11640  002D58  A4D8               	btfss	status,2,c
 11641  002D5A  EFB1  F016         	goto	u3681
 11642  002D5E  EFB3  F016         	goto	u3680
 11643  002D62                     u3681:
 11644  002D62  EFBB  F016         	goto	l5467
 11645  002D66                     u3680:
 11646  002D66                     
 11647                           ;fifo.c: 501:             cont += dignum_tam( aux )+1;
 11648  002D66  C03F  F039         	movff	fifo_alinharPrint@aux,dignum_tam@num
 11649  002D6A  6A3A               	clrf	(dignum_tam@num+1)^0,c
 11650  002D6C  EC06  F01E         	call	_dignum_tam	;wreg free
 11651  002D70  6E3C               	movwf	??_fifo_alinharPrint^0,c
 11652  002D72  283C               	incf	??_fifo_alinharPrint^0,w,c
 11653  002D74  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11654  002D76                     l5467:
 11655                           
 11656                           ;fifo.c: 503:         if( cont > 20 )
 11657  002D76  0E14               	movlw	20
 11658  002D78  643D               	cpfsgt	fifo_alinharPrint@cont^0,c
 11659  002D7A  EFC1  F016         	goto	u3691
 11660  002D7E  EFC3  F016         	goto	u3690
 11661  002D82                     u3691:
 11662  002D82  EFC5  F016         	goto	l438
 11663  002D86                     u3690:
 11664  002D86  EFCA  F016         	goto	l440
 11665  002D8A                     l438:
 11666                           
 11667                           ;fifo.c: 508:             ind_print = i;
 11668  002D8A  C03E  F05C         	movff	fifo_alinharPrint@i,_ind_print
 11669  002D8E                     
 11670                           ;fifo.c: 509:     }
 11671  002D8E  063E               	decf	fifo_alinharPrint@i^0,f,c
 11672  002D90  EF5B  F016         	goto	l5443
 11673  002D94                     l440:
 11674  002D94  0012               	return		;funcret
 11675  002D96                     __end_of_fifo_alinharPrint:
 11676                           	callstack 0
 11677                           
 11678 ;; *************** function _dignum_tam *****************
 11679 ;; Defined at:
 11680 ;;		line 470 in file "fifo.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;  num             2    8[COMRAM] int 
 11683 ;; Auto vars:     Size  Location     Type
 11684 ;;  tam             1   10[COMRAM] unsigned char 
 11685 ;; Return value:  Size  Location     Type
 11686 ;;                  1    wreg      unsigned char 
 11687 ;; Registers used:
 11688 ;;		wreg, status,2, status,0, cstack
 11689 ;; Tracked objects:
 11690 ;;		On entry : 0/0
 11691 ;;		On exit  : 0/0
 11692 ;;		Unchanged: 0/0
 11693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11694 ;;      Params:         2       0       0       0       0       0       0       0       0
 11695 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11696 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11697 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11698 ;;Total ram usage:        3 bytes
 11699 ;; Hardware stack levels used:    1
 11700 ;; Hardware stack levels required when called:    3
 11701 ;; This function calls:
 11702 ;;		___awdiv
 11703 ;; This function is called by:
 11704 ;;		_fifo_alinharPrint
 11705 ;;		_printExec
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           	psect	text47
 11710  003C0C                     __ptext47:
 11711                           	callstack 0
 11712  003C0C                     _dignum_tam:
 11713                           	callstack 26
 11714  003C0C                     
 11715                           ;fifo.c: 470: unsigned char dignum_tam(int num);fifo.c: 471: {;fifo.c: 472:     unsigned
      +                           char tam = 0;
 11716  003C0C  0E00               	movlw	0
 11717  003C0E  6E3B               	movwf	dignum_tam@tam^0,c
 11718                           
 11719                           ;fifo.c: 474:     while(num != 0)
 11720  003C10  EF19  F01E         	goto	l5171
 11721  003C14                     l5167:
 11722                           
 11723                           ;fifo.c: 475:     {;fifo.c: 476:         num /= 10;
 11724  003C14  C039  F031         	movff	dignum_tam@num,___awdiv@dividend
 11725  003C18  C03A  F032         	movff	dignum_tam@num+1,___awdiv@dividend+1
 11726  003C1C  0E00               	movlw	0
 11727  003C1E  6E34               	movwf	(___awdiv@divisor+1)^0,c
 11728  003C20  0E0A               	movlw	10
 11729  003C22  6E33               	movwf	___awdiv@divisor^0,c
 11730  003C24  EC3C  F017         	call	___awdiv	;wreg free
 11731  003C28  C031  F039         	movff	?___awdiv,dignum_tam@num
 11732  003C2C  C032  F03A         	movff	?___awdiv+1,dignum_tam@num+1
 11733  003C30                     
 11734                           ;fifo.c: 477:         tam++;
 11735  003C30  2A3B               	incf	dignum_tam@tam^0,f,c
 11736  003C32                     l5171:
 11737                           
 11738                           ;fifo.c: 474:     while(num != 0)
 11739  003C32  5039               	movf	dignum_tam@num^0,w,c
 11740  003C34  103A               	iorwf	(dignum_tam@num+1)^0,w,c
 11741  003C36  A4D8               	btfss	status,2,c
 11742  003C38  EF20  F01E         	goto	u3231
 11743  003C3C  EF22  F01E         	goto	u3230
 11744  003C40                     u3231:
 11745  003C40  EF0A  F01E         	goto	l5167
 11746  003C44                     u3230:
 11747  003C44                     
 11748                           ;fifo.c: 479:     return ( tam );
 11749  003C44  503B               	movf	dignum_tam@tam^0,w,c
 11750  003C46  0012               	return		;funcret
 11751  003C48                     __end_of_dignum_tam:
 11752                           	callstack 0
 11753                           
 11754 ;; *************** function ___awdiv *****************
 11755 ;; Defined at:
 11756 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
 11757 ;; Parameters:    Size  Location     Type
 11758 ;;  dividend        2    0[COMRAM] int 
 11759 ;;  divisor         2    2[COMRAM] int 
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;  quotient        2    6[COMRAM] int 
 11762 ;;  sign            1    5[COMRAM] unsigned char 
 11763 ;;  counter         1    4[COMRAM] unsigned char 
 11764 ;; Return value:  Size  Location     Type
 11765 ;;                  2    0[COMRAM] int 
 11766 ;; Registers used:
 11767 ;;		wreg, status,2, status,0
 11768 ;; Tracked objects:
 11769 ;;		On entry : 0/0
 11770 ;;		On exit  : 0/0
 11771 ;;		Unchanged: 0/0
 11772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11773 ;;      Params:         4       0       0       0       0       0       0       0       0
 11774 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11775 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11776 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11777 ;;Total ram usage:        8 bytes
 11778 ;; Hardware stack levels used:    1
 11779 ;; Hardware stack levels required when called:    2
 11780 ;; This function calls:
 11781 ;;		Nothing
 11782 ;; This function is called by:
 11783 ;;		_dispLCD_num
 11784 ;;		_fifo_print
 11785 ;;		_dignum_tam
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           	psect	text48
 11790  002E78                     __ptext48:
 11791                           	callstack 0
 11792  002E78                     ___awdiv:
 11793                           	callstack 26
 11794  002E78  0E00               	movlw	0
 11795  002E7A  6E36               	movwf	___awdiv@sign^0,c
 11796  002E7C  BE34               	btfsc	(___awdiv@divisor+1)^0,7,c
 11797  002E7E  EF45  F017         	goto	u3130
 11798  002E82  EF43  F017         	goto	u3131
 11799  002E86                     u3131:
 11800  002E86  EF4B  F017         	goto	l5073
 11801  002E8A                     u3130:
 11802  002E8A  6C33               	negf	___awdiv@divisor^0,c
 11803  002E8C  1E34               	comf	(___awdiv@divisor+1)^0,f,c
 11804  002E8E  B0D8               	btfsc	status,0,c
 11805  002E90  2A34               	incf	(___awdiv@divisor+1)^0,f,c
 11806  002E92  0E01               	movlw	1
 11807  002E94  6E36               	movwf	___awdiv@sign^0,c
 11808  002E96                     l5073:
 11809  002E96  BE32               	btfsc	(___awdiv@dividend+1)^0,7,c
 11810  002E98  EF52  F017         	goto	u3140
 11811  002E9C  EF50  F017         	goto	u3141
 11812  002EA0                     u3141:
 11813  002EA0  EF58  F017         	goto	l5079
 11814  002EA4                     u3140:
 11815  002EA4  6C31               	negf	___awdiv@dividend^0,c
 11816  002EA6  1E32               	comf	(___awdiv@dividend+1)^0,f,c
 11817  002EA8  B0D8               	btfsc	status,0,c
 11818  002EAA  2A32               	incf	(___awdiv@dividend+1)^0,f,c
 11819  002EAC  0E01               	movlw	1
 11820  002EAE  1A36               	xorwf	___awdiv@sign^0,f,c
 11821  002EB0                     l5079:
 11822  002EB0  0E00               	movlw	0
 11823  002EB2  6E38               	movwf	(___awdiv@quotient+1)^0,c
 11824  002EB4  0E00               	movlw	0
 11825  002EB6  6E37               	movwf	___awdiv@quotient^0,c
 11826  002EB8  5033               	movf	___awdiv@divisor^0,w,c
 11827  002EBA  1034               	iorwf	(___awdiv@divisor+1)^0,w,c
 11828  002EBC  B4D8               	btfsc	status,2,c
 11829  002EBE  EF63  F017         	goto	u3151
 11830  002EC2  EF65  F017         	goto	u3150
 11831  002EC6                     u3151:
 11832  002EC6  EF8D  F017         	goto	l5101
 11833  002ECA                     u3150:
 11834  002ECA  0E01               	movlw	1
 11835  002ECC  6E35               	movwf	___awdiv@counter^0,c
 11836  002ECE  EF6D  F017         	goto	l5087
 11837  002ED2                     l5085:
 11838  002ED2  90D8               	bcf	status,0,c
 11839  002ED4  3633               	rlcf	___awdiv@divisor^0,f,c
 11840  002ED6  3634               	rlcf	(___awdiv@divisor+1)^0,f,c
 11841  002ED8  2A35               	incf	___awdiv@counter^0,f,c
 11842  002EDA                     l5087:
 11843  002EDA  AE34               	btfss	(___awdiv@divisor+1)^0,7,c
 11844  002EDC  EF72  F017         	goto	u3161
 11845  002EE0  EF74  F017         	goto	u3160
 11846  002EE4                     u3161:
 11847  002EE4  EF69  F017         	goto	l5085
 11848  002EE8                     u3160:
 11849  002EE8                     l5089:
 11850  002EE8  90D8               	bcf	status,0,c
 11851  002EEA  3637               	rlcf	___awdiv@quotient^0,f,c
 11852  002EEC  3638               	rlcf	(___awdiv@quotient+1)^0,f,c
 11853  002EEE  5033               	movf	___awdiv@divisor^0,w,c
 11854  002EF0  5C31               	subwf	___awdiv@dividend^0,w,c
 11855  002EF2  5034               	movf	(___awdiv@divisor+1)^0,w,c
 11856  002EF4  5832               	subwfb	(___awdiv@dividend+1)^0,w,c
 11857  002EF6  A0D8               	btfss	status,0,c
 11858  002EF8  EF80  F017         	goto	u3171
 11859  002EFC  EF82  F017         	goto	u3170
 11860  002F00                     u3171:
 11861  002F00  EF87  F017         	goto	l5097
 11862  002F04                     u3170:
 11863  002F04  5033               	movf	___awdiv@divisor^0,w,c
 11864  002F06  5E31               	subwf	___awdiv@dividend^0,f,c
 11865  002F08  5034               	movf	(___awdiv@divisor+1)^0,w,c
 11866  002F0A  5A32               	subwfb	(___awdiv@dividend+1)^0,f,c
 11867  002F0C  8037               	bsf	___awdiv@quotient^0,0,c
 11868  002F0E                     l5097:
 11869  002F0E  90D8               	bcf	status,0,c
 11870  002F10  3234               	rrcf	(___awdiv@divisor+1)^0,f,c
 11871  002F12  3233               	rrcf	___awdiv@divisor^0,f,c
 11872  002F14  2E35               	decfsz	___awdiv@counter^0,f,c
 11873  002F16  EF74  F017         	goto	l5089
 11874  002F1A                     l5101:
 11875  002F1A  5036               	movf	___awdiv@sign^0,w,c
 11876  002F1C  B4D8               	btfsc	status,2,c
 11877  002F1E  EF93  F017         	goto	u3181
 11878  002F22  EF95  F017         	goto	u3180
 11879  002F26                     u3181:
 11880  002F26  EF99  F017         	goto	l5105
 11881  002F2A                     u3180:
 11882  002F2A  6C37               	negf	___awdiv@quotient^0,c
 11883  002F2C  1E38               	comf	(___awdiv@quotient+1)^0,f,c
 11884  002F2E  B0D8               	btfsc	status,0,c
 11885  002F30  2A38               	incf	(___awdiv@quotient+1)^0,f,c
 11886  002F32                     l5105:
 11887  002F32  C037  F031         	movff	___awdiv@quotient,?___awdiv
 11888  002F36  C038  F032         	movff	___awdiv@quotient+1,?___awdiv+1
 11889  002F3A  0012               	return		;funcret
 11890  002F3C                     __end_of___awdiv:
 11891                           	callstack 0
 11892                           
 11893 ;; *************** function _codifica *****************
 11894 ;; Defined at:
 11895 ;;		line 200 in file "fifo.c"
 11896 ;; Parameters:    Size  Location     Type
 11897 ;;  tipo            1    wreg     unsigned char 
 11898 ;;  dado            2    0[COMRAM] PTR unsigned char 
 11899 ;;		 -> fifo_add_control@c(1), fifo_add_tempo@t(1), fifo_add@passo(1), RAM(2047), 
 11900 ;; Auto vars:     Size  Location     Type
 11901 ;;  tipo            1    4[COMRAM] unsigned char 
 11902 ;; Return value:  Size  Location     Type
 11903 ;;                  1    wreg      void 
 11904 ;; Registers used:
 11905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11906 ;; Tracked objects:
 11907 ;;		On entry : 0/0
 11908 ;;		On exit  : 0/0
 11909 ;;		Unchanged: 0/0
 11910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11911 ;;      Params:         2       0       0       0       0       0       0       0       0
 11912 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11913 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11914 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11915 ;;Total ram usage:        5 bytes
 11916 ;; Hardware stack levels used:    1
 11917 ;; Hardware stack levels required when called:    2
 11918 ;; This function calls:
 11919 ;;		Nothing
 11920 ;; This function is called by:
 11921 ;;		_fifo_delete
 11922 ;;		_fifo_add
 11923 ;;		_fifo_add_tempo
 11924 ;;		_fifo_add_control
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           	psect	text49
 11929  0024B0                     __ptext49:
 11930                           	callstack 0
 11931  0024B0                     _codifica:
 11932                           	callstack 27
 11933                           
 11934                           ;incstack = 0
 11935                           ;codifica@tipo stored from wreg
 11936  0024B0  6E35               	movwf	codifica@tipo^0,c
 11937  0024B2                     
 11938                           ;fifo.c: 200: void codifica( unsigned char tipo, unsigned char *dado );fifo.c: 201: {;fi
      +                          fo.c: 202:     switch( tipo )
 11939  0024B2  EFE8  F012         	goto	l5429
 11940  0024B6                     l5401:
 11941  0024B6  C031  FFD9         	movff	codifica@dado,fsr2l
 11942  0024BA  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11943  0024BE  50DF               	movf	indf2,w,c
 11944  0024C0  A4D8               	btfss	status,2,c
 11945  0024C2  EF65  F012         	goto	u3611
 11946  0024C6  EF67  F012         	goto	u3610
 11947  0024CA                     u3611:
 11948  0024CA  EF01  F013         	goto	l326
 11949  0024CE                     u3610:
 11950  0024CE                     
 11951                           ;fifo.c: 205:                        *dado = 254;
 11952  0024CE  C031  FFD9         	movff	codifica@dado,fsr2l
 11953  0024D2  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11954  0024D6  0EFE               	movlw	254
 11955  0024D8  6EDF               	movwf	indf2,c
 11956  0024DA  EF01  F013         	goto	l326
 11957  0024DE                     l5405:
 11958  0024DE  C031  FFD9         	movff	codifica@dado,fsr2l
 11959  0024E2  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11960  0024E6  0E64               	movlw	100
 11961  0024E8  26DF               	addwf	indf2,f,c
 11962  0024EA  EF01  F013         	goto	l326
 11963  0024EE                     l5407:
 11964  0024EE  C031  FFD9         	movff	codifica@dado,fsr2l
 11965  0024F2  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11966  0024F6  0EDD               	movlw	221
 11967  0024F8  6EDF               	movwf	indf2,c
 11968  0024FA  EF01  F013         	goto	l326
 11969  0024FE                     l5409:
 11970  0024FE  C031  FFD9         	movff	codifica@dado,fsr2l
 11971  002502  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11972  002506  0EDE               	movlw	222
 11973  002508  6EDF               	movwf	indf2,c
 11974  00250A  EF01  F013         	goto	l326
 11975  00250E                     l5411:
 11976  00250E  C031  FFD9         	movff	codifica@dado,fsr2l
 11977  002512  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11978  002516  0EDF               	movlw	223
 11979  002518  6EDF               	movwf	indf2,c
 11980  00251A  EF01  F013         	goto	l326
 11981  00251E                     l5413:
 11982  00251E  C031  FFD9         	movff	codifica@dado,fsr2l
 11983  002522  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11984  002526  0EE0               	movlw	224
 11985  002528  6EDF               	movwf	indf2,c
 11986  00252A  EF01  F013         	goto	l326
 11987  00252E                     l5415:
 11988  00252E  C031  FFD9         	movff	codifica@dado,fsr2l
 11989  002532  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11990  002536  0EE1               	movlw	225
 11991  002538  6EDF               	movwf	indf2,c
 11992  00253A  EF01  F013         	goto	l326
 11993  00253E                     l5417:
 11994  00253E  C031  FFD9         	movff	codifica@dado,fsr2l
 11995  002542  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11996  002546  0EE2               	movlw	226
 11997  002548  6EDF               	movwf	indf2,c
 11998  00254A  EF01  F013         	goto	l326
 11999  00254E                     l5419:
 12000  00254E  C031  FFD9         	movff	codifica@dado,fsr2l
 12001  002552  C032  FFDA         	movff	codifica@dado+1,fsr2h
 12002  002556  0EE3               	movlw	227
 12003  002558  6EDF               	movwf	indf2,c
 12004  00255A  EF01  F013         	goto	l326
 12005  00255E                     l5421:
 12006  00255E  C031  FFD9         	movff	codifica@dado,fsr2l
 12007  002562  C032  FFDA         	movff	codifica@dado+1,fsr2h
 12008  002566  0EE4               	movlw	228
 12009  002568  6EDF               	movwf	indf2,c
 12010  00256A  EF01  F013         	goto	l326
 12011  00256E                     l5425:
 12012  00256E  C031  FFD9         	movff	codifica@dado,fsr2l
 12013  002572  C032  FFDA         	movff	codifica@dado+1,fsr2h
 12014  002576  50DF               	movf	indf2,w,c
 12015  002578  6E33               	movwf	??_codifica^0,c
 12016  00257A  6A34               	clrf	(??_codifica+1)^0,c
 12017                           
 12018                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12019                           ; Switch size 1, requested type "simple"
 12020                           ; Number of cases is 1, Range of values is 0 to 0
 12021                           ; switch strategies available:
 12022                           ; Name         Instructions Cycles
 12023                           ; simple_byte            4     3 (average)
 12024                           ;	Chosen strategy is simple_byte
 12025  00257C  5034               	movf	(??_codifica+1)^0,w,c
 12026  00257E  0A00               	xorlw	0	; case 0
 12027  002580  B4D8               	btfsc	status,2,c
 12028  002582  EFC5  F012         	goto	l8031
 12029  002586  EF01  F013         	goto	l326
 12030  00258A                     l8031:
 12031                           
 12032                           ; Switch size 1, requested type "simple"
 12033                           ; Number of cases is 8, Range of values is 65 to 100
 12034                           ; switch strategies available:
 12035                           ; Name         Instructions Cycles
 12036                           ; simple_byte           25    13 (average)
 12037                           ;	Chosen strategy is simple_byte
 12038  00258A  5033               	movf	??_codifica^0,w,c
 12039  00258C  0A41               	xorlw	65	; case 65
 12040  00258E  B4D8               	btfsc	status,2,c
 12041  002590  EF77  F012         	goto	l5407
 12042  002594  0A03               	xorlw	3	; case 66
 12043  002596  B4D8               	btfsc	status,2,c
 12044  002598  EF87  F012         	goto	l5411
 12045  00259C  0A01               	xorlw	1	; case 67
 12046  00259E  B4D8               	btfsc	status,2,c
 12047  0025A0  EF97  F012         	goto	l5415
 12048  0025A4  0A07               	xorlw	7	; case 68
 12049  0025A6  B4D8               	btfsc	status,2,c
 12050  0025A8  EFA7  F012         	goto	l5419
 12051  0025AC  0A25               	xorlw	37	; case 97
 12052  0025AE  B4D8               	btfsc	status,2,c
 12053  0025B0  EF7F  F012         	goto	l5409
 12054  0025B4  0A03               	xorlw	3	; case 98
 12055  0025B6  B4D8               	btfsc	status,2,c
 12056  0025B8  EF8F  F012         	goto	l5413
 12057  0025BC  0A01               	xorlw	1	; case 99
 12058  0025BE  B4D8               	btfsc	status,2,c
 12059  0025C0  EF9F  F012         	goto	l5417
 12060  0025C4  0A07               	xorlw	7	; case 100
 12061  0025C6  B4D8               	btfsc	status,2,c
 12062  0025C8  EFAF  F012         	goto	l5421
 12063  0025CC  EF01  F013         	goto	l326
 12064  0025D0                     l5429:
 12065  0025D0  5035               	movf	codifica@tipo^0,w,c
 12066  0025D2  6E33               	movwf	??_codifica^0,c
 12067  0025D4  6A34               	clrf	(??_codifica+1)^0,c
 12068                           
 12069                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12070                           ; Switch size 1, requested type "simple"
 12071                           ; Number of cases is 1, Range of values is 0 to 0
 12072                           ; switch strategies available:
 12073                           ; Name         Instructions Cycles
 12074                           ; simple_byte            4     3 (average)
 12075                           ;	Chosen strategy is simple_byte
 12076  0025D6  5034               	movf	(??_codifica+1)^0,w,c
 12077  0025D8  0A00               	xorlw	0	; case 0
 12078  0025DA  B4D8               	btfsc	status,2,c
 12079  0025DC  EFF2  F012         	goto	l8033
 12080  0025E0  EF01  F013         	goto	l326
 12081  0025E4                     l8033:
 12082                           
 12083                           ; Switch size 1, requested type "simple"
 12084                           ; Number of cases is 3, Range of values is 97 to 116
 12085                           ; switch strategies available:
 12086                           ; Name         Instructions Cycles
 12087                           ; simple_byte           10     6 (average)
 12088                           ;	Chosen strategy is simple_byte
 12089  0025E4  5033               	movf	??_codifica^0,w,c
 12090  0025E6  0A61               	xorlw	97	; case 97
 12091  0025E8  B4D8               	btfsc	status,2,c
 12092  0025EA  EFB7  F012         	goto	l5425
 12093  0025EE  0A11               	xorlw	17	; case 112
 12094  0025F0  B4D8               	btfsc	status,2,c
 12095  0025F2  EF5B  F012         	goto	l5401
 12096  0025F6  0A04               	xorlw	4	; case 116
 12097  0025F8  B4D8               	btfsc	status,2,c
 12098  0025FA  EF6F  F012         	goto	l5405
 12099  0025FE  EF01  F013         	goto	l326
 12100  002602                     l326:
 12101  002602  0012               	return		;funcret
 12102  002604                     __end_of_codifica:
 12103                           	callstack 0
 12104                           
 12105 ;; *************** function _dispLCD_str *****************
 12106 ;; Defined at:
 12107 ;;		line 250 in file "dispLCD4vias.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;  str             2    7[COMRAM] PTR const unsigned char 
 12110 ;;		 -> STR_29(78), STR_28(62), STR_17(81), STR_6(83), 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  c               1   10[COMRAM] unsigned char 
 12113 ;;  lin             1    9[COMRAM] unsigned char 
 12114 ;; Return value:  Size  Location     Type
 12115 ;;                  1    wreg      void 
 12116 ;; Registers used:
 12117 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12118 ;; Tracked objects:
 12119 ;;		On entry : 0/0
 12120 ;;		On exit  : 0/0
 12121 ;;		Unchanged: 0/0
 12122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12123 ;;      Params:         2       0       0       0       0       0       0       0       0
 12124 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12125 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12126 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12127 ;;Total ram usage:        4 bytes
 12128 ;; Hardware stack levels used:    1
 12129 ;; Hardware stack levels required when called:    4
 12130 ;; This function calls:
 12131 ;;		_dispLCD_dataReg
 12132 ;;		_dispLCD_lincol
 12133 ;; This function is called by:
 12134 ;;		_main
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text50
 12139  003774                     __ptext50:
 12140                           	callstack 0
 12141  003774                     _dispLCD_str:
 12142                           	callstack 26
 12143  003774                     
 12144                           ;dispLCD4vias.c: 250: void dispLCD_str( const char * str );dispLCD4vias.c: 251: {;dispLC
      +                          D4vias.c: 252:     char lin = 0;
 12145  003774  0E00               	movlw	0
 12146  003776  6E3A               	movwf	dispLCD_str@lin^0,c
 12147  003778                     
 12148                           ;dispLCD4vias.c: 253:     char c;;dispLCD4vias.c: 254:     dispLCD_lincol(0,0);
 12149  003778  0E00               	movlw	0
 12150  00377A  6E33               	movwf	dispLCD_lincol@col^0,c
 12151  00377C  0E00               	movlw	0
 12152  00377E  EC5A  F01B         	call	_dispLCD_lincol
 12153                           
 12154                           ;dispLCD4vias.c: 256:     while( c = *str )
 12155  003782  EFD9  F01B         	goto	l5721
 12156  003786                     l5713:
 12157                           
 12158                           ;dispLCD4vias.c: 257:     {;dispLCD4vias.c: 258:         if( c != '\n' )
 12159  003786  0E0A               	movlw	10
 12160  003788  183B               	xorwf	dispLCD_str@c^0,w,c
 12161  00378A  B4D8               	btfsc	status,2,c
 12162  00378C  EFCA  F01B         	goto	u3891
 12163  003790  EFCC  F01B         	goto	u3890
 12164  003794                     u3891:
 12165  003794  EFD1  F01B         	goto	l5717
 12166  003798                     u3890:
 12167  003798                     
 12168                           ;dispLCD4vias.c: 259:             dispLCD_dataReg( c );
 12169  003798  503B               	movf	dispLCD_str@c^0,w,c
 12170  00379A  ECED  F01C         	call	_dispLCD_dataReg
 12171  00379E  EFD7  F01B         	goto	l5719
 12172  0037A2                     l5717:
 12173                           
 12174                           ;dispLCD4vias.c: 261:             dispLCD_lincol(++lin,0);
 12175  0037A2  0E00               	movlw	0
 12176  0037A4  6E33               	movwf	dispLCD_lincol@col^0,c
 12177  0037A6  2A3A               	incf	dispLCD_str@lin^0,f,c
 12178  0037A8  503A               	movf	dispLCD_str@lin^0,w,c
 12179  0037AA  EC5A  F01B         	call	_dispLCD_lincol
 12180  0037AE                     l5719:
 12181                           
 12182                           ;dispLCD4vias.c: 262:         ++str;
 12183  0037AE  4A38               	infsnz	dispLCD_str@str^0,f,c
 12184  0037B0  2A39               	incf	(dispLCD_str@str+1)^0,f,c
 12185  0037B2                     l5721:
 12186                           
 12187                           ;dispLCD4vias.c: 256:     while( c = *str )
 12188  0037B2  C038  FFF6         	movff	dispLCD_str@str,tblptrl
 12189  0037B6  C039  FFF7         	movff	dispLCD_str@str+1,tblptrh
 12190  0037BA                     	if	0	;tblptru may be non-zero
 12191  0037BA                     	endif
 12192  0037BA                     	if	0	;tblptru may be non-zero
 12193  0037BA                     	endif
 12194  0037BA  0008               	tblrd		*
 12195  0037BC  CFF5 F03B          	movff	tablat,dispLCD_str@c
 12196  0037C0  503B               	movf	dispLCD_str@c^0,w,c
 12197  0037C2  A4D8               	btfss	status,2,c
 12198  0037C4  EFE6  F01B         	goto	u3901
 12199  0037C8  EFE8  F01B         	goto	u3900
 12200  0037CC                     u3901:
 12201  0037CC  EFC3  F01B         	goto	l5713
 12202  0037D0                     u3900:
 12203  0037D0  0012               	return		;funcret
 12204  0037D2                     __end_of_dispLCD_str:
 12205                           	callstack 0
 12206                           
 12207 ;; *************** function _dispLCD_init *****************
 12208 ;; Defined at:
 12209 ;;		line 165 in file "dispLCD4vias.c"
 12210 ;; Parameters:    Size  Location     Type
 12211 ;;		None
 12212 ;; Auto vars:     Size  Location     Type
 12213 ;;		None
 12214 ;; Return value:  Size  Location     Type
 12215 ;;                  1    wreg      void 
 12216 ;; Registers used:
 12217 ;;		wreg, status,2, status,0, cstack
 12218 ;; Tracked objects:
 12219 ;;		On entry : 0/0
 12220 ;;		On exit  : 0/0
 12221 ;;		Unchanged: 0/0
 12222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12223 ;;      Params:         0       0       0       0       0       0       0       0       0
 12224 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12225 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12226 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12227 ;;Total ram usage:        0 bytes
 12228 ;; Hardware stack levels used:    1
 12229 ;; Hardware stack levels required when called:    3
 12230 ;; This function calls:
 12231 ;;		_delay
 12232 ;;		_dispLCD_instReg
 12233 ;; This function is called by:
 12234 ;;		_main
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           	psect	text51
 12239  003D28                     __ptext51:
 12240                           	callstack 0
 12241  003D28                     _dispLCD_init:
 12242                           	callstack 27
 12243  003D28                     
 12244                           ;dispLCD4vias.c: 167:     ADCON1 = 0xFF;
 12245  003D28  68C1               	setf	193,c	;volatile
 12246                           
 12247                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB2 = 0;
 12248  003D2A  9493               	bcf	147,2,c	;volatile
 12249                           
 12250                           ;dispLCD4vias.c: 171:     TRISBbits.TRISB3 = 0;
 12251  003D2C  9693               	bcf	147,3,c	;volatile
 12252                           
 12253                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB4 = 0;
 12254  003D2E  9893               	bcf	147,4,c	;volatile
 12255                           
 12256                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB5 = 0;
 12257  003D30  9A93               	bcf	147,5,c	;volatile
 12258                           
 12259                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB6 = 0;
 12260  003D32  9C93               	bcf	147,6,c	;volatile
 12261                           
 12262                           ;dispLCD4vias.c: 176:     TRISBbits.TRISB7 = 0;
 12263  003D34  9E93               	bcf	147,7,c	;volatile
 12264                           
 12265                           ;dispLCD4vias.c: 178:     LCDbits.EN = 1;
 12266  003D36  8E8A               	bsf	138,7,c	;volatile
 12267  003D38                     
 12268                           ;dispLCD4vias.c: 179:     delay(5);
 12269  003D38  0E00               	movlw	0
 12270  003D3A  6E32               	movwf	(delay@t+1)^0,c
 12271  003D3C  0E05               	movlw	5
 12272  003D3E  6E31               	movwf	delay@t^0,c
 12273  003D40  EC24  F01F         	call	_delay	;wreg free
 12274                           
 12275                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x20|0x00|0x08);
 12276  003D44  0E28               	movlw	40
 12277  003D46  EC6B  F015         	call	_dispLCD_instReg
 12278                           
 12279                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
 12280  003D4A  0E0C               	movlw	12
 12281  003D4C  EC6B  F015         	call	_dispLCD_instReg
 12282                           
 12283                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x01 );
 12284  003D50  0E01               	movlw	1
 12285  003D52  EC6B  F015         	call	_dispLCD_instReg
 12286                           
 12287                           ;dispLCD4vias.c: 183:     dispLCD_instReg( 0x02 );
 12288  003D56  0E02               	movlw	2
 12289  003D58  EC6B  F015         	call	_dispLCD_instReg
 12290  003D5C  0012               	return		;funcret
 12291  003D5E                     __end_of_dispLCD_init:
 12292                           	callstack 0
 12293                           
 12294 ;; *************** function _dispLCD_clr *****************
 12295 ;; Defined at:
 12296 ;;		line 244 in file "dispLCD4vias.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;		None
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;		None
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  1    wreg      void 
 12303 ;; Registers used:
 12304 ;;		wreg, status,2, status,0, cstack
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12310 ;;      Params:         0       0       0       0       0       0       0       0       0
 12311 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12312 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12313 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12314 ;;Total ram usage:        0 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; Hardware stack levels required when called:    3
 12317 ;; This function calls:
 12318 ;;		_dispLCD_instReg
 12319 ;; This function is called by:
 12320 ;;		_main
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324                           	psect	text52
 12325  0040DC                     __ptext52:
 12326                           	callstack 0
 12327  0040DC                     _dispLCD_clr:
 12328                           	callstack 27
 12329  0040DC                     
 12330                           ;dispLCD4vias.c: 246:     dispLCD_instReg(0x01);
 12331  0040DC  0E01               	movlw	1
 12332  0040DE  EC6B  F015         	call	_dispLCD_instReg
 12333  0040E2  0012               	return		;funcret
 12334  0040E4                     __end_of_dispLCD_clr:
 12335                           	callstack 0
 12336                           
 12337 ;; *************** function _dispLCD *****************
 12338 ;; Defined at:
 12339 ;;		line 187 in file "dispLCD4vias.c"
 12340 ;; Parameters:    Size  Location     Type
 12341 ;;  lin             1    wreg     unsigned char 
 12342 ;;  col             1    7[COMRAM] unsigned char 
 12343 ;;  str             2    8[COMRAM] PTR const unsigned char 
 12344 ;;		 -> STR_34(21), STR_33(21), STR_32(21), STR_31(2), 
 12345 ;;		 -> STR_30(2), STR_27(21), STR_26(21), STR_25(21), 
 12346 ;;		 -> STR_24(21), STR_23(21), STR_22(8), STR_21(21), 
 12347 ;;		 -> STR_20(21), STR_19(21), STR_18(21), STR_16(21), 
 12348 ;;		 -> STR_15(21), STR_14(2), STR_13(2), STR_12(21), 
 12349 ;;		 -> STR_11(21), STR_10(21), STR_9(21), STR_8(21), 
 12350 ;;		 -> STR_7(21), STR_5(21), STR_4(2), STR_3(2), 
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;  lin             1   11[COMRAM] unsigned char 
 12353 ;;  pos             1   10[COMRAM] unsigned char 
 12354 ;; Return value:  Size  Location     Type
 12355 ;;                  1    wreg      void 
 12356 ;; Registers used:
 12357 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12358 ;; Tracked objects:
 12359 ;;		On entry : 0/0
 12360 ;;		On exit  : 0/0
 12361 ;;		Unchanged: 0/0
 12362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12363 ;;      Params:         3       0       0       0       0       0       0       0       0
 12364 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12365 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12366 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12367 ;;Total ram usage:        5 bytes
 12368 ;; Hardware stack levels used:    1
 12369 ;; Hardware stack levels required when called:    4
 12370 ;; This function calls:
 12371 ;;		_dispLCD_dataReg
 12372 ;;		_dispLCD_lincol
 12373 ;; This function is called by:
 12374 ;;		_main
 12375 ;; This function uses a non-reentrant model
 12376 ;;
 12377                           
 12378                           	psect	text53
 12379  003A70                     __ptext53:
 12380                           	callstack 0
 12381  003A70                     _dispLCD:
 12382                           	callstack 26
 12383                           
 12384                           ;incstack = 0
 12385                           ;dispLCD@lin stored from wreg
 12386  003A70  6E3C               	movwf	dispLCD@lin^0,c
 12387  003A72                     
 12388                           ;dispLCD4vias.c: 187: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 188: {;dispLCD4vias.c: 189:     char pos = col;
 12389  003A72  C038  F03B         	movff	dispLCD@col,dispLCD@pos
 12390  003A76                     
 12391                           ;dispLCD4vias.c: 190:     dispLCD_lincol( lin, col );
 12392  003A76  C038  F033         	movff	dispLCD@col,dispLCD_lincol@col
 12393  003A7A  503C               	movf	dispLCD@lin^0,w,c
 12394  003A7C  EC5A  F01B         	call	_dispLCD_lincol
 12395                           
 12396                           ;dispLCD4vias.c: 192:     while( *str )
 12397  003A80  EF4D  F01D         	goto	l5705
 12398  003A84                     l5699:
 12399                           
 12400                           ;dispLCD4vias.c: 193:     {;dispLCD4vias.c: 194:         dispLCD_dataReg( *str );
 12401  003A84  C039  FFF6         	movff	dispLCD@str,tblptrl
 12402  003A88  C03A  FFF7         	movff	dispLCD@str+1,tblptrh
 12403  003A8C                     	if	0	;tblptru may be non-zero
 12404  003A8C                     	endif
 12405  003A8C                     	if	0	;tblptru may be non-zero
 12406  003A8C                     	endif
 12407  003A8C  0008               	tblrd		*
 12408  003A8E  50F5               	movf	tablat,w,c
 12409  003A90  ECED  F01C         	call	_dispLCD_dataReg
 12410  003A94                     
 12411                           ;dispLCD4vias.c: 195:         ++str;
 12412  003A94  4A39               	infsnz	dispLCD@str^0,f,c
 12413  003A96  2A3A               	incf	(dispLCD@str+1)^0,f,c
 12414  003A98                     
 12415                           ;dispLCD4vias.c: 196:         ++pos;
 12416  003A98  2A3B               	incf	dispLCD@pos^0,f,c
 12417  003A9A                     l5705:
 12418                           
 12419                           ;dispLCD4vias.c: 192:     while( *str )
 12420  003A9A  C039  FFF6         	movff	dispLCD@str,tblptrl
 12421  003A9E  C03A  FFF7         	movff	dispLCD@str+1,tblptrh
 12422  003AA2                     	if	0	;tblptru may be non-zero
 12423  003AA2                     	endif
 12424  003AA2                     	if	0	;tblptru may be non-zero
 12425  003AA2                     	endif
 12426  003AA2  0008               	tblrd		*
 12427  003AA4  50F5               	movf	tablat,w,c
 12428  003AA6  0900               	iorlw	0
 12429  003AA8  A4D8               	btfss	status,2,c
 12430  003AAA  EF59  F01D         	goto	u3881
 12431  003AAE  EF5B  F01D         	goto	u3880
 12432  003AB2                     u3881:
 12433  003AB2  EF42  F01D         	goto	l5699
 12434  003AB6                     u3880:
 12435  003AB6  0012               	return		;funcret
 12436  003AB8                     __end_of_dispLCD:
 12437                           	callstack 0
 12438                           
 12439 ;; *************** function _dispLCD_lincol *****************
 12440 ;; Defined at:
 12441 ;;		line 150 in file "dispLCD4vias.c"
 12442 ;; Parameters:    Size  Location     Type
 12443 ;;  lin             1    wreg     unsigned char 
 12444 ;;  col             1    2[COMRAM] unsigned char 
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;  lin             1    5[COMRAM] unsigned char 
 12447 ;;  aux             1    6[COMRAM] unsigned char 
 12448 ;; Return value:  Size  Location     Type
 12449 ;;                  1    wreg      void 
 12450 ;; Registers used:
 12451 ;;		wreg, status,2, status,0, cstack
 12452 ;; Tracked objects:
 12453 ;;		On entry : 0/0
 12454 ;;		On exit  : 0/0
 12455 ;;		Unchanged: 0/0
 12456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12457 ;;      Params:         1       0       0       0       0       0       0       0       0
 12458 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12459 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12460 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12461 ;;Total ram usage:        5 bytes
 12462 ;; Hardware stack levels used:    1
 12463 ;; Hardware stack levels required when called:    3
 12464 ;; This function calls:
 12465 ;;		_dispLCD_instReg
 12466 ;; This function is called by:
 12467 ;;		_dispLCD
 12468 ;;		_dispLCD_num
 12469 ;;		_dispLCD_str
 12470 ;;		_fifo_print
 12471 ;;		_printExec
 12472 ;;		_main
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           	psect	text54
 12477  0036B4                     __ptext54:
 12478                           	callstack 0
 12479  0036B4                     _dispLCD_lincol:
 12480                           	callstack 25
 12481                           
 12482                           ;incstack = 0
 12483                           ;dispLCD_lincol@lin stored from wreg
 12484  0036B4  6E36               	movwf	dispLCD_lincol@lin^0,c
 12485  0036B6                     
 12486                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
 12487  0036B6  0E00               	movlw	0
 12488  0036B8  6E37               	movwf	dispLCD_lincol@aux^0,c
 12489                           
 12490                           ;dispLCD4vias.c: 154:     switch(lin)
 12491  0036BA  EF6B  F01B         	goto	l5149
 12492  0036BE                     l5141:
 12493  0036BE  0E40               	movlw	64
 12494  0036C0  6E37               	movwf	dispLCD_lincol@aux^0,c
 12495  0036C2  EF84  F01B         	goto	l5151
 12496  0036C6                     l5143:
 12497  0036C6  0E14               	movlw	20
 12498  0036C8  6E37               	movwf	dispLCD_lincol@aux^0,c
 12499  0036CA  EF84  F01B         	goto	l5151
 12500  0036CE                     l5145:
 12501  0036CE  0E54               	movlw	84
 12502  0036D0  6E37               	movwf	dispLCD_lincol@aux^0,c
 12503  0036D2  EF84  F01B         	goto	l5151
 12504  0036D6                     l5149:
 12505  0036D6  5036               	movf	dispLCD_lincol@lin^0,w,c
 12506  0036D8  6E34               	movwf	??_dispLCD_lincol^0,c
 12507  0036DA  6A35               	clrf	(??_dispLCD_lincol+1)^0,c
 12508                           
 12509                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12510                           ; Switch size 1, requested type "simple"
 12511                           ; Number of cases is 1, Range of values is 0 to 0
 12512                           ; switch strategies available:
 12513                           ; Name         Instructions Cycles
 12514                           ; simple_byte            4     3 (average)
 12515                           ;	Chosen strategy is simple_byte
 12516  0036DC  5035               	movf	(??_dispLCD_lincol+1)^0,w,c
 12517  0036DE  0A00               	xorlw	0	; case 0
 12518  0036E0  B4D8               	btfsc	status,2,c
 12519  0036E2  EF75  F01B         	goto	l8035
 12520  0036E6  EF84  F01B         	goto	l5151
 12521  0036EA                     l8035:
 12522                           
 12523                           ; Switch size 1, requested type "simple"
 12524                           ; Number of cases is 3, Range of values is 1 to 3
 12525                           ; switch strategies available:
 12526                           ; Name         Instructions Cycles
 12527                           ; simple_byte           10     6 (average)
 12528                           ;	Chosen strategy is simple_byte
 12529  0036EA  5034               	movf	??_dispLCD_lincol^0,w,c
 12530  0036EC  0A01               	xorlw	1	; case 1
 12531  0036EE  B4D8               	btfsc	status,2,c
 12532  0036F0  EF5F  F01B         	goto	l5141
 12533  0036F4  0A03               	xorlw	3	; case 2
 12534  0036F6  B4D8               	btfsc	status,2,c
 12535  0036F8  EF63  F01B         	goto	l5143
 12536  0036FC  0A01               	xorlw	1	; case 3
 12537  0036FE  B4D8               	btfsc	status,2,c
 12538  003700  EF67  F01B         	goto	l5145
 12539  003704  EF84  F01B         	goto	l5151
 12540  003708                     l5151:
 12541                           
 12542                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
 12543  003708  5037               	movf	dispLCD_lincol@aux^0,w,c
 12544  00370A  2433               	addwf	dispLCD_lincol@col^0,w,c
 12545  00370C  0B7F               	andlw	127
 12546  00370E  0F80               	addlw	128
 12547  003710  EC6B  F015         	call	_dispLCD_instReg
 12548  003714  0012               	return		;funcret
 12549  003716                     __end_of_dispLCD_lincol:
 12550                           	callstack 0
 12551                           
 12552 ;; *************** function _dispLCD_instReg *****************
 12553 ;; Defined at:
 12554 ;;		line 101 in file "dispLCD4vias.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;  i               1    wreg     unsigned char 
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;  i               1    1[COMRAM] unsigned char 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  1    wreg      void 
 12561 ;; Registers used:
 12562 ;;		wreg, status,2, status,0
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12568 ;;      Params:         0       0       0       0       0       0       0       0       0
 12569 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12570 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12571 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12572 ;;Total ram usage:        2 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    2
 12575 ;; This function calls:
 12576 ;;		Nothing
 12577 ;; This function is called by:
 12578 ;;		_dispLCD_lincol
 12579 ;;		_dispLCD_init
 12580 ;;		_dispLCD_clr
 12581 ;; This function uses a non-reentrant model
 12582 ;;
 12583                           
 12584                           	psect	text55
 12585  002AD6                     __ptext55:
 12586                           	callstack 0
 12587  002AD6                     _dispLCD_instReg:
 12588                           	callstack 25
 12589                           
 12590                           ;incstack = 0
 12591                           ;dispLCD_instReg@i stored from wreg
 12592  002AD6  6E32               	movwf	dispLCD_instReg@i^0,c
 12593  002AD8                     
 12594                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
 12595  002AD8  9C8A               	bcf	138,6,c	;volatile
 12596  002ADA                     
 12597                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
 12598  002ADA  C032  F031         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12599  002ADE  3A31               	swapf	??_dispLCD_instReg^0,f,c
 12600  002AE0  0E0F               	movlw	15
 12601  002AE2  1631               	andwf	??_dispLCD_instReg^0,f,c
 12602  002AE4  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12603  002AE6  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12604  002AE8  508A               	movf	138,w,c	;volatile
 12605  002AEA  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12606  002AEC  0BC3               	andlw	-61
 12607  002AEE  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12608  002AF0  6E8A               	movwf	138,c	;volatile
 12609  002AF2                     
 12610                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
 12611  002AF2  9E8A               	bcf	138,7,c	;volatile
 12612                           
 12613                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
 12614  002AF4  0432               	decf	dispLCD_instReg@i^0,w,c
 12615  002AF6  B4D8               	btfsc	status,2,c
 12616  002AF8  EF80  F015         	goto	u3081
 12617  002AFC  EF82  F015         	goto	u3080
 12618  002B00                     u3081:
 12619  002B00  EF8B  F015         	goto	l5031
 12620  002B04                     u3080:
 12621  002B04  0E02               	movlw	2
 12622  002B06  1832               	xorwf	dispLCD_instReg@i^0,w,c
 12623  002B08  A4D8               	btfss	status,2,c
 12624  002B0A  EF89  F015         	goto	u3091
 12625  002B0E  EF8B  F015         	goto	u3090
 12626  002B12                     u3091:
 12627  002B12  EF94  F015         	goto	l5033
 12628  002B16                     u3090:
 12629  002B16                     l5031:
 12630                           
 12631                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
 12632  002B16  0E0D               	movlw	13
 12633  002B18  6E31               	movwf	??_dispLCD_instReg^0,c
 12634  002B1A  0EFC               	movlw	252
 12635  002B1C                     u5977:
 12636  002B1C  2EE8               	decfsz	wreg,f,c
 12637  002B1E  D7FE               	bra	u5977
 12638  002B20  2E31               	decfsz	??_dispLCD_instReg^0,f,c
 12639  002B22  D7FC               	bra	u5977
 12640  002B24  EF98  F015         	goto	l5035
 12641  002B28                     l5033:
 12642                           
 12643                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12644  002B28  0E42               	movlw	66
 12645  002B2A                     u5987:
 12646  002B2A  2EE8               	decfsz	wreg,f,c
 12647  002B2C  D7FE               	bra	u5987
 12648  002B2E  D000               	nop2	
 12649  002B30                     l5035:
 12650                           
 12651                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
 12652  002B30  8E8A               	bsf	138,7,c	;volatile
 12653  002B32                     
 12654                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
 12655  002B32  5032               	movf	dispLCD_instReg@i^0,w,c
 12656  002B34  0BF0               	andlw	240
 12657  002B36  0A20               	xorlw	32
 12658  002B38  A4D8               	btfss	status,2,c
 12659  002B3A  EFA1  F015         	goto	u3101
 12660  002B3E  EFA3  F015         	goto	u3100
 12661  002B42                     u3101:
 12662  002B42  EFB6  F015         	goto	l5049
 12663  002B46                     u3100:
 12664  002B46                     
 12665                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
 12666  002B46  9C8A               	bcf	138,6,c	;volatile
 12667  002B48                     
 12668                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
 12669  002B48  C032  F031         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12670  002B4C  3A31               	swapf	??_dispLCD_instReg^0,f,c
 12671  002B4E  0E0F               	movlw	15
 12672  002B50  1631               	andwf	??_dispLCD_instReg^0,f,c
 12673  002B52  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12674  002B54  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12675  002B56  508A               	movf	138,w,c	;volatile
 12676  002B58  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12677  002B5A  0BC3               	andlw	-61
 12678  002B5C  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12679  002B5E  6E8A               	movwf	138,c	;volatile
 12680  002B60                     
 12681                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
 12682  002B60  9E8A               	bcf	138,7,c	;volatile
 12683  002B62                     
 12684                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12685  002B62  0E42               	movlw	66
 12686  002B64                     u5997:
 12687  002B64  2EE8               	decfsz	wreg,f,c
 12688  002B66  D7FE               	bra	u5997
 12689  002B68  D000               	nop2	
 12690  002B6A                     
 12691                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
 12692  002B6A  8E8A               	bsf	138,7,c	;volatile
 12693  002B6C                     l5049:
 12694                           
 12695                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
 12696  002B6C  9C8A               	bcf	138,6,c	;volatile
 12697  002B6E                     
 12698                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
 12699  002B6E  C032  F031         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12700  002B72  0E0F               	movlw	15
 12701  002B74  1631               	andwf	??_dispLCD_instReg^0,f,c
 12702  002B76  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12703  002B78  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12704  002B7A  508A               	movf	138,w,c	;volatile
 12705  002B7C  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12706  002B7E  0BC3               	andlw	-61
 12707  002B80  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12708  002B82  6E8A               	movwf	138,c	;volatile
 12709  002B84                     
 12710                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
 12711  002B84  9E8A               	bcf	138,7,c	;volatile
 12712  002B86                     
 12713                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
 12714  002B86  0432               	decf	dispLCD_instReg@i^0,w,c
 12715  002B88  B4D8               	btfsc	status,2,c
 12716  002B8A  EFC9  F015         	goto	u3111
 12717  002B8E  EFCB  F015         	goto	u3110
 12718  002B92                     u3111:
 12719  002B92  EFD4  F015         	goto	l5059
 12720  002B96                     u3110:
 12721  002B96  0E02               	movlw	2
 12722  002B98  1832               	xorwf	dispLCD_instReg@i^0,w,c
 12723  002B9A  A4D8               	btfss	status,2,c
 12724  002B9C  EFD2  F015         	goto	u3121
 12725  002BA0  EFD4  F015         	goto	u3120
 12726  002BA4                     u3121:
 12727  002BA4  EFDD  F015         	goto	l5061
 12728  002BA8                     u3120:
 12729  002BA8                     l5059:
 12730                           
 12731                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
 12732  002BA8  0E0D               	movlw	13
 12733  002BAA  6E31               	movwf	??_dispLCD_instReg^0,c
 12734  002BAC  0EFC               	movlw	252
 12735  002BAE                     u6007:
 12736  002BAE  2EE8               	decfsz	wreg,f,c
 12737  002BB0  D7FE               	bra	u6007
 12738  002BB2  2E31               	decfsz	??_dispLCD_instReg^0,f,c
 12739  002BB4  D7FC               	bra	u6007
 12740  002BB6  EFE1  F015         	goto	l5063
 12741  002BBA                     l5061:
 12742                           
 12743                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12744  002BBA  0E42               	movlw	66
 12745  002BBC                     u6017:
 12746  002BBC  2EE8               	decfsz	wreg,f,c
 12747  002BBE  D7FE               	bra	u6017
 12748  002BC0  D000               	nop2	
 12749  002BC2                     l5063:
 12750                           
 12751                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
 12752  002BC2  8E8A               	bsf	138,7,c	;volatile
 12753  002BC4  0012               	return		;funcret
 12754  002BC6                     __end_of_dispLCD_instReg:
 12755                           	callstack 0
 12756                           
 12757 ;; *************** function _dispLCD_dataReg *****************
 12758 ;; Defined at:
 12759 ;;		line 134 in file "dispLCD4vias.c"
 12760 ;; Parameters:    Size  Location     Type
 12761 ;;  d               1    wreg     unsigned char 
 12762 ;; Auto vars:     Size  Location     Type
 12763 ;;  d               1    1[COMRAM] unsigned char 
 12764 ;; Return value:  Size  Location     Type
 12765 ;;                  1    wreg      void 
 12766 ;; Registers used:
 12767 ;;		wreg, status,2, status,0
 12768 ;; Tracked objects:
 12769 ;;		On entry : 0/0
 12770 ;;		On exit  : 0/0
 12771 ;;		Unchanged: 0/0
 12772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12773 ;;      Params:         0       0       0       0       0       0       0       0       0
 12774 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12775 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12776 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12777 ;;Total ram usage:        2 bytes
 12778 ;; Hardware stack levels used:    1
 12779 ;; Hardware stack levels required when called:    2
 12780 ;; This function calls:
 12781 ;;		Nothing
 12782 ;; This function is called by:
 12783 ;;		_dispLCD
 12784 ;;		_dispLCD_num
 12785 ;;		_dispLCD_str
 12786 ;;		_fifo_print
 12787 ;;		_printExec
 12788 ;;		_main
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           	psect	text56
 12793  0039DA                     __ptext56:
 12794                           	callstack 0
 12795  0039DA                     _dispLCD_dataReg:
 12796                           	callstack 26
 12797                           
 12798                           ;incstack = 0
 12799                           ;dispLCD_dataReg@d stored from wreg
 12800  0039DA  6E32               	movwf	dispLCD_dataReg@d^0,c
 12801  0039DC                     
 12802                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
 12803  0039DC  8C8A               	bsf	138,6,c	;volatile
 12804  0039DE                     
 12805                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
 12806  0039DE  C032  F031         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 12807  0039E2  3A31               	swapf	??_dispLCD_dataReg^0,f,c
 12808  0039E4  0E0F               	movlw	15
 12809  0039E6  1631               	andwf	??_dispLCD_dataReg^0,f,c
 12810  0039E8  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12811  0039EA  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12812  0039EC  508A               	movf	138,w,c	;volatile
 12813  0039EE  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12814  0039F0  0BC3               	andlw	-61
 12815  0039F2  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12816  0039F4  6E8A               	movwf	138,c	;volatile
 12817  0039F6                     
 12818                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
 12819  0039F6  9E8A               	bcf	138,7,c	;volatile
 12820  0039F8                     
 12821                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12822  0039F8  0E42               	movlw	66
 12823  0039FA                     u6027:
 12824  0039FA  2EE8               	decfsz	wreg,f,c
 12825  0039FC  D7FE               	bra	u6027
 12826  0039FE  D000               	nop2	
 12827  003A00                     
 12828                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
 12829  003A00  8E8A               	bsf	138,7,c	;volatile
 12830  003A02                     
 12831                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
 12832  003A02  8C8A               	bsf	138,6,c	;volatile
 12833  003A04                     
 12834                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
 12835  003A04  C032  F031         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 12836  003A08  0E0F               	movlw	15
 12837  003A0A  1631               	andwf	??_dispLCD_dataReg^0,f,c
 12838  003A0C  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12839  003A0E  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12840  003A10  508A               	movf	138,w,c	;volatile
 12841  003A12  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12842  003A14  0BC3               	andlw	-61
 12843  003A16  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12844  003A18  6E8A               	movwf	138,c	;volatile
 12845  003A1A                     
 12846                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
 12847  003A1A  9E8A               	bcf	138,7,c	;volatile
 12848                           
 12849                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12850  003A1C  0E42               	movlw	66
 12851  003A1E                     u6037:
 12852  003A1E  2EE8               	decfsz	wreg,f,c
 12853  003A20  D7FE               	bra	u6037
 12854  003A22  D000               	nop2	
 12855  003A24                     
 12856                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
 12857  003A24  8E8A               	bsf	138,7,c	;volatile
 12858  003A26  0012               	return		;funcret
 12859  003A28                     __end_of_dispLCD_dataReg:
 12860                           	callstack 0
 12861                           
 12862 ;; *************** function _dignum_conc *****************
 12863 ;; Defined at:
 12864 ;;		line 460 in file "fifo.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;  dig             1    wreg     unsigned char 
 12867 ;;  ptrNum          2    6[COMRAM] PTR unsigned int 
 12868 ;;		 -> main@ciclos(2), main@num(2), 
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;  dig             1   10[COMRAM] unsigned char 
 12871 ;; Return value:  Size  Location     Type
 12872 ;;                  1    wreg      void 
 12873 ;; Registers used:
 12874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12875 ;; Tracked objects:
 12876 ;;		On entry : 0/0
 12877 ;;		On exit  : 0/0
 12878 ;;		Unchanged: 0/0
 12879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12880 ;;      Params:         2       0       0       0       0       0       0       0       0
 12881 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12882 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12883 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12884 ;;Total ram usage:        5 bytes
 12885 ;; Hardware stack levels used:    1
 12886 ;; Hardware stack levels required when called:    3
 12887 ;; This function calls:
 12888 ;;		___wmul
 12889 ;; This function is called by:
 12890 ;;		_main
 12891 ;; This function uses a non-reentrant model
 12892 ;;
 12893                           
 12894                           	psect	text57
 12895  003AB8                     __ptext57:
 12896                           	callstack 0
 12897  003AB8                     _dignum_conc:
 12898                           	callstack 27
 12899                           
 12900                           ;incstack = 0
 12901                           ;dignum_conc@dig stored from wreg
 12902  003AB8  6E3B               	movwf	dignum_conc@dig^0,c
 12903  003ABA                     
 12904                           ;fifo.c: 460: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 461: {;fifo.c: 
      +                          462:     *ptrNum = (*ptrNum * 10) + (dig - '0');
 12905  003ABA  0ED0               	movlw	208
 12906  003ABC  6E39               	movwf	??_dignum_conc^0,c
 12907  003ABE  0EFF               	movlw	255
 12908  003AC0  6E3A               	movwf	(??_dignum_conc+1)^0,c
 12909  003AC2  C037  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12910  003AC6  C038  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12911  003ACA  CFDE F031          	movff	postinc2,___wmul@multiplier
 12912  003ACE  CFDD F032          	movff	postdec2,___wmul@multiplier+1
 12913  003AD2  0E00               	movlw	0
 12914  003AD4  6E34               	movwf	(___wmul@multiplicand+1)^0,c
 12915  003AD6  0E0A               	movlw	10
 12916  003AD8  6E33               	movwf	___wmul@multiplicand^0,c
 12917  003ADA  EC65  F01F         	call	___wmul	;wreg free
 12918  003ADE  503B               	movf	dignum_conc@dig^0,w,c
 12919  003AE0  2631               	addwf	?___wmul^0,f,c
 12920  003AE2  0E00               	movlw	0
 12921  003AE4  2232               	addwfc	(?___wmul+1)^0,f,c
 12922  003AE6  5039               	movf	??_dignum_conc^0,w,c
 12923  003AE8  2631               	addwf	?___wmul^0,f,c
 12924  003AEA  503A               	movf	(??_dignum_conc+1)^0,w,c
 12925  003AEC  2232               	addwfc	(?___wmul+1)^0,f,c
 12926  003AEE  C037  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12927  003AF2  C038  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12928  003AF6  C031  FFDE         	movff	?___wmul,postinc2
 12929  003AFA  C032  FFDD         	movff	?___wmul+1,postdec2
 12930  003AFE  0012               	return		;funcret
 12931  003B00                     __end_of_dignum_conc:
 12932                           	callstack 0
 12933                           
 12934 ;; *************** function ___wmul *****************
 12935 ;; Defined at:
 12936 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;  multiplier      2    0[COMRAM] unsigned int 
 12939 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  product         2    4[COMRAM] unsigned int 
 12942 ;; Return value:  Size  Location     Type
 12943 ;;                  2    0[COMRAM] unsigned int 
 12944 ;; Registers used:
 12945 ;;		wreg, status,2, status,0, prodl, prodh
 12946 ;; Tracked objects:
 12947 ;;		On entry : 0/0
 12948 ;;		On exit  : 0/0
 12949 ;;		Unchanged: 0/0
 12950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12951 ;;      Params:         4       0       0       0       0       0       0       0       0
 12952 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12953 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12954 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12955 ;;Total ram usage:        6 bytes
 12956 ;; Hardware stack levels used:    1
 12957 ;; Hardware stack levels required when called:    2
 12958 ;; This function calls:
 12959 ;;		Nothing
 12960 ;; This function is called by:
 12961 ;;		_dignum_conc
 12962 ;;		_main
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           	psect	text58
 12967  003ECA                     __ptext58:
 12968                           	callstack 0
 12969  003ECA                     ___wmul:
 12970                           	callstack 27
 12971  003ECA  5031               	movf	___wmul@multiplier^0,w,c
 12972  003ECC  0233               	mulwf	___wmul@multiplicand^0,c
 12973  003ECE  CFF3 F035          	movff	prodl,___wmul@product
 12974  003ED2  CFF4 F036          	movff	prodh,___wmul@product+1
 12975  003ED6  5031               	movf	___wmul@multiplier^0,w,c
 12976  003ED8  0234               	mulwf	(___wmul@multiplicand+1)^0,c
 12977  003EDA  50F3               	movf	243,w,c
 12978  003EDC  2636               	addwf	(___wmul@product+1)^0,f,c
 12979  003EDE  5032               	movf	(___wmul@multiplier+1)^0,w,c
 12980  003EE0  0233               	mulwf	___wmul@multiplicand^0,c
 12981  003EE2  50F3               	movf	243,w,c
 12982  003EE4  2636               	addwf	(___wmul@product+1)^0,f,c
 12983  003EE6  C035  F031         	movff	___wmul@product,?___wmul
 12984  003EEA  C036  F032         	movff	___wmul@product+1,?___wmul+1
 12985  003EEE  0012               	return		;funcret
 12986  003EF0                     __end_of___wmul:
 12987                           	callstack 0
 12988                           
 12989 ;; *************** function _dignum_apagar *****************
 12990 ;; Defined at:
 12991 ;;		line 465 in file "fifo.c"
 12992 ;; Parameters:    Size  Location     Type
 12993 ;;  ptrNum          2    7[COMRAM] PTR unsigned int 
 12994 ;;		 -> main@ciclos(2), main@num(2), 
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;		None
 12997 ;; Return value:  Size  Location     Type
 12998 ;;                  1    wreg      void 
 12999 ;; Registers used:
 13000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13001 ;; Tracked objects:
 13002 ;;		On entry : 0/0
 13003 ;;		On exit  : 0/0
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13006 ;;      Params:         2       0       0       0       0       0       0       0       0
 13007 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13008 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13009 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13010 ;;Total ram usage:        2 bytes
 13011 ;; Hardware stack levels used:    1
 13012 ;; Hardware stack levels required when called:    3
 13013 ;; This function calls:
 13014 ;;		___lwdiv
 13015 ;; This function is called by:
 13016 ;;		_main
 13017 ;; This function uses a non-reentrant model
 13018 ;;
 13019                           
 13020                           	psect	text59
 13021  003DEC                     __ptext59:
 13022                           	callstack 0
 13023  003DEC                     _dignum_apagar:
 13024                           	callstack 27
 13025  003DEC                     
 13026                           ;fifo.c: 465: void dignum_apagar(unsigned int * ptrNum );fifo.c: 466: {;fifo.c: 467:    
      +                           *ptrNum /= 10;
 13027  003DEC  C038  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 13028  003DF0  C039  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 13029  003DF4  CFDE F031          	movff	postinc2,___lwdiv@dividend
 13030  003DF8  CFDD F032          	movff	postdec2,___lwdiv@dividend+1
 13031  003DFC  0E00               	movlw	0
 13032  003DFE  6E34               	movwf	(___lwdiv@divisor+1)^0,c
 13033  003E00  0E0A               	movlw	10
 13034  003E02  6E33               	movwf	___lwdiv@divisor^0,c
 13035  003E04  ECB4  F01A         	call	___lwdiv	;wreg free
 13036  003E08  C038  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 13037  003E0C  C039  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 13038  003E10  C031  FFDE         	movff	?___lwdiv,postinc2
 13039  003E14  C032  FFDD         	movff	?___lwdiv+1,postdec2
 13040  003E18  0012               	return		;funcret
 13041  003E1A                     __end_of_dignum_apagar:
 13042                           	callstack 0
 13043                           
 13044 ;; *************** function ___lwdiv *****************
 13045 ;; Defined at:
 13046 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
 13047 ;; Parameters:    Size  Location     Type
 13048 ;;  dividend        2    0[COMRAM] unsigned int 
 13049 ;;  divisor         2    2[COMRAM] unsigned int 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  quotient        2    4[COMRAM] unsigned int 
 13052 ;;  counter         1    6[COMRAM] unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  2    0[COMRAM] unsigned int 
 13055 ;; Registers used:
 13056 ;;		wreg, status,2, status,0
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13062 ;;      Params:         4       0       0       0       0       0       0       0       0
 13063 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13065 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13066 ;;Total ram usage:        7 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    2
 13069 ;; This function calls:
 13070 ;;		Nothing
 13071 ;; This function is called by:
 13072 ;;		_dignum_apagar
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           	psect	text60
 13077  003568                     __ptext60:
 13078                           	callstack 0
 13079  003568                     ___lwdiv:
 13080                           	callstack 27
 13081  003568  0E00               	movlw	0
 13082  00356A  6E36               	movwf	(___lwdiv@quotient+1)^0,c
 13083  00356C  0E00               	movlw	0
 13084  00356E  6E35               	movwf	___lwdiv@quotient^0,c
 13085  003570  5033               	movf	___lwdiv@divisor^0,w,c
 13086  003572  1034               	iorwf	(___lwdiv@divisor+1)^0,w,c
 13087  003574  B4D8               	btfsc	status,2,c
 13088  003576  EFBF  F01A         	goto	u3851
 13089  00357A  EFC1  F01A         	goto	u3850
 13090  00357E                     u3851:
 13091  00357E  EFE9  F01A         	goto	l1741
 13092  003582                     u3850:
 13093  003582  0E01               	movlw	1
 13094  003584  6E37               	movwf	___lwdiv@counter^0,c
 13095  003586  EFC9  F01A         	goto	l5581
 13096  00358A                     l5579:
 13097  00358A  90D8               	bcf	status,0,c
 13098  00358C  3633               	rlcf	___lwdiv@divisor^0,f,c
 13099  00358E  3634               	rlcf	(___lwdiv@divisor+1)^0,f,c
 13100  003590  2A37               	incf	___lwdiv@counter^0,f,c
 13101  003592                     l5581:
 13102  003592  AE34               	btfss	(___lwdiv@divisor+1)^0,7,c
 13103  003594  EFCE  F01A         	goto	u3861
 13104  003598  EFD0  F01A         	goto	u3860
 13105  00359C                     u3861:
 13106  00359C  EFC5  F01A         	goto	l5579
 13107  0035A0                     u3860:
 13108  0035A0                     l5583:
 13109  0035A0  90D8               	bcf	status,0,c
 13110  0035A2  3635               	rlcf	___lwdiv@quotient^0,f,c
 13111  0035A4  3636               	rlcf	(___lwdiv@quotient+1)^0,f,c
 13112  0035A6  5033               	movf	___lwdiv@divisor^0,w,c
 13113  0035A8  5C31               	subwf	___lwdiv@dividend^0,w,c
 13114  0035AA  5034               	movf	(___lwdiv@divisor+1)^0,w,c
 13115  0035AC  5832               	subwfb	(___lwdiv@dividend+1)^0,w,c
 13116  0035AE  A0D8               	btfss	status,0,c
 13117  0035B0  EFDC  F01A         	goto	u3871
 13118  0035B4  EFDE  F01A         	goto	u3870
 13119  0035B8                     u3871:
 13120  0035B8  EFE3  F01A         	goto	l5591
 13121  0035BC                     u3870:
 13122  0035BC  5033               	movf	___lwdiv@divisor^0,w,c
 13123  0035BE  5E31               	subwf	___lwdiv@dividend^0,f,c
 13124  0035C0  5034               	movf	(___lwdiv@divisor+1)^0,w,c
 13125  0035C2  5A32               	subwfb	(___lwdiv@dividend+1)^0,f,c
 13126  0035C4  8035               	bsf	___lwdiv@quotient^0,0,c
 13127  0035C6                     l5591:
 13128  0035C6  90D8               	bcf	status,0,c
 13129  0035C8  3234               	rrcf	(___lwdiv@divisor+1)^0,f,c
 13130  0035CA  3233               	rrcf	___lwdiv@divisor^0,f,c
 13131  0035CC  2E37               	decfsz	___lwdiv@counter^0,f,c
 13132  0035CE  EFD0  F01A         	goto	l5583
 13133  0035D2                     l1741:
 13134  0035D2  C035  F031         	movff	___lwdiv@quotient,?___lwdiv
 13135  0035D6  C036  F032         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13136  0035DA  0012               	return		;funcret
 13137  0035DC                     __end_of___lwdiv:
 13138                           	callstack 0
 13139                           
 13140 ;; *************** function _deletar_receita *****************
 13141 ;; Defined at:
 13142 ;;		line 77 in file "eeprom.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;  receita         1    wreg     unsigned char 
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;  receita         1    6[COMRAM] unsigned char 
 13147 ;;  i               1    7[COMRAM] unsigned char 
 13148 ;;  aux             2    4[COMRAM] int 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      void 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2, status,0, cstack
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13158 ;;      Params:         0       0       0       0       0       0       0       0       0
 13159 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13160 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13161 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13162 ;;Total ram usage:        4 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    3
 13165 ;; This function calls:
 13166 ;;		_EEPROM_write
 13167 ;;		_end_receita
 13168 ;; This function is called by:
 13169 ;;		_main
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           	psect	text61
 13174  003CBA                     __ptext61:
 13175                           	callstack 0
 13176  003CBA                     _deletar_receita:
 13177                           	callstack 27
 13178                           
 13179                           ;incstack = 0
 13180                           ;deletar_receita@receita stored from wreg
 13181  003CBA  6E37               	movwf	deletar_receita@receita^0,c
 13182  003CBC                     
 13183                           ;eeprom.c: 77: void deletar_receita (char receita);eeprom.c: 78: {;eeprom.c: 79:    int 
      +                          aux;;eeprom.c: 80:    aux = end_receita(receita);
 13184  003CBC  C037  F031         	movff	deletar_receita@receita,end_receita@x
 13185  003CC0  6A32               	clrf	(end_receita@x+1)^0,c
 13186  003CC2  EC78  F01F         	call	_end_receita	;wreg free
 13187  003CC6  C031  F035         	movff	?_end_receita,deletar_receita@aux
 13188  003CCA  C032  F036         	movff	?_end_receita+1,deletar_receita@aux+1
 13189  003CCE                     
 13190                           ;eeprom.c: 81:    for( char i=0 ; i<16; i++)
 13191  003CCE  0E00               	movlw	0
 13192  003CD0  6E38               	movwf	deletar_receita@i^0,c
 13193  003CD2                     l5765:
 13194                           
 13195                           ;eeprom.c: 82:         EEPROM_write((aux+i),0);
 13196  003CD2  0E00               	movlw	0
 13197  003CD4  6E31               	movwf	EEPROM_write@data^0,c
 13198  003CD6  5038               	movf	deletar_receita@i^0,w,c
 13199  003CD8  2435               	addwf	deletar_receita@aux^0,w,c
 13200  003CDA  EC0D  F01F         	call	_EEPROM_write
 13201  003CDE  2A38               	incf	deletar_receita@i^0,f,c
 13202  003CE0  0E0F               	movlw	15
 13203  003CE2  6438               	cpfsgt	deletar_receita@i^0,c
 13204  003CE4  EF76  F01E         	goto	u3931
 13205  003CE8  EF78  F01E         	goto	u3930
 13206  003CEC                     u3931:
 13207  003CEC  EF69  F01E         	goto	l5765
 13208  003CF0                     u3930:
 13209  003CF0  0012               	return		;funcret
 13210  003CF2                     __end_of_deletar_receita:
 13211                           	callstack 0
 13212                           
 13213 ;; *************** function _EEPROM_write *****************
 13214 ;; Defined at:
 13215 ;;		line 24 in file "eeprom.c"
 13216 ;; Parameters:    Size  Location     Type
 13217 ;;  addr            1    wreg     unsigned char 
 13218 ;;  data            1    0[COMRAM] unsigned char 
 13219 ;; Auto vars:     Size  Location     Type
 13220 ;;  addr            1    1[COMRAM] unsigned char 
 13221 ;; Return value:  Size  Location     Type
 13222 ;;                  1    wreg      void 
 13223 ;; Registers used:
 13224 ;;		wreg, status,2
 13225 ;; Tracked objects:
 13226 ;;		On entry : 0/0
 13227 ;;		On exit  : 0/0
 13228 ;;		Unchanged: 0/0
 13229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13230 ;;      Params:         1       0       0       0       0       0       0       0       0
 13231 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13232 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13233 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13234 ;;Total ram usage:        2 bytes
 13235 ;; Hardware stack levels used:    1
 13236 ;; Hardware stack levels required when called:    2
 13237 ;; This function calls:
 13238 ;;		Nothing
 13239 ;; This function is called by:
 13240 ;;		_salvar_receita
 13241 ;;		_salvar_dado
 13242 ;;		_deletar_receita
 13243 ;;		_formatar_receitas
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           	psect	text62
 13248  003E1A                     __ptext62:
 13249                           	callstack 0
 13250  003E1A                     _EEPROM_write:
 13251                           	callstack 27
 13252                           
 13253                           ;incstack = 0
 13254                           ;EEPROM_write@addr stored from wreg
 13255  003E1A  6E32               	movwf	EEPROM_write@addr^0,c
 13256  003E1C                     
 13257                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
 13258  003E1C  9EF2               	bcf	242,7,c	;volatile
 13259  003E1E                     
 13260                           ;eeprom.c: 27:     EEADR = addr;
 13261  003E1E  C032  FFA9         	movff	EEPROM_write@addr,4009	;volatile
 13262  003E22                     
 13263                           ;eeprom.c: 28:     EEDATA = data;
 13264  003E22  C031  FFA8         	movff	EEPROM_write@data,4008	;volatile
 13265  003E26                     
 13266                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
 13267  003E26  9EA6               	bcf	166,7,c	;volsfr
 13268  003E28                     
 13269                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
 13270  003E28  84A6               	bsf	166,2,c	;volsfr
 13271  003E2A                     
 13272                           ;eeprom.c: 31:     EECON2 = 0x55;
 13273  003E2A  0E55               	movlw	85
 13274  003E2C  6EA7               	movwf	167,c	;volsfr
 13275  003E2E                     
 13276                           ;eeprom.c: 32:     EECON2 = 0xAA;
 13277  003E2E  0EAA               	movlw	170
 13278  003E30  6EA7               	movwf	167,c	;volsfr
 13279  003E32                     
 13280                           ;eeprom.c: 33:     EECON1bits.WR = 1;
 13281  003E32  82A6               	bsf	166,1,c	;volsfr
 13282  003E34                     l155:
 13283  003E34  B2A6               	btfsc	166,1,c	;volsfr
 13284  003E36  EF1F  F01F         	goto	u3461
 13285  003E3A  EF21  F01F         	goto	u3460
 13286  003E3E                     u3461:
 13287  003E3E  EF1A  F01F         	goto	l155
 13288  003E42                     u3460:
 13289  003E42                     
 13290                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
 13291  003E42  94A6               	bcf	166,2,c	;volsfr
 13292                           
 13293                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
 13294  003E44  8EF2               	bsf	242,7,c	;volatile
 13295  003E46  0012               	return		;funcret
 13296  003E48                     __end_of_EEPROM_write:
 13297                           	callstack 0
 13298                           
 13299 ;; *************** function _buscar_receita *****************
 13300 ;; Defined at:
 13301 ;;		line 55 in file "eeprom.c"
 13302 ;; Parameters:    Size  Location     Type
 13303 ;;  adrs            1    wreg     unsigned char 
 13304 ;;  data            2    6[COMRAM] PTR unsigned char 
 13305 ;;		 -> main@vetor_aux(16), 
 13306 ;; Auto vars:     Size  Location     Type
 13307 ;;  adrs            1   10[COMRAM] unsigned char 
 13308 ;;  i               1   11[COMRAM] unsigned char 
 13309 ;;  aux             2    8[COMRAM] int 
 13310 ;; Return value:  Size  Location     Type
 13311 ;;                  1    wreg      void 
 13312 ;; Registers used:
 13313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13314 ;; Tracked objects:
 13315 ;;		On entry : 0/0
 13316 ;;		On exit  : 0/0
 13317 ;;		Unchanged: 0/0
 13318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13319 ;;      Params:         2       0       0       0       0       0       0       0       0
 13320 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13321 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13322 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13323 ;;Total ram usage:        6 bytes
 13324 ;; Hardware stack levels used:    1
 13325 ;; Hardware stack levels required when called:    3
 13326 ;; This function calls:
 13327 ;;		_EEPROM_read
 13328 ;;		_end_receita
 13329 ;; This function is called by:
 13330 ;;		_main
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text63
 13335  003B8C                     __ptext63:
 13336                           	callstack 0
 13337  003B8C                     _buscar_receita:
 13338                           	callstack 27
 13339                           
 13340                           ;incstack = 0
 13341                           ;buscar_receita@adrs stored from wreg
 13342  003B8C  6E3B               	movwf	buscar_receita@adrs^0,c
 13343  003B8E                     
 13344                           ;eeprom.c: 55: void buscar_receita (char adrs, unsigned char * data );eeprom.c: 56: {;ee
      +                          prom.c: 57:     int aux;;eeprom.c: 58:     aux = end_receita(adrs);
 13345  003B8E  C03B  F031         	movff	buscar_receita@adrs,end_receita@x
 13346  003B92  6A32               	clrf	(end_receita@x+1)^0,c
 13347  003B94  EC78  F01F         	call	_end_receita	;wreg free
 13348  003B98  C031  F039         	movff	?_end_receita,buscar_receita@aux
 13349  003B9C  C032  F03A         	movff	?_end_receita+1,buscar_receita@aux+1
 13350  003BA0                     
 13351                           ;eeprom.c: 59:     for( char i=0; i<16; i++ )
 13352  003BA0  0E00               	movlw	0
 13353  003BA2  6E3C               	movwf	buscar_receita@i^0,c
 13354  003BA4                     l5745:
 13355                           
 13356                           ;eeprom.c: 60:        *(data+i) = EEPROM_read(aux+i);
 13357  003BA4  503C               	movf	buscar_receita@i^0,w,c
 13358  003BA6  2437               	addwf	buscar_receita@data^0,w,c
 13359  003BA8  6ED9               	movwf	fsr2l,c
 13360  003BAA  0E00               	movlw	0
 13361  003BAC  2038               	addwfc	(buscar_receita@data+1)^0,w,c
 13362  003BAE  6EDA               	movwf	fsr2h,c
 13363  003BB0  503C               	movf	buscar_receita@i^0,w,c
 13364  003BB2  2439               	addwf	buscar_receita@aux^0,w,c
 13365  003BB4  EC49  F020         	call	_EEPROM_read
 13366  003BB8  6EDF               	movwf	indf2,c
 13367  003BBA  2A3C               	incf	buscar_receita@i^0,f,c
 13368  003BBC  0E0F               	movlw	15
 13369  003BBE  643C               	cpfsgt	buscar_receita@i^0,c
 13370  003BC0  EFE4  F01D         	goto	u3921
 13371  003BC4  EFE6  F01D         	goto	u3920
 13372  003BC8                     u3921:
 13373  003BC8  EFD2  F01D         	goto	l5745
 13374  003BCC                     u3920:
 13375  003BCC  0012               	return		;funcret
 13376  003BCE                     __end_of_buscar_receita:
 13377                           	callstack 0
 13378                           
 13379 ;; *************** function _buscar_dado *****************
 13380 ;; Defined at:
 13381 ;;		line 70 in file "eeprom.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;  adrs            1    wreg     unsigned char 
 13384 ;;  col             1    6[COMRAM] unsigned char 
 13385 ;;  data            2    7[COMRAM] PTR unsigned char 
 13386 ;;		 -> main@init_cond(1), 
 13387 ;; Auto vars:     Size  Location     Type
 13388 ;;  adrs            1   11[COMRAM] unsigned char 
 13389 ;;  aux             2    9[COMRAM] int 
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      void 
 13392 ;; Registers used:
 13393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13399 ;;      Params:         3       0       0       0       0       0       0       0       0
 13400 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13401 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13402 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13403 ;;Total ram usage:        6 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:    3
 13406 ;; This function calls:
 13407 ;;		_EEPROM_read
 13408 ;;		_end_receita
 13409 ;; This function is called by:
 13410 ;;		_main
 13411 ;; This function uses a non-reentrant model
 13412 ;;
 13413                           
 13414                           	psect	text64
 13415  003EA2                     __ptext64:
 13416                           	callstack 0
 13417  003EA2                     _buscar_dado:
 13418                           	callstack 27
 13419                           
 13420                           ;incstack = 0
 13421                           ;buscar_dado@adrs stored from wreg
 13422  003EA2  6E3C               	movwf	buscar_dado@adrs^0,c
 13423  003EA4                     
 13424                           ;eeprom.c: 70: void buscar_dado (char adrs, char col, unsigned char *data);eeprom.c: 71:
      +                           {;eeprom.c: 72:     int aux;;eeprom.c: 73:     aux = end_receita(adrs);
 13425  003EA4  C03C  F031         	movff	buscar_dado@adrs,end_receita@x
 13426  003EA8  6A32               	clrf	(end_receita@x+1)^0,c
 13427  003EAA  EC78  F01F         	call	_end_receita	;wreg free
 13428  003EAE  C031  F03A         	movff	?_end_receita,buscar_dado@aux
 13429  003EB2  C032  F03B         	movff	?_end_receita+1,buscar_dado@aux+1
 13430  003EB6                     
 13431                           ;eeprom.c: 74:     *data = EEPROM_read((aux+col));
 13432  003EB6  5037               	movf	buscar_dado@col^0,w,c
 13433  003EB8  243A               	addwf	buscar_dado@aux^0,w,c
 13434  003EBA  EC49  F020         	call	_EEPROM_read
 13435  003EBE  C038  FFD9         	movff	buscar_dado@data,fsr2l
 13436  003EC2  C039  FFDA         	movff	buscar_dado@data+1,fsr2h
 13437  003EC6  6EDF               	movwf	indf2,c
 13438  003EC8  0012               	return		;funcret
 13439  003ECA                     __end_of_buscar_dado:
 13440                           	callstack 0
 13441                           
 13442 ;; *************** function _end_receita *****************
 13443 ;; Defined at:
 13444 ;;		line 41 in file "eeprom.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  x               2    0[COMRAM] int 
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;		None
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  2    0[COMRAM] int 
 13451 ;; Registers used:
 13452 ;;		wreg, status,2, status,0
 13453 ;; Tracked objects:
 13454 ;;		On entry : 0/0
 13455 ;;		On exit  : 0/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13458 ;;      Params:         2       0       0       0       0       0       0       0       0
 13459 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13460 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13461 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13462 ;;Total ram usage:        4 bytes
 13463 ;; Hardware stack levels used:    1
 13464 ;; Hardware stack levels required when called:    2
 13465 ;; This function calls:
 13466 ;;		Nothing
 13467 ;; This function is called by:
 13468 ;;		_salvar_receita
 13469 ;;		_buscar_receita
 13470 ;;		_salvar_dado
 13471 ;;		_buscar_dado
 13472 ;;		_deletar_receita
 13473 ;;		_receita_livre
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           	psect	text65
 13478  003EF0                     __ptext65:
 13479                           	callstack 0
 13480  003EF0                     _end_receita:
 13481                           	callstack 27
 13482  003EF0                     
 13483                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
 13484  003EF0  C031  F033         	movff	end_receita@x,??_end_receita
 13485  003EF4  C032  F034         	movff	end_receita@x+1,??_end_receita+1
 13486  003EF8  3A33               	swapf	??_end_receita^0,f,c
 13487  003EFA  3A34               	swapf	(??_end_receita+1)^0,f,c
 13488  003EFC  0EF0               	movlw	240
 13489  003EFE  1634               	andwf	(??_end_receita+1)^0,f,c
 13490  003F00  5033               	movf	??_end_receita^0,w,c
 13491  003F02  0B0F               	andlw	15
 13492  003F04  1234               	iorwf	(??_end_receita+1)^0,f,c
 13493  003F06  0EF0               	movlw	240
 13494  003F08  1633               	andwf	??_end_receita^0,f,c
 13495  003F0A  C033  F031         	movff	??_end_receita,?_end_receita
 13496  003F0E  C034  F032         	movff	??_end_receita+1,?_end_receita+1
 13497  003F12  0012               	return		;funcret
 13498  003F14                     __end_of_end_receita:
 13499                           	callstack 0
 13500                           
 13501 ;; *************** function _EEPROM_read *****************
 13502 ;; Defined at:
 13503 ;;		line 14 in file "eeprom.c"
 13504 ;; Parameters:    Size  Location     Type
 13505 ;;  addr            1    wreg     unsigned char 
 13506 ;; Auto vars:     Size  Location     Type
 13507 ;;  addr            1    0[COMRAM] unsigned char 
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  1    wreg      unsigned char 
 13510 ;; Registers used:
 13511 ;;		wreg, status,2
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13517 ;;      Params:         0       0       0       0       0       0       0       0       0
 13518 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13520 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13521 ;;Total ram usage:        1 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    2
 13524 ;; This function calls:
 13525 ;;		Nothing
 13526 ;; This function is called by:
 13527 ;;		_buscar_receita
 13528 ;;		_buscar_dado
 13529 ;;		_receita_livre
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text66
 13534  004092                     __ptext66:
 13535                           	callstack 0
 13536  004092                     _EEPROM_read:
 13537                           	callstack 27
 13538                           
 13539                           ;incstack = 0
 13540                           ;EEPROM_read@addr stored from wreg
 13541  004092  6E31               	movwf	EEPROM_read@addr^0,c
 13542  004094                     
 13543                           ;eeprom.c: 14: char EEPROM_read( unsigned char addr );eeprom.c: 15: {;eeprom.c: 17:     
      +                          EEADR = addr;
 13544  004094  C031  FFA9         	movff	EEPROM_read@addr,4009	;volatile
 13545  004098                     
 13546                           ;eeprom.c: 18:     EECON1bits.EEPGD = 0;
 13547  004098  9EA6               	bcf	166,7,c	;volsfr
 13548  00409A                     
 13549                           ;eeprom.c: 19:     EECON1bits.RD = 1;
 13550  00409A  80A6               	bsf	166,0,c	;volsfr
 13551  00409C                     
 13552                           ;eeprom.c: 20:     return( EEDATA );
 13553  00409C  50A8               	movf	168,w,c	;volatile
 13554  00409E  0012               	return		;funcret
 13555  0040A0                     __end_of_EEPROM_read:
 13556                           	callstack 0
 13557                           
 13558 ;; *************** function _addIndicePassos *****************
 13559 ;; Defined at:
 13560 ;;		line 19 in file "fifo.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;		None
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;		None
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      void 
 13567 ;; Registers used:
 13568 ;;		wreg, status,2, status,0
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13574 ;;      Params:         0       0       0       0       0       0       0       0       0
 13575 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13577 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13578 ;;Total ram usage:        0 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    2
 13581 ;; This function calls:
 13582 ;;		Nothing
 13583 ;; This function is called by:
 13584 ;;		_main
 13585 ;; This function uses a non-reentrant model
 13586 ;;
 13587                           
 13588                           	psect	text67
 13589  003FBC                     __ptext67:
 13590                           	callstack 0
 13591  003FBC                     _addIndicePassos:
 13592                           	callstack 28
 13593  003FBC                     
 13594                           ;fifo.c: 21:     if(indice_passos < ind_fila)
 13595  003FBC  505D               	movf	_ind_fila^0,w,c
 13596  003FBE  5C5B               	subwf	_indice_passos^0,w,c
 13597  003FC0  B0D8               	btfsc	status,0,c
 13598  003FC2  EFE5  F01F         	goto	u3941
 13599  003FC6  EFE7  F01F         	goto	u3940
 13600  003FCA                     u3941:
 13601  003FCA  EFE8  F01F         	goto	l223
 13602  003FCE                     u3940:
 13603  003FCE                     
 13604                           ;fifo.c: 22:         indice_passos++;
 13605  003FCE  2A5B               	incf	_indice_passos^0,f,c
 13606  003FD0                     l223:
 13607  003FD0  0012               	return		;funcret
 13608  003FD2                     __end_of_addIndicePassos:
 13609                           	callstack 0
 13610                           
 13611 ;; *************** function _addContCiclos *****************
 13612 ;; Defined at:
 13613 ;;		line 59 in file "fifo.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;		None
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;		None
 13618 ;; Return value:  Size  Location     Type
 13619 ;;                  1    wreg      void 
 13620 ;; Registers used:
 13621 ;;		status,2, status,0
 13622 ;; Tracked objects:
 13623 ;;		On entry : 0/0
 13624 ;;		On exit  : 0/0
 13625 ;;		Unchanged: 0/0
 13626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13627 ;;      Params:         0       0       0       0       0       0       0       0       0
 13628 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13629 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13630 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13631 ;;Total ram usage:        0 bytes
 13632 ;; Hardware stack levels used:    1
 13633 ;; Hardware stack levels required when called:    2
 13634 ;; This function calls:
 13635 ;;		Nothing
 13636 ;; This function is called by:
 13637 ;;		_main
 13638 ;; This function uses a non-reentrant model
 13639 ;;
 13640                           
 13641                           	psect	text68
 13642  0040F8                     __ptext68:
 13643                           	callstack 0
 13644  0040F8                     _addContCiclos:
 13645                           	callstack 28
 13646  0040F8                     
 13647                           ;fifo.c: 61:     cont_ciclos++;
 13648  0040F8  4A17               	infsnz	_cont_ciclos^0,f,c
 13649  0040FA  2A18               	incf	(_cont_ciclos+1)^0,f,c
 13650  0040FC  0012               	return		;funcret
 13651  0040FE                     __end_of_addContCiclos:
 13652                           	callstack 0
 13653                           
 13654 ;; *************** function ___lmul *****************
 13655 ;; Defined at:
 13656 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul32.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;  multiplier      4    0[COMRAM] unsigned long 
 13659 ;;  multiplicand    4    4[COMRAM] unsigned long 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  product         4    8[COMRAM] unsigned long 
 13662 ;; Return value:  Size  Location     Type
 13663 ;;                  4    0[COMRAM] unsigned long 
 13664 ;; Registers used:
 13665 ;;		wreg, status,2, status,0
 13666 ;; Tracked objects:
 13667 ;;		On entry : 0/0
 13668 ;;		On exit  : 0/0
 13669 ;;		Unchanged: 0/0
 13670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13671 ;;      Params:         8       0       0       0       0       0       0       0       0
 13672 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13673 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13674 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13675 ;;Total ram usage:       12 bytes
 13676 ;; Hardware stack levels used:    1
 13677 ;; Hardware stack levels required when called:    2
 13678 ;; This function calls:
 13679 ;;		Nothing
 13680 ;; This function is called by:
 13681 ;;		_main
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           	psect	text69
 13686  00364A                     __ptext69:
 13687                           	callstack 0
 13688  00364A                     ___lmul:
 13689                           	callstack 28
 13690  00364A  0E00               	movlw	0
 13691  00364C  6E39               	movwf	___lmul@product^0,c
 13692  00364E  0E00               	movlw	0
 13693  003650  6E3A               	movwf	(___lmul@product+1)^0,c
 13694  003652  0E00               	movlw	0
 13695  003654  6E3B               	movwf	(___lmul@product+2)^0,c
 13696  003656  0E00               	movlw	0
 13697  003658  6E3C               	movwf	(___lmul@product+3)^0,c
 13698  00365A                     l6331:
 13699  00365A  A031               	btfss	___lmul@multiplier^0,0,c
 13700  00365C  EF32  F01B         	goto	u4551
 13701  003660  EF34  F01B         	goto	u4550
 13702  003664                     u4551:
 13703  003664  EF3C  F01B         	goto	l6335
 13704  003668                     u4550:
 13705  003668  5035               	movf	___lmul@multiplicand^0,w,c
 13706  00366A  2639               	addwf	___lmul@product^0,f,c
 13707  00366C  5036               	movf	(___lmul@multiplicand+1)^0,w,c
 13708  00366E  223A               	addwfc	(___lmul@product+1)^0,f,c
 13709  003670  5037               	movf	(___lmul@multiplicand+2)^0,w,c
 13710  003672  223B               	addwfc	(___lmul@product+2)^0,f,c
 13711  003674  5038               	movf	(___lmul@multiplicand+3)^0,w,c
 13712  003676  223C               	addwfc	(___lmul@product+3)^0,f,c
 13713  003678                     l6335:
 13714  003678  90D8               	bcf	status,0,c
 13715  00367A  3635               	rlcf	___lmul@multiplicand^0,f,c
 13716  00367C  3636               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13717  00367E  3637               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13718  003680  3638               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13719  003682  90D8               	bcf	status,0,c
 13720  003684  3234               	rrcf	(___lmul@multiplier+3)^0,f,c
 13721  003686  3233               	rrcf	(___lmul@multiplier+2)^0,f,c
 13722  003688  3232               	rrcf	(___lmul@multiplier+1)^0,f,c
 13723  00368A  3231               	rrcf	___lmul@multiplier^0,f,c
 13724  00368C  5031               	movf	___lmul@multiplier^0,w,c
 13725  00368E  1032               	iorwf	(___lmul@multiplier+1)^0,w,c
 13726  003690  1033               	iorwf	(___lmul@multiplier+2)^0,w,c
 13727  003692  1034               	iorwf	(___lmul@multiplier+3)^0,w,c
 13728  003694  A4D8               	btfss	status,2,c
 13729  003696  EF4F  F01B         	goto	u4561
 13730  00369A  EF51  F01B         	goto	u4560
 13731  00369E                     u4561:
 13732  00369E  EF2D  F01B         	goto	l6331
 13733  0036A2                     u4560:
 13734  0036A2  C039  F031         	movff	___lmul@product,?___lmul
 13735  0036A6  C03A  F032         	movff	___lmul@product+1,?___lmul+1
 13736  0036AA  C03B  F033         	movff	___lmul@product+2,?___lmul+2
 13737  0036AE  C03C  F034         	movff	___lmul@product+3,?___lmul+3
 13738  0036B2  0012               	return		;funcret
 13739  0036B4                     __end_of___lmul:
 13740                           	callstack 0
 13741                           
 13742 ;; *************** function ___aldiv *****************
 13743 ;; Defined at:
 13744 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aldiv.c"
 13745 ;; Parameters:    Size  Location     Type
 13746 ;;  dividend        4   12[COMRAM] long 
 13747 ;;  divisor         4   16[COMRAM] long 
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;  quotient        4   22[COMRAM] long 
 13750 ;;  sign            1   21[COMRAM] unsigned char 
 13751 ;;  counter         1   20[COMRAM] unsigned char 
 13752 ;; Return value:  Size  Location     Type
 13753 ;;                  4   12[COMRAM] long 
 13754 ;; Registers used:
 13755 ;;		wreg, status,2, status,0
 13756 ;; Tracked objects:
 13757 ;;		On entry : 0/0
 13758 ;;		On exit  : 0/0
 13759 ;;		Unchanged: 0/0
 13760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13761 ;;      Params:         8       0       0       0       0       0       0       0       0
 13762 ;;      Locals:         6       0       0       0       0       0       0       0       0
 13763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13764 ;;      Totals:        14       0       0       0       0       0       0       0       0
 13765 ;;Total ram usage:       14 bytes
 13766 ;; Hardware stack levels used:    1
 13767 ;; Hardware stack levels required when called:    2
 13768 ;; This function calls:
 13769 ;;		Nothing
 13770 ;; This function is called by:
 13771 ;;		_main
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           	psect	text70
 13776  0029CA                     __ptext70:
 13777                           	callstack 0
 13778  0029CA                     ___aldiv:
 13779                           	callstack 28
 13780  0029CA  0E00               	movlw	0
 13781  0029CC  6E46               	movwf	___aldiv@sign^0,c
 13782  0029CE  BE44               	btfsc	(___aldiv@divisor+3)^0,7,c
 13783  0029D0  EFEE  F014         	goto	u4570
 13784  0029D4  EFEC  F014         	goto	u4571
 13785  0029D8                     u4571:
 13786  0029D8  EFF8  F014         	goto	l6347
 13787  0029DC                     u4570:
 13788  0029DC  1E44               	comf	(___aldiv@divisor+3)^0,f,c
 13789  0029DE  1E43               	comf	(___aldiv@divisor+2)^0,f,c
 13790  0029E0  1E42               	comf	(___aldiv@divisor+1)^0,f,c
 13791  0029E2  6C41               	negf	___aldiv@divisor^0,c
 13792  0029E4  0E00               	movlw	0
 13793  0029E6  2242               	addwfc	(___aldiv@divisor+1)^0,f,c
 13794  0029E8  2243               	addwfc	(___aldiv@divisor+2)^0,f,c
 13795  0029EA  2244               	addwfc	(___aldiv@divisor+3)^0,f,c
 13796  0029EC  0E01               	movlw	1
 13797  0029EE  6E46               	movwf	___aldiv@sign^0,c
 13798  0029F0                     l6347:
 13799  0029F0  BE40               	btfsc	(___aldiv@dividend+3)^0,7,c
 13800  0029F2  EFFF  F014         	goto	u4580
 13801  0029F6  EFFD  F014         	goto	u4581
 13802  0029FA                     u4581:
 13803  0029FA  EF09  F015         	goto	l6353
 13804  0029FE                     u4580:
 13805  0029FE  1E40               	comf	(___aldiv@dividend+3)^0,f,c
 13806  002A00  1E3F               	comf	(___aldiv@dividend+2)^0,f,c
 13807  002A02  1E3E               	comf	(___aldiv@dividend+1)^0,f,c
 13808  002A04  6C3D               	negf	___aldiv@dividend^0,c
 13809  002A06  0E00               	movlw	0
 13810  002A08  223E               	addwfc	(___aldiv@dividend+1)^0,f,c
 13811  002A0A  223F               	addwfc	(___aldiv@dividend+2)^0,f,c
 13812  002A0C  2240               	addwfc	(___aldiv@dividend+3)^0,f,c
 13813  002A0E  0E01               	movlw	1
 13814  002A10  1A46               	xorwf	___aldiv@sign^0,f,c
 13815  002A12                     l6353:
 13816  002A12  0E00               	movlw	0
 13817  002A14  6E47               	movwf	___aldiv@quotient^0,c
 13818  002A16  0E00               	movlw	0
 13819  002A18  6E48               	movwf	(___aldiv@quotient+1)^0,c
 13820  002A1A  0E00               	movlw	0
 13821  002A1C  6E49               	movwf	(___aldiv@quotient+2)^0,c
 13822  002A1E  0E00               	movlw	0
 13823  002A20  6E4A               	movwf	(___aldiv@quotient+3)^0,c
 13824  002A22  5041               	movf	___aldiv@divisor^0,w,c
 13825  002A24  1042               	iorwf	(___aldiv@divisor+1)^0,w,c
 13826  002A26  1043               	iorwf	(___aldiv@divisor+2)^0,w,c
 13827  002A28  1044               	iorwf	(___aldiv@divisor+3)^0,w,c
 13828  002A2A  B4D8               	btfsc	status,2,c
 13829  002A2C  EF1A  F015         	goto	u4591
 13830  002A30  EF1C  F015         	goto	u4590
 13831  002A34                     u4591:
 13832  002A34  EF52  F015         	goto	l6375
 13833  002A38                     u4590:
 13834  002A38  0E01               	movlw	1
 13835  002A3A  6E45               	movwf	___aldiv@counter^0,c
 13836  002A3C  EF26  F015         	goto	l6361
 13837  002A40                     l6359:
 13838  002A40  90D8               	bcf	status,0,c
 13839  002A42  3641               	rlcf	___aldiv@divisor^0,f,c
 13840  002A44  3642               	rlcf	(___aldiv@divisor+1)^0,f,c
 13841  002A46  3643               	rlcf	(___aldiv@divisor+2)^0,f,c
 13842  002A48  3644               	rlcf	(___aldiv@divisor+3)^0,f,c
 13843  002A4A  2A45               	incf	___aldiv@counter^0,f,c
 13844  002A4C                     l6361:
 13845  002A4C  AE44               	btfss	(___aldiv@divisor+3)^0,7,c
 13846  002A4E  EF2B  F015         	goto	u4601
 13847  002A52  EF2D  F015         	goto	u4600
 13848  002A56                     u4601:
 13849  002A56  EF20  F015         	goto	l6359
 13850  002A5A                     u4600:
 13851  002A5A                     l6363:
 13852  002A5A  90D8               	bcf	status,0,c
 13853  002A5C  3647               	rlcf	___aldiv@quotient^0,f,c
 13854  002A5E  3648               	rlcf	(___aldiv@quotient+1)^0,f,c
 13855  002A60  3649               	rlcf	(___aldiv@quotient+2)^0,f,c
 13856  002A62  364A               	rlcf	(___aldiv@quotient+3)^0,f,c
 13857  002A64  5041               	movf	___aldiv@divisor^0,w,c
 13858  002A66  5C3D               	subwf	___aldiv@dividend^0,w,c
 13859  002A68  5042               	movf	(___aldiv@divisor+1)^0,w,c
 13860  002A6A  583E               	subwfb	(___aldiv@dividend+1)^0,w,c
 13861  002A6C  5043               	movf	(___aldiv@divisor+2)^0,w,c
 13862  002A6E  583F               	subwfb	(___aldiv@dividend+2)^0,w,c
 13863  002A70  5044               	movf	(___aldiv@divisor+3)^0,w,c
 13864  002A72  5840               	subwfb	(___aldiv@dividend+3)^0,w,c
 13865  002A74  A0D8               	btfss	status,0,c
 13866  002A76  EF3F  F015         	goto	u4611
 13867  002A7A  EF41  F015         	goto	u4610
 13868  002A7E                     u4611:
 13869  002A7E  EF4A  F015         	goto	l6371
 13870  002A82                     u4610:
 13871  002A82  5041               	movf	___aldiv@divisor^0,w,c
 13872  002A84  5E3D               	subwf	___aldiv@dividend^0,f,c
 13873  002A86  5042               	movf	(___aldiv@divisor+1)^0,w,c
 13874  002A88  5A3E               	subwfb	(___aldiv@dividend+1)^0,f,c
 13875  002A8A  5043               	movf	(___aldiv@divisor+2)^0,w,c
 13876  002A8C  5A3F               	subwfb	(___aldiv@dividend+2)^0,f,c
 13877  002A8E  5044               	movf	(___aldiv@divisor+3)^0,w,c
 13878  002A90  5A40               	subwfb	(___aldiv@dividend+3)^0,f,c
 13879  002A92  8047               	bsf	___aldiv@quotient^0,0,c
 13880  002A94                     l6371:
 13881  002A94  90D8               	bcf	status,0,c
 13882  002A96  3244               	rrcf	(___aldiv@divisor+3)^0,f,c
 13883  002A98  3243               	rrcf	(___aldiv@divisor+2)^0,f,c
 13884  002A9A  3242               	rrcf	(___aldiv@divisor+1)^0,f,c
 13885  002A9C  3241               	rrcf	___aldiv@divisor^0,f,c
 13886  002A9E  2E45               	decfsz	___aldiv@counter^0,f,c
 13887  002AA0  EF2D  F015         	goto	l6363
 13888  002AA4                     l6375:
 13889  002AA4  5046               	movf	___aldiv@sign^0,w,c
 13890  002AA6  B4D8               	btfsc	status,2,c
 13891  002AA8  EF58  F015         	goto	u4621
 13892  002AAC  EF5A  F015         	goto	u4620
 13893  002AB0                     u4621:
 13894  002AB0  EF62  F015         	goto	l6379
 13895  002AB4                     u4620:
 13896  002AB4  1E4A               	comf	(___aldiv@quotient+3)^0,f,c
 13897  002AB6  1E49               	comf	(___aldiv@quotient+2)^0,f,c
 13898  002AB8  1E48               	comf	(___aldiv@quotient+1)^0,f,c
 13899  002ABA  6C47               	negf	___aldiv@quotient^0,c
 13900  002ABC  0E00               	movlw	0
 13901  002ABE  2248               	addwfc	(___aldiv@quotient+1)^0,f,c
 13902  002AC0  2249               	addwfc	(___aldiv@quotient+2)^0,f,c
 13903  002AC2  224A               	addwfc	(___aldiv@quotient+3)^0,f,c
 13904  002AC4                     l6379:
 13905  002AC4  C047  F03D         	movff	___aldiv@quotient,?___aldiv
 13906  002AC8  C048  F03E         	movff	___aldiv@quotient+1,?___aldiv+1
 13907  002ACC  C049  F03F         	movff	___aldiv@quotient+2,?___aldiv+2
 13908  002AD0  C04A  F040         	movff	___aldiv@quotient+3,?___aldiv+3
 13909  002AD4  0012               	return		;funcret
 13910  002AD6                     __end_of___aldiv:
 13911                           	callstack 0
 13912                           
 13913 ;; *************** function _Wifi_mode *****************
 13914 ;; Defined at:
 13915 ;;		line 47 in file "wifi.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;  d               1    wreg     unsigned char 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  d               1    3[COMRAM] unsigned char 
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      void 
 13922 ;; Registers used:
 13923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13929 ;;      Params:         0       0       0       0       0       0       0       0       0
 13930 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13932 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13933 ;;Total ram usage:        1 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    4
 13936 ;; This function calls:
 13937 ;;		_delay
 13938 ;;		_wifi_send
 13939 ;; This function is called by:
 13940 ;;		_main
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           	psect	text71
 13945  002FEC                     __ptext71:
 13946                           	callstack 0
 13947  002FEC                     _Wifi_mode:
 13948                           	callstack 26
 13949                           
 13950                           ;incstack = 0
 13951                           ;Wifi_mode@d stored from wreg
 13952  002FEC  6E34               	movwf	Wifi_mode@d^0,c
 13953  002FEE                     
 13954                           ;wifi.c: 47: void Wifi_mode(unsigned char d );wifi.c: 48: {;wifi.c: 49:     if(d == 1)
 13955  002FEE  0434               	decf	Wifi_mode@d^0,w,c
 13956  002FF0  A4D8               	btfss	status,2,c
 13957  002FF2  EFFD  F017         	goto	u4441
 13958  002FF6  EFFF  F017         	goto	u4440
 13959  002FFA                     u4441:
 13960  002FFA  EF17  F018         	goto	l6227
 13961  002FFE                     u4440:
 13962  002FFE                     
 13963                           ;wifi.c: 50:     {;wifi.c: 51:         wifi_send("AT+CWMODE=1\r\n");
 13964  002FFE  0E8C               	movlw	low STR_35
 13965  003000  6E32               	movwf	wifi_send@msg^0,c
 13966  003002  0E7F               	movlw	high STR_35
 13967  003004  6E33               	movwf	(wifi_send@msg+1)^0,c
 13968  003006  ECA2  F018         	call	_wifi_send	;wreg free
 13969                           
 13970                           ;wifi.c: 53:         wifi_send("AT+CIPSERVER=0\r\n");
 13971  00300A  0E4F               	movlw	low STR_36
 13972  00300C  6E32               	movwf	wifi_send@msg^0,c
 13973  00300E  0E7F               	movlw	high STR_36
 13974  003010  6E33               	movwf	(wifi_send@msg+1)^0,c
 13975  003012  ECA2  F018         	call	_wifi_send	;wreg free
 13976                           
 13977                           ;wifi.c: 54:         wifi_send("AT+CIPMUX=0\r\n");
 13978  003016  0E7E               	movlw	low STR_37
 13979  003018  6E32               	movwf	wifi_send@msg^0,c
 13980  00301A  0E7F               	movlw	high STR_37
 13981  00301C  6E33               	movwf	(wifi_send@msg+1)^0,c
 13982  00301E  ECA2  F018         	call	_wifi_send	;wreg free
 13983                           
 13984                           ;wifi.c: 55:         wifi_send("AT+CIPMODE=1\r\n");
 13985  003022  0E6F               	movlw	low STR_38
 13986  003024  6E32               	movwf	wifi_send@msg^0,c
 13987  003026  0E7F               	movlw	high STR_38
 13988  003028  6E33               	movwf	(wifi_send@msg+1)^0,c
 13989  00302A  ECA2  F018         	call	_wifi_send	;wreg free
 13990  00302E                     l6227:
 13991                           
 13992                           ;wifi.c: 58:     if(d == 2)
 13993  00302E  0E02               	movlw	2
 13994  003030  1834               	xorwf	Wifi_mode@d^0,w,c
 13995  003032  A4D8               	btfss	status,2,c
 13996  003034  EF1E  F018         	goto	u4451
 13997  003038  EF20  F018         	goto	u4450
 13998  00303C                     u4451:
 13999  00303C  EF38  F018         	goto	l6235
 14000  003040                     u4450:
 14001  003040                     
 14002                           ;wifi.c: 59:     {;wifi.c: 60:         wifi_send("AT+CWMODE=2\r\n");
 14003  003040  0EA8               	movlw	low STR_39
 14004  003042  6E32               	movwf	wifi_send@msg^0,c
 14005  003044  0E7F               	movlw	high STR_39
 14006  003046  6E33               	movwf	(wifi_send@msg+1)^0,c
 14007  003048  ECA2  F018         	call	_wifi_send	;wreg free
 14008  00304C                     
 14009                           ;wifi.c: 61:         delay(1000);
 14010  00304C  0E03               	movlw	3
 14011  00304E  6E32               	movwf	(delay@t+1)^0,c
 14012  003050  0EE8               	movlw	232
 14013  003052  6E31               	movwf	delay@t^0,c
 14014  003054  EC24  F01F         	call	_delay	;wreg free
 14015  003058                     
 14016                           ;wifi.c: 62:         wifi_send("AT+CWSAP=\"TCC\",\"87654321\",1,2,4,0\r\n");
 14017  003058  0E60               	movlw	low STR_40
 14018  00305A  6E32               	movwf	wifi_send@msg^0,c
 14019  00305C  0E7D               	movlw	high STR_40
 14020  00305E  6E33               	movwf	(wifi_send@msg+1)^0,c
 14021  003060  ECA2  F018         	call	_wifi_send	;wreg free
 14022                           
 14023                           ;wifi.c: 63:         delay(1000);
 14024  003064  0E03               	movlw	3
 14025  003066  6E32               	movwf	(delay@t+1)^0,c
 14026  003068  0EE8               	movlw	232
 14027  00306A  6E31               	movwf	delay@t^0,c
 14028  00306C  EC24  F01F         	call	_delay	;wreg free
 14029  003070                     l6235:
 14030                           
 14031                           ;wifi.c: 65:     if(d == 3)
 14032  003070  0E03               	movlw	3
 14033  003072  1834               	xorwf	Wifi_mode@d^0,w,c
 14034  003074  A4D8               	btfss	status,2,c
 14035  003076  EF3F  F018         	goto	u4461
 14036  00307A  EF41  F018         	goto	u4460
 14037  00307E                     u4461:
 14038  00307E  EF4D  F018         	goto	l1206
 14039  003082                     u4460:
 14040  003082                     
 14041                           ;wifi.c: 66:     {;wifi.c: 67:         wifi_send("AT+CWMODE=3\r\n");
 14042  003082  0EB6               	movlw	low STR_41
 14043  003084  6E32               	movwf	wifi_send@msg^0,c
 14044  003086  0E7F               	movlw	high STR_41
 14045  003088  6E33               	movwf	(wifi_send@msg+1)^0,c
 14046  00308A  ECA2  F018         	call	_wifi_send	;wreg free
 14047                           
 14048                           ;wifi.c: 68:         wifi_send("AT+CWSAP=\"Wireless\",\"********\",1,2,4,0\r\n");
 14049  00308E  0E0F               	movlw	low STR_42
 14050  003090  6E32               	movwf	wifi_send@msg^0,c
 14051  003092  0E7D               	movlw	high STR_42
 14052  003094  6E33               	movwf	(wifi_send@msg+1)^0,c
 14053  003096  ECA2  F018         	call	_wifi_send	;wreg free
 14054  00309A                     l1206:
 14055  00309A  0012               	return		;funcret
 14056  00309C                     __end_of_Wifi_mode:
 14057                           	callstack 0
 14058                           
 14059 ;; *************** function _Wifi_connect *****************
 14060 ;; Defined at:
 14061 ;;		line 76 in file "wifi.c"
 14062 ;; Parameters:    Size  Location     Type
 14063 ;;  ssid            2    3[COMRAM] PTR const unsigned char 
 14064 ;;		 -> STR_1(4), 
 14065 ;;  pass            2    5[COMRAM] PTR const unsigned char 
 14066 ;;		 -> STR_2(9), 
 14067 ;; Auto vars:     Size  Location     Type
 14068 ;;  str            30    9[COMRAM] unsigned char [30]
 14069 ;;  i               1   39[COMRAM] unsigned char 
 14070 ;; Return value:  Size  Location     Type
 14071 ;;                  1    wreg      void 
 14072 ;; Registers used:
 14073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 14074 ;; Tracked objects:
 14075 ;;		On entry : 0/0
 14076 ;;		On exit  : 0/0
 14077 ;;		Unchanged: 0/0
 14078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14079 ;;      Params:         4       0       0       0       0       0       0       0       0
 14080 ;;      Locals:        31       0       0       0       0       0       0       0       0
 14081 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14082 ;;      Totals:        37       0       0       0       0       0       0       0       0
 14083 ;;Total ram usage:       37 bytes
 14084 ;; Hardware stack levels used:    1
 14085 ;; Hardware stack levels required when called:    4
 14086 ;; This function calls:
 14087 ;;		_wifi_send
 14088 ;; This function is called by:
 14089 ;;		_main
 14090 ;; This function uses a non-reentrant model
 14091 ;;
 14092                           
 14093                           	psect	text72
 14094  002892                     __ptext72:
 14095                           	callstack 0
 14096  002892                     _Wifi_connect:
 14097                           	callstack 26
 14098  002892                     
 14099                           ;wifi.c: 76: void Wifi_connect( const char * ssid, const char * pass );wifi.c: 77: {;wif
      +                          i.c: 78:     unsigned char i = 10;
 14100  002892  0E0A               	movlw	10
 14101  002894  6E58               	movwf	Wifi_connect@i^0,c
 14102  002896                     
 14103                           ;wifi.c: 79:     unsigned char str[30] = "AT+CWJAP=\"";
 14104  002896  EE21  F000         	lfsr	2,Wifi_connect@F3287
 14105  00289A  EE10  F03A         	lfsr	1,Wifi_connect@str
 14106  00289E  0E1D               	movlw	29
 14107  0028A0                     u4471:
 14108  0028A0  CFDB FFE3          	movff	plusw2,plusw1
 14109  0028A4  06E8               	decf	wreg,f,c
 14110  0028A6  E2FC               	bc	u4471
 14111                           
 14112                           ;wifi.c: 80:     while( *ssid )
 14113  0028A8  EF66  F014         	goto	l6249
 14114  0028AC                     l6243:
 14115                           
 14116                           ;wifi.c: 81:     {;wifi.c: 82:         str[i] = *ssid;
 14117  0028AC  C034  FFF6         	movff	Wifi_connect@ssid,tblptrl
 14118  0028B0  C035  FFF7         	movff	Wifi_connect@ssid+1,tblptrh
 14119  0028B4                     	if	0	;tblptru may be non-zero
 14120  0028B4                     	endif
 14121  0028B4                     	if	0	;tblptru may be non-zero
 14122  0028B4                     	endif
 14123  0028B4  0E3A               	movlw	low Wifi_connect@str
 14124  0028B6  2458               	addwf	Wifi_connect@i^0,w,c
 14125  0028B8  6ED9               	movwf	fsr2l,c
 14126  0028BA  6ADA               	clrf	fsr2h,c
 14127  0028BC  0E00               	movlw	high Wifi_connect@str
 14128  0028BE  22DA               	addwfc	fsr2h,f,c
 14129  0028C0  0008               	tblrd		*
 14130  0028C2  CFF5 FFDF          	movff	tablat,indf2
 14131  0028C6                     
 14132                           ;wifi.c: 83:         *ssid++;
 14133  0028C6  4A34               	infsnz	Wifi_connect@ssid^0,f,c
 14134  0028C8  2A35               	incf	(Wifi_connect@ssid+1)^0,f,c
 14135  0028CA                     
 14136                           ;wifi.c: 84:         i++;
 14137  0028CA  2A58               	incf	Wifi_connect@i^0,f,c
 14138  0028CC                     l6249:
 14139                           
 14140                           ;wifi.c: 80:     while( *ssid )
 14141  0028CC  C034  FFF6         	movff	Wifi_connect@ssid,tblptrl
 14142  0028D0  C035  FFF7         	movff	Wifi_connect@ssid+1,tblptrh
 14143  0028D4                     	if	0	;tblptru may be non-zero
 14144  0028D4                     	endif
 14145  0028D4                     	if	0	;tblptru may be non-zero
 14146  0028D4                     	endif
 14147  0028D4  0008               	tblrd		*
 14148  0028D6  50F5               	movf	tablat,w,c
 14149  0028D8  0900               	iorlw	0
 14150  0028DA  A4D8               	btfss	status,2,c
 14151  0028DC  EF72  F014         	goto	u4481
 14152  0028E0  EF74  F014         	goto	u4480
 14153  0028E4                     u4481:
 14154  0028E4  EF56  F014         	goto	l6243
 14155  0028E8                     u4480:
 14156  0028E8                     
 14157                           ;wifi.c: 86:     str[i] = '"'; i++;
 14158  0028E8  0E3A               	movlw	low Wifi_connect@str
 14159  0028EA  2458               	addwf	Wifi_connect@i^0,w,c
 14160  0028EC  6ED9               	movwf	fsr2l,c
 14161  0028EE  6ADA               	clrf	fsr2h,c
 14162  0028F0  0E00               	movlw	high Wifi_connect@str
 14163  0028F2  22DA               	addwfc	fsr2h,f,c
 14164  0028F4  0E22               	movlw	34
 14165  0028F6  6EDF               	movwf	indf2,c
 14166  0028F8  2A58               	incf	Wifi_connect@i^0,f,c
 14167  0028FA                     
 14168                           ;wifi.c: 87:     str[i] = ','; i++;
 14169  0028FA  0E3A               	movlw	low Wifi_connect@str
 14170  0028FC  2458               	addwf	Wifi_connect@i^0,w,c
 14171  0028FE  6ED9               	movwf	fsr2l,c
 14172  002900  6ADA               	clrf	fsr2h,c
 14173  002902  0E00               	movlw	high Wifi_connect@str
 14174  002904  22DA               	addwfc	fsr2h,f,c
 14175  002906  0E2C               	movlw	44
 14176  002908  6EDF               	movwf	indf2,c
 14177  00290A  2A58               	incf	Wifi_connect@i^0,f,c
 14178  00290C                     
 14179                           ;wifi.c: 88:     str[i] = '"'; i++;
 14180  00290C  0E3A               	movlw	low Wifi_connect@str
 14181  00290E  2458               	addwf	Wifi_connect@i^0,w,c
 14182  002910  6ED9               	movwf	fsr2l,c
 14183  002912  6ADA               	clrf	fsr2h,c
 14184  002914  0E00               	movlw	high Wifi_connect@str
 14185  002916  22DA               	addwfc	fsr2h,f,c
 14186  002918  0E22               	movlw	34
 14187  00291A  6EDF               	movwf	indf2,c
 14188  00291C  2A58               	incf	Wifi_connect@i^0,f,c
 14189  00291E                     
 14190                           ;wifi.c: 90:     *aux = *ssid;
 14191  00291E  C034  FFF6         	movff	Wifi_connect@ssid,tblptrl
 14192  002922  C035  FFF7         	movff	Wifi_connect@ssid+1,tblptrh
 14193  002926                     	if	0	;tblptru may be non-zero
 14194  002926                     	endif
 14195  002926                     	if	0	;tblptru may be non-zero
 14196  002926                     	endif
 14197  002926  0008               	tblrd		*
 14198  002928  50F5               	movf	tablat,w,c
 14199  00292A  6E38               	movwf	??_Wifi_connect^0,c
 14200  00292C  6A39               	clrf	(??_Wifi_connect+1)^0,c
 14201  00292E  C038  F156         	movff	??_Wifi_connect,_aux
 14202  002932  C039  F157         	movff	??_Wifi_connect+1,_aux+1
 14203                           
 14204                           ;wifi.c: 92:     while( *pass )
 14205  002936  EFAD  F014         	goto	l6269
 14206  00293A                     l6263:
 14207                           
 14208                           ;wifi.c: 93:     {;wifi.c: 94:         str[i] = *pass;
 14209  00293A  C036  FFF6         	movff	Wifi_connect@pass,tblptrl
 14210  00293E  C037  FFF7         	movff	Wifi_connect@pass+1,tblptrh
 14211  002942                     	if	0	;tblptru may be non-zero
 14212  002942                     	endif
 14213  002942                     	if	0	;tblptru may be non-zero
 14214  002942                     	endif
 14215  002942  0E3A               	movlw	low Wifi_connect@str
 14216  002944  2458               	addwf	Wifi_connect@i^0,w,c
 14217  002946  6ED9               	movwf	fsr2l,c
 14218  002948  6ADA               	clrf	fsr2h,c
 14219  00294A  0E00               	movlw	high Wifi_connect@str
 14220  00294C  22DA               	addwfc	fsr2h,f,c
 14221  00294E  0008               	tblrd		*
 14222  002950  CFF5 FFDF          	movff	tablat,indf2
 14223  002954                     
 14224                           ;wifi.c: 95:         *pass++;
 14225  002954  4A36               	infsnz	Wifi_connect@pass^0,f,c
 14226  002956  2A37               	incf	(Wifi_connect@pass+1)^0,f,c
 14227  002958                     
 14228                           ;wifi.c: 96:         i++;
 14229  002958  2A58               	incf	Wifi_connect@i^0,f,c
 14230  00295A                     l6269:
 14231                           
 14232                           ;wifi.c: 92:     while( *pass )
 14233  00295A  C036  FFF6         	movff	Wifi_connect@pass,tblptrl
 14234  00295E  C037  FFF7         	movff	Wifi_connect@pass+1,tblptrh
 14235  002962                     	if	0	;tblptru may be non-zero
 14236  002962                     	endif
 14237  002962                     	if	0	;tblptru may be non-zero
 14238  002962                     	endif
 14239  002962  0008               	tblrd		*
 14240  002964  50F5               	movf	tablat,w,c
 14241  002966  0900               	iorlw	0
 14242  002968  A4D8               	btfss	status,2,c
 14243  00296A  EFB9  F014         	goto	u4491
 14244  00296E  EFBB  F014         	goto	u4490
 14245  002972                     u4491:
 14246  002972  EF9D  F014         	goto	l6263
 14247  002976                     u4490:
 14248  002976                     
 14249                           ;wifi.c: 98:     str[i] = '"'; i++;
 14250  002976  0E3A               	movlw	low Wifi_connect@str
 14251  002978  2458               	addwf	Wifi_connect@i^0,w,c
 14252  00297A  6ED9               	movwf	fsr2l,c
 14253  00297C  6ADA               	clrf	fsr2h,c
 14254  00297E  0E00               	movlw	high Wifi_connect@str
 14255  002980  22DA               	addwfc	fsr2h,f,c
 14256  002982  0E22               	movlw	34
 14257  002984  6EDF               	movwf	indf2,c
 14258  002986  2A58               	incf	Wifi_connect@i^0,f,c
 14259  002988                     
 14260                           ;wifi.c: 99:     str[i] = '\r'; i++;
 14261  002988  0E3A               	movlw	low Wifi_connect@str
 14262  00298A  2458               	addwf	Wifi_connect@i^0,w,c
 14263  00298C  6ED9               	movwf	fsr2l,c
 14264  00298E  6ADA               	clrf	fsr2h,c
 14265  002990  0E00               	movlw	high Wifi_connect@str
 14266  002992  22DA               	addwfc	fsr2h,f,c
 14267  002994  0E0D               	movlw	13
 14268  002996  6EDF               	movwf	indf2,c
 14269  002998  2A58               	incf	Wifi_connect@i^0,f,c
 14270  00299A                     
 14271                           ;wifi.c: 100:     str[i] = '\n'; i++;
 14272  00299A  0E3A               	movlw	low Wifi_connect@str
 14273  00299C  2458               	addwf	Wifi_connect@i^0,w,c
 14274  00299E  6ED9               	movwf	fsr2l,c
 14275  0029A0  6ADA               	clrf	fsr2h,c
 14276  0029A2  0E00               	movlw	high Wifi_connect@str
 14277  0029A4  22DA               	addwfc	fsr2h,f,c
 14278  0029A6  0E0A               	movlw	10
 14279  0029A8  6EDF               	movwf	indf2,c
 14280  0029AA  2A58               	incf	Wifi_connect@i^0,f,c
 14281                           
 14282                           ;wifi.c: 101:     str[i] = 0;
 14283  0029AC  0E3A               	movlw	low Wifi_connect@str
 14284  0029AE  2458               	addwf	Wifi_connect@i^0,w,c
 14285  0029B0  6ED9               	movwf	fsr2l,c
 14286  0029B2  6ADA               	clrf	fsr2h,c
 14287  0029B4  0E00               	movlw	high Wifi_connect@str
 14288  0029B6  22DA               	addwfc	fsr2h,f,c
 14289  0029B8  0E00               	movlw	0
 14290  0029BA  6EDF               	movwf	indf2,c
 14291  0029BC                     
 14292                           ;wifi.c: 102:     wifi_send( str );
 14293  0029BC  0E3A               	movlw	low Wifi_connect@str
 14294  0029BE  6E32               	movwf	wifi_send@msg^0,c
 14295  0029C0  0E00               	movlw	high Wifi_connect@str
 14296  0029C2  6E33               	movwf	(wifi_send@msg+1)^0,c
 14297  0029C4  ECA2  F018         	call	_wifi_send	;wreg free
 14298  0029C8  0012               	return		;funcret
 14299  0029CA                     __end_of_Wifi_connect:
 14300                           	callstack 0
 14301                           
 14302 ;; *************** function _Wifi_cipsend *****************
 14303 ;; Defined at:
 14304 ;;		line 141 in file "wifi.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;  tam             2    3[COMRAM] PTR unsigned char 
 14307 ;;		 -> RAM(2047), 
 14308 ;;  msg             2    5[COMRAM] PTR unsigned char 
 14309 ;;		 -> RAM(2047), 
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;  str            20    7[COMRAM] unsigned char [20]
 14312 ;;  vtr            10   27[COMRAM] unsigned char [10]
 14313 ;;  d               1   38[COMRAM] unsigned char 
 14314 ;;  i               1   37[COMRAM] unsigned char 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14324 ;;      Params:         4       0       0       0       0       0       0       0       0
 14325 ;;      Locals:        32       0       0       0       0       0       0       0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14327 ;;      Totals:        36       0       0       0       0       0       0       0       0
 14328 ;;Total ram usage:       36 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    4
 14331 ;; This function calls:
 14332 ;;		_wifi_send
 14333 ;; This function is called by:
 14334 ;;		_main
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text73
 14339  002604                     __ptext73:
 14340                           	callstack 0
 14341  002604                     _Wifi_cipsend:
 14342                           	callstack 26
 14343  002604                     
 14344                           ;wifi.c: 141: void Wifi_cipsend( unsigned char *tam, unsigned char *msg );wifi.c: 142: {
      +                          ;wifi.c: 144:     unsigned char i = 11; unsigned char d = 1;
 14345  002604  0E0B               	movlw	11
 14346  002606  6E56               	movwf	Wifi_cipsend@i^0,c
 14347  002608  0E01               	movlw	1
 14348  00260A  6E57               	movwf	Wifi_cipsend@d^0,c
 14349  00260C                     
 14350                           ;wifi.c: 145:     unsigned char str[20] = "AT+CIPSEND=\""; unsigned char vtr[10] = "";
 14351  00260C  EE21  F01E         	lfsr	2,Wifi_cipsend@F3299
 14352  002610  EE10  F038         	lfsr	1,Wifi_cipsend@str
 14353  002614  0E13               	movlw	19
 14354  002616                     u4501:
 14355  002616  CFDB FFE3          	movff	plusw2,plusw1
 14356  00261A  06E8               	decf	wreg,f,c
 14357  00261C  E2FC               	bc	u4501
 14358  00261E  EE20  F04C         	lfsr	2,Wifi_cipsend@vtr
 14359  002622  0E09               	movlw	9
 14360  002624                     u4511:
 14361  002624  6ADE               	clrf	postinc2,c
 14362  002626  06E8               	decf	wreg,f,c
 14363  002628  E2FD               	bc	u4511
 14364  00262A                     
 14365                           ;wifi.c: 151: wifi.send("AT+CIPSTART=\"TCP\",\"192.168.4.1\",\"333\"\r\n");
 14366  00262A  0E38               	movlw	low STR_52
 14367  00262C  6E32               	movwf	wifi_send@msg^0,c
 14368  00262E  0E7D               	movlw	high STR_52
 14369  002630  6E33               	movwf	(wifi_send@msg+1)^0,c
 14370  002632  EE20  F0BF         	lfsr	2,_wifi+2
 14371  002636  D802               	call	u4528
 14372  002638  EF28  F013         	goto	u4529
 14373  00263C                     u4528:
 14374  00263C  0005               	push	
 14375  00263E  6EFA               	movwf	pclath,c
 14376  002640  50DE               	movf	postinc2,w,c
 14377  002642  6EFD               	movwf	tosl,c
 14378  002644  50DE               	movf	postinc2,w,c
 14379  002646  6EFE               	movwf	tosh,c
 14380  002648  50F8               	movf	tblptru,w,c
 14381  00264A  6EFF               	movwf	tosu,c
 14382  00264C  50FA               	movf	pclath,w,c
 14383  00264E  0012               	return		;indir
 14384  002650                     u4529:
 14385                           
 14386                           ;wifi.c: 164:     while( *tam )
 14387  002650  EF39  F013         	goto	l6297
 14388  002654                     l6291:
 14389                           
 14390                           ;wifi.c: 165:     {;wifi.c: 166:         str[i] = *tam;
 14391  002654  C034  FFD9         	movff	Wifi_cipsend@tam,fsr2l
 14392  002658  C035  FFDA         	movff	Wifi_cipsend@tam+1,fsr2h
 14393  00265C  0E38               	movlw	low Wifi_cipsend@str
 14394  00265E  2456               	addwf	Wifi_cipsend@i^0,w,c
 14395  002660  6EE1               	movwf	fsr1l,c
 14396  002662  6AE2               	clrf	fsr1h,c
 14397  002664  0E00               	movlw	high Wifi_cipsend@str
 14398  002666  22E2               	addwfc	fsr1h,f,c
 14399  002668  CFDF FFE7          	movff	indf2,indf1
 14400  00266C                     
 14401                           ;wifi.c: 167:         *tam++;
 14402  00266C  4A34               	infsnz	Wifi_cipsend@tam^0,f,c
 14403  00266E  2A35               	incf	(Wifi_cipsend@tam+1)^0,f,c
 14404  002670                     
 14405                           ;wifi.c: 168:         i++;
 14406  002670  2A56               	incf	Wifi_cipsend@i^0,f,c
 14407  002672                     l6297:
 14408                           
 14409                           ;wifi.c: 164:     while( *tam )
 14410  002672  C034  FFD9         	movff	Wifi_cipsend@tam,fsr2l
 14411  002676  C035  FFDA         	movff	Wifi_cipsend@tam+1,fsr2h
 14412  00267A  50DF               	movf	indf2,w,c
 14413  00267C  A4D8               	btfss	status,2,c
 14414  00267E  EF43  F013         	goto	u4531
 14415  002682  EF45  F013         	goto	u4530
 14416  002686                     u4531:
 14417  002686  EF2A  F013         	goto	l6291
 14418  00268A                     u4530:
 14419  00268A                     
 14420                           ;wifi.c: 170:     str[i] = '\r'; i++;
 14421  00268A  0E38               	movlw	low Wifi_cipsend@str
 14422  00268C  2456               	addwf	Wifi_cipsend@i^0,w,c
 14423  00268E  6ED9               	movwf	fsr2l,c
 14424  002690  6ADA               	clrf	fsr2h,c
 14425  002692  0E00               	movlw	high Wifi_cipsend@str
 14426  002694  22DA               	addwfc	fsr2h,f,c
 14427  002696  0E0D               	movlw	13
 14428  002698  6EDF               	movwf	indf2,c
 14429  00269A  2A56               	incf	Wifi_cipsend@i^0,f,c
 14430  00269C                     
 14431                           ;wifi.c: 171:     str[i] = '\n'; i++;
 14432  00269C  0E38               	movlw	low Wifi_cipsend@str
 14433  00269E  2456               	addwf	Wifi_cipsend@i^0,w,c
 14434  0026A0  6ED9               	movwf	fsr2l,c
 14435  0026A2  6ADA               	clrf	fsr2h,c
 14436  0026A4  0E00               	movlw	high Wifi_cipsend@str
 14437  0026A6  22DA               	addwfc	fsr2h,f,c
 14438  0026A8  0E0A               	movlw	10
 14439  0026AA  6EDF               	movwf	indf2,c
 14440  0026AC  2A56               	incf	Wifi_cipsend@i^0,f,c
 14441  0026AE                     
 14442                           ;wifi.c: 172:     str[i] = 0;
 14443  0026AE  0E38               	movlw	low Wifi_cipsend@str
 14444  0026B0  2456               	addwf	Wifi_cipsend@i^0,w,c
 14445  0026B2  6ED9               	movwf	fsr2l,c
 14446  0026B4  6ADA               	clrf	fsr2h,c
 14447  0026B6  0E00               	movlw	high Wifi_cipsend@str
 14448  0026B8  22DA               	addwfc	fsr2h,f,c
 14449  0026BA  0E00               	movlw	0
 14450  0026BC  6EDF               	movwf	indf2,c
 14451  0026BE                     
 14452                           ;wifi.c: 173:     wifi_send( str );
 14453  0026BE  0E38               	movlw	low Wifi_cipsend@str
 14454  0026C0  6E32               	movwf	wifi_send@msg^0,c
 14455  0026C2  0E00               	movlw	high Wifi_cipsend@str
 14456  0026C4  6E33               	movwf	(wifi_send@msg+1)^0,c
 14457  0026C6  ECA2  F018         	call	_wifi_send	;wreg free
 14458                           
 14459                           ;wifi.c: 175:     while( *msg )
 14460  0026CA  EF76  F013         	goto	l6315
 14461  0026CE                     l6309:
 14462                           
 14463                           ;wifi.c: 176:     {;wifi.c: 177:         vtr[d] = *msg;
 14464  0026CE  C036  FFD9         	movff	Wifi_cipsend@msg,fsr2l
 14465  0026D2  C037  FFDA         	movff	Wifi_cipsend@msg+1,fsr2h
 14466  0026D6  0E4C               	movlw	low Wifi_cipsend@vtr
 14467  0026D8  2457               	addwf	Wifi_cipsend@d^0,w,c
 14468  0026DA  6EE1               	movwf	fsr1l,c
 14469  0026DC  6AE2               	clrf	fsr1h,c
 14470  0026DE  0E00               	movlw	high Wifi_cipsend@vtr
 14471  0026E0  22E2               	addwfc	fsr1h,f,c
 14472  0026E2  CFDF FFE7          	movff	indf2,indf1
 14473  0026E6                     
 14474                           ;wifi.c: 178:         *msg++;
 14475  0026E6  4A36               	infsnz	Wifi_cipsend@msg^0,f,c
 14476  0026E8  2A37               	incf	(Wifi_cipsend@msg+1)^0,f,c
 14477  0026EA                     
 14478                           ;wifi.c: 179:         d++;
 14479  0026EA  2A57               	incf	Wifi_cipsend@d^0,f,c
 14480  0026EC                     l6315:
 14481                           
 14482                           ;wifi.c: 175:     while( *msg )
 14483  0026EC  C036  FFD9         	movff	Wifi_cipsend@msg,fsr2l
 14484  0026F0  C037  FFDA         	movff	Wifi_cipsend@msg+1,fsr2h
 14485  0026F4  50DF               	movf	indf2,w,c
 14486  0026F6  A4D8               	btfss	status,2,c
 14487  0026F8  EF80  F013         	goto	u4541
 14488  0026FC  EF82  F013         	goto	u4540
 14489  002700                     u4541:
 14490  002700  EF67  F013         	goto	l6309
 14491  002704                     u4540:
 14492  002704                     
 14493                           ;wifi.c: 181:     vtr[d] = '\r'; d++;
 14494  002704  0E4C               	movlw	low Wifi_cipsend@vtr
 14495  002706  2457               	addwf	Wifi_cipsend@d^0,w,c
 14496  002708  6ED9               	movwf	fsr2l,c
 14497  00270A  6ADA               	clrf	fsr2h,c
 14498  00270C  0E00               	movlw	high Wifi_cipsend@vtr
 14499  00270E  22DA               	addwfc	fsr2h,f,c
 14500  002710  0E0D               	movlw	13
 14501  002712  6EDF               	movwf	indf2,c
 14502  002714  2A57               	incf	Wifi_cipsend@d^0,f,c
 14503  002716                     
 14504                           ;wifi.c: 182:     vtr[d] = '\n'; d++;
 14505  002716  0E4C               	movlw	low Wifi_cipsend@vtr
 14506  002718  2457               	addwf	Wifi_cipsend@d^0,w,c
 14507  00271A  6ED9               	movwf	fsr2l,c
 14508  00271C  6ADA               	clrf	fsr2h,c
 14509  00271E  0E00               	movlw	high Wifi_cipsend@vtr
 14510  002720  22DA               	addwfc	fsr2h,f,c
 14511  002722  0E0A               	movlw	10
 14512  002724  6EDF               	movwf	indf2,c
 14513  002726  2A57               	incf	Wifi_cipsend@d^0,f,c
 14514  002728                     
 14515                           ;wifi.c: 183:     vtr[d] = 0;
 14516  002728  0E4C               	movlw	low Wifi_cipsend@vtr
 14517  00272A  2457               	addwf	Wifi_cipsend@d^0,w,c
 14518  00272C  6ED9               	movwf	fsr2l,c
 14519  00272E  6ADA               	clrf	fsr2h,c
 14520  002730  0E00               	movlw	high Wifi_cipsend@vtr
 14521  002732  22DA               	addwfc	fsr2h,f,c
 14522  002734  0E00               	movlw	0
 14523  002736  6EDF               	movwf	indf2,c
 14524  002738                     
 14525                           ;wifi.c: 184:     wifi_send(vtr);
 14526  002738  0E4C               	movlw	low Wifi_cipsend@vtr
 14527  00273A  6E32               	movwf	wifi_send@msg^0,c
 14528  00273C  0E00               	movlw	high Wifi_cipsend@vtr
 14529  00273E  6E33               	movwf	(wifi_send@msg+1)^0,c
 14530  002740  ECA2  F018         	call	_wifi_send	;wreg free
 14531  002744                     
 14532                           ;wifi.c: 186:     wifi_send("AT+CIPCLOSE\r\n");
 14533  002744  0EC4               	movlw	low STR_53
 14534  002746  6E32               	movwf	wifi_send@msg^0,c
 14535  002748  0E7F               	movlw	high STR_53
 14536  00274A  6E33               	movwf	(wifi_send@msg+1)^0,c
 14537  00274C  ECA2  F018         	call	_wifi_send	;wreg free
 14538  002750  0012               	return		;funcret
 14539  002752                     __end_of_Wifi_cipsend:
 14540                           	callstack 0
 14541                           
 14542 ;; *************** function _wifi_send *****************
 14543 ;; Defined at:
 14544 ;;		line 18 in file "wifi.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;  msg             2    1[COMRAM] PTR const unsigned char 
 14547 ;;		 -> STR_53(14), STR_52(40), Wifi_cipsend@vtr(10), Wifi_cipsend@str(20), 
 14548 ;;		 -> STR_51(15), STR_50(14), STR_49(17), STR_48(15), 
 14549 ;;		 -> STR_47(21), STR_46(14), STR_45(18), STR_44(11), 
 14550 ;;		 -> STR_43(11), Wifi_connect@str(30), STR_42(41), STR_41(14), 
 14551 ;;		 -> STR_40(36), STR_39(14), STR_38(15), STR_37(14), 
 14552 ;;		 -> STR_36(17), STR_35(14), 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;		None
 14555 ;; Return value:  Size  Location     Type
 14556 ;;                  1    wreg      void 
 14557 ;; Registers used:
 14558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14564 ;;      Params:         2       0       0       0       0       0       0       0       0
 14565 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14566 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14567 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14568 ;;Total ram usage:        2 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    3
 14571 ;; This function calls:
 14572 ;;		_txEUSART
 14573 ;;		_txStatusEUSART
 14574 ;; This function is called by:
 14575 ;;		_Wifi_mode
 14576 ;;		_Wifi_connect
 14577 ;;		_Wifi_cipsend
 14578 ;;		_Wifi_scan
 14579 ;;		_Wifi_ip
 14580 ;;		_Wifi_autoconnect
 14581 ;;		_Wifi_config_servidor
 14582 ;;		_Wifi_config_cliente
 14583 ;; This function uses a non-reentrant model
 14584 ;;
 14585                           
 14586                           	psect	text74
 14587  003144                     __ptext74:
 14588                           	callstack 0
 14589  003144                     _wifi_send:
 14590                           	callstack 26
 14591  003144                     
 14592                           ;wifi.c: 18: void wifi_send( const char * msg );wifi.c: 19: {;wifi.c: 20:     while( *ms
      +                          g )
 14593  003144  EFDC  F018         	goto	l5565
 14594  003148                     l5559:
 14595  003148  EE20  F0DB         	lfsr	2,_eusart+10
 14596  00314C  D802               	call	u3798
 14597  00314E  EFB3  F018         	goto	u3799
 14598  003152                     u3798:
 14599  003152  0005               	push	
 14600  003154  6EFA               	movwf	pclath,c
 14601  003156  50DE               	movf	postinc2,w,c
 14602  003158  6EFD               	movwf	tosl,c
 14603  00315A  50DE               	movf	postinc2,w,c
 14604  00315C  6EFE               	movwf	tosh,c
 14605  00315E  50F8               	movf	tblptru,w,c
 14606  003160  6EFF               	movwf	tosu,c
 14607  003162  50FA               	movf	pclath,w,c
 14608  003164  0012               	return		;indir
 14609  003166                     u3799:
 14610  003166  0900               	iorlw	0
 14611  003168  A4D8               	btfss	status,2,c
 14612  00316A  EFB9  F018         	goto	u3801
 14613  00316E  EFBB  F018         	goto	u3800
 14614  003172                     u3801:
 14615  003172  EFA4  F018         	goto	l5559
 14616  003176                     u3800:
 14617  003176                     
 14618                           ;wifi.c: 23:         eusart.tx( *msg );
 14619  003176  EE20  F0D9         	lfsr	2,_eusart+8
 14620  00317A  D802               	call	u3818
 14621  00317C  EFDA  F018         	goto	u3819
 14622  003180                     u3818:
 14623  003180  0005               	push	
 14624  003182  6EFA               	movwf	pclath,c
 14625  003184  50DE               	movf	postinc2,w,c
 14626  003186  6EFD               	movwf	tosl,c
 14627  003188  50DE               	movf	postinc2,w,c
 14628  00318A  6EFE               	movwf	tosh,c
 14629  00318C  50F8               	movf	tblptru,w,c
 14630  00318E  6EFF               	movwf	tosu,c
 14631  003190  50FA               	movf	pclath,w,c
 14632  003192  C032  FFF6         	movff	wifi_send@msg,tblptrl
 14633  003196  C033  FFF7         	movff	wifi_send@msg+1,tblptrh
 14634  00319A  6AF8               	clrf	tblptru,c
 14635  00319C  0E07               	movlw	(high __ramtop+-1)
 14636  00319E  64F7               	cpfsgt	tblptrh,c
 14637  0031A0  D003               	bra	u3827
 14638  0031A2  0008               	tblrd		*
 14639  0031A4  50F5               	movf	tablat,w,c
 14640  0031A6  D005               	bra	u3820
 14641  0031A8                     u3827:
 14642  0031A8  CFF6 FFE1          	movff	tblptrl,fsr1l
 14643  0031AC  CFF7 FFE2          	movff	tblptrh,fsr1h
 14644  0031B0  50E7               	movf	indf1,w,c
 14645  0031B2                     u3820:
 14646  0031B2  0012               	return		;indir
 14647  0031B4                     u3819:
 14648  0031B4                     
 14649                           ;wifi.c: 24:         ++msg;
 14650  0031B4  4A32               	infsnz	wifi_send@msg^0,f,c
 14651  0031B6  2A33               	incf	(wifi_send@msg+1)^0,f,c
 14652  0031B8                     l5565:
 14653                           
 14654                           ;wifi.c: 20:     while( *msg )
 14655  0031B8  C032  FFF6         	movff	wifi_send@msg,tblptrl
 14656  0031BC  C033  FFF7         	movff	wifi_send@msg+1,tblptrh
 14657  0031C0  6AF8               	clrf	tblptru,c
 14658  0031C2  0E07               	movlw	(high __ramtop+-1)
 14659  0031C4  64F7               	cpfsgt	tblptrh,c
 14660  0031C6  D003               	bra	u3837
 14661  0031C8  0008               	tblrd		*
 14662  0031CA  50F5               	movf	tablat,w,c
 14663  0031CC  D005               	bra	u3830
 14664  0031CE                     u3837:
 14665  0031CE  CFF6 FFE1          	movff	tblptrl,fsr1l
 14666  0031D2  CFF7 FFE2          	movff	tblptrh,fsr1h
 14667  0031D6  50E7               	movf	indf1,w,c
 14668  0031D8                     u3830:
 14669  0031D8  0900               	iorlw	0
 14670  0031DA  A4D8               	btfss	status,2,c
 14671  0031DC  EFF2  F018         	goto	u3841
 14672  0031E0  EFF4  F018         	goto	u3840
 14673  0031E4                     u3841:
 14674  0031E4  EFA4  F018         	goto	l5559
 14675  0031E8                     u3840:
 14676  0031E8  0012               	return		;funcret
 14677  0031EA                     __end_of_wifi_send:
 14678                           	callstack 0
 14679                           
 14680 ;; *************** function _txStatusEUSART *****************
 14681 ;; Defined at:
 14682 ;;		line 126 in file "eusart.c"
 14683 ;; Parameters:    Size  Location     Type
 14684 ;;		None
 14685 ;; Auto vars:     Size  Location     Type
 14686 ;;		None
 14687 ;; Return value:  Size  Location     Type
 14688 ;;                  1    wreg      unsigned char 
 14689 ;; Registers used:
 14690 ;;		wreg
 14691 ;; Tracked objects:
 14692 ;;		On entry : 0/0
 14693 ;;		On exit  : 0/0
 14694 ;;		Unchanged: 0/0
 14695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14696 ;;      Params:         0       0       0       0       0       0       0       0       0
 14697 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14698 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14699 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14700 ;;Total ram usage:        0 bytes
 14701 ;; Hardware stack levels used:    1
 14702 ;; Hardware stack levels required when called:    2
 14703 ;; This function calls:
 14704 ;;		Nothing
 14705 ;; This function is called by:
 14706 ;;		_wifi_send
 14707 ;; This function uses a non-reentrant model
 14708 ;;
 14709                           
 14710                           	psect	text75
 14711  004010                     __ptext75:
 14712                           	callstack 0
 14713  004010                     _txStatusEUSART:
 14714                           	callstack 26
 14715  004010                     
 14716                           ;eusart.c: 128:     return( !TXSTAbits.TRMT );
 14717  004010  A2AC               	btfss	172,1,c	;volatile
 14718  004012  EF0D  F020         	goto	u3241
 14719  004016  EF10  F020         	goto	u3240
 14720  00401A                     u3241:
 14721  00401A  0E01               	movlw	1
 14722  00401C  EF11  F020         	goto	u3250
 14723  004020                     u3240:
 14724  004020  0E00               	movlw	0
 14725  004022                     u3250:
 14726  004022  0012               	return		;funcret
 14727  004024                     __end_of_txStatusEUSART:
 14728                           	callstack 0
 14729                           
 14730 ;; *************** function _txEUSART *****************
 14731 ;; Defined at:
 14732 ;;		line 115 in file "eusart.c"
 14733 ;; Parameters:    Size  Location     Type
 14734 ;;  d               1    wreg     unsigned char 
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;  d               1    0[COMRAM] unsigned char 
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  1    wreg      void 
 14739 ;; Registers used:
 14740 ;;		wreg
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14746 ;;      Params:         0       0       0       0       0       0       0       0       0
 14747 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14748 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14749 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14750 ;;Total ram usage:        1 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:    2
 14753 ;; This function calls:
 14754 ;;		Nothing
 14755 ;; This function is called by:
 14756 ;;		_wifi_send
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           	psect	text76
 14761  0040E4                     __ptext76:
 14762                           	callstack 0
 14763  0040E4                     _txEUSART:
 14764                           	callstack 26
 14765                           
 14766                           ;incstack = 0
 14767                           ;txEUSART@d stored from wreg
 14768  0040E4  6E31               	movwf	txEUSART@d^0,c
 14769  0040E6                     
 14770                           ;eusart.c: 115: void txEUSART( unsigned char d );eusart.c: 116: {;eusart.c: 117:     TXR
      +                          EG = d;
 14771  0040E6  C031  FFAD         	movff	txEUSART@d,4013	;volatile
 14772  0040EA  0012               	return		;funcret
 14773  0040EC                     __end_of_txEUSART:
 14774                           	callstack 0
 14775                           
 14776 ;; *************** function _MCP4725 *****************
 14777 ;; Defined at:
 14778 ;;		line 35 in file "MCP4725.c"
 14779 ;; Parameters:    Size  Location     Type
 14780 ;;  Vout            2   26[COMRAM] unsigned int 
 14781 ;; Auto vars:     Size  Location     Type
 14782 ;;		None
 14783 ;; Return value:  Size  Location     Type
 14784 ;;                  1    wreg      void 
 14785 ;; Registers used:
 14786 ;;		wreg, status,2, status,0, cstack
 14787 ;; Tracked objects:
 14788 ;;		On entry : 0/0
 14789 ;;		On exit  : 0/0
 14790 ;;		Unchanged: 0/0
 14791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14792 ;;      Params:         2       0       0       0       0       0       0       0       0
 14793 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14794 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14795 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14796 ;;Total ram usage:        2 bytes
 14797 ;; Hardware stack levels used:    1
 14798 ;; Hardware stack levels required when called:    4
 14799 ;; This function calls:
 14800 ;;		_I2C_stop
 14801 ;;		_dac_init
 14802 ;;		_dac_write
 14803 ;;		_delay
 14804 ;; This function is called by:
 14805 ;;		_main
 14806 ;; This function uses a non-reentrant model
 14807 ;;
 14808                           
 14809                           	psect	text77
 14810  003F36                     __ptext77:
 14811                           	callstack 0
 14812  003F36                     _MCP4725:
 14813                           	callstack 26
 14814  003F36                     
 14815                           ;MCP4725.c: 35: void MCP4725 (unsigned int Vout);MCP4725.c: 36: {;MCP4725.c: 37:     dac
      +                          _init();
 14816  003F36  ECE7  F01D         	call	_dac_init
 14817                           
 14818                           ;MCP4725.c: 38:     dac_write(Vout);
 14819  003F3A  C04B  F034         	movff	MCP4725@Vout,dac_write@code
 14820  003F3E  C04C  F035         	movff	MCP4725@Vout+1,dac_write@code+1
 14821  003F42  EC80  F01D         	call	_dac_write	;wreg free
 14822  003F46                     
 14823                           ;MCP4725.c: 39:     I2C_stop();
 14824  003F46  EC1C  F020         	call	_I2C_stop	;wreg free
 14825  003F4A                     
 14826                           ;MCP4725.c: 40:     delay(1);
 14827  003F4A  0E00               	movlw	0
 14828  003F4C  6E32               	movwf	(delay@t+1)^0,c
 14829  003F4E  0E01               	movlw	1
 14830  003F50  6E31               	movwf	delay@t^0,c
 14831  003F52  EC24  F01F         	call	_delay	;wreg free
 14832  003F56  0012               	return		;funcret
 14833  003F58                     __end_of_MCP4725:
 14834                           	callstack 0
 14835                           
 14836 ;; *************** function _dac_write *****************
 14837 ;; Defined at:
 14838 ;;		line 25 in file "MCP4725.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;  code            2    3[COMRAM] unsigned int 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;		None
 14843 ;; Return value:  Size  Location     Type
 14844 ;;                  1    wreg      void 
 14845 ;; Registers used:
 14846 ;;		wreg, status,2, status,0, cstack
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14852 ;;      Params:         2       0       0       0       0       0       0       0       0
 14853 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14854 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14855 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14856 ;;Total ram usage:        5 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:    3
 14859 ;; This function calls:
 14860 ;;		_I2C_ack_receive
 14861 ;;		_I2C_tx
 14862 ;;		_delay
 14863 ;; This function is called by:
 14864 ;;		_MCP4725
 14865 ;;		_MCP4725X
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           	psect	text78
 14870  003B00                     __ptext78:
 14871                           	callstack 0
 14872  003B00                     _dac_write:
 14873                           	callstack 26
 14874  003B00                     
 14875                           ;MCP4725.c: 25: void dac_write ( unsigned int code );MCP4725.c: 26: {;MCP4725.c: 27:    
      +                           I2C_tx( code >> 4 );
 14876  003B00  C034  F036         	movff	dac_write@code,??_dac_write
 14877  003B04  C035  F037         	movff	dac_write@code+1,??_dac_write+1
 14878  003B08  0E04               	movlw	4
 14879  003B0A  6E38               	movwf	(??_dac_write+2)^0,c
 14880  003B0C                     u3355:
 14881  003B0C  90D8               	bcf	status,0,c
 14882  003B0E  3237               	rrcf	(??_dac_write+1)^0,f,c
 14883  003B10  3236               	rrcf	??_dac_write^0,f,c
 14884  003B12  2E38               	decfsz	(??_dac_write+2)^0,f,c
 14885  003B14  EF86  F01D         	goto	u3355
 14886  003B18  5036               	movf	??_dac_write^0,w,c
 14887  003B1A  ECE9  F01F         	call	_I2C_tx
 14888  003B1E                     
 14889                           ;MCP4725.c: 28:     I2C_ack_receive();
 14890  003B1E  EC41  F020         	call	_I2C_ack_receive	;wreg free
 14891  003B22                     
 14892                           ;MCP4725.c: 29:     delay(1);
 14893  003B22  0E00               	movlw	0
 14894  003B24  6E32               	movwf	(delay@t+1)^0,c
 14895  003B26  0E01               	movlw	1
 14896  003B28  6E31               	movwf	delay@t^0,c
 14897  003B2A  EC24  F01F         	call	_delay	;wreg free
 14898  003B2E                     
 14899                           ;MCP4725.c: 30:     I2C_tx( code << 4);
 14900  003B2E  3834               	swapf	dac_write@code^0,w,c
 14901  003B30  0BF0               	andlw	240
 14902  003B32  ECE9  F01F         	call	_I2C_tx
 14903  003B36                     
 14904                           ;MCP4725.c: 31:     I2C_ack_receive();
 14905  003B36  EC41  F020         	call	_I2C_ack_receive	;wreg free
 14906                           
 14907                           ;MCP4725.c: 32:     delay(1);
 14908  003B3A  0E00               	movlw	0
 14909  003B3C  6E32               	movwf	(delay@t+1)^0,c
 14910  003B3E  0E01               	movlw	1
 14911  003B40  6E31               	movwf	delay@t^0,c
 14912  003B42  EC24  F01F         	call	_delay	;wreg free
 14913  003B46  0012               	return		;funcret
 14914  003B48                     __end_of_dac_write:
 14915                           	callstack 0
 14916                           
 14917 ;; *************** function _dac_init *****************
 14918 ;; Defined at:
 14919 ;;		line 13 in file "MCP4725.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;		None
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;		None
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  1    wreg      void 
 14926 ;; Registers used:
 14927 ;;		wreg, status,2, status,0, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14933 ;;      Params:         0       0       0       0       0       0       0       0       0
 14934 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14936 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14937 ;;Total ram usage:        0 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    3
 14940 ;; This function calls:
 14941 ;;		_I2C_ack_receive
 14942 ;;		_I2C_start
 14943 ;;		_I2C_tx
 14944 ;;		_delay
 14945 ;; This function is called by:
 14946 ;;		_MCP4725
 14947 ;;		_MCP4725X
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           	psect	text79
 14952  003BCE                     __ptext79:
 14953                           	callstack 0
 14954  003BCE                     _dac_init:
 14955                           	callstack 26
 14956  003BCE                     
 14957                           ;MCP4725.c: 15:     I2C_start();
 14958  003BCE  EC12  F020         	call	_I2C_start	;wreg free
 14959  003BD2                     
 14960                           ;MCP4725.c: 16:     delay(1);
 14961  003BD2  0E00               	movlw	0
 14962  003BD4  6E32               	movwf	(delay@t+1)^0,c
 14963  003BD6  0E01               	movlw	1
 14964  003BD8  6E31               	movwf	delay@t^0,c
 14965  003BDA  EC24  F01F         	call	_delay	;wreg free
 14966  003BDE                     
 14967                           ;MCP4725.c: 17:     I2C_tx( 0b11000000 );
 14968  003BDE  0EC0               	movlw	192
 14969  003BE0  ECE9  F01F         	call	_I2C_tx
 14970  003BE4                     
 14971                           ;MCP4725.c: 18:     I2C_ack_receive();
 14972  003BE4  EC41  F020         	call	_I2C_ack_receive	;wreg free
 14973  003BE8                     
 14974                           ;MCP4725.c: 19:     delay(1);
 14975  003BE8  0E00               	movlw	0
 14976  003BEA  6E32               	movwf	(delay@t+1)^0,c
 14977  003BEC  0E01               	movlw	1
 14978  003BEE  6E31               	movwf	delay@t^0,c
 14979  003BF0  EC24  F01F         	call	_delay	;wreg free
 14980                           
 14981                           ;MCP4725.c: 20:     I2C_tx( 0b01100000 );
 14982  003BF4  0E60               	movlw	96
 14983  003BF6  ECE9  F01F         	call	_I2C_tx
 14984  003BFA                     
 14985                           ;MCP4725.c: 21:     I2C_ack_receive();
 14986  003BFA  EC41  F020         	call	_I2C_ack_receive	;wreg free
 14987  003BFE                     
 14988                           ;MCP4725.c: 22:     delay(1);
 14989  003BFE  0E00               	movlw	0
 14990  003C00  6E32               	movwf	(delay@t+1)^0,c
 14991  003C02  0E01               	movlw	1
 14992  003C04  6E31               	movwf	delay@t^0,c
 14993  003C06  EC24  F01F         	call	_delay	;wreg free
 14994  003C0A  0012               	return		;funcret
 14995  003C0C                     __end_of_dac_init:
 14996                           	callstack 0
 14997                           
 14998 ;; *************** function _delay *****************
 14999 ;; Defined at:
 15000 ;;		line 10 in file "delay.c"
 15001 ;; Parameters:    Size  Location     Type
 15002 ;;  t               2    0[COMRAM] unsigned int 
 15003 ;; Auto vars:     Size  Location     Type
 15004 ;;		None
 15005 ;; Return value:  Size  Location     Type
 15006 ;;                  1    wreg      void 
 15007 ;; Registers used:
 15008 ;;		wreg, status,2, status,0
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15014 ;;      Params:         2       0       0       0       0       0       0       0       0
 15015 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15016 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15017 ;;      Totals:         3       0       0       0       0       0       0       0       0
 15018 ;;Total ram usage:        3 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    2
 15021 ;; This function calls:
 15022 ;;		Nothing
 15023 ;; This function is called by:
 15024 ;;		_dac_init
 15025 ;;		_dac_write
 15026 ;;		_MCP4725
 15027 ;;		_dispLCD_init
 15028 ;;		_main
 15029 ;;		_Wifi_mode
 15030 ;;		_MCP4725X
 15031 ;;		_Wifi_config_servidor
 15032 ;; This function uses a non-reentrant model
 15033 ;;
 15034                           
 15035                           	psect	text80
 15036  003E48                     __ptext80:
 15037                           	callstack 0
 15038  003E48                     _delay:
 15039                           	callstack 27
 15040  003E48                     
 15041                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
 15042  003E48  EF31  F01F         	goto	l54
 15043  003E4C                     l5113:
 15044                           
 15045                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
 15046  003E4C  0E07               	movlw	7
 15047  003E4E  6E33               	movwf	??_delay^0,c
 15048  003E50  0E7D               	movlw	125
 15049  003E52                     u6047:
 15050  003E52  2EE8               	decfsz	wreg,f,c
 15051  003E54  D7FE               	bra	u6047
 15052  003E56  2E33               	decfsz	??_delay^0,f,c
 15053  003E58  D7FC               	bra	u6047
 15054  003E5A  F000               	nop	
 15055  003E5C                     
 15056                           ;delay.c: 15:         --t;
 15057  003E5C  0631               	decf	delay@t^0,f,c
 15058  003E5E  A0D8               	btfss	status,0,c
 15059  003E60  0632               	decf	(delay@t+1)^0,f,c
 15060  003E62                     l54:
 15061                           
 15062                           ;delay.c: 12:     while( t )
 15063  003E62  5031               	movf	delay@t^0,w,c
 15064  003E64  1032               	iorwf	(delay@t+1)^0,w,c
 15065  003E66  A4D8               	btfss	status,2,c
 15066  003E68  EF38  F01F         	goto	u3201
 15067  003E6C  EF3A  F01F         	goto	u3200
 15068  003E70                     u3201:
 15069  003E70  EF26  F01F         	goto	l5113
 15070  003E74                     u3200:
 15071  003E74  0012               	return		;funcret
 15072  003E76                     __end_of_delay:
 15073                           	callstack 0
 15074                           
 15075 ;; *************** function _I2C_tx *****************
 15076 ;; Defined at:
 15077 ;;		line 36 in file "spi_i2c.c"
 15078 ;; Parameters:    Size  Location     Type
 15079 ;;  b               1    wreg     unsigned char 
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;  b               1    0[COMRAM] unsigned char 
 15082 ;; Return value:  Size  Location     Type
 15083 ;;                  1    wreg      void 
 15084 ;; Registers used:
 15085 ;;		wreg
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15091 ;;      Params:         0       0       0       0       0       0       0       0       0
 15092 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15093 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15094 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15095 ;;Total ram usage:        1 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    2
 15098 ;; This function calls:
 15099 ;;		Nothing
 15100 ;; This function is called by:
 15101 ;;		_dac_init
 15102 ;;		_dac_write
 15103 ;; This function uses a non-reentrant model
 15104 ;;
 15105                           
 15106                           	psect	text81
 15107  003FD2                     __ptext81:
 15108                           	callstack 0
 15109  003FD2                     _I2C_tx:
 15110                           	callstack 26
 15111                           
 15112                           ;incstack = 0
 15113                           ;I2C_tx@b stored from wreg
 15114  003FD2  6E31               	movwf	I2C_tx@b^0,c
 15115  003FD4                     
 15116                           ;spi_i2c.c: 36: void I2C_tx( unsigned char b );spi_i2c.c: 37: {;spi_i2c.c: 38:     SSPBU
      +                          F = b;
 15117  003FD4  C031  FFC9         	movff	I2C_tx@b,4041	;volatile
 15118  003FD8                     l975:
 15119  003FD8  B0C7               	btfsc	199,0,c	;volatile
 15120  003FDA  EFF1  F01F         	goto	u3211
 15121  003FDE  EFF3  F01F         	goto	u3210
 15122  003FE2                     u3211:
 15123  003FE2  EFEC  F01F         	goto	l975
 15124  003FE6                     u3210:
 15125  003FE6  0012               	return		;funcret
 15126  003FE8                     __end_of_I2C_tx:
 15127                           	callstack 0
 15128                           
 15129 ;; *************** function _I2C_start *****************
 15130 ;; Defined at:
 15131 ;;		line 22 in file "spi_i2c.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;		None
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;		None
 15136 ;; Return value:  Size  Location     Type
 15137 ;;                  1    wreg      void 
 15138 ;; Registers used:
 15139 ;;		None
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15145 ;;      Params:         0       0       0       0       0       0       0       0       0
 15146 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15147 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15148 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15149 ;;Total ram usage:        0 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; Hardware stack levels required when called:    2
 15152 ;; This function calls:
 15153 ;;		Nothing
 15154 ;; This function is called by:
 15155 ;;		_dac_init
 15156 ;; This function uses a non-reentrant model
 15157 ;;
 15158                           
 15159                           	psect	text82
 15160  004024                     __ptext82:
 15161                           	callstack 0
 15162  004024                     _I2C_start:
 15163                           	callstack 26
 15164  004024                     
 15165                           ;spi_i2c.c: 24:     SSPCON2bits.SEN = 1;
 15166  004024  80C5               	bsf	197,0,c	;volatile
 15167  004026                     l960:
 15168  004026  A69E               	btfss	158,3,c	;volatile
 15169  004028  EF18  F020         	goto	u3191
 15170  00402C  EF1A  F020         	goto	u3190
 15171  004030                     u3191:
 15172  004030  EF13  F020         	goto	l960
 15173  004034                     u3190:
 15174  004034                     
 15175                           ;spi_i2c.c: 26:     PIR1bits.SSPIF = 0;
 15176  004034  969E               	bcf	158,3,c	;volatile
 15177  004036  0012               	return		;funcret
 15178  004038                     __end_of_I2C_start:
 15179                           	callstack 0
 15180                           
 15181 ;; *************** function _I2C_ack_receive *****************
 15182 ;; Defined at:
 15183 ;;		line 56 in file "spi_i2c.c"
 15184 ;; Parameters:    Size  Location     Type
 15185 ;;		None
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;		None
 15188 ;; Return value:  Size  Location     Type
 15189 ;;                  1    wreg      void 
 15190 ;; Registers used:
 15191 ;;		None
 15192 ;; Tracked objects:
 15193 ;;		On entry : 0/0
 15194 ;;		On exit  : 0/0
 15195 ;;		Unchanged: 0/0
 15196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15197 ;;      Params:         0       0       0       0       0       0       0       0       0
 15198 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15199 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15200 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15201 ;;Total ram usage:        0 bytes
 15202 ;; Hardware stack levels used:    1
 15203 ;; Hardware stack levels required when called:    2
 15204 ;; This function calls:
 15205 ;;		Nothing
 15206 ;; This function is called by:
 15207 ;;		_dac_init
 15208 ;;		_dac_write
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           	psect	text83
 15213  004082                     __ptext83:
 15214                           	callstack 0
 15215  004082                     _I2C_ack_receive:
 15216                           	callstack 26
 15217  004082                     l996:
 15218  004082  BCC5               	btfsc	197,6,c	;volatile
 15219  004084  EF46  F020         	goto	u3221
 15220  004088  EF48  F020         	goto	u3220
 15221  00408C                     u3221:
 15222  00408C  EF41  F020         	goto	l996
 15223  004090                     u3220:
 15224  004090  0012               	return		;funcret
 15225  004092                     __end_of_I2C_ack_receive:
 15226                           	callstack 0
 15227                           
 15228 ;; *************** function _I2C_stop *****************
 15229 ;; Defined at:
 15230 ;;		line 41 in file "spi_i2c.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;		None
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;		None
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		None
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15244 ;;      Params:         0       0       0       0       0       0       0       0       0
 15245 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15247 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15248 ;;Total ram usage:        0 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    2
 15251 ;; This function calls:
 15252 ;;		Nothing
 15253 ;; This function is called by:
 15254 ;;		_MCP4725
 15255 ;;		_MCP4725X
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           	psect	text84
 15260  004038                     __ptext84:
 15261                           	callstack 0
 15262  004038                     _I2C_stop:
 15263                           	callstack 27
 15264  004038                     
 15265                           ;spi_i2c.c: 43:     SSPCON2bits.PEN = 1;
 15266  004038  84C5               	bsf	197,2,c	;volatile
 15267  00403A                     l981:
 15268  00403A  A69E               	btfss	158,3,c	;volatile
 15269  00403C  EF22  F020         	goto	u3361
 15270  004040  EF24  F020         	goto	u3360
 15271  004044                     u3361:
 15272  004044  EF1D  F020         	goto	l981
 15273  004048                     u3360:
 15274  004048                     
 15275                           ;spi_i2c.c: 45:     PIR1bits.SSPIF = 0;
 15276  004048  969E               	bcf	158,3,c	;volatile
 15277  00404A  0012               	return		;funcret
 15278  00404C                     __end_of_I2C_stop:
 15279                           	callstack 0
 15280                           
 15281 ;; *************** function _I2C_init *****************
 15282 ;; Defined at:
 15283 ;;		line 12 in file "spi_i2c.c"
 15284 ;; Parameters:    Size  Location     Type
 15285 ;;  freq            4   13[COMRAM] unsigned long 
 15286 ;; Auto vars:     Size  Location     Type
 15287 ;;		None
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  1    wreg      void 
 15290 ;; Registers used:
 15291 ;;		wreg, status,2, status,0, cstack
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/0
 15294 ;;		On exit  : 0/0
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15297 ;;      Params:         4       0       0       0       0       0       0       0       0
 15298 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15299 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15300 ;;      Totals:         4       0       0       0       0       0       0       0       0
 15301 ;;Total ram usage:        4 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:    3
 15304 ;; This function calls:
 15305 ;;		___lldiv
 15306 ;; This function is called by:
 15307 ;;		_main
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           	psect	text85
 15312  003C48                     __ptext85:
 15313                           	callstack 0
 15314  003C48                     _I2C_init:
 15315                           	callstack 27
 15316  003C48                     
 15317                           ;spi_i2c.c: 12: void I2C_init( unsigned long freq );spi_i2c.c: 13: {;spi_i2c.c: 14:     
      +                          TRISBbits.TRISB0 = 1;
 15318  003C48  8093               	bsf	147,0,c	;volatile
 15319                           
 15320                           ;spi_i2c.c: 15:     TRISBbits.TRISB1 = 1;
 15321  003C4A  8293               	bsf	147,1,c	;volatile
 15322  003C4C                     
 15323                           ;spi_i2c.c: 16:     SSPCON1bits.SSPM = 0x8;
 15324  003C4C  50C6               	movf	198,w,c	;volatile
 15325  003C4E  0BF0               	andlw	-16
 15326  003C50  0908               	iorlw	8
 15327  003C52  6EC6               	movwf	198,c	;volatile
 15328  003C54                     
 15329                           ;spi_i2c.c: 17:     SSPADD = ((20000000>>2) / (freq))-1;
 15330  003C54  0E40               	movlw	64
 15331  003C56  6E31               	movwf	___lldiv@dividend^0,c
 15332  003C58  0E4B               	movlw	75
 15333  003C5A  6E32               	movwf	(___lldiv@dividend+1)^0,c
 15334  003C5C  0E4C               	movlw	76
 15335  003C5E  6E33               	movwf	(___lldiv@dividend+2)^0,c
 15336  003C60  0E00               	movlw	0
 15337  003C62  6E34               	movwf	(___lldiv@dividend+3)^0,c
 15338  003C64  C03E  F035         	movff	I2C_init@freq,___lldiv@divisor
 15339  003C68  C03F  F036         	movff	I2C_init@freq+1,___lldiv@divisor+1
 15340  003C6C  C040  F037         	movff	I2C_init@freq+2,___lldiv@divisor+2
 15341  003C70  C041  F038         	movff	I2C_init@freq+3,___lldiv@divisor+3
 15342  003C74  ECF5  F018         	call	___lldiv	;wreg free
 15343  003C78  0431               	decf	?___lldiv^0,w,c
 15344  003C7A  6EC8               	movwf	200,c	;volatile
 15345  003C7C                     
 15346                           ;spi_i2c.c: 18:     SSPSTATbits.SMP = 1;
 15347  003C7C  8EC7               	bsf	199,7,c	;volatile
 15348  003C7E                     
 15349                           ;spi_i2c.c: 19:     SSPCON1bits.SSPEN = 1;
 15350  003C7E  8AC6               	bsf	198,5,c	;volatile
 15351  003C80  0012               	return		;funcret
 15352  003C82                     __end_of_I2C_init:
 15353                           	callstack 0
 15354                           
 15355 ;; *************** function ___lldiv *****************
 15356 ;; Defined at:
 15357 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\__lldiv.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;  dividend        4    0[COMRAM] unsigned long 
 15360 ;;  divisor         4    4[COMRAM] unsigned long 
 15361 ;; Auto vars:     Size  Location     Type
 15362 ;;  quotient        4    8[COMRAM] unsigned long 
 15363 ;;  counter         1   12[COMRAM] unsigned char 
 15364 ;; Return value:  Size  Location     Type
 15365 ;;                  4    0[COMRAM] unsigned long 
 15366 ;; Registers used:
 15367 ;;		wreg, status,2, status,0
 15368 ;; Tracked objects:
 15369 ;;		On entry : 0/0
 15370 ;;		On exit  : 0/0
 15371 ;;		Unchanged: 0/0
 15372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15373 ;;      Params:         8       0       0       0       0       0       0       0       0
 15374 ;;      Locals:         5       0       0       0       0       0       0       0       0
 15375 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15376 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15377 ;;Total ram usage:       13 bytes
 15378 ;; Hardware stack levels used:    1
 15379 ;; Hardware stack levels required when called:    2
 15380 ;; This function calls:
 15381 ;;		Nothing
 15382 ;; This function is called by:
 15383 ;;		_I2C_init
 15384 ;;		_initEUSART
 15385 ;; This function uses a non-reentrant model
 15386 ;;
 15387                           
 15388                           	psect	text86
 15389  0031EA                     __ptext86:
 15390                           	callstack 0
 15391  0031EA                     ___lldiv:
 15392                           	callstack 26
 15393  0031EA  0E00               	movlw	0
 15394  0031EC  6E39               	movwf	___lldiv@quotient^0,c
 15395  0031EE  0E00               	movlw	0
 15396  0031F0  6E3A               	movwf	(___lldiv@quotient+1)^0,c
 15397  0031F2  0E00               	movlw	0
 15398  0031F4  6E3B               	movwf	(___lldiv@quotient+2)^0,c
 15399  0031F6  0E00               	movlw	0
 15400  0031F8  6E3C               	movwf	(___lldiv@quotient+3)^0,c
 15401  0031FA  5035               	movf	___lldiv@divisor^0,w,c
 15402  0031FC  1036               	iorwf	(___lldiv@divisor+1)^0,w,c
 15403  0031FE  1037               	iorwf	(___lldiv@divisor+2)^0,w,c
 15404  003200  1038               	iorwf	(___lldiv@divisor+3)^0,w,c
 15405  003202  B4D8               	btfsc	status,2,c
 15406  003204  EF06  F019         	goto	u3261
 15407  003208  EF08  F019         	goto	u3260
 15408  00320C                     u3261:
 15409  00320C  EF3E  F019         	goto	l1277
 15410  003210                     u3260:
 15411  003210  0E01               	movlw	1
 15412  003212  6E3D               	movwf	___lldiv@counter^0,c
 15413  003214  EF12  F019         	goto	l5191
 15414  003218                     l5189:
 15415  003218  90D8               	bcf	status,0,c
 15416  00321A  3635               	rlcf	___lldiv@divisor^0,f,c
 15417  00321C  3636               	rlcf	(___lldiv@divisor+1)^0,f,c
 15418  00321E  3637               	rlcf	(___lldiv@divisor+2)^0,f,c
 15419  003220  3638               	rlcf	(___lldiv@divisor+3)^0,f,c
 15420  003222  2A3D               	incf	___lldiv@counter^0,f,c
 15421  003224                     l5191:
 15422  003224  AE38               	btfss	(___lldiv@divisor+3)^0,7,c
 15423  003226  EF17  F019         	goto	u3271
 15424  00322A  EF19  F019         	goto	u3270
 15425  00322E                     u3271:
 15426  00322E  EF0C  F019         	goto	l5189
 15427  003232                     u3270:
 15428  003232                     l5193:
 15429  003232  90D8               	bcf	status,0,c
 15430  003234  3639               	rlcf	___lldiv@quotient^0,f,c
 15431  003236  363A               	rlcf	(___lldiv@quotient+1)^0,f,c
 15432  003238  363B               	rlcf	(___lldiv@quotient+2)^0,f,c
 15433  00323A  363C               	rlcf	(___lldiv@quotient+3)^0,f,c
 15434  00323C  5035               	movf	___lldiv@divisor^0,w,c
 15435  00323E  5C31               	subwf	___lldiv@dividend^0,w,c
 15436  003240  5036               	movf	(___lldiv@divisor+1)^0,w,c
 15437  003242  5832               	subwfb	(___lldiv@dividend+1)^0,w,c
 15438  003244  5037               	movf	(___lldiv@divisor+2)^0,w,c
 15439  003246  5833               	subwfb	(___lldiv@dividend+2)^0,w,c
 15440  003248  5038               	movf	(___lldiv@divisor+3)^0,w,c
 15441  00324A  5834               	subwfb	(___lldiv@dividend+3)^0,w,c
 15442  00324C  A0D8               	btfss	status,0,c
 15443  00324E  EF2B  F019         	goto	u3281
 15444  003252  EF2D  F019         	goto	u3280
 15445  003256                     u3281:
 15446  003256  EF36  F019         	goto	l5201
 15447  00325A                     u3280:
 15448  00325A  5035               	movf	___lldiv@divisor^0,w,c
 15449  00325C  5E31               	subwf	___lldiv@dividend^0,f,c
 15450  00325E  5036               	movf	(___lldiv@divisor+1)^0,w,c
 15451  003260  5A32               	subwfb	(___lldiv@dividend+1)^0,f,c
 15452  003262  5037               	movf	(___lldiv@divisor+2)^0,w,c
 15453  003264  5A33               	subwfb	(___lldiv@dividend+2)^0,f,c
 15454  003266  5038               	movf	(___lldiv@divisor+3)^0,w,c
 15455  003268  5A34               	subwfb	(___lldiv@dividend+3)^0,f,c
 15456  00326A  8039               	bsf	___lldiv@quotient^0,0,c
 15457  00326C                     l5201:
 15458  00326C  90D8               	bcf	status,0,c
 15459  00326E  3238               	rrcf	(___lldiv@divisor+3)^0,f,c
 15460  003270  3237               	rrcf	(___lldiv@divisor+2)^0,f,c
 15461  003272  3236               	rrcf	(___lldiv@divisor+1)^0,f,c
 15462  003274  3235               	rrcf	___lldiv@divisor^0,f,c
 15463  003276  2E3D               	decfsz	___lldiv@counter^0,f,c
 15464  003278  EF19  F019         	goto	l5193
 15465  00327C                     l1277:
 15466  00327C  C039  F031         	movff	___lldiv@quotient,?___lldiv
 15467  003280  C03A  F032         	movff	___lldiv@quotient+1,?___lldiv+1
 15468  003284  C03B  F033         	movff	___lldiv@quotient+2,?___lldiv+2
 15469  003288  C03C  F034         	movff	___lldiv@quotient+3,?___lldiv+3
 15470  00328C  0012               	return		;funcret
 15471  00328E                     __end_of___lldiv:
 15472                           	callstack 0
 15473                           
 15474 ;; *************** function _irq *****************
 15475 ;; Defined at:
 15476 ;;		line 58 in file "main.c"
 15477 ;; Parameters:    Size  Location     Type
 15478 ;;		None
 15479 ;; Auto vars:     Size  Location     Type
 15480 ;;		None
 15481 ;; Return value:  Size  Location     Type
 15482 ;;                  1    wreg      void 
 15483 ;; Registers used:
 15484 ;;		wreg, status,2, status,0, cstack
 15485 ;; Tracked objects:
 15486 ;;		On entry : 0/0
 15487 ;;		On exit  : 0/0
 15488 ;;		Unchanged: 0/0
 15489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15490 ;;      Params:         0       0       0       0       0       0       0       0       0
 15491 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15492 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15493 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15494 ;;Total ram usage:        0 bytes
 15495 ;; Hardware stack levels used:    1
 15496 ;; Hardware stack levels required when called:    1
 15497 ;; This function calls:
 15498 ;;		_intt1_1ms
 15499 ;; This function is called by:
 15500 ;;		Interrupt level 2
 15501 ;; This function uses a non-reentrant model
 15502 ;;
 15503                           
 15504                           	psect	intcode
 15505  000008                     __pintcode:
 15506                           	callstack 0
 15507  000008                     _irq:
 15508                           	callstack 25
 15509                           
 15510                           ;incstack = 0
 15511  000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 15512  00000A  ED3B  F01F         	call	int_func,f	;refresh shadow registers
 15513                           
 15514                           	psect	intcode_body
 15515  003E76                     __pintcode_body:
 15516                           	callstack 25
 15517  003E76                     int_func:
 15518                           	callstack 25
 15519  003E76  0006               	pop		; remove dummy address from shadow register refresh
 15520  003E78                     
 15521                           ;main.c: 60:     INTCONbits.GIE = 0;
 15522  003E78  9EF2               	bcf	242,7,c	;volatile
 15523                           
 15524                           ;main.c: 61:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 15525  003E7A  A09E               	btfss	158,0,c	;volatile
 15526  003E7C  EF42  F01F         	goto	i2u160_41
 15527  003E80  EF44  F01F         	goto	i2u160_40
 15528  003E84                     i2u160_41:
 15529  003E84  EF4E  F01F         	goto	i2l3347
 15530  003E88                     i2u160_40:
 15531  003E88  A09D               	btfss	157,0,c	;volatile
 15532  003E8A  EF49  F01F         	goto	i2u161_41
 15533  003E8E  EF4B  F01F         	goto	i2u161_40
 15534  003E92                     i2u161_41:
 15535  003E92  EF4E  F01F         	goto	i2l3347
 15536  003E96                     i2u161_40:
 15537  003E96                     
 15538                           ;main.c: 62:     {;main.c: 63:         PIR1bits.TMR1IF = 0;
 15539  003E96  909E               	bcf	158,0,c	;volatile
 15540  003E98                     
 15541                           ;main.c: 65:         intt1_1ms();
 15542  003E98  ECC7  F01E         	call	_intt1_1ms	;wreg free
 15543  003E9C                     i2l3347:
 15544                           
 15545                           ;main.c: 67:     INTCONbits.GIE = 1;
 15546  003E9C  8EF2               	bsf	242,7,c	;volatile
 15547  003E9E  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 15548  003EA0  0011               	retfie		f
 15549  003EA2                     __end_of_irq:
 15550                           	callstack 0
 15551                           
 15552 ;; *************** function _intt1_1ms *****************
 15553 ;; Defined at:
 15554 ;;		line 5 in file "timer1.c"
 15555 ;; Parameters:    Size  Location     Type
 15556 ;;		None
 15557 ;; Auto vars:     Size  Location     Type
 15558 ;;		None
 15559 ;; Return value:  Size  Location     Type
 15560 ;;                  1    wreg      void 
 15561 ;; Registers used:
 15562 ;;		wreg, status,2, status,0
 15563 ;; Tracked objects:
 15564 ;;		On entry : 0/0
 15565 ;;		On exit  : 0/0
 15566 ;;		Unchanged: 0/0
 15567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15568 ;;      Params:         0       0       0       0       0       0       0       0       0
 15569 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15570 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15571 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15572 ;;Total ram usage:        0 bytes
 15573 ;; Hardware stack levels used:    1
 15574 ;; This function calls:
 15575 ;;		Nothing
 15576 ;; This function is called by:
 15577 ;;		_irq
 15578 ;; This function uses a non-reentrant model
 15579 ;;
 15580                           
 15581                           	psect	text88
 15582  003D8E                     __ptext88:
 15583                           	callstack 0
 15584  003D8E                     _intt1_1ms:
 15585                           	callstack 25
 15586  003D8E                     
 15587                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 15588  003D8E  0EFD               	movlw	253
 15589  003D90  6ECF               	movwf	207,c	;volatile
 15590                           
 15591                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 15592  003D92  0E8F               	movlw	143
 15593  003D94  6ECE               	movwf	206,c	;volatile
 15594  003D96                     
 15595                           ;timer1.c: 10:     if(t1cont)
 15596  003D96  500B               	movf	_t1cont^0,w,c
 15597  003D98  100C               	iorwf	(_t1cont+1)^0,w,c
 15598  003D9A  100D               	iorwf	(_t1cont+2)^0,w,c
 15599  003D9C  100E               	iorwf	(_t1cont+3)^0,w,c
 15600  003D9E  B4D8               	btfsc	status,2,c
 15601  003DA0  EFD4  F01E         	goto	i2u132_41
 15602  003DA4  EFD6  F01E         	goto	i2u132_40
 15603  003DA8                     i2u132_41:
 15604  003DA8  EFDD  F01E         	goto	i2l1061
 15605  003DAC                     i2u132_40:
 15606  003DAC                     
 15607                           ;timer1.c: 11:         --t1cont;
 15608  003DAC  060B               	decf	_t1cont^0,f,c
 15609  003DAE  0E00               	movlw	0
 15610  003DB0  5A0C               	subwfb	(_t1cont+1)^0,f,c
 15611  003DB2  5A0D               	subwfb	(_t1cont+2)^0,f,c
 15612  003DB4  5A0E               	subwfb	(_t1cont+3)^0,f,c
 15613  003DB6  EFDE  F01E         	goto	i2l1063
 15614  003DBA                     i2l1061:
 15615                           
 15616                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 15617  003DBA  90CD               	bcf	205,0,c	;volatile
 15618  003DBC                     i2l1063:
 15619  003DBC  0012               	return		;funcret
 15620  003DBE                     __end_of_intt1_1ms:
 15621                           	callstack 0
 15622                           
 15623                           	psect	text89
 15624  000000                     __ptext89:
 15625                           	callstack 0
 15626  000000                     
 15627                           	psect	rparam
 15628  0000                     
 15629                           	psect	temp
 15630  00005E                     btemp:
 15631                           	callstack 0
 15632  00005E                     	ds	1
 15633  0000                     int$flags	set	btemp
 15634  0000                     wtemp8	set	btemp+1
 15635  0000                     ttemp5	set	btemp+1
 15636  0000                     ttemp6	set	btemp+4
 15637  0000                     ttemp7	set	btemp+8
 15638                           
 15639                           	psect	idloc
 15640                           
 15641                           ;Config register IDLOC0 @ 0x200000
 15642                           ;	unspecified, using default values
 15643  200000                     	org	2097152
 15644  200000  FF                 	db	255
 15645                           
 15646                           ;Config register IDLOC1 @ 0x200001
 15647                           ;	unspecified, using default values
 15648  200001                     	org	2097153
 15649  200001  FF                 	db	255
 15650                           
 15651                           ;Config register IDLOC2 @ 0x200002
 15652                           ;	unspecified, using default values
 15653  200002                     	org	2097154
 15654  200002  FF                 	db	255
 15655                           
 15656                           ;Config register IDLOC3 @ 0x200003
 15657                           ;	unspecified, using default values
 15658  200003                     	org	2097155
 15659  200003  FF                 	db	255
 15660                           
 15661                           ;Config register IDLOC4 @ 0x200004
 15662                           ;	unspecified, using default values
 15663  200004                     	org	2097156
 15664  200004  FF                 	db	255
 15665                           
 15666                           ;Config register IDLOC5 @ 0x200005
 15667                           ;	unspecified, using default values
 15668  200005                     	org	2097157
 15669  200005  FF                 	db	255
 15670                           
 15671                           ;Config register IDLOC6 @ 0x200006
 15672                           ;	unspecified, using default values
 15673  200006                     	org	2097158
 15674  200006  FF                 	db	255
 15675                           
 15676                           ;Config register IDLOC7 @ 0x200007
 15677                           ;	unspecified, using default values
 15678  200007                     	org	2097159
 15679  200007  FF                 	db	255
 15680                           
 15681                           	psect	config
 15682                           
 15683                           ;Config register CONFIG1L @ 0x300000
 15684                           ;	PLL Prescaler Selection bits
 15685                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
 15686                           ;	System Clock Postscaler Selection bits
 15687                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 15688                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 15689                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 15690  300000                     	org	3145728
 15691  300000  04                 	db	4
 15692                           
 15693                           ;Config register CONFIG1H @ 0x300001
 15694                           ;	Oscillator Selection bits
 15695                           ;	FOSC = HS, HS oscillator (HS)
 15696                           ;	Fail-Safe Clock Monitor Enable bit
 15697                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 15698                           ;	Internal/External Oscillator Switchover bit
 15699                           ;	IESO = OFF, Oscillator Switchover mode disabled
 15700  300001                     	org	3145729
 15701  300001  0C                 	db	12
 15702                           
 15703                           ;Config register CONFIG2L @ 0x300002
 15704                           ;	Power-up Timer Enable bit
 15705                           ;	PWRT = ON, PWRT enabled
 15706                           ;	Brown-out Reset Enable bits
 15707                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 15708                           ;	Brown-out Reset Voltage bits
 15709                           ;	BORV = 3, Minimum setting 2.05V
 15710                           ;	USB Voltage Regulator Enable bit
 15711                           ;	VREGEN = OFF, USB voltage regulator disabled
 15712  300002                     	org	3145730
 15713  300002  18                 	db	24
 15714                           
 15715                           ;Config register CONFIG2H @ 0x300003
 15716                           ;	Watchdog Timer Enable bit
 15717                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 15718                           ;	Watchdog Timer Postscale Select bits
 15719                           ;	WDTPS = 32768, 1:32768
 15720  300003                     	org	3145731
 15721  300003  1E                 	db	30
 15722                           
 15723                           ; Padding undefined space
 15724  300004                     	org	3145732
 15725  300004  FF                 	db	255
 15726                           
 15727                           ;Config register CONFIG3H @ 0x300005
 15728                           ;	CCP2 MUX bit
 15729                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 15730                           ;	PORTB A/D Enable bit
 15731                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 15732                           ;	Low-Power Timer 1 Oscillator Enable bit
 15733                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 15734                           ;	MCLR Pin Enable bit
 15735                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
 15736  300005                     	org	3145733
 15737  300005  01                 	db	1
 15738                           
 15739                           ;Config register CONFIG4L @ 0x300006
 15740                           ;	Stack Full/Underflow Reset Enable bit
 15741                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
 15742                           ;	Single-Supply ICSP Enable bit
 15743                           ;	LVP = OFF, Single-Supply ICSP disabled
 15744                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 15745                           ;	ICPRT = OFF, ICPORT disabled
 15746                           ;	Extended Instruction Set Enable bit
 15747                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 15748                           ;	Background Debugger Enable bit
 15749                           ;	DEBUG = 0x1, unprogrammed default
 15750  300006                     	org	3145734
 15751  300006  80                 	db	128
 15752                           
 15753                           ; Padding undefined space
 15754  300007                     	org	3145735
 15755  300007  FF                 	db	255
 15756                           
 15757                           ;Config register CONFIG5L @ 0x300008
 15758                           ;	Code Protection bit
 15759                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 15760                           ;	Code Protection bit
 15761                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 15762                           ;	Code Protection bit
 15763                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 15764                           ;	Code Protection bit
 15765                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 15766  300008                     	org	3145736
 15767  300008  0F                 	db	15
 15768                           
 15769                           ;Config register CONFIG5H @ 0x300009
 15770                           ;	Boot Block Code Protection bit
 15771                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 15772                           ;	Data EEPROM Code Protection bit
 15773                           ;	CPD = OFF, Data EEPROM is not code-protected
 15774  300009                     	org	3145737
 15775  300009  C0                 	db	192
 15776                           
 15777                           ;Config register CONFIG6L @ 0x30000A
 15778                           ;	Write Protection bit
 15779                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 15780                           ;	Write Protection bit
 15781                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 15782                           ;	Write Protection bit
 15783                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 15784                           ;	Write Protection bit
 15785                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 15786  30000A                     	org	3145738
 15787  30000A  0F                 	db	15
 15788                           
 15789                           ;Config register CONFIG6H @ 0x30000B
 15790                           ;	Configuration Register Write Protection bit
 15791                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 15792                           ;	Boot Block Write Protection bit
 15793                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 15794                           ;	Data EEPROM Write Protection bit
 15795                           ;	WRTD = OFF, Data EEPROM is not write-protected
 15796  30000B                     	org	3145739
 15797  30000B  E0                 	db	224
 15798                           
 15799                           ;Config register CONFIG7L @ 0x30000C
 15800                           ;	Table Read Protection bit
 15801                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15802                           ;	Table Read Protection bit
 15803                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15804                           ;	Table Read Protection bit
 15805                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15806                           ;	Table Read Protection bit
 15807                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15808  30000C                     	org	3145740
 15809  30000C  0F                 	db	15
 15810                           
 15811                           ;Config register CONFIG7H @ 0x30000D
 15812                           ;	Boot Block Table Read Protection bit
 15813                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 15814  30000D                     	org	3145741
 15815  30000D  40                 	db	64
 15816                           tosu	equ	0xFFF
 15817                           tosh	equ	0xFFE
 15818                           tosl	equ	0xFFD
 15819                           stkptr	equ	0xFFC
 15820                           pclatu	equ	0xFFB
 15821                           pclath	equ	0xFFA
 15822                           pcl	equ	0xFF9
 15823                           tblptru	equ	0xFF8
 15824                           tblptrh	equ	0xFF7
 15825                           tblptrl	equ	0xFF6
 15826                           tablat	equ	0xFF5
 15827                           prodh	equ	0xFF4
 15828                           prodl	equ	0xFF3
 15829                           indf0	equ	0xFEF
 15830                           postinc0	equ	0xFEE
 15831                           postdec0	equ	0xFED
 15832                           preinc0	equ	0xFEC
 15833                           plusw0	equ	0xFEB
 15834                           fsr0h	equ	0xFEA
 15835                           fsr0l	equ	0xFE9
 15836                           wreg	equ	0xFE8
 15837                           indf1	equ	0xFE7
 15838                           postinc1	equ	0xFE6
 15839                           postdec1	equ	0xFE5
 15840                           preinc1	equ	0xFE4
 15841                           plusw1	equ	0xFE3
 15842                           fsr1h	equ	0xFE2
 15843                           fsr1l	equ	0xFE1
 15844                           bsr	equ	0xFE0
 15845                           indf2	equ	0xFDF
 15846                           postinc2	equ	0xFDE
 15847                           postdec2	equ	0xFDD
 15848                           preinc2	equ	0xFDC
 15849                           plusw2	equ	0xFDB
 15850                           fsr2h	equ	0xFDA
 15851                           fsr2l	equ	0xFD9
 15852                           status	equ	0xFD8

Data Sizes:
    Strings     1056
    Constant    0
    Data        145
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      93
    BANK0           160     93     151
    BANK1           256      0     106
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    S174$3$0	PTR unsigned char  size(2) Largest target is 0

    S576$2$0	PTR unsigned char  size(2) Largest target is 0

    S1543$7$1	PTR const unsigned char  size(2) Largest target is 0

    S1543$7$0	PTR const unsigned char  size(2) Largest target is 0

    S576$1$0	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_53(CODE[14]), STR_52(CODE[40]), Wifi_cipsend@vtr(COMRAM[10]), Wifi_cipsend@str(COMRAM[20]), 
		 -> STR_51(CODE[15]), STR_50(CODE[14]), STR_49(CODE[17]), STR_48(CODE[15]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[18]), STR_44(CODE[11]), 
		 -> STR_43(CODE[11]), Wifi_connect@str(COMRAM[30]), STR_42(CODE[41]), STR_41(CODE[14]), 
		 -> STR_40(CODE[36]), STR_39(CODE[14]), STR_38(CODE[15]), STR_37(CODE[14]), 
		 -> STR_36(CODE[17]), STR_35(CODE[14]), 

    S576$9$1	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    S576$9$0	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    S174$0$1	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S174$1$1	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    S504$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_29(CODE[78]), STR_28(CODE[62]), STR_17(CODE[81]), STR_6(CODE[83]), 

    S504$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_34(CODE[21]), STR_33(CODE[21]), STR_32(CODE[21]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_27(CODE[21]), STR_26(CODE[21]), STR_25(CODE[21]), 
		 -> STR_24(CODE[21]), STR_23(CODE[21]), STR_22(CODE[8]), STR_21(CODE[21]), 
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[21]), STR_16(CODE[21]), 
		 -> STR_15(CODE[21]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[21]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_5(CODE[21]), STR_4(CODE[2]), STR_3(CODE[2]), 

    S576$4$1	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    S576$4$0	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_1(CODE[4]), 

    Wifi_cipsend@msg	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    Wifi_cipsend@tam	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    Wifi_connect@pass	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    aux	PTR unsigned char [10] size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    Wifi_connect@ssid	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_1(CODE[4]), 

    wifi_send@msg	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_53(CODE[14]), STR_52(CODE[40]), Wifi_cipsend@vtr(COMRAM[10]), Wifi_cipsend@str(COMRAM[20]), 
		 -> STR_51(CODE[15]), STR_50(CODE[14]), STR_49(CODE[17]), STR_48(CODE[15]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[18]), STR_44(CODE[11]), 
		 -> STR_43(CODE[11]), Wifi_connect@str(COMRAM[30]), STR_42(CODE[41]), STR_41(CODE[14]), 
		 -> STR_40(CODE[36]), STR_39(CODE[14]), STR_38(CODE[15]), STR_37(CODE[14]), 
		 -> STR_36(CODE[17]), STR_35(CODE[14]), 

    S1543eusartT$search_string	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)int  size(2) Largest target is 2
		 -> search(), 

    eusart.search_string	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)int  size(2) Largest target is 2
		 -> search(), 

    S1543eusartT$init	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> initEUSART(), 

    eusart.init	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> initEUSART(), 

    S1543eusartT$txSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> txStatusEUSART(), 

    eusart.txSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> txStatusEUSART(), 

    S1543eusartT$tx	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> txEUSART(), 

    eusart.tx	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> txEUSART(), 

    S1543eusartT$rxResetERROR	PTR FTN()void  size(2) Largest target is 1
		 -> rxResetErrorEUSART(), 

    eusart.rxResetERROR	PTR FTN()void  size(2) Largest target is 1
		 -> rxResetErrorEUSART(), 

    S1543eusartT$rxERROR	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxErrorEUSART(), 

    eusart.rxERROR	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxErrorEUSART(), 

    S1543eusartT$rxSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxStatusEUSART(), 

    eusart.rxSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxStatusEUSART(), 

    S1543eusartT$rx	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxEUSART(), 

    eusart.rx	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxEUSART(), 

    initSerialIO@ptrOut	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK0[1]), 

    main@ptr_940	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr_915	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@pt	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr	PTR unsigned char  size(2) Largest target is 20
		 -> main@lema(BANK0[20]), 

    S576$cipsend	PTR FTN(PTR unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_cipsend(), 

    wifi.cipsend	PTR FTN(PTR unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_cipsend(), 

    S576$config_servidor	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_config_servidor(), 

    wifi.config_servidor	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_config_servidor(), 

    S576$scan	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_scan(), 

    wifi.scan	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_scan(), 

    S576$autoconnect	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_autoconnect(), 

    wifi.autoconnect	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_autoconnect(), 

    S576$ip	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_ip(), 

    wifi.ip	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_ip(), 

    S576$connect	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_connect(), 

    wifi.connect	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_connect(), 

    S576$mode	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_mode(), 

    wifi.mode	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_mode(), 

    S576$receive	PTR FTN(PTR unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> wifi_receive(), 

    wifi.receive	PTR FTN(PTR unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> wifi_receive(), 

    S576$send	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> wifi_send(), 

    wifi.send	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> wifi_send(), 

    S576$init	PTR FTN(long ,)void  size(2) Largest target is 1
		 -> wifi_init(), 

    wifi.init	PTR FTN(long ,)void  size(2) Largest target is 1
		 -> wifi_init(), 

    S504$clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    S504$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    S504$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    S504$print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    S504$init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    dignum_apagar@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    decodifica@d	PTR unsigned char  size(2) Largest target is 18
		 -> main@vetor_aux(BANK0[16]), main@auxPasso(BANK0[1]), printExec@passo(COMRAM[1]), fifo_print@comando(COMRAM[1]), 
		 -> fila(COMRAM[18]), 

    codifica@dado	PTR unsigned char  size(2) Largest target is 2047
		 -> fifo_add_control@c(COMRAM[1]), fifo_add_tempo@t(COMRAM[1]), fifo_add@passo(COMRAM[1]), RAM(DATA[2047]), 

    sp__fifo_adrs	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    salva_atuadores_init@pt	PTR unsigned char  size(2) Largest target is 4
		 -> salva_atuadores_init@condi_init(COMRAM[4]), 

    buscar_dado@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@init_cond(BANK0[1]), 

    buscar_receita@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    salvar_receita@data	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S174$formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    S174$livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    S174$deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    S174$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    S174$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_29(CODE[78]), STR_28(CODE[62]), STR_17(CODE[81]), STR_6(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_34(CODE[21]), STR_33(CODE[21]), STR_32(CODE[21]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_27(CODE[21]), STR_26(CODE[21]), STR_25(CODE[21]), 
		 -> STR_24(CODE[21]), STR_23(CODE[21]), STR_22(CODE[8]), STR_21(CODE[21]), 
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[21]), STR_16(CODE[21]), 
		 -> STR_15(CODE[21]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[21]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_5(CODE[21]), STR_4(CODE[2]), STR_3(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    set_passo@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 


Critical Paths under _main in COMRAM

    _main->_Wifi_connect
    _wifi_init->_initEUSART
    _initEUSART->___lldiv
    _teclado_borda->_teclado_scan
    _setT1->___wmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _manipula_atuadores_init->_alt_atuador
    _formatar_receitas->_EEPROM_write
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    _deletar_receita->_end_receita
    _buscar_receita->___awmod
    _buscar_dado->___awmod
    ___aldiv->___lmul
    _Wifi_mode->_delay
    _Wifi_mode->_wifi_send
    _Wifi_connect->_wifi_send
    _Wifi_cipsend->_wifi_send
    _wifi_send->_txEUSART
    _MCP4725->___aldiv
    _dac_write->_delay
    _dac_init->_delay
    _I2C_init->___lldiv

Critical Paths under _irq in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _irq in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _irq in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _irq in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _irq in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                96    96      0   86153
                                             40 COMRAM     2     2      0
                                              0 BANK0     93    93      0
                           _I2C_init
                            _MCP4725
                       _Wifi_cipsend *
                       _Wifi_connect *
                          _Wifi_mode *
                            ___aldiv
                            ___awmod
                             ___lmul
                             ___wmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                        _buscar_dado
                     _buscar_receita *
                         _decodifica
                              _delay
                    _deletar_receita *
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                  _formatar_receitas *
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
            _manipula_atuadores_init
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
                          _wifi_init *
 ---------------------------------------------------------------------------------
 (1) _wifi_init                                            4     0      4     616
                                             21 COMRAM     4     0      4
                         _initEUSART *
 ---------------------------------------------------------------------------------
 (2) _initEUSART                                           8     4      4     541
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        2     2      0     296
                                              5 COMRAM     2     2      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         5     5      0     204
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     478
                                              6 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         4     4      0     205
                                              3 COMRAM     4     4      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    3     3      0     114
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       6     4      2    1089
                                              6 COMRAM     6     4      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          5     3      2    1219
                                              6 COMRAM     5     3      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     235
                                              3 COMRAM     8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                            5     4      1   12960
                                             25 COMRAM     5     4      1
                         _decodifica
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         14    10      4    7167
                                             11 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _manipula_atuadores_init                              3     3      0     136
                                              3 COMRAM     3     3      0
                        _alt_atuador
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         5     0      5     294
                                              0 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _formatar_receitas                                    1     1      0     372
                                              2 COMRAM     1     1      0
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                           9     9      0    7013
                                              8 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                         _decodifica
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 7     7      0       0
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          2     2      0    4395
                                             15 COMRAM     2     2      0
                        _alt_atuador
                           _codifica
                         _decodifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _decodifica                                           4     2      2    1426
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     1     1      0    3013
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       2     0      2     120
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    4     4      0    2357
                                             11 COMRAM     4     4      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           3     1      2    2041
                                              8 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _codifica                                             5     3      2     590
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          4     2      2    1733
                                              7 COMRAM     4     2      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0    2023
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     176
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              5     2      3    4971
                                              7 COMRAM     5     2      3
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1386
                                              2 COMRAM     5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      2     2      0     176
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          5     3      2     757
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        2     0      2     540
                                              7 COMRAM     2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _deletar_receita                                      4     4      0     939
                                              4 COMRAM     4     4      0
                       _EEPROM_write
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     348
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _buscar_receita                                       6     4      2     763
                                              6 COMRAM     6     4      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _buscar_dado                                          6     3      3     893
                                              6 COMRAM     6     3      3
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     478
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wifi_mode                                            1     1      0    3629
                                              3 COMRAM     1     1      0
                              _delay
                          _wifi_send
 ---------------------------------------------------------------------------------
 (1) _Wifi_connect                                        37    33      4    2382
                                              3 COMRAM    37    33      4
                          _wifi_send
 ---------------------------------------------------------------------------------
 (1) _Wifi_cipsend                                        36    32      4    2338
                                              3 COMRAM    36    32      4
                          _wifi_send *
 ---------------------------------------------------------------------------------
 (2) _wifi_send                                            2     0      2    1716
                                              1 COMRAM     2     0      2
                           _txEUSART *
                     _txStatusEUSART *
 ---------------------------------------------------------------------------------
 (3) _txStatusEUSART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _txEUSART                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MCP4725                                              2     0      2    6031
                                             26 COMRAM     2     0      2
                           _I2C_stop
                            ___aldiv (ARG)
                             ___lmul (ARG)
                           _dac_init
                          _dac_write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_write                                            5     3      2    2141
                                              3 COMRAM     5     3      2
                    _I2C_ack_receive
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_init                                             0     0      0    1869
                    _I2C_ack_receive
                          _I2C_start
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     1      2    1847
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _I2C_tx                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ack_receive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             4     0      4     564
                                             13 COMRAM     4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  0     0      0       0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     ___lldiv
   _MCP4725
     _I2C_stop
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
     _dac_init (ARG)
       _I2C_ack_receive
       _I2C_start
       _I2C_tx
       _delay
     _dac_write (ARG)
       _I2C_ack_receive
       _I2C_tx
       _delay
     _delay (ARG)
   _Wifi_cipsend *
     _wifi_send *
       _txEUSART *
       _txStatusEUSART *
   _Wifi_connect *
     _wifi_send
       _txEUSART *
       _txStatusEUSART *
   _Wifi_mode *
     _delay
     _wifi_send
       _txEUSART *
       _txStatusEUSART *
   ___aldiv *
     ___lmul (ARG)
   ___awmod *
   ___lmul *
   ___wmul *
   _addContCiclos *
   _addIndicePassos *
   _alt_atuador *
   _buscar_dado *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _buscar_receita *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _decodifica *
   _delay *
   _deletar_receita *
     _EEPROM_write
     _end_receita
   _dignum_apagar *
     ___lwdiv
   _dignum_conc *
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _codifica
     _decodifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _decodifica
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _formatar_receitas *
     _EEPROM_write
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _manipula_atuadores_init *
     _alt_atuador
   _printExec *
     _decodifica
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___wmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *
   _wifi_init *
     _initEUSART *
       ___lldiv

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      6A       7       41.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5D      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      5D       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      20        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Nov 29 14:48:49 2021

              ??_fifo_add_control 0040                     dac_write@code 0034  
                ??_fifo_add_tempo 0040     __size_of_fifo_indicePrint_dec 0014  
   __size_of_fifo_indicePrint_inc 005E                                 _d 001D  
                     fp__txEUSART 0000                       _SSPSTATbits 000FC7  
                              l13 3C0A                                l16 3B46  
                              l40 2CAC                                l19 3F56  
                              l35 2E76                                l54 3E62  
                              l57 3E74                                l82 3A26  
                              l90 3714                                l93 3D5C  
                              l79 2BC4                                l99 3AB6  
                    ___awdiv@sign 0036           __end_of_dispLCD_dataReg 3A28  
             ___wmul@multiplicand 0033                      printExec@col 004D  
                    printExec@ind 004A                    salvar_dado@col 0037  
                  salvar_dado@aux 0039                __size_of_I2C_start 0014  
                             l114 2440                               l116 24AE  
                             l301 40D0                               l230 4100  
                             l223 3FD0                               l119 40E2  
                             l127 37D0                               l152 409E  
                             l161 3F12                               l233 40F6  
                             l242 40B2                               l171 3BCC  
                             l155 3E34                               l307 345E  
                             l251 3294                               l420 3AFE  
                             l404 20D4                               l236 3F74  
                             l252 332C                               l245 40FC  
                             l157 3E42                               l261 3334  
                             l158 3E46                               l182 3CF0  
                             l326 2602                               l254 32AA  
                             l174 3F34                               l166 3B8A  
                             l423 3E18                               l263 334A  
                             l239 40C6                               l255 32C0  
                             l440 2D94                               l264 3360  
                             l344 2890                               l256 32D6  
                             l177 3EC8                               l361 40DA  
                             l265 3376                               l417 21AA  
                             l354 38DA                               l266 33C6  
                             l370 4104                               l443 406E  
                             l451 2334                               l436 2D54  
                             l364 4108                               l429 3C46  
                             l349 3932                               l381 400E  
                             l269 40BC                               l621 1A8E  
                             l438 2D8A                               l358 3A6E  
                             l278 3566                               l367 3FBA  
                             l287 39D8                               l295 4080  
                             l377 3772                               l393 219A  
                             l706 08FC                               l459 2334  
                             l726 0A76                               l664 051E  
                             l825 14B4                               l930 3826  
                             l922 40F0                               l818 138E  
                             l931 382A                               l940 3DEA  
                             l829 14BE                               l926 37E0  
                             l846 16D2                               l927 37FC  
                             l791 0FC2                               l960 4026  
                             l928 37FE                               l937 3882  
                             l962 4034                               l963 4036  
                             l787 0F78                               l957 3C80  
                             l981 403A                               l869 1A2C  
                             l894 1DCA                               l983 4048  
                             l975 3FD8                               l984 404A  
                             l978 3FE6                               l996 4082  
                             l999 4090                               _IHM 00E1  
              deletar_receita@aux 0035                               _aux 0156  
                             _irq 0008           __size_of_buscar_receita 0042  
               fp__buscar_receita 0000           __end_of_dispLCD_instReg 2BC6  
                    ___awmod@sign 0036                               tosl 000FFD  
                             wreg 000FE8                   __end_of_MCP4725 3F58  
                 salvar_dado@data 0038                   salvar_dado@adrs 003B  
                alt_atuador@tecla 0033                      ?_buscar_dado 0037  
                            l1030 3D26                              l1014 40A8  
                            l1024 3142                              l1133 40EA  
                            l1029 3D20                              l1206 309A  
                            l1136 4022                              l1072 405C  
                            l1250 3EEE                              l1066 3F8E  
                            l1219 29C8                              l1139 3648  
                            l1261 36A2                              l1069 3FFA  
                            l1262 36B2                              l1247 2750  
                            l1329 2AD4                              l1179 3D8C  
                            l1284 328C                              l1188 31E8  
                            l1277 327C                              l1481 2F3A  
                            l1741 35D2                              l5101 2F1A  
                            l1494 2FEA                              l5111 3E48  
                            l5031 2B16                              l5023 2AD8  
                            l5103 2F2A                              l5201 326C  
                            l5113 3E4C                              l5121 39DC  
                            l5041 2B48                              l5033 2B28  
                            l5025 2ADA                              l5105 2F32  
                            l6001 201E                              l5203 3276  
                            l5115 3E5C                              l5131 3A02  
                            l5123 39DE                              l5051 2B6E  
                            l5043 2B60                              l5035 2B30  
                            l5027 2AF2                              l5211 2F56  
                            l6003 2020                              l6011 204E  
                            l1748 35DA                              l5109 4024  
                            l5117 3FD4                              l5301 4094  
                            l5133 3A04                              l5125 39F6  
                            l5061 2BBA                              l5053 2B84  
                            l5045 2B62                              l5037 2B32  
                            l5029 2B04                              l5141 36BE  
                            l5221 2F8A                              l5213 2F5A  
                            l5205 2F3C                              l6021 2098  
                            l6013 205E                              l6005 2036  
                            l6101 2286                              l5119 4082  
                            l5303 4098                              l5311 3E1C  
                            l5135 3A1A                              l5127 39F8  
                            l5063 2BC2                              l5055 2B86  
                            l5047 2B6A                              l5039 2B46  
                            l5143 36C6                              l5151 3708  
                            l5071 2E92                              l5231 2FC4  
                            l5223 2F92                              l5215 2F68  
                            l5207 2F40                              l6031 20D4  
                            l6015 2078                              l6007 2046  
                            l6111 22C4                              l6103 2296  
                            l5241 3BCE                              l5305 409A  
                            l5321 3E2A                              l5313 3E1E  
                            l5137 3A24                              l5129 3A00  
                            l5057 2B96                              l5049 2B6C  
                            l5145 36CE                              l5401 24B6  
                            l5081 2EB8                              l5073 2E96  
                            l5065 2E78                              l5225 2FA0  
                            l5233 2FCA                              l5217 2F70  
                            l5209 2F4E                              l6041 2100  
                            l6033 20DC                              l6017 207A  
                            l6009 204C                              l6025 20A4  
                            l5161 4072                              l6121 2302  
                            l6113 22D2                              l6105 22A6  
                            l6201 3830                              l7001 13D0  
                            l5251 3BFA                              l5243 3BD2  
                            l5307 409C                              l5323 3E2E  
                            l5315 3E22                              l5059 2BA8  
                            l5139 36B6                              l5411 250E  
                            l5403 24CE                              l5091 2EEE  
                            l5083 2ECA                              l5075 2EA4  
                            l5067 2E7C                              l5171 3C32  
                            l5235 2FDA                              l5227 2FB6  
                            l5219 2F82                              l6051 2176  
                            l6035 20DE                              l6027 20B4  
                            l6019 2090                              l6123 230E  
                            l6115 22DE                              l6107 22B2  
                            l5331 3290                              l6211 387E  
                            l6203 3834                              l6131 3F78  
                            l7003 13FC                              l5253 3BFE  
                            l5245 3BDE                              l5261 3B2E  
                            l6301 269A                              l5325 3E32  
                            l5317 3E26                              l5149 36D6  
                            l5421 255E                              l5413 251E  
                            l5405 24DE                              l5093 2F04  
                            l5085 2ED2                              l5077 2EAC  
                            l5069 2E8A                              l5173 3C44  
                            l5165 3C0C                              l5237 2FE2  
                            l5229 2FBE                              l6053 2182  
                            l6037 20EC                              l6029 20C4  
                            l5157 40FE                              l6125 232A  
                            l6117 22E6                              l6109 22BC  
                            l5341 32EC                              l6205 383C  
                            l6141 3F8C                              l6133 3F7C  
                            l6221 3D5E                              l7101 1820  
                            l7021 1494                              l7013 145E  
                            l7005 142C                              l5191 3224  
                            l5183 31EA                              l6151 3C7E  
                            l6143 3C48                              l5247 3BE4  
                            l5263 3B36                              l5255 3B00  
                            l6311 26E6                              l6303 269C  
                            l6231 304C                              l6223 2FEE  
                            l5327 3EF0                              l5319 3E28  
                            l6071 3DEC                              l5415 252E  
                            l5407 24EE                              l5095 2F0C  
                            l5087 2EDA                              l5079 2EB0  
                            l5167 3C14                              l6055 2186  
                            l6039 20F8                              l6047 210A  
                            l6063 219A                              l5271 235C  
                            l6119 22F0                              l6207 386A  
                            l5511 30D4                              l5503 309C  
                            l6127 40A0                              l6135 3F86  
                            l7103 184C                              l7031 14CA  
                            l7023 14AC                              l7015 1466  
                            l7007 1436                              l5193 3232  
                            l5185 31FA                              l6145 3C4C  
                            l5265 4038                              l5249 3BE8  
                            l5257 3B1E                              l5177 40E6  
                            l6321 2716                              l6313 26EA  
                            l6305 26AE                              l6241 2896  
                            l6233 3058                              l6225 2FFE  
                            l5425 256E                              l5417 253E  
                            l5409 24FE                              l5097 2F0E  
                            l5089 2EE8                              l5169 3C30  
                            l5441 2CB2                              l6057 218E  
                            l6049 2164                              l6161 3DD6  
                            l6153 3DBE                              l5281 23A4  
                            l5273 2364                              l6081 21F0  
                            l6073 21AE                              l6209 386C  
                            l5601 2D98                              l5521 3128  
                            l5505 30A4                              l6137 3F88  
                            l6129 3F76                              l7201 1C10  
                            l7121 1882                              l7105 1858  
                            l7113 1866                              l7041 1542  
                            l7017 1476                              l7009 143C  
                            l8001 0B86                              l5195 323C  
                            l5187 3210                              l6147 3C54  
                            l5259 3B22                              l5179 4010  
                            l6323 2728                              l6315 26EC  
                            l6307 26BE                              l6251 28E8  
                            l6243 28AC                              l6235 3070  
                            l6227 302E                              l6331 365A  
                            l5419 254E                              l5099 2F14  
                            l5451 2CEA                              l5443 2CB6  
                            l5355 3330                              l5371 2786  
                            l6059 2190                              l6171 3DE0  
                            l6163 3DD8                              l6155 3DC0  
                            l5283 23A6                              l5291 23E8  
                            l5275 236E                              l5267 2338  
                            l6091 2238                              l6083 21F2  
                            l6075 21B6                              l5611 2DDC  
                            l5603 2D9C                              l5523 312A  
                            l6139 3F8A                              l7211 1C5C  
                            l7203 1C22                              l7115 186A  
                            l8011 1666                              l7051 1610  
                            l7043 156E                              l7019 1486  
                            l8003 0EDA                              l5197 325A  
                            l5189 3218                              l6149 3C7C  
                            l6325 2738                              l6317 2704  
                            l6309 26CE                              l6261 291E  
                            l6253 28F8                              l6245 28C6  
                            l6237 3082                              l6229 3040  
                            l6341 29CE                              l6333 3668  
                            l6069 3ABA                              l5701 3A94  
                            l5429 25D0                              l5461 2D40  
                            l5453 2CFA                              l5381 27D6  
                            l5373 2796                              l5365 2752  
                            l6173 3DE2                              l6165 3DDA  
                            l6157 3DD0                              l5293 241A  
                            l5285 23C2                              l5277 2376  
                            l5269 234C                              l6093 2244  
                            l6085 220E                              l6077 21C6  
                            l8021 3306                              l5349 32F2  
                            l6181 3FE8                              l5613 2DEC  
                            l5605 2DAC                              l5621 2E1C  
                            l5525 313A                              l5517 30D8  
                            l5509 30B8                              l5541 3638  
                            l5533 35DC                              l7221 1CE2  
                            l7213 1C68                              l7205 1C32  
                            l7141 1948                              l7133 18D6  
                            l7125 1896                              l7109 1860  
                            l8013 1772                              l7053 1636  
                            l7045 15CA                              l7029 14C2  
                            l7037 14DA                              l8005 1032  
                            l6421 006A                              l6413 0012  
                            l5199 326A                              l6327 2744  
                            l6319 2714                              l6271 2976  
                            l6263 293A                              l6255 28FA  
                            l6247 28CA                              l6239 2892  
                            l6351 2A0E                              l6343 29DC  
                            l6335 3678                              l5703 3A98  
                            l5711 3778                              l8031 258A  
                            l5463 2D50                              l5455 2D0A  
                            l5447 2CCA                              l5439 2CAE  
                            l5359 338C                              l5383 27E6  
                            l5375 27A6                              l6175 3DE4  
                            l6167 3DDC                              l6159 3DD4  
                            l8023 2C66                              l5295 242A  
                            l5287 23E0                              l5279 237E  
                            l6095 225E                              l6079 21D6  
                            l6087 2218                              l5615 2DFC  
                            l5607 2DBC                              l6183 404C  
                            l5519 3104                              l6191 3D0C  
                            l5551 3642                              l5543 363A  
                            l5535 35E2                              l7231 1D5A  
                            l7223 1CE6                              l7215 1CB8  
                            l7207 1C3A                              l8015 1AA4  
                            l7151 19CC                              l7143 1952  
                            l7127 18C2                              l7119 187E  
                            l7071 16C6                              l7055 1642  
                            l7063 1652                              l7047 15D4  
                            l7039 1524                              l8007 1312  
                            l6511 025E                              l6503 0212  
                            l6431 00D6                              l6423 0076  
                            l6415 0016                              l5561 3176  
                            l6281 29BC                              l6273 2986  
                            l6265 2954                              l6257 290C  
                            l6249 28CC                              l6361 2A4C  
                            l6353 2A12                              l6345 29EC  
                            l6337 3682                              l6329 364A  
                            l5705 3A9A                              l5713 3786  
                            l5721 37B2                              l8033 25E4  
                            l5473 2D8E                              l5465 2D66  
                            l5457 2D1A                              l5449 2CDA  
                            l5385 27F6                              l5377 27B6  
                            l5393 2826                              l5369 276E  
                            l8025 211E                              l6177 3DE6  
                            l6169 3DDE                              l5801 40B4  
                            l5641 2BEC                              l5297 243A  
                            l5289 23E6                              l5481 406C  
                            l6097 2260                              l6089 2228  
                            l5617 2E0C                              l5609 2DCC  
                            l5529 3140                              l6193 3D1C  
                            l6185 3CF2                              l5553 3644  
                            l5545 363C                              l5537 3634  
                            l8017 1E76                              l7233 1D6A  
                            l7225 1D0E                              l7217 1CC2  
                            l7209 1C4A                              l7161 1A0C  
                            l7153 19D6                              l7129 18CE  
                            l7137 18DC                              l7073 16D2  
                            l7065 167C                              l7057 164A  
                            l7049 15E2                              l8009 14EE  
                            l6601 05EE                              l6521 0292  
                            l6513 026A                              l6505 021A  
                            l6441 00EA                              l6433 00DA  
                            l6425 0096                              l6417 001A  
                            l5563 31B4                              l6291 2654  
                            l6283 2604                              l6275 2988  
                            l6267 2958                              l6259 291C  
                            l6371 2A94                              l6363 2A5A  
                            l6355 2A22                              l6347 29F0  
                            l6339 29CA                              l8035 36EA  
                            l5707 40DC                              l5715 3798  
                            l5467 2D76                              l5459 2D30  
                            l8027 2842                              l5387 2806  
                            l5379 27C6                              l6179 3DE8  
                            l5635 2BDC                              l5627 2BC8  
                            l5299 2494                              l6099 227C  
                            l5811 3512                              l5803 34EA  
                            l5731 3B60                              l5723 3B4A  
                            l5491 37F6                              l8019 2E30  
                            l6195 3D24                              l6187 3CF6  
                            l5555 3646                              l5547 363E  
                            l5539 3636                              l7251 1DF4  
                            l7243 1DB4                              l7235 1D74  
                            l7219 1CD2                              l7227 1D18  
                            l7171 1A54                              l7163 1A24  
                            l7155 19DE                              l7147 1970  
                            l7139 1934                              l7091 17F4  
                            l7075 16F2                              l7067 169A  
                            l6611 061A                              l6603 05F4  
                            l6531 02E8                              l6515 0274  
                            l6523 0298                              l6507 0246  
                            l6451 0116                              l6443 0102  
                            l6435 00DE                              l6427 00A2  
                            l6419 003E                              l5565 31B8  
                            l5557 3144                              l6293 266C  
                            l6285 260C                              l6277 299A  
                            l6269 295A                              l6373 2A9E  
                            l6365 2A64                              l6357 2A38  
                            l6349 29FE                              l5581 3592  
                            l5573 3568                              l5717 37A2  
                            l5709 3774                              l5901 3A58  
                            l8029 33A0                              l5389 2816  
                            l5653 2C0C                              l5629 2BCC  
                            l5477 4060                              l5821 3546  
                            l5813 351A                              l5805 34FA  
                            l5733 3B78                              l5725 3B5C  
                            l5493 380C                              l5485 40EC  
                            l6189 3CFC                              l5549 3640  
                            l7261 1E4E                              l7253 1DF8  
                            l7245 1DC6                              l7229 1D24  
                            l7181 1A78                              l7173 1A66  
                            l7157 19EE                              l7165 1A30  
                            l7149 199C                              l7077 1732  
                            l7085 175E                              l7069 16C0  
                            l6701 0840                              l6621 0660  
                            l6613 0624                              l6605 05F8  
                            l6541 033A                              l6533 02F2  
                            l6525 02B0                              l6517 0282  
                            l6509 0258                              l6461 013E  
                            l6453 011E                              l6445 0106  
                            l6437 00E2                              l6429 00D0  
                            l5559 3148                              l6295 2670  
                            l6287 261E                              l6279 29AA  
                            l6367 2A82                              l6359 2A40  
                            l6375 2AA4                              l5591 35C6  
                            l5583 35A0                              l5575 3570  
                            l5567 3ECA                              l5719 37AE  
                            l5399 24B2                              l5903 3A5A  
                            l5911 4106                              l5671 2C3C  
                            l5647 2BFC                              l5479 4060  
                            l5823 354C                              l5815 3522  
                            l5807 3502                              l5751 3F16  
                            l5735 3B7A                              l5495 3810  
                            l5487 37D4                              l6199 382C  
                            l7255 1E02                              l7247 1DD2  
                            l7239 1D92                              l7183 1A84  
                            l7175 1A6E                              l7167 1A42  
                            l7159 19FE                              l7095 1808  
                            l7087 17D0                              l7079 173C  
                            l6711 0888                              l6631 06A2  
                            l6623 066A                              l6615 0628  
                            l6607 05FE                              l6551 037C  
                            l6543 0354                              l6535 02F6  
                            l6527 02C4                              l6519 0286  
                            l7191 1BDA                              l6471 018E  
                            l6463 0142                              l6455 0126  
                            l6447 010A                              l6439 00E6  
                            l6297 2672                              l6289 262A  
                            l6377 2AB4                              l6369 2A92  
                            l5753 3EA4                              l5745 3BA4  
                            l5737 3B8E                              l5593 35CC  
                            l5585 35A6                              l5577 3582  
                            l5569 3EE6                              l5905 3A6A  
                            l5665 2C2C                              l5841 39BC  
                            l5833 398C                              l5825 3550  
                            l5817 3526                              l5809 350A  
                            l5489 37E2                              l5497 3816  
                            l7257 1E12                              l7265 1E56  
                            l7193 1BE2                              l7169 1A4E  
                            l7097 180C                              l7089 17EE  
                            l6801 0CC8                              l6721 08F0  
                            l6705 0846                              l6641 0724  
                            l6625 0684                              l6617 063A  
                            l6609 0616                              l6561 03DA  
                            l6553 0384                              l6545 035E  
                            l6537 031C                              l6529 02CE  
                            l6481 01A0                              l6457 012A  
                            l6449 010E                              ?_irq 0031  
                            l5595 3F36                              l6299 268A  
                            l6379 2AC4                              l5755 3EB6  
                            l5747 3BBA                              l5739 3BA0  
                            l5587 35BC                              l5579 358A  
                            l5691 3D28                              l5907 40D2  
                            l5915 3FA6                              l5931 376E  
                            l5923 3716                              l5771 3F90  
                            l5659 2C1C                              l5843 39C2  
                            l5835 3994                              l5819 352E  
                            l5827 3554                              l5499 3828  
                            l7259 1E38                              l7195 1BEA  
                            l6811 0D06                              l6803 0CCE  
                            l6731 096C                              l6723 08FC  
                            l6715 08A6                              l6707 086A  
                            l6643 0730                              l6651 0740  
                            l6627 068E                              l6619 064C  
                            l6571 045E                              l6563 03E2  
                            l6547 036A                              l6539 0330  
                            l6491 01CC                              l6475 0196  
                            l6467 0156                              l5597 3F46  
                            l5781 3FCE                              l5749 3BBC  
                            l5765 3CD2                              l5757 3CBC  
                            l5589 35C4                              l5693 3D38  
                            l5909 40D6                              l5861 3406  
                            l5853 33C8                              l5933 3FFC  
                            l5925 3726                              l5941 1ED8  
                            l5677 2C4C                              l5685 2C52  
                            l5845 39C4                              l5829 3564  
                            l7197 1BF4                              l7269 1E60  
                            l6901 0FDC                              l6821 0D44  
                            l6813 0D0C                              l6805 0CD8  
                            l6741 09E0                              l6733 0984  
                            l6725 0920                              l6717 08C4  
                            l6709 087E                              l6653 076A  
                            l6645 0738                              l6629 069A  
                            l6637 06AA                              l6581 04C0  
                            l6573 0464                              l6565 040A  
                            l6549 0374                              l6557 038E  
                            l6493 01F8                              l6485 01B4  
                            l6469 0182                              l7189 1A8E  
                            l5599 3F4A                              l5767 3CDE  
                            l5759 3CCE                              l5695 3A72  
                            l5871 38FE                              l5863 344A  
                            l5855 33D8                              l5935 400C  
                            l5927 3760                              l5951 1F0E  
                            l5943 1EE2                              l5919 4102  
                            l5775 3F94                              l5791 3F6C  
                            l5839 39A8                              l5847 39C8  
                            l5783 40F2                              l7199 1C00  
                            l6831 0D82                              l6823 0D4A  
                            l6815 0D16                              l6807 0CEE  
                            l6751 0A66                              l6743 09FA  
                            l6735 09B6                              l6727 0928  
                            l6719 08EA                              l6671 07D0  
                            l6663 07A6                              l6655 0788  
                            l6639 06DC                              l6583 04D8  
                            l6575 0470                              l6567 0414  
                            l6559 03C8                              l6495 0204  
                            l6487 01B8                              l6479 019C  
                            l5769 3CE0                              l5697 3A76  
                            l5873 390C                              l5881 3886  
                            l5849 40C8                              l5857 33E8  
                            l5865 345A                              l5929 3766  
                            l5961 1F3C                              l5953 1F10  
                            l5945 1EF2                              l5937 1EC8  
                            l5777 3F9E                              l5785 3F58  
                            l6913 1004                              l6905 0FE4  
                            l6921 101E                              l6841 0DD2  
                            l6833 0D88                              l6825 0D54  
                            l6817 0D2C                              l6809 0CFC  
                            l6761 0B14                              l6753 0A76  
                            l6745 0A18                              l6737 09BC  
                            l6729 0962                              l6673 07DC  
                            l6665 07AA                              l6681 07EA  
                            l6657 078C                              l6593 052E  
                            l6585 04F0                              l6577 0488  
                            l6569 042C                              l5779 3FBC  
                            l5699 3A84                              l5875 391C  
                            l5867 38DE                              l5891 38C6  
                            l5883 3896                              l5859 33EA  
                            l5971 1F7A                              l5963 1F4C  
                            l5955 1F20                              l5947 1EF8  
                            l5939 1ED4                              l5787 3F5E  
                            l5795 40BE                              l6931 10F6  
                            l6923 1088                              l6915 100E  
                            l6851 0E24                              l6843 0DDC  
                            l6835 0D92                              l6827 0D6A  
                            l6819 0D3A                              l6763 0B32  
                            l6747 0A30                              l6739 09C8  
                            l6771 0B56                              l6683 07EE  
                            l6659 0792                              l6595 0590  
                            l6587 050E                              l6579 04A2  
                            l6499 020C                              l5877 391E  
                            l5869 38EE                              l5885 38A6  
                            l5893 38D6                              l5981 1FAE  
                            l5973 1F80                              l5965 1F52  
                            l5957 1F28                              l5949 1EFE  
                            l5789 3F64                              l5797 40AA  
                            l6941 116A                              l6933 1130  
                            l6917 1016                              l6909 0FFC  
                            l6861 0E76                              l6853 0E2E  
                            l6845 0DE6                              l6837 0D9E  
                            l6829 0D78                              l6765 0B46  
                            l6757 0A86                              l6749 0A48  
                            l6781 0B72                              l6693 081A  
                            l6677 07E4                              l6669 07BE  
                            l6597 05BC                              l6589 051E  
                            l5799 40F8                              l5879 392E  
                            l5895 3A2A                              l5887 38B4  
                            l5991 1FE8                              l5983 1FC4  
                            l5967 1F54                              l5975 1F82  
                            l5959 1F38                              l6951 11E0  
                            l6943 1196                              l6935 113A  
                            l6927 1090                              l6863 0E9C  
                            l6855 0E54                              l6847 0E0C  
                            l6839 0DC4                              l6791 0C64  
                            l6783 0BE4                              l6759 0AE8  
                            l6767 0B4C                              l6695 082C  
                            l6687 0802                              l6599 05DA  
                            l5897 3A3A                              l5889 38C4  
                            l5993 1FF8                              l5985 1FCC  
                            l5977 1F92                              l5969 1F6A  
                            l6961 12A2                              l6953 121A  
                            l6945 11A0                              l6937 1146  
                            l6929 10BC                              l6881 0F36  
                            l6865 0EAA                              l6857 0E62  
                            l6849 0E1A                              l6793 0C90  
                            l6785 0C02                              l6769 0B50  
                            l6697 0838                              l6689 0806  
                            l5899 3A48                              l5995 2004  
                            l5979 1FAC                              l6971 12E4  
                            l6963 12C0                              l6955 1254  
                            l6947 11AA                              l6939 1158  
                            l6891 0FAC                              l6883 0F62  
                            l6867 0EB4                              l6859 0E6C  
                            l6875 0EC6                              l6795 0C9A  
                            l6787 0C2E                              l5997 2008  
                            l5989 1FD8                              l6981 1340  
                            l6973 12F6                              l6965 12CC  
                            l6949 11B4                              l6957 128C  
                            l6893 0FCA                              l6885 0F6C  
                            l6877 0F10                              l6869 0EBE  
                            l6797 0CB0                              l6789 0C5A  
                            l5999 2018                              l6983 1350  
                            l6991 1392                              l6967 12D4  
                            l6959 129E                              l6887 0F78  
                            l6879 0F18                              l6799 0CBE  
                            l6993 13A4                              l6985 1360  
                            l6969 12DC                              l6977 12FE  
                            l6897 0FD4                              l6889 0F8C  
                            l6995 13B0                              l6987 136E  
                            l6979 1338                              l6997 13B6  
                            l6989 1386                              l6999 13C8  
                            l7991 03A2           __end_of_getIndicePassos 4102  
                            l7993 054A                              l7995 06BE  
                            l7997 0754                              l7999 0AA2  
                            STR_1 7FF9                              STR_2 7FE8  
                            STR_3 7FFD                              STR_4 7DAC  
                            STR_5 7DD8                              STR_6 7BDF  
                            STR_7 7F13                              STR_8 7E95  
                            STR_9 7EE9                              u3100 2B46  
                            u3101 2B42                              u3110 2B96  
                            u3111 2B92                              u3200 3E74  
                            u3120 2BA8                              u4000 33D8  
                            u3201 3E70                              u3121 2BA4  
                            u4001 33D4                              u3210 3FE6  
                            u3130 2E8A                              u4010 33E8  
                            u3211 3FE2                              u3131 2E86  
                            u4011 33E4                              u3220 4090  
                            u3140 2EA4                              u4020 3406  
                            u4100 3726                              u3300 2F68  
                            u3221 408C                              u3141 2EA0  
                            u4021 3402                              u4101 3722  
                            u3301 2F64                              u3150 2ECA  
                            u3230 3C44                              u4030 38EE  
                            u4110 3760                              u3310 2F82  
                            u3151 2EC6                              u3231 3C40  
                            u4031 38EA                              u4111 375C  
                            u3311 2F7E                              u3240 4020  
                            u3080 2B04                              u3160 2EE8  
                            u4040 38FE                              u4120 400C  
                            u3320 2FA0                              u4200 1FF8  
                            u3400 23A4                              u5000 09E0  
                            u3241 401A                              u3081 2B00  
                            u3161 2EE4                              u4041 38FA  
                            u4121 4008                              u3321 2F9C  
                            u4201 1FF4                              u3401 23A0  
                            u5001 09DC                              u3250 4022  
                            u3090 2B16                              u3170 2F04  
                            u4050 3896                              u3330 2FB6  
                            u4210 2018                              u4130 1EF2  
                            u3410 23DC                              u5010 09FA  
                            u3091 2B12                              u3171 2F00  
                            u4051 3892                              u3331 2FB2  
                            u4211 2014                              u4131 1EEE  
                            u3411 23D8                              u5011 09F6  
                            u3260 3210                              u3180 2F2A  
                            u4060 38A6                              u3340 2FDA  
                            u4220 2046                              u4140 1F20  
                            u3420 241A                              u4300 21D6  
                            u3500 32E6                              u5100 0CB0  
                            u5020 0A30                              u3261 320C  
                            u3181 2F26                              u4061 38A2  
                            u3341 2FD6                              u4221 2042  
                            u4141 1F1C                              u3421 2416  
                            u4301 21D2                              u3501 32E0  
                            u5101 0CAC                              u5021 0A2C  
                            u3270 3232                              u3190 4034  
                            u4070 3A3A                              u3510 3344  
                            u4230 205E                              u4150 1F38  
                            u3430 242A                              u4310 21F0  
                            u5110 0CEE                              u5030 0A48  
                            u3271 322E                              u3191 4030  
                            u4071 3A36                              u3511 333E  
                            u4231 205A                              u4151 1F34  
                            u3431 2426                              u4311 21EC  
                            u5111 0CEA                              u5031 0A44  
                            u3280 325A                              u3360 4048  
                            u3600 2786                              u4080 3FB8  
                            u4240 20B4                              u4160 1F4C  
                            u3440 243A                              u4320 2228  
                            u4400 3D1C                              u5200 0F8C  
                            u5120 0D2C                              u5040 0B14  
                            u3281 3256                              u3361 4044  
                            u3601 2782                              u4081 3FB2  
                            u4241 20B0                              u4161 1F48  
                            u3441 2436                              u4321 2224  
                            u4401 3D18                              u5201 0F88  
                            u5121 0D28                              u5041 0B10  
                            u3610 24CE                              u3530 335A  
                            u4090 3FBA                              u3290 2F4E  
                            u4250 20C4                              u4170 1F7A  
                            u3450 24AE                              u3370 2348  
                            u4330 2238                              u3506 32E8  
                            u4410 387E                              u5210 0FAC  
                            u5130 0D6A                              u5050 0B6E  
                            u3355 3B0C                              u3611 24CA  
                            u3531 3354                              u3291 2F4A  
                            u4251 20C0                              u4171 1F76  
                            u3451 24AA                              u3371 2342  
                            u4331 2234                              u4411 387A  
                            u5211 0FA8                              u5131 0D66  
                            u5051 0B6A                              u3460 3E42  
                            u3620 2CC6                              u4260 20EC  
                            u4180 1F92                              u3380 234A  
                            u4340 225E                              u3700 37F6  
                            u5220 0FF8                              u5140 0DC4  
                            u4501 2616                              u3461 3E3E  
                            u3621 2CC2                              u3525 3346  
                            u4261 20E8                              u4181 1F8E  
                            u4341 225A                              u3701 37F2  
                            u5221 0FF4                              u5141 0DC0  
                            u3630 2CEA                              u3550 3370  
                            u4270 2176                              u4190 1FE8  
                            u3390 235C                              u4350 2296  
                            u3470 32A4                              u3710 380C  
                            u5150 0E0C                              u4511 2624  
                            u6007 2BAE                              u3631 2CE6  
                            u3551 336A                              u4271 2172  
                            u4191 1FE4                              u3391 2358  
                            u4351 2292                              u3471 329E  
                            u3711 3808                              u5151 0E08  
                            u3800 3176                              u4440 2FFE  
                            u4600 2A5A                              u3640 2D0A  
                            u4280 21AA                              u4360 22A6  
                            u3480 32BA                              u3720 3826  
                            u5400 13C8                              u5160 0E54  
                            u3801 3172                              u4441 2FFA  
                            u4601 2A56                              u6017 2BBC  
                            u3641 2D06                              u3545 335C  
                            u4281 21A6                              u4361 22A2  
                            u3481 32B4                              u3721 3822  
                            u5401 13C4                              u5161 0E50  
                            u4530 268A                              u4450 3040  
                            u4610 2A82                              u3650 2D1A  
                            u3570 3386                              u4370 22D2  
                            u4290 21C6                              u3490 32D0  
                            u3730 30B4                              u5330 129E  
                            u5170 0E9C                              u4531 2686  
                            u4451 303C                              u4611 2A7E  
                            u6027 39FA                              u3651 2D16  
                            u3571 3380                              u4371 22CE  
                            u4291 21C2                              u3491 32CA  
                            u3731 30B0                              u5331 129A  
                            u5171 0E98                              u3820 31B2  
                            u4540 2704                              u4460 3082  
                            u4620 2AB4                              u3900 37D0  
                            u3660 2D40                              u4380 2302  
                            u3476 32A6                              u5308 11EA  
                            u5260 1158                              u5068 0BEE  
                            u4700 01B0                              u4541 2700  
                            u4461 307E                              u4621 2AB0  
                            u6037 3A1E                              u3901 37CC  
                            u3661 2D3C                              u3565 3372  
                            u4381 22FE                              u5309 121A  
                            u5261 1154                              u5069 0C02  
                            u4701 01AC                              u3830 31D8  
                            u4550 3668                              u3670 2D50  
                            u3590 276A                              u3486 32BC  
                            u3910 3B8A                              u4390 3D0C  
                            u4438 3D78                              u5350 12F6  
                            u5318 1224                              u5270 116A  
                            u5238 109A                              u5078 0C0C  
                            u4710 01C8                              u6047 3E52  
                            u4471 28A0                              u4551 3664  
                            u3671 2D4C                              u3591 2766  
                            u3911 3B86                              u4391 3D08  
                            u4439 3D8C                              u5351 12F2  
                            u5319 1254                              u5271 1166  
                            u5239 10BC                              u5079 0C2E  
                            u4711 01C4                              u3840 31E8  
                            u4528 263C                              u4480 28E8  
                            u4560 36A2                              u3920 3BCC  
                            u3680 2D66                              u3496 32D2  
                            u3760 3104                              u3744 30CA  
                            u5440 1476                              u5360 1350  
                            u5328 125E                              u5248 10C6  
                            u5088 0C38                              u4800 042C  
                            u3841 31E4                              u4529 2650  
                            u4481 28E4                              u4561 369E  
                            u3921 3BC8                              u3681 2D62  
                            u3585 3388                              u3761 3100  
                            u3745 30C6                              u5441 1472  
                            u5361 134C                              u5329 128C  
                            u5249 10F6                              u5089 0C5A  
                            u4801 0428                              u3818 3180  
                            u4490 2976                              u4570 29DC  
                            u3930 3CF0                              u3850 3582  
                            u3690 2D86                              u3770 313A  
                            u3754 30EA                              u5610 187A  
                            u5450 1486                              u5418 13DA  
                            u5370 1360                              u5258 1100  
                            u5098 0C6E                              u3827 31A8  
                            u3819 31B4                              u4491 2972  
                            u4571 29D8                              u3931 3CEC  
                            u3851 357E                              u3691 2D82  
                            u3771 3136                              u3755 30E6  
                            u5611 1876                              u5451 1482  
                            u5419 13FC                              u5371 135C  
                            u5259 1130                              u5099 0C90  
                            u4580 29FE                              u3940 3FCE  
                            u3860 35A0                              u5700 19FE  
                            u5620 1892                              u5508 15A8  
                            u5460 14AC                              u5428 1406  
                            u5380 1386                              u5348 12AC  
                            u5188 0F22                              u4900 07A2  
                            u4820 0488                              u3837 31CE  
                            u4581 29FA                              u3941 3FCA  
                            u3861 359C                              u5701 19FA  
                            u5621 188E                              u5509 15CA  
                            u5461 14A8                              u5429 142C  
                            u5381 1382                              u5349 12C0  
                            u5189 0F36                              u4901 079E  
                            u4821 0484                              u4741 0250  
                            u4590 2A38                              u3870 35BC  
                            u3950 3546                              u5710 1A24  
                            u5518 15E8                              u5438 1446  
                            u5390 13A4                              u5198 0F40  
                            u4910 07BA                              u4830 04A2  
                            u4750 02B0                              u4670 013A  
                            u4591 2A34                              u3871 35B8  
                            u3951 3542                              u5711 1A20  
                            u5519 1610                              u5439 145A  
                            u5391 13A0                              u5199 0F62  
                            u4911 07B6                              u4831 049E  
                            u4751 02AC                              u4671 0136  
                            u3880 3AB6                              u3960 3564  
                            u5800 1CE2                              u5720 1A42  
                            u5608 182A                              u5528 1622  
                            u5288 1174                              u4920 07FE  
                            u4840 04D8                              u4760 02E8  
                            u4728 01D6                              u4680 0152  
                            u4648 0054                              u3881 3AB2  
                            u3961 3560                              u3785 3604  
                            u5801 1CDE                              u5721 1A3E  
                            u5609 184C                              u5529 1636  
                            u5289 1196                              u4921 07FA  
                            u4841 04D4                              u4761 02E4  
                            u4729 01F8                              u4681 014E  
                            u4649 006A                              u3890 3798  
                            u3970 39A4                              u5730 1A66  
                            u5538 1686                              u5298 11BE  
                            u4930 0816                              u4850 04F0  
                            u4818 0436                              u4738 0224  
                            u4658 0080                              u3891 3794  
                            u3971 39A0                              u5731 1A62  
                            u5539 169A                              u5299 11E0  
                            u4931 0812                              u4851 04EC  
                            u4819 045E                              u4739 0246  
                            u4659 0096                              u3980 39BC  
                            u5820 1D8E                              u5740 1C10  
                            u5660 196C                              u5580 1804  
                            u5548 16AC                              u4940 08A2  
                            u4860 05BC                              u4780 0354  
                            u4668 00BC                              u3981 39B8  
                            u5821 1D8A                              u5741 1C0C  
                            u5661 1968                              u5581 1800  
                            u5549 16C0                              u4941 089E  
                            u4861 05B8                              u4781 0350  
                            u4669 00D0                              u3798 3152  
                            u3990 39D8                              u5830 1DB0  
                            u5750 1C22                              u5638 18A0  
                            u5590 181C                              u5558 16F8  
                            u5478 152E                              u4870 0616  
                            u3799 3166                              u3991 39D4  
                            u5831 1DAC                              u5751 1C1E  
                            u5639 18C2                              u5591 1818  
                            u5559 1732                              u5479 1542  
                            u4871 0612                              u5840 1DC6  
                            u5760 1C32                              u5648 18E6  
                            u5568 1746                              u5488 154C  
                            u4880 0684                              u5841 1DC2  
                            u5761 1C2E                              u5649 1908  
                            u5569 175A                              u5489 156E  
                            u4881 0680                              u5850 1DF0  
                            u5818 1D46                              u5770 1C4A  
                            u5690 19EE                              u5658 1912  
                            u5578 17DA                              u5498 1578  
                            u4778 0308                              u4698 0160  
                            u5851 1DEC                              u5819 1D5A  
                            u5771 1C46                              u5691 19EA  
                            u5659 1934                              u5579 17EE  
                            u5499 159E                              u4779 031C  
                            u4699 0182                              u5860 1E12  
                            u5780 1C5C                              u4980 0984  
                            u5861 1E0E                              u5781 1C58  
                            u4981 0980                              u5870 1E38  
                            u5790 1CD2                              u5678 197A  
                            u4958 08B0                              u4798 03EC  
                            u5871 1E34                              u5791 1CCE  
                            u5679 199C                              u4959 08C4  
                            u4799 040A                              u5880 1E4E  
                            u5688 19A6                              u4968 08D6  
                            u5881 1E4A                              u5689 19CC  
                            u4969 08EA                              u4978 0932  
                            u4898 0774                              u4979 0962  
                            u4899 0788                              u4998 098E  
                            u4999 09B6                              u5977 2B1C  
                            u5987 2B2A                              u5997 2B64  
                     main@ptr_915 00B6                       main@ptr_940 00B8  
                            _fila 001F                              _main 0012  
                    fp__wifi_init 0000                      fp__wifi_send 0000  
                            _wifi 00BD                              fsr1h 000FE2  
                            fsr2h 000FDA                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 005E  
                  ?_addContCiclos 0031                  __end_of_I2C_init 3C82  
                            prodh 000FF4                              prodl 000FF3  
                     main@vetorIn 00AD                              start 000E  
         __size_of_salvar_receita 0044                 fp__salvar_receita 0000  
                __end_of_I2C_stop 404C                 _formatar_receitas 3F90  
                    ___param_bank 000000                      ?_ler_atuador 0031  
                  printExec@passo 004E                ?_formatar_receitas 0031  
    __end_of_salva_atuadores_init 3568                             ??_irq 0031  
                 _addIndicePassos 3FBC              __end_of_EEPROM_write 3E48  
                    main@auxPasso 00BB                   __end_of___aldiv 2AD6  
                           ?_main 0031                   __end_of___awdiv 2F3C  
                           _EEADR 000FA9                      wifi_send@msg 0032  
                           STR_10 7E80                             STR_11 7E2C  
                           STR_12 7CFA                             STR_20 7E6B  
                           STR_13 7FFD                             STR_21 7EBF  
                           STR_30 7FFD                             STR_14 7DAC  
                           STR_22 7FF1                             STR_31 7DAC  
                           STR_15 7E02                             STR_23 7DED  
                           STR_32 7E41                             STR_16 7E17  
                           STR_24 7DAE                             STR_40 7D60  
                           STR_41 7FB6                             STR_25 7F28  
                           STR_33 7DC3                             STR_17 7C32  
                           STR_34 7EFE                             STR_18 7EAA  
                           STR_26 7D99                             STR_42 7D0F  
                           STR_43 7FD2                             STR_35 7F8C  
                           STR_27 7ED4                             STR_19 7E56  
                           STR_44 7FDD                             STR_36 7F4F  
                           STR_52 7D38                             STR_28 7CD1  
                 __end_of___awmod 2FEC                             STR_53 7FC4  
                           STR_37 7F7E                             STR_45 7F3D  
                           STR_29 7C83                             STR_46 7F9A  
                           STR_38 7F6F                             STR_39 7FA8  
                           STR_47 7D84                             STR_48 7F60  
                 __end_of___lldiv 328E                   ___awdiv@divisor 0033  
             ??_formatar_receitas 0033                   __end_of___lwdiv 35DC  
                           i2l611 3E9E                   ___awdiv@counter 0035  
                           _RCREG 000FAE                             _TMR1H 000FCF  
                           _TMR1L 000FCE                             _PORTD 000F83  
                           _TRISD 000F95                             _TXREG 000FAD  
__size_of_manipula_atuadores_init 0050               ___lmul@multiplicand 0035  
                 __end_of_dispLCD 3AB8                    _txStatusEUSART 4010  
               ??_fifo_disponivel 0031             __end_of_teclado_borda 3D28  
                           _delay 3E48                             _setT1 3FE8  
                 salvar_receita@i 003C                             main@i 00A1  
                           main@j 00A2                             pclath 000FFA  
                           tablat 000FF5                   _I2C_ack_receive 4082  
                           plusw1 000FE3                             plusw2 000FDB  
                    main@vetorOut 00AE                             ttemp5 005F  
                           ttemp6 0062                             ttemp7 0066  
                           status 000FD8                 __end_of_I2C_start 4038  
                           wtemp8 005F         __end_of_formatar_receitas 3FA6  
                 EEPROM_read@addr 0031                     _indice_passos 005B  
            __end_of_dispLCD_init 3D5E              __size_of_EEPROM_read 000E  
                 __initialization 3460                      __end_of_main 1EC8  
                ?_dispLCD_dataReg 0031                            ??_main 0059  
                       ??_MCP4725 004D                     __activetblptr 000002  
                   ?_initSerialIO 0031              __size_of_dispLCD_clr 0008  
          __end_of_txStatusEUSART 4024              __size_of_dispLCD_num 017A  
            __size_of_dispLCD_str 005E              __size_of_alt_atuador 009A  
                ?_dispLCD_instReg 0031                            ?_delay 0031  
                    ?_salvar_dado 0037                            _ADCON1 000FC1  
                          ?_setT1 0037                            _EEDATA 000FA8  
                          _EECON2 000FA7                  ___awdiv@dividend 0031  
                          _I2C_tx 3FD2              __size_of_dignum_conc 0048  
                          _EEPROM 00EB                  ?_getIndicePassos 0031  
                          i2l1061 3DBA                            i2l1063 3DBC  
                          i2l3031 3DAC                            i2l3027 3D8E  
                          i2l3029 3D96                            i2l3341 3E88  
                          i2l3343 3E96                            i2l3345 3E98  
                          i2l3347 3E9C                            i2l3339 3E78  
            __size_of_fifo_delete 0098                  __end_of_dac_init 3C0C  
                 ??_addContCiclos 0031              __size_of_end_receita 0024  
            __size_of_fifo_indice 0004              __size_of_fifo_lerPos 0012  
                          _SSPADD 000FC8                            _SSPBUF 000FC9  
                   main@init_cond 00B2                   ler_sensor@passo 0035  
                __end_of_codifica 2604                  __end_of_fifo_add 3934  
                __end_of_fifo_tam 4106                   Wifi_cipsend@tam 0034  
                 Wifi_cipsend@msg 0036           __end_of_addIndicePassos 3FD2  
                 Wifi_cipsend@str 0038                   Wifi_cipsend@vtr 004C  
                _Wifi_autoconnect 000000                            _t1cont 000B  
                          ___lmul 364A                         ??___aldiv 0045  
                          ___wmul 3ECA                         ??___awdiv 0035  
                       ??___awmod 0035                            _ciclos 0019  
                       ??___lldiv 0039                 _fifo_alinharPrint 2CAE  
                    ?_timer1_init 0031                         ??___lwdiv 0035  
                          _eusart 00D1                            delay@t 0031  
                          clear_0 34C4                            clear_1 34D6  
                __end_of_txEUSART 40EC                            _search 000000  
                ___awdiv@quotient 0037                            _teclas 0146  
                 ___awmod@divisor 0033                ?_fifo_alinharPrint 0031  
                       ??_dispLCD 003B                   ___awmod@counter 0035  
                  ??_initSerialIO 0036                            main@pt 009D  
                  _buscar_receita 3B8C                  __end_of_posAtual 4070  
                 ?_txStatusEUSART 0031                            setT1@c 0037  
                    __pdataCOMRAM 005B                        Wifi_mode@d 0034  
              __size_of_Wifi_mode 00B0                   Wifi_connect@str 003A  
                    __mediumconst 7BDE                         ?_I2C_init 003E  
                          tblptrh 000FF7                            tblptrl 000FF6  
             ??_fifo_alinharPrint 003C                            tblptru 000FF8  
                       ?_I2C_stop 0031           __end_of_I2C_ack_receive 4092  
           __end_of_getContCiclos 40C8              _Wifi_config_servidor 000000  
                   main@vetor_aux 0076                  __end_of_statusT1 405E  
          salva_atuadores_init@pt 0038              _salva_atuadores_init 34EA  
                      __accesstop 0060           __end_of__initialization 34DC  
            __size_of_buscar_dado 0028          __size_of_deletar_receita 0038  
              fp__deletar_receita 0000                 _serialIObyteShift 37D2  
                  _salvar_receita 3B48        __size_of_formatar_receitas 0016  
         __size_of_dispLCD_lincol 0062                     ___rparam_used 000001  
              ?_serialIObyteShift 0031                __size_of_dac_write 0048  
       __end_of_fifo_alinharPrint 2D96                    __pcstackCOMRAM 0031  
           __size_of_EEPROM_write 002E          __size_of_resetContCiclos 000A  
                    __pidataBANK0 3C82                      __pidataBANK1 3934  
                   __end_of_delay 3E76                     __end_of_setT1 3FFC  
               fifo_add_control@c 0040              __size_of_ler_atuador 00A0  
             ??_serialIObyteShift 0031            __end_of_buscar_receita 3BCE  
              __size_of_getCiclos 001E           _manipula_atuadores_init 398A  
       __size_of_fifo_add_control 0048                 initSerialIO@ptrIn 0031  
              __size_of_fifo_adrs 000A                           I2C_tx@b 0031  
                      ??_I2C_init 0042      __end_of_fifo_indicePrint_dec 4010  
                      ??_I2C_stop 0031      __end_of_fifo_indicePrint_inc 3774  
                         ??_delay 0033                           ??_setT1 003B  
              teclado_borda@tecla 0037                           ?_I2C_tx 0031  
           ?_salva_atuadores_init 0031                        __pbssBANK0 00F5  
                      __pbssBANK1 0156             __size_of_dispLCD_init 0036  
       __end_of_serialIObyteShift 382C            __end_of_salvar_receita 3B8C  
                      _decodifica 2752                     ?_teclado_init 0031  
                   ?_teclado_scan 0031                __size_of_intt1_1ms 0030  
                    _EEPROM_write 3E1A                  teclado_borda@aux 0036  
           __end_of_dignum_apagar 3E1A                 __end_of_Wifi_mode 309C  
                 fp__Wifi_cipsend 0000                  ?_addIndicePassos 0031  
                 fp__Wifi_connect 0000                    main@contPassos 0074  
                         ?___lmul 0031                           ?___wmul 0031  
                 _fifo_disponivel 3FA6                    ___lmul@product 0039  
         serialIObyteShift@dataIn 0031                   ?_buscar_receita 0037  
                      _dignum_tam 3C0C                __size_of_set_passo 00E2  
                         _MCP4725 3F36                         ?_dac_init 0031  
                      _fifo_print 1EC8                __size_of_printExec 018A  
                         _LCDbits 000F8A                      _dispLCD_init 3D28  
              __size_of_wifi_init 0030                __size_of_wifi_send 00A6  
                ?_I2C_ack_receive 0031                 __end_of_dac_write 3B48  
                       ?_codifica 0031                         ?_fifo_add 0031  
                       ?_fifo_tam 0031                   __size_of_I2C_tx 0016  
            __size_of_salvar_dado 0022                    ??_teclado_init 0031  
                  ??_teclado_scan 0031                   ?_salvar_receita 0037  
                   ?_serialIOload 0031                     ?_serialIOscan 0031  
                      _initEUSART 35DC                 __end_of_getCiclos 3F76  
                       ?_txEUSART 0031              __end_of_initSerialIO 3DEC  
                     posAtual@ind 0032                  EEPROM_write@addr 0032  
                EEPROM_write@data 0031                           __Hparam 0000  
               __end_of_fifo_adrs 40D2                         ?_posAtual 0031  
                         __Lparam 0000                         _I2C_start 4024  
      __size_of_fifo_alinharPrint 00E8                           _Wifi_ip 000000  
               ??_deletar_receita 0035                           ___aldiv 29CA  
                         ___awdiv 2E78                   __size_of___lmul 006A  
                         ___awmod 2F3C                        _ler_sensor 2BC6  
                         ___lldiv 31EA                   __size_of___wmul 0026  
         __size_of_init_atuadores 000A                           ___lwdiv 3568  
                       ?_statusT1 0031            deletar_receita@receita 0037  
       ??_manipula_atuadores_init 0034                     ?_Wifi_cipsend 0034  
                         __pcinit 3460                     ?_Wifi_connect 0034  
                         __ramtop 0800                           _dispLCD 3A70  
            __size_of_timer1_init 001A                           __ptext0 0012  
                         __ptext1 3D5E                           __ptext2 35DC  
                         __ptext3 3F76                           __ptext4 40A0  
                         __ptext5 3CF2                           __ptext6 309C  
                         __ptext7 404C                           __ptext8 2D96  
                         __ptext9 3FE8                     teclado_scan@c 0035  
                   teclado_scan@l 0034                        ??_dac_init 0034  
               __end_of_intt1_1ms 3DBE                 ??_resetContCiclos 0031  
                         _atuador 001E           __size_of_fifo_add_ciclo 000A  
                       _T1CONbits 000FCD                      __size_of_irq 3E9A  
         __size_of_fifo_add_tempo 0058                  ___awmod@dividend 0031  
               salvar_receita@aux 0039                  ___aldiv@dividend 003D  
                   _receita_livre 000000                        ??_codifica 0033  
          ??_salva_atuadores_init 0034                        ??_fifo_add 0040  
                      ??_fifo_tam 0031                           main@aux 0075  
                         main@num 00B4                           main@ptr 009F  
                  __pintcode_body 3E76              end_of_initialization 34DC  
                  ??_serialIOload 0031                    ??_serialIOscan 0034  
      __size_of_serialIObyteShift 005A                       ?_decodifica 0031  
                   __Lmediumconst 7BDE                           int_func 3E76  
                  dispLCD_num@col 003C                    dispLCD_num@div 0048  
                  dispLCD_num@lin 0045                    dispLCD_num@tam 003F  
                      ??_txEUSART 0031                    dispLCD_num@num 003D  
                  _dispLCD_lincol 36B4                     ??_EEPROM_read 0031  
               __end_of_set_passo 2E78                  Wifi_connect@pass 0036  
                  dispLCD_str@lin 003A                  Wifi_connect@ssid 0034  
                  dispLCD_str@str 0038                        dispLCD@col 0038  
                 ___lldiv@divisor 0035                        dispLCD@lin 003C  
                      dispLCD@pos 003B                        dispLCD@str 0039  
         __end_of_fifo_disponivel 3FBC                 __end_of_printExec 2336  
                 ___lldiv@counter 003D                        ??_posAtual 0032  
                      ?_I2C_start 0031                 __end_of_wifi_init 3D8E  
               __end_of_wifi_send 31EA                      I2C_init@freq 003E  
                       _RCSTAbits 000FAB              _fifo_indicePrint_dec 3FFC  
                ___aldiv@quotient 0047              _fifo_indicePrint_inc 3716  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
          __size_of_teclado_borda 0036                  ??_txStatusEUSART 0031  
                  ??_Wifi_cipsend 0038                fifo_alinharPrint@i 003E  
                      ??_statusT1 0035                     ??_dispLCD_clr 0033  
                  ??_Wifi_connect 0038                     ??_dispLCD_num 0040  
                   ??_dispLCD_str 003A                     ??_alt_atuador 0031  
                     ?_dignum_tam 0039                         _PORTAbits 000F80  
                _fifo_add_control 3A28              fp__formatar_receitas 0000  
                     ?_fifo_print 0031                        fp__dispLCD 0000  
                   ??_dignum_conc 0039                         _TRISAbits 000F92  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
        __size_of_dispLCD_dataReg 004E                     ??_fifo_delete 0040  
                   ??_end_receita 0033                     ??_fifo_indice 0031  
                   ??_fifo_lerPos 0031                 __size_of_I2C_init 003A  
               __size_of_I2C_stop 0014                     _teclaAnterior 001B  
 __end_of_manipula_atuadores_init 39DA            __end_of_dispLCD_lincol 3716  
                  __end_of_I2C_tx 3FE8    manipula_atuadores_init@atuador 0034  
        __size_of_dispLCD_instReg 00F0                        main@ciclos 00B0  
                     ?_initEUSART 003E                         _TXSTAbits 000FAC  
             dignum_apagar@ptrNum 0038                        main@estado 00BA  
           __end_of_addContCiclos 40FE          __size_of_getIndicePassos 0004  
           ?_fifo_indicePrint_dec 0031             ?_fifo_indicePrint_inc 0031  
                     wifi_init@br 0046               __end_of_EEPROM_read 40A0  
                     ?_ler_sensor 0031                    __end_of___lmul 36B4  
                  __end_of___wmul 3EF0                       _BAUDCONbits 000FB8  
                   __pidataCOMRAM 410A                    set_passo@passo 0035  
            __end_of_teclado_init 40AA              __end_of_teclado_scan 3144  
             __size_of_decodifica 0140               start_initialization 3460  
             __end_of_dispLCD_clr 40E4                     posAtual@passo 0033  
             __end_of_dispLCD_num 24B0               __end_of_dispLCD_str 37D2  
             __end_of_alt_atuador 33C8                       __end_of_irq 3EA2  
                   _teclado_borda 3CF2                     ??_buscar_dado 003A  
                        ??_I2C_tx 0031             __size_of_initSerialIO 002E  
                 fifo_add_tempo@t 0040                   ?_dispLCD_lincol 0033  
             __end_of_dignum_conc 3B00                initSerialIO@length 0035  
             __size_of_dignum_tam 003C               __end_of_fifo_delete 3460  
              initSerialIO@ptrOut 0033               __end_of_end_receita 3F14  
             __end_of_fifo_indice 410A               __end_of_fifo_lerPos 4082  
             __size_of_fifo_print 02E4                  ?_fifo_disponivel 0031  
               dispLCD_lincol@col 0033                 dispLCD_lincol@aux 0037  
               dispLCD_lincol@lin 0036                       ??_I2C_start 0031  
                 main@meAtuadores 00AF                     ??_ler_atuador 0031  
                ??_buscar_receita 0039                          ??___lmul 0039  
                        ??___wmul 0035                    _init_atuadores 40B4  
          __size_of_getContCiclos 000A                       __pdataBANK0 00BD  
                     __pdataBANK1 0100                         _Wifi_mode 2FEC  
                       _Wifi_scan 000000              __end_of_serialIOload 40F2  
            __end_of_serialIOscan 3884                          ?_MCP4725 004B  
                  _fifo_add_ciclo 40D2                  ler_atuador@tecla 0033  
                    _initSerialIO 3DBE               __size_of_initEUSART 006E  
                  _fifo_add_tempo 3884                       __pbssCOMRAM 0001  
               __size_of_dac_init 003E                     __pcstackBANK0 0060  
                ??_salvar_receita 0039                    ?_teclado_borda 0031  
             __size_of_ler_sensor 00E8                 __size_of_codifica 0154  
               __size_of_fifo_add 0058              __end_of_Wifi_cipsend 2752  
                       _dac_write 3B00                 __size_of_fifo_tam 0004  
                 _deletar_receita 3CBA              __end_of_Wifi_connect 29CA  
               ??_dispLCD_dataReg 0031                       _EEPROM_read 4092  
             __end_of_buscar_dado 3ECA            ??_fifo_indicePrint_dec 0031  
          ??_fifo_indicePrint_inc 0031                 __size_of_txEUSART 0008  
                ___lwdiv@dividend 0031            __end_of_init_atuadores 40BE  
                 _resetContCiclos 40AA                         _getCiclos 3F58  
               ??_dispLCD_instReg 0031                         __pintcode 0008  
                   __pmediumconst 7BDE                          ?___aldiv 003D  
                        ?___awdiv 0031                 __size_of_posAtual 0012  
                        ?___awmod 0031                          ?___lldiv 0031  
                        ?___lwdiv 0031                         _fifo_adrs 40C8  
                   serialIOscan@i 0037                     serialIOscan@j 0036  
                      ?_Wifi_mode 0031            __end_of_fifo_add_ciclo 40DC  
                     _dispLCD_clr 40DC                       _dispLCD_num 2336  
                     _dispLCD_str 3774                 ??_getIndicePassos 0031  
          __end_of_fifo_add_tempo 38DC                          ?_dispLCD 0038  
                     _alt_atuador 332E               __end_of_ler_atuador 332E  
               __size_of_statusT1 0012          __size_of_addIndicePassos 0016  
                       _ind_print 005C                     _rxErrorEUSART 000000  
                        _I2C_init 3C48          serialIObyteShift@dataBit 0033  
                        _I2C_stop 4038            __size_of_dignum_apagar 002E  
                     _dignum_conc 3AB8          serialIObyteShift@dataOut 0032  
                       _intt1_1ms 3D8E                     ??_salvar_dado 0039  
                ___lwdiv@quotient 0035                     _getContCiclos 40BE  
                  __size_of_delay 002E                       _fifo_delete 33C8  
                  __size_of_setT1 0014                       _end_receita 3EF0  
                     _fifo_indice 4106                       _fifo_lerPos 4070  
                      ?_dac_write 0034                      ??_decodifica 0033  
               teclado_scan@tecla 0033                    _fifo_print$473 003B  
                 ___aldiv@divisor 0041                   ___aldiv@counter 0045  
                  ___wmul@product 0035          __size_of_I2C_ack_receive 0010  
        __end_of_fifo_add_control 3A70                          _PIE1bits 000F9D  
                        i2u132_40 3DAC                          i2u132_41 3DA8  
                        i2u160_40 3E88                          i2u160_41 3E84  
                        i2u161_40 3E96                          i2u161_41 3E92  
                        _PIR1bits 000F9E                   ?_init_atuadores 0031  
                        _SERIALIO 000F80                        ?_getCiclos 0031  
                       _set_passo 2D96             __size_of_teclado_init 000A  
           __size_of_teclado_scan 00A8                         main@F3513 0132  
                       main@F3487 00F6                         main@F3489 00F5  
                  dignum_conc@dig 003B                     ??_timer1_init 0031  
                      ?_fifo_adrs 0031                         _printExec 21AC  
                dispLCD_dataReg@d 0032                          _SPBRbits 000FAF  
                 ?_fifo_add_ciclo 0031                         _wifi_init 3D5E  
                       _wifi_send 3144                      ??_dignum_tam 003B  
                     _cont_ciclos 0017                   ?_fifo_add_tempo 0031  
                       main@i_903 00A3                         main@i_930 00A5  
                       main@i_933 00A7                         main@i_909 009C  
               ___wmul@multiplier 0031                         main@i_975 00A9  
                       main@j_904 00A4                         main@i_978 00AB  
                       main@j_931 00A6                         main@j_934 00A8  
              initEUSART@baudRate 003E                         main@j_976 00AA  
                       main@j_979 00AC               fifo_print@completar 003D  
                deletar_receita@i 0038                      ??_fifo_print 0039  
              __end_of_decodifica 2892                  __size_of_MCP4725 0022  
                       main@botao 00B3                       _lenSerialIO 001C  
                 ??_teclado_borda 0036                         main@tecla 00BC  
         __end_of_deletar_receita 3CF2                        ?_intt1_1ms 0031  
                  ?_getContCiclos 0031                 _resetIndicePassos 40F2  
               Wifi_cipsend@F3301 0001                 Wifi_cipsend@F3299 011E  
               ___lmul@multiplier 0031                         copy_data0 3474  
                       copy_data1 3494                       _buscar_dado 3EA2  
   __size_of_salva_atuadores_init 007E                ?_resetIndicePassos 0031  
         __end_of_resetContCiclos 40B4                      ??_initEUSART 0042  
                    _teclado_init 40A0               __end_of_salvar_dado 3F36  
                    _teclado_scan 309C                        _EECON1bits 000FA6  
              __end_of_dignum_tam 3C48               ??_resetIndicePassos 0031  
                        __Hrparam 0000                     _dignum_apagar 3DEC  
                   ler_sensor@ptr 0031                __end_of_fifo_print 21AC  
                   Wifi_cipsend@d 0057                     Wifi_cipsend@i 0056  
                        __Lrparam 0000          ?_manipula_atuadores_init 0031  
                      ?_set_passo 0031             __size_of_serialIOload 0006  
           __size_of_serialIOscan 0058                      getCiclos@aux 0033  
                dispLCD_instReg@i 0032                       _ler_atuador 328E  
                    ??_ler_sensor 0033                     Wifi_connect@i 0058  
                       txEUSART@d 0031                        ?_printExec 004A  
                __size_of___aldiv 010C                       ??_Wifi_mode 0034  
                __size_of___awdiv 00C4                  __size_of___awmod 00B0  
                __size_of___lldiv 00A4                        ?_wifi_init 0046  
                      ?_wifi_send 0032                  __size_of___lwdiv 0074  
                 fp__dispLCD_init 0000                buscar_receita@data 0037  
              buscar_receita@adrs 003B                  dispLCD_num@sinal 0047  
           fifo_alinharPrint@cont 003D       manipula_atuadores_init@mask 0036  
                        _dac_init 3BCE                  __size_of_dispLCD 0048  
             __end_of_timer1_init 3F90                    _rxStatusEUSART 000000  
              __end_of_initEUSART 364A         __end_of_resetIndicePassos 40F8  
                     decodifica@d 0031                          _main$941 0088  
                        _main$950 0094                          _main$951 0096  
                        _main$919 0086                          _main$952 0098  
                        _main$945 008A                          _main$946 008C  
                        _main$947 008E                          _main$956 009A  
                        _main$948 0090                          _main$949 0092  
                ??_dispLCD_lincol 0034             __size_of_Wifi_cipsend 014E  
                 ___lwdiv@divisor 0033             __size_of_Wifi_connect 0138  
                 ___lwdiv@counter 0037                          _codifica 24B0  
                        __ptext10 382C                          __ptext11 40EC  
                        __ptext20 405E                          __ptext12 37D2  
                        __ptext21 40FE                          __ptext13 3B48  
                        __ptext30 3F90                          __ptext22 4070  
                        __ptext14 3F14                          __ptext31 4102  
                        __ptext23 2336                          __ptext15 34EA  
                        __ptext40 332E                          __ptext32 1EC8  
                        __ptext24 398A                          __ptext16 328E  
                        __ptext41 40C8                          __ptext33 2F3C  
                        __ptext25 2BC6                          __ptext17 40F2  
                        __ptext50 3774                          __ptext42 3884  
                        __ptext34 3716                          __ptext26 40B4  
                        __ptext18 40AA                          __ptext51 3D28  
                        __ptext43 3A28                          __ptext35 3FFC  
                        __ptext27 3DBE                          __ptext19 21AC  
                        __ptext60 3568                          __ptext52 40DC  
                        __ptext44 40D2                          __ptext36 4106  
                        __ptext28 40BE                          __ptext61 3CBA  
                        __ptext53 3A70                          __ptext45 38DC  
                        __ptext37 3FA6                          __ptext29 3F58  
                        __ptext70 29CA                          __ptext62 3E1A  
                        __ptext54 36B4                          __ptext46 2CAE  
                        __ptext38 33C8                          __ptext71 2FEC  
                        __ptext63 3B8C                          __ptext55 2AD6  
                        __ptext47 3C0C                          __ptext39 2752  
                        __ptext80 3E48                          __ptext72 2892  
                        __ptext64 3EA2                          __ptext56 39DA  
                        __ptext48 2E78                          __ptext81 3FD2  
                        __ptext73 2604                          __ptext65 3EF0  
                        __ptext57 3AB8                          __ptext49 24B0  
                        __ptext82 4024                          __ptext74 3144  
                        __ptext66 4092                          __ptext58 3ECA  
                        __ptext83 4082                          __ptext75 4010  
                        __ptext67 3FBC                          __ptext59 3DEC  
                        __ptext84 4038                          __ptext76 40E4  
                        __ptext68 40F8                          __ptext85 3C48  
                        __ptext77 3F36                          __ptext69 364A  
                        __ptext86 31EA                          __ptext78 3B00  
                        __ptext79 3BCE                          __ptext88 3D8E  
                        __ptext89 0000                          _fifo_add 38DC  
               ??_addIndicePassos 0031                          _fifo_tam 4102  
                        _ind_fila 005D                       ??_dac_write 0036  
              __end_of_ler_sensor 2CAE                          _rxEUSART 000000  
                   ?_EEPROM_write 0031                      _serialIOload 40EC  
                    _serialIOscan 382C                _rxResetErrorEUSART 000000  
                   __size_of_main 1EB6                          _txEUSART 40E4  
              salvar_receita@data 0037                salvar_receita@adrs 003B  
                  ?_dignum_apagar 0038                          _posAtual 405E  
                    dispLCD_str@c 003B                       ??_getCiclos 0033  
                   _printExec$498 004B                 ??_I2C_ack_receive 0031  
                        int$flags 005E                       ??_fifo_adrs 0033  
              fifo_print@indPrint 003E                     fifo_add@passo 0040  
                        _statusT1 404C                       MCP4725@Vout 004B  
                   dignum_tam@tam 003B                     dignum_tam@num 0039  
                        main@lema 0060                      _Wifi_cipsend 2604  
                    _Wifi_connect 2892                      set_passo@ptr 0031  
  salva_atuadores_init@condi_init 0034                   ??_getContCiclos 0033  
                      _INTCONbits 000FF2                 Wifi_connect@F3287 0100  
                   ?_dispLCD_init 0031            __size_of_addContCiclos 0006  
                    codifica@dado 0031                   _dispLCD_dataReg 39DA  
                    codifica@tipo 0035                       ??_intt1_1ms 0031  
                ?_deletar_receita 0031           __size_of_txStatusEUSART 0014  
               fp__txStatusEUSART 0000                formatar_receitas@i 0033  
                 buscar_dado@data 0038                   buscar_dado@adrs 003C  
                     _salvar_dado 3F14                    fp__dispLCD_clr 0000  
                  fp__dispLCD_num 0000                    fp__dispLCD_str 0000  
               buscar_receita@aux 0039                   dispLCD_num@size 0046  
            fifo_alinharPrint@aux 003F        manipula_atuadores_init@aux 0035  
                 _dispLCD_instReg 2AD6                          intlevel2 0000  
                  ??_EEPROM_write 0032                      fp__Wifi_mode 0000  
                ?_resetContCiclos 0031                  ___lldiv@dividend 0031  
                    ?_EEPROM_read 0031                   _getIndicePassos 40FE  
               dignum_conc@ptrNum 0037                       ??_set_passo 0033  
               fifo_print@comando 0041                       ??_printExec 004B  
        salva_atuadores_init@F108 000F                       _timer1_init 3F76  
                     ??_wifi_init 004A                      _ptrSerialOut 0013  
                     ??_wifi_send 0034                      ?_dispLCD_clr 0031  
                    ?_dispLCD_num 003C                      ?_dispLCD_str 0038  
        __size_of_fifo_disponivel 0016                      ?_alt_atuador 0031  
        salva_atuadores_init@dado 003A                    buscar_dado@col 0037  
                  buscar_dado@aux 003A              fifo_add_ciclo@ciclos 0031  
        salva_atuadores_init@mask 003B                    ??_dispLCD_init 0034  
                ___lldiv@quotient 0039        __size_of_resetIndicePassos 0006  
                    ___aldiv@sign 0046                      ?_dignum_conc 0037  
                     _SSPCON1bits 000FC6                      end_receita@x 0031  
                     _SSPCON2bits 000FC5                  fifo_print@atraso 0040  
                    ?_fifo_delete 0031                       _ptrSerialIn 0015  
                    fifo_lerPos@i 0031                      ?_end_receita 0031  
                    _wifi_receive 000000                      ?_fifo_indice 0031  
                    ?_fifo_lerPos 0031                   buscar_receita@i 003C  
                ??_init_atuadores 0031                   ??_dignum_apagar 003A  
               ?_fifo_add_control 0031                     _addContCiclos 40F8  
                ??_fifo_add_ciclo 0033                       fifo_print@i 003F  
                   fp__initEUSART 0000  
