

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sun Nov 14 18:44:26 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   102                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   103  0000                     
   104                           ; Version 2.20
   105                           ; Generated 12/02/2020 GMT
   106                           ; 
   107                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4550 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     
   139 ;; Function _receita_livre is unused but had its address taken
   140  0000                     
   141                           	psect	idataCOMRAM
   142  0037C4                     __pidataCOMRAM:
   143                           	callstack 0
   144                           
   145                           ;initializer for _teclas
   146  0037C4  31                 	db	49
   147  0037C5  32                 	db	50
   148  0037C6  33                 	db	51
   149  0037C7  41                 	db	65
   150  0037C8  34                 	db	52
   151  0037C9  35                 	db	53
   152  0037CA  36                 	db	54
   153  0037CB  42                 	db	66
   154  0037CC  37                 	db	55
   155  0037CD  38                 	db	56
   156  0037CE  39                 	db	57
   157  0037CF  43                 	db	67
   158  0037D0  2A                 	db	42
   159  0037D1  30                 	db	48
   160  0037D2  23                 	db	35
   161  0037D3  44                 	db	68
   162                           
   163                           ;initializer for _indice_passos
   164  0037D4  02                 	db	2
   165                           
   166                           ;initializer for _ind_print
   167  0037D5  02                 	db	2
   168                           
   169                           ;initializer for _ind_fila
   170  0037D6  02                 	db	2
   171                           
   172                           	psect	idataBANK0
   173  003606                     __pidataBANK0:
   174                           	callstack 0
   175                           
   176                           ;initializer for main@F3405
   177  003606  4D                 	db	77
   178  003607  75                 	db	117
   179  003608  6E                 	db	110
   180  003609  64                 	db	100
   181  00360A  6F                 	db	111
   182  00360B  20                 	db	32
   183  00360C  61                 	db	97
   184  00360D  6F                 	db	111
   185  00360E  20                 	db	32
   186  00360F  73                 	db	115
   187  003610  65                 	db	101
   188  003611  75                 	db	117
   189  003612  20                 	db	32
   190  003613  63                 	db	99
   191  003614  6F                 	db	111
   192  003615  6D                 	db	109
   193  003616  61                 	db	97
   194  003617  6E                 	db	110
   195  003618  64                 	db	100
   196  003619  6F                 	db	111
   197                           
   198                           ;initializer for _EEPROM
   199  00361A  14                 	db	low _salvar_receita
   200  00361B  33                 	db	high _salvar_receita
   201  00361C  58                 	db	low _buscar_receita
   202  00361D  33                 	db	high _buscar_receita
   203  00361E  4E                 	db	low _deletar_receita
   204  00361F  34                 	db	high _deletar_receita
   205  003620  00                 	db	0
   206  003621  00                 	db	0
   207  003622  1C                 	db	low _formatar_receitas
   208  003623  37                 	db	high _formatar_receitas
   209                           
   210                           ;initializer for _IHM
   211  003624  BC                 	db	low _dispLCD_init
   212  003625  34                 	db	high _dispLCD_init
   213  003626  96                 	db	low _dispLCD_str
   214  003627  2F                 	db	high _dispLCD_str
   215  003628  3C                 	db	low _dispLCD
   216  003629  32                 	db	high _dispLCD
   217  00362A  CC                 	db	low _dispLCD_num
   218  00362B  1F                 	db	high _dispLCD_num
   219  00362C  68                 	db	low _dispLCD_clr
   220  00362D  38                 	db	high _dispLCD_clr
   221  0000                     _T1CONbits	set	4045
   222  0000                     _TMR1L	set	4046
   223  0000                     _TMR1H	set	4047
   224  0000                     _TRISD	set	3989
   225  0000                     _PORTD	set	3971
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON2bits	set	4037
   228  0000                     _SSPSTATbits	set	4039
   229  0000                     _SSPADD	set	4040
   230  0000                     _SSPCON1bits	set	4038
   231  0000                     _TRISAbits	set	3986
   232  0000                     _PORTAbits	set	3968
   233  0000                     _EECON2	set	4007
   234  0000                     _EEDATA	set	4008
   235  0000                     _EECON1bits	set	4006
   236  0000                     _EEADR	set	4009
   237  0000                     _TRISBbits	set	3987
   238  0000                     _ADCON1	set	4033
   239  0000                     _PIE1bits	set	3997
   240  0000                     _PIR1bits	set	3998
   241  0000                     _INTCONbits	set	4082
   242                           
   243                           	psect	mediumconst
   244  007D20                     __pmediumconst:
   245                           	callstack 0
   246  007D20  00                 	db	0
   247  007D21                     STR_4:
   248  007D21  31                 	db	49	;'1'
   249  007D22  3A                 	db	58	;':'
   250  007D23  20                 	db	32
   251  007D24  49                 	db	73	;'I'
   252  007D25  4E                 	db	78	;'N'
   253  007D26  53                 	db	83	;'S'
   254  007D27  45                 	db	69	;'E'
   255  007D28  52                 	db	82	;'R'
   256  007D29  49                 	db	73	;'I'
   257  007D2A  52                 	db	82	;'R'
   258  007D2B  20                 	db	32
   259  007D2C  53                 	db	83	;'S'
   260  007D2D  45                 	db	69	;'E'
   261  007D2E  51                 	db	81	;'Q'
   262  007D2F  55                 	db	85	;'U'
   263  007D30  45                 	db	69	;'E'
   264  007D31  4E                 	db	78	;'N'
   265  007D32  43                 	db	67	;'C'
   266  007D33  49                 	db	73	;'I'
   267  007D34  41                 	db	65	;'A'
   268  007D35  0A                 	db	10
   269  007D36  32                 	db	50	;'2'
   270  007D37  3A                 	db	58	;':'
   271  007D38  20                 	db	32
   272  007D39  42                 	db	66	;'B'
   273  007D3A  55                 	db	85	;'U'
   274  007D3B  53                 	db	83	;'S'
   275  007D3C  43                 	db	67	;'C'
   276  007D3D  41                 	db	65	;'A'
   277  007D3E  52                 	db	82	;'R'
   278  007D3F  20                 	db	32
   279  007D40  53                 	db	83	;'S'
   280  007D41  45                 	db	69	;'E'
   281  007D42  51                 	db	81	;'Q'
   282  007D43  55                 	db	85	;'U'
   283  007D44  45                 	db	69	;'E'
   284  007D45  4E                 	db	78	;'N'
   285  007D46  43                 	db	67	;'C'
   286  007D47  49                 	db	73	;'I'
   287  007D48  41                 	db	65	;'A'
   288  007D49  0A                 	db	10
   289  007D4A  33                 	db	51	;'3'
   290  007D4B  3A                 	db	58	;':'
   291  007D4C  20                 	db	32
   292  007D4D  52                 	db	82	;'R'
   293  007D4E  45                 	db	69	;'E'
   294  007D4F  50                 	db	80	;'P'
   295  007D50  45                 	db	69	;'E'
   296  007D51  54                 	db	84	;'T'
   297  007D52  49                 	db	73	;'I'
   298  007D53  52                 	db	82	;'R'
   299  007D54  20                 	db	32
   300  007D55  55                 	db	85	;'U'
   301  007D56  4C                 	db	76	;'L'
   302  007D57  54                 	db	84	;'T'
   303  007D58  2E                 	db	46
   304  007D59  20                 	db	32
   305  007D5A  53                 	db	83	;'S'
   306  007D5B  45                 	db	69	;'E'
   307  007D5C  51                 	db	81	;'Q'
   308  007D5D  55                 	db	85	;'U'
   309  007D5E  0A                 	db	10
   310  007D5F  34                 	db	52	;'4'
   311  007D60  3A                 	db	58	;':'
   312  007D61  20                 	db	32
   313  007D62  43                 	db	67	;'C'
   314  007D63  4F                 	db	79	;'O'
   315  007D64  4E                 	db	78	;'N'
   316  007D65  46                 	db	70	;'F'
   317  007D66  49                 	db	73	;'I'
   318  007D67  47                 	db	71	;'G'
   319  007D68  55                 	db	85	;'U'
   320  007D69  52                 	db	82	;'R'
   321  007D6A  41                 	db	65	;'A'
   322  007D6B  43                 	db	67	;'C'
   323  007D6C  4F                 	db	79	;'O'
   324  007D6D  45                 	db	69	;'E'
   325  007D6E  53                 	db	83	;'S'
   326  007D6F  20                 	db	32
   327  007D70  20                 	db	32
   328  007D71  20                 	db	32
   329  007D72  20                 	db	32
   330  007D73  00                 	db	0
   331  007D74                     STR_15:
   332  007D74  20                 	db	32
   333  007D75  45                 	db	69	;'E'
   334  007D76  53                 	db	83	;'S'
   335  007D77  43                 	db	67	;'C'
   336  007D78  4F                 	db	79	;'O'
   337  007D79  4C                 	db	76	;'L'
   338  007D7A  48                 	db	72	;'H'
   339  007D7B  41                 	db	65	;'A'
   340  007D7C  20                 	db	32
   341  007D7D  41                 	db	65	;'A'
   342  007D7E  20                 	db	32
   343  007D7F  4D                 	db	77	;'M'
   344  007D80  45                 	db	69	;'E'
   345  007D81  4D                 	db	77	;'M'
   346  007D82  4F                 	db	79	;'O'
   347  007D83  52                 	db	82	;'R'
   348  007D84  49                 	db	73	;'I'
   349  007D85  41                 	db	65	;'A'
   350  007D86  20                 	db	32
   351  007D87  0A                 	db	10
   352  007D88  51                 	db	81	;'Q'
   353  007D89  55                 	db	85	;'U'
   354  007D8A  45                 	db	69	;'E'
   355  007D8B  20                 	db	32
   356  007D8C  44                 	db	68	;'D'
   357  007D8D  45                 	db	69	;'E'
   358  007D8E  53                 	db	83	;'S'
   359  007D8F  45                 	db	69	;'E'
   360  007D90  4A                 	db	74	;'J'
   361  007D91  41                 	db	65	;'A'
   362  007D92  20                 	db	32
   363  007D93  45                 	db	69	;'E'
   364  007D94  58                 	db	88	;'X'
   365  007D95  45                 	db	69	;'E'
   366  007D96  43                 	db	67	;'C'
   367  007D97  55                 	db	85	;'U'
   368  007D98  54                 	db	84	;'T'
   369  007D99  41                 	db	65	;'A'
   370  007D9A  52                 	db	82	;'R'
   371  007D9B  0A                 	db	10
   372  007D9C  20                 	db	32
   373  007D9D  30                 	db	48	;'0'
   374  007D9E  20                 	db	32
   375  007D9F  20                 	db	32
   376  007DA0  20                 	db	32
   377  007DA1  31                 	db	49	;'1'
   378  007DA2  20                 	db	32
   379  007DA3  20                 	db	32
   380  007DA4  20                 	db	32
   381  007DA5  32                 	db	50	;'2'
   382  007DA6  20                 	db	32
   383  007DA7  20                 	db	32
   384  007DA8  20                 	db	32
   385  007DA9  33                 	db	51	;'3'
   386  007DAA  20                 	db	32
   387  007DAB  20                 	db	32
   388  007DAC  20                 	db	32
   389  007DAD  34                 	db	52	;'4'
   390  007DAE  20                 	db	32
   391  007DAF  0A                 	db	10
   392  007DB0  20                 	db	32
   393  007DB1  35                 	db	53	;'5'
   394  007DB2  20                 	db	32
   395  007DB3  20                 	db	32
   396  007DB4  20                 	db	32
   397  007DB5  36                 	db	54	;'6'
   398  007DB6  20                 	db	32
   399  007DB7  20                 	db	32
   400  007DB8  20                 	db	32
   401  007DB9  37                 	db	55	;'7'
   402  007DBA  20                 	db	32
   403  007DBB  20                 	db	32
   404  007DBC  20                 	db	32
   405  007DBD  38                 	db	56	;'8'
   406  007DBE  20                 	db	32
   407  007DBF  20                 	db	32
   408  007DC0  20                 	db	32
   409  007DC1  39                 	db	57	;'9'
   410  007DC2  20                 	db	32
   411  007DC3  0A                 	db	10
   412  007DC4  00                 	db	0
   413  007DC5                     STR_27:
   414  007DC5  20                 	db	32
   415  007DC6  45                 	db	69	;'E'
   416  007DC7  53                 	db	83	;'S'
   417  007DC8  43                 	db	67	;'C'
   418  007DC9  4F                 	db	79	;'O'
   419  007DCA  4C                 	db	76	;'L'
   420  007DCB  48                 	db	72	;'H'
   421  007DCC  41                 	db	65	;'A'
   422  007DCD  20                 	db	32
   423  007DCE  41                 	db	65	;'A'
   424  007DCF  20                 	db	32
   425  007DD0  4D                 	db	77	;'M'
   426  007DD1  45                 	db	69	;'E'
   427  007DD2  4D                 	db	77	;'M'
   428  007DD3  4F                 	db	79	;'O'
   429  007DD4  52                 	db	82	;'R'
   430  007DD5  49                 	db	73	;'I'
   431  007DD6  41                 	db	65	;'A'
   432  007DD7  0A                 	db	10
   433  007DD8  20                 	db	32
   434  007DD9  51                 	db	81	;'Q'
   435  007DDA  55                 	db	85	;'U'
   436  007DDB  45                 	db	69	;'E'
   437  007DDC  20                 	db	32
   438  007DDD  44                 	db	68	;'D'
   439  007DDE  45                 	db	69	;'E'
   440  007DDF  53                 	db	83	;'S'
   441  007DE0  45                 	db	69	;'E'
   442  007DE1  4A                 	db	74	;'J'
   443  007DE2  41                 	db	65	;'A'
   444  007DE3  20                 	db	32
   445  007DE4  53                 	db	83	;'S'
   446  007DE5  41                 	db	65	;'A'
   447  007DE6  4C                 	db	76	;'L'
   448  007DE7  56                 	db	86	;'V'
   449  007DE8  41                 	db	65	;'A'
   450  007DE9  52                 	db	82	;'R'
   451  007DEA  0A                 	db	10
   452  007DEB  20                 	db	32
   453  007DEC  30                 	db	48	;'0'
   454  007DED  20                 	db	32
   455  007DEE  20                 	db	32
   456  007DEF  20                 	db	32
   457  007DF0  31                 	db	49	;'1'
   458  007DF1  20                 	db	32
   459  007DF2  20                 	db	32
   460  007DF3  20                 	db	32
   461  007DF4  32                 	db	50	;'2'
   462  007DF5  20                 	db	32
   463  007DF6  20                 	db	32
   464  007DF7  20                 	db	32
   465  007DF8  33                 	db	51	;'3'
   466  007DF9  20                 	db	32
   467  007DFA  20                 	db	32
   468  007DFB  20                 	db	32
   469  007DFC  34                 	db	52	;'4'
   470  007DFD  0A                 	db	10
   471  007DFE  20                 	db	32
   472  007DFF  35                 	db	53	;'5'
   473  007E00  20                 	db	32
   474  007E01  20                 	db	32
   475  007E02  20                 	db	32
   476  007E03  36                 	db	54	;'6'
   477  007E04  20                 	db	32
   478  007E05  20                 	db	32
   479  007E06  20                 	db	32
   480  007E07  37                 	db	55	;'7'
   481  007E08  20                 	db	32
   482  007E09  20                 	db	32
   483  007E0A  20                 	db	32
   484  007E0B  38                 	db	56	;'8'
   485  007E0C  20                 	db	32
   486  007E0D  20                 	db	32
   487  007E0E  20                 	db	32
   488  007E0F  39                 	db	57	;'9'
   489  007E10  20                 	db	32
   490  007E11  20                 	db	32
   491  007E12  00                 	db	0
   492  007E13                     STR_26:
   493  007E13  20                 	db	32
   494  007E14  20                 	db	32
   495  007E15  20                 	db	32
   496  007E16  20                 	db	32
   497  007E17  44                 	db	68	;'D'
   498  007E18  45                 	db	69	;'E'
   499  007E19  53                 	db	83	;'S'
   500  007E1A  45                 	db	69	;'E'
   501  007E1B  4A                 	db	74	;'J'
   502  007E1C  41                 	db	65	;'A'
   503  007E1D  20                 	db	32
   504  007E1E  53                 	db	83	;'S'
   505  007E1F  41                 	db	65	;'A'
   506  007E20  4C                 	db	76	;'L'
   507  007E21  56                 	db	86	;'V'
   508  007E22  41                 	db	65	;'A'
   509  007E23  52                 	db	82	;'R'
   510  007E24  20                 	db	32
   511  007E25  20                 	db	32
   512  007E26  20                 	db	32
   513  007E27  0A                 	db	10
   514  007E28  20                 	db	32
   515  007E29  20                 	db	32
   516  007E2A  20                 	db	32
   517  007E2B  20                 	db	32
   518  007E2C  20                 	db	32
   519  007E2D  53                 	db	83	;'S'
   520  007E2E  45                 	db	69	;'E'
   521  007E2F  51                 	db	81	;'Q'
   522  007E30  55                 	db	85	;'U'
   523  007E31  45                 	db	69	;'E'
   524  007E32  4E                 	db	78	;'N'
   525  007E33  43                 	db	67	;'C'
   526  007E34  49                 	db	73	;'I'
   527  007E35  41                 	db	65	;'A'
   528  007E36  20                 	db	32
   529  007E37  3F                 	db	63	;'?'
   530  007E38  20                 	db	32
   531  007E39  20                 	db	32
   532  007E3A  0A                 	db	10
   533  007E3B  0A                 	db	10
   534  007E3C  23                 	db	35
   535  007E3D  20                 	db	32
   536  007E3E  2D                 	db	45
   537  007E3F  20                 	db	32
   538  007E40  53                 	db	83	;'S'
   539  007E41  49                 	db	73	;'I'
   540  007E42  4D                 	db	77	;'M'
   541  007E43  20                 	db	32
   542  007E44  20                 	db	32
   543  007E45  20                 	db	32
   544  007E46  20                 	db	32
   545  007E47  20                 	db	32
   546  007E48  20                 	db	32
   547  007E49  2A                 	db	42
   548  007E4A  20                 	db	32
   549  007E4B  2D                 	db	45
   550  007E4C  20                 	db	32
   551  007E4D  4E                 	db	78	;'N'
   552  007E4E  41                 	db	65	;'A'
   553  007E4F  4F                 	db	79	;'O'
   554  007E50  00                 	db	0
   555  007E51                     STR_24:
   556  007E51  43                 	db	67	;'C'
   557  007E52  69                 	db	105	;'i'
   558  007E53  63                 	db	99	;'c'
   559  007E54  6C                 	db	108	;'l'
   560  007E55  6F                 	db	111	;'o'
   561  007E56  73                 	db	115	;'s'
   562  007E57  3A                 	db	58	;':'
   563  007E58  20                 	db	32
   564  007E59  20                 	db	32
   565  007E5A  20                 	db	32
   566  007E5B  20                 	db	32
   567  007E5C  20                 	db	32
   568  007E5D  20                 	db	32
   569  007E5E  20                 	db	32
   570  007E5F  20                 	db	32
   571  007E60  20                 	db	32
   572  007E61  20                 	db	32
   573  007E62  20                 	db	32
   574  007E63  20                 	db	32
   575  007E64  20                 	db	32
   576  007E65  00                 	db	0
   577  007E66                     STR_22:
   578  007E66  3C                 	db	60	;'<'
   579  007E67  20                 	db	32
   580  007E68  20                 	db	32
   581  007E69  2F                 	db	47
   582  007E6A  20                 	db	32
   583  007E6B  20                 	db	32
   584  007E6C  3E                 	db	62	;'>'
   585  007E6D  20                 	db	32
   586  007E6E  63                 	db	99	;'c'
   587  007E6F  3A                 	db	58	;':'
   588  007E70  20                 	db	32
   589  007E71  20                 	db	32
   590  007E72  20                 	db	32
   591  007E73  20                 	db	32
   592  007E74  20                 	db	32
   593  007E75  20                 	db	32
   594  007E76  20                 	db	32
   595  007E77  20                 	db	32
   596  007E78  20                 	db	32
   597  007E79  20                 	db	32
   598  007E7A  00                 	db	0
   599  007E7B                     STR_31:
   600  007E7B  20                 	db	32
   601  007E7C  20                 	db	32
   602  007E7D  20                 	db	32
   603  007E7E  20                 	db	32
   604  007E7F  20                 	db	32
   605  007E80  20                 	db	32
   606  007E81  20                 	db	32
   607  007E82  20                 	db	32
   608  007E83  53                 	db	83	;'S'
   609  007E84  41                 	db	65	;'A'
   610  007E85  4C                 	db	76	;'L'
   611  007E86  56                 	db	86	;'V'
   612  007E87  41                 	db	65	;'A'
   613  007E88  20                 	db	32
   614  007E89  20                 	db	32
   615  007E8A  20                 	db	32
   616  007E8B  20                 	db	32
   617  007E8C  20                 	db	32
   618  007E8D  20                 	db	32
   619  007E8E  20                 	db	32
   620  007E8F  00                 	db	0
   621  007E90                     STR_3:
   622  007E90  20                 	db	32
   623  007E91  20                 	db	32
   624  007E92  20                 	db	32
   625  007E93  20                 	db	32
   626  007E94  20                 	db	32
   627  007E95  20                 	db	32
   628  007E96  53                 	db	83	;'S'
   629  007E97  45                 	db	69	;'E'
   630  007E98  47                 	db	71	;'G'
   631  007E99  47                 	db	71	;'G'
   632  007E9A  55                 	db	85	;'U'
   633  007E9B  49                 	db	73	;'I'
   634  007E9C  54                 	db	84	;'T'
   635  007E9D  20                 	db	32
   636  007E9E  20                 	db	32
   637  007E9F  20                 	db	32
   638  007EA0  20                 	db	32
   639  007EA1  20                 	db	32
   640  007EA2  20                 	db	32
   641  007EA3  20                 	db	32
   642  007EA4  00                 	db	0
   643  007EA5                     STR_21:
   644  007EA5  20                 	db	32
   645  007EA6  20                 	db	32
   646  007EA7  20                 	db	32
   647  007EA8  20                 	db	32
   648  007EA9  20                 	db	32
   649  007EAA  20                 	db	32
   650  007EAB  20                 	db	32
   651  007EAC  5B                 	db	91	;'['
   652  007EAD  20                 	db	32
   653  007EAE  20                 	db	32
   654  007EAF  20                 	db	32
   655  007EB0  20                 	db	32
   656  007EB1  5D                 	db	93	;']'
   657  007EB2  20                 	db	32
   658  007EB3  20                 	db	32
   659  007EB4  20                 	db	32
   660  007EB5  20                 	db	32
   661  007EB6  20                 	db	32
   662  007EB7  20                 	db	32
   663  007EB8  20                 	db	32
   664  007EB9  00                 	db	0
   665  007EBA                     STR_13:
   666  007EBA  20                 	db	32
   667  007EBB  20                 	db	32
   668  007EBC  20                 	db	32
   669  007EBD  20                 	db	32
   670  007EBE  20                 	db	32
   671  007EBF  20                 	db	32
   672  007EC0  20                 	db	32
   673  007EC1  44                 	db	68	;'D'
   674  007EC2  45                 	db	69	;'E'
   675  007EC3  4C                 	db	76	;'L'
   676  007EC4  45                 	db	69	;'E'
   677  007EC5  54                 	db	84	;'T'
   678  007EC6  45                 	db	69	;'E'
   679  007EC7  44                 	db	68	;'D'
   680  007EC8  20                 	db	32
   681  007EC9  20                 	db	32
   682  007ECA  20                 	db	32
   683  007ECB  20                 	db	32
   684  007ECC  20                 	db	32
   685  007ECD  20                 	db	32
   686  007ECE  00                 	db	0
   687  007ECF                     STR_14:
   688  007ECF  20                 	db	32
   689  007ED0  20                 	db	32
   690  007ED1  20                 	db	32
   691  007ED2  20                 	db	32
   692  007ED3  20                 	db	32
   693  007ED4  20                 	db	32
   694  007ED5  20                 	db	32
   695  007ED6  20                 	db	32
   696  007ED7  4D                 	db	77	;'M'
   697  007ED8  45                 	db	69	;'E'
   698  007ED9  4D                 	db	77	;'M'
   699  007EDA  4F                 	db	79	;'O'
   700  007EDB  52                 	db	82	;'R'
   701  007EDC  59                 	db	89	;'Y'
   702  007EDD  20                 	db	32
   703  007EDE  20                 	db	32
   704  007EDF  20                 	db	32
   705  007EE0  20                 	db	32
   706  007EE1  20                 	db	32
   707  007EE2  20                 	db	32
   708  007EE3  00                 	db	0
   709  007EE4                     STR_9:
   710  007EE4  20                 	db	32
   711  007EE5  20                 	db	32
   712  007EE6  20                 	db	32
   713  007EE7  20                 	db	32
   714  007EE8  20                 	db	32
   715  007EE9  20                 	db	32
   716  007EEA  4D                 	db	77	;'M'
   717  007EEB  45                 	db	69	;'E'
   718  007EEC  4D                 	db	77	;'M'
   719  007EED  4F                 	db	79	;'O'
   720  007EEE  52                 	db	82	;'R'
   721  007EEF  49                 	db	73	;'I'
   722  007EF0  41                 	db	65	;'A'
   723  007EF1  20                 	db	32
   724  007EF2  3F                 	db	63	;'?'
   725  007EF3  20                 	db	32
   726  007EF4  20                 	db	32
   727  007EF5  20                 	db	32
   728  007EF6  20                 	db	32
   729  007EF7  20                 	db	32
   730  007EF8  00                 	db	0
   731  007EF9                     STR_30:
   732  007EF9  20                 	db	32
   733  007EFA  20                 	db	32
   734  007EFB  20                 	db	32
   735  007EFC  20                 	db	32
   736  007EFD  20                 	db	32
   737  007EFE  20                 	db	32
   738  007EFF  53                 	db	83	;'S'
   739  007F00  45                 	db	69	;'E'
   740  007F01  51                 	db	81	;'Q'
   741  007F02  55                 	db	85	;'U'
   742  007F03  45                 	db	69	;'E'
   743  007F04  4E                 	db	78	;'N'
   744  007F05  43                 	db	67	;'C'
   745  007F06  49                 	db	73	;'I'
   746  007F07  41                 	db	65	;'A'
   747  007F08  20                 	db	32
   748  007F09  20                 	db	32
   749  007F0A  20                 	db	32
   750  007F0B  20                 	db	32
   751  007F0C  20                 	db	32
   752  007F0D  00                 	db	0
   753  007F0E                     STR_17:
   754  007F0E  20                 	db	32
   755  007F0F  20                 	db	32
   756  007F10  20                 	db	32
   757  007F11  20                 	db	32
   758  007F12  20                 	db	32
   759  007F13  44                 	db	68	;'D'
   760  007F14  4F                 	db	79	;'O'
   761  007F15  20                 	db	32
   762  007F16  53                 	db	83	;'S'
   763  007F17  49                 	db	73	;'I'
   764  007F18  53                 	db	83	;'S'
   765  007F19  54                 	db	84	;'T'
   766  007F1A  45                 	db	69	;'E'
   767  007F1B  4D                 	db	77	;'M'
   768  007F1C  41                 	db	65	;'A'
   769  007F1D  20                 	db	32
   770  007F1E  20                 	db	32
   771  007F1F  20                 	db	32
   772  007F20  20                 	db	32
   773  007F21  20                 	db	32
   774  007F22  00                 	db	0
   775  007F23                     STR_18:
   776  007F23  20                 	db	32
   777  007F24  20                 	db	32
   778  007F25  20                 	db	32
   779  007F26  41                 	db	65	;'A'
   780  007F27  20                 	db	32
   781  007F28  20                 	db	32
   782  007F29  20                 	db	32
   783  007F2A  42                 	db	66	;'B'
   784  007F2B  20                 	db	32
   785  007F2C  20                 	db	32
   786  007F2D  20                 	db	32
   787  007F2E  43                 	db	67	;'C'
   788  007F2F  20                 	db	32
   789  007F30  20                 	db	32
   790  007F31  20                 	db	32
   791  007F32  44                 	db	68	;'D'
   792  007F33  20                 	db	32
   793  007F34  20                 	db	32
   794  007F35  20                 	db	32
   795  007F36  20                 	db	32
   796  007F37  00                 	db	0
   797  007F38                     STR_8:
   798  007F38  20                 	db	32
   799  007F39  20                 	db	32
   800  007F3A  20                 	db	32
   801  007F3B  44                 	db	68	;'D'
   802  007F3C  45                 	db	69	;'E'
   803  007F3D  4C                 	db	76	;'L'
   804  007F3E  45                 	db	69	;'E'
   805  007F3F  54                 	db	84	;'T'
   806  007F40  41                 	db	65	;'A'
   807  007F41  52                 	db	82	;'R'
   808  007F42  20                 	db	32
   809  007F43  54                 	db	84	;'T'
   810  007F44  4F                 	db	79	;'O'
   811  007F45  44                 	db	68	;'D'
   812  007F46  41                 	db	65	;'A'
   813  007F47  20                 	db	32
   814  007F48  41                 	db	65	;'A'
   815  007F49  20                 	db	32
   816  007F4A  20                 	db	32
   817  007F4B  20                 	db	32
   818  007F4C  00                 	db	0
   819  007F4D                     STR_6:
   820  007F4D  32                 	db	50	;'2'
   821  007F4E  3A                 	db	58	;':'
   822  007F4F  20                 	db	32
   823  007F50  4C                 	db	76	;'L'
   824  007F51  49                 	db	73	;'I'
   825  007F52  4D                 	db	77	;'M'
   826  007F53  50                 	db	80	;'P'
   827  007F54  41                 	db	65	;'A'
   828  007F55  52                 	db	82	;'R'
   829  007F56  20                 	db	32
   830  007F57  4D                 	db	77	;'M'
   831  007F58  45                 	db	69	;'E'
   832  007F59  4D                 	db	77	;'M'
   833  007F5A  4F                 	db	79	;'O'
   834  007F5B  52                 	db	82	;'R'
   835  007F5C  49                 	db	73	;'I'
   836  007F5D  41                 	db	65	;'A'
   837  007F5E  20                 	db	32
   838  007F5F  20                 	db	32
   839  007F60  20                 	db	32
   840  007F61  00                 	db	0
   841  007F62                     STR_16:
   842  007F62  20                 	db	32
   843  007F63  20                 	db	32
   844  007F64  20                 	db	32
   845  007F65  41                 	db	65	;'A'
   846  007F66  4A                 	db	74	;'J'
   847  007F67  55                 	db	85	;'U'
   848  007F68  53                 	db	83	;'S'
   849  007F69  54                 	db	84	;'T'
   850  007F6A  45                 	db	69	;'E'
   851  007F6B  20                 	db	32
   852  007F6C  4F                 	db	79	;'O'
   853  007F6D  20                 	db	32
   854  007F6E  49                 	db	73	;'I'
   855  007F6F  4E                 	db	78	;'N'
   856  007F70  49                 	db	73	;'I'
   857  007F71  43                 	db	67	;'C'
   858  007F72  49                 	db	73	;'I'
   859  007F73  4F                 	db	79	;'O'
   860  007F74  20                 	db	32
   861  007F75  20                 	db	32
   862  007F76  00                 	db	0
   863  007F77                     STR_19:
   864  007F77  20                 	db	32
   865  007F78  20                 	db	32
   866  007F79  49                 	db	73	;'I'
   867  007F7A  4E                 	db	78	;'N'
   868  007F7B  53                 	db	83	;'S'
   869  007F7C  49                 	db	73	;'I'
   870  007F7D  52                 	db	82	;'R'
   871  007F7E  41                 	db	65	;'A'
   872  007F7F  20                 	db	32
   873  007F80  4F                 	db	79	;'O'
   874  007F81  53                 	db	83	;'S'
   875  007F82  20                 	db	32
   876  007F83  50                 	db	80	;'P'
   877  007F84  41                 	db	65	;'A'
   878  007F85  53                 	db	83	;'S'
   879  007F86  53                 	db	83	;'S'
   880  007F87  4F                 	db	79	;'O'
   881  007F88  53                 	db	83	;'S'
   882  007F89  20                 	db	32
   883  007F8A  20                 	db	32
   884  007F8B  00                 	db	0
   885  007F8C                     STR_25:
   886  007F8C  30                 	db	48	;'0'
   887  007F8D  20                 	db	32
   888  007F8E  2D                 	db	45
   889  007F8F  20                 	db	32
   890  007F90  43                 	db	67	;'C'
   891  007F91  69                 	db	105	;'i'
   892  007F92  63                 	db	99	;'c'
   893  007F93  6C                 	db	108	;'l'
   894  007F94  6F                 	db	111	;'o'
   895  007F95  20                 	db	32
   896  007F96  63                 	db	99	;'c'
   897  007F97  6F                 	db	111	;'o'
   898  007F98  6E                 	db	110	;'n'
   899  007F99  74                 	db	116	;'t'
   900  007F9A  69                 	db	105	;'i'
   901  007F9B  6E                 	db	110	;'n'
   902  007F9C  75                 	db	117	;'u'
   903  007F9D  6F                 	db	111	;'o'
   904  007F9E  20                 	db	32
   905  007F9F  20                 	db	32
   906  007FA0  00                 	db	0
   907  007FA1                     STR_7:
   908  007FA1  20                 	db	32
   909  007FA2  43                 	db	67	;'C'
   910  007FA3  45                 	db	69	;'E'
   911  007FA4  52                 	db	82	;'R'
   912  007FA5  54                 	db	84	;'T'
   913  007FA6  45                 	db	69	;'E'
   914  007FA7  5A                 	db	90	;'Z'
   915  007FA8  41                 	db	65	;'A'
   916  007FA9  20                 	db	32
   917  007FAA  51                 	db	81	;'Q'
   918  007FAB  55                 	db	85	;'U'
   919  007FAC  45                 	db	69	;'E'
   920  007FAD  20                 	db	32
   921  007FAE  44                 	db	68	;'D'
   922  007FAF  45                 	db	69	;'E'
   923  007FB0  53                 	db	83	;'S'
   924  007FB1  45                 	db	69	;'E'
   925  007FB2  4A                 	db	74	;'J'
   926  007FB3  41                 	db	65	;'A'
   927  007FB4  20                 	db	32
   928  007FB5  00                 	db	0
   929  007FB6                     STR_32:
   930  007FB6  63                 	db	99	;'c'
   931  007FB7  6F                 	db	111	;'o'
   932  007FB8  6E                 	db	110	;'n'
   933  007FB9  66                 	db	102	;'f'
   934  007FBA  69                 	db	105	;'i'
   935  007FBB  67                 	db	103	;'g'
   936  007FBC  20                 	db	32
   937  007FBD  63                 	db	99	;'c'
   938  007FBE  6F                 	db	111	;'o'
   939  007FBF  6E                 	db	110	;'n'
   940  007FC0  74                 	db	116	;'t'
   941  007FC1  72                 	db	114	;'r'
   942  007FC2  6C                 	db	108	;'l'
   943  007FC3  3A                 	db	58	;':'
   944  007FC4  20                 	db	32
   945  007FC5  20                 	db	32
   946  007FC6  20                 	db	32
   947  007FC7  20                 	db	32
   948  007FC8  20                 	db	32
   949  007FC9  25                 	db	37
   950  007FCA  00                 	db	0
   951  007FCB                     STR_5:
   952  007FCB  31                 	db	49	;'1'
   953  007FCC  3A                 	db	58	;':'
   954  007FCD  20                 	db	32
   955  007FCE  56                 	db	86	;'V'
   956  007FCF  45                 	db	69	;'E'
   957  007FD0  52                 	db	82	;'R'
   958  007FD1  49                 	db	73	;'I'
   959  007FD2  46                 	db	70	;'F'
   960  007FD3  49                 	db	73	;'I'
   961  007FD4  43                 	db	67	;'C'
   962  007FD5  41                 	db	65	;'A'
   963  007FD6  52                 	db	82	;'R'
   964  007FD7  20                 	db	32
   965  007FD8  4D                 	db	77	;'M'
   966  007FD9  45                 	db	69	;'E'
   967  007FDA  4D                 	db	77	;'M'
   968  007FDB  4F                 	db	79	;'O'
   969  007FDC  52                 	db	82	;'R'
   970  007FDD  49                 	db	73	;'I'
   971  007FDE  41                 	db	65	;'A'
   972  007FDF  00                 	db	0
   973  007FE0                     STR_23:
   974  007FE0  63                 	db	99	;'c'
   975  007FE1  6F                 	db	111	;'o'
   976  007FE2  6E                 	db	110	;'n'
   977  007FE3  66                 	db	102	;'f'
   978  007FE4  69                 	db	105	;'i'
   979  007FE5  67                 	db	103	;'g'
   980  007FE6  20                 	db	32
   981  007FE7  74                 	db	116	;'t'
   982  007FE8  65                 	db	101	;'e'
   983  007FE9  6D                 	db	109	;'m'
   984  007FEA  70                 	db	112	;'p'
   985  007FEB  6F                 	db	111	;'o'
   986  007FEC  3A                 	db	58	;':'
   987  007FED  20                 	db	32
   988  007FEE  20                 	db	32
   989  007FEF  20                 	db	32
   990  007FF0  20                 	db	32
   991  007FF1  20                 	db	32
   992  007FF2  20                 	db	32
   993  007FF3  73                 	db	115	;'s'
   994  007FF4  00                 	db	0
   995  007FF5                     STR_20:
   996  007FF5  3C                 	db	60	;'<'
   997  007FF6  20                 	db	32
   998  007FF7  20                 	db	32
   999  007FF8  2F                 	db	47
  1000  007FF9  20                 	db	32
  1001  007FFA  20                 	db	32
  1002  007FFB  3E                 	db	62	;'>'
  1003  007FFC  00                 	db	0
  1004  007FFD                     STR_1:
  1005  007FFD  FF                 	db	-1
  1006  007FFE  00                 	db	0
  1007  007FFF  00                 	db	0	; dummy byte at the end
  1008  0000                     
  1009                           ; #config settings
  1010                           
  1011                           	psect	cinit
  1012  002ED8                     __pcinit:
  1013                           	callstack 0
  1014  002ED8                     start_initialization:
  1015                           	callstack 0
  1016  002ED8                     __initialization:
  1017                           	callstack 0
  1018                           
  1019                           ; Initialize objects allocated to BANK0 (40 bytes)
  1020                           ; load TBLPTR registers with __pidataBANK0
  1021  002ED8  0E06               	movlw	low __pidataBANK0
  1022  002EDA  6EF6               	movwf	tblptrl,c
  1023  002EDC  0E36               	movlw	high __pidataBANK0
  1024  002EDE  6EF7               	movwf	tblptrh,c
  1025  002EE0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1026  002EE2  6EF8               	movwf	tblptru,c
  1027  002EE4  EE00  F0B9         	lfsr	0,__pdataBANK0
  1028  002EE8  EE10 F028          	lfsr	1,40
  1029  002EEC                     copy_data0:
  1030  002EEC  0009               	tblrd		*+
  1031  002EEE  CFF5 FFEE          	movff	tablat,postinc0
  1032  002EF2  50E5               	movf	postdec1,w,c
  1033  002EF4  50E1               	movf	fsr1l,w,c
  1034  002EF6  E1FA               	bnz	copy_data0
  1035                           
  1036                           ; Initialize objects allocated to COMRAM (19 bytes)
  1037                           ; load TBLPTR registers with __pidataCOMRAM
  1038  002EF8  0EC4               	movlw	low __pidataCOMRAM
  1039  002EFA  6EF6               	movwf	tblptrl,c
  1040  002EFC  0E37               	movlw	high __pidataCOMRAM
  1041  002EFE  6EF7               	movwf	tblptrh,c
  1042  002F00  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1043  002F02  6EF8               	movwf	tblptru,c
  1044  002F04  EE00  F046         	lfsr	0,__pdataCOMRAM
  1045  002F08  EE10 F013          	lfsr	1,19
  1046  002F0C                     copy_data1:
  1047  002F0C  0009               	tblrd		*+
  1048  002F0E  CFF5 FFEE          	movff	tablat,postinc0
  1049  002F12  50E5               	movf	postdec1,w,c
  1050  002F14  50E1               	movf	fsr1l,w,c
  1051  002F16  E1FA               	bnz	copy_data1
  1052                           
  1053                           ; Clear objects allocated to BANK0 (2 bytes)
  1054  002F18  0100               	movlb	0
  1055  002F1A  6BE2               	clrf	(__pbssBANK0+1)& (0+255),b
  1056  002F1C  6BE1               	clrf	__pbssBANK0& (0+255),b
  1057                           
  1058                           ; Clear objects allocated to COMRAM (37 bytes)
  1059  002F1E  EE00  F001         	lfsr	0,__pbssCOMRAM
  1060  002F22  0E25               	movlw	37
  1061  002F24                     clear_0:
  1062  002F24  6AEE               	clrf	postinc0,c
  1063  002F26  06E8               	decf	wreg,f,c
  1064  002F28  E1FD               	bnz	clear_0
  1065  002F2A                     end_of_initialization:
  1066                           	callstack 0
  1067  002F2A                     __end_of__initialization:
  1068                           	callstack 0
  1069  002F2A  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1070  002F2C  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1071  002F2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1072  002F30  6EF8               	movwf	tblptru,c
  1073  002F32  0100               	movlb	0
  1074  002F34  EF09  F000         	goto	_main	;jump to C main() function
  1075                           
  1076                           	psect	bssCOMRAM
  1077  000001                     __pbssCOMRAM:
  1078                           	callstack 0
  1079  000001                     _t1cont:
  1080                           	callstack 0
  1081  000001                     	ds	4
  1082  000005                     	ds	4
  1083  000009                     _ptrSerialOut:
  1084                           	callstack 0
  1085  000009                     	ds	2
  1086  00000B                     _ptrSerialIn:
  1087                           	callstack 0
  1088  00000B                     	ds	2
  1089  00000D                     _cont_ciclos:
  1090                           	callstack 0
  1091  00000D                     	ds	2
  1092  00000F                     _ciclos:
  1093                           	callstack 0
  1094  00000F                     	ds	2
  1095  000011                     _teclaAnterior:
  1096                           	callstack 0
  1097  000011                     	ds	1
  1098  000012                     _lenSerialIO:
  1099                           	callstack 0
  1100  000012                     	ds	1
  1101  000013                     _atuador:
  1102                           	callstack 0
  1103  000013                     	ds	1
  1104  000014                     _fila:
  1105                           	callstack 0
  1106  000014                     	ds	18
  1107                           
  1108                           	psect	dataCOMRAM
  1109  000046                     __pdataCOMRAM:
  1110                           	callstack 0
  1111  000046                     _teclas:
  1112                           	callstack 0
  1113  000046                     	ds	16
  1114  000056                     _indice_passos:
  1115                           	callstack 0
  1116  000056                     	ds	1
  1117  000057                     _ind_print:
  1118                           	callstack 0
  1119  000057                     	ds	1
  1120  000058                     _ind_fila:
  1121                           	callstack 0
  1122  000058                     	ds	1
  1123                           
  1124                           	psect	bssBANK0
  1125  0000E1                     __pbssBANK0:
  1126                           	callstack 0
  1127  0000E1                     	ds	1
  1128  0000E2                     	ds	1
  1129                           
  1130                           	psect	dataBANK0
  1131  0000B9                     __pdataBANK0:
  1132                           	callstack 0
  1133  0000B9                     main@F3405:
  1134                           	callstack 0
  1135  0000B9                     	ds	20
  1136  0000CD                     _EEPROM:
  1137                           	callstack 0
  1138  0000CD                     	ds	10
  1139  0000D7                     _IHM:
  1140                           	callstack 0
  1141  0000D7                     	ds	10
  1142                           
  1143                           	psect	cstackBANK0
  1144  000060                     __pcstackBANK0:
  1145                           	callstack 0
  1146  000060                     main@lema:
  1147                           	callstack 0
  1148                           
  1149                           ; 20 bytes @ 0x0
  1150  000060                     	ds	20
  1151  000074                     main@vetor_aux:
  1152                           	callstack 0
  1153                           
  1154                           ; 16 bytes @ 0x14
  1155  000074                     	ds	16
  1156  000084                     main@contPassos:
  1157                           	callstack 0
  1158                           
  1159                           ; 1 bytes @ 0x24
  1160  000084                     	ds	1
  1161  000085                     main@aux:
  1162                           	callstack 0
  1163                           
  1164                           ; 1 bytes @ 0x25
  1165  000085                     	ds	1
  1166  000086                     main@pt:
  1167                           	callstack 0
  1168                           
  1169                           ; 2 bytes @ 0x26
  1170  000086                     	ds	2
  1171  000088                     _main$563:
  1172                           	callstack 0
  1173                           
  1174                           ; 2 bytes @ 0x28
  1175  000088                     	ds	2
  1176  00008A                     _main$567:
  1177                           	callstack 0
  1178                           
  1179                           ; 2 bytes @ 0x2A
  1180  00008A                     	ds	2
  1181  00008C                     _main$568:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x2C
  1185  00008C                     	ds	2
  1186  00008E                     _main$569:
  1187                           	callstack 0
  1188                           
  1189                           ; 2 bytes @ 0x2E
  1190  00008E                     	ds	2
  1191  000090                     _main$570:
  1192                           	callstack 0
  1193                           
  1194                           ; 2 bytes @ 0x30
  1195  000090                     	ds	2
  1196  000092                     _main$571:
  1197                           	callstack 0
  1198                           
  1199                           ; 2 bytes @ 0x32
  1200  000092                     	ds	2
  1201  000094                     _main$572:
  1202                           	callstack 0
  1203                           
  1204                           ; 2 bytes @ 0x34
  1205  000094                     	ds	2
  1206  000096                     _main$573:
  1207                           	callstack 0
  1208                           
  1209                           ; 2 bytes @ 0x36
  1210  000096                     	ds	2
  1211  000098                     _main$574:
  1212                           	callstack 0
  1213                           
  1214                           ; 2 bytes @ 0x38
  1215  000098                     	ds	2
  1216  00009A                     _main$576:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x3A
  1220  00009A                     	ds	2
  1221  00009C                     main@i_542:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x3C
  1225  00009C                     	ds	1
  1226  00009D                     main@ptr:
  1227                           	callstack 0
  1228                           
  1229                           ; 2 bytes @ 0x3D
  1230  00009D                     	ds	2
  1231  00009F                     main@i:
  1232                           	callstack 0
  1233                           
  1234                           ; 1 bytes @ 0x3F
  1235  00009F                     	ds	1
  1236  0000A0                     main@j:
  1237                           	callstack 0
  1238                           
  1239                           ; 1 bytes @ 0x40
  1240  0000A0                     	ds	1
  1241  0000A1                     main@i_536:
  1242                           	callstack 0
  1243                           
  1244                           ; 1 bytes @ 0x41
  1245  0000A1                     	ds	1
  1246  0000A2                     main@j_537:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x42
  1250  0000A2                     	ds	1
  1251  0000A3                     main@i_552:
  1252                           	callstack 0
  1253                           
  1254                           ; 1 bytes @ 0x43
  1255  0000A3                     	ds	1
  1256  0000A4                     main@j_553:
  1257                           	callstack 0
  1258                           
  1259                           ; 1 bytes @ 0x44
  1260  0000A4                     	ds	1
  1261  0000A5                     main@i_555:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x45
  1265  0000A5                     	ds	1
  1266  0000A6                     main@j_556:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x46
  1270  0000A6                     	ds	1
  1271  0000A7                     main@i_585:
  1272                           	callstack 0
  1273                           
  1274                           ; 1 bytes @ 0x47
  1275  0000A7                     	ds	1
  1276  0000A8                     main@j_586:
  1277                           	callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x48
  1280  0000A8                     	ds	1
  1281  0000A9                     main@i_588:
  1282                           	callstack 0
  1283                           
  1284                           ; 1 bytes @ 0x49
  1285  0000A9                     	ds	1
  1286  0000AA                     main@j_589:
  1287                           	callstack 0
  1288                           
  1289                           ; 1 bytes @ 0x4A
  1290  0000AA                     	ds	1
  1291  0000AB                     main@init_cond:
  1292                           	callstack 0
  1293                           
  1294                           ; 1 bytes @ 0x4B
  1295  0000AB                     	ds	1
  1296  0000AC                     main@vetorIn:
  1297                           	callstack 0
  1298                           
  1299                           ; 1 bytes @ 0x4C
  1300  0000AC                     	ds	1
  1301  0000AD                     main@vetorOut:
  1302                           	callstack 0
  1303                           
  1304                           ; 1 bytes @ 0x4D
  1305  0000AD                     	ds	1
  1306  0000AE                     main@meAtuadores:
  1307                           	callstack 0
  1308                           
  1309                           ; 1 bytes @ 0x4E
  1310  0000AE                     	ds	1
  1311  0000AF                     main@ciclos:
  1312                           	callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x4F
  1315  0000AF                     	ds	2
  1316  0000B1                     main@botao:
  1317                           	callstack 0
  1318                           
  1319                           ; 1 bytes @ 0x51
  1320  0000B1                     	ds	1
  1321  0000B2                     main@num:
  1322                           	callstack 0
  1323                           
  1324                           ; 2 bytes @ 0x52
  1325  0000B2                     	ds	2
  1326  0000B4                     main@ptr_562:
  1327                           	callstack 0
  1328                           
  1329                           ; 2 bytes @ 0x54
  1330  0000B4                     	ds	2
  1331  0000B6                     main@estado:
  1332                           	callstack 0
  1333                           
  1334                           ; 1 bytes @ 0x56
  1335  0000B6                     	ds	1
  1336  0000B7                     main@auxPasso:
  1337                           	callstack 0
  1338                           
  1339                           ; 1 bytes @ 0x57
  1340  0000B7                     	ds	1
  1341  0000B8                     main@tecla:
  1342                           	callstack 0
  1343                           
  1344                           ; 1 bytes @ 0x58
  1345  0000B8                     	ds	1
  1346                           
  1347                           	psect	cstackCOMRAM
  1348  000026                     __pcstackCOMRAM:
  1349                           	callstack 0
  1350  000026                     ??_dispLCD_dataReg:
  1351  000026                     ??_alt_atuador:
  1352  000026                     ??_ler_atuador:
  1353  000026                     ??_fifo_indicePrint_inc:
  1354  000026                     ??_dispLCD_instReg:
  1355  000026                     ??_teclado_scan:
  1356  000026                     ?_getContCiclos:
  1357                           	callstack 0
  1358  000026                     ?_fifo_adrs:
  1359                           	callstack 0
  1360  000026                     ?_getCiclos:
  1361                           	callstack 0
  1362  000026                     ?_end_receita:
  1363                           	callstack 0
  1364  000026                     ?___wmul:
  1365                           	callstack 0
  1366  000026                     ?___awdiv:
  1367                           	callstack 0
  1368  000026                     ?___awmod:
  1369                           	callstack 0
  1370  000026                     ?___lwdiv:
  1371                           	callstack 0
  1372  000026                     ?_statusT1:
  1373                           	callstack 0
  1374  000026                     ?___lmul:
  1375                           	callstack 0
  1376  000026                     ?___lldiv:
  1377                           	callstack 0
  1378  000026                     EEPROM_read@addr:
  1379                           	callstack 0
  1380  000026                     EEPROM_write@data:
  1381                           	callstack 0
  1382  000026                     fifo_lerPos@i:
  1383                           	callstack 0
  1384  000026                     serialIObyteShift@dataIn:
  1385                           	callstack 0
  1386  000026                     I2C_tx@b:
  1387                           	callstack 0
  1388  000026                     set_passo@ptr:
  1389                           	callstack 0
  1390  000026                     ler_sensor@ptr:
  1391                           	callstack 0
  1392  000026                     delay@t:
  1393                           	callstack 0
  1394  000026                     end_receita@x:
  1395                           	callstack 0
  1396  000026                     codifica@dado:
  1397                           	callstack 0
  1398  000026                     decodifica@d:
  1399                           	callstack 0
  1400  000026                     fifo_add_ciclo@ciclos:
  1401                           	callstack 0
  1402  000026                     initSerialIO@ptrIn:
  1403                           	callstack 0
  1404  000026                     ___wmul@multiplier:
  1405                           	callstack 0
  1406  000026                     ___awdiv@dividend:
  1407                           	callstack 0
  1408  000026                     ___awmod@dividend:
  1409                           	callstack 0
  1410  000026                     ___lwdiv@dividend:
  1411                           	callstack 0
  1412  000026                     ___lmul@multiplier:
  1413                           	callstack 0
  1414  000026                     ___lldiv@dividend:
  1415                           	callstack 0
  1416                           
  1417                           ; 4 bytes @ 0x0
  1418  000026                     	ds	1
  1419  000027                     dispLCD_instReg@i:
  1420                           	callstack 0
  1421  000027                     dispLCD_dataReg@d:
  1422                           	callstack 0
  1423  000027                     EEPROM_write@addr:
  1424                           	callstack 0
  1425  000027                     posAtual@ind:
  1426                           	callstack 0
  1427  000027                     serialIObyteShift@dataOut:
  1428                           	callstack 0
  1429                           
  1430                           ; 1 bytes @ 0x1
  1431  000027                     	ds	1
  1432  000028                     ??_delay:
  1433  000028                     ??_decodifica:
  1434  000028                     ??_set_passo:
  1435  000028                     ??_ler_sensor:
  1436  000028                     ??_codifica:
  1437  000028                     ??_end_receita:
  1438  000028                     dispLCD_lincol@col:
  1439                           	callstack 0
  1440  000028                     formatar_receitas@i:
  1441                           	callstack 0
  1442  000028                     ler_atuador@tecla:
  1443                           	callstack 0
  1444  000028                     alt_atuador@tecla:
  1445                           	callstack 0
  1446  000028                     posAtual@passo:
  1447                           	callstack 0
  1448  000028                     serialIObyteShift@dataBit:
  1449                           	callstack 0
  1450  000028                     teclado_scan@tecla:
  1451                           	callstack 0
  1452  000028                     getCiclos@aux:
  1453                           	callstack 0
  1454  000028                     initSerialIO@ptrOut:
  1455                           	callstack 0
  1456  000028                     ___wmul@multiplicand:
  1457                           	callstack 0
  1458  000028                     ___awdiv@divisor:
  1459                           	callstack 0
  1460  000028                     ___awmod@divisor:
  1461                           	callstack 0
  1462  000028                     ___lwdiv@divisor:
  1463                           	callstack 0
  1464                           
  1465                           ; 2 bytes @ 0x2
  1466  000028                     	ds	1
  1467  000029                     ??_dispLCD_lincol:
  1468  000029                     ??_serialIOscan:
  1469  000029                     manipula_atuadores_init@atuador:
  1470                           	callstack 0
  1471  000029                     teclado_scan@l:
  1472                           	callstack 0
  1473  000029                     dac_write@code:
  1474                           	callstack 0
  1475  000029                     salva_atuadores_init@condi_init:
  1476                           	callstack 0
  1477                           
  1478                           ; 4 bytes @ 0x3
  1479  000029                     	ds	1
  1480  00002A                     set_passo@passo:
  1481                           	callstack 0
  1482  00002A                     ler_sensor@passo:
  1483                           	callstack 0
  1484  00002A                     manipula_atuadores_init@aux:
  1485                           	callstack 0
  1486  00002A                     codifica@tipo:
  1487                           	callstack 0
  1488  00002A                     initSerialIO@length:
  1489                           	callstack 0
  1490  00002A                     teclado_scan@c:
  1491                           	callstack 0
  1492  00002A                     ___awdiv@counter:
  1493                           	callstack 0
  1494  00002A                     ___awmod@counter:
  1495                           	callstack 0
  1496  00002A                     deletar_receita@aux:
  1497                           	callstack 0
  1498  00002A                     ___wmul@product:
  1499                           	callstack 0
  1500  00002A                     ___lwdiv@quotient:
  1501                           	callstack 0
  1502  00002A                     ___lmul@multiplicand:
  1503                           	callstack 0
  1504  00002A                     ___lldiv@divisor:
  1505                           	callstack 0
  1506                           
  1507                           ; 4 bytes @ 0x4
  1508  00002A                     	ds	1
  1509  00002B                     ??_dac_write:
  1510  00002B                     dispLCD_lincol@lin:
  1511                           	callstack 0
  1512  00002B                     manipula_atuadores_init@mask:
  1513                           	callstack 0
  1514  00002B                     serialIOscan@j:
  1515                           	callstack 0
  1516  00002B                     teclado_borda@aux:
  1517                           	callstack 0
  1518  00002B                     ___awdiv@sign:
  1519                           	callstack 0
  1520  00002B                     ___awmod@sign:
  1521                           	callstack 0
  1522                           
  1523                           ; 1 bytes @ 0x5
  1524  00002B                     	ds	1
  1525  00002C                     dispLCD_lincol@aux:
  1526                           	callstack 0
  1527  00002C                     salvar_dado@col:
  1528                           	callstack 0
  1529  00002C                     buscar_dado@col:
  1530                           	callstack 0
  1531  00002C                     deletar_receita@receita:
  1532                           	callstack 0
  1533  00002C                     serialIOscan@i:
  1534                           	callstack 0
  1535  00002C                     teclado_borda@tecla:
  1536                           	callstack 0
  1537  00002C                     ___lwdiv@counter:
  1538                           	callstack 0
  1539  00002C                     salvar_receita@data:
  1540                           	callstack 0
  1541  00002C                     buscar_receita@data:
  1542                           	callstack 0
  1543  00002C                     dignum_conc@ptrNum:
  1544                           	callstack 0
  1545  00002C                     ___awdiv@quotient:
  1546                           	callstack 0
  1547  00002C                     setT1@c:
  1548                           	callstack 0
  1549                           
  1550                           ; 4 bytes @ 0x6
  1551  00002C                     	ds	1
  1552  00002D                     dispLCD@col:
  1553                           	callstack 0
  1554  00002D                     salvar_dado@data:
  1555                           	callstack 0
  1556  00002D                     deletar_receita@i:
  1557                           	callstack 0
  1558  00002D                     dispLCD_str@str:
  1559                           	callstack 0
  1560  00002D                     buscar_dado@data:
  1561                           	callstack 0
  1562  00002D                     salva_atuadores_init@pt:
  1563                           	callstack 0
  1564  00002D                     dignum_apagar@ptrNum:
  1565                           	callstack 0
  1566                           
  1567                           ; 2 bytes @ 0x7
  1568  00002D                     	ds	1
  1569  00002E                     ??_fifo_print:
  1570  00002E                     ??_dignum_conc:
  1571  00002E                     dispLCD@str:
  1572                           	callstack 0
  1573  00002E                     salvar_receita@aux:
  1574                           	callstack 0
  1575  00002E                     buscar_receita@aux:
  1576                           	callstack 0
  1577  00002E                     salvar_dado@aux:
  1578                           	callstack 0
  1579  00002E                     dignum_tam@num:
  1580                           	callstack 0
  1581  00002E                     ___lmul@product:
  1582                           	callstack 0
  1583  00002E                     ___lldiv@quotient:
  1584                           	callstack 0
  1585                           
  1586                           ; 4 bytes @ 0x8
  1587  00002E                     	ds	1
  1588  00002F                     dispLCD_str@lin:
  1589                           	callstack 0
  1590  00002F                     salva_atuadores_init@dado:
  1591                           	callstack 0
  1592  00002F                     buscar_dado@aux:
  1593                           	callstack 0
  1594                           
  1595                           ; 2 bytes @ 0x9
  1596  00002F                     	ds	1
  1597  000030                     dispLCD@pos:
  1598                           	callstack 0
  1599  000030                     dispLCD_str@c:
  1600                           	callstack 0
  1601  000030                     salvar_receita@adrs:
  1602                           	callstack 0
  1603  000030                     buscar_receita@adrs:
  1604                           	callstack 0
  1605  000030                     salvar_dado@adrs:
  1606                           	callstack 0
  1607  000030                     salva_atuadores_init@mask:
  1608                           	callstack 0
  1609  000030                     dignum_conc@dig:
  1610                           	callstack 0
  1611  000030                     dignum_tam@tam:
  1612                           	callstack 0
  1613  000030                     _fifo_print$944:
  1614                           	callstack 0
  1615                           
  1616                           ; 2 bytes @ 0xA
  1617  000030                     	ds	1
  1618  000031                     ??_fifo_alinharPrint:
  1619  000031                     dispLCD@lin:
  1620                           	callstack 0
  1621  000031                     dispLCD_num@col:
  1622                           	callstack 0
  1623  000031                     salvar_receita@i:
  1624                           	callstack 0
  1625  000031                     buscar_receita@i:
  1626                           	callstack 0
  1627  000031                     buscar_dado@adrs:
  1628                           	callstack 0
  1629                           
  1630                           ; 1 bytes @ 0xB
  1631  000031                     	ds	1
  1632  000032                     ?___aldiv:
  1633                           	callstack 0
  1634  000032                     fifo_print@completar:
  1635                           	callstack 0
  1636  000032                     fifo_alinharPrint@cont:
  1637                           	callstack 0
  1638  000032                     ___lldiv@counter:
  1639                           	callstack 0
  1640  000032                     dispLCD_num@num:
  1641                           	callstack 0
  1642  000032                     ___aldiv@dividend:
  1643                           	callstack 0
  1644                           
  1645                           ; 4 bytes @ 0xC
  1646  000032                     	ds	1
  1647  000033                     fifo_print@indPrint:
  1648                           	callstack 0
  1649  000033                     fifo_alinharPrint@i:
  1650                           	callstack 0
  1651  000033                     I2C_init@freq:
  1652                           	callstack 0
  1653                           
  1654                           ; 4 bytes @ 0xD
  1655  000033                     	ds	1
  1656  000034                     dispLCD_num@tam:
  1657                           	callstack 0
  1658  000034                     fifo_print@i:
  1659                           	callstack 0
  1660  000034                     fifo_alinharPrint@aux:
  1661                           	callstack 0
  1662                           
  1663                           ; 1 bytes @ 0xE
  1664  000034                     	ds	1
  1665  000035                     ??_dispLCD_num:
  1666  000035                     ??_fifo_delete:
  1667  000035                     fifo_add@passo:
  1668                           	callstack 0
  1669  000035                     fifo_add_tempo@t:
  1670                           	callstack 0
  1671  000035                     fifo_add_control@c:
  1672                           	callstack 0
  1673  000035                     fifo_print@atraso:
  1674                           	callstack 0
  1675                           
  1676                           ; 1 bytes @ 0xF
  1677  000035                     	ds	1
  1678  000036                     fifo_print@comando:
  1679                           	callstack 0
  1680  000036                     ___aldiv@divisor:
  1681                           	callstack 0
  1682                           
  1683                           ; 4 bytes @ 0x10
  1684  000036                     	ds	1
  1685  000037                     
  1686                           ; 1 bytes @ 0x11
  1687  000037                     	ds	3
  1688  00003A                     dispLCD_num@lin:
  1689                           	callstack 0
  1690  00003A                     ___aldiv@counter:
  1691                           	callstack 0
  1692                           
  1693                           ; 1 bytes @ 0x14
  1694  00003A                     	ds	1
  1695  00003B                     dispLCD_num@size:
  1696                           	callstack 0
  1697  00003B                     ___aldiv@sign:
  1698                           	callstack 0
  1699                           
  1700                           ; 1 bytes @ 0x15
  1701  00003B                     	ds	1
  1702  00003C                     dispLCD_num@sinal:
  1703                           	callstack 0
  1704  00003C                     ___aldiv@quotient:
  1705                           	callstack 0
  1706                           
  1707                           ; 4 bytes @ 0x16
  1708  00003C                     	ds	1
  1709  00003D                     dispLCD_num@div:
  1710                           	callstack 0
  1711                           
  1712                           ; 2 bytes @ 0x17
  1713  00003D                     	ds	2
  1714  00003F                     printExec@ind:
  1715                           	callstack 0
  1716                           
  1717                           ; 1 bytes @ 0x19
  1718  00003F                     	ds	1
  1719  000040                     _printExec$966:
  1720                           	callstack 0
  1721  000040                     MCP4725@Vout:
  1722                           	callstack 0
  1723                           
  1724                           ; 2 bytes @ 0x1A
  1725  000040                     	ds	2
  1726  000042                     printExec@col:
  1727                           	callstack 0
  1728                           
  1729                           ; 1 bytes @ 0x1C
  1730  000042                     	ds	1
  1731  000043                     printExec@passo:
  1732                           	callstack 0
  1733                           
  1734                           ; 1 bytes @ 0x1D
  1735  000043                     	ds	1
  1736  000044                     ??_main:
  1737                           
  1738                           ; 1 bytes @ 0x1E
  1739  000044                     	ds	2
  1740                           
  1741 ;;
  1742 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1743 ;;
  1744 ;; *************** function _main *****************
  1745 ;; Defined at:
  1746 ;;		line 69 in file "main.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  j               1   74[BANK0 ] unsigned char 
  1751 ;;  j               1   72[BANK0 ] unsigned char 
  1752 ;;  j               1   70[BANK0 ] unsigned char 
  1753 ;;  j               1   68[BANK0 ] unsigned char 
  1754 ;;  j               1   66[BANK0 ] unsigned char 
  1755 ;;  j               1   64[BANK0 ] unsigned char 
  1756 ;;  ptr             2   84[BANK0 ] PTR unsigned char 
  1757 ;;		 -> main@vetor_aux(16), 
  1758 ;;  i               1   73[BANK0 ] unsigned char 
  1759 ;;  i               1   71[BANK0 ] unsigned char 
  1760 ;;  i               1   69[BANK0 ] unsigned char 
  1761 ;;  i               1   67[BANK0 ] unsigned char 
  1762 ;;  i               1   65[BANK0 ] unsigned char 
  1763 ;;  i               1   63[BANK0 ] unsigned char 
  1764 ;;  lema           20    0[BANK0 ] unsigned char [20]
  1765 ;;  ptr             2   61[BANK0 ] PTR unsigned char 
  1766 ;;		 -> main@lema(20), 
  1767 ;;  i               1   60[BANK0 ] unsigned char 
  1768 ;;  vetor_aux      16   20[BANK0 ] unsigned char [16]
  1769 ;;  num             2   82[BANK0 ] unsigned int 
  1770 ;;  ciclos          2   79[BANK0 ] unsigned int 
  1771 ;;  pt              2   38[BANK0 ] PTR unsigned char 
  1772 ;;		 -> main@vetor_aux(16), 
  1773 ;;  tecla           1   88[BANK0 ] unsigned char 
  1774 ;;  auxPasso        1   87[BANK0 ] unsigned char 
  1775 ;;  estado          1   86[BANK0 ] unsigned char 
  1776 ;;  botao           1   81[BANK0 ] unsigned char 
  1777 ;;  meAtuadores     1   78[BANK0 ] unsigned char 
  1778 ;;  vetorOut        1   77[BANK0 ] unsigned char [1]
  1779 ;;  vetorIn         1   76[BANK0 ] unsigned char [1]
  1780 ;;  init_cond       1   75[BANK0 ] unsigned char 
  1781 ;;  aux             1   37[BANK0 ] unsigned char 
  1782 ;;  contPassos      1   36[BANK0 ] unsigned char 
  1783 ;;  atuador         1    0        unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0
  1794 ;;      Locals:         0      89       0       0       0       0       0       0       0
  1795 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1796 ;;      Totals:         2      89       0       0       0       0       0       0       0
  1797 ;;Total ram usage:       91 bytes
  1798 ;; Hardware stack levels required when called:    6
  1799 ;; This function calls:
  1800 ;;		_I2C_init
  1801 ;;		_MCP4725
  1802 ;;		___aldiv
  1803 ;;		___awmod
  1804 ;;		___lmul
  1805 ;;		___wmul
  1806 ;;		_addContCiclos
  1807 ;;		_addIndicePassos
  1808 ;;		_alt_atuador
  1809 ;;		_buscar_dado
  1810 ;;		_buscar_receita
  1811 ;;		_decodifica
  1812 ;;		_delay
  1813 ;;		_deletar_receita
  1814 ;;		_dignum_apagar
  1815 ;;		_dignum_conc
  1816 ;;		_dispLCD
  1817 ;;		_dispLCD_clr
  1818 ;;		_dispLCD_dataReg
  1819 ;;		_dispLCD_init
  1820 ;;		_dispLCD_lincol
  1821 ;;		_dispLCD_num
  1822 ;;		_dispLCD_str
  1823 ;;		_fifo_add
  1824 ;;		_fifo_add_ciclo
  1825 ;;		_fifo_add_control
  1826 ;;		_fifo_add_tempo
  1827 ;;		_fifo_adrs
  1828 ;;		_fifo_delete
  1829 ;;		_fifo_disponivel
  1830 ;;		_fifo_indice
  1831 ;;		_fifo_indicePrint_dec
  1832 ;;		_fifo_indicePrint_inc
  1833 ;;		_fifo_lerPos
  1834 ;;		_fifo_print
  1835 ;;		_fifo_tam
  1836 ;;		_formatar_receitas
  1837 ;;		_getCiclos
  1838 ;;		_getContCiclos
  1839 ;;		_getIndicePassos
  1840 ;;		_initSerialIO
  1841 ;;		_init_atuadores
  1842 ;;		_ler_atuador
  1843 ;;		_ler_sensor
  1844 ;;		_manipula_atuadores_init
  1845 ;;		_printExec
  1846 ;;		_resetContCiclos
  1847 ;;		_resetIndicePassos
  1848 ;;		_salva_atuadores_init
  1849 ;;		_salvar_dado
  1850 ;;		_salvar_receita
  1851 ;;		_serialIOscan
  1852 ;;		_setT1
  1853 ;;		_set_passo
  1854 ;;		_statusT1
  1855 ;;		_teclado_borda
  1856 ;;		_teclado_init
  1857 ;;		_timer1_init
  1858 ;; This function is called by:
  1859 ;;		Startup code after reset
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text0
  1864  000012                     __ptext0:
  1865                           	callstack 0
  1866  000012                     _main:
  1867                           	callstack 25
  1868  000012                     
  1869                           ;main.c: 71:     dispLCD_init();
  1870  000012  EC5E  F01A         	call	_dispLCD_init	;wreg free
  1871  000016                     
  1872                           ;main.c: 72:     teclado_init();
  1873  000016  EC16  F01C         	call	_teclado_init	;wreg free
  1874  00001A                     
  1875                           ;main.c: 73:     timer1_init();
  1876  00001A  EC81  F01B         	call	_timer1_init	;wreg free
  1877                           
  1878                           ;main.c: 74:     I2C_init(20000000);
  1879  00001E  0E00               	movlw	0
  1880  000020  6E33               	movwf	I2C_init@freq^0,c
  1881  000022  0E2D               	movlw	45
  1882  000024  6E34               	movwf	(I2C_init@freq+1)^0,c
  1883  000026  0E31               	movlw	49
  1884  000028  6E35               	movwf	(I2C_init@freq+2)^0,c
  1885  00002A  0E01               	movlw	1
  1886  00002C  6E36               	movwf	(I2C_init@freq+3)^0,c
  1887  00002E  EC0A  F01A         	call	_I2C_init	;wreg free
  1888                           
  1889                           ;main.c: 75:     MCP4725(0);
  1890  000032  0E00               	movlw	0
  1891  000034  6E41               	movwf	(MCP4725@Vout+1)^0,c
  1892  000036  0E00               	movlw	0
  1893  000038  6E40               	movwf	MCP4725@Vout^0,c
  1894  00003A  EC61  F01B         	call	_MCP4725	;wreg free
  1895  00003E                     
  1896                           ;main.c: 79:     char estado = 0;
  1897  00003E  0E00               	movlw	0
  1898  000040  0100               	movlb	0	; () banked
  1899  000042  6FB6               	movwf	main@estado& (0+255),b
  1900  000044                     
  1901                           ; BSR set to: 0
  1902                           ;main.c: 80:     char atuador;;main.c: 81:     char vetor_aux[16];;main.c: 82:     char 
      +                          init_cond = 0;
  1903  000044  0E00               	movlw	0
  1904  000046  6FAB               	movwf	main@init_cond& (0+255),b
  1905  000048                     
  1906                           ; BSR set to: 0
  1907                           ;main.c: 83:     char *pt;;main.c: 85:     char contPassos = 0;
  1908  000048  0E00               	movlw	0
  1909  00004A  6F84               	movwf	main@contPassos& (0+255),b
  1910  00004C                     
  1911                           ; BSR set to: 0
  1912                           ;main.c: 86:     char vetorIn[1] = { 0 };
  1913  00004C  0E00               	movlw	0
  1914  00004E  6FAC               	movwf	main@vetorIn& (0+255),b
  1915  000050                     
  1916                           ; BSR set to: 0
  1917                           ;main.c: 87:     char vetorOut[1] = { 0 };
  1918  000050  0E00               	movlw	0
  1919  000052  6FAD               	movwf	main@vetorOut& (0+255),b
  1920                           
  1921                           ;main.c: 88:     initSerialIO( vetorIn, vetorOut, 1 );
  1922  000054  0EAC               	movlw	low main@vetorIn
  1923  000056  6E26               	movwf	initSerialIO@ptrIn^0,c
  1924  000058  0E00               	movlw	high main@vetorIn
  1925  00005A  6E27               	movwf	(initSerialIO@ptrIn+1)^0,c
  1926  00005C  0EAD               	movlw	low main@vetorOut
  1927  00005E  6E28               	movwf	initSerialIO@ptrOut^0,c
  1928  000060  0E00               	movlw	high main@vetorOut
  1929  000062  6E29               	movwf	(initSerialIO@ptrOut+1)^0,c
  1930  000064  0E01               	movlw	1
  1931  000066  6E2A               	movwf	initSerialIO@length^0,c
  1932  000068  EC91  F01A         	call	_initSerialIO	;wreg free
  1933  00006C                     
  1934                           ;main.c: 89:     char meAtuadores = -1;
  1935  00006C  0100               	movlb	0	; () banked
  1936  00006E  69AE               	setf	main@meAtuadores& (0+255),b
  1937  000070                     
  1938                           ; BSR set to: 0
  1939                           ;main.c: 90:     char auxPasso = 0;
  1940  000070  0E00               	movlw	0
  1941  000072  6FB7               	movwf	main@auxPasso& (0+255),b
  1942  000074                     
  1943                           ; BSR set to: 0
  1944                           ;main.c: 91:     char aux = 2;
  1945  000074  0E02               	movlw	2
  1946  000076  6F85               	movwf	main@aux& (0+255),b
  1947  000078                     
  1948                           ; BSR set to: 0
  1949                           ;main.c: 92:     unsigned int num = 0;
  1950  000078  0E00               	movlw	0
  1951  00007A  6FB3               	movwf	(main@num+1)& (0+255),b
  1952  00007C  0E00               	movlw	0
  1953  00007E  6FB2               	movwf	main@num& (0+255),b
  1954  000080                     
  1955                           ; BSR set to: 0
  1956                           ;main.c: 93:     unsigned int ciclos = 0;
  1957  000080  0E00               	movlw	0
  1958  000082  6FB0               	movwf	(main@ciclos+1)& (0+255),b
  1959  000084  0E00               	movlw	0
  1960  000086  6FAF               	movwf	main@ciclos& (0+255),b
  1961  000088                     
  1962                           ; BSR set to: 0
  1963                           ;main.c: 94:     char botao = 0;
  1964  000088  0E00               	movlw	0
  1965  00008A  6FB1               	movwf	main@botao& (0+255),b
  1966  00008C  EFB1  F00B         	goto	l6351
  1967  000090                     l5677:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;main.c: 112:                             for(char i = 0; i <= 3; i++)
  1971  000090  0E00               	movlw	0
  1972  000092  6F9F               	movwf	main@i& (0+255),b
  1973  000094                     l5679:
  1974                           
  1975                           ; BSR set to: 0
  1976  000094  0E03               	movlw	3
  1977  000096  659F               	cpfsgt	main@i& (0+255),b
  1978  000098  EF50  F000         	goto	u3901
  1979  00009C  EF52  F000         	goto	u3900
  1980  0000A0                     u3901:
  1981  0000A0  EF54  F000         	goto	l5683
  1982  0000A4                     u3900:
  1983  0000A4  EF83  F000         	goto	l5701
  1984  0000A8                     l5683:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 113:                             {;main.c: 114:                                
      +                           for(char j = 0; j <= 19; j++)
  1988  0000A8  0E00               	movlw	0
  1989  0000AA  6FA0               	movwf	main@j& (0+255),b
  1990  0000AC                     l5685:
  1991                           
  1992                           ; BSR set to: 0
  1993  0000AC  0E13               	movlw	19
  1994  0000AE  65A0               	cpfsgt	main@j& (0+255),b
  1995  0000B0  EF5C  F000         	goto	u3911
  1996  0000B4  EF5E  F000         	goto	u3910
  1997  0000B8                     u3911:
  1998  0000B8  EF60  F000         	goto	l5689
  1999  0000BC                     u3910:
  2000  0000BC  EF80  F000         	goto	l5697
  2001  0000C0                     l5689:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 115:                                 {;main.c: 116:                            
      +                                   IHM.printpos(i, j, "\377");
  2005  0000C0  EE20  F0DB         	lfsr	2,_IHM+4
  2006  0000C4  D802               	call	u3928
  2007  0000C6  EF76  F000         	goto	u3929
  2008  0000CA                     u3928:
  2009  0000CA  0005               	push	
  2010  0000CC  6EFA               	movwf	pclath,c
  2011  0000CE  50DE               	movf	postinc2,w,c
  2012  0000D0  6EFD               	movwf	tosl,c
  2013  0000D2  50DE               	movf	postinc2,w,c
  2014  0000D4  6EFE               	movwf	tosh,c
  2015  0000D6  50F8               	movf	tblptru,w,c
  2016  0000D8  6EFF               	movwf	tosu,c
  2017  0000DA  50FA               	movf	pclath,w,c
  2018  0000DC  C0A0  F02D         	movff	main@j,dispLCD@col
  2019  0000E0  0EFD               	movlw	low STR_1
  2020  0000E2  6E2E               	movwf	dispLCD@str^0,c
  2021  0000E4  0E7F               	movlw	high STR_1
  2022  0000E6  6E2F               	movwf	(dispLCD@str+1)^0,c
  2023  0000E8  519F               	movf	main@i& (0+255),w,b
  2024  0000EA  0012               	return		;indir
  2025  0000EC                     u3929:
  2026  0000EC                     
  2027                           ;main.c: 117:                                     delay(10);
  2028  0000EC  0E00               	movlw	0
  2029  0000EE  6E27               	movwf	(delay@t+1)^0,c
  2030  0000F0  0E0A               	movlw	10
  2031  0000F2  6E26               	movwf	delay@t^0,c
  2032  0000F4  ECD6  F01A         	call	_delay
  2033  0000F8                     
  2034                           ;main.c: 118:                                 }
  2035  0000F8  0100               	movlb	0	; () banked
  2036  0000FA  2BA0               	incf	main@j& (0+255),f,b
  2037  0000FC  EF56  F000         	goto	l5685
  2038  000100                     l5697:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 119:                             }
  2042  000100  2B9F               	incf	main@i& (0+255),f,b
  2043  000102  EF4A  F000         	goto	l5679
  2044  000106                     l5701:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 121:                             for(char i = 0; i <= 3; i++)
  2048  000106  0E00               	movlw	0
  2049  000108  6FA1               	movwf	main@i_536& (0+255),b
  2050  00010A                     l5703:
  2051                           
  2052                           ; BSR set to: 0
  2053  00010A  0E03               	movlw	3
  2054  00010C  65A1               	cpfsgt	main@i_536& (0+255),b
  2055  00010E  EF8B  F000         	goto	u3931
  2056  000112  EF8D  F000         	goto	u3930
  2057  000116                     u3931:
  2058  000116  EF8F  F000         	goto	l5707
  2059  00011A                     u3930:
  2060  00011A  EFBE  F000         	goto	l5725
  2061  00011E                     l5707:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 122:                             {;main.c: 123:                                
      +                           for(char j = 0; j <= 19; j++)
  2065  00011E  0E00               	movlw	0
  2066  000120  6FA2               	movwf	main@j_537& (0+255),b
  2067  000122                     l5709:
  2068                           
  2069                           ; BSR set to: 0
  2070  000122  0E13               	movlw	19
  2071  000124  65A2               	cpfsgt	main@j_537& (0+255),b
  2072  000126  EF97  F000         	goto	u3941
  2073  00012A  EF99  F000         	goto	u3940
  2074  00012E                     u3941:
  2075  00012E  EF9B  F000         	goto	l5713
  2076  000132                     u3940:
  2077  000132  EFBB  F000         	goto	l5721
  2078  000136                     l5713:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;main.c: 124:                                 {;main.c: 125:                            
      +                                   IHM.printpos(i, j, " ");
  2082  000136  EE20  F0DB         	lfsr	2,_IHM+4
  2083  00013A  D802               	call	u3958
  2084  00013C  EFB1  F000         	goto	u3959
  2085  000140                     u3958:
  2086  000140  0005               	push	
  2087  000142  6EFA               	movwf	pclath,c
  2088  000144  50DE               	movf	postinc2,w,c
  2089  000146  6EFD               	movwf	tosl,c
  2090  000148  50DE               	movf	postinc2,w,c
  2091  00014A  6EFE               	movwf	tosh,c
  2092  00014C  50F8               	movf	tblptru,w,c
  2093  00014E  6EFF               	movwf	tosu,c
  2094  000150  50FA               	movf	pclath,w,c
  2095  000152  C0A2  F02D         	movff	main@j_537,dispLCD@col
  2096  000156  0E64               	movlw	low (STR_24+19)
  2097  000158  6E2E               	movwf	dispLCD@str^0,c
  2098  00015A  0E7E               	movlw	high (STR_24+19)
  2099  00015C  6E2F               	movwf	(dispLCD@str+1)^0,c
  2100  00015E  51A1               	movf	main@i_536& (0+255),w,b
  2101  000160  0012               	return		;indir
  2102  000162                     u3959:
  2103  000162                     
  2104                           ;main.c: 126:                                     delay(10);
  2105  000162  0E00               	movlw	0
  2106  000164  6E27               	movwf	(delay@t+1)^0,c
  2107  000166  0E0A               	movlw	10
  2108  000168  6E26               	movwf	delay@t^0,c
  2109  00016A  ECD6  F01A         	call	_delay
  2110  00016E                     
  2111                           ;main.c: 127:                                 }
  2112  00016E  0100               	movlb	0	; () banked
  2113  000170  2BA2               	incf	main@j_537& (0+255),f,b
  2114  000172  EF91  F000         	goto	l5709
  2115  000176                     l5721:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;main.c: 128:                             }
  2119  000176  2BA1               	incf	main@i_536& (0+255),f,b
  2120  000178  EF85  F000         	goto	l5703
  2121  00017C                     l5725:
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;main.c: 129:                             estado = 1;
  2125  00017C  0E01               	movlw	1
  2126  00017E  6FB6               	movwf	main@estado& (0+255),b
  2127                           
  2128                           ;main.c: 130:                             break;
  2129  000180  EF53  F00C         	goto	l6353
  2130  000184                     l5727:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;main.c: 133:                             IHM.printpos(1, 0, "      SEGGUIT       ");
  2134  000184  EE20  F0DB         	lfsr	2,_IHM+4
  2135  000188  D802               	call	u3968
  2136  00018A  EFD8  F000         	goto	u3969
  2137  00018E                     u3968:
  2138  00018E  0005               	push	
  2139  000190  6EFA               	movwf	pclath,c
  2140  000192  50DE               	movf	postinc2,w,c
  2141  000194  6EFD               	movwf	tosl,c
  2142  000196  50DE               	movf	postinc2,w,c
  2143  000198  6EFE               	movwf	tosh,c
  2144  00019A  50F8               	movf	tblptru,w,c
  2145  00019C  6EFF               	movwf	tosu,c
  2146  00019E  50FA               	movf	pclath,w,c
  2147  0001A0  0E00               	movlw	0
  2148  0001A2  6E2D               	movwf	dispLCD@col^0,c
  2149  0001A4  0E90               	movlw	low STR_3
  2150  0001A6  6E2E               	movwf	dispLCD@str^0,c
  2151  0001A8  0E7E               	movlw	high STR_3
  2152  0001AA  6E2F               	movwf	(dispLCD@str+1)^0,c
  2153  0001AC  0E01               	movlw	1
  2154  0001AE  0012               	return		;indir
  2155  0001B0                     u3969:
  2156  0001B0                     
  2157                           ;main.c: 135:                             char lema[20] = "Mundo ao seu comando";
  2158  0001B0  EE20  F0B9         	lfsr	2,main@F3405
  2159  0001B4  EE10  F060         	lfsr	1,main@lema
  2160  0001B8  0E13               	movlw	19
  2161  0001BA                     u3971:
  2162  0001BA  CFDB FFE3          	movff	plusw2,plusw1
  2163  0001BE  06E8               	decf	wreg,f,c
  2164  0001C0  E2FC               	bc	u3971
  2165  0001C2                     
  2166                           ;main.c: 136:                             char i = 0;
  2167  0001C2  0E00               	movlw	0
  2168  0001C4  0100               	movlb	0	; () banked
  2169  0001C6  6F9C               	movwf	main@i_542& (0+255),b
  2170  0001C8                     
  2171                           ; BSR set to: 0
  2172                           ;main.c: 137:                             char *ptr;;main.c: 139:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  2173  0001C8  0E60               	movlw	low main@lema
  2174  0001CA  6F9D               	movwf	main@ptr& (0+255),b
  2175  0001CC  0E00               	movlw	high main@lema
  2176  0001CE  6F9E               	movwf	(main@ptr+1)& (0+255),b
  2177  0001D0  EF01  F001         	goto	l5745
  2178  0001D4                     l5735:
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;main.c: 140:                             {;main.c: 141:                                
      +                           dispLCD_lincol( 2, i );
  2182  0001D4  C09C  F028         	movff	main@i_542,dispLCD_lincol@col
  2183  0001D8  0E02               	movlw	2
  2184  0001DA  EC3B  F017         	call	_dispLCD_lincol
  2185  0001DE                     
  2186                           ;main.c: 142:                                 dispLCD_dataReg( *ptr );
  2187  0001DE  C09D  FFD9         	movff	main@ptr,fsr2l
  2188  0001E2  C09E  FFDA         	movff	main@ptr+1,fsr2h
  2189  0001E6  50DF               	movf	indf2,w,c
  2190  0001E8  ECD3  F018         	call	_dispLCD_dataReg
  2191  0001EC                     
  2192                           ;main.c: 143:                                 i++;
  2193  0001EC  0100               	movlb	0	; () banked
  2194  0001EE  2B9C               	incf	main@i_542& (0+255),f,b
  2195  0001F0                     
  2196                           ; BSR set to: 0
  2197                           ;main.c: 144:                                 delay(50);
  2198  0001F0  0E00               	movlw	0
  2199  0001F2  6E27               	movwf	(delay@t+1)^0,c
  2200  0001F4  0E32               	movlw	50
  2201  0001F6  6E26               	movwf	delay@t^0,c
  2202  0001F8  ECD6  F01A         	call	_delay	;wreg free
  2203  0001FC                     
  2204                           ;main.c: 145:                             }
  2205  0001FC  0100               	movlb	0	; () banked
  2206  0001FE  4B9D               	infsnz	main@ptr& (0+255),f,b
  2207  000200  2B9E               	incf	(main@ptr+1)& (0+255),f,b
  2208  000202                     l5745:
  2209                           
  2210                           ; BSR set to: 0
  2211  000202  C09D  FFD9         	movff	main@ptr,fsr2l
  2212  000206  C09E  FFDA         	movff	main@ptr+1,fsr2h
  2213  00020A  50DF               	movf	indf2,w,c
  2214  00020C  A4D8               	btfss	status,2,c
  2215  00020E  EF0B  F001         	goto	u3981
  2216  000212  EF0D  F001         	goto	u3980
  2217  000216                     u3981:
  2218  000216  EFEA  F000         	goto	l5735
  2219  00021A                     u3980:
  2220  00021A                     
  2221                           ; BSR set to: 0
  2222                           ;main.c: 147:                             setT1(1500);
  2223  00021A  0EDC               	movlw	220
  2224  00021C  6E2C               	movwf	setT1@c^0,c
  2225  00021E  0E05               	movlw	5
  2226  000220  6E2D               	movwf	(setT1@c+1)^0,c
  2227  000222  0E00               	movlw	0
  2228  000224  6E2E               	movwf	(setT1@c+2)^0,c
  2229  000226  0E00               	movlw	0
  2230  000228  6E2F               	movwf	(setT1@c+3)^0,c
  2231  00022A  ECBA  F01B         	call	_setT1	;wreg free
  2232  00022E                     
  2233                           ;main.c: 148:                             estado = 2;
  2234  00022E  0E02               	movlw	2
  2235  000230  0100               	movlb	0	; () banked
  2236  000232  6FB6               	movwf	main@estado& (0+255),b
  2237                           
  2238                           ;main.c: 149:                             break;
  2239  000234  EF53  F00C         	goto	l6353
  2240  000238                     l5751:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 152:                             if(!statusT1())
  2244  000238  ECEC  F01B         	call	_statusT1	;wreg free
  2245  00023C  5026               	movf	?_statusT1^0,w,c
  2246  00023E  1027               	iorwf	(?_statusT1+1)^0,w,c
  2247  000240  1028               	iorwf	(?_statusT1+2)^0,w,c
  2248  000242  1029               	iorwf	(?_statusT1+3)^0,w,c
  2249  000244  A4D8               	btfss	status,2,c
  2250  000246  EF27  F001         	goto	u3991
  2251  00024A  EF29  F001         	goto	u3990
  2252  00024E                     u3991:
  2253  00024E  EF53  F00C         	goto	l6353
  2254  000252                     u3990:
  2255  000252                     l5753:
  2256                           
  2257                           ;main.c: 153:                                 estado = 8;
  2258  000252  0E08               	movlw	8
  2259  000254  0100               	movlb	0	; () banked
  2260  000256  6FB6               	movwf	main@estado& (0+255),b
  2261  000258  EF53  F00C         	goto	l6353
  2262  00025C                     l5755:
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;main.c: 172:                             init_atuadores();
  2266  00025C  EC20  F01C         	call	_init_atuadores	;wreg free
  2267  000260                     
  2268                           ;main.c: 173:                             IHM.print("1: INSERIR SEQUENCIA\n"
  2269  000260  0E21               	movlw	low STR_4
  2270  000262  6E2D               	movwf	dispLCD_str@str^0,c
  2271  000264  0E7D               	movlw	high STR_4
  2272  000266  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  2273  000268  EE20  F0D9         	lfsr	2,_IHM+2
  2274  00026C  D802               	call	u4008
  2275  00026E  EF43  F001         	goto	u4009
  2276  000272                     u4008:
  2277  000272  0005               	push	
  2278  000274  6EFA               	movwf	pclath,c
  2279  000276  50DE               	movf	postinc2,w,c
  2280  000278  6EFD               	movwf	tosl,c
  2281  00027A  50DE               	movf	postinc2,w,c
  2282  00027C  6EFE               	movwf	tosh,c
  2283  00027E  50F8               	movf	tblptru,w,c
  2284  000280  6EFF               	movwf	tosu,c
  2285  000282  50FA               	movf	pclath,w,c
  2286  000284  0012               	return		;indir
  2287  000286                     u4009:
  2288  000286                     
  2289                           ;main.c: 177:                             setT1(1000);
  2290  000286  0EE8               	movlw	232
  2291  000288  6E2C               	movwf	setT1@c^0,c
  2292  00028A  0E03               	movlw	3
  2293  00028C  6E2D               	movwf	(setT1@c+1)^0,c
  2294  00028E  0E00               	movlw	0
  2295  000290  6E2E               	movwf	(setT1@c+2)^0,c
  2296  000292  0E00               	movlw	0
  2297  000294  6E2F               	movwf	(setT1@c+3)^0,c
  2298  000296  ECBA  F01B         	call	_setT1	;wreg free
  2299  00029A                     
  2300                           ;main.c: 178:                             estado = 9;
  2301  00029A  0E09               	movlw	9
  2302  00029C  0100               	movlb	0	; () banked
  2303  00029E  6FB6               	movwf	main@estado& (0+255),b
  2304                           
  2305                           ;main.c: 179:                             break;
  2306  0002A0  EF53  F00C         	goto	l6353
  2307  0002A4                     l5763:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 182:                             if(!statusT1())
  2311  0002A4  ECEC  F01B         	call	_statusT1	;wreg free
  2312  0002A8  5026               	movf	?_statusT1^0,w,c
  2313  0002AA  1027               	iorwf	(?_statusT1+1)^0,w,c
  2314  0002AC  1028               	iorwf	(?_statusT1+2)^0,w,c
  2315  0002AE  1029               	iorwf	(?_statusT1+3)^0,w,c
  2316  0002B0  A4D8               	btfss	status,2,c
  2317  0002B2  EF5D  F001         	goto	u4011
  2318  0002B6  EF5F  F001         	goto	u4010
  2319  0002BA                     u4011:
  2320  0002BA  EF53  F00C         	goto	l6353
  2321  0002BE                     u4010:
  2322  0002BE                     
  2323                           ;main.c: 183:                                 estado = 71;
  2324  0002BE  0E47               	movlw	71
  2325  0002C0  0100               	movlb	0	; () banked
  2326  0002C2  6FB6               	movwf	main@estado& (0+255),b
  2327  0002C4  EF53  F00C         	goto	l6353
  2328  0002C8                     l5767:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main.c: 187:                             tecla = teclado_borda();
  2332  0002C8  EC43  F01A         	call	_teclado_borda	;wreg free
  2333  0002CC  0100               	movlb	0	; () banked
  2334  0002CE  6FB8               	movwf	main@tecla& (0+255),b
  2335                           
  2336                           ;main.c: 188:                             switch(tecla)
  2337  0002D0  EF78  F001         	goto	l5777
  2338  0002D4                     l5769:
  2339  0002D4  0E03               	movlw	3
  2340  0002D6  0100               	movlb	0	; () banked
  2341  0002D8  6FB6               	movwf	main@estado& (0+255),b
  2342  0002DA  EF53  F00C         	goto	l6353
  2343  0002DE                     l5771:
  2344                           
  2345                           ; BSR set to: 0
  2346  0002DE  0E48               	movlw	72
  2347  0002E0  6FB6               	movwf	main@estado& (0+255),b
  2348  0002E2  EF53  F00C         	goto	l6353
  2349  0002E6                     l5773:
  2350  0002E6  0E50               	movlw	80
  2351  0002E8  0100               	movlb	0	; () banked
  2352  0002EA  6FB6               	movwf	main@estado& (0+255),b
  2353  0002EC  EF53  F00C         	goto	l6353
  2354  0002F0                     l5777:
  2355                           
  2356                           ; BSR set to: 0
  2357  0002F0  51B8               	movf	main@tecla& (0+255),w,b
  2358  0002F2  6E44               	movwf	??_main^0,c
  2359  0002F4  6A45               	clrf	(??_main+1)^0,c
  2360                           
  2361                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2362                           ; Switch size 1, requested type "simple"
  2363                           ; Number of cases is 1, Range of values is 0 to 0
  2364                           ; switch strategies available:
  2365                           ; Name         Instructions Cycles
  2366                           ; simple_byte            4     3 (average)
  2367                           ;	Chosen strategy is simple_byte
  2368  0002F6  5045               	movf	(??_main+1)^0,w,c
  2369  0002F8  0A00               	xorlw	0	; case 0
  2370  0002FA  B4D8               	btfsc	status,2,c
  2371  0002FC  EF82  F001         	goto	l7107
  2372  000300  EF53  F00C         	goto	l6353
  2373  000304                     l7107:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ; Switch size 1, requested type "simple"
  2377                           ; Number of cases is 4, Range of values is 49 to 52
  2378                           ; switch strategies available:
  2379                           ; Name         Instructions Cycles
  2380                           ; simple_byte           13     7 (average)
  2381                           ;	Chosen strategy is simple_byte
  2382  000304  5044               	movf	??_main^0,w,c
  2383  000306  0A31               	xorlw	49	; case 49
  2384  000308  B4D8               	btfsc	status,2,c
  2385  00030A  EF6A  F001         	goto	l5769
  2386  00030E  0A03               	xorlw	3	; case 50
  2387  000310  B4D8               	btfsc	status,2,c
  2388  000312  EF6F  F001         	goto	l5771
  2389  000316  0A01               	xorlw	1	; case 51
  2390  000318  B4D8               	btfsc	status,2,c
  2391  00031A  EF53  F00C         	goto	l6353
  2392  00031E  0A07               	xorlw	7	; case 52
  2393  000320  B4D8               	btfsc	status,2,c
  2394  000322  EF73  F001         	goto	l5773
  2395  000326  EF53  F00C         	goto	l6353
  2396  00032A                     l5779:
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;main.c: 198:                             dispLCD_clr();
  2400  00032A  EC34  F01C         	call	_dispLCD_clr	;wreg free
  2401  00032E                     
  2402                           ;main.c: 199:                             dispLCD(0,0,"1: VERIFICAR MEMORIA");
  2403  00032E  0E00               	movlw	0
  2404  000330  6E2D               	movwf	dispLCD@col^0,c
  2405  000332  0ECB               	movlw	low STR_5
  2406  000334  6E2E               	movwf	dispLCD@str^0,c
  2407  000336  0E7F               	movlw	high STR_5
  2408  000338  6E2F               	movwf	(dispLCD@str+1)^0,c
  2409  00033A  0E00               	movlw	0
  2410  00033C  EC1E  F019         	call	_dispLCD
  2411  000340                     
  2412                           ;main.c: 200:                             dispLCD(1,0,"2: LIMPAR MEMORIA   ");
  2413  000340  0E00               	movlw	0
  2414  000342  6E2D               	movwf	dispLCD@col^0,c
  2415  000344  0E4D               	movlw	low STR_6
  2416  000346  6E2E               	movwf	dispLCD@str^0,c
  2417  000348  0E7F               	movlw	high STR_6
  2418  00034A  6E2F               	movwf	(dispLCD@str+1)^0,c
  2419  00034C  0E01               	movlw	1
  2420  00034E  EC1E  F019         	call	_dispLCD
  2421  000352                     
  2422                           ;main.c: 202:                             setT1(1000);
  2423  000352  0EE8               	movlw	232
  2424  000354  6E2C               	movwf	setT1@c^0,c
  2425  000356  0E03               	movlw	3
  2426  000358  6E2D               	movwf	(setT1@c+1)^0,c
  2427  00035A  0E00               	movlw	0
  2428  00035C  6E2E               	movwf	(setT1@c+2)^0,c
  2429  00035E  0E00               	movlw	0
  2430  000360  6E2F               	movwf	(setT1@c+3)^0,c
  2431  000362  ECBA  F01B         	call	_setT1	;wreg free
  2432  000366                     
  2433                           ;main.c: 203:                             estado = 81;
  2434  000366  0E51               	movlw	81
  2435  000368  0100               	movlb	0	; () banked
  2436  00036A  6FB6               	movwf	main@estado& (0+255),b
  2437                           
  2438                           ;main.c: 204:                             break;
  2439  00036C  EF53  F00C         	goto	l6353
  2440  000370                     l5789:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;main.c: 207:                             if(!statusT1())
  2444  000370  ECEC  F01B         	call	_statusT1	;wreg free
  2445  000374  5026               	movf	?_statusT1^0,w,c
  2446  000376  1027               	iorwf	(?_statusT1+1)^0,w,c
  2447  000378  1028               	iorwf	(?_statusT1+2)^0,w,c
  2448  00037A  1029               	iorwf	(?_statusT1+3)^0,w,c
  2449  00037C  A4D8               	btfss	status,2,c
  2450  00037E  EFC3  F001         	goto	u4021
  2451  000382  EFC5  F001         	goto	u4020
  2452  000386                     u4021:
  2453  000386  EF53  F00C         	goto	l6353
  2454  00038A                     u4020:
  2455  00038A                     
  2456                           ;main.c: 208:                                 estado = 82;
  2457  00038A  0E52               	movlw	82
  2458  00038C  0100               	movlb	0	; () banked
  2459  00038E  6FB6               	movwf	main@estado& (0+255),b
  2460  000390  EF53  F00C         	goto	l6353
  2461  000394                     l5793:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;main.c: 212:                             tecla = teclado_borda();
  2465  000394  EC43  F01A         	call	_teclado_borda	;wreg free
  2466  000398  0100               	movlb	0	; () banked
  2467  00039A  6FB8               	movwf	main@tecla& (0+255),b
  2468                           
  2469                           ;main.c: 213:                             switch(tecla)
  2470  00039C  EFD8  F001         	goto	l5803
  2471  0003A0                     l5795:
  2472                           
  2473                           ; BSR set to: 0
  2474  0003A0  0E53               	movlw	83
  2475  0003A2  6FB6               	movwf	main@estado& (0+255),b
  2476  0003A4  EF53  F00C         	goto	l6353
  2477  0003A8                     l5797:
  2478                           
  2479                           ; BSR set to: 0
  2480  0003A8  0E54               	movlw	84
  2481  0003AA  6FB6               	movwf	main@estado& (0+255),b
  2482  0003AC  EF53  F00C         	goto	l6353
  2483  0003B0                     l5803:
  2484                           
  2485                           ; BSR set to: 0
  2486  0003B0  51B8               	movf	main@tecla& (0+255),w,b
  2487  0003B2  6E44               	movwf	??_main^0,c
  2488  0003B4  6A45               	clrf	(??_main+1)^0,c
  2489                           
  2490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2491                           ; Switch size 1, requested type "simple"
  2492                           ; Number of cases is 1, Range of values is 0 to 0
  2493                           ; switch strategies available:
  2494                           ; Name         Instructions Cycles
  2495                           ; simple_byte            4     3 (average)
  2496                           ;	Chosen strategy is simple_byte
  2497  0003B6  5045               	movf	(??_main+1)^0,w,c
  2498  0003B8  0A00               	xorlw	0	; case 0
  2499  0003BA  B4D8               	btfsc	status,2,c
  2500  0003BC  EFE2  F001         	goto	l7109
  2501  0003C0  EF53  F00C         	goto	l6353
  2502  0003C4                     l7109:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ; Switch size 1, requested type "simple"
  2506                           ; Number of cases is 3, Range of values is 42 to 50
  2507                           ; switch strategies available:
  2508                           ; Name         Instructions Cycles
  2509                           ; simple_byte           10     6 (average)
  2510                           ;	Chosen strategy is simple_byte
  2511  0003C4  5044               	movf	??_main^0,w,c
  2512  0003C6  0A2A               	xorlw	42	; case 42
  2513  0003C8  B4D8               	btfsc	status,2,c
  2514  0003CA  EF29  F001         	goto	l5753
  2515  0003CE  0A1B               	xorlw	27	; case 49
  2516  0003D0  B4D8               	btfsc	status,2,c
  2517  0003D2  EFD0  F001         	goto	l5795
  2518  0003D6  0A03               	xorlw	3	; case 50
  2519  0003D8  B4D8               	btfsc	status,2,c
  2520  0003DA  EFD4  F001         	goto	l5797
  2521  0003DE  EF53  F00C         	goto	l6353
  2522  0003E2                     l5805:
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;main.c: 222:                             dispLCD(0, 0, " CERTEZA QUE DESEJA ");
  2526  0003E2  0E00               	movlw	0
  2527  0003E4  6E2D               	movwf	dispLCD@col^0,c
  2528  0003E6  0EA1               	movlw	low STR_7
  2529  0003E8  6E2E               	movwf	dispLCD@str^0,c
  2530  0003EA  0E7F               	movlw	high STR_7
  2531  0003EC  6E2F               	movwf	(dispLCD@str+1)^0,c
  2532  0003EE  0E00               	movlw	0
  2533  0003F0  EC1E  F019         	call	_dispLCD
  2534                           
  2535                           ;main.c: 223:                             dispLCD(1, 0, "   DELETAR TODA A   ");
  2536  0003F4  0E00               	movlw	0
  2537  0003F6  6E2D               	movwf	dispLCD@col^0,c
  2538  0003F8  0E38               	movlw	low STR_8
  2539  0003FA  6E2E               	movwf	dispLCD@str^0,c
  2540  0003FC  0E7F               	movlw	high STR_8
  2541  0003FE  6E2F               	movwf	(dispLCD@str+1)^0,c
  2542  000400  0E01               	movlw	1
  2543  000402  EC1E  F019         	call	_dispLCD
  2544                           
  2545                           ;main.c: 224:                             dispLCD(2, 0, "      MEMORIA ?     ");
  2546  000406  0E00               	movlw	0
  2547  000408  6E2D               	movwf	dispLCD@col^0,c
  2548  00040A  0EE4               	movlw	low STR_9
  2549  00040C  6E2E               	movwf	dispLCD@str^0,c
  2550  00040E  0E7E               	movlw	high STR_9
  2551  000410  6E2F               	movwf	(dispLCD@str+1)^0,c
  2552  000412  0E02               	movlw	2
  2553  000414  EC1E  F019         	call	_dispLCD
  2554                           
  2555                           ;main.c: 225:                             dispLCD(3, 0, "# - SIM      * - NAO");
  2556  000418  0E00               	movlw	0
  2557  00041A  6E2D               	movwf	dispLCD@col^0,c
  2558  00041C  0E3C               	movlw	low (STR_26+41)
  2559  00041E  6E2E               	movwf	dispLCD@str^0,c
  2560  000420  0E7E               	movlw	high (STR_26+41)
  2561  000422  6E2F               	movwf	(dispLCD@str+1)^0,c
  2562  000424  0E03               	movlw	3
  2563  000426  EC1E  F019         	call	_dispLCD
  2564  00042A                     
  2565                           ;main.c: 227:                             tecla = teclado_borda();
  2566  00042A  EC43  F01A         	call	_teclado_borda	;wreg free
  2567  00042E  0100               	movlb	0	; () banked
  2568  000430  6FB8               	movwf	main@tecla& (0+255),b
  2569                           
  2570                           ;main.c: 228:                             switch(tecla)
  2571  000432  EF23  F002         	goto	l5817
  2572  000436                     l5809:
  2573                           
  2574                           ; BSR set to: 0
  2575  000436  0E55               	movlw	85
  2576  000438  6FB6               	movwf	main@estado& (0+255),b
  2577  00043A  EF53  F00C         	goto	l6353
  2578  00043E                     l5811:
  2579                           
  2580                           ; BSR set to: 0
  2581  00043E  EC34  F01C         	call	_dispLCD_clr	;wreg free
  2582  000442  EF73  F001         	goto	l5773
  2583  000446                     l5817:
  2584                           
  2585                           ; BSR set to: 0
  2586  000446  51B8               	movf	main@tecla& (0+255),w,b
  2587  000448  6E44               	movwf	??_main^0,c
  2588  00044A  6A45               	clrf	(??_main+1)^0,c
  2589                           
  2590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2591                           ; Switch size 1, requested type "simple"
  2592                           ; Number of cases is 1, Range of values is 0 to 0
  2593                           ; switch strategies available:
  2594                           ; Name         Instructions Cycles
  2595                           ; simple_byte            4     3 (average)
  2596                           ;	Chosen strategy is simple_byte
  2597  00044C  5045               	movf	(??_main+1)^0,w,c
  2598  00044E  0A00               	xorlw	0	; case 0
  2599  000450  B4D8               	btfsc	status,2,c
  2600  000452  EF2D  F002         	goto	l7111
  2601  000456  EF53  F00C         	goto	l6353
  2602  00045A                     l7111:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ; Switch size 1, requested type "simple"
  2606                           ; Number of cases is 2, Range of values is 35 to 42
  2607                           ; switch strategies available:
  2608                           ; Name         Instructions Cycles
  2609                           ; simple_byte            7     4 (average)
  2610                           ;	Chosen strategy is simple_byte
  2611  00045A  5044               	movf	??_main^0,w,c
  2612  00045C  0A23               	xorlw	35	; case 35
  2613  00045E  B4D8               	btfsc	status,2,c
  2614  000460  EF1B  F002         	goto	l5809
  2615  000464  0A09               	xorlw	9	; case 42
  2616  000466  B4D8               	btfsc	status,2,c
  2617  000468  EF1F  F002         	goto	l5811
  2618  00046C  EF53  F00C         	goto	l6353
  2619  000470                     l5819:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 237:                             EEPROM.formatar();
  2623  000470  EE20  F0D5         	lfsr	2,_EEPROM+8
  2624  000474  D802               	call	u4038
  2625  000476  EF47  F002         	goto	u4039
  2626  00047A                     u4038:
  2627  00047A  0005               	push	
  2628  00047C  6EFA               	movwf	pclath,c
  2629  00047E  50DE               	movf	postinc2,w,c
  2630  000480  6EFD               	movwf	tosl,c
  2631  000482  50DE               	movf	postinc2,w,c
  2632  000484  6EFE               	movwf	tosh,c
  2633  000486  50F8               	movf	tblptru,w,c
  2634  000488  6EFF               	movwf	tosu,c
  2635  00048A  50FA               	movf	pclath,w,c
  2636  00048C  0012               	return		;indir
  2637  00048E                     u4039:
  2638  00048E                     
  2639                           ;main.c: 238:                             dispLCD_clr();
  2640  00048E  EC34  F01C         	call	_dispLCD_clr	;wreg free
  2641  000492                     
  2642                           ;main.c: 239:                             for(char i = 0; i <= 3; i++)
  2643  000492  0E00               	movlw	0
  2644  000494  0100               	movlb	0	; () banked
  2645  000496  6FA3               	movwf	main@i_552& (0+255),b
  2646  000498                     l5825:
  2647                           
  2648                           ; BSR set to: 0
  2649  000498  0E03               	movlw	3
  2650  00049A  65A3               	cpfsgt	main@i_552& (0+255),b
  2651  00049C  EF52  F002         	goto	u4041
  2652  0004A0  EF54  F002         	goto	u4040
  2653  0004A4                     u4041:
  2654  0004A4  EF56  F002         	goto	l5829
  2655  0004A8                     u4040:
  2656  0004A8  EF78  F002         	goto	l5847
  2657  0004AC                     l5829:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;main.c: 240:                             {;main.c: 241:                                
      +                           for(char j = 0; j <= 19; j++)
  2661  0004AC  0E00               	movlw	0
  2662  0004AE  6FA4               	movwf	main@j_553& (0+255),b
  2663  0004B0                     l5831:
  2664                           
  2665                           ; BSR set to: 0
  2666  0004B0  0E13               	movlw	19
  2667  0004B2  65A4               	cpfsgt	main@j_553& (0+255),b
  2668  0004B4  EF5E  F002         	goto	u4051
  2669  0004B8  EF60  F002         	goto	u4050
  2670  0004BC                     u4051:
  2671  0004BC  EF62  F002         	goto	l5835
  2672  0004C0                     u4050:
  2673  0004C0  EF75  F002         	goto	l5843
  2674  0004C4                     l5835:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 242:                                 {;main.c: 243:                            
      +                                   dispLCD(i, j, "\377");
  2678  0004C4  C0A4  F02D         	movff	main@j_553,dispLCD@col
  2679  0004C8  0EFD               	movlw	low STR_1
  2680  0004CA  6E2E               	movwf	dispLCD@str^0,c
  2681  0004CC  0E7F               	movlw	high STR_1
  2682  0004CE  6E2F               	movwf	(dispLCD@str+1)^0,c
  2683  0004D0  51A3               	movf	main@i_552& (0+255),w,b
  2684  0004D2  EC1E  F019         	call	_dispLCD
  2685  0004D6                     
  2686                           ;main.c: 244:                                     delay(10);
  2687  0004D6  0E00               	movlw	0
  2688  0004D8  6E27               	movwf	(delay@t+1)^0,c
  2689  0004DA  0E0A               	movlw	10
  2690  0004DC  6E26               	movwf	delay@t^0,c
  2691  0004DE  ECD6  F01A         	call	_delay	;wreg free
  2692  0004E2                     
  2693                           ;main.c: 245:                                 }
  2694  0004E2  0100               	movlb	0	; () banked
  2695  0004E4  2BA4               	incf	main@j_553& (0+255),f,b
  2696  0004E6  EF58  F002         	goto	l5831
  2697  0004EA                     l5843:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 246:                             }
  2701  0004EA  2BA3               	incf	main@i_552& (0+255),f,b
  2702  0004EC  EF4C  F002         	goto	l5825
  2703  0004F0                     l5847:
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 248:                             for(char i = 0; i <= 3; i++)
  2707  0004F0  0E00               	movlw	0
  2708  0004F2  6FA5               	movwf	main@i_555& (0+255),b
  2709  0004F4                     l5849:
  2710                           
  2711                           ; BSR set to: 0
  2712  0004F4  0E03               	movlw	3
  2713  0004F6  65A5               	cpfsgt	main@i_555& (0+255),b
  2714  0004F8  EF80  F002         	goto	u4061
  2715  0004FC  EF82  F002         	goto	u4060
  2716  000500                     u4061:
  2717  000500  EF84  F002         	goto	l5853
  2718  000504                     u4060:
  2719  000504  EFA6  F002         	goto	l5871
  2720  000508                     l5853:
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;main.c: 249:                             {;main.c: 250:                                
      +                           for(char j = 0; j <= 19; j++)
  2724  000508  0E00               	movlw	0
  2725  00050A  6FA6               	movwf	main@j_556& (0+255),b
  2726  00050C                     l5855:
  2727                           
  2728                           ; BSR set to: 0
  2729  00050C  0E13               	movlw	19
  2730  00050E  65A6               	cpfsgt	main@j_556& (0+255),b
  2731  000510  EF8C  F002         	goto	u4071
  2732  000514  EF8E  F002         	goto	u4070
  2733  000518                     u4071:
  2734  000518  EF90  F002         	goto	l5859
  2735  00051C                     u4070:
  2736  00051C  EFA3  F002         	goto	l5867
  2737  000520                     l5859:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 251:                                 {;main.c: 252:                            
      +                                   dispLCD(i, j, " ");
  2741  000520  C0A6  F02D         	movff	main@j_556,dispLCD@col
  2742  000524  0E64               	movlw	low (STR_24+19)
  2743  000526  6E2E               	movwf	dispLCD@str^0,c
  2744  000528  0E7E               	movlw	high (STR_24+19)
  2745  00052A  6E2F               	movwf	(dispLCD@str+1)^0,c
  2746  00052C  51A5               	movf	main@i_555& (0+255),w,b
  2747  00052E  EC1E  F019         	call	_dispLCD
  2748  000532                     
  2749                           ;main.c: 253:                                     delay(10);
  2750  000532  0E00               	movlw	0
  2751  000534  6E27               	movwf	(delay@t+1)^0,c
  2752  000536  0E0A               	movlw	10
  2753  000538  6E26               	movwf	delay@t^0,c
  2754  00053A  ECD6  F01A         	call	_delay	;wreg free
  2755  00053E                     
  2756                           ;main.c: 254:                                 }
  2757  00053E  0100               	movlb	0	; () banked
  2758  000540  2BA6               	incf	main@j_556& (0+255),f,b
  2759  000542  EF86  F002         	goto	l5855
  2760  000546                     l5867:
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;main.c: 255:                             }
  2764  000546  2BA5               	incf	main@i_555& (0+255),f,b
  2765  000548  EF7A  F002         	goto	l5849
  2766  00054C                     l5871:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 256:                             dispLCD(1, 0, "       DELETED      ");
  2770  00054C  0E00               	movlw	0
  2771  00054E  6E2D               	movwf	dispLCD@col^0,c
  2772  000550  0EBA               	movlw	low STR_13
  2773  000552  6E2E               	movwf	dispLCD@str^0,c
  2774  000554  0E7E               	movlw	high STR_13
  2775  000556  6E2F               	movwf	(dispLCD@str+1)^0,c
  2776  000558  0E01               	movlw	1
  2777  00055A  EC1E  F019         	call	_dispLCD
  2778                           
  2779                           ;main.c: 257:                             dispLCD(2, 0, "        MEMORY      ");
  2780  00055E  0E00               	movlw	0
  2781  000560  6E2D               	movwf	dispLCD@col^0,c
  2782  000562  0ECF               	movlw	low STR_14
  2783  000564  6E2E               	movwf	dispLCD@str^0,c
  2784  000566  0E7E               	movlw	high STR_14
  2785  000568  6E2F               	movwf	(dispLCD@str+1)^0,c
  2786  00056A  0E02               	movlw	2
  2787  00056C  EC1E  F019         	call	_dispLCD
  2788  000570                     
  2789                           ;main.c: 259:                             setT1(1000);
  2790  000570  0EE8               	movlw	232
  2791  000572  6E2C               	movwf	setT1@c^0,c
  2792  000574  0E03               	movlw	3
  2793  000576  6E2D               	movwf	(setT1@c+1)^0,c
  2794  000578  0E00               	movlw	0
  2795  00057A  6E2E               	movwf	(setT1@c+2)^0,c
  2796  00057C  0E00               	movlw	0
  2797  00057E  6E2F               	movwf	(setT1@c+3)^0,c
  2798  000580  ECBA  F01B         	call	_setT1	;wreg free
  2799  000584                     
  2800                           ;main.c: 260:                             estado = 86;
  2801  000584  0E56               	movlw	86
  2802  000586  0100               	movlb	0	; () banked
  2803  000588  6FB6               	movwf	main@estado& (0+255),b
  2804                           
  2805                           ;main.c: 261:                             break;
  2806  00058A  EF53  F00C         	goto	l6353
  2807  00058E                     l5877:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 264:                             if(!statusT1())
  2811  00058E  ECEC  F01B         	call	_statusT1	;wreg free
  2812  000592  5026               	movf	?_statusT1^0,w,c
  2813  000594  1027               	iorwf	(?_statusT1+1)^0,w,c
  2814  000596  1028               	iorwf	(?_statusT1+2)^0,w,c
  2815  000598  1029               	iorwf	(?_statusT1+3)^0,w,c
  2816  00059A  A4D8               	btfss	status,2,c
  2817  00059C  EFD2  F002         	goto	u4081
  2818  0005A0  EFD4  F002         	goto	u4080
  2819  0005A4                     u4081:
  2820  0005A4  EF53  F00C         	goto	l6353
  2821  0005A8                     u4080:
  2822  0005A8  EF73  F001         	goto	l5773
  2823  0005AC                     l5881:
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;main.c: 269:                             IHM.clr();
  2827  0005AC  EE20  F0DF         	lfsr	2,_IHM+8
  2828  0005B0  D802               	call	u4098
  2829  0005B2  EFE5  F002         	goto	u4099
  2830  0005B6                     u4098:
  2831  0005B6  0005               	push	
  2832  0005B8  6EFA               	movwf	pclath,c
  2833  0005BA  50DE               	movf	postinc2,w,c
  2834  0005BC  6EFD               	movwf	tosl,c
  2835  0005BE  50DE               	movf	postinc2,w,c
  2836  0005C0  6EFE               	movwf	tosh,c
  2837  0005C2  50F8               	movf	tblptru,w,c
  2838  0005C4  6EFF               	movwf	tosu,c
  2839  0005C6  50FA               	movf	pclath,w,c
  2840  0005C8  0012               	return		;indir
  2841  0005CA                     u4099:
  2842  0005CA                     
  2843                           ;main.c: 270:                             IHM.print(" ESCOLHA A MEMORIA \n"
  2844  0005CA  0E74               	movlw	low STR_15
  2845  0005CC  6E2D               	movwf	dispLCD_str@str^0,c
  2846  0005CE  0E7D               	movlw	high STR_15
  2847  0005D0  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  2848  0005D2  EE20  F0D9         	lfsr	2,_IHM+2
  2849  0005D6  D802               	call	u4108
  2850  0005D8  EFF8  F002         	goto	u4109
  2851  0005DC                     u4108:
  2852  0005DC  0005               	push	
  2853  0005DE  6EFA               	movwf	pclath,c
  2854  0005E0  50DE               	movf	postinc2,w,c
  2855  0005E2  6EFD               	movwf	tosl,c
  2856  0005E4  50DE               	movf	postinc2,w,c
  2857  0005E6  6EFE               	movwf	tosh,c
  2858  0005E8  50F8               	movf	tblptru,w,c
  2859  0005EA  6EFF               	movwf	tosu,c
  2860  0005EC  50FA               	movf	pclath,w,c
  2861  0005EE  0012               	return		;indir
  2862  0005F0                     u4109:
  2863  0005F0                     
  2864                           ;main.c: 274:                             estado = 73;
  2865  0005F0  0E49               	movlw	73
  2866  0005F2  0100               	movlb	0	; () banked
  2867  0005F4  6FB6               	movwf	main@estado& (0+255),b
  2868  0005F6                     l5887:
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 277:                             tecla = teclado_borda();
  2872  0005F6  EC43  F01A         	call	_teclado_borda	;wreg free
  2873  0005FA  0100               	movlb	0	; () banked
  2874  0005FC  6FB8               	movwf	main@tecla& (0+255),b
  2875                           
  2876                           ;main.c: 278:                             switch(tecla)
  2877  0005FE  EF41  F004         	goto	l5947
  2878  000602                     l198:
  2879  000602                     l5889:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 290:                                            buscar_dado(10, tecla % 0x30, &
      +                          init_cond);
  2883  000602  C0B8  F026         	movff	main@tecla,___awmod@dividend
  2884  000606  6A27               	clrf	(___awmod@dividend+1)^0,c
  2885  000608  0E00               	movlw	0
  2886  00060A  6E29               	movwf	(___awmod@divisor+1)^0,c
  2887  00060C  0E30               	movlw	48
  2888  00060E  6E28               	movwf	___awmod@divisor^0,c
  2889  000610  ECA6  F014         	call	___awmod	;wreg free
  2890  000614  5026               	movf	?___awmod^0,w,c
  2891  000616  6E2C               	movwf	buscar_dado@col^0,c
  2892  000618  0EAB               	movlw	low main@init_cond
  2893  00061A  6E2D               	movwf	buscar_dado@data^0,c
  2894  00061C  0E00               	movlw	high main@init_cond
  2895  00061E  6E2E               	movwf	(buscar_dado@data+1)^0,c
  2896  000620  0E0A               	movlw	10
  2897  000622  EC17  F01B         	call	_buscar_dado
  2898  000626                     
  2899                           ;main.c: 291:                                            manipula_atuadores_init(init_co
      +                          nd);
  2900  000626  0100               	movlb	0	; () banked
  2901  000628  51AB               	movf	main@init_cond& (0+255),w,b
  2902  00062A  ECAB  F018         	call	_manipula_atuadores_init
  2903  00062E                     
  2904                           ;main.c: 293:                                            EEPROM.buscar(tecla % 0x30, vet
      +                          or_aux);
  2905  00062E  EE20  F0CF         	lfsr	2,_EEPROM+2
  2906  000632  D802               	call	u4118
  2907  000634  EF34  F003         	goto	u4119
  2908  000638                     u4118:
  2909  000638  0005               	push	
  2910  00063A  6EFA               	movwf	pclath,c
  2911  00063C  50DE               	movf	postinc2,w,c
  2912  00063E  6EFD               	movwf	tosl,c
  2913  000640  50DE               	movf	postinc2,w,c
  2914  000642  6EFE               	movwf	tosh,c
  2915  000644  50F8               	movf	tblptru,w,c
  2916  000646  6EFF               	movwf	tosu,c
  2917  000648  50FA               	movf	pclath,w,c
  2918  00064A  0E74               	movlw	low main@vetor_aux
  2919  00064C  6E2C               	movwf	buscar_receita@data^0,c
  2920  00064E  0E00               	movlw	high main@vetor_aux
  2921  000650  6E2D               	movwf	(buscar_receita@data+1)^0,c
  2922  000652  C0B8  F026         	movff	main@tecla,___awmod@dividend
  2923  000656  6A27               	clrf	(___awmod@dividend+1)^0,c
  2924  000658  0E00               	movlw	0
  2925  00065A  6E29               	movwf	(___awmod@divisor+1)^0,c
  2926  00065C  0E30               	movlw	48
  2927  00065E  6E28               	movwf	___awmod@divisor^0,c
  2928  000660  ECA6  F014         	call	___awmod	;wreg free
  2929  000664  5026               	movf	?___awmod^0,w,c
  2930  000666  0012               	return		;indir
  2931  000668                     u4119:
  2932  000668                     
  2933                           ;main.c: 294:                                            pt = vetor_aux;
  2934  000668  0E74               	movlw	low main@vetor_aux
  2935  00066A  0100               	movlb	0	; () banked
  2936  00066C  6F86               	movwf	main@pt& (0+255),b
  2937  00066E  0E00               	movlw	high main@vetor_aux
  2938  000670  6F87               	movwf	(main@pt+1)& (0+255),b
  2939  000672                     
  2940                           ; BSR set to: 0
  2941                           ;main.c: 296:                                            if(*pt == 0xFF)
  2942  000672  C086  FFD9         	movff	main@pt,fsr2l
  2943  000676  C087  FFDA         	movff	main@pt+1,fsr2h
  2944  00067A  28DE               	incf	postinc2,w,c
  2945  00067C  A4D8               	btfss	status,2,c
  2946  00067E  EF43  F003         	goto	u4121
  2947  000682  EF45  F003         	goto	u4120
  2948  000686                     u4121:
  2949  000686  EF61  F003         	goto	l5903
  2950  00068A                     u4120:
  2951  00068A                     
  2952                           ; BSR set to: 0
  2953                           ;main.c: 297:                                            {;main.c: 298:                 
      +                                                         EEPROM.deletar(tecla % 0x30);
  2954  00068A  EE20  F0D1         	lfsr	2,_EEPROM+4
  2955  00068E  D802               	call	u4138
  2956  000690  EF5E  F003         	goto	u4139
  2957  000694                     u4138:
  2958  000694  0005               	push	
  2959  000696  6EFA               	movwf	pclath,c
  2960  000698  50DE               	movf	postinc2,w,c
  2961  00069A  6EFD               	movwf	tosl,c
  2962  00069C  50DE               	movf	postinc2,w,c
  2963  00069E  6EFE               	movwf	tosh,c
  2964  0006A0  50F8               	movf	tblptru,w,c
  2965  0006A2  6EFF               	movwf	tosu,c
  2966  0006A4  50FA               	movf	pclath,w,c
  2967  0006A6  C0B8  F026         	movff	main@tecla,___awmod@dividend
  2968  0006AA  6A27               	clrf	(___awmod@dividend+1)^0,c
  2969  0006AC  0E00               	movlw	0
  2970  0006AE  6E29               	movwf	(___awmod@divisor+1)^0,c
  2971  0006B0  0E30               	movlw	48
  2972  0006B2  6E28               	movwf	___awmod@divisor^0,c
  2973  0006B4  ECA6  F014         	call	___awmod
  2974  0006B8  5026               	movf	?___awmod^0,w,c
  2975  0006BA  0012               	return		;indir
  2976  0006BC                     u4139:
  2977  0006BC                     
  2978                           ;main.c: 299:                                                vetor_aux[0] = 0;
  2979  0006BC  0E00               	movlw	0
  2980  0006BE  0100               	movlb	0	; () banked
  2981  0006C0  6F74               	movwf	main@vetor_aux& (0+255),b
  2982  0006C2                     l5903:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;main.c: 303:                                            for(char *ptr = vetor_aux; *ptr
      +                           != 0; ptr++)
  2986  0006C2  0E74               	movlw	low main@vetor_aux
  2987  0006C4  6FB4               	movwf	main@ptr_562& (0+255),b
  2988  0006C6  0E00               	movlw	high main@vetor_aux
  2989  0006C8  6FB5               	movwf	(main@ptr_562+1)& (0+255),b
  2990  0006CA  EF2E  F004         	goto	l5937
  2991  0006CE                     l5905:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 304:                                            {;main.c: 305:                 
      +                                                          if(*ptr <= 0x64 || *ptr == 0xFE)
  2995  0006CE  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  2996  0006D2  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  2997  0006D6  0E64               	movlw	100
  2998  0006D8  64DF               	cpfsgt	indf2,c
  2999  0006DA  EF71  F003         	goto	u4141
  3000  0006DE  EF73  F003         	goto	u4140
  3001  0006E2                     u4141:
  3002  0006E2  EF80  F003         	goto	l5909
  3003  0006E6                     u4140:
  3004  0006E6                     
  3005                           ; BSR set to: 0
  3006  0006E6  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3007  0006EA  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3008  0006EE  0EFE               	movlw	254
  3009  0006F0  18DE               	xorwf	postinc2,w,c
  3010  0006F2  A4D8               	btfss	status,2,c
  3011  0006F4  EF7E  F003         	goto	u4151
  3012  0006F8  EF80  F003         	goto	u4150
  3013  0006FC                     u4151:
  3014  0006FC  EF8F  F003         	goto	l5911
  3015  000700                     u4150:
  3016  000700                     l5909:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 306:                                                 {;main.c: 307:            
      +                                                                   decodifica(&*ptr);
  3020  000700  C0B4  F026         	movff	main@ptr_562,decodifica@d
  3021  000704  C0B5  F027         	movff	main@ptr_562+1,decodifica@d+1
  3022  000708  EC4D  F011         	call	_decodifica
  3023                           
  3024                           ;main.c: 308:                                                     fifo_add_control(*ptr)
      +                          ;
  3025  00070C  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3026  000710  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3027  000714  50DF               	movf	indf2,w,c
  3028  000716  ECFA  F018         	call	_fifo_add_control
  3029                           
  3030                           ;main.c: 309:                                                 }
  3031  00071A  EF29  F004         	goto	l5933
  3032  00071E                     l5911:
  3033                           
  3034                           ; BSR set to: 0
  3035  00071E  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3036  000722  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3037  000726  0E64               	movlw	100
  3038  000728  64DF               	cpfsgt	indf2,c
  3039  00072A  EF99  F003         	goto	u4161
  3040  00072E  EF9B  F003         	goto	u4160
  3041  000732                     u4161:
  3042  000732  EFB6  F003         	goto	l5917
  3043  000736                     u4160:
  3044  000736                     
  3045                           ; BSR set to: 0
  3046  000736  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3047  00073A  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3048  00073E  0EDD               	movlw	221
  3049  000740  60DF               	cpfslt	indf2,c
  3050  000742  EFA5  F003         	goto	u4171
  3051  000746  EFA7  F003         	goto	u4170
  3052  00074A                     u4171:
  3053  00074A  EFB6  F003         	goto	l5917
  3054  00074E                     u4170:
  3055  00074E                     
  3056                           ; BSR set to: 0
  3057                           ;main.c: 311:                                                 {;main.c: 312:            
      +                                                                   decodifica(&*ptr);
  3058  00074E  C0B4  F026         	movff	main@ptr_562,decodifica@d
  3059  000752  C0B5  F027         	movff	main@ptr_562+1,decodifica@d+1
  3060  000756  EC4D  F011         	call	_decodifica	;wreg free
  3061                           
  3062                           ;main.c: 313:                                                     fifo_add_tempo(*ptr);
  3063  00075A  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3064  00075E  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3065  000762  50DF               	movf	indf2,w,c
  3066  000764  EC53  F018         	call	_fifo_add_tempo
  3067                           
  3068                           ;main.c: 314:                                                 }
  3069  000768  EF29  F004         	goto	l5933
  3070  00076C                     l5917:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 316:                                                 {;main.c: 317:            
      +                                                                   decodifica(&*ptr);
  3074  00076C  C0B4  F026         	movff	main@ptr_562,decodifica@d
  3075  000770  C0B5  F027         	movff	main@ptr_562+1,decodifica@d+1
  3076  000774  EC4D  F011         	call	_decodifica	;wreg free
  3077                           
  3078                           ;main.c: 318:                                                     switch( *ptr )
  3079  000778  EFC6  F003         	goto	l5923
  3080  00077C                     l218:
  3081  00077C                     l5919:
  3082                           
  3083                           ;main.c: 328:                                                                 *ptr &= ~0
      +                          x20;
  3084  00077C  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3085  000780  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3086  000784  0EDF               	movlw	223
  3087  000786  16DF               	andwf	indf2,f,c
  3088                           
  3089                           ;main.c: 329:                                                                 break;
  3090  000788  EFF7  F003         	goto	l5925
  3091  00078C                     l5923:
  3092  00078C  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3093  000790  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3094  000794  50DF               	movf	indf2,w,c
  3095  000796  6E44               	movwf	??_main^0,c
  3096  000798  6A45               	clrf	(??_main+1)^0,c
  3097                           
  3098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3099                           ; Switch size 1, requested type "simple"
  3100                           ; Number of cases is 1, Range of values is 0 to 0
  3101                           ; switch strategies available:
  3102                           ; Name         Instructions Cycles
  3103                           ; simple_byte            4     3 (average)
  3104                           ;	Chosen strategy is simple_byte
  3105  00079A  5045               	movf	(??_main+1)^0,w,c
  3106  00079C  0A00               	xorlw	0	; case 0
  3107  00079E  B4D8               	btfsc	status,2,c
  3108  0007A0  EFD4  F003         	goto	l7113
  3109  0007A4  EFF7  F003         	goto	l5925
  3110  0007A8                     l7113:
  3111                           
  3112                           ; Switch size 1, requested type "simple"
  3113                           ; Number of cases is 8, Range of values is 65 to 100
  3114                           ; switch strategies available:
  3115                           ; Name         Instructions Cycles
  3116                           ; simple_byte           25    13 (average)
  3117                           ;	Chosen strategy is simple_byte
  3118  0007A8  5044               	movf	??_main^0,w,c
  3119  0007AA  0A41               	xorlw	65	; case 65
  3120  0007AC  B4D8               	btfsc	status,2,c
  3121  0007AE  EFBE  F003         	goto	l218
  3122  0007B2  0A03               	xorlw	3	; case 66
  3123  0007B4  B4D8               	btfsc	status,2,c
  3124  0007B6  EFBE  F003         	goto	l5919
  3125  0007BA  0A01               	xorlw	1	; case 67
  3126  0007BC  B4D8               	btfsc	status,2,c
  3127  0007BE  EFBE  F003         	goto	l5919
  3128  0007C2  0A07               	xorlw	7	; case 68
  3129  0007C4  B4D8               	btfsc	status,2,c
  3130  0007C6  EFBE  F003         	goto	l5919
  3131  0007CA  0A25               	xorlw	37	; case 97
  3132  0007CC  B4D8               	btfsc	status,2,c
  3133  0007CE  EFBE  F003         	goto	l5919
  3134  0007D2  0A03               	xorlw	3	; case 98
  3135  0007D4  B4D8               	btfsc	status,2,c
  3136  0007D6  EFBE  F003         	goto	l5919
  3137  0007DA  0A01               	xorlw	1	; case 99
  3138  0007DC  B4D8               	btfsc	status,2,c
  3139  0007DE  EFBE  F003         	goto	l5919
  3140  0007E2  0A07               	xorlw	7	; case 100
  3141  0007E4  B4D8               	btfsc	status,2,c
  3142  0007E6  EFBE  F003         	goto	l5919
  3143  0007EA  EFF7  F003         	goto	l5925
  3144  0007EE                     l5925:
  3145                           
  3146                           ;main.c: 331:                                                     alt_atuador(*ptr);
  3147  0007EE  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3148  0007F2  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3149  0007F6  50DF               	movf	indf2,w,c
  3150  0007F8  ECF4  F015         	call	_alt_atuador
  3151                           
  3152                           ;main.c: 332:                                                     fifo_add( ler_atuador(
      +                          *ptr) ? *ptr : *ptr|0x20 );
  3153  0007FC  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3154  000800  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3155  000804  50DF               	movf	indf2,w,c
  3156  000806  ECA4  F015         	call	_ler_atuador
  3157  00080A  0900               	iorlw	0
  3158  00080C  A4D8               	btfss	status,2,c
  3159  00080E  EF0B  F004         	goto	u4181
  3160  000812  EF0D  F004         	goto	u4180
  3161  000816                     u4181:
  3162  000816  EF1C  F004         	goto	l5929
  3163  00081A                     u4180:
  3164  00081A  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3165  00081E  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3166  000822  50DF               	movf	indf2,w,c
  3167  000824  6E44               	movwf	??_main^0,c
  3168  000826  6A45               	clrf	(??_main+1)^0,c
  3169  000828  0E20               	movlw	32
  3170  00082A  1044               	iorwf	??_main^0,w,c
  3171  00082C  0100               	movlb	0	; () banked
  3172  00082E  6F88               	movwf	_main$563& (0+255),b
  3173  000830  5045               	movf	(??_main+1)^0,w,c
  3174  000832  6F89               	movwf	(_main$563+1)& (0+255),b
  3175  000834  EF26  F004         	goto	l5931
  3176  000838                     l5929:
  3177  000838  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3178  00083C  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3179  000840  50DF               	movf	indf2,w,c
  3180  000842  6E44               	movwf	??_main^0,c
  3181  000844  5044               	movf	??_main^0,w,c
  3182  000846  0100               	movlb	0	; () banked
  3183  000848  6F88               	movwf	_main$563& (0+255),b
  3184  00084A  6B89               	clrf	(_main$563+1)& (0+255),b
  3185  00084C                     l5931:
  3186                           
  3187                           ; BSR set to: 0
  3188  00084C  5188               	movf	_main$563& (0+255),w,b
  3189  00084E  EC7F  F018         	call	_fifo_add
  3190  000852                     l5933:
  3191                           
  3192                           ;main.c: 334:                                                 fifo_print();
  3193  000852  ECAF  F00D         	call	_fifo_print	;wreg free
  3194  000856                     
  3195                           ;main.c: 335:                                            }
  3196  000856  0100               	movlb	0	; () banked
  3197  000858  4BB4               	infsnz	main@ptr_562& (0+255),f,b
  3198  00085A  2BB5               	incf	(main@ptr_562+1)& (0+255),f,b
  3199  00085C                     l5937:
  3200                           
  3201                           ; BSR set to: 0
  3202  00085C  C0B4  FFD9         	movff	main@ptr_562,fsr2l
  3203  000860  C0B5  FFDA         	movff	main@ptr_562+1,fsr2h
  3204  000864  50DF               	movf	indf2,w,c
  3205  000866  A4D8               	btfss	status,2,c
  3206  000868  EF38  F004         	goto	u4191
  3207  00086C  EF3A  F004         	goto	u4190
  3208  000870                     u4191:
  3209  000870  EF67  F003         	goto	l5905
  3210  000874                     u4190:
  3211  000874                     l5939:
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;main.c: 337:                                            dispLCD_clr();
  3215  000874  EC34  F01C         	call	_dispLCD_clr	;wreg free
  3216  000878                     l5941:
  3217                           
  3218                           ;main.c: 338:                                            estado = 16;
  3219  000878  0E10               	movlw	16
  3220  00087A  0100               	movlb	0	; () banked
  3221  00087C  6FB6               	movwf	main@estado& (0+255),b
  3222                           
  3223                           ;main.c: 339:                                            break;
  3224  00087E  EF53  F00C         	goto	l6353
  3225  000882                     l5947:
  3226                           
  3227                           ; BSR set to: 0
  3228  000882  51B8               	movf	main@tecla& (0+255),w,b
  3229  000884  6E44               	movwf	??_main^0,c
  3230  000886  6A45               	clrf	(??_main+1)^0,c
  3231                           
  3232                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3233                           ; Switch size 1, requested type "simple"
  3234                           ; Number of cases is 1, Range of values is 0 to 0
  3235                           ; switch strategies available:
  3236                           ; Name         Instructions Cycles
  3237                           ; simple_byte            4     3 (average)
  3238                           ;	Chosen strategy is simple_byte
  3239  000888  5045               	movf	(??_main+1)^0,w,c
  3240  00088A  0A00               	xorlw	0	; case 0
  3241  00088C  B4D8               	btfsc	status,2,c
  3242  00088E  EF4B  F004         	goto	l7115
  3243  000892  EF53  F00C         	goto	l6353
  3244  000896                     l7115:
  3245                           
  3246                           ; BSR set to: 0
  3247                           ; Switch size 1, requested type "simple"
  3248                           ; Number of cases is 11, Range of values is 42 to 57
  3249                           ; switch strategies available:
  3250                           ; Name         Instructions Cycles
  3251                           ; simple_byte           34    18 (average)
  3252                           ;	Chosen strategy is simple_byte
  3253  000896  5044               	movf	??_main^0,w,c
  3254  000898  0A2A               	xorlw	42	; case 42
  3255  00089A  B4D8               	btfsc	status,2,c
  3256  00089C  EF29  F001         	goto	l5753
  3257  0008A0  0A1A               	xorlw	26	; case 48
  3258  0008A2  B4D8               	btfsc	status,2,c
  3259  0008A4  EF01  F003         	goto	l198
  3260  0008A8  0A01               	xorlw	1	; case 49
  3261  0008AA  B4D8               	btfsc	status,2,c
  3262  0008AC  EF01  F003         	goto	l198
  3263  0008B0  0A03               	xorlw	3	; case 50
  3264  0008B2  B4D8               	btfsc	status,2,c
  3265  0008B4  EF01  F003         	goto	l5889
  3266  0008B8  0A01               	xorlw	1	; case 51
  3267  0008BA  B4D8               	btfsc	status,2,c
  3268  0008BC  EF01  F003         	goto	l5889
  3269  0008C0  0A07               	xorlw	7	; case 52
  3270  0008C2  B4D8               	btfsc	status,2,c
  3271  0008C4  EF01  F003         	goto	l5889
  3272  0008C8  0A01               	xorlw	1	; case 53
  3273  0008CA  B4D8               	btfsc	status,2,c
  3274  0008CC  EF01  F003         	goto	l5889
  3275  0008D0  0A03               	xorlw	3	; case 54
  3276  0008D2  B4D8               	btfsc	status,2,c
  3277  0008D4  EF01  F003         	goto	l5889
  3278  0008D8  0A01               	xorlw	1	; case 55
  3279  0008DA  B4D8               	btfsc	status,2,c
  3280  0008DC  EF01  F003         	goto	l5889
  3281  0008E0  0A0F               	xorlw	15	; case 56
  3282  0008E2  B4D8               	btfsc	status,2,c
  3283  0008E4  EF01  F003         	goto	l5889
  3284  0008E8  0A01               	xorlw	1	; case 57
  3285  0008EA  B4D8               	btfsc	status,2,c
  3286  0008EC  EF01  F003         	goto	l5889
  3287  0008F0  EF53  F00C         	goto	l6353
  3288  0008F4                     l5949:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;main.c: 346:                             IHM.clr();
  3292  0008F4  EE20  F0DF         	lfsr	2,_IHM+8
  3293  0008F8  D802               	call	u4208
  3294  0008FA  EF89  F004         	goto	u4209
  3295  0008FE                     u4208:
  3296  0008FE  0005               	push	
  3297  000900  6EFA               	movwf	pclath,c
  3298  000902  50DE               	movf	postinc2,w,c
  3299  000904  6EFD               	movwf	tosl,c
  3300  000906  50DE               	movf	postinc2,w,c
  3301  000908  6EFE               	movwf	tosh,c
  3302  00090A  50F8               	movf	tblptru,w,c
  3303  00090C  6EFF               	movwf	tosu,c
  3304  00090E  50FA               	movf	pclath,w,c
  3305  000910  0012               	return		;indir
  3306  000912                     u4209:
  3307  000912                     
  3308                           ;main.c: 347:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
  3309  000912  EE20  F0DB         	lfsr	2,_IHM+4
  3310  000916  D802               	call	u4218
  3311  000918  EF9F  F004         	goto	u4219
  3312  00091C                     u4218:
  3313  00091C  0005               	push	
  3314  00091E  6EFA               	movwf	pclath,c
  3315  000920  50DE               	movf	postinc2,w,c
  3316  000922  6EFD               	movwf	tosl,c
  3317  000924  50DE               	movf	postinc2,w,c
  3318  000926  6EFE               	movwf	tosh,c
  3319  000928  50F8               	movf	tblptru,w,c
  3320  00092A  6EFF               	movwf	tosu,c
  3321  00092C  50FA               	movf	pclath,w,c
  3322  00092E  0E00               	movlw	0
  3323  000930  6E2D               	movwf	dispLCD@col^0,c
  3324  000932  0E62               	movlw	low STR_16
  3325  000934  6E2E               	movwf	dispLCD@str^0,c
  3326  000936  0E7F               	movlw	high STR_16
  3327  000938  6E2F               	movwf	(dispLCD@str+1)^0,c
  3328  00093A  0E00               	movlw	0
  3329  00093C  0012               	return		;indir
  3330  00093E                     u4219:
  3331  00093E                     
  3332                           ;main.c: 348:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
  3333  00093E  EE20  F0DB         	lfsr	2,_IHM+4
  3334  000942  D802               	call	u4228
  3335  000944  EFB5  F004         	goto	u4229
  3336  000948                     u4228:
  3337  000948  0005               	push	
  3338  00094A  6EFA               	movwf	pclath,c
  3339  00094C  50DE               	movf	postinc2,w,c
  3340  00094E  6EFD               	movwf	tosl,c
  3341  000950  50DE               	movf	postinc2,w,c
  3342  000952  6EFE               	movwf	tosh,c
  3343  000954  50F8               	movf	tblptru,w,c
  3344  000956  6EFF               	movwf	tosu,c
  3345  000958  50FA               	movf	pclath,w,c
  3346  00095A  0E00               	movlw	0
  3347  00095C  6E2D               	movwf	dispLCD@col^0,c
  3348  00095E  0E0E               	movlw	low STR_17
  3349  000960  6E2E               	movwf	dispLCD@str^0,c
  3350  000962  0E7F               	movlw	high STR_17
  3351  000964  6E2F               	movwf	(dispLCD@str+1)^0,c
  3352  000966  0E01               	movlw	1
  3353  000968  0012               	return		;indir
  3354  00096A                     u4229:
  3355  00096A                     
  3356                           ;main.c: 349:                             estado = 6;
  3357  00096A  0E06               	movlw	6
  3358  00096C  0100               	movlb	0	; () banked
  3359  00096E  6FB6               	movwf	main@estado& (0+255),b
  3360                           
  3361                           ;main.c: 350:                             break;
  3362  000970  EF53  F00C         	goto	l6353
  3363  000974                     l5957:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;main.c: 353:                             IHM.printpos(3,0,"   A   B   C   D    ");
  3367  000974  EE20  F0DB         	lfsr	2,_IHM+4
  3368  000978  D802               	call	u4238
  3369  00097A  EFD0  F004         	goto	u4239
  3370  00097E                     u4238:
  3371  00097E  0005               	push	
  3372  000980  6EFA               	movwf	pclath,c
  3373  000982  50DE               	movf	postinc2,w,c
  3374  000984  6EFD               	movwf	tosl,c
  3375  000986  50DE               	movf	postinc2,w,c
  3376  000988  6EFE               	movwf	tosh,c
  3377  00098A  50F8               	movf	tblptru,w,c
  3378  00098C  6EFF               	movwf	tosu,c
  3379  00098E  50FA               	movf	pclath,w,c
  3380  000990  0E00               	movlw	0
  3381  000992  6E2D               	movwf	dispLCD@col^0,c
  3382  000994  0E23               	movlw	low STR_18
  3383  000996  6E2E               	movwf	dispLCD@str^0,c
  3384  000998  0E7F               	movlw	high STR_18
  3385  00099A  6E2F               	movwf	(dispLCD@str+1)^0,c
  3386  00099C  0E03               	movlw	3
  3387  00099E  0012               	return		;indir
  3388  0009A0                     u4239:
  3389  0009A0                     
  3390                           ;main.c: 354:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
  3391  0009A0  0E04               	movlw	4
  3392  0009A2  6E28               	movwf	dispLCD_lincol@col^0,c
  3393  0009A4  0E03               	movlw	3
  3394  0009A6  EC3B  F017         	call	_dispLCD_lincol
  3395  0009AA  0E41               	movlw	65
  3396  0009AC  ECA4  F015         	call	_ler_atuador
  3397  0009B0  0900               	iorlw	0
  3398  0009B2  A4D8               	btfss	status,2,c
  3399  0009B4  EFDE  F004         	goto	u4241
  3400  0009B8  EFE0  F004         	goto	u4240
  3401  0009BC                     u4241:
  3402  0009BC  EFE7  F004         	goto	l5965
  3403  0009C0                     u4240:
  3404  0009C0  0E00               	movlw	0
  3405  0009C2  0100               	movlb	0	; () banked
  3406  0009C4  6F8B               	movwf	(_main$567+1)& (0+255),b
  3407  0009C6  0E2D               	movlw	45
  3408  0009C8  6F8A               	movwf	_main$567& (0+255),b
  3409  0009CA  EFEC  F004         	goto	l5967
  3410  0009CE                     l5965:
  3411  0009CE  0E00               	movlw	0
  3412  0009D0  0100               	movlb	0	; () banked
  3413  0009D2  6F8B               	movwf	(_main$567+1)& (0+255),b
  3414  0009D4  0E2B               	movlw	43
  3415  0009D6  6F8A               	movwf	_main$567& (0+255),b
  3416  0009D8                     l5967:
  3417                           
  3418                           ; BSR set to: 0
  3419  0009D8  518A               	movf	_main$567& (0+255),w,b
  3420  0009DA  ECD3  F018         	call	_dispLCD_dataReg
  3421  0009DE                     
  3422                           ;main.c: 355:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
  3423  0009DE  0E08               	movlw	8
  3424  0009E0  6E28               	movwf	dispLCD_lincol@col^0,c
  3425  0009E2  0E03               	movlw	3
  3426  0009E4  EC3B  F017         	call	_dispLCD_lincol
  3427  0009E8  0E42               	movlw	66
  3428  0009EA  ECA4  F015         	call	_ler_atuador
  3429  0009EE  0900               	iorlw	0
  3430  0009F0  A4D8               	btfss	status,2,c
  3431  0009F2  EFFD  F004         	goto	u4251
  3432  0009F6  EFFF  F004         	goto	u4250
  3433  0009FA                     u4251:
  3434  0009FA  EF06  F005         	goto	l5975
  3435  0009FE                     u4250:
  3436  0009FE  0E00               	movlw	0
  3437  000A00  0100               	movlb	0	; () banked
  3438  000A02  6F8D               	movwf	(_main$568+1)& (0+255),b
  3439  000A04  0E2D               	movlw	45
  3440  000A06  6F8C               	movwf	_main$568& (0+255),b
  3441  000A08  EF0B  F005         	goto	l5977
  3442  000A0C                     l5975:
  3443  000A0C  0E00               	movlw	0
  3444  000A0E  0100               	movlb	0	; () banked
  3445  000A10  6F8D               	movwf	(_main$568+1)& (0+255),b
  3446  000A12  0E2B               	movlw	43
  3447  000A14  6F8C               	movwf	_main$568& (0+255),b
  3448  000A16                     l5977:
  3449                           
  3450                           ; BSR set to: 0
  3451  000A16  518C               	movf	_main$568& (0+255),w,b
  3452  000A18  ECD3  F018         	call	_dispLCD_dataReg
  3453  000A1C                     
  3454                           ;main.c: 356:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
  3455  000A1C  0E0C               	movlw	12
  3456  000A1E  6E28               	movwf	dispLCD_lincol@col^0,c
  3457  000A20  0E03               	movlw	3
  3458  000A22  EC3B  F017         	call	_dispLCD_lincol
  3459  000A26  0E43               	movlw	67
  3460  000A28  ECA4  F015         	call	_ler_atuador
  3461  000A2C  0900               	iorlw	0
  3462  000A2E  A4D8               	btfss	status,2,c
  3463  000A30  EF1C  F005         	goto	u4261
  3464  000A34  EF1E  F005         	goto	u4260
  3465  000A38                     u4261:
  3466  000A38  EF25  F005         	goto	l5985
  3467  000A3C                     u4260:
  3468  000A3C  0E00               	movlw	0
  3469  000A3E  0100               	movlb	0	; () banked
  3470  000A40  6F8F               	movwf	(_main$569+1)& (0+255),b
  3471  000A42  0E2D               	movlw	45
  3472  000A44  6F8E               	movwf	_main$569& (0+255),b
  3473  000A46  EF2A  F005         	goto	l5987
  3474  000A4A                     l5985:
  3475  000A4A  0E00               	movlw	0
  3476  000A4C  0100               	movlb	0	; () banked
  3477  000A4E  6F8F               	movwf	(_main$569+1)& (0+255),b
  3478  000A50  0E2B               	movlw	43
  3479  000A52  6F8E               	movwf	_main$569& (0+255),b
  3480  000A54                     l5987:
  3481                           
  3482                           ; BSR set to: 0
  3483  000A54  518E               	movf	_main$569& (0+255),w,b
  3484  000A56  ECD3  F018         	call	_dispLCD_dataReg
  3485  000A5A                     
  3486                           ;main.c: 357:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
  3487  000A5A  0E10               	movlw	16
  3488  000A5C  6E28               	movwf	dispLCD_lincol@col^0,c
  3489  000A5E  0E03               	movlw	3
  3490  000A60  EC3B  F017         	call	_dispLCD_lincol
  3491  000A64  0E44               	movlw	68
  3492  000A66  ECA4  F015         	call	_ler_atuador
  3493  000A6A  0900               	iorlw	0
  3494  000A6C  A4D8               	btfss	status,2,c
  3495  000A6E  EF3B  F005         	goto	u4271
  3496  000A72  EF3D  F005         	goto	u4270
  3497  000A76                     u4271:
  3498  000A76  EF44  F005         	goto	l5995
  3499  000A7A                     u4270:
  3500  000A7A  0E00               	movlw	0
  3501  000A7C  0100               	movlb	0	; () banked
  3502  000A7E  6F91               	movwf	(_main$570+1)& (0+255),b
  3503  000A80  0E2D               	movlw	45
  3504  000A82  6F90               	movwf	_main$570& (0+255),b
  3505  000A84  EF49  F005         	goto	l5997
  3506  000A88                     l5995:
  3507  000A88  0E00               	movlw	0
  3508  000A8A  0100               	movlb	0	; () banked
  3509  000A8C  6F91               	movwf	(_main$570+1)& (0+255),b
  3510  000A8E  0E2B               	movlw	43
  3511  000A90  6F90               	movwf	_main$570& (0+255),b
  3512  000A92                     l5997:
  3513                           
  3514                           ; BSR set to: 0
  3515  000A92  5190               	movf	_main$570& (0+255),w,b
  3516  000A94  ECD3  F018         	call	_dispLCD_dataReg
  3517  000A98                     
  3518                           ;main.c: 358:                             estado = 7;
  3519  000A98  0E07               	movlw	7
  3520  000A9A  0100               	movlb	0	; () banked
  3521  000A9C  6FB6               	movwf	main@estado& (0+255),b
  3522                           
  3523                           ;main.c: 359:                             break;
  3524  000A9E  EF53  F00C         	goto	l6353
  3525  000AA2                     l6001:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;main.c: 362:                             tecla = teclado_borda();
  3529  000AA2  EC43  F01A         	call	_teclado_borda	;wreg free
  3530  000AA6  0100               	movlb	0	; () banked
  3531  000AA8  6FB8               	movwf	main@tecla& (0+255),b
  3532                           
  3533                           ;main.c: 363:                             switch(tecla)
  3534  000AAA  EFEB  F005         	goto	l6041
  3535  000AAE                     l6003:
  3536                           
  3537                           ; BSR set to: 0
  3538  000AAE  51B8               	movf	main@tecla& (0+255),w,b
  3539  000AB0  ECF4  F015         	call	_alt_atuador
  3540  000AB4  0E04               	movlw	4
  3541  000AB6  6E28               	movwf	dispLCD_lincol@col^0,c
  3542  000AB8  0E03               	movlw	3
  3543  000ABA  EC3B  F017         	call	_dispLCD_lincol
  3544  000ABE  0E41               	movlw	65
  3545  000AC0  ECA4  F015         	call	_ler_atuador
  3546  000AC4  0900               	iorlw	0
  3547  000AC6  A4D8               	btfss	status,2,c
  3548  000AC8  EF68  F005         	goto	u4281
  3549  000ACC  EF6A  F005         	goto	u4280
  3550  000AD0                     u4281:
  3551  000AD0  EF71  F005         	goto	l6007
  3552  000AD4                     u4280:
  3553  000AD4  0E00               	movlw	0
  3554  000AD6  0100               	movlb	0	; () banked
  3555  000AD8  6F93               	movwf	(_main$571+1)& (0+255),b
  3556  000ADA  0E2D               	movlw	45
  3557  000ADC  6F92               	movwf	_main$571& (0+255),b
  3558  000ADE  EF76  F005         	goto	l6009
  3559  000AE2                     l6007:
  3560  000AE2  0E00               	movlw	0
  3561  000AE4  0100               	movlb	0	; () banked
  3562  000AE6  6F93               	movwf	(_main$571+1)& (0+255),b
  3563  000AE8  0E2B               	movlw	43
  3564  000AEA  6F92               	movwf	_main$571& (0+255),b
  3565  000AEC                     l6009:
  3566                           
  3567                           ; BSR set to: 0
  3568  000AEC  5192               	movf	_main$571& (0+255),w,b
  3569  000AEE  ECD3  F018         	call	_dispLCD_dataReg
  3570  000AF2  EF53  F00C         	goto	l6353
  3571  000AF6                     l6011:
  3572                           
  3573                           ; BSR set to: 0
  3574  000AF6  51B8               	movf	main@tecla& (0+255),w,b
  3575  000AF8  ECF4  F015         	call	_alt_atuador
  3576  000AFC  0E08               	movlw	8
  3577  000AFE  6E28               	movwf	dispLCD_lincol@col^0,c
  3578  000B00  0E03               	movlw	3
  3579  000B02  EC3B  F017         	call	_dispLCD_lincol
  3580  000B06  0E42               	movlw	66
  3581  000B08  ECA4  F015         	call	_ler_atuador
  3582  000B0C  0900               	iorlw	0
  3583  000B0E  A4D8               	btfss	status,2,c
  3584  000B10  EF8C  F005         	goto	u4291
  3585  000B14  EF8E  F005         	goto	u4290
  3586  000B18                     u4291:
  3587  000B18  EF95  F005         	goto	l6015
  3588  000B1C                     u4290:
  3589  000B1C  0E00               	movlw	0
  3590  000B1E  0100               	movlb	0	; () banked
  3591  000B20  6F95               	movwf	(_main$572+1)& (0+255),b
  3592  000B22  0E2D               	movlw	45
  3593  000B24  6F94               	movwf	_main$572& (0+255),b
  3594  000B26  EF9A  F005         	goto	l6017
  3595  000B2A                     l6015:
  3596  000B2A  0E00               	movlw	0
  3597  000B2C  0100               	movlb	0	; () banked
  3598  000B2E  6F95               	movwf	(_main$572+1)& (0+255),b
  3599  000B30  0E2B               	movlw	43
  3600  000B32  6F94               	movwf	_main$572& (0+255),b
  3601  000B34                     l6017:
  3602                           
  3603                           ; BSR set to: 0
  3604  000B34  5194               	movf	_main$572& (0+255),w,b
  3605  000B36  ECD3  F018         	call	_dispLCD_dataReg
  3606  000B3A  EF53  F00C         	goto	l6353
  3607  000B3E                     l6019:
  3608                           
  3609                           ; BSR set to: 0
  3610  000B3E  51B8               	movf	main@tecla& (0+255),w,b
  3611  000B40  ECF4  F015         	call	_alt_atuador
  3612  000B44  0E0C               	movlw	12
  3613  000B46  6E28               	movwf	dispLCD_lincol@col^0,c
  3614  000B48  0E03               	movlw	3
  3615  000B4A  EC3B  F017         	call	_dispLCD_lincol
  3616  000B4E  0E43               	movlw	67
  3617  000B50  ECA4  F015         	call	_ler_atuador
  3618  000B54  0900               	iorlw	0
  3619  000B56  A4D8               	btfss	status,2,c
  3620  000B58  EFB0  F005         	goto	u4301
  3621  000B5C  EFB2  F005         	goto	u4300
  3622  000B60                     u4301:
  3623  000B60  EFB9  F005         	goto	l6023
  3624  000B64                     u4300:
  3625  000B64  0E00               	movlw	0
  3626  000B66  0100               	movlb	0	; () banked
  3627  000B68  6F97               	movwf	(_main$573+1)& (0+255),b
  3628  000B6A  0E2D               	movlw	45
  3629  000B6C  6F96               	movwf	_main$573& (0+255),b
  3630  000B6E  EFBE  F005         	goto	l6025
  3631  000B72                     l6023:
  3632  000B72  0E00               	movlw	0
  3633  000B74  0100               	movlb	0	; () banked
  3634  000B76  6F97               	movwf	(_main$573+1)& (0+255),b
  3635  000B78  0E2B               	movlw	43
  3636  000B7A  6F96               	movwf	_main$573& (0+255),b
  3637  000B7C                     l6025:
  3638                           
  3639                           ; BSR set to: 0
  3640  000B7C  5196               	movf	_main$573& (0+255),w,b
  3641  000B7E  ECD3  F018         	call	_dispLCD_dataReg
  3642  000B82  EF53  F00C         	goto	l6353
  3643  000B86                     l6027:
  3644                           
  3645                           ; BSR set to: 0
  3646  000B86  51B8               	movf	main@tecla& (0+255),w,b
  3647  000B88  ECF4  F015         	call	_alt_atuador
  3648  000B8C  0E10               	movlw	16
  3649  000B8E  6E28               	movwf	dispLCD_lincol@col^0,c
  3650  000B90  0E03               	movlw	3
  3651  000B92  EC3B  F017         	call	_dispLCD_lincol
  3652  000B96  0E44               	movlw	68
  3653  000B98  ECA4  F015         	call	_ler_atuador
  3654  000B9C  0900               	iorlw	0
  3655  000B9E  A4D8               	btfss	status,2,c
  3656  000BA0  EFD4  F005         	goto	u4311
  3657  000BA4  EFD6  F005         	goto	u4310
  3658  000BA8                     u4311:
  3659  000BA8  EFDD  F005         	goto	l6031
  3660  000BAC                     u4310:
  3661  000BAC  0E00               	movlw	0
  3662  000BAE  0100               	movlb	0	; () banked
  3663  000BB0  6F99               	movwf	(_main$574+1)& (0+255),b
  3664  000BB2  0E2D               	movlw	45
  3665  000BB4  6F98               	movwf	_main$574& (0+255),b
  3666  000BB6  EFE2  F005         	goto	l6033
  3667  000BBA                     l6031:
  3668  000BBA  0E00               	movlw	0
  3669  000BBC  0100               	movlb	0	; () banked
  3670  000BBE  6F99               	movwf	(_main$574+1)& (0+255),b
  3671  000BC0  0E2B               	movlw	43
  3672  000BC2  6F98               	movwf	_main$574& (0+255),b
  3673  000BC4                     l6033:
  3674                           
  3675                           ; BSR set to: 0
  3676  000BC4  5198               	movf	_main$574& (0+255),w,b
  3677  000BC6  ECD3  F018         	call	_dispLCD_dataReg
  3678  000BCA  EF53  F00C         	goto	l6353
  3679  000BCE                     l6035:
  3680                           
  3681                           ; BSR set to: 0
  3682  000BCE  0E0A               	movlw	10
  3683  000BD0  6FB6               	movwf	main@estado& (0+255),b
  3684  000BD2  EF53  F00C         	goto	l6353
  3685  000BD6                     l6041:
  3686                           
  3687                           ; BSR set to: 0
  3688  000BD6  51B8               	movf	main@tecla& (0+255),w,b
  3689  000BD8  6E44               	movwf	??_main^0,c
  3690  000BDA  6A45               	clrf	(??_main+1)^0,c
  3691                           
  3692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3693                           ; Switch size 1, requested type "simple"
  3694                           ; Number of cases is 1, Range of values is 0 to 0
  3695                           ; switch strategies available:
  3696                           ; Name         Instructions Cycles
  3697                           ; simple_byte            4     3 (average)
  3698                           ;	Chosen strategy is simple_byte
  3699  000BDC  5045               	movf	(??_main+1)^0,w,c
  3700  000BDE  0A00               	xorlw	0	; case 0
  3701  000BE0  B4D8               	btfsc	status,2,c
  3702  000BE2  EFF5  F005         	goto	l7117
  3703  000BE6  EF53  F00C         	goto	l6353
  3704  000BEA                     l7117:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ; Switch size 1, requested type "simple"
  3708                           ; Number of cases is 6, Range of values is 35 to 68
  3709                           ; switch strategies available:
  3710                           ; Name         Instructions Cycles
  3711                           ; simple_byte           19    10 (average)
  3712                           ;	Chosen strategy is simple_byte
  3713  000BEA  5044               	movf	??_main^0,w,c
  3714  000BEC  0A23               	xorlw	35	; case 35
  3715  000BEE  B4D8               	btfsc	status,2,c
  3716  000BF0  EFE7  F005         	goto	l6035
  3717  000BF4  0A09               	xorlw	9	; case 42
  3718  000BF6  B4D8               	btfsc	status,2,c
  3719  000BF8  EF29  F001         	goto	l5753
  3720  000BFC  0A6B               	xorlw	107	; case 65
  3721  000BFE  B4D8               	btfsc	status,2,c
  3722  000C00  EF57  F005         	goto	l6003
  3723  000C04  0A03               	xorlw	3	; case 66
  3724  000C06  B4D8               	btfsc	status,2,c
  3725  000C08  EF7B  F005         	goto	l6011
  3726  000C0C  0A01               	xorlw	1	; case 67
  3727  000C0E  B4D8               	btfsc	status,2,c
  3728  000C10  EF9F  F005         	goto	l6019
  3729  000C14  0A07               	xorlw	7	; case 68
  3730  000C16  B4D8               	btfsc	status,2,c
  3731  000C18  EFC3  F005         	goto	l6027
  3732  000C1C  EF53  F00C         	goto	l6353
  3733  000C20                     l6043:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;main.c: 377:                             init_cond = salva_atuadores_init();
  3737  000C20  EC8D  F016         	call	_salva_atuadores_init	;wreg free
  3738  000C24  0100               	movlb	0	; () banked
  3739  000C26  6FAB               	movwf	main@init_cond& (0+255),b
  3740  000C28                     
  3741                           ; BSR set to: 0
  3742                           ;main.c: 378:                             IHM.clr();
  3743  000C28  EE20  F0DF         	lfsr	2,_IHM+8
  3744  000C2C  D802               	call	u4328
  3745  000C2E  EF23  F006         	goto	u4329
  3746  000C32                     u4328:
  3747  000C32  0005               	push	
  3748  000C34  6EFA               	movwf	pclath,c
  3749  000C36  50DE               	movf	postinc2,w,c
  3750  000C38  6EFD               	movwf	tosl,c
  3751  000C3A  50DE               	movf	postinc2,w,c
  3752  000C3C  6EFE               	movwf	tosh,c
  3753  000C3E  50F8               	movf	tblptru,w,c
  3754  000C40  6EFF               	movwf	tosu,c
  3755  000C42  50FA               	movf	pclath,w,c
  3756  000C44  0012               	return		;indir
  3757  000C46                     u4329:
  3758  000C46                     
  3759                           ;main.c: 379:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
  3760  000C46  EE20  F0DB         	lfsr	2,_IHM+4
  3761  000C4A  D802               	call	u4338
  3762  000C4C  EF39  F006         	goto	u4339
  3763  000C50                     u4338:
  3764  000C50  0005               	push	
  3765  000C52  6EFA               	movwf	pclath,c
  3766  000C54  50DE               	movf	postinc2,w,c
  3767  000C56  6EFD               	movwf	tosl,c
  3768  000C58  50DE               	movf	postinc2,w,c
  3769  000C5A  6EFE               	movwf	tosh,c
  3770  000C5C  50F8               	movf	tblptru,w,c
  3771  000C5E  6EFF               	movwf	tosu,c
  3772  000C60  50FA               	movf	pclath,w,c
  3773  000C62  0E00               	movlw	0
  3774  000C64  6E2D               	movwf	dispLCD@col^0,c
  3775  000C66  0E77               	movlw	low STR_19
  3776  000C68  6E2E               	movwf	dispLCD@str^0,c
  3777  000C6A  0E7F               	movlw	high STR_19
  3778  000C6C  6E2F               	movwf	(dispLCD@str+1)^0,c
  3779  000C6E  0E00               	movlw	0
  3780  000C70  0012               	return		;indir
  3781  000C72                     u4339:
  3782  000C72                     l6049:
  3783                           
  3784                           ;main.c: 380:                             estado = 14;
  3785  000C72  0E0E               	movlw	14
  3786  000C74  0100               	movlb	0	; () banked
  3787  000C76  6FB6               	movwf	main@estado& (0+255),b
  3788                           
  3789                           ;main.c: 381:                             break;
  3790  000C78  EF53  F00C         	goto	l6353
  3791  000C7C                     l6051:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;main.c: 384:                             tecla = teclado_borda();
  3795  000C7C  EC43  F01A         	call	_teclado_borda
  3796  000C80  0100               	movlb	0	; () banked
  3797  000C82  6FB8               	movwf	main@tecla& (0+255),b
  3798                           
  3799                           ;main.c: 385:                             switch( tecla )
  3800  000C84  EF97  F006         	goto	l6087
  3801  000C88                     l279:
  3802  000C88                     l6053:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;main.c: 391:                                             if( fifo_disponivel() )
  3806  000C88  EC99  F01B         	call	_fifo_disponivel	;wreg free
  3807  000C8C  0900               	iorlw	0
  3808  000C8E  B4D8               	btfsc	status,2,c
  3809  000C90  EF4C  F006         	goto	u4341
  3810  000C94  EF4E  F006         	goto	u4340
  3811  000C98                     u4341:
  3812  000C98  EF53  F00C         	goto	l6353
  3813  000C9C                     u4340:
  3814  000C9C                     
  3815                           ;main.c: 392:                                             {;main.c: 393:                
      +                                                           alt_atuador(tecla);
  3816  000C9C  0100               	movlb	0	; () banked
  3817  000C9E  51B8               	movf	main@tecla& (0+255),w,b
  3818  000CA0  ECF4  F015         	call	_alt_atuador
  3819                           
  3820                           ;main.c: 394:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
  3821  000CA4  0100               	movlb	0	; () banked
  3822  000CA6  51B8               	movf	main@tecla& (0+255),w,b
  3823  000CA8  ECA4  F015         	call	_ler_atuador
  3824  000CAC  0900               	iorlw	0
  3825  000CAE  A4D8               	btfss	status,2,c
  3826  000CB0  EF5C  F006         	goto	u4351
  3827  000CB4  EF5E  F006         	goto	u4350
  3828  000CB8                     u4351:
  3829  000CB8  EF69  F006         	goto	l283
  3830  000CBC                     u4350:
  3831  000CBC  0E20               	movlw	32
  3832  000CBE  C0B8  F044         	movff	main@tecla,??_main
  3833  000CC2  6A45               	clrf	(??_main+1)^0,c
  3834  000CC4  1044               	iorwf	??_main^0,w,c
  3835  000CC6  0100               	movlb	0	; () banked
  3836  000CC8  6F9A               	movwf	_main$576& (0+255),b
  3837  000CCA  5045               	movf	(??_main+1)^0,w,c
  3838  000CCC  6F9B               	movwf	(_main$576+1)& (0+255),b
  3839  000CCE  EF6D  F006         	goto	l6059
  3840  000CD2                     l283:
  3841  000CD2  C0B8  F09A         	movff	main@tecla,_main$576
  3842  000CD6  0100               	movlb	0	; () banked
  3843  000CD8  6B9B               	clrf	(_main$576+1)& (0+255),b
  3844  000CDA                     l6059:
  3845                           
  3846                           ; BSR set to: 0
  3847  000CDA  519A               	movf	_main$576& (0+255),w,b
  3848  000CDC  EC7F  F018         	call	_fifo_add
  3849  000CE0  EF3C  F004         	goto	l5941
  3850  000CE4                     l6063:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;main.c: 399:                                             fifo_indicePrint_inc();
  3854  000CE4  EC9C  F017         	call	_fifo_indicePrint_inc	;wreg free
  3855  000CE8  EF3C  F004         	goto	l5941
  3856  000CEC                     l6067:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;main.c: 403:                                             fifo_indicePrint_dec();
  3860  000CEC  ECC4  F01B         	call	_fifo_indicePrint_dec	;wreg free
  3861  000CF0  EF3C  F004         	goto	l5941
  3862  000CF4                     l6071:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 408:                                             if(fifo_indice() == 2 )
  3866  000CF4  EC45  F01C         	call	_fifo_indice	;wreg free
  3867  000CF8  0A02               	xorlw	2
  3868  000CFA  A4D8               	btfss	status,2,c
  3869  000CFC  EF82  F006         	goto	u4361
  3870  000D00  EF84  F006         	goto	u4360
  3871  000D04                     u4361:
  3872  000D04  EF86  F006         	goto	l6075
  3873  000D08                     u4360:
  3874  000D08  EF6A  F001         	goto	l5769
  3875  000D0C                     l6075:
  3876                           
  3877                           ;main.c: 411:                                             {;main.c: 412:                
      +                                                           fifo_delete();
  3878  000D0C  EC41  F016         	call	_fifo_delete	;wreg free
  3879  000D10  EF3C  F004         	goto	l5941
  3880  000D14                     l6079:
  3881  000D14  0E4A               	movlw	74
  3882  000D16  0100               	movlb	0	; () banked
  3883  000D18  6FB6               	movwf	main@estado& (0+255),b
  3884  000D1A  EF53  F00C         	goto	l6353
  3885  000D1E                     l6081:
  3886                           
  3887                           ; BSR set to: 0
  3888  000D1E  0E29               	movlw	41
  3889  000D20  6FB6               	movwf	main@estado& (0+255),b
  3890  000D22  EF53  F00C         	goto	l6353
  3891  000D26                     l6083:
  3892                           
  3893                           ; BSR set to: 0
  3894  000D26  0E5A               	movlw	90
  3895  000D28  6FB6               	movwf	main@estado& (0+255),b
  3896  000D2A  EF53  F00C         	goto	l6353
  3897  000D2E                     l6087:
  3898                           
  3899                           ; BSR set to: 0
  3900  000D2E  51B8               	movf	main@tecla& (0+255),w,b
  3901  000D30  6E44               	movwf	??_main^0,c
  3902  000D32  6A45               	clrf	(??_main+1)^0,c
  3903                           
  3904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3905                           ; Switch size 1, requested type "simple"
  3906                           ; Number of cases is 1, Range of values is 0 to 0
  3907                           ; switch strategies available:
  3908                           ; Name         Instructions Cycles
  3909                           ; simple_byte            4     3 (average)
  3910                           ;	Chosen strategy is simple_byte
  3911  000D34  5045               	movf	(??_main+1)^0,w,c
  3912  000D36  0A00               	xorlw	0	; case 0
  3913  000D38  B4D8               	btfsc	status,2,c
  3914  000D3A  EFA1  F006         	goto	l7119
  3915  000D3E  EF53  F00C         	goto	l6353
  3916  000D42                     l7119:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ; Switch size 1, requested type "simple"
  3920                           ; Number of cases is 10, Range of values is 35 to 68
  3921                           ; switch strategies available:
  3922                           ; Name         Instructions Cycles
  3923                           ; simple_byte           31    16 (average)
  3924                           ;	Chosen strategy is simple_byte
  3925  000D42  5044               	movf	??_main^0,w,c
  3926  000D44  0A23               	xorlw	35	; case 35
  3927  000D46  B4D8               	btfsc	status,2,c
  3928  000D48  EF8A  F006         	goto	l6079
  3929  000D4C  0A09               	xorlw	9	; case 42
  3930  000D4E  B4D8               	btfsc	status,2,c
  3931  000D50  EF7A  F006         	goto	l6071
  3932  000D54  0A1A               	xorlw	26	; case 48
  3933  000D56  B4D8               	btfsc	status,2,c
  3934  000D58  EF8F  F006         	goto	l6081
  3935  000D5C  0A04               	xorlw	4	; case 52
  3936  000D5E  B4D8               	btfsc	status,2,c
  3937  000D60  EF76  F006         	goto	l6067
  3938  000D64  0A02               	xorlw	2	; case 54
  3939  000D66  B4D8               	btfsc	status,2,c
  3940  000D68  EF72  F006         	goto	l6063
  3941  000D6C  0A0F               	xorlw	15	; case 57
  3942  000D6E  B4D8               	btfsc	status,2,c
  3943  000D70  EF93  F006         	goto	l6083
  3944  000D74  0A78               	xorlw	120	; case 65
  3945  000D76  B4D8               	btfsc	status,2,c
  3946  000D78  EF44  F006         	goto	l279
  3947  000D7C  0A03               	xorlw	3	; case 66
  3948  000D7E  B4D8               	btfsc	status,2,c
  3949  000D80  EF44  F006         	goto	l6053
  3950  000D84  0A01               	xorlw	1	; case 67
  3951  000D86  B4D8               	btfsc	status,2,c
  3952  000D88  EF44  F006         	goto	l6053
  3953  000D8C  0A07               	xorlw	7	; case 68
  3954  000D8E  B4D8               	btfsc	status,2,c
  3955  000D90  EF44  F006         	goto	l6053
  3956  000D94  EF53  F00C         	goto	l6353
  3957  000D98                     l6089:
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;main.c: 426:                             fifo_print();
  3961  000D98  ECAF  F00D         	call	_fifo_print	;wreg free
  3962  000D9C  EF39  F006         	goto	l6049
  3963  000DA0                     l6093:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;main.c: 431:                             IHM.printpos(3,0,"<  /  >");
  3967  000DA0  EE20  F0DB         	lfsr	2,_IHM+4
  3968  000DA4  D802               	call	u4378
  3969  000DA6  EFE6  F006         	goto	u4379
  3970  000DAA                     u4378:
  3971  000DAA  0005               	push	
  3972  000DAC  6EFA               	movwf	pclath,c
  3973  000DAE  50DE               	movf	postinc2,w,c
  3974  000DB0  6EFD               	movwf	tosl,c
  3975  000DB2  50DE               	movf	postinc2,w,c
  3976  000DB4  6EFE               	movwf	tosh,c
  3977  000DB6  50F8               	movf	tblptru,w,c
  3978  000DB8  6EFF               	movwf	tosu,c
  3979  000DBA  50FA               	movf	pclath,w,c
  3980  000DBC  0E00               	movlw	0
  3981  000DBE  6E2D               	movwf	dispLCD@col^0,c
  3982  000DC0  0EF5               	movlw	low STR_20
  3983  000DC2  6E2E               	movwf	dispLCD@str^0,c
  3984  000DC4  0E7F               	movlw	high STR_20
  3985  000DC6  6E2F               	movwf	(dispLCD@str+1)^0,c
  3986  000DC8  0E03               	movlw	3
  3987  000DCA  0012               	return		;indir
  3988  000DCC                     u4379:
  3989  000DCC                     
  3990                           ;main.c: 432:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
  3991  000DCC  EE20  F0DD         	lfsr	2,_IHM+6
  3992  000DD0  D802               	call	u4388
  3993  000DD2  EF03  F007         	goto	u4389
  3994  000DD6                     u4388:
  3995  000DD6  0005               	push	
  3996  000DD8  6EFA               	movwf	pclath,c
  3997  000DDA  50DE               	movf	postinc2,w,c
  3998  000DDC  6EFD               	movwf	tosl,c
  3999  000DDE  50DE               	movf	postinc2,w,c
  4000  000DE0  6EFE               	movwf	tosh,c
  4001  000DE2  50F8               	movf	tblptru,w,c
  4002  000DE4  6EFF               	movwf	tosu,c
  4003  000DE6  50FA               	movf	pclath,w,c
  4004  000DE8  0E01               	movlw	1
  4005  000DEA  6E31               	movwf	dispLCD_num@col^0,c
  4006  000DEC  EC45  F01C         	call	_fifo_indice
  4007  000DF0  6E44               	movwf	??_main^0,c
  4008  000DF2  0EFE               	movlw	254
  4009  000DF4  2444               	addwf	??_main^0,w,c
  4010  000DF6  6E32               	movwf	dispLCD_num@num^0,c
  4011  000DF8  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4012  000DFA  0EFF               	movlw	255
  4013  000DFC  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4014  000DFE  0E02               	movlw	2
  4015  000E00  6E34               	movwf	dispLCD_num@tam^0,c
  4016  000E02  0E03               	movlw	3
  4017  000E04  0012               	return		;indir
  4018  000E06                     u4389:
  4019  000E06                     
  4020                           ;main.c: 433:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
  4021  000E06  EE20  F0DD         	lfsr	2,_IHM+6
  4022  000E0A  D802               	call	u4398
  4023  000E0C  EF20  F007         	goto	u4399
  4024  000E10                     u4398:
  4025  000E10  0005               	push	
  4026  000E12  6EFA               	movwf	pclath,c
  4027  000E14  50DE               	movf	postinc2,w,c
  4028  000E16  6EFD               	movwf	tosl,c
  4029  000E18  50DE               	movf	postinc2,w,c
  4030  000E1A  6EFE               	movwf	tosh,c
  4031  000E1C  50F8               	movf	tblptru,w,c
  4032  000E1E  6EFF               	movwf	tosu,c
  4033  000E20  50FA               	movf	pclath,w,c
  4034  000E22  0E04               	movlw	4
  4035  000E24  6E31               	movwf	dispLCD_num@col^0,c
  4036  000E26  EC43  F01C         	call	_fifo_tam
  4037  000E2A  6E44               	movwf	??_main^0,c
  4038  000E2C  0EFE               	movlw	254
  4039  000E2E  2444               	addwf	??_main^0,w,c
  4040  000E30  6E32               	movwf	dispLCD_num@num^0,c
  4041  000E32  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4042  000E34  0EFF               	movlw	255
  4043  000E36  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4044  000E38  0E02               	movlw	2
  4045  000E3A  6E34               	movwf	dispLCD_num@tam^0,c
  4046  000E3C  0E03               	movlw	3
  4047  000E3E  0012               	return		;indir
  4048  000E40                     u4399:
  4049  000E40                     
  4050                           ;main.c: 434:                             estado = 11;
  4051  000E40  0E0B               	movlw	11
  4052  000E42  0100               	movlb	0	; () banked
  4053  000E44  6FB6               	movwf	main@estado& (0+255),b
  4054                           
  4055                           ;main.c: 435:                             break;
  4056  000E46  EF53  F00C         	goto	l6353
  4057  000E4A                     l6101:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;main.c: 439:                             estado = 70;
  4061  000E4A  0E46               	movlw	70
  4062  000E4C  6FB6               	movwf	main@estado& (0+255),b
  4063                           
  4064                           ;main.c: 440:                             meAtuadores = 1;
  4065  000E4E  0E01               	movlw	1
  4066  000E50  6FAE               	movwf	main@meAtuadores& (0+255),b
  4067                           
  4068                           ;main.c: 441:                             break;
  4069  000E52  EF53  F00C         	goto	l6353
  4070  000E56                     l6103:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;main.c: 444:                             if( meAtuadores == 3 && botao != 2 )
  4074  000E56  0E03               	movlw	3
  4075  000E58  19AE               	xorwf	main@meAtuadores& (0+255),w,b
  4076  000E5A  A4D8               	btfss	status,2,c
  4077  000E5C  EF32  F007         	goto	u4401
  4078  000E60  EF34  F007         	goto	u4400
  4079  000E64                     u4401:
  4080  000E64  EFCE  F007         	goto	l6123
  4081  000E68                     u4400:
  4082  000E68                     
  4083                           ; BSR set to: 0
  4084  000E68  0E02               	movlw	2
  4085  000E6A  19B1               	xorwf	main@botao& (0+255),w,b
  4086  000E6C  B4D8               	btfsc	status,2,c
  4087  000E6E  EF3B  F007         	goto	u4411
  4088  000E72  EF3D  F007         	goto	u4410
  4089  000E76                     u4411:
  4090  000E76  EFCE  F007         	goto	l6123
  4091  000E7A                     u4410:
  4092  000E7A                     
  4093                           ; BSR set to: 0
  4094                           ;main.c: 445:                             {;main.c: 446:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
  4095  000E7A  EE20  F0DB         	lfsr	2,_IHM+4
  4096  000E7E  D802               	call	u4428
  4097  000E80  EF53  F007         	goto	u4429
  4098  000E84                     u4428:
  4099  000E84  0005               	push	
  4100  000E86  6EFA               	movwf	pclath,c
  4101  000E88  50DE               	movf	postinc2,w,c
  4102  000E8A  6EFD               	movwf	tosl,c
  4103  000E8C  50DE               	movf	postinc2,w,c
  4104  000E8E  6EFE               	movwf	tosh,c
  4105  000E90  50F8               	movf	tblptru,w,c
  4106  000E92  6EFF               	movwf	tosu,c
  4107  000E94  50FA               	movf	pclath,w,c
  4108  000E96  0E00               	movlw	0
  4109  000E98  6E2D               	movwf	dispLCD@col^0,c
  4110  000E9A  0EA5               	movlw	low STR_21
  4111  000E9C  6E2E               	movwf	dispLCD@str^0,c
  4112  000E9E  0E7E               	movlw	high STR_21
  4113  000EA0  6E2F               	movwf	(dispLCD@str+1)^0,c
  4114  000EA2  0E00               	movlw	0
  4115  000EA4  0012               	return		;indir
  4116  000EA6                     u4429:
  4117  000EA6                     
  4118                           ;main.c: 447:                                 printExec(1, -1);
  4119  000EA6  0EFF               	movlw	255
  4120  000EA8  6E3F               	movwf	printExec@ind^0,c
  4121  000EAA  0E01               	movlw	1
  4122  000EAC  EC21  F00F         	call	_printExec
  4123  000EB0                     
  4124                           ;main.c: 448:                                 printExec(9, 0);
  4125  000EB0  0E00               	movlw	0
  4126  000EB2  6E3F               	movwf	printExec@ind^0,c
  4127  000EB4  0E09               	movlw	9
  4128  000EB6  EC21  F00F         	call	_printExec
  4129  000EBA                     
  4130                           ;main.c: 449:                                 printExec(14, 1);
  4131  000EBA  0E01               	movlw	1
  4132  000EBC  6E3F               	movwf	printExec@ind^0,c
  4133  000EBE  0E0E               	movlw	14
  4134  000EC0  EC21  F00F         	call	_printExec
  4135  000EC4                     
  4136                           ;main.c: 450:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
  4137  000EC4  EE20  F0DB         	lfsr	2,_IHM+4
  4138  000EC8  D802               	call	u4438
  4139  000ECA  EF78  F007         	goto	u4439
  4140  000ECE                     u4438:
  4141  000ECE  0005               	push	
  4142  000ED0  6EFA               	movwf	pclath,c
  4143  000ED2  50DE               	movf	postinc2,w,c
  4144  000ED4  6EFD               	movwf	tosl,c
  4145  000ED6  50DE               	movf	postinc2,w,c
  4146  000ED8  6EFE               	movwf	tosh,c
  4147  000EDA  50F8               	movf	tblptru,w,c
  4148  000EDC  6EFF               	movwf	tosu,c
  4149  000EDE  50FA               	movf	pclath,w,c
  4150  000EE0  0E00               	movlw	0
  4151  000EE2  6E2D               	movwf	dispLCD@col^0,c
  4152  000EE4  0E66               	movlw	low STR_22
  4153  000EE6  6E2E               	movwf	dispLCD@str^0,c
  4154  000EE8  0E7E               	movlw	high STR_22
  4155  000EEA  6E2F               	movwf	(dispLCD@str+1)^0,c
  4156  000EEC  0E02               	movlw	2
  4157  000EEE  0012               	return		;indir
  4158  000EF0                     u4439:
  4159  000EF0                     
  4160                           ;main.c: 451:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
  4161  000EF0  EE20  F0DD         	lfsr	2,_IHM+6
  4162  000EF4  D802               	call	u4448
  4163  000EF6  EF95  F007         	goto	u4449
  4164  000EFA                     u4448:
  4165  000EFA  0005               	push	
  4166  000EFC  6EFA               	movwf	pclath,c
  4167  000EFE  50DE               	movf	postinc2,w,c
  4168  000F00  6EFD               	movwf	tosl,c
  4169  000F02  50DE               	movf	postinc2,w,c
  4170  000F04  6EFE               	movwf	tosh,c
  4171  000F06  50F8               	movf	tblptru,w,c
  4172  000F08  6EFF               	movwf	tosu,c
  4173  000F0A  50FA               	movf	pclath,w,c
  4174  000F0C  0E04               	movlw	4
  4175  000F0E  6E31               	movwf	dispLCD_num@col^0,c
  4176  000F10  EC45  F01C         	call	_fifo_indice
  4177  000F14  6E44               	movwf	??_main^0,c
  4178  000F16  0EFE               	movlw	254
  4179  000F18  2444               	addwf	??_main^0,w,c
  4180  000F1A  6E32               	movwf	dispLCD_num@num^0,c
  4181  000F1C  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4182  000F1E  0EFF               	movlw	255
  4183  000F20  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4184  000F22  0E02               	movlw	2
  4185  000F24  6E34               	movwf	dispLCD_num@tam^0,c
  4186  000F26  0E02               	movlw	2
  4187  000F28  0012               	return		;indir
  4188  000F2A                     u4449:
  4189  000F2A                     
  4190                           ;main.c: 452:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
  4191  000F2A  EE20  F0DD         	lfsr	2,_IHM+6
  4192  000F2E  D802               	call	u4458
  4193  000F30  EFB2  F007         	goto	u4459
  4194  000F34                     u4458:
  4195  000F34  0005               	push	
  4196  000F36  6EFA               	movwf	pclath,c
  4197  000F38  50DE               	movf	postinc2,w,c
  4198  000F3A  6EFD               	movwf	tosl,c
  4199  000F3C  50DE               	movf	postinc2,w,c
  4200  000F3E  6EFE               	movwf	tosh,c
  4201  000F40  50F8               	movf	tblptru,w,c
  4202  000F42  6EFF               	movwf	tosu,c
  4203  000F44  50FA               	movf	pclath,w,c
  4204  000F46  0E01               	movlw	1
  4205  000F48  6E31               	movwf	dispLCD_num@col^0,c
  4206  000F4A  EC41  F01C         	call	_getIndicePassos
  4207  000F4E  6E44               	movwf	??_main^0,c
  4208  000F50  0EFF               	movlw	255
  4209  000F52  2444               	addwf	??_main^0,w,c
  4210  000F54  6E32               	movwf	dispLCD_num@num^0,c
  4211  000F56  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4212  000F58  0EFF               	movlw	255
  4213  000F5A  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4214  000F5C  0E02               	movlw	2
  4215  000F5E  6E34               	movwf	dispLCD_num@tam^0,c
  4216  000F60  0E02               	movlw	2
  4217  000F62  0012               	return		;indir
  4218  000F64                     u4459:
  4219  000F64                     
  4220                           ;main.c: 453:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
  4221  000F64  EE20  F0DD         	lfsr	2,_IHM+6
  4222  000F68  D802               	call	u4468
  4223  000F6A  EFCE  F007         	goto	u4469
  4224  000F6E                     u4468:
  4225  000F6E  0005               	push	
  4226  000F70  6EFA               	movwf	pclath,c
  4227  000F72  50DE               	movf	postinc2,w,c
  4228  000F74  6EFD               	movwf	tosl,c
  4229  000F76  50DE               	movf	postinc2,w,c
  4230  000F78  6EFE               	movwf	tosh,c
  4231  000F7A  50F8               	movf	tblptru,w,c
  4232  000F7C  6EFF               	movwf	tosu,c
  4233  000F7E  50FA               	movf	pclath,w,c
  4234  000F80  0E0B               	movlw	11
  4235  000F82  6E31               	movwf	dispLCD_num@col^0,c
  4236  000F84  EC25  F01C         	call	_getContCiclos
  4237  000F88  0E01               	movlw	1
  4238  000F8A  2426               	addwf	?_getContCiclos^0,w,c
  4239  000F8C  6E32               	movwf	dispLCD_num@num^0,c
  4240  000F8E  0E00               	movlw	0
  4241  000F90  2027               	addwfc	(?_getContCiclos+1)^0,w,c
  4242  000F92  6E33               	movwf	(dispLCD_num@num+1)^0,c
  4243  000F94  0E05               	movlw	5
  4244  000F96  6E34               	movwf	dispLCD_num@tam^0,c
  4245  000F98  0E02               	movlw	2
  4246  000F9A  0012               	return		;indir
  4247  000F9C                     u4469:
  4248  000F9C                     l6123:
  4249                           
  4250                           ;main.c: 456:                             if(meAtuadores == 0)
  4251  000F9C  0100               	movlb	0	; () banked
  4252  000F9E  51AE               	movf	main@meAtuadores& (0+255),w,b
  4253  000FA0  A4D8               	btfss	status,2,c
  4254  000FA2  EFD5  F007         	goto	u4471
  4255  000FA6  EFD7  F007         	goto	u4470
  4256  000FAA                     u4471:
  4257  000FAA  EFE8  F007         	goto	l6129
  4258  000FAE                     u4470:
  4259  000FAE                     
  4260                           ; BSR set to: 0
  4261                           ;main.c: 457:                             {;main.c: 458:                                
      +                           estado = 16;
  4262  000FAE  0E10               	movlw	16
  4263  000FB0  6FB6               	movwf	main@estado& (0+255),b
  4264  000FB2                     
  4265                           ; BSR set to: 0
  4266                           ;main.c: 459:                                 IHM.clr();
  4267  000FB2  EE20  F0DF         	lfsr	2,_IHM+8
  4268  000FB6  D802               	call	u4488
  4269  000FB8  EFE8  F007         	goto	u4489
  4270  000FBC                     u4488:
  4271  000FBC  0005               	push	
  4272  000FBE  6EFA               	movwf	pclath,c
  4273  000FC0  50DE               	movf	postinc2,w,c
  4274  000FC2  6EFD               	movwf	tosl,c
  4275  000FC4  50DE               	movf	postinc2,w,c
  4276  000FC6  6EFE               	movwf	tosh,c
  4277  000FC8  50F8               	movf	tblptru,w,c
  4278  000FCA  6EFF               	movwf	tosu,c
  4279  000FCC  50FA               	movf	pclath,w,c
  4280  000FCE  0012               	return		;indir
  4281  000FD0                     u4489:
  4282  000FD0                     l6129:
  4283                           
  4284                           ;main.c: 461:                             tecla = teclado_borda();
  4285  000FD0  EC43  F01A         	call	_teclado_borda
  4286  000FD4  0100               	movlb	0	; () banked
  4287  000FD6  6FB8               	movwf	main@tecla& (0+255),b
  4288                           
  4289                           ;main.c: 462:                             switch(tecla)
  4290  000FD8  EF07  F008         	goto	l6143
  4291  000FDC                     l6131:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;main.c: 465:                                     botao = 1;
  4295  000FDC  0E01               	movlw	1
  4296  000FDE  6FB1               	movwf	main@botao& (0+255),b
  4297                           
  4298                           ;main.c: 466:                                     break;
  4299  000FE0  EF53  F00C         	goto	l6353
  4300  000FE4                     l6133:
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;main.c: 469:                                     botao = 2;
  4304  000FE4  0E02               	movlw	2
  4305  000FE6  6FB1               	movwf	main@botao& (0+255),b
  4306                           
  4307                           ;main.c: 470:                                     break;
  4308  000FE8  EF53  F00C         	goto	l6353
  4309  000FEC                     l6135:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;main.c: 473:                                     botao = 0;
  4313  000FEC  0E00               	movlw	0
  4314  000FEE  6FB1               	movwf	main@botao& (0+255),b
  4315                           
  4316                           ;main.c: 474:                                     break;
  4317  000FF0  EF53  F00C         	goto	l6353
  4318  000FF4                     l6137:
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;main.c: 477:                                     if(botao == 2)
  4322  000FF4  0E02               	movlw	2
  4323  000FF6  19B1               	xorwf	main@botao& (0+255),w,b
  4324  000FF8  A4D8               	btfss	status,2,c
  4325  000FFA  EF01  F008         	goto	u4491
  4326  000FFE  EF03  F008         	goto	u4490
  4327  001002                     u4491:
  4328  001002  EF53  F00C         	goto	l6353
  4329  001006                     u4490:
  4330  001006                     
  4331                           ; BSR set to: 0
  4332                           ;main.c: 478:                                         botao = 3;
  4333  001006  0E03               	movlw	3
  4334  001008  6FB1               	movwf	main@botao& (0+255),b
  4335  00100A  EF53  F00C         	goto	l6353
  4336  00100E                     l6143:
  4337                           
  4338                           ; BSR set to: 0
  4339  00100E  51B8               	movf	main@tecla& (0+255),w,b
  4340  001010  6E44               	movwf	??_main^0,c
  4341  001012  6A45               	clrf	(??_main+1)^0,c
  4342                           
  4343                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4344                           ; Switch size 1, requested type "simple"
  4345                           ; Number of cases is 1, Range of values is 0 to 0
  4346                           ; switch strategies available:
  4347                           ; Name         Instructions Cycles
  4348                           ; simple_byte            4     3 (average)
  4349                           ;	Chosen strategy is simple_byte
  4350  001014  5045               	movf	(??_main+1)^0,w,c
  4351  001016  0A00               	xorlw	0	; case 0
  4352  001018  B4D8               	btfsc	status,2,c
  4353  00101A  EF11  F008         	goto	l7121
  4354  00101E  EF53  F00C         	goto	l6353
  4355  001022                     l7121:
  4356                           
  4357                           ; BSR set to: 0
  4358                           ; Switch size 1, requested type "simple"
  4359                           ; Number of cases is 4, Range of values is 35 to 53
  4360                           ; switch strategies available:
  4361                           ; Name         Instructions Cycles
  4362                           ; simple_byte           13     7 (average)
  4363                           ;	Chosen strategy is simple_byte
  4364  001022  5044               	movf	??_main^0,w,c
  4365  001024  0A23               	xorlw	35	; case 35
  4366  001026  B4D8               	btfsc	status,2,c
  4367  001028  EFEE  F007         	goto	l6131
  4368  00102C  0A13               	xorlw	19	; case 48
  4369  00102E  B4D8               	btfsc	status,2,c
  4370  001030  EFF6  F007         	goto	l6135
  4371  001034  0A01               	xorlw	1	; case 49
  4372  001036  B4D8               	btfsc	status,2,c
  4373  001038  EFFA  F007         	goto	l6137
  4374  00103C  0A04               	xorlw	4	; case 53
  4375  00103E  B4D8               	btfsc	status,2,c
  4376  001040  EFF2  F007         	goto	l6133
  4377  001044  EF53  F00C         	goto	l6353
  4378  001048                     l6145:
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;main.c: 484:                             tecla = teclado_borda();
  4382  001048  EC43  F01A         	call	_teclado_borda	;wreg free
  4383  00104C  0100               	movlb	0	; () banked
  4384  00104E  6FB8               	movwf	main@tecla& (0+255),b
  4385  001050                     
  4386                           ; BSR set to: 0
  4387                           ;main.c: 485:                             if(tecla >= '0' && tecla <= '9')
  4388  001050  0E2F               	movlw	47
  4389  001052  65B8               	cpfsgt	main@tecla& (0+255),b
  4390  001054  EF2E  F008         	goto	u4501
  4391  001058  EF30  F008         	goto	u4500
  4392  00105C                     u4501:
  4393  00105C  EF51  F008         	goto	l6157
  4394  001060                     u4500:
  4395  001060                     
  4396                           ; BSR set to: 0
  4397  001060  0E3A               	movlw	58
  4398  001062  61B8               	cpfslt	main@tecla& (0+255),b
  4399  001064  EF36  F008         	goto	u4511
  4400  001068  EF38  F008         	goto	u4510
  4401  00106C                     u4511:
  4402  00106C  EF51  F008         	goto	l6157
  4403  001070                     u4510:
  4404  001070                     
  4405                           ; BSR set to: 0
  4406                           ;main.c: 486:                             {;main.c: 487:                                
      +                           dignum_conc(tecla, &num);
  4407  001070  0EB2               	movlw	low main@num
  4408  001072  6E2C               	movwf	dignum_conc@ptrNum^0,c
  4409  001074  0E00               	movlw	high main@num
  4410  001076  6E2D               	movwf	(dignum_conc@ptrNum+1)^0,c
  4411  001078  51B8               	movf	main@tecla& (0+255),w,b
  4412  00107A  EC42  F019         	call	_dignum_conc
  4413  00107E                     
  4414                           ;main.c: 488:                                 if(num > 120)
  4415  00107E  0100               	movlb	0	; () banked
  4416  001080  51B3               	movf	(main@num+1)& (0+255),w,b
  4417  001082  E109               	bnz	u4520
  4418  001084  0E79               	movlw	121
  4419  001086  5DB2               	subwf	main@num& (0+255),w,b
  4420  001088  A0D8               	btfss	status,0,c
  4421  00108A  EF49  F008         	goto	u4521
  4422  00108E  EF4B  F008         	goto	u4520
  4423  001092                     u4521:
  4424  001092  EF4F  F008         	goto	l310
  4425  001096                     u4520:
  4426  001096                     
  4427                           ; BSR set to: 0
  4428                           ;main.c: 489:                                     num = 120;
  4429  001096  0E00               	movlw	0
  4430  001098  6FB3               	movwf	(main@num+1)& (0+255),b
  4431  00109A  0E78               	movlw	120
  4432  00109C  6FB2               	movwf	main@num& (0+255),b
  4433  00109E                     l310:
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;main.c: 490:                                 estado = 41;
  4437  00109E  0E29               	movlw	41
  4438  0010A0  6FB6               	movwf	main@estado& (0+255),b
  4439  0010A2                     l6157:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;main.c: 492:                             if(tecla == '*')
  4443  0010A2  0E2A               	movlw	42
  4444  0010A4  19B8               	xorwf	main@tecla& (0+255),w,b
  4445  0010A6  A4D8               	btfss	status,2,c
  4446  0010A8  EF58  F008         	goto	u4531
  4447  0010AC  EF5A  F008         	goto	u4530
  4448  0010B0                     u4531:
  4449  0010B0  EF63  F008         	goto	l6163
  4450  0010B4                     u4530:
  4451  0010B4                     
  4452                           ; BSR set to: 0
  4453                           ;main.c: 493:                             {;main.c: 494:                                
      +                           dignum_apagar(&num);
  4454  0010B4  0EB2               	movlw	low main@num
  4455  0010B6  6E2D               	movwf	dignum_apagar@ptrNum^0,c
  4456  0010B8  0E00               	movlw	high main@num
  4457  0010BA  6E2E               	movwf	(dignum_apagar@ptrNum+1)^0,c
  4458  0010BC  ECA8  F01A         	call	_dignum_apagar	;wreg free
  4459  0010C0                     
  4460                           ;main.c: 495:                                 estado = 41;
  4461  0010C0  0E29               	movlw	41
  4462  0010C2  0100               	movlb	0	; () banked
  4463  0010C4  6FB6               	movwf	main@estado& (0+255),b
  4464  0010C6                     l6163:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 497:                             if(tecla == '#')
  4468  0010C6  0E23               	movlw	35
  4469  0010C8  19B8               	xorwf	main@tecla& (0+255),w,b
  4470  0010CA  A4D8               	btfss	status,2,c
  4471  0010CC  EF6A  F008         	goto	u4541
  4472  0010D0  EF6C  F008         	goto	u4540
  4473  0010D4                     u4541:
  4474  0010D4  EF53  F00C         	goto	l6353
  4475  0010D8                     u4540:
  4476  0010D8                     
  4477                           ; BSR set to: 0
  4478                           ;main.c: 498:                                 estado = 42;
  4479  0010D8  0E2A               	movlw	42
  4480  0010DA  6FB6               	movwf	main@estado& (0+255),b
  4481  0010DC  EF53  F00C         	goto	l6353
  4482  0010E0                     l6167:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;main.c: 503:                             IHM.printpos(2, 0, "config tempo:      s");
  4486  0010E0  EE20  F0DB         	lfsr	2,_IHM+4
  4487  0010E4  D802               	call	u4558
  4488  0010E6  EF86  F008         	goto	u4559
  4489  0010EA                     u4558:
  4490  0010EA  0005               	push	
  4491  0010EC  6EFA               	movwf	pclath,c
  4492  0010EE  50DE               	movf	postinc2,w,c
  4493  0010F0  6EFD               	movwf	tosl,c
  4494  0010F2  50DE               	movf	postinc2,w,c
  4495  0010F4  6EFE               	movwf	tosh,c
  4496  0010F6  50F8               	movf	tblptru,w,c
  4497  0010F8  6EFF               	movwf	tosu,c
  4498  0010FA  50FA               	movf	pclath,w,c
  4499  0010FC  0E00               	movlw	0
  4500  0010FE  6E2D               	movwf	dispLCD@col^0,c
  4501  001100  0EE0               	movlw	low STR_23
  4502  001102  6E2E               	movwf	dispLCD@str^0,c
  4503  001104  0E7F               	movlw	high STR_23
  4504  001106  6E2F               	movwf	(dispLCD@str+1)^0,c
  4505  001108  0E02               	movlw	2
  4506  00110A  0012               	return		;indir
  4507  00110C                     u4559:
  4508  00110C                     
  4509                           ;main.c: 504:                             IHM.printv(2, 15, num, 3);
  4510  00110C  EE20  F0DD         	lfsr	2,_IHM+6
  4511  001110  D802               	call	u4568
  4512  001112  EF9E  F008         	goto	u4569
  4513  001116                     u4568:
  4514  001116  0005               	push	
  4515  001118  6EFA               	movwf	pclath,c
  4516  00111A  50DE               	movf	postinc2,w,c
  4517  00111C  6EFD               	movwf	tosl,c
  4518  00111E  50DE               	movf	postinc2,w,c
  4519  001120  6EFE               	movwf	tosh,c
  4520  001122  50F8               	movf	tblptru,w,c
  4521  001124  6EFF               	movwf	tosu,c
  4522  001126  50FA               	movf	pclath,w,c
  4523  001128  0E0F               	movlw	15
  4524  00112A  6E31               	movwf	dispLCD_num@col^0,c
  4525  00112C  C0B2  F032         	movff	main@num,dispLCD_num@num
  4526  001130  C0B3  F033         	movff	main@num+1,dispLCD_num@num+1
  4527  001134  0E03               	movlw	3
  4528  001136  6E34               	movwf	dispLCD_num@tam^0,c
  4529  001138  0E02               	movlw	2
  4530  00113A  0012               	return		;indir
  4531  00113C                     u4569:
  4532  00113C                     
  4533                           ;main.c: 505:                             estado = 40;
  4534  00113C  0E28               	movlw	40
  4535  00113E  0100               	movlb	0	; () banked
  4536  001140  6FB6               	movwf	main@estado& (0+255),b
  4537                           
  4538                           ;main.c: 506:                             break;
  4539  001142  EF53  F00C         	goto	l6353
  4540  001146                     l6173:
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;main.c: 509:                             fifo_add_tempo(num);
  4544  001146  51B2               	movf	main@num& (0+255),w,b
  4545  001148  EC53  F018         	call	_fifo_add_tempo
  4546  00114C                     l6175:
  4547                           
  4548                           ;main.c: 510:                             IHM.clr();
  4549  00114C  EE20  F0DF         	lfsr	2,_IHM+8
  4550  001150  D802               	call	u4578
  4551  001152  EFB5  F008         	goto	u4579
  4552  001156                     u4578:
  4553  001156  0005               	push	
  4554  001158  6EFA               	movwf	pclath,c
  4555  00115A  50DE               	movf	postinc2,w,c
  4556  00115C  6EFD               	movwf	tosl,c
  4557  00115E  50DE               	movf	postinc2,w,c
  4558  001160  6EFE               	movwf	tosh,c
  4559  001162  50F8               	movf	tblptru,w,c
  4560  001164  6EFF               	movwf	tosu,c
  4561  001166  50FA               	movf	pclath,w,c
  4562  001168  0012               	return		;indir
  4563  00116A                     u4579:
  4564  00116A  EF3C  F004         	goto	l5941
  4565  00116E                     l6179:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;main.c: 543:                             tecla = teclado_borda();
  4569  00116E  EC43  F01A         	call	_teclado_borda	;wreg free
  4570  001172  0100               	movlb	0	; () banked
  4571  001174  6FB8               	movwf	main@tecla& (0+255),b
  4572  001176                     
  4573                           ; BSR set to: 0
  4574                           ;main.c: 544:                             if(tecla >= '0' && tecla <= '9')
  4575  001176  0E2F               	movlw	47
  4576  001178  65B8               	cpfsgt	main@tecla& (0+255),b
  4577  00117A  EFC1  F008         	goto	u4581
  4578  00117E  EFC3  F008         	goto	u4580
  4579  001182                     u4581:
  4580  001182  EFF5  F008         	goto	l6203
  4581  001186                     u4580:
  4582  001186                     
  4583                           ; BSR set to: 0
  4584  001186  0E3A               	movlw	58
  4585  001188  61B8               	cpfslt	main@tecla& (0+255),b
  4586  00118A  EFC9  F008         	goto	u4591
  4587  00118E  EFCB  F008         	goto	u4590
  4588  001192                     u4591:
  4589  001192  EFF5  F008         	goto	l6203
  4590  001196                     u4590:
  4591  001196                     
  4592                           ; BSR set to: 0
  4593                           ;main.c: 545:                                {;main.c: 546:                             
      +                              dignum_conc(tecla, &ciclos);
  4594  001196  0EAF               	movlw	low main@ciclos
  4595  001198  6E2C               	movwf	dignum_conc@ptrNum^0,c
  4596  00119A  0E00               	movlw	high main@ciclos
  4597  00119C  6E2D               	movwf	(dignum_conc@ptrNum+1)^0,c
  4598  00119E  51B8               	movf	main@tecla& (0+255),w,b
  4599  0011A0  EC42  F019         	call	_dignum_conc
  4600  0011A4                     
  4601                           ;main.c: 547:                                 if(ciclos > 10000)
  4602  0011A4  0E11               	movlw	17
  4603  0011A6  0100               	movlb	0	; () banked
  4604  0011A8  5DAF               	subwf	main@ciclos& (0+255),w,b
  4605  0011AA  0E27               	movlw	39
  4606  0011AC  59B0               	subwfb	(main@ciclos+1)& (0+255),w,b
  4607  0011AE  A0D8               	btfss	status,0,c
  4608  0011B0  EFDC  F008         	goto	u4601
  4609  0011B4  EFDE  F008         	goto	u4600
  4610  0011B8                     u4601:
  4611  0011B8  EFE2  F008         	goto	l317
  4612  0011BC                     u4600:
  4613  0011BC                     
  4614                           ; BSR set to: 0
  4615                           ;main.c: 548:                                     ciclos = 10000;
  4616  0011BC  0E27               	movlw	39
  4617  0011BE  6FB0               	movwf	(main@ciclos+1)& (0+255),b
  4618  0011C0  0E10               	movlw	16
  4619  0011C2  6FAF               	movwf	main@ciclos& (0+255),b
  4620  0011C4                     l317:
  4621                           
  4622                           ;main.c: 549:                                 estado = 53;
  4623  0011C4  0E35               	movlw	53
  4624  0011C6  0100               	movlb	0	; () banked
  4625  0011C8  6FB6               	movwf	main@estado& (0+255),b
  4626                           
  4627                           ;main.c: 550:                                 break;
  4628  0011CA  EF53  F00C         	goto	l6353
  4629  0011CE                     l321:
  4630                           
  4631                           ; BSR set to: 0
  4632  0011CE  EF3A  F004         	goto	l5939
  4633  0011D2                     l6195:
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;main.c: 562:                                        estado = 54;
  4637  0011D2  0E36               	movlw	54
  4638  0011D4  6FB6               	movwf	main@estado& (0+255),b
  4639                           
  4640                           ;main.c: 563:                                        break;
  4641  0011D6  EF53  F00C         	goto	l6353
  4642  0011DA                     l6197:
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;main.c: 565:                                        dignum_apagar(&ciclos);
  4646  0011DA  0EAF               	movlw	low main@ciclos
  4647  0011DC  6E2D               	movwf	dignum_apagar@ptrNum^0,c
  4648  0011DE  0E00               	movlw	high main@ciclos
  4649  0011E0  6E2E               	movwf	(dignum_apagar@ptrNum+1)^0,c
  4650  0011E2  ECA8  F01A         	call	_dignum_apagar	;wreg free
  4651  0011E6  EFE2  F008         	goto	l317
  4652  0011EA                     l6203:
  4653                           
  4654                           ; BSR set to: 0
  4655  0011EA  51B8               	movf	main@tecla& (0+255),w,b
  4656  0011EC  6E44               	movwf	??_main^0,c
  4657  0011EE  6A45               	clrf	(??_main+1)^0,c
  4658                           
  4659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4660                           ; Switch size 1, requested type "simple"
  4661                           ; Number of cases is 1, Range of values is 0 to 0
  4662                           ; switch strategies available:
  4663                           ; Name         Instructions Cycles
  4664                           ; simple_byte            4     3 (average)
  4665                           ;	Chosen strategy is simple_byte
  4666  0011F0  5045               	movf	(??_main+1)^0,w,c
  4667  0011F2  0A00               	xorlw	0	; case 0
  4668  0011F4  B4D8               	btfsc	status,2,c
  4669  0011F6  EFFF  F008         	goto	l7123
  4670  0011FA  EF53  F00C         	goto	l6353
  4671  0011FE                     l7123:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ; Switch size 1, requested type "simple"
  4675                           ; Number of cases is 6, Range of values is 35 to 68
  4676                           ; switch strategies available:
  4677                           ; Name         Instructions Cycles
  4678                           ; simple_byte           19    10 (average)
  4679                           ;	Chosen strategy is simple_byte
  4680  0011FE  5044               	movf	??_main^0,w,c
  4681  001200  0A23               	xorlw	35	; case 35
  4682  001202  B4D8               	btfsc	status,2,c
  4683  001204  EFE9  F008         	goto	l6195
  4684  001208  0A09               	xorlw	9	; case 42
  4685  00120A  B4D8               	btfsc	status,2,c
  4686  00120C  EFED  F008         	goto	l6197
  4687  001210  0A6B               	xorlw	107	; case 65
  4688  001212  B4D8               	btfsc	status,2,c
  4689  001214  EFE7  F008         	goto	l321
  4690  001218  0A03               	xorlw	3	; case 66
  4691  00121A  B4D8               	btfsc	status,2,c
  4692  00121C  EF3A  F004         	goto	l5939
  4693  001220  0A01               	xorlw	1	; case 67
  4694  001222  B4D8               	btfsc	status,2,c
  4695  001224  EF3A  F004         	goto	l5939
  4696  001228  0A07               	xorlw	7	; case 68
  4697  00122A  B4D8               	btfsc	status,2,c
  4698  00122C  EF3A  F004         	goto	l5939
  4699  001230  EF53  F00C         	goto	l6353
  4700  001234                     l6205:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;main.c: 572:                             IHM.clr();
  4704  001234  EE20  F0DF         	lfsr	2,_IHM+8
  4705  001238  D802               	call	u4618
  4706  00123A  EF29  F009         	goto	u4619
  4707  00123E                     u4618:
  4708  00123E  0005               	push	
  4709  001240  6EFA               	movwf	pclath,c
  4710  001242  50DE               	movf	postinc2,w,c
  4711  001244  6EFD               	movwf	tosl,c
  4712  001246  50DE               	movf	postinc2,w,c
  4713  001248  6EFE               	movwf	tosh,c
  4714  00124A  50F8               	movf	tblptru,w,c
  4715  00124C  6EFF               	movwf	tosu,c
  4716  00124E  50FA               	movf	pclath,w,c
  4717  001250  0012               	return		;indir
  4718  001252                     u4619:
  4719  001252                     
  4720                           ;main.c: 573:                             IHM.printpos(0, 0, "Ciclos:             ");
  4721  001252  EE20  F0DB         	lfsr	2,_IHM+4
  4722  001256  D802               	call	u4628
  4723  001258  EF3F  F009         	goto	u4629
  4724  00125C                     u4628:
  4725  00125C  0005               	push	
  4726  00125E  6EFA               	movwf	pclath,c
  4727  001260  50DE               	movf	postinc2,w,c
  4728  001262  6EFD               	movwf	tosl,c
  4729  001264  50DE               	movf	postinc2,w,c
  4730  001266  6EFE               	movwf	tosh,c
  4731  001268  50F8               	movf	tblptru,w,c
  4732  00126A  6EFF               	movwf	tosu,c
  4733  00126C  50FA               	movf	pclath,w,c
  4734  00126E  0E00               	movlw	0
  4735  001270  6E2D               	movwf	dispLCD@col^0,c
  4736  001272  0E51               	movlw	low STR_24
  4737  001274  6E2E               	movwf	dispLCD@str^0,c
  4738  001276  0E7E               	movlw	high STR_24
  4739  001278  6E2F               	movwf	(dispLCD@str+1)^0,c
  4740  00127A  0E00               	movlw	0
  4741  00127C  0012               	return		;indir
  4742  00127E                     u4629:
  4743  00127E                     
  4744                           ;main.c: 574:                             IHM.printv(0, 15, ciclos, 5);
  4745  00127E  EE20  F0DD         	lfsr	2,_IHM+6
  4746  001282  D802               	call	u4638
  4747  001284  EF57  F009         	goto	u4639
  4748  001288                     u4638:
  4749  001288  0005               	push	
  4750  00128A  6EFA               	movwf	pclath,c
  4751  00128C  50DE               	movf	postinc2,w,c
  4752  00128E  6EFD               	movwf	tosl,c
  4753  001290  50DE               	movf	postinc2,w,c
  4754  001292  6EFE               	movwf	tosh,c
  4755  001294  50F8               	movf	tblptru,w,c
  4756  001296  6EFF               	movwf	tosu,c
  4757  001298  50FA               	movf	pclath,w,c
  4758  00129A  0E0F               	movlw	15
  4759  00129C  6E31               	movwf	dispLCD_num@col^0,c
  4760  00129E  C0AF  F032         	movff	main@ciclos,dispLCD_num@num
  4761  0012A2  C0B0  F033         	movff	main@ciclos+1,dispLCD_num@num+1
  4762  0012A6  0E05               	movlw	5
  4763  0012A8  6E34               	movwf	dispLCD_num@tam^0,c
  4764  0012AA  0E00               	movlw	0
  4765  0012AC  0012               	return		;indir
  4766  0012AE                     u4639:
  4767                           
  4768                           ;main.c: 575:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
  4769  0012AE  EE20  F0DB         	lfsr	2,_IHM+4
  4770  0012B2  D802               	call	u4648
  4771  0012B4  EF6D  F009         	goto	u4649
  4772  0012B8                     u4648:
  4773  0012B8  0005               	push	
  4774  0012BA  6EFA               	movwf	pclath,c
  4775  0012BC  50DE               	movf	postinc2,w,c
  4776  0012BE  6EFD               	movwf	tosl,c
  4777  0012C0  50DE               	movf	postinc2,w,c
  4778  0012C2  6EFE               	movwf	tosh,c
  4779  0012C4  50F8               	movf	tblptru,w,c
  4780  0012C6  6EFF               	movwf	tosu,c
  4781  0012C8  50FA               	movf	pclath,w,c
  4782  0012CA  0E00               	movlw	0
  4783  0012CC  6E2D               	movwf	dispLCD@col^0,c
  4784  0012CE  0E8C               	movlw	low STR_25
  4785  0012D0  6E2E               	movwf	dispLCD@str^0,c
  4786  0012D2  0E7F               	movlw	high STR_25
  4787  0012D4  6E2F               	movwf	(dispLCD@str+1)^0,c
  4788  0012D6  0E02               	movlw	2
  4789  0012D8  0012               	return		;indir
  4790  0012DA                     u4649:
  4791  0012DA                     
  4792                           ;main.c: 576:                             estado = 52;
  4793  0012DA  0E34               	movlw	52
  4794  0012DC  0100               	movlb	0	; () banked
  4795  0012DE  6FB6               	movwf	main@estado& (0+255),b
  4796                           
  4797                           ;main.c: 577:                             break;
  4798  0012E0  EF53  F00C         	goto	l6353
  4799  0012E4                     l6213:
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;main.c: 580:                             IHM.print("    DESEJA SALVAR   \n"
  4803  0012E4  0E13               	movlw	low STR_26
  4804  0012E6  6E2D               	movwf	dispLCD_str@str^0,c
  4805  0012E8  0E7E               	movlw	high STR_26
  4806  0012EA  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  4807  0012EC  EE20  F0D9         	lfsr	2,_IHM+2
  4808  0012F0  D802               	call	u4658
  4809  0012F2  EF85  F009         	goto	u4659
  4810  0012F6                     u4658:
  4811  0012F6  0005               	push	
  4812  0012F8  6EFA               	movwf	pclath,c
  4813  0012FA  50DE               	movf	postinc2,w,c
  4814  0012FC  6EFD               	movwf	tosl,c
  4815  0012FE  50DE               	movf	postinc2,w,c
  4816  001300  6EFE               	movwf	tosh,c
  4817  001302  50F8               	movf	tblptru,w,c
  4818  001304  6EFF               	movwf	tosu,c
  4819  001306  50FA               	movf	pclath,w,c
  4820  001308  0012               	return		;indir
  4821  00130A                     u4659:
  4822  00130A                     
  4823                           ;main.c: 584:                             tecla = teclado_borda();
  4824  00130A  EC43  F01A         	call	_teclado_borda
  4825  00130E  0100               	movlb	0	; () banked
  4826  001310  6FB8               	movwf	main@tecla& (0+255),b
  4827                           
  4828                           ;main.c: 585:                             switch(tecla)
  4829  001312  EF93  F009         	goto	l6225
  4830  001316                     l6217:
  4831                           
  4832                           ; BSR set to: 0
  4833  001316  0E4B               	movlw	75
  4834  001318  6FB6               	movwf	main@estado& (0+255),b
  4835  00131A  EF53  F00C         	goto	l6353
  4836  00131E                     l6219:
  4837                           
  4838                           ; BSR set to: 0
  4839  00131E  EC34  F01C         	call	_dispLCD_clr	;wreg free
  4840  001322  EFE2  F008         	goto	l317
  4841  001326                     l6225:
  4842                           
  4843                           ; BSR set to: 0
  4844  001326  51B8               	movf	main@tecla& (0+255),w,b
  4845  001328  6E44               	movwf	??_main^0,c
  4846  00132A  6A45               	clrf	(??_main+1)^0,c
  4847                           
  4848                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4849                           ; Switch size 1, requested type "simple"
  4850                           ; Number of cases is 1, Range of values is 0 to 0
  4851                           ; switch strategies available:
  4852                           ; Name         Instructions Cycles
  4853                           ; simple_byte            4     3 (average)
  4854                           ;	Chosen strategy is simple_byte
  4855  00132C  5045               	movf	(??_main+1)^0,w,c
  4856  00132E  0A00               	xorlw	0	; case 0
  4857  001330  B4D8               	btfsc	status,2,c
  4858  001332  EF9D  F009         	goto	l7125
  4859  001336  EF53  F00C         	goto	l6353
  4860  00133A                     l7125:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ; Switch size 1, requested type "simple"
  4864                           ; Number of cases is 2, Range of values is 35 to 42
  4865                           ; switch strategies available:
  4866                           ; Name         Instructions Cycles
  4867                           ; simple_byte            7     4 (average)
  4868                           ;	Chosen strategy is simple_byte
  4869  00133A  5044               	movf	??_main^0,w,c
  4870  00133C  0A23               	xorlw	35	; case 35
  4871  00133E  B4D8               	btfsc	status,2,c
  4872  001340  EF8B  F009         	goto	l6217
  4873  001344  0A09               	xorlw	9	; case 42
  4874  001346  B4D8               	btfsc	status,2,c
  4875  001348  EF8F  F009         	goto	l6219
  4876  00134C  EF53  F00C         	goto	l6353
  4877  001350                     l6227:
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;main.c: 593:                             IHM.clr();
  4881  001350  EE20  F0DF         	lfsr	2,_IHM+8
  4882  001354  D802               	call	u4668
  4883  001356  EFB7  F009         	goto	u4669
  4884  00135A                     u4668:
  4885  00135A  0005               	push	
  4886  00135C  6EFA               	movwf	pclath,c
  4887  00135E  50DE               	movf	postinc2,w,c
  4888  001360  6EFD               	movwf	tosl,c
  4889  001362  50DE               	movf	postinc2,w,c
  4890  001364  6EFE               	movwf	tosh,c
  4891  001366  50F8               	movf	tblptru,w,c
  4892  001368  6EFF               	movwf	tosu,c
  4893  00136A  50FA               	movf	pclath,w,c
  4894  00136C  0012               	return		;indir
  4895  00136E                     u4669:
  4896  00136E                     
  4897                           ;main.c: 594:                             IHM.print(" ESCOLHA A MEMORIA\n"
  4898  00136E  0EC5               	movlw	low STR_27
  4899  001370  6E2D               	movwf	dispLCD_str@str^0,c
  4900  001372  0E7D               	movlw	high STR_27
  4901  001374  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  4902  001376  EE20  F0D9         	lfsr	2,_IHM+2
  4903  00137A  D802               	call	u4678
  4904  00137C  EFCA  F009         	goto	u4679
  4905  001380                     u4678:
  4906  001380  0005               	push	
  4907  001382  6EFA               	movwf	pclath,c
  4908  001384  50DE               	movf	postinc2,w,c
  4909  001386  6EFD               	movwf	tosl,c
  4910  001388  50DE               	movf	postinc2,w,c
  4911  00138A  6EFE               	movwf	tosh,c
  4912  00138C  50F8               	movf	tblptru,w,c
  4913  00138E  6EFF               	movwf	tosu,c
  4914  001390  50FA               	movf	pclath,w,c
  4915  001392  0012               	return		;indir
  4916  001394                     u4679:
  4917  001394                     
  4918                           ;main.c: 598:                             estado = 76;
  4919  001394  0E4C               	movlw	76
  4920  001396  0100               	movlb	0	; () banked
  4921  001398  6FB6               	movwf	main@estado& (0+255),b
  4922  00139A                     l6233:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;main.c: 601:                             tecla = teclado_borda();
  4926  00139A  EC43  F01A         	call	_teclado_borda	;wreg free
  4927  00139E  0100               	movlb	0	; () banked
  4928  0013A0  6FB8               	movwf	main@tecla& (0+255),b
  4929                           
  4930                           ;main.c: 602:                             switch(tecla)
  4931  0013A2  EF19  F00A         	goto	l6247
  4932  0013A6                     l338:
  4933  0013A6                     l6235:
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;main.c: 614:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
  4937  0013A6  C0B8  F026         	movff	main@tecla,___awmod@dividend
  4938  0013AA  6A27               	clrf	(___awmod@dividend+1)^0,c
  4939  0013AC  0E00               	movlw	0
  4940  0013AE  6E29               	movwf	(___awmod@divisor+1)^0,c
  4941  0013B0  0E30               	movlw	48
  4942  0013B2  6E28               	movwf	___awmod@divisor^0,c
  4943  0013B4  ECA6  F014         	call	___awmod	;wreg free
  4944  0013B8  5026               	movf	?___awmod^0,w,c
  4945  0013BA  6E2C               	movwf	salvar_dado@col^0,c
  4946  0013BC  C0AB  F02D         	movff	main@init_cond,salvar_dado@data
  4947  0013C0  0E0A               	movlw	10
  4948  0013C2  EC50  F01B         	call	_salvar_dado
  4949  0013C6                     
  4950                           ;main.c: 615:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
  4951  0013C6  D802               	call	u4688
  4952  0013C8  EF03  F00A         	goto	u4689
  4953  0013CC                     u4688:
  4954  0013CC  0005               	push	
  4955  0013CE  0100               	movlb	0	; () banked
  4956  0013D0  6EFA               	movwf	pclath,c
  4957  0013D2  51CD               	movf	_EEPROM& (0+255),w,b
  4958  0013D4  6EFD               	movwf	tosl,c
  4959  0013D6  51CE               	movf	(_EEPROM+1)& (0+255),w,b
  4960  0013D8  6EFE               	movwf	tosh,c
  4961  0013DA  50F8               	movf	tblptru,w,c
  4962  0013DC  6EFF               	movwf	tosu,c
  4963  0013DE  50FA               	movf	pclath,w,c
  4964  0013E0  EC2A  F01C         	call	_fifo_adrs	;wreg free
  4965  0013E4  0E02               	movlw	2
  4966  0013E6  2426               	addwf	?_fifo_adrs^0,w,c
  4967  0013E8  6E2C               	movwf	salvar_receita@data^0,c
  4968  0013EA  0E00               	movlw	0
  4969  0013EC  2027               	addwfc	(?_fifo_adrs+1)^0,w,c
  4970  0013EE  6E2D               	movwf	(salvar_receita@data+1)^0,c
  4971  0013F0  C0B8  F026         	movff	main@tecla,___awmod@dividend
  4972  0013F4  6A27               	clrf	(___awmod@dividend+1)^0,c
  4973  0013F6  0E00               	movlw	0
  4974  0013F8  6E29               	movwf	(___awmod@divisor+1)^0,c
  4975  0013FA  0E30               	movlw	48
  4976  0013FC  6E28               	movwf	___awmod@divisor^0,c
  4977  0013FE  ECA6  F014         	call	___awmod	;wreg free
  4978  001402  5026               	movf	?___awmod^0,w,c
  4979  001404  0012               	return		;indir
  4980  001406                     u4689:
  4981  001406                     
  4982                           ;main.c: 616:                                            estado = 77;
  4983  001406  0E4D               	movlw	77
  4984  001408  0100               	movlb	0	; () banked
  4985  00140A  6FB6               	movwf	main@estado& (0+255),b
  4986                           
  4987                           ;main.c: 617:                                            break;
  4988  00140C  EF53  F00C         	goto	l6353
  4989  001410                     l6241:
  4990                           
  4991                           ; BSR set to: 0
  4992  001410  EE20  F0DF         	lfsr	2,_IHM+8
  4993  001414  D802               	call	u4698
  4994  001416  EF17  F00A         	goto	u4699
  4995  00141A                     u4698:
  4996  00141A  0005               	push	
  4997  00141C  6EFA               	movwf	pclath,c
  4998  00141E  50DE               	movf	postinc2,w,c
  4999  001420  6EFD               	movwf	tosl,c
  5000  001422  50DE               	movf	postinc2,w,c
  5001  001424  6EFE               	movwf	tosh,c
  5002  001426  50F8               	movf	tblptru,w,c
  5003  001428  6EFF               	movwf	tosu,c
  5004  00142A  50FA               	movf	pclath,w,c
  5005  00142C  0012               	return		;indir
  5006  00142E                     u4699:
  5007  00142E  EF8A  F006         	goto	l6079
  5008  001432                     l6247:
  5009                           
  5010                           ; BSR set to: 0
  5011  001432  51B8               	movf	main@tecla& (0+255),w,b
  5012  001434  6E44               	movwf	??_main^0,c
  5013  001436  6A45               	clrf	(??_main+1)^0,c
  5014                           
  5015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5016                           ; Switch size 1, requested type "simple"
  5017                           ; Number of cases is 1, Range of values is 0 to 0
  5018                           ; switch strategies available:
  5019                           ; Name         Instructions Cycles
  5020                           ; simple_byte            4     3 (average)
  5021                           ;	Chosen strategy is simple_byte
  5022  001438  5045               	movf	(??_main+1)^0,w,c
  5023  00143A  0A00               	xorlw	0	; case 0
  5024  00143C  B4D8               	btfsc	status,2,c
  5025  00143E  EF23  F00A         	goto	l7127
  5026  001442  EF53  F00C         	goto	l6353
  5027  001446                     l7127:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ; Switch size 1, requested type "simple"
  5031                           ; Number of cases is 11, Range of values is 42 to 57
  5032                           ; switch strategies available:
  5033                           ; Name         Instructions Cycles
  5034                           ; simple_byte           34    18 (average)
  5035                           ;	Chosen strategy is simple_byte
  5036  001446  5044               	movf	??_main^0,w,c
  5037  001448  0A2A               	xorlw	42	; case 42
  5038  00144A  B4D8               	btfsc	status,2,c
  5039  00144C  EF08  F00A         	goto	l6241
  5040  001450  0A1A               	xorlw	26	; case 48
  5041  001452  B4D8               	btfsc	status,2,c
  5042  001454  EFD3  F009         	goto	l338
  5043  001458  0A01               	xorlw	1	; case 49
  5044  00145A  B4D8               	btfsc	status,2,c
  5045  00145C  EFD3  F009         	goto	l338
  5046  001460  0A03               	xorlw	3	; case 50
  5047  001462  B4D8               	btfsc	status,2,c
  5048  001464  EFD3  F009         	goto	l6235
  5049  001468  0A01               	xorlw	1	; case 51
  5050  00146A  B4D8               	btfsc	status,2,c
  5051  00146C  EFD3  F009         	goto	l6235
  5052  001470  0A07               	xorlw	7	; case 52
  5053  001472  B4D8               	btfsc	status,2,c
  5054  001474  EFD3  F009         	goto	l6235
  5055  001478  0A01               	xorlw	1	; case 53
  5056  00147A  B4D8               	btfsc	status,2,c
  5057  00147C  EFD3  F009         	goto	l6235
  5058  001480  0A03               	xorlw	3	; case 54
  5059  001482  B4D8               	btfsc	status,2,c
  5060  001484  EFD3  F009         	goto	l6235
  5061  001488  0A01               	xorlw	1	; case 55
  5062  00148A  B4D8               	btfsc	status,2,c
  5063  00148C  EFD3  F009         	goto	l6235
  5064  001490  0A0F               	xorlw	15	; case 56
  5065  001492  B4D8               	btfsc	status,2,c
  5066  001494  EFD3  F009         	goto	l6235
  5067  001498  0A01               	xorlw	1	; case 57
  5068  00149A  B4D8               	btfsc	status,2,c
  5069  00149C  EFD3  F009         	goto	l6235
  5070  0014A0  EF53  F00C         	goto	l6353
  5071  0014A4                     l6249:
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;main.c: 624:                             IHM.clr();
  5075  0014A4  EE20  F0DF         	lfsr	2,_IHM+8
  5076  0014A8  D802               	call	u4708
  5077  0014AA  EF61  F00A         	goto	u4709
  5078  0014AE                     u4708:
  5079  0014AE  0005               	push	
  5080  0014B0  6EFA               	movwf	pclath,c
  5081  0014B2  50DE               	movf	postinc2,w,c
  5082  0014B4  6EFD               	movwf	tosl,c
  5083  0014B6  50DE               	movf	postinc2,w,c
  5084  0014B8  6EFE               	movwf	tosh,c
  5085  0014BA  50F8               	movf	tblptru,w,c
  5086  0014BC  6EFF               	movwf	tosu,c
  5087  0014BE  50FA               	movf	pclath,w,c
  5088  0014C0  0012               	return		;indir
  5089  0014C2                     u4709:
  5090  0014C2                     
  5091                           ;main.c: 625:                             for(char i = 0; i <= 3; i++)
  5092  0014C2  0E00               	movlw	0
  5093  0014C4  0100               	movlb	0	; () banked
  5094  0014C6  6FA7               	movwf	main@i_585& (0+255),b
  5095  0014C8                     l6253:
  5096                           
  5097                           ; BSR set to: 0
  5098  0014C8  0E03               	movlw	3
  5099  0014CA  65A7               	cpfsgt	main@i_585& (0+255),b
  5100  0014CC  EF6A  F00A         	goto	u4711
  5101  0014D0  EF6C  F00A         	goto	u4710
  5102  0014D4                     u4711:
  5103  0014D4  EF6E  F00A         	goto	l6257
  5104  0014D8                     u4710:
  5105  0014D8  EF9D  F00A         	goto	l6275
  5106  0014DC                     l6257:
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;main.c: 626:                             {;main.c: 627:                                
      +                           for(char j = 0; j <= 19; j++)
  5110  0014DC  0E00               	movlw	0
  5111  0014DE  6FA8               	movwf	main@j_586& (0+255),b
  5112  0014E0                     l6259:
  5113                           
  5114                           ; BSR set to: 0
  5115  0014E0  0E13               	movlw	19
  5116  0014E2  65A8               	cpfsgt	main@j_586& (0+255),b
  5117  0014E4  EF76  F00A         	goto	u4721
  5118  0014E8  EF78  F00A         	goto	u4720
  5119  0014EC                     u4721:
  5120  0014EC  EF7A  F00A         	goto	l6263
  5121  0014F0                     u4720:
  5122  0014F0  EF9A  F00A         	goto	l6271
  5123  0014F4                     l6263:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;main.c: 628:                                 {;main.c: 629:                            
      +                                   IHM.printpos(i, j, "\377");
  5127  0014F4  EE20  F0DB         	lfsr	2,_IHM+4
  5128  0014F8  D802               	call	u4738
  5129  0014FA  EF90  F00A         	goto	u4739
  5130  0014FE                     u4738:
  5131  0014FE  0005               	push	
  5132  001500  6EFA               	movwf	pclath,c
  5133  001502  50DE               	movf	postinc2,w,c
  5134  001504  6EFD               	movwf	tosl,c
  5135  001506  50DE               	movf	postinc2,w,c
  5136  001508  6EFE               	movwf	tosh,c
  5137  00150A  50F8               	movf	tblptru,w,c
  5138  00150C  6EFF               	movwf	tosu,c
  5139  00150E  50FA               	movf	pclath,w,c
  5140  001510  C0A8  F02D         	movff	main@j_586,dispLCD@col
  5141  001514  0EFD               	movlw	low STR_1
  5142  001516  6E2E               	movwf	dispLCD@str^0,c
  5143  001518  0E7F               	movlw	high STR_1
  5144  00151A  6E2F               	movwf	(dispLCD@str+1)^0,c
  5145  00151C  51A7               	movf	main@i_585& (0+255),w,b
  5146  00151E  0012               	return		;indir
  5147  001520                     u4739:
  5148  001520                     
  5149                           ;main.c: 630:                                     delay(10);
  5150  001520  0E00               	movlw	0
  5151  001522  6E27               	movwf	(delay@t+1)^0,c
  5152  001524  0E0A               	movlw	10
  5153  001526  6E26               	movwf	delay@t^0,c
  5154  001528  ECD6  F01A         	call	_delay
  5155  00152C                     
  5156                           ;main.c: 631:                                 }
  5157  00152C  0100               	movlb	0	; () banked
  5158  00152E  2BA8               	incf	main@j_586& (0+255),f,b
  5159  001530  EF70  F00A         	goto	l6259
  5160  001534                     l6271:
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;main.c: 632:                             }
  5164  001534  2BA7               	incf	main@i_585& (0+255),f,b
  5165  001536  EF64  F00A         	goto	l6253
  5166  00153A                     l6275:
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;main.c: 634:                             for(char i = 0; i <= 3; i++)
  5170  00153A  0E00               	movlw	0
  5171  00153C  6FA9               	movwf	main@i_588& (0+255),b
  5172  00153E                     l6277:
  5173                           
  5174                           ; BSR set to: 0
  5175  00153E  0E03               	movlw	3
  5176  001540  65A9               	cpfsgt	main@i_588& (0+255),b
  5177  001542  EFA5  F00A         	goto	u4741
  5178  001546  EFA7  F00A         	goto	u4740
  5179  00154A                     u4741:
  5180  00154A  EFA9  F00A         	goto	l6281
  5181  00154E                     u4740:
  5182  00154E  EFD8  F00A         	goto	l6299
  5183  001552                     l6281:
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;main.c: 635:                             {;main.c: 636:                                
      +                           for(char j = 0; j <= 19; j++)
  5187  001552  0E00               	movlw	0
  5188  001554  6FAA               	movwf	main@j_589& (0+255),b
  5189  001556                     l6283:
  5190                           
  5191                           ; BSR set to: 0
  5192  001556  0E13               	movlw	19
  5193  001558  65AA               	cpfsgt	main@j_589& (0+255),b
  5194  00155A  EFB1  F00A         	goto	u4751
  5195  00155E  EFB3  F00A         	goto	u4750
  5196  001562                     u4751:
  5197  001562  EFB5  F00A         	goto	l6287
  5198  001566                     u4750:
  5199  001566  EFD5  F00A         	goto	l6295
  5200  00156A                     l6287:
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;main.c: 637:                                 {;main.c: 638:                            
      +                                   IHM.printpos(i, j, " ");
  5204  00156A  EE20  F0DB         	lfsr	2,_IHM+4
  5205  00156E  D802               	call	u4768
  5206  001570  EFCB  F00A         	goto	u4769
  5207  001574                     u4768:
  5208  001574  0005               	push	
  5209  001576  6EFA               	movwf	pclath,c
  5210  001578  50DE               	movf	postinc2,w,c
  5211  00157A  6EFD               	movwf	tosl,c
  5212  00157C  50DE               	movf	postinc2,w,c
  5213  00157E  6EFE               	movwf	tosh,c
  5214  001580  50F8               	movf	tblptru,w,c
  5215  001582  6EFF               	movwf	tosu,c
  5216  001584  50FA               	movf	pclath,w,c
  5217  001586  C0AA  F02D         	movff	main@j_589,dispLCD@col
  5218  00158A  0E64               	movlw	low (STR_24+19)
  5219  00158C  6E2E               	movwf	dispLCD@str^0,c
  5220  00158E  0E7E               	movlw	high (STR_24+19)
  5221  001590  6E2F               	movwf	(dispLCD@str+1)^0,c
  5222  001592  51A9               	movf	main@i_588& (0+255),w,b
  5223  001594  0012               	return		;indir
  5224  001596                     u4769:
  5225  001596                     
  5226                           ;main.c: 639:                                     delay(10);
  5227  001596  0E00               	movlw	0
  5228  001598  6E27               	movwf	(delay@t+1)^0,c
  5229  00159A  0E0A               	movlw	10
  5230  00159C  6E26               	movwf	delay@t^0,c
  5231  00159E  ECD6  F01A         	call	_delay
  5232  0015A2                     
  5233                           ;main.c: 640:                                 }
  5234  0015A2  0100               	movlb	0	; () banked
  5235  0015A4  2BAA               	incf	main@j_589& (0+255),f,b
  5236  0015A6  EFAB  F00A         	goto	l6283
  5237  0015AA                     l6295:
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;main.c: 641:                             }
  5241  0015AA  2BA9               	incf	main@i_588& (0+255),f,b
  5242  0015AC  EF9F  F00A         	goto	l6277
  5243  0015B0                     l6299:
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;main.c: 642:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
  5247  0015B0  EE20  F0DB         	lfsr	2,_IHM+4
  5248  0015B4  D802               	call	u4778
  5249  0015B6  EFEE  F00A         	goto	u4779
  5250  0015BA                     u4778:
  5251  0015BA  0005               	push	
  5252  0015BC  6EFA               	movwf	pclath,c
  5253  0015BE  50DE               	movf	postinc2,w,c
  5254  0015C0  6EFD               	movwf	tosl,c
  5255  0015C2  50DE               	movf	postinc2,w,c
  5256  0015C4  6EFE               	movwf	tosh,c
  5257  0015C6  50F8               	movf	tblptru,w,c
  5258  0015C8  6EFF               	movwf	tosu,c
  5259  0015CA  50FA               	movf	pclath,w,c
  5260  0015CC  0E00               	movlw	0
  5261  0015CE  6E2D               	movwf	dispLCD@col^0,c
  5262  0015D0  0EF9               	movlw	low STR_30
  5263  0015D2  6E2E               	movwf	dispLCD@str^0,c
  5264  0015D4  0E7E               	movlw	high STR_30
  5265  0015D6  6E2F               	movwf	(dispLCD@str+1)^0,c
  5266  0015D8  0E01               	movlw	1
  5267  0015DA  0012               	return		;indir
  5268  0015DC                     u4779:
  5269                           
  5270                           ;main.c: 643:                             IHM.printpos(2, 0, "        SALVA       ");
  5271  0015DC  EE20  F0DB         	lfsr	2,_IHM+4
  5272  0015E0  D802               	call	u4788
  5273  0015E2  EF04  F00B         	goto	u4789
  5274  0015E6                     u4788:
  5275  0015E6  0005               	push	
  5276  0015E8  6EFA               	movwf	pclath,c
  5277  0015EA  50DE               	movf	postinc2,w,c
  5278  0015EC  6EFD               	movwf	tosl,c
  5279  0015EE  50DE               	movf	postinc2,w,c
  5280  0015F0  6EFE               	movwf	tosh,c
  5281  0015F2  50F8               	movf	tblptru,w,c
  5282  0015F4  6EFF               	movwf	tosu,c
  5283  0015F6  50FA               	movf	pclath,w,c
  5284  0015F8  0E00               	movlw	0
  5285  0015FA  6E2D               	movwf	dispLCD@col^0,c
  5286  0015FC  0E7B               	movlw	low STR_31
  5287  0015FE  6E2E               	movwf	dispLCD@str^0,c
  5288  001600  0E7E               	movlw	high STR_31
  5289  001602  6E2F               	movwf	(dispLCD@str+1)^0,c
  5290  001604  0E02               	movlw	2
  5291  001606  0012               	return		;indir
  5292  001608                     u4789:
  5293  001608                     
  5294                           ;main.c: 645:                             setT1(1000);
  5295  001608  0EE8               	movlw	232
  5296  00160A  6E2C               	movwf	setT1@c^0,c
  5297  00160C  0E03               	movlw	3
  5298  00160E  6E2D               	movwf	(setT1@c+1)^0,c
  5299  001610  0E00               	movlw	0
  5300  001612  6E2E               	movwf	(setT1@c+2)^0,c
  5301  001614  0E00               	movlw	0
  5302  001616  6E2F               	movwf	(setT1@c+3)^0,c
  5303  001618  ECBA  F01B         	call	_setT1
  5304  00161C                     
  5305                           ;main.c: 646:                             estado = 78;
  5306  00161C  0E4E               	movlw	78
  5307  00161E  0100               	movlb	0	; () banked
  5308  001620  6FB6               	movwf	main@estado& (0+255),b
  5309                           
  5310                           ;main.c: 647:                             break;
  5311  001622  EF53  F00C         	goto	l6353
  5312  001626                     l6305:
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;main.c: 650:                             if(!statusT1())
  5316  001626  ECEC  F01B         	call	_statusT1	;wreg free
  5317  00162A  5026               	movf	?_statusT1^0,w,c
  5318  00162C  1027               	iorwf	(?_statusT1+1)^0,w,c
  5319  00162E  1028               	iorwf	(?_statusT1+2)^0,w,c
  5320  001630  1029               	iorwf	(?_statusT1+3)^0,w,c
  5321  001632  A4D8               	btfss	status,2,c
  5322  001634  EF1E  F00B         	goto	u4791
  5323  001638  EF20  F00B         	goto	u4790
  5324  00163C                     u4791:
  5325  00163C  EF53  F00C         	goto	l6353
  5326  001640                     u4790:
  5327  001640  EFE2  F008         	goto	l317
  5328  001644                     l6309:
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;main.c: 655:                             IHM.printpos(2, 0, "config contrl:     %");
  5332  001644  EE20  F0DB         	lfsr	2,_IHM+4
  5333  001648  D802               	call	u4808
  5334  00164A  EF38  F00B         	goto	u4809
  5335  00164E                     u4808:
  5336  00164E  0005               	push	
  5337  001650  6EFA               	movwf	pclath,c
  5338  001652  50DE               	movf	postinc2,w,c
  5339  001654  6EFD               	movwf	tosl,c
  5340  001656  50DE               	movf	postinc2,w,c
  5341  001658  6EFE               	movwf	tosh,c
  5342  00165A  50F8               	movf	tblptru,w,c
  5343  00165C  6EFF               	movwf	tosu,c
  5344  00165E  50FA               	movf	pclath,w,c
  5345  001660  0E00               	movlw	0
  5346  001662  6E2D               	movwf	dispLCD@col^0,c
  5347  001664  0EB6               	movlw	low STR_32
  5348  001666  6E2E               	movwf	dispLCD@str^0,c
  5349  001668  0E7F               	movlw	high STR_32
  5350  00166A  6E2F               	movwf	(dispLCD@str+1)^0,c
  5351  00166C  0E02               	movlw	2
  5352  00166E  0012               	return		;indir
  5353  001670                     u4809:
  5354  001670                     
  5355                           ;main.c: 656:                             IHM.printv(2, 15, num, 3);
  5356  001670  EE20  F0DD         	lfsr	2,_IHM+6
  5357  001674  D802               	call	u4818
  5358  001676  EF50  F00B         	goto	u4819
  5359  00167A                     u4818:
  5360  00167A  0005               	push	
  5361  00167C  6EFA               	movwf	pclath,c
  5362  00167E  50DE               	movf	postinc2,w,c
  5363  001680  6EFD               	movwf	tosl,c
  5364  001682  50DE               	movf	postinc2,w,c
  5365  001684  6EFE               	movwf	tosh,c
  5366  001686  50F8               	movf	tblptru,w,c
  5367  001688  6EFF               	movwf	tosu,c
  5368  00168A  50FA               	movf	pclath,w,c
  5369  00168C  0E0F               	movlw	15
  5370  00168E  6E31               	movwf	dispLCD_num@col^0,c
  5371  001690  C0B2  F032         	movff	main@num,dispLCD_num@num
  5372  001694  C0B3  F033         	movff	main@num+1,dispLCD_num@num+1
  5373  001698  0E03               	movlw	3
  5374  00169A  6E34               	movwf	dispLCD_num@tam^0,c
  5375  00169C  0E02               	movlw	2
  5376  00169E  0012               	return		;indir
  5377  0016A0                     u4819:
  5378  0016A0                     
  5379                           ;main.c: 657:                             estado = 91;
  5380  0016A0  0E5B               	movlw	91
  5381  0016A2  0100               	movlb	0	; () banked
  5382  0016A4  6FB6               	movwf	main@estado& (0+255),b
  5383                           
  5384                           ;main.c: 658:                             break;
  5385  0016A6  EF53  F00C         	goto	l6353
  5386  0016AA                     l6315:
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;main.c: 661:                             tecla = teclado_borda();
  5390  0016AA  EC43  F01A         	call	_teclado_borda
  5391  0016AE  0100               	movlb	0	; () banked
  5392  0016B0  6FB8               	movwf	main@tecla& (0+255),b
  5393  0016B2                     
  5394                           ; BSR set to: 0
  5395                           ;main.c: 662:                             if(tecla >= '0' && tecla <= '9')
  5396  0016B2  0E2F               	movlw	47
  5397  0016B4  65B8               	cpfsgt	main@tecla& (0+255),b
  5398  0016B6  EF5F  F00B         	goto	u4821
  5399  0016BA  EF61  F00B         	goto	u4820
  5400  0016BE                     u4821:
  5401  0016BE  EF82  F00B         	goto	l6327
  5402  0016C2                     u4820:
  5403  0016C2                     
  5404                           ; BSR set to: 0
  5405  0016C2  0E3A               	movlw	58
  5406  0016C4  61B8               	cpfslt	main@tecla& (0+255),b
  5407  0016C6  EF67  F00B         	goto	u4831
  5408  0016CA  EF69  F00B         	goto	u4830
  5409  0016CE                     u4831:
  5410  0016CE  EF82  F00B         	goto	l6327
  5411  0016D2                     u4830:
  5412  0016D2                     
  5413                           ; BSR set to: 0
  5414                           ;main.c: 663:                             {;main.c: 664:                                
      +                           dignum_conc(tecla, &num);
  5415  0016D2  0EB2               	movlw	low main@num
  5416  0016D4  6E2C               	movwf	dignum_conc@ptrNum^0,c
  5417  0016D6  0E00               	movlw	high main@num
  5418  0016D8  6E2D               	movwf	(dignum_conc@ptrNum+1)^0,c
  5419  0016DA  51B8               	movf	main@tecla& (0+255),w,b
  5420  0016DC  EC42  F019         	call	_dignum_conc
  5421  0016E0                     
  5422                           ;main.c: 665:                                 if(num > 100)
  5423  0016E0  0100               	movlb	0	; () banked
  5424  0016E2  51B3               	movf	(main@num+1)& (0+255),w,b
  5425  0016E4  E109               	bnz	u4840
  5426  0016E6  0E65               	movlw	101
  5427  0016E8  5DB2               	subwf	main@num& (0+255),w,b
  5428  0016EA  A0D8               	btfss	status,0,c
  5429  0016EC  EF7A  F00B         	goto	u4841
  5430  0016F0  EF7C  F00B         	goto	u4840
  5431  0016F4                     u4841:
  5432  0016F4  EF80  F00B         	goto	l361
  5433  0016F8                     u4840:
  5434  0016F8                     
  5435                           ; BSR set to: 0
  5436                           ;main.c: 666:                                     num = 100;
  5437  0016F8  0E00               	movlw	0
  5438  0016FA  6FB3               	movwf	(main@num+1)& (0+255),b
  5439  0016FC  0E64               	movlw	100
  5440  0016FE  6FB2               	movwf	main@num& (0+255),b
  5441  001700                     l361:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;main.c: 667:                                 estado = 90;
  5445  001700  0E5A               	movlw	90
  5446  001702  6FB6               	movwf	main@estado& (0+255),b
  5447  001704                     l6327:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;main.c: 669:                             if(tecla == '*')
  5451  001704  0E2A               	movlw	42
  5452  001706  19B8               	xorwf	main@tecla& (0+255),w,b
  5453  001708  A4D8               	btfss	status,2,c
  5454  00170A  EF89  F00B         	goto	u4851
  5455  00170E  EF8B  F00B         	goto	u4850
  5456  001712                     u4851:
  5457  001712  EF94  F00B         	goto	l6333
  5458  001716                     u4850:
  5459  001716                     
  5460                           ; BSR set to: 0
  5461                           ;main.c: 670:                             {;main.c: 671:                                
      +                           dignum_apagar(&num);
  5462  001716  0EB2               	movlw	low main@num
  5463  001718  6E2D               	movwf	dignum_apagar@ptrNum^0,c
  5464  00171A  0E00               	movlw	high main@num
  5465  00171C  6E2E               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5466  00171E  ECA8  F01A         	call	_dignum_apagar	;wreg free
  5467  001722                     
  5468                           ;main.c: 672:                                 estado = 90;
  5469  001722  0E5A               	movlw	90
  5470  001724  0100               	movlb	0	; () banked
  5471  001726  6FB6               	movwf	main@estado& (0+255),b
  5472  001728                     l6333:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;main.c: 674:                             if(tecla == '#')
  5476  001728  0E23               	movlw	35
  5477  00172A  19B8               	xorwf	main@tecla& (0+255),w,b
  5478  00172C  A4D8               	btfss	status,2,c
  5479  00172E  EF9B  F00B         	goto	u4861
  5480  001732  EF9D  F00B         	goto	u4860
  5481  001736                     u4861:
  5482  001736  EF53  F00C         	goto	l6353
  5483  00173A                     u4860:
  5484  00173A                     
  5485                           ; BSR set to: 0
  5486                           ;main.c: 675:                                 estado = 92;
  5487  00173A  0E5C               	movlw	92
  5488  00173C  6FB6               	movwf	main@estado& (0+255),b
  5489  00173E  EF53  F00C         	goto	l6353
  5490  001742                     l6337:
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;main.c: 679:                             fifo_add_control(num);
  5494  001742  51B2               	movf	main@num& (0+255),w,b
  5495  001744  ECFA  F018         	call	_fifo_add_control
  5496  001748  EFA6  F008         	goto	l6175
  5497  00174C                     l6343:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;main.c: 685:                             fifo_add_ciclo(ciclos);
  5501  00174C  C0AF  F026         	movff	main@ciclos,fifo_add_ciclo@ciclos
  5502  001750  C0B0  F027         	movff	main@ciclos+1,fifo_add_ciclo@ciclos+1
  5503  001754  EC2F  F01C         	call	_fifo_add_ciclo	;wreg free
  5504  001758                     
  5505                           ;main.c: 686:                             estado = 30;
  5506  001758  0E1E               	movlw	30
  5507  00175A  0100               	movlb	0	; () banked
  5508  00175C  6FB6               	movwf	main@estado& (0+255),b
  5509  00175E  EFEE  F007         	goto	l6131
  5510  001762                     l138:
  5511  001762                     l6351:
  5512  001762  0100               	movlb	0	; () banked
  5513  001764  51B6               	movf	main@estado& (0+255),w,b
  5514  001766  6E44               	movwf	??_main^0,c
  5515  001768  6A45               	clrf	(??_main+1)^0,c
  5516                           
  5517                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5518                           ; Switch size 1, requested type "simple"
  5519                           ; Number of cases is 1, Range of values is 0 to 0
  5520                           ; switch strategies available:
  5521                           ; Name         Instructions Cycles
  5522                           ; simple_byte            4     3 (average)
  5523                           ;	Chosen strategy is simple_byte
  5524  00176A  5045               	movf	(??_main+1)^0,w,c
  5525  00176C  0A00               	xorlw	0	; case 0
  5526  00176E  B4D8               	btfsc	status,2,c
  5527  001770  EFBC  F00B         	goto	l7129
  5528  001774  EF53  F00C         	goto	l6353
  5529  001778                     l7129:
  5530                           
  5531                           ; BSR set to: 0
  5532                           ; Switch size 1, requested type "simple"
  5533                           ; Number of cases is 37, Range of values is 0 to 92
  5534                           ; switch strategies available:
  5535                           ; Name         Instructions Cycles
  5536                           ; simple_byte          112    57 (average)
  5537                           ;	Chosen strategy is simple_byte
  5538  001778  5044               	movf	??_main^0,w,c
  5539  00177A  0A00               	xorlw	0	; case 0
  5540  00177C  B4D8               	btfsc	status,2,c
  5541  00177E  EF48  F000         	goto	l5677
  5542  001782  0A01               	xorlw	1	; case 1
  5543  001784  B4D8               	btfsc	status,2,c
  5544  001786  EFC2  F000         	goto	l5727
  5545  00178A  0A03               	xorlw	3	; case 2
  5546  00178C  B4D8               	btfsc	status,2,c
  5547  00178E  EF1C  F001         	goto	l5751
  5548  001792  0A01               	xorlw	1	; case 3
  5549  001794  B4D8               	btfsc	status,2,c
  5550  001796  EF7A  F004         	goto	l5949
  5551  00179A  0A05               	xorlw	5	; case 6
  5552  00179C  B4D8               	btfsc	status,2,c
  5553  00179E  EFBA  F004         	goto	l5957
  5554  0017A2  0A01               	xorlw	1	; case 7
  5555  0017A4  B4D8               	btfsc	status,2,c
  5556  0017A6  EF51  F005         	goto	l6001
  5557  0017AA  0A0F               	xorlw	15	; case 8
  5558  0017AC  B4D8               	btfsc	status,2,c
  5559  0017AE  EF2E  F001         	goto	l5755
  5560  0017B2  0A01               	xorlw	1	; case 9
  5561  0017B4  B4D8               	btfsc	status,2,c
  5562  0017B6  EF52  F001         	goto	l5763
  5563  0017BA  0A03               	xorlw	3	; case 10
  5564  0017BC  B4D8               	btfsc	status,2,c
  5565  0017BE  EF10  F006         	goto	l6043
  5566  0017C2  0A01               	xorlw	1	; case 11
  5567  0017C4  B4D8               	btfsc	status,2,c
  5568  0017C6  EF3E  F006         	goto	l6051
  5569  0017CA  0A05               	xorlw	5	; case 14
  5570  0017CC  B4D8               	btfsc	status,2,c
  5571  0017CE  EFD0  F006         	goto	l6093
  5572  0017D2  0A1E               	xorlw	30	; case 16
  5573  0017D4  B4D8               	btfsc	status,2,c
  5574  0017D6  EFCC  F006         	goto	l6089
  5575  0017DA  0A0E               	xorlw	14	; case 30
  5576  0017DC  B4D8               	btfsc	status,2,c
  5577  0017DE  EF25  F007         	goto	l6101
  5578  0017E2  0A36               	xorlw	54	; case 40
  5579  0017E4  B4D8               	btfsc	status,2,c
  5580  0017E6  EF24  F008         	goto	l6145
  5581  0017EA  0A01               	xorlw	1	; case 41
  5582  0017EC  B4D8               	btfsc	status,2,c
  5583  0017EE  EF70  F008         	goto	l6167
  5584  0017F2  0A03               	xorlw	3	; case 42
  5585  0017F4  B4D8               	btfsc	status,2,c
  5586  0017F6  EFA3  F008         	goto	l6173
  5587  0017FA  0A1E               	xorlw	30	; case 52
  5588  0017FC  B4D8               	btfsc	status,2,c
  5589  0017FE  EFB7  F008         	goto	l6179
  5590  001802  0A01               	xorlw	1	; case 53
  5591  001804  B4D8               	btfsc	status,2,c
  5592  001806  EF1A  F009         	goto	l6205
  5593  00180A  0A03               	xorlw	3	; case 54
  5594  00180C  B4D8               	btfsc	status,2,c
  5595  00180E  EFA6  F00B         	goto	l6343
  5596  001812  0A70               	xorlw	112	; case 70
  5597  001814  B4D8               	btfsc	status,2,c
  5598  001816  EF2B  F007         	goto	l6103
  5599  00181A  0A01               	xorlw	1	; case 71
  5600  00181C  B4D8               	btfsc	status,2,c
  5601  00181E  EF64  F001         	goto	l5767
  5602  001822  0A0F               	xorlw	15	; case 72
  5603  001824  B4D8               	btfsc	status,2,c
  5604  001826  EFD6  F002         	goto	l5881
  5605  00182A  0A01               	xorlw	1	; case 73
  5606  00182C  B4D8               	btfsc	status,2,c
  5607  00182E  EFFB  F002         	goto	l5887
  5608  001832  0A03               	xorlw	3	; case 74
  5609  001834  B4D8               	btfsc	status,2,c
  5610  001836  EF72  F009         	goto	l6213
  5611  00183A  0A01               	xorlw	1	; case 75
  5612  00183C  B4D8               	btfsc	status,2,c
  5613  00183E  EFA8  F009         	goto	l6227
  5614  001842  0A07               	xorlw	7	; case 76
  5615  001844  B4D8               	btfsc	status,2,c
  5616  001846  EFCD  F009         	goto	l6233
  5617  00184A  0A01               	xorlw	1	; case 77
  5618  00184C  B4D8               	btfsc	status,2,c
  5619  00184E  EF52  F00A         	goto	l6249
  5620  001852  0A03               	xorlw	3	; case 78
  5621  001854  B4D8               	btfsc	status,2,c
  5622  001856  EF13  F00B         	goto	l6305
  5623  00185A  0A1E               	xorlw	30	; case 80
  5624  00185C  B4D8               	btfsc	status,2,c
  5625  00185E  EF95  F001         	goto	l5779
  5626  001862  0A01               	xorlw	1	; case 81
  5627  001864  B4D8               	btfsc	status,2,c
  5628  001866  EFB8  F001         	goto	l5789
  5629  00186A  0A03               	xorlw	3	; case 82
  5630  00186C  B4D8               	btfsc	status,2,c
  5631  00186E  EFCA  F001         	goto	l5793
  5632  001872  0A06               	xorlw	6	; case 84
  5633  001874  B4D8               	btfsc	status,2,c
  5634  001876  EFF1  F001         	goto	l5805
  5635  00187A  0A01               	xorlw	1	; case 85
  5636  00187C  B4D8               	btfsc	status,2,c
  5637  00187E  EF38  F002         	goto	l5819
  5638  001882  0A03               	xorlw	3	; case 86
  5639  001884  B4D8               	btfsc	status,2,c
  5640  001886  EFC7  F002         	goto	l5877
  5641  00188A  0A0C               	xorlw	12	; case 90
  5642  00188C  B4D8               	btfsc	status,2,c
  5643  00188E  EF22  F00B         	goto	l6309
  5644  001892  0A01               	xorlw	1	; case 91
  5645  001894  B4D8               	btfsc	status,2,c
  5646  001896  EF55  F00B         	goto	l6315
  5647  00189A  0A07               	xorlw	7	; case 92
  5648  00189C  B4D8               	btfsc	status,2,c
  5649  00189E  EFA1  F00B         	goto	l6337
  5650  0018A2  EF53  F00C         	goto	l6353
  5651  0018A6                     l6353:
  5652                           
  5653                           ;main.c: 691:         serialIOscan();
  5654  0018A6  EC27  F018         	call	_serialIOscan	;wreg free
  5655                           
  5656                           ;main.c: 693:         switch(meAtuadores)
  5657  0018AA  EF7B  F00D         	goto	l6427
  5658  0018AE                     l6355:
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;main.c: 698:                             resetIndicePassos();
  5662  0018AE  EC3B  F01C         	call	_resetIndicePassos	;wreg free
  5663                           
  5664                           ;main.c: 699:                             resetContCiclos();
  5665  0018B2  EC1B  F01C         	call	_resetContCiclos	;wreg free
  5666  0018B6                     l6357:
  5667                           
  5668                           ;main.c: 700:                             meAtuadores = 2;
  5669  0018B6  0E02               	movlw	2
  5670  0018B8  0100               	movlb	0	; () banked
  5671  0018BA  6FAE               	movwf	main@meAtuadores& (0+255),b
  5672                           
  5673                           ;main.c: 701:                             break;
  5674  0018BC  EFB1  F00B         	goto	l6351
  5675  0018C0                     l6359:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;main.c: 704:                             auxPasso = fifo_lerPos(getIndicePassos());
  5679  0018C0  EC41  F01C         	call	_getIndicePassos	;wreg free
  5680  0018C4  ECFE  F01B         	call	_fifo_lerPos
  5681  0018C8  0100               	movlb	0	; () banked
  5682  0018CA  6FB7               	movwf	main@auxPasso& (0+255),b
  5683  0018CC                     
  5684                           ; BSR set to: 0
  5685                           ;main.c: 706:                             if(botao == 1 || botao == 3 || botao == 0)
  5686  0018CC  05B1               	decf	main@botao& (0+255),w,b
  5687  0018CE  B4D8               	btfsc	status,2,c
  5688  0018D0  EF6C  F00C         	goto	u4871
  5689  0018D4  EF6E  F00C         	goto	u4870
  5690  0018D8                     u4871:
  5691  0018D8  EF7F  F00C         	goto	l6367
  5692  0018DC                     u4870:
  5693  0018DC                     
  5694                           ; BSR set to: 0
  5695  0018DC  0E03               	movlw	3
  5696  0018DE  19B1               	xorwf	main@botao& (0+255),w,b
  5697  0018E0  B4D8               	btfsc	status,2,c
  5698  0018E2  EF75  F00C         	goto	u4881
  5699  0018E6  EF77  F00C         	goto	u4880
  5700  0018EA                     u4881:
  5701  0018EA  EF7F  F00C         	goto	l6367
  5702  0018EE                     u4880:
  5703  0018EE                     
  5704                           ; BSR set to: 0
  5705  0018EE  51B1               	movf	main@botao& (0+255),w,b
  5706  0018F0  A4D8               	btfss	status,2,c
  5707  0018F2  EF7D  F00C         	goto	u4891
  5708  0018F6  EF7F  F00C         	goto	u4890
  5709  0018FA                     u4891:
  5710  0018FA  EFB1  F00B         	goto	l138
  5711  0018FE                     u4890:
  5712  0018FE                     l6367:
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;main.c: 707:                                 meAtuadores = 3;
  5716  0018FE  0E03               	movlw	3
  5717  001900  6FAE               	movwf	main@meAtuadores& (0+255),b
  5718  001902  EFB1  F00B         	goto	l6351
  5719  001906                     l6369:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;main.c: 711:                             if(auxPasso <= 0x64 || auxPasso == 0xFE)
  5723  001906  0E64               	movlw	100
  5724  001908  65B7               	cpfsgt	main@auxPasso& (0+255),b
  5725  00190A  EF89  F00C         	goto	u4901
  5726  00190E  EF8B  F00C         	goto	u4900
  5727  001912                     u4901:
  5728  001912  EF94  F00C         	goto	l6373
  5729  001916                     u4900:
  5730  001916                     
  5731                           ; BSR set to: 0
  5732  001916  0EFE               	movlw	254
  5733  001918  19B7               	xorwf	main@auxPasso& (0+255),w,b
  5734  00191A  A4D8               	btfss	status,2,c
  5735  00191C  EF92  F00C         	goto	u4911
  5736  001920  EF94  F00C         	goto	u4910
  5737  001924                     u4911:
  5738  001924  EFC7  F00C         	goto	l6379
  5739  001928                     u4910:
  5740  001928                     l6373:
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;main.c: 712:                             {;main.c: 713:                                
      +                           decodifica(&auxPasso);
  5744  001928  0EB7               	movlw	low main@auxPasso
  5745  00192A  6E26               	movwf	decodifica@d^0,c
  5746  00192C  0E00               	movlw	high main@auxPasso
  5747  00192E  6E27               	movwf	(decodifica@d+1)^0,c
  5748  001930  EC4D  F011         	call	_decodifica	;wreg free
  5749  001934                     
  5750                           ;main.c: 714:                                 MCP4725((long)((4095L * auxPasso)/100));
  5751  001934  0100               	movlb	0	; () banked
  5752  001936  51B7               	movf	main@auxPasso& (0+255),w,b
  5753  001938  6E26               	movwf	___lmul@multiplier^0,c
  5754  00193A  6A27               	clrf	(___lmul@multiplier+1)^0,c
  5755  00193C  6A28               	clrf	(___lmul@multiplier+2)^0,c
  5756  00193E  6A29               	clrf	(___lmul@multiplier+3)^0,c
  5757  001940  0EFF               	movlw	255
  5758  001942  6E2A               	movwf	___lmul@multiplicand^0,c
  5759  001944  0E0F               	movlw	15
  5760  001946  6E2B               	movwf	(___lmul@multiplicand+1)^0,c
  5761  001948  0E00               	movlw	0
  5762  00194A  6E2C               	movwf	(___lmul@multiplicand+2)^0,c
  5763  00194C  0E00               	movlw	0
  5764  00194E  6E2D               	movwf	(___lmul@multiplicand+3)^0,c
  5765  001950  EC06  F017         	call	___lmul	;wreg free
  5766  001954  C026  F032         	movff	?___lmul,___aldiv@dividend
  5767  001958  C027  F033         	movff	?___lmul+1,___aldiv@dividend+1
  5768  00195C  C028  F034         	movff	?___lmul+2,___aldiv@dividend+2
  5769  001960  C029  F035         	movff	?___lmul+3,___aldiv@dividend+3
  5770  001964  0E64               	movlw	100
  5771  001966  6E36               	movwf	___aldiv@divisor^0,c
  5772  001968  0E00               	movlw	0
  5773  00196A  6E37               	movwf	(___aldiv@divisor+1)^0,c
  5774  00196C  0E00               	movlw	0
  5775  00196E  6E38               	movwf	(___aldiv@divisor+2)^0,c
  5776  001970  0E00               	movlw	0
  5777  001972  6E39               	movwf	(___aldiv@divisor+3)^0,c
  5778  001974  ECED  F011         	call	___aldiv	;wreg free
  5779  001978  C032  F040         	movff	?___aldiv,MCP4725@Vout
  5780  00197C  C033  F041         	movff	?___aldiv+1,MCP4725@Vout+1
  5781  001980  EC61  F01B         	call	_MCP4725	;wreg free
  5782  001984                     l6377:
  5783                           
  5784                           ;main.c: 715:                                 meAtuadores = 6;
  5785  001984  0E06               	movlw	6
  5786  001986  0100               	movlb	0	; () banked
  5787  001988  6FAE               	movwf	main@meAtuadores& (0+255),b
  5788                           
  5789                           ;main.c: 716:                             }
  5790  00198A  EFB1  F00B         	goto	l6351
  5791  00198E                     l6379:
  5792                           
  5793                           ; BSR set to: 0
  5794  00198E  0E64               	movlw	100
  5795  001990  65B7               	cpfsgt	main@auxPasso& (0+255),b
  5796  001992  EFCD  F00C         	goto	u4921
  5797  001996  EFCF  F00C         	goto	u4920
  5798  00199A                     u4921:
  5799  00199A  EFF2  F00C         	goto	l6389
  5800  00199E                     u4920:
  5801  00199E                     
  5802                           ; BSR set to: 0
  5803  00199E  0EDD               	movlw	221
  5804  0019A0  61B7               	cpfslt	main@auxPasso& (0+255),b
  5805  0019A2  EFD5  F00C         	goto	u4931
  5806  0019A6  EFD7  F00C         	goto	u4930
  5807  0019AA                     u4931:
  5808  0019AA  EFF2  F00C         	goto	l6389
  5809  0019AE                     u4930:
  5810  0019AE                     
  5811                           ; BSR set to: 0
  5812                           ;main.c: 718:                             {;main.c: 719:                                
      +                           auxPasso -= 0x64;
  5813  0019AE  0E64               	movlw	100
  5814  0019B0  5FB7               	subwf	main@auxPasso& (0+255),f,b
  5815  0019B2                     
  5816                           ; BSR set to: 0
  5817                           ;main.c: 720:                                 setT1(auxPasso * 1000 );
  5818  0019B2  C0B7  F026         	movff	main@auxPasso,___wmul@multiplier
  5819  0019B6  6A27               	clrf	(___wmul@multiplier+1)^0,c
  5820  0019B8  0E03               	movlw	3
  5821  0019BA  6E29               	movwf	(___wmul@multiplicand+1)^0,c
  5822  0019BC  0EE8               	movlw	232
  5823  0019BE  6E28               	movwf	___wmul@multiplicand^0,c
  5824  0019C0  EC2B  F01B         	call	___wmul	;wreg free
  5825  0019C4  C026  F02C         	movff	?___wmul,setT1@c
  5826  0019C8  C027  F02D         	movff	?___wmul+1,setT1@c+1
  5827  0019CC  0E00               	movlw	0
  5828  0019CE  BE2D               	btfsc	(setT1@c+1)^0,7,c
  5829  0019D0  0EFF               	movlw	-1
  5830  0019D2  6E2E               	movwf	(setT1@c+2)^0,c
  5831  0019D4  6E2F               	movwf	(setT1@c+3)^0,c
  5832  0019D6  ECBA  F01B         	call	_setT1	;wreg free
  5833  0019DA                     
  5834                           ;main.c: 721:                                 meAtuadores = 4;
  5835  0019DA  0E04               	movlw	4
  5836  0019DC  0100               	movlb	0	; () banked
  5837  0019DE  6FAE               	movwf	main@meAtuadores& (0+255),b
  5838                           
  5839                           ;main.c: 722:                             }
  5840  0019E0  EFB1  F00B         	goto	l6351
  5841  0019E4                     l6389:
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;main.c: 724:                             {;main.c: 725:                                
      +                           decodifica(&auxPasso);
  5845  0019E4  0EB7               	movlw	low main@auxPasso
  5846  0019E6  6E26               	movwf	decodifica@d^0,c
  5847  0019E8  0E00               	movlw	high main@auxPasso
  5848  0019EA  6E27               	movwf	(decodifica@d+1)^0,c
  5849  0019EC  EC4D  F011         	call	_decodifica	;wreg free
  5850                           
  5851                           ;main.c: 726:                                 set_passo(auxPasso, vetorOut);
  5852  0019F0  0EAD               	movlw	low main@vetorOut
  5853  0019F2  6E26               	movwf	set_passo@ptr^0,c
  5854  0019F4  0E00               	movlw	high main@vetorOut
  5855  0019F6  6E27               	movwf	(set_passo@ptr+1)^0,c
  5856  0019F8  0100               	movlb	0	; () banked
  5857  0019FA  51B7               	movf	main@auxPasso& (0+255),w,b
  5858  0019FC  ECD3  F013         	call	_set_passo
  5859  001A00                     
  5860                           ;main.c: 727:                                 meAtuadores = 5;
  5861  001A00  0E05               	movlw	5
  5862  001A02  0100               	movlb	0	; () banked
  5863  001A04  6FAE               	movwf	main@meAtuadores& (0+255),b
  5864  001A06  EFB1  F00B         	goto	l6351
  5865  001A0A                     l6393:
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;main.c: 732:                             if(!statusT1())
  5869  001A0A  ECEC  F01B         	call	_statusT1	;wreg free
  5870  001A0E  5026               	movf	?_statusT1^0,w,c
  5871  001A10  1027               	iorwf	(?_statusT1+1)^0,w,c
  5872  001A12  1028               	iorwf	(?_statusT1+2)^0,w,c
  5873  001A14  1029               	iorwf	(?_statusT1+3)^0,w,c
  5874  001A16  A4D8               	btfss	status,2,c
  5875  001A18  EF10  F00D         	goto	u4941
  5876  001A1C  EF12  F00D         	goto	u4940
  5877  001A20                     u4941:
  5878  001A20  EFB1  F00B         	goto	l138
  5879  001A24                     u4940:
  5880  001A24  EFC2  F00C         	goto	l6377
  5881  001A28                     l6397:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;main.c: 737:                             if(ler_sensor(auxPasso, vetorIn))
  5885  001A28  0EAC               	movlw	low main@vetorIn
  5886  001A2A  6E26               	movwf	ler_sensor@ptr^0,c
  5887  001A2C  0E00               	movlw	high main@vetorIn
  5888  001A2E  6E27               	movwf	(ler_sensor@ptr+1)^0,c
  5889  001A30  51B7               	movf	main@auxPasso& (0+255),w,b
  5890  001A32  ECEB  F012         	call	_ler_sensor
  5891  001A36  0900               	iorlw	0
  5892  001A38  B4D8               	btfsc	status,2,c
  5893  001A3A  EF21  F00D         	goto	u4951
  5894  001A3E  EF23  F00D         	goto	u4950
  5895  001A42                     u4951:
  5896  001A42  EFB1  F00B         	goto	l138
  5897  001A46                     u4950:
  5898  001A46  EFC2  F00C         	goto	l6377
  5899  001A4A                     l6401:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;main.c: 742:                             if(botao == 3)
  5903  001A4A  0E03               	movlw	3
  5904  001A4C  19B1               	xorwf	main@botao& (0+255),w,b
  5905  001A4E  A4D8               	btfss	status,2,c
  5906  001A50  EF2C  F00D         	goto	u4961
  5907  001A54  EF2E  F00D         	goto	u4960
  5908  001A58                     u4961:
  5909  001A58  EF30  F00D         	goto	l386
  5910  001A5C                     u4960:
  5911  001A5C                     
  5912                           ; BSR set to: 0
  5913                           ;main.c: 743:                             {;main.c: 744:                                
      +                           botao = 2;
  5914  001A5C  0E02               	movlw	2
  5915  001A5E  6FB1               	movwf	main@botao& (0+255),b
  5916  001A60                     l386:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;main.c: 746:                             meAtuadores = 7;
  5920  001A60  0E07               	movlw	7
  5921  001A62  6FAE               	movwf	main@meAtuadores& (0+255),b
  5922                           
  5923                           ;main.c: 748:                             break;
  5924  001A64  EFB1  F00B         	goto	l6351
  5925  001A68                     l6405:
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;main.c: 751:                             addIndicePassos();
  5929  001A68  ECA4  F01B         	call	_addIndicePassos	;wreg free
  5930                           
  5931                           ;main.c: 752:                             if(getIndicePassos() < fifo_indice())
  5932  001A6C  EC41  F01C         	call	_getIndicePassos	;wreg free
  5933  001A70  6E44               	movwf	??_main^0,c
  5934  001A72  EC45  F01C         	call	_fifo_indice	;wreg free
  5935  001A76  5C44               	subwf	??_main^0,w,c
  5936  001A78  B0D8               	btfsc	status,0,c
  5937  001A7A  EF41  F00D         	goto	u4971
  5938  001A7E  EF43  F00D         	goto	u4970
  5939  001A82                     u4971:
  5940  001A82  EF45  F00D         	goto	l6409
  5941  001A86                     u4970:
  5942  001A86  EF5B  F00C         	goto	l6357
  5943  001A8A                     l6409:
  5944                           
  5945                           ;main.c: 755:                             {;main.c: 756:                                
      +                           addContCiclos();
  5946  001A8A  EC3E  F01C         	call	_addContCiclos	;wreg free
  5947  001A8E                     
  5948                           ;main.c: 757:                                 meAtuadores = 8;
  5949  001A8E  0E08               	movlw	8
  5950  001A90  0100               	movlb	0	; () banked
  5951  001A92  6FAE               	movwf	main@meAtuadores& (0+255),b
  5952  001A94  EFB1  F00B         	goto	l6351
  5953  001A98                     l6413:
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;main.c: 762:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
  5957  001A98  51B1               	movf	main@botao& (0+255),w,b
  5958  001A9A  B4D8               	btfsc	status,2,c
  5959  001A9C  EF52  F00D         	goto	u4981
  5960  001AA0  EF54  F00D         	goto	u4980
  5961  001AA4                     u4981:
  5962  001AA4  EF76  F00D         	goto	l6423
  5963  001AA8                     u4980:
  5964  001AA8                     
  5965                           ; BSR set to: 0
  5966  001AA8  EC25  F01C         	call	_getContCiclos	;wreg free
  5967  001AAC  C026  F044         	movff	?_getContCiclos,??_main
  5968  001AB0  C027  F045         	movff	?_getContCiclos+1,??_main+1
  5969  001AB4  EC72  F01B         	call	_getCiclos	;wreg free
  5970  001AB8  5026               	movf	?_getCiclos^0,w,c
  5971  001ABA  5C44               	subwf	??_main^0,w,c
  5972  001ABC  5027               	movf	(?_getCiclos+1)^0,w,c
  5973  001ABE  5845               	subwfb	(??_main+1)^0,w,c
  5974  001AC0  A0D8               	btfss	status,0,c
  5975  001AC2  EF65  F00D         	goto	u4991
  5976  001AC6  EF67  F00D         	goto	u4990
  5977  001ACA                     u4991:
  5978  001ACA  EF72  F00D         	goto	l6419
  5979  001ACE                     u4990:
  5980  001ACE  EC72  F01B         	call	_getCiclos	;wreg free
  5981  001AD2  5026               	movf	?_getCiclos^0,w,c
  5982  001AD4  1027               	iorwf	(?_getCiclos+1)^0,w,c
  5983  001AD6  A4D8               	btfss	status,2,c
  5984  001AD8  EF70  F00D         	goto	u5001
  5985  001ADC  EF72  F00D         	goto	u5000
  5986  001AE0                     u5001:
  5987  001AE0  EF76  F00D         	goto	l6423
  5988  001AE4                     u5000:
  5989  001AE4                     l6419:
  5990                           
  5991                           ;main.c: 763:                             {;main.c: 764:                                
      +                           resetIndicePassos();
  5992  001AE4  EC3B  F01C         	call	_resetIndicePassos	;wreg free
  5993  001AE8  EF5B  F00C         	goto	l6357
  5994  001AEC                     l6423:
  5995                           
  5996                           ;main.c: 768:                             {;main.c: 769:                                
      +                           meAtuadores = 0;
  5997  001AEC  0E00               	movlw	0
  5998  001AEE  0100               	movlb	0	; () banked
  5999  001AF0  6FAE               	movwf	main@meAtuadores& (0+255),b
  6000  001AF2  EFB1  F00B         	goto	l6351
  6001  001AF6                     l6427:
  6002  001AF6  0100               	movlb	0	; () banked
  6003  001AF8  51AE               	movf	main@meAtuadores& (0+255),w,b
  6004  001AFA  6E44               	movwf	??_main^0,c
  6005  001AFC  6A45               	clrf	(??_main+1)^0,c
  6006                           
  6007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6008                           ; Switch size 1, requested type "simple"
  6009                           ; Number of cases is 1, Range of values is 0 to 0
  6010                           ; switch strategies available:
  6011                           ; Name         Instructions Cycles
  6012                           ; simple_byte            4     3 (average)
  6013                           ;	Chosen strategy is simple_byte
  6014  001AFE  5045               	movf	(??_main+1)^0,w,c
  6015  001B00  0A00               	xorlw	0	; case 0
  6016  001B02  B4D8               	btfsc	status,2,c
  6017  001B04  EF86  F00D         	goto	l7131
  6018  001B08  EFB1  F00B         	goto	l6351
  6019  001B0C                     l7131:
  6020                           
  6021                           ; BSR set to: 0
  6022                           ; Switch size 1, requested type "simple"
  6023                           ; Number of cases is 9, Range of values is 0 to 8
  6024                           ; switch strategies available:
  6025                           ; Name         Instructions Cycles
  6026                           ; simple_byte           28    15 (average)
  6027                           ;	Chosen strategy is simple_byte
  6028  001B0C  5044               	movf	??_main^0,w,c
  6029  001B0E  0A00               	xorlw	0	; case 0
  6030  001B10  B4D8               	btfsc	status,2,c
  6031  001B12  EFB1  F00B         	goto	l6351
  6032  001B16  0A01               	xorlw	1	; case 1
  6033  001B18  B4D8               	btfsc	status,2,c
  6034  001B1A  EF57  F00C         	goto	l6355
  6035  001B1E  0A03               	xorlw	3	; case 2
  6036  001B20  B4D8               	btfsc	status,2,c
  6037  001B22  EF60  F00C         	goto	l6359
  6038  001B26  0A01               	xorlw	1	; case 3
  6039  001B28  B4D8               	btfsc	status,2,c
  6040  001B2A  EF83  F00C         	goto	l6369
  6041  001B2E  0A07               	xorlw	7	; case 4
  6042  001B30  B4D8               	btfsc	status,2,c
  6043  001B32  EF05  F00D         	goto	l6393
  6044  001B36  0A01               	xorlw	1	; case 5
  6045  001B38  B4D8               	btfsc	status,2,c
  6046  001B3A  EF14  F00D         	goto	l6397
  6047  001B3E  0A03               	xorlw	3	; case 6
  6048  001B40  B4D8               	btfsc	status,2,c
  6049  001B42  EF25  F00D         	goto	l6401
  6050  001B46  0A01               	xorlw	1	; case 7
  6051  001B48  B4D8               	btfsc	status,2,c
  6052  001B4A  EF34  F00D         	goto	l6405
  6053  001B4E  0A0F               	xorlw	15	; case 8
  6054  001B50  B4D8               	btfsc	status,2,c
  6055  001B52  EF4C  F00D         	goto	l6413
  6056  001B56  EFB1  F00B         	goto	l6351
  6057  001B5A  EF07  F000         	goto	start
  6058  001B5E                     __end_of_main:
  6059                           	callstack 0
  6060                           
  6061 ;; *************** function _timer1_init *****************
  6062 ;; Defined at:
  6063 ;;		line 16 in file "timer1.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;		None
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;		None
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  1    wreg      void 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6077 ;;      Params:         0       0       0       0       0       0       0       0       0
  6078 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6080 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6081 ;;Total ram usage:        0 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    2
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text1
  6092  003702                     __ptext1:
  6093                           	callstack 0
  6094  003702                     _timer1_init:
  6095                           	callstack 28
  6096  003702                     
  6097                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  6098  003702  92CD               	bcf	205,1,c	;volatile
  6099  003704                     
  6100                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  6101  003704  0E30               	movlw	48
  6102  003706  12CD               	iorwf	205,f,c	;volatile
  6103  003708                     
  6104                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  6105  003708  84CD               	bsf	205,2,c	;volatile
  6106                           
  6107                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  6108  00370A  0EFD               	movlw	253
  6109  00370C  6ECF               	movwf	207,c	;volatile
  6110                           
  6111                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  6112  00370E  0E8F               	movlw	143
  6113  003710  6ECE               	movwf	206,c	;volatile
  6114  003712                     
  6115                           ;timer1.c: 23:     T1CONbits.T1RUN = 0;
  6116  003712  9CCD               	bcf	205,6,c	;volatile
  6117  003714                     
  6118                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  6119  003714  809D               	bsf	157,0,c	;volatile
  6120  003716                     
  6121                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  6122  003716  8CF2               	bsf	242,6,c	;volatile
  6123  003718                     
  6124                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  6125  003718  8EF2               	bsf	242,7,c	;volatile
  6126  00371A  0012               	return		;funcret
  6127  00371C                     __end_of_timer1_init:
  6128                           	callstack 0
  6129                           
  6130 ;; *************** function _teclado_init *****************
  6131 ;; Defined at:
  6132 ;;		line 29 in file "teclado.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  1    wreg      void 
  6139 ;; Registers used:
  6140 ;;		wreg, status,2
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6146 ;;      Params:         0       0       0       0       0       0       0       0       0
  6147 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6149 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6150 ;;Total ram usage:        0 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    2
  6153 ;; This function calls:
  6154 ;;		Nothing
  6155 ;; This function is called by:
  6156 ;;		_main
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text2
  6161  00382C                     __ptext2:
  6162                           	callstack 0
  6163  00382C                     _teclado_init:
  6164                           	callstack 28
  6165  00382C                     
  6166                           ;teclado.c: 31:     PORTD = 0x00;
  6167  00382C  0E00               	movlw	0
  6168  00382E  6E83               	movwf	131,c	;volatile
  6169                           
  6170                           ;teclado.c: 32:     TRISD = 0xF0;
  6171  003830  0EF0               	movlw	240
  6172  003832  6E95               	movwf	149,c	;volatile
  6173  003834  0012               	return		;funcret
  6174  003836                     __end_of_teclado_init:
  6175                           	callstack 0
  6176                           
  6177 ;; *************** function _teclado_borda *****************
  6178 ;; Defined at:
  6179 ;;		line 92 in file "teclado.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  tecla           1    6[COMRAM] unsigned char 
  6184 ;;  aux             1    5[COMRAM] unsigned char 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      unsigned char 
  6187 ;; Registers used:
  6188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6194 ;;      Params:         0       0       0       0       0       0       0       0       0
  6195 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6197 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6198 ;;Total ram usage:        2 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    3
  6201 ;; This function calls:
  6202 ;;		_teclado_scan
  6203 ;; This function is called by:
  6204 ;;		_main
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text3
  6209  003486                     __ptext3:
  6210                           	callstack 0
  6211  003486                     _teclado_borda:
  6212                           	callstack 27
  6213  003486                     
  6214                           ;teclado.c: 95:     char aux = 0;
  6215  003486  0E00               	movlw	0
  6216  003488  6E2B               	movwf	teclado_borda@aux^0,c
  6217  00348A                     
  6218                           ;teclado.c: 97:     tecla = teclado_scan();
  6219  00348A  ECFE  F014         	call	_teclado_scan	;wreg free
  6220  00348E  6E2C               	movwf	teclado_borda@tecla^0,c
  6221  003490                     
  6222                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  6223  003490  502C               	movf	teclado_borda@tecla^0,w,c
  6224  003492  B4D8               	btfsc	status,2,c
  6225  003494  EF4E  F01A         	goto	u3281
  6226  003498  EF50  F01A         	goto	u3280
  6227  00349C                     u3281:
  6228  00349C  EF5A  F01A         	goto	l980
  6229  0034A0                     u3280:
  6230  0034A0  5011               	movf	_teclaAnterior^0,w,c
  6231  0034A2  A4D8               	btfss	status,2,c
  6232  0034A4  EF56  F01A         	goto	u3291
  6233  0034A8  EF58  F01A         	goto	u3290
  6234  0034AC                     u3291:
  6235  0034AC  EF5A  F01A         	goto	l980
  6236  0034B0                     u3290:
  6237  0034B0                     
  6238                           ;teclado.c: 100:         aux = tecla;
  6239  0034B0  C02C  F02B         	movff	teclado_borda@tecla,teclado_borda@aux
  6240  0034B4                     l980:
  6241                           
  6242                           ;teclado.c: 102:     teclaAnterior = tecla;
  6243  0034B4  C02C  F011         	movff	teclado_borda@tecla,_teclaAnterior
  6244  0034B8                     
  6245                           ;teclado.c: 104:     return(aux);
  6246  0034B8  502B               	movf	teclado_borda@aux^0,w,c
  6247  0034BA  0012               	return		;funcret
  6248  0034BC                     __end_of_teclado_borda:
  6249                           	callstack 0
  6250                           
  6251 ;; *************** function _teclado_scan *****************
  6252 ;; Defined at:
  6253 ;;		line 55 in file "teclado.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  c               1    4[COMRAM] unsigned char 
  6258 ;;  l               1    3[COMRAM] unsigned char 
  6259 ;;  tecla           1    2[COMRAM] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      unsigned char 
  6262 ;; Registers used:
  6263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0
  6270 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6271 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6272 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6273 ;;Total ram usage:        5 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    2
  6276 ;; This function calls:
  6277 ;;		Nothing
  6278 ;; This function is called by:
  6279 ;;		_teclado_borda
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text4
  6284  0029FC                     __ptext4:
  6285                           	callstack 0
  6286  0029FC                     _teclado_scan:
  6287                           	callstack 27
  6288  0029FC                     
  6289                           ;teclado.c: 57:    char tecla = 0;
  6290  0029FC  0E00               	movlw	0
  6291  0029FE  6E28               	movwf	teclado_scan@tecla^0,c
  6292                           
  6293                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  6294  002A00  0E00               	movlw	0
  6295  002A02  6E29               	movwf	teclado_scan@l^0,c
  6296  002A04                     l4897:
  6297  002A04  0E03               	movlw	3
  6298  002A06  6429               	cpfsgt	teclado_scan@l^0,c
  6299  002A08  EF08  F015         	goto	u3171
  6300  002A0C  EF0A  F015         	goto	u3170
  6301  002A10                     u3171:
  6302  002A10  EF0C  F015         	goto	l4901
  6303  002A14                     u3170:
  6304  002A14  EF50  F015         	goto	l4921
  6305  002A18                     l4901:
  6306                           
  6307                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  6308  002A18  C029  F026         	movff	teclado_scan@l,??_teclado_scan
  6309  002A1C  0E01               	movlw	1
  6310  002A1E  6E27               	movwf	(??_teclado_scan+1)^0,c
  6311  002A20  2A26               	incf	??_teclado_scan^0,f,c
  6312  002A22  EF15  F015         	goto	u3184
  6313  002A26                     u3185:
  6314  002A26  90D8               	bcf	status,0,c
  6315  002A28  3627               	rlcf	(??_teclado_scan+1)^0,f,c
  6316  002A2A                     u3184:
  6317  002A2A  2E26               	decfsz	??_teclado_scan^0,f,c
  6318  002A2C  EF13  F015         	goto	u3185
  6319  002A30  5027               	movf	(??_teclado_scan+1)^0,w,c
  6320  002A32  6E83               	movwf	131,c	;volatile
  6321  002A34                     
  6322                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  6323  002A34  0E00               	movlw	0
  6324  002A36  6E2A               	movwf	teclado_scan@c^0,c
  6325  002A38                     l4909:
  6326                           
  6327                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  6328  002A38  C02A  F026         	movff	teclado_scan@c,??_teclado_scan
  6329  002A3C  0E10               	movlw	16
  6330  002A3E  6E27               	movwf	(??_teclado_scan+1)^0,c
  6331  002A40  2A26               	incf	??_teclado_scan^0,f,c
  6332  002A42  EF25  F015         	goto	u3194
  6333  002A46                     u3195:
  6334  002A46  90D8               	bcf	status,0,c
  6335  002A48  3627               	rlcf	(??_teclado_scan+1)^0,f,c
  6336  002A4A                     u3194:
  6337  002A4A  2E26               	decfsz	??_teclado_scan^0,f,c
  6338  002A4C  EF23  F015         	goto	u3195
  6339  002A50  5027               	movf	(??_teclado_scan+1)^0,w,c
  6340  002A52  1483               	andwf	131,w,c	;volatile
  6341  002A54  0900               	iorlw	0
  6342  002A56  B4D8               	btfsc	status,2,c
  6343  002A58  EF30  F015         	goto	u3201
  6344  002A5C  EF32  F015         	goto	u3200
  6345  002A60                     u3201:
  6346  002A60  EF44  F015         	goto	l4913
  6347  002A64                     u3200:
  6348  002A64                     
  6349                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  6350  002A64  5029               	movf	teclado_scan@l^0,w,c
  6351  002A66  0D04               	mullw	4
  6352  002A68  0E46               	movlw	low _teclas
  6353  002A6A  6E26               	movwf	??_teclado_scan^0,c
  6354  002A6C  0E00               	movlw	high _teclas
  6355  002A6E  6E27               	movwf	(??_teclado_scan+1)^0,c
  6356  002A70  50F3               	movf	243,w,c
  6357  002A72  2626               	addwf	??_teclado_scan^0,f,c
  6358  002A74  50F4               	movf	244,w,c
  6359  002A76  2227               	addwfc	(??_teclado_scan+1)^0,f,c
  6360  002A78  502A               	movf	teclado_scan@c^0,w,c
  6361  002A7A  2426               	addwf	??_teclado_scan^0,w,c
  6362  002A7C  6ED9               	movwf	fsr2l,c
  6363  002A7E  0E00               	movlw	0
  6364  002A80  2027               	addwfc	(??_teclado_scan+1)^0,w,c
  6365  002A82  6EDA               	movwf	fsr2h,c
  6366  002A84  50DF               	movf	indf2,w,c
  6367  002A86  6E28               	movwf	teclado_scan@tecla^0,c
  6368  002A88                     l4913:
  6369                           
  6370                           ;teclado.c: 85:         }
  6371  002A88  2A2A               	incf	teclado_scan@c^0,f,c
  6372  002A8A  0E03               	movlw	3
  6373  002A8C  642A               	cpfsgt	teclado_scan@c^0,c
  6374  002A8E  EF4B  F015         	goto	u3211
  6375  002A92  EF4D  F015         	goto	u3210
  6376  002A96                     u3211:
  6377  002A96  EF1C  F015         	goto	l4909
  6378  002A9A                     u3210:
  6379  002A9A                     
  6380                           ;teclado.c: 86:     }
  6381  002A9A  2A29               	incf	teclado_scan@l^0,f,c
  6382  002A9C  EF02  F015         	goto	l4897
  6383  002AA0                     l4921:
  6384                           
  6385                           ;teclado.c: 87:     return( tecla );
  6386  002AA0  5028               	movf	teclado_scan@tecla^0,w,c
  6387  002AA2  0012               	return		;funcret
  6388  002AA4                     __end_of_teclado_scan:
  6389                           	callstack 0
  6390                           
  6391 ;; *************** function _statusT1 *****************
  6392 ;; Defined at:
  6393 ;;		line 38 in file "timer1.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;		None
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;		None
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  4    0[COMRAM] unsigned long 
  6400 ;; Registers used:
  6401 ;;		None
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6407 ;;      Params:         4       0       0       0       0       0       0       0       0
  6408 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6410 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6411 ;;Total ram usage:        4 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    2
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_main
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text5
  6422  0037D8                     __ptext5:
  6423                           	callstack 0
  6424  0037D8                     _statusT1:
  6425                           	callstack 28
  6426  0037D8                     
  6427                           ;timer1.c: 40:     return( t1cont );
  6428  0037D8  C001  F026         	movff	_t1cont,?_statusT1
  6429  0037DC  C002  F027         	movff	_t1cont+1,?_statusT1+1
  6430  0037E0  C003  F028         	movff	_t1cont+2,?_statusT1+2
  6431  0037E4  C004  F029         	movff	_t1cont+3,?_statusT1+3
  6432  0037E8  0012               	return		;funcret
  6433  0037EA                     __end_of_statusT1:
  6434                           	callstack 0
  6435                           
  6436 ;; *************** function _set_passo *****************
  6437 ;; Defined at:
  6438 ;;		line 53 in file "atuadores.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  passo           1    wreg     unsigned char 
  6441 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  6442 ;;		 -> main@vetorOut(1), 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  passo           1    4[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6454 ;;      Params:         2       0       0       0       0       0       0       0       0
  6455 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6456 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6457 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:        5 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    2
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text6
  6469  0027A6                     __ptext6:
  6470                           	callstack 0
  6471  0027A6                     _set_passo:
  6472                           	callstack 28
  6473                           
  6474                           ;incstack = 0
  6475                           ;set_passo@passo stored from wreg
  6476  0027A6  6E2A               	movwf	set_passo@passo^0,c
  6477  0027A8                     
  6478                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  6479  0027A8  EF16  F014         	goto	l5443
  6480  0027AC                     l5425:
  6481  0027AC  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6482  0027B0  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6483  0027B4  0E00               	movlw	0
  6484  0027B6  80DB               	bsf	plusw2,0,c
  6485  0027B8  EF43  F014         	goto	l410
  6486  0027BC                     l5427:
  6487  0027BC  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6488  0027C0  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6489  0027C4  0EFE               	movlw	254
  6490  0027C6  16DF               	andwf	indf2,f,c
  6491  0027C8  EF43  F014         	goto	l410
  6492  0027CC                     l5429:
  6493  0027CC  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6494  0027D0  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6495  0027D4  0E00               	movlw	0
  6496  0027D6  82DB               	bsf	plusw2,1,c
  6497  0027D8  EF43  F014         	goto	l410
  6498  0027DC                     l5431:
  6499  0027DC  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6500  0027E0  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6501  0027E4  0EFD               	movlw	253
  6502  0027E6  16DF               	andwf	indf2,f,c
  6503  0027E8  EF43  F014         	goto	l410
  6504  0027EC                     l5433:
  6505  0027EC  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6506  0027F0  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6507  0027F4  0E00               	movlw	0
  6508  0027F6  84DB               	bsf	plusw2,2,c
  6509  0027F8  EF43  F014         	goto	l410
  6510  0027FC                     l5435:
  6511  0027FC  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6512  002800  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6513  002804  0EFB               	movlw	251
  6514  002806  16DF               	andwf	indf2,f,c
  6515  002808  EF43  F014         	goto	l410
  6516  00280C                     l5437:
  6517  00280C  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6518  002810  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6519  002814  0E00               	movlw	0
  6520  002816  86DB               	bsf	plusw2,3,c
  6521  002818  EF43  F014         	goto	l410
  6522  00281C                     l5439:
  6523  00281C  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6524  002820  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6525  002824  0EF7               	movlw	247
  6526  002826  16DF               	andwf	indf2,f,c
  6527  002828  EF43  F014         	goto	l410
  6528  00282C                     l5443:
  6529  00282C  502A               	movf	set_passo@passo^0,w,c
  6530  00282E  6E28               	movwf	??_set_passo^0,c
  6531  002830  6A29               	clrf	(??_set_passo+1)^0,c
  6532                           
  6533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6534                           ; Switch size 1, requested type "simple"
  6535                           ; Number of cases is 1, Range of values is 0 to 0
  6536                           ; switch strategies available:
  6537                           ; Name         Instructions Cycles
  6538                           ; simple_byte            4     3 (average)
  6539                           ;	Chosen strategy is simple_byte
  6540  002832  5029               	movf	(??_set_passo+1)^0,w,c
  6541  002834  0A00               	xorlw	0	; case 0
  6542  002836  B4D8               	btfsc	status,2,c
  6543  002838  EF20  F014         	goto	l7133
  6544  00283C  EF43  F014         	goto	l410
  6545  002840                     l7133:
  6546                           
  6547                           ; Switch size 1, requested type "simple"
  6548                           ; Number of cases is 8, Range of values is 65 to 100
  6549                           ; switch strategies available:
  6550                           ; Name         Instructions Cycles
  6551                           ; simple_byte           25    13 (average)
  6552                           ;	Chosen strategy is simple_byte
  6553  002840  5028               	movf	??_set_passo^0,w,c
  6554  002842  0A41               	xorlw	65	; case 65
  6555  002844  B4D8               	btfsc	status,2,c
  6556  002846  EFD6  F013         	goto	l5425
  6557  00284A  0A03               	xorlw	3	; case 66
  6558  00284C  B4D8               	btfsc	status,2,c
  6559  00284E  EFE6  F013         	goto	l5429
  6560  002852  0A01               	xorlw	1	; case 67
  6561  002854  B4D8               	btfsc	status,2,c
  6562  002856  EFF6  F013         	goto	l5433
  6563  00285A  0A07               	xorlw	7	; case 68
  6564  00285C  B4D8               	btfsc	status,2,c
  6565  00285E  EF06  F014         	goto	l5437
  6566  002862  0A25               	xorlw	37	; case 97
  6567  002864  B4D8               	btfsc	status,2,c
  6568  002866  EFDE  F013         	goto	l5427
  6569  00286A  0A03               	xorlw	3	; case 98
  6570  00286C  B4D8               	btfsc	status,2,c
  6571  00286E  EFEE  F013         	goto	l5431
  6572  002872  0A01               	xorlw	1	; case 99
  6573  002874  B4D8               	btfsc	status,2,c
  6574  002876  EFFE  F013         	goto	l5435
  6575  00287A  0A07               	xorlw	7	; case 100
  6576  00287C  B4D8               	btfsc	status,2,c
  6577  00287E  EF0E  F014         	goto	l5439
  6578  002882  EF43  F014         	goto	l410
  6579  002886                     l410:
  6580  002886  0012               	return		;funcret
  6581  002888                     __end_of_set_passo:
  6582                           	callstack 0
  6583                           
  6584 ;; *************** function _setT1 *****************
  6585 ;; Defined at:
  6586 ;;		line 31 in file "timer1.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  c               4    6[COMRAM] unsigned long 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		None
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6600 ;;      Params:         4       0       0       0       0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6603 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6604 ;;Total ram usage:        4 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    2
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_main
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text7
  6615  003774                     __ptext7:
  6616                           	callstack 0
  6617  003774                     _setT1:
  6618                           	callstack 28
  6619  003774                     
  6620                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  6621  003774  C02C  F001         	movff	setT1@c,_t1cont
  6622  003778  C02D  F002         	movff	setT1@c+1,_t1cont+1
  6623  00377C  C02E  F003         	movff	setT1@c+2,_t1cont+2
  6624  003780  C02F  F004         	movff	setT1@c+3,_t1cont+3
  6625                           
  6626                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  6627  003784  80CD               	bsf	205,0,c	;volatile
  6628  003786  0012               	return		;funcret
  6629  003788                     __end_of_setT1:
  6630                           	callstack 0
  6631                           
  6632 ;; *************** function _serialIOscan *****************
  6633 ;; Defined at:
  6634 ;;		line 76 in file "serialIO.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  i               1    6[COMRAM] unsigned char 
  6639 ;;  j               1    5[COMRAM] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      void 
  6642 ;; Registers used:
  6643 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6649 ;;      Params:         0       0       0       0       0       0       0       0       0
  6650 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6651 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6652 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6653 ;;Total ram usage:        4 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    3
  6656 ;; This function calls:
  6657 ;;		_serialIObyteShift
  6658 ;;		_serialIOload
  6659 ;; This function is called by:
  6660 ;;		_main
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           	psect	text8
  6665  00304E                     __ptext8:
  6666                           	callstack 0
  6667  00304E                     _serialIOscan:
  6668                           	callstack 27
  6669  00304E                     
  6670                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  6671  00304E  0412               	decf	_lenSerialIO^0,w,c
  6672  003050  6E2B               	movwf	serialIOscan@j^0,c
  6673  003052                     
  6674                           ;serialIO.c: 80:     serialIOload();
  6675  003052  EC38  F01C         	call	_serialIOload	;wreg free
  6676  003056                     
  6677                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  6678  003056  0E00               	movlw	0
  6679  003058  6E2C               	movwf	serialIOscan@i^0,c
  6680  00305A  EF47  F018         	goto	l5415
  6681  00305E                     l5411:
  6682                           
  6683                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  6684  00305E  502C               	movf	serialIOscan@i^0,w,c
  6685  003060  240B               	addwf	_ptrSerialIn^0,w,c
  6686  003062  6ED9               	movwf	fsr2l,c
  6687  003064  0E00               	movlw	0
  6688  003066  200C               	addwfc	(_ptrSerialIn+1)^0,w,c
  6689  003068  6EDA               	movwf	fsr2h,c
  6690  00306A  502B               	movf	serialIOscan@j^0,w,c
  6691  00306C  2409               	addwf	_ptrSerialOut^0,w,c
  6692  00306E  6E29               	movwf	??_serialIOscan^0,c
  6693  003070  0E00               	movlw	0
  6694  003072  200A               	addwfc	(_ptrSerialOut+1)^0,w,c
  6695  003074  6E2A               	movwf	(??_serialIOscan+1)^0,c
  6696  003076  502C               	movf	serialIOscan@i^0,w,c
  6697  003078  5C29               	subwf	??_serialIOscan^0,w,c
  6698  00307A  6EE1               	movwf	fsr1l,c
  6699  00307C  502A               	movf	(??_serialIOscan+1)^0,w,c
  6700  00307E  A0D8               	btfss	status,0,c
  6701  003080  042A               	decf	(??_serialIOscan+1)^0,w,c
  6702  003082  6EE2               	movwf	fsr1h,c
  6703  003084  50E7               	movf	indf1,w,c
  6704  003086  ECFA  F017         	call	_serialIObyteShift
  6705  00308A  6EDF               	movwf	indf2,c
  6706  00308C                     
  6707                           ;serialIO.c: 84:     }
  6708  00308C  2A2C               	incf	serialIOscan@i^0,f,c
  6709  00308E                     l5415:
  6710  00308E  5012               	movf	_lenSerialIO^0,w,c
  6711  003090  5C2C               	subwf	serialIOscan@i^0,w,c
  6712  003092  A0D8               	btfss	status,0,c
  6713  003094  EF4E  F018         	goto	u3751
  6714  003098  EF50  F018         	goto	u3750
  6715  00309C                     u3751:
  6716  00309C  EF2F  F018         	goto	l5411
  6717  0030A0                     u3750:
  6718  0030A0                     
  6719                           ;serialIO.c: 85:     serialIOload();
  6720  0030A0  EC38  F01C         	call	_serialIOload	;wreg free
  6721  0030A4  0012               	return		;funcret
  6722  0030A6                     __end_of_serialIOscan:
  6723                           	callstack 0
  6724                           
  6725 ;; *************** function _serialIOload *****************
  6726 ;; Defined at:
  6727 ;;		line 45 in file "serialIO.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      void 
  6734 ;; Registers used:
  6735 ;;		None
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6741 ;;      Params:         0       0       0       0       0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6745 ;;Total ram usage:        0 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    2
  6748 ;; This function calls:
  6749 ;;		Nothing
  6750 ;; This function is called by:
  6751 ;;		_serialIOscan
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text9
  6756  003870                     __ptext9:
  6757                           	callstack 0
  6758  003870                     _serialIOload:
  6759                           	callstack 27
  6760  003870                     
  6761                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  6762  003870  9680               	bcf	128,3,c	;volatile
  6763                           
  6764                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  6765  003872  8680               	bsf	128,3,c	;volatile
  6766  003874  0012               	return		;funcret
  6767  003876                     __end_of_serialIOload:
  6768                           	callstack 0
  6769                           
  6770 ;; *************** function _serialIObyteShift *****************
  6771 ;; Defined at:
  6772 ;;		line 50 in file "serialIO.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  dataIn          1    wreg     unsigned char 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  dataIn          1    0[COMRAM] unsigned char 
  6777 ;;  dataBit         1    2[COMRAM] unsigned char 
  6778 ;;  dataOut         1    1[COMRAM] unsigned char 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      unsigned char 
  6781 ;; Registers used:
  6782 ;;		wreg, status,2, status,0
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6788 ;;      Params:         0       0       0       0       0       0       0       0       0
  6789 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6791 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6792 ;;Total ram usage:        3 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    2
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_serialIOscan
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text10
  6803  002FF4                     __ptext10:
  6804                           	callstack 0
  6805  002FF4                     _serialIObyteShift:
  6806                           	callstack 27
  6807                           
  6808                           ;incstack = 0
  6809                           ;serialIObyteShift@dataIn stored from wreg
  6810  002FF4  6E26               	movwf	serialIObyteShift@dataIn^0,c
  6811  002FF6                     
  6812                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  6813  002FF6  0E80               	movlw	128
  6814  002FF8  6E28               	movwf	serialIObyteShift@dataBit^0,c
  6815                           
  6816                           ;serialIO.c: 56:     dataOut = 0;
  6817  002FFA  0E00               	movlw	0
  6818  002FFC  6E27               	movwf	serialIObyteShift@dataOut^0,c
  6819                           
  6820                           ;serialIO.c: 58:     while( dataBit )
  6821  002FFE  EF1C  F018         	goto	l4889
  6822  003002                     l877:
  6823                           
  6824                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  6825  003002  9480               	bcf	128,2,c	;volatile
  6826  003004                     
  6827                           ;serialIO.c: 61:         if( dataIn & dataBit )
  6828  003004  5026               	movf	serialIObyteShift@dataIn^0,w,c
  6829  003006  1428               	andwf	serialIObyteShift@dataBit^0,w,c
  6830  003008  0900               	iorlw	0
  6831  00300A  B4D8               	btfsc	status,2,c
  6832  00300C  EF0A  F018         	goto	u3141
  6833  003010  EF0C  F018         	goto	u3140
  6834  003014                     u3141:
  6835  003014  EF0F  F018         	goto	l878
  6836  003018                     u3140:
  6837  003018                     
  6838                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  6839  003018  8080               	bsf	128,0,c	;volatile
  6840  00301A  EF10  F018         	goto	l879
  6841  00301E                     l878:
  6842                           
  6843                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  6844  00301E  9080               	bcf	128,0,c	;volatile
  6845  003020                     l879:
  6846                           
  6847                           ;serialIO.c: 66:         if( SERIALIO.IN )
  6848  003020  A280               	btfss	128,1,c	;volatile
  6849  003022  EF15  F018         	goto	u3151
  6850  003026  EF17  F018         	goto	u3150
  6851  00302A                     u3151:
  6852  00302A  EF19  F018         	goto	l4887
  6853  00302E                     u3150:
  6854  00302E                     
  6855                           ;serialIO.c: 67:             dataOut |= dataBit;
  6856  00302E  5028               	movf	serialIObyteShift@dataBit^0,w,c
  6857  003030  1227               	iorwf	serialIObyteShift@dataOut^0,f,c
  6858  003032                     l4887:
  6859                           
  6860                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  6861  003032  8480               	bsf	128,2,c	;volatile
  6862                           
  6863                           ;serialIO.c: 69:         dataBit >>= 1;
  6864  003034  90D8               	bcf	status,0,c
  6865  003036  3228               	rrcf	serialIObyteShift@dataBit^0,f,c
  6866  003038                     l4889:
  6867                           
  6868                           ;serialIO.c: 58:     while( dataBit )
  6869  003038  5028               	movf	serialIObyteShift@dataBit^0,w,c
  6870  00303A  A4D8               	btfss	status,2,c
  6871  00303C  EF22  F018         	goto	u3161
  6872  003040  EF24  F018         	goto	u3160
  6873  003044                     u3161:
  6874  003044  EF01  F018         	goto	l877
  6875  003048                     u3160:
  6876  003048                     
  6877                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  6878  003048  9480               	bcf	128,2,c	;volatile
  6879  00304A                     
  6880                           ;serialIO.c: 72:     return( dataOut );
  6881  00304A  5027               	movf	serialIObyteShift@dataOut^0,w,c
  6882  00304C  0012               	return		;funcret
  6883  00304E                     __end_of_serialIObyteShift:
  6884                           	callstack 0
  6885                           
  6886 ;; *************** function _salvar_receita *****************
  6887 ;; Defined at:
  6888 ;;		line 46 in file "eeprom.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  adrs            1    wreg     unsigned char 
  6891 ;;  data            2    6[COMRAM] PTR unsigned char 
  6892 ;;		 -> fila(18), 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;  adrs            1   10[COMRAM] unsigned char 
  6895 ;;  i               1   11[COMRAM] unsigned char 
  6896 ;;  aux             2    8[COMRAM] int 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6906 ;;      Params:         2       0       0       0       0       0       0       0       0
  6907 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6909 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6910 ;;Total ram usage:        6 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    3
  6913 ;; This function calls:
  6914 ;;		_EEPROM_write
  6915 ;;		_end_receita
  6916 ;; This function is called by:
  6917 ;;		_main
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text11
  6922  003314                     __ptext11:
  6923                           	callstack 0
  6924  003314                     _salvar_receita:
  6925                           	callstack 27
  6926                           
  6927                           ;incstack = 0
  6928                           ;salvar_receita@adrs stored from wreg
  6929  003314  6E30               	movwf	salvar_receita@adrs^0,c
  6930  003316                     
  6931                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  6932  003316  C030  F026         	movff	salvar_receita@adrs,end_receita@x
  6933  00331A  6A27               	clrf	(end_receita@x+1)^0,c
  6934  00331C  EC3E  F01B         	call	_end_receita	;wreg free
  6935  003320  C026  F02E         	movff	?_end_receita,salvar_receita@aux
  6936  003324  C027  F02F         	movff	?_end_receita+1,salvar_receita@aux+1
  6937  003328                     
  6938                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  6939  003328  0E00               	movlw	0
  6940  00332A  6E31               	movwf	salvar_receita@i^0,c
  6941  00332C                     l5551:
  6942                           
  6943                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  6944  00332C  5031               	movf	salvar_receita@i^0,w,c
  6945  00332E  242C               	addwf	salvar_receita@data^0,w,c
  6946  003330  6ED9               	movwf	fsr2l,c
  6947  003332  0E00               	movlw	0
  6948  003334  202D               	addwfc	(salvar_receita@data+1)^0,w,c
  6949  003336  6EDA               	movwf	fsr2h,c
  6950  003338  50DF               	movf	indf2,w,c
  6951  00333A  6E26               	movwf	EEPROM_write@data^0,c
  6952  00333C  5031               	movf	salvar_receita@i^0,w,c
  6953  00333E  242E               	addwf	salvar_receita@aux^0,w,c
  6954  003340  ECBF  F01A         	call	_EEPROM_write
  6955  003344  2A31               	incf	salvar_receita@i^0,f,c
  6956  003346  0E0F               	movlw	15
  6957  003348  6431               	cpfsgt	salvar_receita@i^0,c
  6958  00334A  EFA9  F019         	goto	u3791
  6959  00334E  EFAB  F019         	goto	u3790
  6960  003352                     u3791:
  6961  003352  EF96  F019         	goto	l5551
  6962  003356                     u3790:
  6963  003356  0012               	return		;funcret
  6964  003358                     __end_of_salvar_receita:
  6965                           	callstack 0
  6966                           
  6967 ;; *************** function _salvar_dado *****************
  6968 ;; Defined at:
  6969 ;;		line 63 in file "eeprom.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  adrs            1    wreg     unsigned char 
  6972 ;;  col             1    6[COMRAM] unsigned char 
  6973 ;;  data            1    7[COMRAM] unsigned char 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  adrs            1   10[COMRAM] unsigned char 
  6976 ;;  aux             2    8[COMRAM] int 
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		wreg, status,2, status,0, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6986 ;;      Params:         2       0       0       0       0       0       0       0       0
  6987 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6989 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6990 ;;Total ram usage:        5 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    3
  6993 ;; This function calls:
  6994 ;;		_EEPROM_write
  6995 ;;		_end_receita
  6996 ;; This function is called by:
  6997 ;;		_main
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text12
  7002  0036A0                     __ptext12:
  7003                           	callstack 0
  7004  0036A0                     _salvar_dado:
  7005                           	callstack 27
  7006                           
  7007                           ;incstack = 0
  7008                           ;salvar_dado@adrs stored from wreg
  7009  0036A0  6E30               	movwf	salvar_dado@adrs^0,c
  7010  0036A2                     
  7011                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  7012  0036A2  C030  F026         	movff	salvar_dado@adrs,end_receita@x
  7013  0036A6  6A27               	clrf	(end_receita@x+1)^0,c
  7014  0036A8  EC3E  F01B         	call	_end_receita	;wreg free
  7015  0036AC  C026  F02E         	movff	?_end_receita,salvar_dado@aux
  7016  0036B0  C027  F02F         	movff	?_end_receita+1,salvar_dado@aux+1
  7017                           
  7018                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  7019  0036B4  C02D  F026         	movff	salvar_dado@data,EEPROM_write@data
  7020  0036B8  502C               	movf	salvar_dado@col^0,w,c
  7021  0036BA  242E               	addwf	salvar_dado@aux^0,w,c
  7022  0036BC  ECBF  F01A         	call	_EEPROM_write
  7023  0036C0  0012               	return		;funcret
  7024  0036C2                     __end_of_salvar_dado:
  7025                           	callstack 0
  7026                           
  7027 ;; *************** function _salva_atuadores_init *****************
  7028 ;; Defined at:
  7029 ;;		line 117 in file "fifo.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;  condi_init      4    3[COMRAM] unsigned char [4]
  7034 ;;  pt              2    7[COMRAM] PTR unsigned char 
  7035 ;;		 -> salva_atuadores_init@condi_init(4), 
  7036 ;;  mask            1   10[COMRAM] unsigned char 
  7037 ;;  dado            1    9[COMRAM] unsigned char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  1    wreg      unsigned char 
  7040 ;; Registers used:
  7041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7047 ;;      Params:         0       0       0       0       0       0       0       0       0
  7048 ;;      Locals:         8       0       0       0       0       0       0       0       0
  7049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7050 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7051 ;;Total ram usage:        8 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:    3
  7054 ;; This function calls:
  7055 ;;		_ler_atuador
  7056 ;; This function is called by:
  7057 ;;		_main
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text13
  7062  002D1A                     __ptext13:
  7063                           	callstack 0
  7064  002D1A                     _salva_atuadores_init:
  7065                           	callstack 27
  7066  002D1A                     
  7067                           ;fifo.c: 119:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  7068  002D1A  0E00               	movlw	0
  7069  002D1C  6E29               	movwf	salva_atuadores_init@condi_init^0,c
  7070  002D1E  0E00               	movlw	0
  7071  002D20  6E2A               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  7072  002D22  0E00               	movlw	0
  7073  002D24  6E2B               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  7074  002D26  0E00               	movlw	0
  7075  002D28  6E2C               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  7076  002D2A  0E41               	movlw	65
  7077  002D2C  ECA4  F015         	call	_ler_atuador
  7078  002D30  6E29               	movwf	salva_atuadores_init@condi_init^0,c
  7079  002D32  0E42               	movlw	66
  7080  002D34  ECA4  F015         	call	_ler_atuador
  7081  002D38  6E2A               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  7082  002D3A  0E43               	movlw	67
  7083  002D3C  ECA4  F015         	call	_ler_atuador
  7084  002D40  6E2B               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  7085  002D42  0E44               	movlw	68
  7086  002D44  ECA4  F015         	call	_ler_atuador
  7087  002D48  6E2C               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  7088  002D4A                     
  7089                           ;fifo.c: 121:     char *pt = condi_init;
  7090  002D4A  0E29               	movlw	low salva_atuadores_init@condi_init
  7091  002D4C  6E2D               	movwf	salva_atuadores_init@pt^0,c
  7092  002D4E  0E00               	movlw	high salva_atuadores_init@condi_init
  7093  002D50  6E2E               	movwf	(salva_atuadores_init@pt+1)^0,c
  7094  002D52                     
  7095                           ;fifo.c: 122:     char dado = 0;
  7096  002D52  0E00               	movlw	0
  7097  002D54  6E2F               	movwf	salva_atuadores_init@dado^0,c
  7098  002D56                     
  7099                           ;fifo.c: 123:     char mask = 0x08;
  7100  002D56  0E08               	movlw	8
  7101  002D58  6E30               	movwf	salva_atuadores_init@mask^0,c
  7102                           
  7103                           ;fifo.c: 125:     while( mask )
  7104  002D5A  EFC2  F016         	goto	l5289
  7105  002D5E                     l5281:
  7106                           
  7107                           ;fifo.c: 126:     {;fifo.c: 127:         if( *pt )
  7108  002D5E  C02D  FFD9         	movff	salva_atuadores_init@pt,fsr2l
  7109  002D62  C02E  FFDA         	movff	salva_atuadores_init@pt+1,fsr2h
  7110  002D66  50DF               	movf	indf2,w,c
  7111  002D68  B4D8               	btfsc	status,2,c
  7112  002D6A  EFB9  F016         	goto	u3551
  7113  002D6E  EFBB  F016         	goto	u3550
  7114  002D72                     u3551:
  7115  002D72  EFBE  F016         	goto	l5285
  7116  002D76                     u3550:
  7117  002D76                     
  7118                           ;fifo.c: 128:         {;fifo.c: 129:             dado = dado | mask;
  7119  002D76  502F               	movf	salva_atuadores_init@dado^0,w,c
  7120  002D78  1030               	iorwf	salva_atuadores_init@mask^0,w,c
  7121  002D7A  6E2F               	movwf	salva_atuadores_init@dado^0,c
  7122  002D7C                     l5285:
  7123                           
  7124                           ;fifo.c: 131:         pt++;
  7125  002D7C  4A2D               	infsnz	salva_atuadores_init@pt^0,f,c
  7126  002D7E  2A2E               	incf	(salva_atuadores_init@pt+1)^0,f,c
  7127  002D80                     
  7128                           ;fifo.c: 132:         mask >>= 1;
  7129  002D80  90D8               	bcf	status,0,c
  7130  002D82  3230               	rrcf	salva_atuadores_init@mask^0,f,c
  7131  002D84                     l5289:
  7132                           
  7133                           ;fifo.c: 125:     while( mask )
  7134  002D84  5030               	movf	salva_atuadores_init@mask^0,w,c
  7135  002D86  A4D8               	btfss	status,2,c
  7136  002D88  EFC8  F016         	goto	u3561
  7137  002D8C  EFCA  F016         	goto	u3560
  7138  002D90                     u3561:
  7139  002D90  EFAF  F016         	goto	l5281
  7140  002D94                     u3560:
  7141  002D94                     
  7142                           ;fifo.c: 134:     return(dado);
  7143  002D94  502F               	movf	salva_atuadores_init@dado^0,w,c
  7144  002D96  0012               	return		;funcret
  7145  002D98                     __end_of_salva_atuadores_init:
  7146                           	callstack 0
  7147                           
  7148 ;; *************** function _ler_atuador *****************
  7149 ;; Defined at:
  7150 ;;		line 80 in file "fifo.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  tecla           1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  tecla           1    2[COMRAM] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      unsigned char 
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0
  7165 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7166 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7167 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7168 ;;Total ram usage:        3 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    2
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_main
  7175 ;;		_salva_atuadores_init
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text14
  7180  002B48                     __ptext14:
  7181                           	callstack 0
  7182  002B48                     _ler_atuador:
  7183                           	callstack 27
  7184                           
  7185                           ;incstack = 0
  7186                           ;ler_atuador@tecla stored from wreg
  7187  002B48  6E28               	movwf	ler_atuador@tecla^0,c
  7188  002B4A                     
  7189                           ;fifo.c: 80: char ler_atuador(char tecla);fifo.c: 81: {;fifo.c: 82:     switch(tecla)
  7190  002B4A  EFD6  F015         	goto	l4695
  7191  002B4E                     l626:
  7192  002B4E  B013               	btfsc	_atuador^0,0,c
  7193  002B50  EFAC  F015         	goto	u2891
  7194  002B54  EFAF  F015         	goto	u2890
  7195  002B58                     u2891:
  7196  002B58  0E01               	movlw	1
  7197  002B5A  EFB0  F015         	goto	u2896
  7198  002B5E                     u2890:
  7199  002B5E  0E00               	movlw	0
  7200  002B60                     u2896:
  7201  002B60  EFF3  F015         	goto	l627
  7202  002B64                     l629:
  7203  002B64  B213               	btfsc	_atuador^0,1,c
  7204  002B66  EFB7  F015         	goto	u2901
  7205  002B6A  EFBA  F015         	goto	u2900
  7206  002B6E                     u2901:
  7207  002B6E  0E01               	movlw	1
  7208  002B70  EFBB  F015         	goto	u2906
  7209  002B74                     u2900:
  7210  002B74  0E00               	movlw	0
  7211  002B76                     u2906:
  7212  002B76  EFF3  F015         	goto	l627
  7213  002B7A                     l630:
  7214  002B7A  B413               	btfsc	_atuador^0,2,c
  7215  002B7C  EFC2  F015         	goto	u2911
  7216  002B80  EFC5  F015         	goto	u2910
  7217  002B84                     u2911:
  7218  002B84  0E01               	movlw	1
  7219  002B86  EFC6  F015         	goto	u2916
  7220  002B8A                     u2910:
  7221  002B8A  0E00               	movlw	0
  7222  002B8C                     u2916:
  7223  002B8C  EFF3  F015         	goto	l627
  7224  002B90                     l631:
  7225  002B90  B613               	btfsc	_atuador^0,3,c
  7226  002B92  EFCD  F015         	goto	u2921
  7227  002B96  EFD0  F015         	goto	u2920
  7228  002B9A                     u2921:
  7229  002B9A  0E01               	movlw	1
  7230  002B9C  EFD1  F015         	goto	u2926
  7231  002BA0                     u2920:
  7232  002BA0  0E00               	movlw	0
  7233  002BA2                     u2926:
  7234  002BA2  EFF3  F015         	goto	l627
  7235  002BA6                     l4687:
  7236  002BA6  0E00               	movlw	0
  7237  002BA8  EFF3  F015         	goto	l627
  7238  002BAC                     l4695:
  7239  002BAC  5028               	movf	ler_atuador@tecla^0,w,c
  7240  002BAE  6E26               	movwf	??_ler_atuador^0,c
  7241  002BB0  6A27               	clrf	(??_ler_atuador+1)^0,c
  7242                           
  7243                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7244                           ; Switch size 1, requested type "simple"
  7245                           ; Number of cases is 1, Range of values is 0 to 0
  7246                           ; switch strategies available:
  7247                           ; Name         Instructions Cycles
  7248                           ; simple_byte            4     3 (average)
  7249                           ;	Chosen strategy is simple_byte
  7250  002BB2  5027               	movf	(??_ler_atuador+1)^0,w,c
  7251  002BB4  0A00               	xorlw	0	; case 0
  7252  002BB6  B4D8               	btfsc	status,2,c
  7253  002BB8  EFE0  F015         	goto	l7135
  7254  002BBC  EFD3  F015         	goto	l4687
  7255  002BC0                     l7135:
  7256                           
  7257                           ; Switch size 1, requested type "simple"
  7258                           ; Number of cases is 4, Range of values is 65 to 68
  7259                           ; switch strategies available:
  7260                           ; Name         Instructions Cycles
  7261                           ; simple_byte           13     7 (average)
  7262                           ;	Chosen strategy is simple_byte
  7263  002BC0  5026               	movf	??_ler_atuador^0,w,c
  7264  002BC2  0A41               	xorlw	65	; case 65
  7265  002BC4  B4D8               	btfsc	status,2,c
  7266  002BC6  EFA7  F015         	goto	l626
  7267  002BCA  0A03               	xorlw	3	; case 66
  7268  002BCC  B4D8               	btfsc	status,2,c
  7269  002BCE  EFB2  F015         	goto	l629
  7270  002BD2  0A01               	xorlw	1	; case 67
  7271  002BD4  B4D8               	btfsc	status,2,c
  7272  002BD6  EFBD  F015         	goto	l630
  7273  002BDA  0A07               	xorlw	7	; case 68
  7274  002BDC  B4D8               	btfsc	status,2,c
  7275  002BDE  EFC8  F015         	goto	l631
  7276  002BE2  EFD3  F015         	goto	l4687
  7277  002BE6                     l627:
  7278  002BE6  0012               	return		;funcret
  7279  002BE8                     __end_of_ler_atuador:
  7280                           	callstack 0
  7281                           
  7282 ;; *************** function _resetIndicePassos *****************
  7283 ;; Defined at:
  7284 ;;		line 36 in file "fifo.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;		None
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      void 
  7291 ;; Registers used:
  7292 ;;		wreg, status,2
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0
  7299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7301 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7302 ;;Total ram usage:        0 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    2
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_main
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           	psect	text15
  7313  003876                     __ptext15:
  7314                           	callstack 0
  7315  003876                     _resetIndicePassos:
  7316                           	callstack 28
  7317  003876                     
  7318                           ;fifo.c: 38:     indice_passos = 2;
  7319  003876  0E02               	movlw	2
  7320  003878  6E56               	movwf	_indice_passos^0,c
  7321  00387A  0012               	return		;funcret
  7322  00387C                     __end_of_resetIndicePassos:
  7323                           	callstack 0
  7324                           
  7325 ;; *************** function _resetContCiclos *****************
  7326 ;; Defined at:
  7327 ;;		line 54 in file "fifo.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;		None
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, status,2
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7341 ;;      Params:         0       0       0       0       0       0       0       0       0
  7342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7344 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7345 ;;Total ram usage:        0 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    2
  7348 ;; This function calls:
  7349 ;;		Nothing
  7350 ;; This function is called by:
  7351 ;;		_main
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text16
  7356  003836                     __ptext16:
  7357                           	callstack 0
  7358  003836                     _resetContCiclos:
  7359                           	callstack 28
  7360  003836                     
  7361                           ;fifo.c: 56:     cont_ciclos = 0;
  7362  003836  0E00               	movlw	0
  7363  003838  6E0E               	movwf	(_cont_ciclos+1)^0,c
  7364  00383A  0E00               	movlw	0
  7365  00383C  6E0D               	movwf	_cont_ciclos^0,c
  7366  00383E  0012               	return		;funcret
  7367  003840                     __end_of_resetContCiclos:
  7368                           	callstack 0
  7369                           
  7370 ;; *************** function _printExec *****************
  7371 ;; Defined at:
  7372 ;;		line 520 in file "fifo.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  col             1    wreg     unsigned char 
  7375 ;;  ind             1   25[COMRAM] unsigned char 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  col             1   28[COMRAM] unsigned char 
  7378 ;;  passo           1   29[COMRAM] unsigned char 
  7379 ;; Return value:  Size  Location     Type
  7380 ;;                  1    wreg      void 
  7381 ;; Registers used:
  7382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7388 ;;      Params:         1       0       0       0       0       0       0       0       0
  7389 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7391 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7392 ;;Total ram usage:        5 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    5
  7395 ;; This function calls:
  7396 ;;		_decodifica
  7397 ;;		_dignum_tam
  7398 ;;		_dispLCD_dataReg
  7399 ;;		_dispLCD_lincol
  7400 ;;		_dispLCD_num
  7401 ;;		_posAtual
  7402 ;; This function is called by:
  7403 ;;		_main
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text17
  7408  001E42                     __ptext17:
  7409                           	callstack 0
  7410  001E42                     _printExec:
  7411                           	callstack 25
  7412                           
  7413                           ;incstack = 0
  7414                           ;printExec@col stored from wreg
  7415  001E42  6E42               	movwf	printExec@col^0,c
  7416  001E44                     
  7417                           ;fifo.c: 520: void printExec (char col, char ind);fifo.c: 521: {;fifo.c: 522:     char p
      +                          asso = posAtual( ind );
  7418  001E44  503F               	movf	printExec@ind^0,w,c
  7419  001E46  ECF5  F01B         	call	_posAtual
  7420  001E4A  6E43               	movwf	printExec@passo^0,c
  7421  001E4C                     
  7422                           ;fifo.c: 524:     if(passo > 0 && passo <= 0x64)
  7423  001E4C  5043               	movf	printExec@passo^0,w,c
  7424  001E4E  B4D8               	btfsc	status,2,c
  7425  001E50  EF2C  F00F         	goto	u3651
  7426  001E54  EF2E  F00F         	goto	u3650
  7427  001E58                     u3651:
  7428  001E58  EF57  F00F         	goto	l5349
  7429  001E5C                     u3650:
  7430  001E5C  0E65               	movlw	101
  7431  001E5E  6043               	cpfslt	printExec@passo^0,c
  7432  001E60  EF34  F00F         	goto	u3661
  7433  001E64  EF36  F00F         	goto	u3660
  7434  001E68                     u3661:
  7435  001E68  EF57  F00F         	goto	l5349
  7436  001E6C                     u3660:
  7437  001E6C                     
  7438                           ;fifo.c: 525:     {;fifo.c: 526:         if( dignum_tam( (int) passo ) == 3 )
  7439  001E6C  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7440  001E70  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7441  001E72  ECEC  F019         	call	_dignum_tam	;wreg free
  7442  001E76  0A03               	xorlw	3
  7443  001E78  A4D8               	btfss	status,2,c
  7444  001E7A  EF41  F00F         	goto	u3671
  7445  001E7E  EF43  F00F         	goto	u3670
  7446  001E82                     u3671:
  7447  001E82  EF44  F00F         	goto	l5345
  7448  001E86                     u3670:
  7449  001E86                     
  7450                           ;fifo.c: 527:             col-=1;
  7451  001E86  0642               	decf	printExec@col^0,f,c
  7452  001E88                     l5345:
  7453                           
  7454                           ;fifo.c: 528:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  7455  001E88  C042  F031         	movff	printExec@col,dispLCD_num@col
  7456  001E8C  C043  F032         	movff	printExec@passo,dispLCD_num@num
  7457  001E90  6A33               	clrf	(dispLCD_num@num+1)^0,c
  7458  001E92  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7459  001E96  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7460  001E98  ECEC  F019         	call	_dignum_tam	;wreg free
  7461  001E9C  6E34               	movwf	dispLCD_num@tam^0,c
  7462  001E9E  0E00               	movlw	0
  7463  001EA0  ECE6  F00F         	call	_dispLCD_num
  7464  001EA4                     
  7465                           ;fifo.c: 529:         dispLCD_dataReg('%');
  7466  001EA4  0E25               	movlw	37
  7467  001EA6  ECD3  F018         	call	_dispLCD_dataReg
  7468                           
  7469                           ;fifo.c: 530:     }
  7470  001EAA  EFE5  F00F         	goto	l834
  7471  001EAE                     l5349:
  7472  001EAE  0E64               	movlw	100
  7473  001EB0  6443               	cpfsgt	printExec@passo^0,c
  7474  001EB2  EF5D  F00F         	goto	u3681
  7475  001EB6  EF5F  F00F         	goto	u3680
  7476  001EBA                     u3681:
  7477  001EBA  EF8E  F00F         	goto	l5363
  7478  001EBE                     u3680:
  7479  001EBE  0EDD               	movlw	221
  7480  001EC0  6043               	cpfslt	printExec@passo^0,c
  7481  001EC2  EF65  F00F         	goto	u3691
  7482  001EC6  EF67  F00F         	goto	u3690
  7483  001ECA                     u3691:
  7484  001ECA  EF8E  F00F         	goto	l5363
  7485  001ECE                     u3690:
  7486  001ECE                     
  7487                           ;fifo.c: 532:     {;fifo.c: 533:         decodifica(&passo);
  7488  001ECE  0E43               	movlw	low printExec@passo
  7489  001ED0  6E26               	movwf	decodifica@d^0,c
  7490  001ED2  0E00               	movlw	high printExec@passo
  7491  001ED4  6E27               	movwf	(decodifica@d+1)^0,c
  7492  001ED6  EC4D  F011         	call	_decodifica	;wreg free
  7493  001EDA                     
  7494                           ;fifo.c: 534:         if( dignum_tam( (int) passo ) == 3 )
  7495  001EDA  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7496  001EDE  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7497  001EE0  ECEC  F019         	call	_dignum_tam	;wreg free
  7498  001EE4  0A03               	xorlw	3
  7499  001EE6  A4D8               	btfss	status,2,c
  7500  001EE8  EF78  F00F         	goto	u3701
  7501  001EEC  EF7A  F00F         	goto	u3700
  7502  001EF0                     u3701:
  7503  001EF0  EF7B  F00F         	goto	l5359
  7504  001EF4                     u3700:
  7505  001EF4                     
  7506                           ;fifo.c: 535:             col-=1;
  7507  001EF4  0642               	decf	printExec@col^0,f,c
  7508  001EF6                     l5359:
  7509                           
  7510                           ;fifo.c: 536:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  7511  001EF6  C042  F031         	movff	printExec@col,dispLCD_num@col
  7512  001EFA  C043  F032         	movff	printExec@passo,dispLCD_num@num
  7513  001EFE  6A33               	clrf	(dispLCD_num@num+1)^0,c
  7514  001F00  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7515  001F04  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7516  001F06  ECEC  F019         	call	_dignum_tam	;wreg free
  7517  001F0A  6E34               	movwf	dispLCD_num@tam^0,c
  7518  001F0C  0E00               	movlw	0
  7519  001F0E  ECE6  F00F         	call	_dispLCD_num
  7520  001F12                     
  7521                           ;fifo.c: 537:         dispLCD_dataReg('s');
  7522  001F12  0E73               	movlw	115
  7523  001F14  ECD3  F018         	call	_dispLCD_dataReg
  7524                           
  7525                           ;fifo.c: 538:     }
  7526  001F18  EFE5  F00F         	goto	l834
  7527  001F1C                     l5363:
  7528  001F1C  0EDC               	movlw	220
  7529  001F1E  6443               	cpfsgt	printExec@passo^0,c
  7530  001F20  EF94  F00F         	goto	u3711
  7531  001F24  EF96  F00F         	goto	u3710
  7532  001F28                     u3711:
  7533  001F28  EFC3  F00F         	goto	l5381
  7534  001F2C                     u3710:
  7535  001F2C  0EFE               	movlw	254
  7536  001F2E  6043               	cpfslt	printExec@passo^0,c
  7537  001F30  EF9C  F00F         	goto	u3721
  7538  001F34  EF9E  F00F         	goto	u3720
  7539  001F38                     u3721:
  7540  001F38  EFC3  F00F         	goto	l5381
  7541  001F3C                     u3720:
  7542  001F3C                     
  7543                           ;fifo.c: 540:     {;fifo.c: 541:         decodifica(&passo);
  7544  001F3C  0E43               	movlw	low printExec@passo
  7545  001F3E  6E26               	movwf	decodifica@d^0,c
  7546  001F40  0E00               	movlw	high printExec@passo
  7547  001F42  6E27               	movwf	(decodifica@d+1)^0,c
  7548  001F44  EC4D  F011         	call	_decodifica	;wreg free
  7549  001F48                     
  7550                           ;fifo.c: 542:         dispLCD_lincol(0, col);
  7551  001F48  C042  F028         	movff	printExec@col,dispLCD_lincol@col
  7552  001F4C  0E00               	movlw	0
  7553  001F4E  EC3B  F017         	call	_dispLCD_lincol
  7554  001F52                     
  7555                           ;fifo.c: 543:         dispLCD_dataReg( passo & ~0x20 );
  7556  001F52  5043               	movf	printExec@passo^0,w,c
  7557  001F54  0BDF               	andlw	223
  7558  001F56  ECD3  F018         	call	_dispLCD_dataReg
  7559  001F5A                     
  7560                           ;fifo.c: 544:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  7561  001F5A  BA43               	btfsc	printExec@passo^0,5,c
  7562  001F5C  EFB2  F00F         	goto	u3731
  7563  001F60  EFB4  F00F         	goto	u3730
  7564  001F64                     u3731:
  7565  001F64  EFBA  F00F         	goto	l5377
  7566  001F68                     u3730:
  7567  001F68  0E00               	movlw	0
  7568  001F6A  6E41               	movwf	(_printExec$966+1)^0,c
  7569  001F6C  0E2B               	movlw	43
  7570  001F6E  6E40               	movwf	_printExec$966^0,c
  7571  001F70  EFBE  F00F         	goto	l5379
  7572  001F74                     l5377:
  7573  001F74  0E00               	movlw	0
  7574  001F76  6E41               	movwf	(_printExec$966+1)^0,c
  7575  001F78  0E2D               	movlw	45
  7576  001F7A  6E40               	movwf	_printExec$966^0,c
  7577  001F7C                     l5379:
  7578  001F7C  5040               	movf	_printExec$966^0,w,c
  7579  001F7E  ECD3  F018         	call	_dispLCD_dataReg
  7580                           
  7581                           ;fifo.c: 545:     }
  7582  001F82  EFE5  F00F         	goto	l834
  7583  001F86                     l5381:
  7584  001F86  0EFE               	movlw	254
  7585  001F88  1843               	xorwf	printExec@passo^0,w,c
  7586  001F8A  A4D8               	btfss	status,2,c
  7587  001F8C  EFCA  F00F         	goto	u3741
  7588  001F90  EFCC  F00F         	goto	u3740
  7589  001F94                     u3741:
  7590  001F94  EFE5  F00F         	goto	l826
  7591  001F98                     u3740:
  7592  001F98                     
  7593                           ;fifo.c: 547:     {;fifo.c: 548:         decodifica(&passo);
  7594  001F98  0E43               	movlw	low printExec@passo
  7595  001F9A  6E26               	movwf	decodifica@d^0,c
  7596  001F9C  0E00               	movlw	high printExec@passo
  7597  001F9E  6E27               	movwf	(decodifica@d+1)^0,c
  7598  001FA0  EC4D  F011         	call	_decodifica	;wreg free
  7599  001FA4                     
  7600                           ;fifo.c: 549:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  7601  001FA4  C042  F031         	movff	printExec@col,dispLCD_num@col
  7602  001FA8  C043  F032         	movff	printExec@passo,dispLCD_num@num
  7603  001FAC  6A33               	clrf	(dispLCD_num@num+1)^0,c
  7604  001FAE  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7605  001FB2  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7606  001FB4  ECEC  F019         	call	_dignum_tam	;wreg free
  7607  001FB8  6E34               	movwf	dispLCD_num@tam^0,c
  7608  001FBA  0E00               	movlw	0
  7609  001FBC  ECE6  F00F         	call	_dispLCD_num
  7610  001FC0                     
  7611                           ;fifo.c: 550:         dispLCD_dataReg('%');
  7612  001FC0  0E25               	movlw	37
  7613  001FC2  ECD3  F018         	call	_dispLCD_dataReg
  7614  001FC6  EFE5  F00F         	goto	l834
  7615  001FCA                     l826:
  7616  001FCA                     l834:
  7617  001FCA  0012               	return		;funcret
  7618  001FCC                     __end_of_printExec:
  7619                           	callstack 0
  7620                           
  7621 ;; *************** function _posAtual *****************
  7622 ;; Defined at:
  7623 ;;		line 512 in file "fifo.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  ind             1    wreg     unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  ind             1    1[COMRAM] unsigned char 
  7628 ;;  passo           1    2[COMRAM] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      unsigned char 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0
  7639 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7641 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7642 ;;Total ram usage:        2 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    3
  7645 ;; This function calls:
  7646 ;;		_fifo_lerPos
  7647 ;;		_getIndicePassos
  7648 ;; This function is called by:
  7649 ;;		_printExec
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           	psect	text18
  7654  0037EA                     __ptext18:
  7655                           	callstack 0
  7656  0037EA                     _posAtual:
  7657                           	callstack 26
  7658                           
  7659                           ;incstack = 0
  7660                           ;posAtual@ind stored from wreg
  7661  0037EA  6E27               	movwf	posAtual@ind^0,c
  7662  0037EC                     
  7663                           ;fifo.c: 516:     passo = fifo_lerPos( getIndicePassos() + ind );
  7664  0037EC  EC41  F01C         	call	_getIndicePassos	;wreg free
  7665  0037F0  2427               	addwf	posAtual@ind^0,w,c
  7666  0037F2  ECFE  F01B         	call	_fifo_lerPos
  7667  0037F6  6E28               	movwf	posAtual@passo^0,c
  7668  0037F8                     
  7669                           ;fifo.c: 517:     return(passo);
  7670  0037F8  5028               	movf	posAtual@passo^0,w,c
  7671  0037FA  0012               	return		;funcret
  7672  0037FC                     __end_of_posAtual:
  7673                           	callstack 0
  7674                           
  7675 ;; *************** function _getIndicePassos *****************
  7676 ;; Defined at:
  7677 ;;		line 31 in file "fifo.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      unsigned char 
  7684 ;; Registers used:
  7685 ;;		wreg, status,2
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7691 ;;      Params:         0       0       0       0       0       0       0       0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7694 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7695 ;;Total ram usage:        0 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    2
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_main
  7702 ;;		_posAtual
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text19
  7707  003882                     __ptext19:
  7708                           	callstack 0
  7709  003882                     _getIndicePassos:
  7710                           	callstack 26
  7711  003882                     
  7712                           ;fifo.c: 33:     return(indice_passos);
  7713  003882  5056               	movf	_indice_passos^0,w,c
  7714  003884  0012               	return		;funcret
  7715  003886                     __end_of_getIndicePassos:
  7716                           	callstack 0
  7717                           
  7718 ;; *************** function _fifo_lerPos *****************
  7719 ;; Defined at:
  7720 ;;		line 168 in file "fifo.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  i               1    wreg     unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  i               1    0[COMRAM] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  1    wreg      unsigned char 
  7727 ;; Registers used:
  7728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0
  7735 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7737 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7738 ;;Total ram usage:        1 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    2
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_main
  7745 ;;		_posAtual
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           	psect	text20
  7750  0037FC                     __ptext20:
  7751                           	callstack 0
  7752  0037FC                     _fifo_lerPos:
  7753                           	callstack 26
  7754                           
  7755                           ;incstack = 0
  7756                           ;fifo_lerPos@i stored from wreg
  7757  0037FC  6E26               	movwf	fifo_lerPos@i^0,c
  7758  0037FE                     
  7759                           ;fifo.c: 168: char fifo_lerPos(char i);fifo.c: 169: {;fifo.c: 170:     return ( fila[i] 
      +                          );
  7760  0037FE  0E14               	movlw	low _fila
  7761  003800  2426               	addwf	fifo_lerPos@i^0,w,c
  7762  003802  6ED9               	movwf	fsr2l,c
  7763  003804  6ADA               	clrf	fsr2h,c
  7764  003806  0E00               	movlw	high _fila
  7765  003808  22DA               	addwfc	fsr2h,f,c
  7766  00380A  50DF               	movf	indf2,w,c
  7767  00380C  0012               	return		;funcret
  7768  00380E                     __end_of_fifo_lerPos:
  7769                           	callstack 0
  7770                           
  7771 ;; *************** function _dispLCD_num *****************
  7772 ;; Defined at:
  7773 ;;		line 201 in file "dispLCD4vias.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  lin             1    wreg     unsigned char 
  7776 ;;  col             1   11[COMRAM] unsigned char 
  7777 ;;  num             2   12[COMRAM] int 
  7778 ;;  tam             1   14[COMRAM] unsigned char 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  lin             1   20[COMRAM] unsigned char 
  7781 ;;  div             2   23[COMRAM] int 
  7782 ;;  sinal           1   22[COMRAM] unsigned char 
  7783 ;;  size            1   21[COMRAM] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7793 ;;      Params:         4       0       0       0       0       0       0       0       0
  7794 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7795 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7796 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7797 ;;Total ram usage:       14 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    4
  7800 ;; This function calls:
  7801 ;;		___awdiv
  7802 ;;		___awmod
  7803 ;;		_dispLCD_dataReg
  7804 ;;		_dispLCD_lincol
  7805 ;; This function is called by:
  7806 ;;		_printExec
  7807 ;;		_main
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           	psect	text21
  7812  001FCC                     __ptext21:
  7813                           	callstack 0
  7814  001FCC                     _dispLCD_num:
  7815                           	callstack 25
  7816                           
  7817                           ;incstack = 0
  7818                           ;dispLCD_num@lin stored from wreg
  7819  001FCC  6E3A               	movwf	dispLCD_num@lin^0,c
  7820  001FCE                     
  7821                           ;dispLCD4vias.c: 201: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 202:                     int num, unsigned char tam );dispLCD4vias.c: 203: {;dispL
      +                          CD4vias.c: 204:     int div;;dispLCD4vias.c: 205:     unsigned char size;;dispLCD4vias.c
      +                          : 206:     char sinal;;dispLCD4vias.c: 208:     sinal = num < 0;
  7822  001FCE  BE33               	btfsc	(dispLCD_num@num+1)^0,7,c
  7823  001FD0  EFEC  F00F         	goto	u2931
  7824  001FD4  EFEF  F00F         	goto	u2930
  7825  001FD8                     u2931:
  7826  001FD8  0E01               	movlw	1
  7827  001FDA  EFF0  F00F         	goto	u2940
  7828  001FDE                     u2930:
  7829  001FDE  0E00               	movlw	0
  7830  001FE0                     u2940:
  7831  001FE0  6E3C               	movwf	dispLCD_num@sinal^0,c
  7832  001FE2                     
  7833                           ;dispLCD4vias.c: 209:     if( sinal )
  7834  001FE2  503C               	movf	dispLCD_num@sinal^0,w,c
  7835  001FE4  B4D8               	btfsc	status,2,c
  7836  001FE6  EFF7  F00F         	goto	u2951
  7837  001FEA  EFF9  F00F         	goto	u2950
  7838  001FEE                     u2951:
  7839  001FEE  EFFD  F00F         	goto	l4707
  7840  001FF2                     u2950:
  7841  001FF2                     
  7842                           ;dispLCD4vias.c: 210:         num = (~num) + 1;
  7843  001FF2  6C32               	negf	dispLCD_num@num^0,c
  7844  001FF4  1E33               	comf	(dispLCD_num@num+1)^0,f,c
  7845  001FF6  B0D8               	btfsc	status,0,c
  7846  001FF8  2A33               	incf	(dispLCD_num@num+1)^0,f,c
  7847  001FFA                     l4707:
  7848                           
  7849                           ;dispLCD4vias.c: 212:     dispLCD_lincol(lin, col);
  7850  001FFA  C031  F028         	movff	dispLCD_num@col,dispLCD_lincol@col
  7851  001FFE  503A               	movf	dispLCD_num@lin^0,w,c
  7852  002000  EC3B  F017         	call	_dispLCD_lincol
  7853  002004                     
  7854                           ;dispLCD4vias.c: 214:     div=10000;
  7855  002004  0E27               	movlw	39
  7856  002006  6E3E               	movwf	(dispLCD_num@div+1)^0,c
  7857  002008  0E10               	movlw	16
  7858  00200A  6E3D               	movwf	dispLCD_num@div^0,c
  7859  00200C                     
  7860                           ;dispLCD4vias.c: 215:     size = 5;
  7861  00200C  0E05               	movlw	5
  7862  00200E  6E3B               	movwf	dispLCD_num@size^0,c
  7863                           
  7864                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  7865  002010  EF2C  F010         	goto	l4719
  7866  002014                     l4713:
  7867                           
  7868                           ;dispLCD4vias.c: 217:     {;dispLCD4vias.c: 218:         if( num/div == 0 )
  7869  002014  C032  F026         	movff	dispLCD_num@num,___awdiv@dividend
  7870  002018  C033  F027         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  7871  00201C  C03D  F028         	movff	dispLCD_num@div,___awdiv@divisor
  7872  002020  C03E  F029         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  7873  002024  EC44  F014         	call	___awdiv	;wreg free
  7874  002028  5026               	movf	?___awdiv^0,w,c
  7875  00202A  1027               	iorwf	(?___awdiv+1)^0,w,c
  7876  00202C  A4D8               	btfss	status,2,c
  7877  00202E  EF1B  F010         	goto	u2961
  7878  002032  EF1D  F010         	goto	u2960
  7879  002036                     u2961:
  7880  002036  EF3F  F010         	goto	l4725
  7881  00203A                     u2960:
  7882  00203A                     
  7883                           ;dispLCD4vias.c: 219:             --size;
  7884  00203A  063B               	decf	dispLCD_num@size^0,f,c
  7885  00203C                     
  7886                           ;dispLCD4vias.c: 222:         div/=10;
  7887  00203C  C03D  F026         	movff	dispLCD_num@div,___awdiv@dividend
  7888  002040  C03E  F027         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  7889  002044  0E00               	movlw	0
  7890  002046  6E29               	movwf	(___awdiv@divisor+1)^0,c
  7891  002048  0E0A               	movlw	10
  7892  00204A  6E28               	movwf	___awdiv@divisor^0,c
  7893  00204C  EC44  F014         	call	___awdiv	;wreg free
  7894  002050  C026  F03D         	movff	?___awdiv,dispLCD_num@div
  7895  002054  C027  F03E         	movff	?___awdiv+1,dispLCD_num@div+1
  7896  002058                     l4719:
  7897                           
  7898                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  7899  002058  BE3E               	btfsc	(dispLCD_num@div+1)^0,7,c
  7900  00205A  EF39  F010         	goto	u2970
  7901  00205E  503E               	movf	(dispLCD_num@div+1)^0,w,c
  7902  002060  E106               	bnz	u2971
  7903  002062  043D               	decf	dispLCD_num@div^0,w,c
  7904  002064  B0D8               	btfsc	status,0,c
  7905  002066  EF37  F010         	goto	u2971
  7906  00206A  EF39  F010         	goto	u2970
  7907  00206E                     u2971:
  7908  00206E  EF0A  F010         	goto	l4713
  7909  002072                     u2970:
  7910  002072  EF3F  F010         	goto	l4725
  7911  002076                     l4721:
  7912                           
  7913                           ;dispLCD4vias.c: 226:     {;dispLCD4vias.c: 227:         dispLCD_dataReg(' ');
  7914  002076  0E20               	movlw	32
  7915  002078  ECD3  F018         	call	_dispLCD_dataReg
  7916  00207C                     
  7917                           ;dispLCD4vias.c: 228:         --tam;
  7918  00207C  0634               	decf	dispLCD_num@tam^0,f,c
  7919  00207E                     l4725:
  7920                           
  7921                           ;dispLCD4vias.c: 225:     while( tam > (size+sinal) && tam > 1 )
  7922  00207E  5034               	movf	dispLCD_num@tam^0,w,c
  7923  002080  6E35               	movwf	??_dispLCD_num^0,c
  7924  002082  6A36               	clrf	(??_dispLCD_num+1)^0,c
  7925  002084  503C               	movf	dispLCD_num@sinal^0,w,c
  7926  002086  C03B  F037         	movff	dispLCD_num@size,??_dispLCD_num+2
  7927  00208A  6A38               	clrf	(??_dispLCD_num+3)^0,c
  7928  00208C  2637               	addwf	(??_dispLCD_num+2)^0,f,c
  7929  00208E  0E00               	movlw	0
  7930  002090  2238               	addwfc	(??_dispLCD_num+3)^0,f,c
  7931  002092  5035               	movf	??_dispLCD_num^0,w,c
  7932  002094  5C37               	subwf	(??_dispLCD_num+2)^0,w,c
  7933  002096  5038               	movf	(??_dispLCD_num+3)^0,w,c
  7934  002098  0A80               	xorlw	128
  7935  00209A  6E39               	movwf	(??_dispLCD_num+4)^0,c
  7936  00209C  5036               	movf	(??_dispLCD_num+1)^0,w,c
  7937  00209E  0A80               	xorlw	128
  7938  0020A0  5839               	subwfb	(??_dispLCD_num+4)^0,w,c
  7939  0020A2  B0D8               	btfsc	status,0,c
  7940  0020A4  EF56  F010         	goto	u2981
  7941  0020A8  EF58  F010         	goto	u2980
  7942  0020AC                     u2981:
  7943  0020AC  EF60  F010         	goto	l4729
  7944  0020B0                     u2980:
  7945  0020B0  0E02               	movlw	2
  7946  0020B2  6034               	cpfslt	dispLCD_num@tam^0,c
  7947  0020B4  EF5E  F010         	goto	u2991
  7948  0020B8  EF60  F010         	goto	u2990
  7949  0020BC                     u2991:
  7950  0020BC  EF3B  F010         	goto	l4721
  7951  0020C0                     u2990:
  7952  0020C0                     l4729:
  7953                           
  7954                           ;dispLCD4vias.c: 231:     if( sinal )
  7955  0020C0  503C               	movf	dispLCD_num@sinal^0,w,c
  7956  0020C2  B4D8               	btfsc	status,2,c
  7957  0020C4  EF66  F010         	goto	u3001
  7958  0020C8  EF68  F010         	goto	u3000
  7959  0020CC                     u3001:
  7960  0020CC  EF6B  F010         	goto	l489
  7961  0020D0                     u3000:
  7962  0020D0                     
  7963                           ;dispLCD4vias.c: 232:         dispLCD_dataReg('-');
  7964  0020D0  0E2D               	movlw	45
  7965  0020D2  ECD3  F018         	call	_dispLCD_dataReg
  7966  0020D6                     l489:
  7967                           
  7968                           ;dispLCD4vias.c: 235:     {;dispLCD4vias.c: 236:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  7969  0020D6  C032  F026         	movff	dispLCD_num@num,___awdiv@dividend
  7970  0020DA  C033  F027         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  7971  0020DE  C03D  F028         	movff	dispLCD_num@div,___awdiv@divisor
  7972  0020E2  C03E  F029         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  7973  0020E6  EC44  F014         	call	___awdiv	;wreg free
  7974  0020EA  5026               	movf	?___awdiv^0,w,c
  7975  0020EC  0F30               	addlw	48
  7976  0020EE  ECD3  F018         	call	_dispLCD_dataReg
  7977                           
  7978                           ;dispLCD4vias.c: 237:         num = num % div;
  7979  0020F2  C032  F026         	movff	dispLCD_num@num,___awmod@dividend
  7980  0020F6  C033  F027         	movff	dispLCD_num@num+1,___awmod@dividend+1
  7981  0020FA  C03D  F028         	movff	dispLCD_num@div,___awmod@divisor
  7982  0020FE  C03E  F029         	movff	dispLCD_num@div+1,___awmod@divisor+1
  7983  002102  ECA6  F014         	call	___awmod	;wreg free
  7984  002106  C026  F032         	movff	?___awmod,dispLCD_num@num
  7985  00210A  C027  F033         	movff	?___awmod+1,dispLCD_num@num+1
  7986                           
  7987                           ;dispLCD4vias.c: 238:         div/=10;
  7988  00210E  C03D  F026         	movff	dispLCD_num@div,___awdiv@dividend
  7989  002112  C03E  F027         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  7990  002116  0E00               	movlw	0
  7991  002118  6E29               	movwf	(___awdiv@divisor+1)^0,c
  7992  00211A  0E0A               	movlw	10
  7993  00211C  6E28               	movwf	___awdiv@divisor^0,c
  7994  00211E  EC44  F014         	call	___awdiv	;wreg free
  7995  002122  C026  F03D         	movff	?___awdiv,dispLCD_num@div
  7996  002126  C027  F03E         	movff	?___awdiv+1,dispLCD_num@div+1
  7997  00212A                     
  7998                           ;dispLCD4vias.c: 239:     }
  7999  00212A  BE3E               	btfsc	(dispLCD_num@div+1)^0,7,c
  8000  00212C  EFA2  F010         	goto	u3010
  8001  002130  503E               	movf	(dispLCD_num@div+1)^0,w,c
  8002  002132  E106               	bnz	u3011
  8003  002134  043D               	decf	dispLCD_num@div^0,w,c
  8004  002136  B0D8               	btfsc	status,0,c
  8005  002138  EFA0  F010         	goto	u3011
  8006  00213C  EFA2  F010         	goto	u3010
  8007  002140                     u3011:
  8008  002140  EF6B  F010         	goto	l489
  8009  002144                     u3010:
  8010  002144  0012               	return		;funcret
  8011  002146                     __end_of_dispLCD_num:
  8012                           	callstack 0
  8013                           
  8014 ;; *************** function _manipula_atuadores_init *****************
  8015 ;; Defined at:
  8016 ;;		line 137 in file "fifo.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  aux             1    wreg     unsigned char 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  aux             1    4[COMRAM] unsigned char 
  8021 ;;  mask            1    5[COMRAM] unsigned char 
  8022 ;;  atuador         1    3[COMRAM] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  1    wreg      void 
  8025 ;; Registers used:
  8026 ;;		wreg, status,2, status,0, cstack
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8032 ;;      Params:         0       0       0       0       0       0       0       0       0
  8033 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8035 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8036 ;;Total ram usage:        3 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    3
  8039 ;; This function calls:
  8040 ;;		_alt_atuador
  8041 ;; This function is called by:
  8042 ;;		_main
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text22
  8047  003156                     __ptext22:
  8048                           	callstack 0
  8049  003156                     _manipula_atuadores_init:
  8050                           	callstack 27
  8051                           
  8052                           ;incstack = 0
  8053                           ;manipula_atuadores_init@aux stored from wreg
  8054  003156  6E2A               	movwf	manipula_atuadores_init@aux^0,c
  8055  003158                     
  8056                           ;fifo.c: 137: void manipula_atuadores_init(char aux);fifo.c: 138: {;fifo.c: 139:     cha
      +                          r mask = 0x08;
  8057  003158  0E08               	movlw	8
  8058  00315A  6E2B               	movwf	manipula_atuadores_init@mask^0,c
  8059                           
  8060                           ;fifo.c: 140:     char atuador = 0x41;
  8061  00315C  0E41               	movlw	65
  8062  00315E  6E29               	movwf	manipula_atuadores_init@atuador^0,c
  8063  003160                     
  8064                           ;fifo.c: 142:     if(aux ==0xFF)
  8065  003160  282A               	incf	manipula_atuadores_init@aux^0,w,c
  8066  003162  A4D8               	btfss	status,2,c
  8067  003164  EFB6  F018         	goto	u3311
  8068  003168  EFB8  F018         	goto	u3310
  8069  00316C                     u3311:
  8070  00316C  EFCA  F018         	goto	l5091
  8071  003170                     u3310:
  8072  003170  EFD2  F018         	goto	l662
  8073  003174                     l5083:
  8074                           
  8075                           ;fifo.c: 148:         {;fifo.c: 150:             if(aux & mask)
  8076  003174  502A               	movf	manipula_atuadores_init@aux^0,w,c
  8077  003176  142B               	andwf	manipula_atuadores_init@mask^0,w,c
  8078  003178  0900               	iorlw	0
  8079  00317A  B4D8               	btfsc	status,2,c
  8080  00317C  EFC2  F018         	goto	u3321
  8081  003180  EFC4  F018         	goto	u3320
  8082  003184                     u3321:
  8083  003184  EFC7  F018         	goto	l5087
  8084  003188                     u3320:
  8085  003188                     
  8086                           ;fifo.c: 151:             {;fifo.c: 152:                 alt_atuador(atuador);
  8087  003188  5029               	movf	manipula_atuadores_init@atuador^0,w,c
  8088  00318A  ECF4  F015         	call	_alt_atuador
  8089  00318E                     l5087:
  8090                           
  8091                           ;fifo.c: 154:             atuador++;
  8092  00318E  2A29               	incf	manipula_atuadores_init@atuador^0,f,c
  8093  003190                     
  8094                           ;fifo.c: 155:             mask >>= 1;
  8095  003190  90D8               	bcf	status,0,c
  8096  003192  322B               	rrcf	manipula_atuadores_init@mask^0,f,c
  8097  003194                     l5091:
  8098                           
  8099                           ;fifo.c: 147:         while(mask)
  8100  003194  502B               	movf	manipula_atuadores_init@mask^0,w,c
  8101  003196  A4D8               	btfss	status,2,c
  8102  003198  EFD0  F018         	goto	u3331
  8103  00319C  EFD2  F018         	goto	u3330
  8104  0031A0                     u3331:
  8105  0031A0  EFBA  F018         	goto	l5083
  8106  0031A4                     u3330:
  8107  0031A4                     l662:
  8108  0031A4  0012               	return		;funcret
  8109  0031A6                     __end_of_manipula_atuadores_init:
  8110                           	callstack 0
  8111                           
  8112 ;; *************** function _ler_sensor *****************
  8113 ;; Defined at:
  8114 ;;		line 68 in file "atuadores.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  passo           1    wreg     unsigned char 
  8117 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8118 ;;		 -> main@vetorIn(1), 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  passo           1    4[COMRAM] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      unsigned char 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8130 ;;      Params:         2       0       0       0       0       0       0       0       0
  8131 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8132 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8133 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8134 ;;Total ram usage:        5 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    2
  8137 ;; This function calls:
  8138 ;;		Nothing
  8139 ;; This function is called by:
  8140 ;;		_main
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text23
  8145  0025D6                     __ptext23:
  8146                           	callstack 0
  8147  0025D6                     _ler_sensor:
  8148                           	callstack 28
  8149                           
  8150                           ;incstack = 0
  8151                           ;ler_sensor@passo stored from wreg
  8152  0025D6  6E2A               	movwf	ler_sensor@passo^0,c
  8153  0025D8                     
  8154                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  8155  0025D8  EF31  F013         	goto	l5507
  8156  0025DC                     l5451:
  8157  0025DC  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8158  0025E0  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8159  0025E4  50DF               	movf	indf2,w,c
  8160  0025E6  0B02               	andlw	2
  8161  0025E8  EF5E  F013         	goto	l415
  8162  0025EC                     l5457:
  8163  0025EC  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8164  0025F0  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8165  0025F4  50DF               	movf	indf2,w,c
  8166  0025F6  0B01               	andlw	1
  8167  0025F8  EF5E  F013         	goto	l415
  8168  0025FC                     l5463:
  8169  0025FC  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8170  002600  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8171  002604  50DF               	movf	indf2,w,c
  8172  002606  0B08               	andlw	8
  8173  002608  EF5E  F013         	goto	l415
  8174  00260C                     l5469:
  8175  00260C  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8176  002610  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8177  002614  50DF               	movf	indf2,w,c
  8178  002616  0B04               	andlw	4
  8179  002618  EF5E  F013         	goto	l415
  8180  00261C                     l5475:
  8181  00261C  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8182  002620  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8183  002624  50DF               	movf	indf2,w,c
  8184  002626  0B20               	andlw	32
  8185  002628  EF5E  F013         	goto	l415
  8186  00262C                     l5481:
  8187  00262C  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8188  002630  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8189  002634  50DF               	movf	indf2,w,c
  8190  002636  0B10               	andlw	16
  8191  002638  EF5E  F013         	goto	l415
  8192  00263C                     l5487:
  8193  00263C  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8194  002640  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8195  002644  50DF               	movf	indf2,w,c
  8196  002646  0B80               	andlw	128
  8197  002648  EF5E  F013         	goto	l415
  8198  00264C                     l5493:
  8199  00264C  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8200  002650  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8201  002654  50DF               	movf	indf2,w,c
  8202  002656  0B40               	andlw	64
  8203  002658  EF5E  F013         	goto	l415
  8204  00265C                     l5499:
  8205  00265C  0E00               	movlw	0
  8206  00265E  EF5E  F013         	goto	l415
  8207  002662                     l5507:
  8208  002662  502A               	movf	ler_sensor@passo^0,w,c
  8209  002664  6E28               	movwf	??_ler_sensor^0,c
  8210  002666  6A29               	clrf	(??_ler_sensor+1)^0,c
  8211                           
  8212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8213                           ; Switch size 1, requested type "simple"
  8214                           ; Number of cases is 1, Range of values is 0 to 0
  8215                           ; switch strategies available:
  8216                           ; Name         Instructions Cycles
  8217                           ; simple_byte            4     3 (average)
  8218                           ;	Chosen strategy is simple_byte
  8219  002668  5029               	movf	(??_ler_sensor+1)^0,w,c
  8220  00266A  0A00               	xorlw	0	; case 0
  8221  00266C  B4D8               	btfsc	status,2,c
  8222  00266E  EF3B  F013         	goto	l7137
  8223  002672  EF2E  F013         	goto	l5499
  8224  002676                     l7137:
  8225                           
  8226                           ; Switch size 1, requested type "simple"
  8227                           ; Number of cases is 8, Range of values is 65 to 100
  8228                           ; switch strategies available:
  8229                           ; Name         Instructions Cycles
  8230                           ; simple_byte           25    13 (average)
  8231                           ;	Chosen strategy is simple_byte
  8232  002676  5028               	movf	??_ler_sensor^0,w,c
  8233  002678  0A41               	xorlw	65	; case 65
  8234  00267A  B4D8               	btfsc	status,2,c
  8235  00267C  EFEE  F012         	goto	l5451
  8236  002680  0A03               	xorlw	3	; case 66
  8237  002682  B4D8               	btfsc	status,2,c
  8238  002684  EFFE  F012         	goto	l5463
  8239  002688  0A01               	xorlw	1	; case 67
  8240  00268A  B4D8               	btfsc	status,2,c
  8241  00268C  EF0E  F013         	goto	l5475
  8242  002690  0A07               	xorlw	7	; case 68
  8243  002692  B4D8               	btfsc	status,2,c
  8244  002694  EF1E  F013         	goto	l5487
  8245  002698  0A25               	xorlw	37	; case 97
  8246  00269A  B4D8               	btfsc	status,2,c
  8247  00269C  EFF6  F012         	goto	l5457
  8248  0026A0  0A03               	xorlw	3	; case 98
  8249  0026A2  B4D8               	btfsc	status,2,c
  8250  0026A4  EF06  F013         	goto	l5469
  8251  0026A8  0A01               	xorlw	1	; case 99
  8252  0026AA  B4D8               	btfsc	status,2,c
  8253  0026AC  EF16  F013         	goto	l5481
  8254  0026B0  0A07               	xorlw	7	; case 100
  8255  0026B2  B4D8               	btfsc	status,2,c
  8256  0026B4  EF26  F013         	goto	l5493
  8257  0026B8  EF2E  F013         	goto	l5499
  8258  0026BC                     l415:
  8259  0026BC  0012               	return		;funcret
  8260  0026BE                     __end_of_ler_sensor:
  8261                           	callstack 0
  8262                           
  8263 ;; *************** function _init_atuadores *****************
  8264 ;; Defined at:
  8265 ;;		line 103 in file "fifo.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      void 
  8272 ;; Registers used:
  8273 ;;		None
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    2
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_main
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text24
  8294  003840                     __ptext24:
  8295                           	callstack 0
  8296  003840                     _init_atuadores:
  8297                           	callstack 28
  8298  003840                     
  8299                           ;fifo.c: 105:     atuador.A = 0;
  8300  003840  9013               	bcf	_atuador^0,0,c
  8301                           
  8302                           ;fifo.c: 106:     atuador.B = 0;
  8303  003842  9213               	bcf	_atuador^0,1,c
  8304                           
  8305                           ;fifo.c: 107:     atuador.C = 0;
  8306  003844  9413               	bcf	_atuador^0,2,c
  8307                           
  8308                           ;fifo.c: 108:     atuador.D = 0;
  8309  003846  9613               	bcf	_atuador^0,3,c
  8310  003848  0012               	return		;funcret
  8311  00384A                     __end_of_init_atuadores:
  8312                           	callstack 0
  8313                           
  8314 ;; *************** function _initSerialIO *****************
  8315 ;; Defined at:
  8316 ;;		line 89 in file "serialIO.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  ptrIn           2    0[COMRAM] PTR unsigned char 
  8319 ;;		 -> main@vetorIn(1), 
  8320 ;;  ptrOut          2    2[COMRAM] PTR unsigned char 
  8321 ;;		 -> main@vetorOut(1), 
  8322 ;;  length          1    4[COMRAM] unsigned char 
  8323 ;; Auto vars:     Size  Location     Type
  8324 ;;		None
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      void 
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8334 ;;      Params:         5       0       0       0       0       0       0       0       0
  8335 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8337 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8338 ;;Total ram usage:        5 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    2
  8341 ;; This function calls:
  8342 ;;		Nothing
  8343 ;; This function is called by:
  8344 ;;		_main
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text25
  8349  003522                     __ptext25:
  8350                           	callstack 0
  8351  003522                     _initSerialIO:
  8352                           	callstack 28
  8353  003522                     
  8354                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ADCON1 = 0xFF;
  8355  003522  68C1               	setf	193,c	;volatile
  8356  003524                     
  8357                           ;serialIO.c: 93:     ptrSerialIn = ptrIn;
  8358  003524  C026  F00B         	movff	initSerialIO@ptrIn,_ptrSerialIn
  8359  003528  C027  F00C         	movff	initSerialIO@ptrIn+1,_ptrSerialIn+1
  8360                           
  8361                           ;serialIO.c: 94:     ptrSerialOut = ptrOut;
  8362  00352C  C028  F009         	movff	initSerialIO@ptrOut,_ptrSerialOut
  8363  003530  C029  F00A         	movff	initSerialIO@ptrOut+1,_ptrSerialOut+1
  8364  003534                     
  8365                           ;serialIO.c: 95:     lenSerialIO = length;
  8366  003534  C02A  F012         	movff	initSerialIO@length,_lenSerialIO
  8367  003538                     
  8368                           ;serialIO.c: 97:     PORTAbits.RA3 = 0;
  8369  003538  9680               	bcf	128,3,c	;volatile
  8370  00353A                     
  8371                           ;serialIO.c: 99:     TRISAbits.TRISA3 = 0;
  8372  00353A  9692               	bcf	146,3,c	;volatile
  8373  00353C                     
  8374                           ;serialIO.c: 102:     PORTAbits.RA2 = 0;
  8375  00353C  9480               	bcf	128,2,c	;volatile
  8376  00353E                     
  8377                           ;serialIO.c: 104:     TRISAbits.TRISA2 = 0;
  8378  00353E  9492               	bcf	146,2,c	;volatile
  8379  003540                     
  8380                           ;serialIO.c: 107:     PORTAbits.RA0 = 0;
  8381  003540  9080               	bcf	128,0,c	;volatile
  8382  003542                     
  8383                           ;serialIO.c: 109:     TRISAbits.TRISA0 = 0;
  8384  003542  9092               	bcf	146,0,c	;volatile
  8385  003544                     
  8386                           ;serialIO.c: 112:     PORTAbits.RA1 = 0;
  8387  003544  9280               	bcf	128,1,c	;volatile
  8388  003546                     
  8389                           ;serialIO.c: 114:     TRISAbits.TRISA1 = 1;
  8390  003546  8292               	bsf	146,1,c	;volatile
  8391  003548                     
  8392                           ;serialIO.c: 117:     SERIALIO.CLK = 0;
  8393  003548  9480               	bcf	128,2,c	;volatile
  8394  00354A                     
  8395                           ;serialIO.c: 118:     SERIALIO.OUT = 0;
  8396  00354A  9080               	bcf	128,0,c	;volatile
  8397  00354C                     
  8398                           ;serialIO.c: 119:     SERIALIO.SHLD = 1;
  8399  00354C  8680               	bsf	128,3,c	;volatile
  8400  00354E  0012               	return		;funcret
  8401  003550                     __end_of_initSerialIO:
  8402                           	callstack 0
  8403                           
  8404 ;; *************** function _getContCiclos *****************
  8405 ;; Defined at:
  8406 ;;		line 49 in file "fifo.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;		None
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;		None
  8411 ;; Return value:  Size  Location     Type
  8412 ;;                  2    0[COMRAM] unsigned int 
  8413 ;; Registers used:
  8414 ;;		None
  8415 ;; Tracked objects:
  8416 ;;		On entry : 0/0
  8417 ;;		On exit  : 0/0
  8418 ;;		Unchanged: 0/0
  8419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8420 ;;      Params:         2       0       0       0       0       0       0       0       0
  8421 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8422 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8423 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8424 ;;Total ram usage:        2 bytes
  8425 ;; Hardware stack levels used:    1
  8426 ;; Hardware stack levels required when called:    2
  8427 ;; This function calls:
  8428 ;;		Nothing
  8429 ;; This function is called by:
  8430 ;;		_main
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           	psect	text26
  8435  00384A                     __ptext26:
  8436                           	callstack 0
  8437  00384A                     _getContCiclos:
  8438                           	callstack 28
  8439  00384A                     
  8440                           ;fifo.c: 51:     return(cont_ciclos);
  8441  00384A  C00D  F026         	movff	_cont_ciclos,?_getContCiclos
  8442  00384E  C00E  F027         	movff	_cont_ciclos+1,?_getContCiclos+1
  8443  003852  0012               	return		;funcret
  8444  003854                     __end_of_getContCiclos:
  8445                           	callstack 0
  8446                           
  8447 ;; *************** function _getCiclos *****************
  8448 ;; Defined at:
  8449 ;;		line 41 in file "fifo.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  aux             2    2[COMRAM] int 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  2    0[COMRAM] unsigned int 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8463 ;;      Params:         2       0       0       0       0       0       0       0       0
  8464 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8466 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8467 ;;Total ram usage:        4 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    2
  8470 ;; This function calls:
  8471 ;;		Nothing
  8472 ;; This function is called by:
  8473 ;;		_main
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           	psect	text27
  8478  0036E4                     __ptext27:
  8479                           	callstack 0
  8480  0036E4                     _getCiclos:
  8481                           	callstack 28
  8482  0036E4                     
  8483                           ;fifo.c: 43:     int aux = fila[1];
  8484  0036E4  C015  F028         	movff	_fila+1,getCiclos@aux
  8485  0036E8  6A29               	clrf	(getCiclos@aux+1)^0,c
  8486  0036EA                     
  8487                           ;fifo.c: 44:     aux <<= 8;
  8488  0036EA  5028               	movf	getCiclos@aux^0,w,c
  8489  0036EC  6E29               	movwf	(getCiclos@aux+1)^0,c
  8490  0036EE  6A28               	clrf	getCiclos@aux^0,c
  8491  0036F0                     
  8492                           ;fifo.c: 45:     aux +=fila[0];
  8493  0036F0  5014               	movf	_fila^0,w,c
  8494  0036F2  2628               	addwf	getCiclos@aux^0,f,c
  8495  0036F4  0E00               	movlw	0
  8496  0036F6  2229               	addwfc	(getCiclos@aux+1)^0,f,c
  8497  0036F8                     
  8498                           ;fifo.c: 46:     return(aux);
  8499  0036F8  C028  F026         	movff	getCiclos@aux,?_getCiclos
  8500  0036FC  C029  F027         	movff	getCiclos@aux+1,?_getCiclos+1
  8501  003700  0012               	return		;funcret
  8502  003702                     __end_of_getCiclos:
  8503                           	callstack 0
  8504                           
  8505 ;; *************** function _formatar_receitas *****************
  8506 ;; Defined at:
  8507 ;;		line 100 in file "eeprom.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;		None
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  i               1    2[COMRAM] unsigned char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1    wreg      void 
  8514 ;; Registers used:
  8515 ;;		wreg, status,2, status,0, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8521 ;;      Params:         0       0       0       0       0       0       0       0       0
  8522 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8524 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8525 ;;Total ram usage:        1 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:    3
  8528 ;; This function calls:
  8529 ;;		_EEPROM_write
  8530 ;; This function is called by:
  8531 ;;		_main
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           	psect	text28
  8536  00371C                     __ptext28:
  8537                           	callstack 0
  8538  00371C                     _formatar_receitas:
  8539                           	callstack 27
  8540  00371C                     
  8541                           ;eeprom.c: 102:     for( char i = 0;i<256;i++)
  8542  00371C  0E00               	movlw	0
  8543  00371E  6E28               	movwf	formatar_receitas@i^0,c
  8544  003720                     l5589:
  8545                           
  8546                           ;eeprom.c: 103:            EEPROM_write(i,0);
  8547  003720  0E00               	movlw	0
  8548  003722  6E26               	movwf	EEPROM_write@data^0,c
  8549  003724  5028               	movf	formatar_receitas@i^0,w,c
  8550  003726  ECBF  F01A         	call	_EEPROM_write
  8551  00372A  2A28               	incf	formatar_receitas@i^0,f,c
  8552  00372C  EF90  F01B         	goto	l5589
  8553  003730  0012               	return		;funcret
  8554  003732                     __end_of_formatar_receitas:
  8555                           	callstack 0
  8556                           
  8557 ;; *************** function _fifo_tam *****************
  8558 ;; Defined at:
  8559 ;;		line 317 in file "fifo.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;		None
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;		None
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  1    wreg      unsigned char 
  8566 ;; Registers used:
  8567 ;;		wreg
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8573 ;;      Params:         0       0       0       0       0       0       0       0       0
  8574 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8576 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8577 ;;Total ram usage:        0 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:    2
  8580 ;; This function calls:
  8581 ;;		Nothing
  8582 ;; This function is called by:
  8583 ;;		_main
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           	psect	text29
  8588  003886                     __ptext29:
  8589                           	callstack 0
  8590  003886                     _fifo_tam:
  8591                           	callstack 28
  8592  003886                     
  8593                           ;fifo.c: 319:     return( 18 );
  8594  003886  0E12               	movlw	18
  8595  003888  0012               	return		;funcret
  8596  00388A                     __end_of_fifo_tam:
  8597                           	callstack 0
  8598                           
  8599 ;; *************** function _fifo_print *****************
  8600 ;; Defined at:
  8601 ;;		line 342 in file "fifo.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  comando         1   16[COMRAM] unsigned char 
  8606 ;;  atraso          1   15[COMRAM] unsigned char 
  8607 ;;  i               1   14[COMRAM] unsigned char 
  8608 ;;  indPrint        1   13[COMRAM] unsigned char 
  8609 ;;  completar       1   12[COMRAM] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0
  8620 ;;      Locals:         7       0       0       0       0       0       0       0       0
  8621 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8622 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8623 ;;Total ram usage:        9 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    4
  8626 ;; This function calls:
  8627 ;;		___awdiv
  8628 ;;		___awmod
  8629 ;;		_decodifica
  8630 ;;		_dispLCD_dataReg
  8631 ;;		_dispLCD_lincol
  8632 ;; This function is called by:
  8633 ;;		_main
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text30
  8638  001B5E                     __ptext30:
  8639                           	callstack 0
  8640  001B5E                     _fifo_print:
  8641                           	callstack 26
  8642  001B5E                     
  8643                           ;fifo.c: 344:     char completar = 0;
  8644  001B5E  0E00               	movlw	0
  8645  001B60  6E32               	movwf	fifo_print@completar^0,c
  8646                           
  8647                           ;fifo.c: 346:     char atraso = 0;
  8648  001B62  0E00               	movlw	0
  8649  001B64  6E35               	movwf	fifo_print@atraso^0,c
  8650                           
  8651                           ;fifo.c: 347:     char i = 0;
  8652  001B66  0E00               	movlw	0
  8653  001B68  6E34               	movwf	fifo_print@i^0,c
  8654  001B6A                     
  8655                           ;fifo.c: 348:     char indPrint = ind_print;
  8656  001B6A  C057  F033         	movff	_ind_print,fifo_print@indPrint
  8657  001B6E                     
  8658                           ;fifo.c: 350:     dispLCD_lincol(0, 0);
  8659  001B6E  0E00               	movlw	0
  8660  001B70  6E28               	movwf	dispLCD_lincol@col^0,c
  8661  001B72  0E00               	movlw	0
  8662  001B74  EC3B  F017         	call	_dispLCD_lincol
  8663  001B78                     l5139:
  8664                           
  8665                           ;fifo.c: 352:     {;fifo.c: 353:         if( completar )
  8666  001B78  5032               	movf	fifo_print@completar^0,w,c
  8667  001B7A  B4D8               	btfsc	status,2,c
  8668  001B7C  EFC2  F00D         	goto	u3391
  8669  001B80  EFC4  F00D         	goto	u3390
  8670  001B84                     u3391:
  8671  001B84  EFCA  F00D         	goto	l5145
  8672  001B88                     u3390:
  8673  001B88                     
  8674                           ;fifo.c: 354:         {;fifo.c: 355:             dispLCD_dataReg(' ');
  8675  001B88  0E20               	movlw	32
  8676  001B8A  ECD3  F018         	call	_dispLCD_dataReg
  8677  001B8E                     l5143:
  8678                           
  8679                           ;fifo.c: 356:             ++i;
  8680  001B8E  2A34               	incf	fifo_print@i^0,f,c
  8681                           
  8682                           ;fifo.c: 357:         }
  8683  001B90  EF18  F00F         	goto	l5259
  8684  001B94                     l5145:
  8685                           
  8686                           ;fifo.c: 359:         {;fifo.c: 360:             comando = fila[indPrint++];
  8687  001B94  0E14               	movlw	low _fila
  8688  001B96  2433               	addwf	fifo_print@indPrint^0,w,c
  8689  001B98  6ED9               	movwf	fsr2l,c
  8690  001B9A  6ADA               	clrf	fsr2h,c
  8691  001B9C  0E00               	movlw	high _fila
  8692  001B9E  22DA               	addwfc	fsr2h,f,c
  8693  001BA0  50DF               	movf	indf2,w,c
  8694  001BA2  6E36               	movwf	fifo_print@comando^0,c
  8695  001BA4  2A33               	incf	fifo_print@indPrint^0,f,c
  8696  001BA6                     
  8697                           ;fifo.c: 362:             if( comando == 0 )
  8698  001BA6  5036               	movf	fifo_print@comando^0,w,c
  8699  001BA8  A4D8               	btfss	status,2,c
  8700  001BAA  EFD9  F00D         	goto	u3401
  8701  001BAE  EFDB  F00D         	goto	u3400
  8702  001BB2                     u3401:
  8703  001BB2  EFDF  F00D         	goto	l5153
  8704  001BB6                     u3400:
  8705  001BB6                     
  8706                           ;fifo.c: 363:                 completar = 1;
  8707  001BB6  0E01               	movlw	1
  8708  001BB8  6E32               	movwf	fifo_print@completar^0,c
  8709  001BBA  EF18  F00F         	goto	l5259
  8710  001BBE                     l5153:
  8711  001BBE  0E65               	movlw	101
  8712  001BC0  6036               	cpfslt	fifo_print@comando^0,c
  8713  001BC2  EFE5  F00D         	goto	u3411
  8714  001BC6  EFE7  F00D         	goto	u3410
  8715  001BCA                     u3411:
  8716  001BCA  EF37  F00E         	goto	l5185
  8717  001BCE                     u3410:
  8718  001BCE                     
  8719                           ;fifo.c: 365:             {;fifo.c: 366:                 atraso = comando;
  8720  001BCE  C036  F035         	movff	fifo_print@comando,fifo_print@atraso
  8721  001BD2                     
  8722                           ;fifo.c: 367:                 if( atraso >= 100 )
  8723  001BD2  0E63               	movlw	99
  8724  001BD4  6435               	cpfsgt	fifo_print@atraso^0,c
  8725  001BD6  EFEF  F00D         	goto	u3421
  8726  001BDA  EFF1  F00D         	goto	u3420
  8727  001BDE                     u3421:
  8728  001BDE  EF0C  F00E         	goto	l5171
  8729  001BE2                     u3420:
  8730  001BE2                     
  8731                           ;fifo.c: 368:                 {;fifo.c: 369:                     dispLCD_dataReg('1');
  8732  001BE2  0E31               	movlw	49
  8733  001BE4  ECD3  F018         	call	_dispLCD_dataReg
  8734  001BE8                     
  8735                           ;fifo.c: 370:                     ++i;
  8736  001BE8  2A34               	incf	fifo_print@i^0,f,c
  8737  001BEA                     
  8738                           ;fifo.c: 371:                     atraso %= 100;
  8739  001BEA  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  8740  001BEE  6A27               	clrf	(___awmod@dividend+1)^0,c
  8741  001BF0  0E00               	movlw	0
  8742  001BF2  6E29               	movwf	(___awmod@divisor+1)^0,c
  8743  001BF4  0E64               	movlw	100
  8744  001BF6  6E28               	movwf	___awmod@divisor^0,c
  8745  001BF8  ECA6  F014         	call	___awmod	;wreg free
  8746  001BFC  5026               	movf	?___awmod^0,w,c
  8747  001BFE  6E35               	movwf	fifo_print@atraso^0,c
  8748  001C00                     
  8749                           ;fifo.c: 372:                     if(atraso < 10)
  8750  001C00  0E0A               	movlw	10
  8751  001C02  6035               	cpfslt	fifo_print@atraso^0,c
  8752  001C04  EF06  F00E         	goto	u3431
  8753  001C08  EF08  F00E         	goto	u3430
  8754  001C0C                     u3431:
  8755  001C0C  EF0C  F00E         	goto	l5171
  8756  001C10                     u3430:
  8757  001C10                     
  8758                           ;fifo.c: 373:                     {;fifo.c: 374:                         dispLCD_dataReg
      +                          ('0');
  8759  001C10  0E30               	movlw	48
  8760  001C12  ECD3  F018         	call	_dispLCD_dataReg
  8761  001C16                     
  8762                           ;fifo.c: 375:                         ++i;
  8763  001C16  2A34               	incf	fifo_print@i^0,f,c
  8764  001C18                     l5171:
  8765                           
  8766                           ;fifo.c: 378:                 if( atraso >= 10 )
  8767  001C18  0E09               	movlw	9
  8768  001C1A  6435               	cpfsgt	fifo_print@atraso^0,c
  8769  001C1C  EF12  F00E         	goto	u3441
  8770  001C20  EF14  F00E         	goto	u3440
  8771  001C24                     u3441:
  8772  001C24  EF2D  F00E         	goto	l5179
  8773  001C28                     u3440:
  8774  001C28                     
  8775                           ;fifo.c: 379:                 {;fifo.c: 380:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  8776  001C28  C035  F026         	movff	fifo_print@atraso,___awdiv@dividend
  8777  001C2C  6A27               	clrf	(___awdiv@dividend+1)^0,c
  8778  001C2E  0E00               	movlw	0
  8779  001C30  6E29               	movwf	(___awdiv@divisor+1)^0,c
  8780  001C32  0E0A               	movlw	10
  8781  001C34  6E28               	movwf	___awdiv@divisor^0,c
  8782  001C36  EC44  F014         	call	___awdiv	;wreg free
  8783  001C3A  5026               	movf	?___awdiv^0,w,c
  8784  001C3C  0F30               	addlw	48
  8785  001C3E  ECD3  F018         	call	_dispLCD_dataReg
  8786  001C42                     
  8787                           ;fifo.c: 381:                     ++i;
  8788  001C42  2A34               	incf	fifo_print@i^0,f,c
  8789  001C44                     
  8790                           ;fifo.c: 382:                     atraso %= 10;
  8791  001C44  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  8792  001C48  6A27               	clrf	(___awmod@dividend+1)^0,c
  8793  001C4A  0E00               	movlw	0
  8794  001C4C  6E29               	movwf	(___awmod@divisor+1)^0,c
  8795  001C4E  0E0A               	movlw	10
  8796  001C50  6E28               	movwf	___awmod@divisor^0,c
  8797  001C52  ECA6  F014         	call	___awmod	;wreg free
  8798  001C56  5026               	movf	?___awmod^0,w,c
  8799  001C58  6E35               	movwf	fifo_print@atraso^0,c
  8800  001C5A                     l5179:
  8801                           
  8802                           ;fifo.c: 385:                 dispLCD_dataReg(atraso + '0');
  8803  001C5A  5035               	movf	fifo_print@atraso^0,w,c
  8804  001C5C  0F30               	addlw	48
  8805  001C5E  ECD3  F018         	call	_dispLCD_dataReg
  8806  001C62                     
  8807                           ;fifo.c: 386:                 ++i;
  8808  001C62  2A34               	incf	fifo_print@i^0,f,c
  8809                           
  8810                           ;fifo.c: 388:                 dispLCD_dataReg('%');
  8811  001C64  0E25               	movlw	37
  8812  001C66  ECD3  F018         	call	_dispLCD_dataReg
  8813  001C6A  EFC7  F00D         	goto	l5143
  8814  001C6E                     l5185:
  8815  001C6E  0E64               	movlw	100
  8816  001C70  6436               	cpfsgt	fifo_print@comando^0,c
  8817  001C72  EF3D  F00E         	goto	u3451
  8818  001C76  EF3F  F00E         	goto	u3450
  8819  001C7A                     u3451:
  8820  001C7A  EF9D  F00E         	goto	l5221
  8821  001C7E                     u3450:
  8822  001C7E  0EDD               	movlw	221
  8823  001C80  6036               	cpfslt	fifo_print@comando^0,c
  8824  001C82  EF45  F00E         	goto	u3461
  8825  001C86  EF47  F00E         	goto	u3460
  8826  001C8A                     u3461:
  8827  001C8A  EF9D  F00E         	goto	l5221
  8828  001C8E                     u3460:
  8829  001C8E                     
  8830                           ;fifo.c: 393:             {;fifo.c: 394:                 decodifica(&comando);
  8831  001C8E  0E36               	movlw	low fifo_print@comando
  8832  001C90  6E26               	movwf	decodifica@d^0,c
  8833  001C92  0E00               	movlw	high fifo_print@comando
  8834  001C94  6E27               	movwf	(decodifica@d+1)^0,c
  8835  001C96  EC4D  F011         	call	_decodifica	;wreg free
  8836  001C9A                     
  8837                           ;fifo.c: 395:                 atraso = comando;
  8838  001C9A  C036  F035         	movff	fifo_print@comando,fifo_print@atraso
  8839  001C9E                     
  8840                           ;fifo.c: 397:                 if( atraso >= 100 )
  8841  001C9E  0E63               	movlw	99
  8842  001CA0  6435               	cpfsgt	fifo_print@atraso^0,c
  8843  001CA2  EF55  F00E         	goto	u3471
  8844  001CA6  EF57  F00E         	goto	u3470
  8845  001CAA                     u3471:
  8846  001CAA  EF72  F00E         	goto	l5207
  8847  001CAE                     u3470:
  8848  001CAE                     
  8849                           ;fifo.c: 398:                 {;fifo.c: 399:                     dispLCD_dataReg('1');
  8850  001CAE  0E31               	movlw	49
  8851  001CB0  ECD3  F018         	call	_dispLCD_dataReg
  8852  001CB4                     
  8853                           ;fifo.c: 400:                     ++i;
  8854  001CB4  2A34               	incf	fifo_print@i^0,f,c
  8855  001CB6                     
  8856                           ;fifo.c: 401:                     atraso %= 100;
  8857  001CB6  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  8858  001CBA  6A27               	clrf	(___awmod@dividend+1)^0,c
  8859  001CBC  0E00               	movlw	0
  8860  001CBE  6E29               	movwf	(___awmod@divisor+1)^0,c
  8861  001CC0  0E64               	movlw	100
  8862  001CC2  6E28               	movwf	___awmod@divisor^0,c
  8863  001CC4  ECA6  F014         	call	___awmod	;wreg free
  8864  001CC8  5026               	movf	?___awmod^0,w,c
  8865  001CCA  6E35               	movwf	fifo_print@atraso^0,c
  8866  001CCC                     
  8867                           ;fifo.c: 402:                     if(atraso < 10)
  8868  001CCC  0E0A               	movlw	10
  8869  001CCE  6035               	cpfslt	fifo_print@atraso^0,c
  8870  001CD0  EF6C  F00E         	goto	u3481
  8871  001CD4  EF6E  F00E         	goto	u3480
  8872  001CD8                     u3481:
  8873  001CD8  EF72  F00E         	goto	l5207
  8874  001CDC                     u3480:
  8875  001CDC                     
  8876                           ;fifo.c: 403:                     {;fifo.c: 404:                         dispLCD_dataReg
      +                          ('0');
  8877  001CDC  0E30               	movlw	48
  8878  001CDE  ECD3  F018         	call	_dispLCD_dataReg
  8879  001CE2                     
  8880                           ;fifo.c: 405:                         ++i;
  8881  001CE2  2A34               	incf	fifo_print@i^0,f,c
  8882  001CE4                     l5207:
  8883                           
  8884                           ;fifo.c: 408:                 if( atraso >= 10 )
  8885  001CE4  0E09               	movlw	9
  8886  001CE6  6435               	cpfsgt	fifo_print@atraso^0,c
  8887  001CE8  EF78  F00E         	goto	u3491
  8888  001CEC  EF7A  F00E         	goto	u3490
  8889  001CF0                     u3491:
  8890  001CF0  EF93  F00E         	goto	l5215
  8891  001CF4                     u3490:
  8892  001CF4                     
  8893                           ;fifo.c: 409:                 {;fifo.c: 410:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  8894  001CF4  C035  F026         	movff	fifo_print@atraso,___awdiv@dividend
  8895  001CF8  6A27               	clrf	(___awdiv@dividend+1)^0,c
  8896  001CFA  0E00               	movlw	0
  8897  001CFC  6E29               	movwf	(___awdiv@divisor+1)^0,c
  8898  001CFE  0E0A               	movlw	10
  8899  001D00  6E28               	movwf	___awdiv@divisor^0,c
  8900  001D02  EC44  F014         	call	___awdiv	;wreg free
  8901  001D06  5026               	movf	?___awdiv^0,w,c
  8902  001D08  0F30               	addlw	48
  8903  001D0A  ECD3  F018         	call	_dispLCD_dataReg
  8904  001D0E                     
  8905                           ;fifo.c: 411:                     ++i;
  8906  001D0E  2A34               	incf	fifo_print@i^0,f,c
  8907  001D10                     
  8908                           ;fifo.c: 412:                     atraso %= 10;
  8909  001D10  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  8910  001D14  6A27               	clrf	(___awmod@dividend+1)^0,c
  8911  001D16  0E00               	movlw	0
  8912  001D18  6E29               	movwf	(___awmod@divisor+1)^0,c
  8913  001D1A  0E0A               	movlw	10
  8914  001D1C  6E28               	movwf	___awmod@divisor^0,c
  8915  001D1E  ECA6  F014         	call	___awmod	;wreg free
  8916  001D22  5026               	movf	?___awmod^0,w,c
  8917  001D24  6E35               	movwf	fifo_print@atraso^0,c
  8918  001D26                     l5215:
  8919                           
  8920                           ;fifo.c: 415:                 dispLCD_dataReg(atraso + '0');
  8921  001D26  5035               	movf	fifo_print@atraso^0,w,c
  8922  001D28  0F30               	addlw	48
  8923  001D2A  ECD3  F018         	call	_dispLCD_dataReg
  8924  001D2E                     
  8925                           ;fifo.c: 416:                 ++i;
  8926  001D2E  2A34               	incf	fifo_print@i^0,f,c
  8927                           
  8928                           ;fifo.c: 418:                 dispLCD_dataReg('s');
  8929  001D30  0E73               	movlw	115
  8930  001D32  ECD3  F018         	call	_dispLCD_dataReg
  8931  001D36  EFC7  F00D         	goto	l5143
  8932  001D3A                     l5221:
  8933  001D3A  0EDC               	movlw	220
  8934  001D3C  6436               	cpfsgt	fifo_print@comando^0,c
  8935  001D3E  EFA3  F00E         	goto	u3501
  8936  001D42  EFA5  F00E         	goto	u3500
  8937  001D46                     u3501:
  8938  001D46  EFFD  F00E         	goto	l5245
  8939  001D4A                     u3500:
  8940  001D4A  0EFE               	movlw	254
  8941  001D4C  6036               	cpfslt	fifo_print@comando^0,c
  8942  001D4E  EFAB  F00E         	goto	u3511
  8943  001D52  EFAD  F00E         	goto	u3510
  8944  001D56                     u3511:
  8945  001D56  EFFD  F00E         	goto	l5245
  8946  001D5A                     u3510:
  8947  001D5A                     
  8948                           ;fifo.c: 422:             {;fifo.c: 423:                 decodifica(&comando);
  8949  001D5A  0E36               	movlw	low fifo_print@comando
  8950  001D5C  6E26               	movwf	decodifica@d^0,c
  8951  001D5E  0E00               	movlw	high fifo_print@comando
  8952  001D60  6E27               	movwf	(decodifica@d+1)^0,c
  8953  001D62  EC4D  F011         	call	_decodifica	;wreg free
  8954                           
  8955                           ;fifo.c: 424:                 switch( comando )
  8956  001D66  EFD0  F00E         	goto	l5243
  8957  001D6A                     l779:
  8958  001D6A                     l5227:
  8959                           
  8960                           ;fifo.c: 434:                                 dispLCD_dataReg( comando & ~0x20 );
  8961  001D6A  5036               	movf	fifo_print@comando^0,w,c
  8962  001D6C  0BDF               	andlw	223
  8963  001D6E  ECD3  F018         	call	_dispLCD_dataReg
  8964  001D72                     
  8965                           ;fifo.c: 435:                                 ++i;
  8966  001D72  2A34               	incf	fifo_print@i^0,f,c
  8967  001D74                     
  8968                           ;fifo.c: 436:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
  8969  001D74  BA36               	btfsc	fifo_print@comando^0,5,c
  8970  001D76  EFBF  F00E         	goto	u3521
  8971  001D7A  EFC1  F00E         	goto	u3520
  8972  001D7E                     u3521:
  8973  001D7E  EFC7  F00E         	goto	l5235
  8974  001D82                     u3520:
  8975  001D82  0E00               	movlw	0
  8976  001D84  6E31               	movwf	(_fifo_print$944+1)^0,c
  8977  001D86  0E2B               	movlw	43
  8978  001D88  6E30               	movwf	_fifo_print$944^0,c
  8979  001D8A  EFCB  F00E         	goto	l5237
  8980  001D8E                     l5235:
  8981  001D8E  0E00               	movlw	0
  8982  001D90  6E31               	movwf	(_fifo_print$944+1)^0,c
  8983  001D92  0E2D               	movlw	45
  8984  001D94  6E30               	movwf	_fifo_print$944^0,c
  8985  001D96                     l5237:
  8986  001D96  5030               	movf	_fifo_print$944^0,w,c
  8987  001D98  ECD3  F018         	call	_dispLCD_dataReg
  8988  001D9C  EFC7  F00D         	goto	l5143
  8989  001DA0                     l5243:
  8990  001DA0  5036               	movf	fifo_print@comando^0,w,c
  8991  001DA2  6E2E               	movwf	??_fifo_print^0,c
  8992  001DA4  6A2F               	clrf	(??_fifo_print+1)^0,c
  8993                           
  8994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8995                           ; Switch size 1, requested type "simple"
  8996                           ; Number of cases is 1, Range of values is 0 to 0
  8997                           ; switch strategies available:
  8998                           ; Name         Instructions Cycles
  8999                           ; simple_byte            4     3 (average)
  9000                           ;	Chosen strategy is simple_byte
  9001  001DA6  502F               	movf	(??_fifo_print+1)^0,w,c
  9002  001DA8  0A00               	xorlw	0	; case 0
  9003  001DAA  B4D8               	btfsc	status,2,c
  9004  001DAC  EFDA  F00E         	goto	l7139
  9005  001DB0  EF18  F00F         	goto	l768
  9006  001DB4                     l7139:
  9007                           
  9008                           ; Switch size 1, requested type "simple"
  9009                           ; Number of cases is 8, Range of values is 65 to 100
  9010                           ; switch strategies available:
  9011                           ; Name         Instructions Cycles
  9012                           ; simple_byte           25    13 (average)
  9013                           ;	Chosen strategy is simple_byte
  9014  001DB4  502E               	movf	??_fifo_print^0,w,c
  9015  001DB6  0A41               	xorlw	65	; case 65
  9016  001DB8  B4D8               	btfsc	status,2,c
  9017  001DBA  EFB5  F00E         	goto	l779
  9018  001DBE  0A03               	xorlw	3	; case 66
  9019  001DC0  B4D8               	btfsc	status,2,c
  9020  001DC2  EFB5  F00E         	goto	l5227
  9021  001DC6  0A01               	xorlw	1	; case 67
  9022  001DC8  B4D8               	btfsc	status,2,c
  9023  001DCA  EFB5  F00E         	goto	l5227
  9024  001DCE  0A07               	xorlw	7	; case 68
  9025  001DD0  B4D8               	btfsc	status,2,c
  9026  001DD2  EFB5  F00E         	goto	l5227
  9027  001DD6  0A25               	xorlw	37	; case 97
  9028  001DD8  B4D8               	btfsc	status,2,c
  9029  001DDA  EFB5  F00E         	goto	l5227
  9030  001DDE  0A03               	xorlw	3	; case 98
  9031  001DE0  B4D8               	btfsc	status,2,c
  9032  001DE2  EFB5  F00E         	goto	l5227
  9033  001DE6  0A01               	xorlw	1	; case 99
  9034  001DE8  B4D8               	btfsc	status,2,c
  9035  001DEA  EFB5  F00E         	goto	l5227
  9036  001DEE  0A07               	xorlw	7	; case 100
  9037  001DF0  B4D8               	btfsc	status,2,c
  9038  001DF2  EFB5  F00E         	goto	l5227
  9039  001DF6  EF18  F00F         	goto	l768
  9040  001DFA                     l5245:
  9041                           
  9042                           ;fifo.c: 442:             {;fifo.c: 443:                 if(comando == 0xFE)
  9043  001DFA  0EFE               	movlw	254
  9044  001DFC  1836               	xorwf	fifo_print@comando^0,w,c
  9045  001DFE  A4D8               	btfss	status,2,c
  9046  001E00  EF04  F00F         	goto	u3531
  9047  001E04  EF06  F00F         	goto	u3530
  9048  001E08                     u3531:
  9049  001E08  EF18  F00F         	goto	l768
  9050  001E0C                     u3530:
  9051  001E0C                     
  9052                           ;fifo.c: 444:                 {;fifo.c: 445:                     decodifica(&comando);
  9053  001E0C  0E36               	movlw	low fifo_print@comando
  9054  001E0E  6E26               	movwf	decodifica@d^0,c
  9055  001E10  0E00               	movlw	high fifo_print@comando
  9056  001E12  6E27               	movwf	(decodifica@d+1)^0,c
  9057  001E14  EC4D  F011         	call	_decodifica	;wreg free
  9058  001E18                     
  9059                           ;fifo.c: 446:                     atraso = comando;
  9060  001E18  C036  F035         	movff	fifo_print@comando,fifo_print@atraso
  9061  001E1C                     
  9062                           ;fifo.c: 448:                     dispLCD_dataReg(atraso + '0');
  9063  001E1C  5035               	movf	fifo_print@atraso^0,w,c
  9064  001E1E  0F30               	addlw	48
  9065  001E20  ECD3  F018         	call	_dispLCD_dataReg
  9066  001E24                     
  9067                           ;fifo.c: 449:                     ++i;
  9068  001E24  2A34               	incf	fifo_print@i^0,f,c
  9069  001E26                     
  9070                           ;fifo.c: 451:                     dispLCD_dataReg('%');
  9071  001E26  0E25               	movlw	37
  9072  001E28  ECD3  F018         	call	_dispLCD_dataReg
  9073  001E2C  EFC7  F00D         	goto	l5143
  9074  001E30                     l768:
  9075  001E30                     l5259:
  9076                           
  9077                           ;fifo.c: 456:     }
  9078  001E30  0E14               	movlw	20
  9079  001E32  6434               	cpfsgt	fifo_print@i^0,c
  9080  001E34  EF1E  F00F         	goto	u3541
  9081  001E38  EF20  F00F         	goto	u3540
  9082  001E3C                     u3541:
  9083  001E3C  EFBC  F00D         	goto	l5139
  9084  001E40                     u3540:
  9085  001E40  0012               	return		;funcret
  9086  001E42                     __end_of_fifo_print:
  9087                           	callstack 0
  9088                           
  9089 ;; *************** function ___awmod *****************
  9090 ;; Defined at:
  9091 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awmod.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  dividend        2    0[COMRAM] int 
  9094 ;;  divisor         2    2[COMRAM] int 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  sign            1    5[COMRAM] unsigned char 
  9097 ;;  counter         1    4[COMRAM] unsigned char 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  2    0[COMRAM] int 
  9100 ;; Registers used:
  9101 ;;		wreg, status,2, status,0
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9107 ;;      Params:         4       0       0       0       0       0       0       0       0
  9108 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9110 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9111 ;;Total ram usage:        6 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    2
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_main
  9118 ;;		_dispLCD_num
  9119 ;;		_fifo_print
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	text31
  9124  00294C                     __ptext31:
  9125                           	callstack 0
  9126  00294C                     ___awmod:
  9127                           	callstack 26
  9128  00294C  0E00               	movlw	0
  9129  00294E  6E2B               	movwf	___awmod@sign^0,c
  9130  002950  BE27               	btfsc	(___awmod@dividend+1)^0,7,c
  9131  002952  EFAF  F014         	goto	u2730
  9132  002956  EFAD  F014         	goto	u2731
  9133  00295A                     u2731:
  9134  00295A  EFB5  F014         	goto	l4605
  9135  00295E                     u2730:
  9136  00295E  6C26               	negf	___awmod@dividend^0,c
  9137  002960  1E27               	comf	(___awmod@dividend+1)^0,f,c
  9138  002962  B0D8               	btfsc	status,0,c
  9139  002964  2A27               	incf	(___awmod@dividend+1)^0,f,c
  9140  002966  0E01               	movlw	1
  9141  002968  6E2B               	movwf	___awmod@sign^0,c
  9142  00296A                     l4605:
  9143  00296A  BE29               	btfsc	(___awmod@divisor+1)^0,7,c
  9144  00296C  EFBC  F014         	goto	u2740
  9145  002970  EFBA  F014         	goto	u2741
  9146  002974                     u2741:
  9147  002974  EFC0  F014         	goto	l4609
  9148  002978                     u2740:
  9149  002978  6C28               	negf	___awmod@divisor^0,c
  9150  00297A  1E29               	comf	(___awmod@divisor+1)^0,f,c
  9151  00297C  B0D8               	btfsc	status,0,c
  9152  00297E  2A29               	incf	(___awmod@divisor+1)^0,f,c
  9153  002980                     l4609:
  9154  002980  5028               	movf	___awmod@divisor^0,w,c
  9155  002982  1029               	iorwf	(___awmod@divisor+1)^0,w,c
  9156  002984  B4D8               	btfsc	status,2,c
  9157  002986  EFC7  F014         	goto	u2751
  9158  00298A  EFC9  F014         	goto	u2750
  9159  00298E                     u2751:
  9160  00298E  EFED  F014         	goto	l4625
  9161  002992                     u2750:
  9162  002992  0E01               	movlw	1
  9163  002994  6E2A               	movwf	___awmod@counter^0,c
  9164  002996  EFD1  F014         	goto	l4615
  9165  00299A                     l4613:
  9166  00299A  90D8               	bcf	status,0,c
  9167  00299C  3628               	rlcf	___awmod@divisor^0,f,c
  9168  00299E  3629               	rlcf	(___awmod@divisor+1)^0,f,c
  9169  0029A0  2A2A               	incf	___awmod@counter^0,f,c
  9170  0029A2                     l4615:
  9171  0029A2  AE29               	btfss	(___awmod@divisor+1)^0,7,c
  9172  0029A4  EFD6  F014         	goto	u2761
  9173  0029A8  EFD8  F014         	goto	u2760
  9174  0029AC                     u2761:
  9175  0029AC  EFCD  F014         	goto	l4613
  9176  0029B0                     u2760:
  9177  0029B0                     l4617:
  9178  0029B0  5028               	movf	___awmod@divisor^0,w,c
  9179  0029B2  5C26               	subwf	___awmod@dividend^0,w,c
  9180  0029B4  5029               	movf	(___awmod@divisor+1)^0,w,c
  9181  0029B6  5827               	subwfb	(___awmod@dividend+1)^0,w,c
  9182  0029B8  A0D8               	btfss	status,0,c
  9183  0029BA  EFE1  F014         	goto	u2771
  9184  0029BE  EFE3  F014         	goto	u2770
  9185  0029C2                     u2771:
  9186  0029C2  EFE7  F014         	goto	l4621
  9187  0029C6                     u2770:
  9188  0029C6  5028               	movf	___awmod@divisor^0,w,c
  9189  0029C8  5E26               	subwf	___awmod@dividend^0,f,c
  9190  0029CA  5029               	movf	(___awmod@divisor+1)^0,w,c
  9191  0029CC  5A27               	subwfb	(___awmod@dividend+1)^0,f,c
  9192  0029CE                     l4621:
  9193  0029CE  90D8               	bcf	status,0,c
  9194  0029D0  3229               	rrcf	(___awmod@divisor+1)^0,f,c
  9195  0029D2  3228               	rrcf	___awmod@divisor^0,f,c
  9196  0029D4  2E2A               	decfsz	___awmod@counter^0,f,c
  9197  0029D6  EFD8  F014         	goto	l4617
  9198  0029DA                     l4625:
  9199  0029DA  502B               	movf	___awmod@sign^0,w,c
  9200  0029DC  B4D8               	btfsc	status,2,c
  9201  0029DE  EFF3  F014         	goto	u2781
  9202  0029E2  EFF5  F014         	goto	u2780
  9203  0029E6                     u2781:
  9204  0029E6  EFF9  F014         	goto	l4629
  9205  0029EA                     u2780:
  9206  0029EA  6C26               	negf	___awmod@dividend^0,c
  9207  0029EC  1E27               	comf	(___awmod@dividend+1)^0,f,c
  9208  0029EE  B0D8               	btfsc	status,0,c
  9209  0029F0  2A27               	incf	(___awmod@dividend+1)^0,f,c
  9210  0029F2                     l4629:
  9211  0029F2  C026  F026         	movff	___awmod@dividend,?___awmod
  9212  0029F6  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  9213  0029FA  0012               	return		;funcret
  9214  0029FC                     __end_of___awmod:
  9215                           	callstack 0
  9216                           
  9217 ;; *************** function _fifo_indicePrint_inc *****************
  9218 ;; Defined at:
  9219 ;;		line 322 in file "fifo.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;		None
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;		None
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      void 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9233 ;;      Params:         0       0       0       0       0       0       0       0       0
  9234 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9235 ;;      Temps:          7       0       0       0       0       0       0       0       0
  9236 ;;      Totals:         7       0       0       0       0       0       0       0       0
  9237 ;;Total ram usage:        7 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    2
  9240 ;; This function calls:
  9241 ;;		Nothing
  9242 ;; This function is called by:
  9243 ;;		_main
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text32
  9248  002F38                     __ptext32:
  9249                           	callstack 0
  9250  002F38                     _fifo_indicePrint_inc:
  9251                           	callstack 28
  9252  002F38                     
  9253                           ;fifo.c: 324:     if( ind_print < 18 -1 )
  9254  002F38  0E11               	movlw	17
  9255  002F3A  6057               	cpfslt	_ind_print^0,c
  9256  002F3C  EFA2  F017         	goto	u3591
  9257  002F40  EFA4  F017         	goto	u3590
  9258  002F44                     u3591:
  9259  002F44  EFC8  F017         	goto	l5307
  9260  002F48                     u3590:
  9261  002F48                     
  9262                           ;fifo.c: 325:     {;fifo.c: 326:         if( ind_print < ind_fila-1 )
  9263  002F48  0EFF               	movlw	255
  9264  002F4A  6E26               	movwf	??_fifo_indicePrint_inc^0,c
  9265  002F4C  0EFF               	movlw	255
  9266  002F4E  6E27               	movwf	(??_fifo_indicePrint_inc+1)^0,c
  9267  002F50  5058               	movf	_ind_fila^0,w,c
  9268  002F52  6E28               	movwf	(??_fifo_indicePrint_inc+2)^0,c
  9269  002F54  6A29               	clrf	(??_fifo_indicePrint_inc+3)^0,c
  9270  002F56  5026               	movf	??_fifo_indicePrint_inc^0,w,c
  9271  002F58  2628               	addwf	(??_fifo_indicePrint_inc+2)^0,f,c
  9272  002F5A  5027               	movf	(??_fifo_indicePrint_inc+1)^0,w,c
  9273  002F5C  2229               	addwfc	(??_fifo_indicePrint_inc+3)^0,f,c
  9274  002F5E  5057               	movf	_ind_print^0,w,c
  9275  002F60  6E2A               	movwf	(??_fifo_indicePrint_inc+4)^0,c
  9276  002F62  6A2B               	clrf	(??_fifo_indicePrint_inc+5)^0,c
  9277  002F64  5028               	movf	(??_fifo_indicePrint_inc+2)^0,w,c
  9278  002F66  5C2A               	subwf	(??_fifo_indicePrint_inc+4)^0,w,c
  9279  002F68  502B               	movf	(??_fifo_indicePrint_inc+5)^0,w,c
  9280  002F6A  0A80               	xorlw	128
  9281  002F6C  6E2C               	movwf	(??_fifo_indicePrint_inc+6)^0,c
  9282  002F6E  5029               	movf	(??_fifo_indicePrint_inc+3)^0,w,c
  9283  002F70  0A80               	xorlw	128
  9284  002F72  582C               	subwfb	(??_fifo_indicePrint_inc+6)^0,w,c
  9285  002F74  B0D8               	btfsc	status,0,c
  9286  002F76  EFBF  F017         	goto	u3601
  9287  002F7A  EFC1  F017         	goto	u3600
  9288  002F7E                     u3601:
  9289  002F7E  EFC4  F017         	goto	l5305
  9290  002F82                     u3600:
  9291  002F82                     
  9292                           ;fifo.c: 327:             ind_print++;
  9293  002F82  2A57               	incf	_ind_print^0,f,c
  9294  002F84  EFCA  F017         	goto	l752
  9295  002F88                     l5305:
  9296                           
  9297                           ;fifo.c: 329:             ind_print = ind_fila-1;
  9298  002F88  0458               	decf	_ind_fila^0,w,c
  9299  002F8A  6E57               	movwf	_ind_print^0,c
  9300  002F8C  EFCA  F017         	goto	l752
  9301  002F90                     l5307:
  9302                           
  9303                           ;fifo.c: 332:         ind_print = 18 -1;
  9304  002F90  0E11               	movlw	17
  9305  002F92  6E57               	movwf	_ind_print^0,c
  9306  002F94                     l752:
  9307  002F94  0012               	return		;funcret
  9308  002F96                     __end_of_fifo_indicePrint_inc:
  9309                           	callstack 0
  9310                           
  9311 ;; *************** function _fifo_indicePrint_dec *****************
  9312 ;; Defined at:
  9313 ;;		line 334 in file "fifo.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      void 
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9327 ;;      Params:         0       0       0       0       0       0       0       0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9330 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9331 ;;Total ram usage:        0 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    2
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_main
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text33
  9342  003788                     __ptext33:
  9343                           	callstack 0
  9344  003788                     _fifo_indicePrint_dec:
  9345                           	callstack 28
  9346  003788                     
  9347                           ;fifo.c: 336:     if( ind_print > 2 )
  9348  003788  0E02               	movlw	2
  9349  00378A  6457               	cpfsgt	_ind_print^0,c
  9350  00378C  EFCA  F01B         	goto	u3611
  9351  003790  EFCC  F01B         	goto	u3610
  9352  003794                     u3611:
  9353  003794  EFCD  F01B         	goto	l756
  9354  003798                     u3610:
  9355  003798                     
  9356                           ;fifo.c: 337:         ind_print--;
  9357  003798  0657               	decf	_ind_print^0,f,c
  9358  00379A                     l756:
  9359  00379A  0012               	return		;funcret
  9360  00379C                     __end_of_fifo_indicePrint_dec:
  9361                           	callstack 0
  9362                           
  9363 ;; *************** function _fifo_indice *****************
  9364 ;; Defined at:
  9365 ;;		line 307 in file "fifo.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;		None
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      unsigned char 
  9372 ;; Registers used:
  9373 ;;		wreg, status,2
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0
  9380 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9382 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9383 ;;Total ram usage:        0 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    2
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_main
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           	psect	text34
  9394  00388A                     __ptext34:
  9395                           	callstack 0
  9396  00388A                     _fifo_indice:
  9397                           	callstack 28
  9398  00388A                     
  9399                           ;fifo.c: 309:     return ( ind_fila );
  9400  00388A  5058               	movf	_ind_fila^0,w,c
  9401  00388C  0012               	return		;funcret
  9402  00388E                     __end_of_fifo_indice:
  9403                           	callstack 0
  9404                           
  9405 ;; *************** function _fifo_disponivel *****************
  9406 ;; Defined at:
  9407 ;;		line 312 in file "fifo.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  1    wreg      unsigned char 
  9414 ;; Registers used:
  9415 ;;		wreg, status,2, status,0
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    2
  9428 ;; This function calls:
  9429 ;;		Nothing
  9430 ;; This function is called by:
  9431 ;;		_main
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           	psect	text35
  9436  003732                     __ptext35:
  9437                           	callstack 0
  9438  003732                     _fifo_disponivel:
  9439                           	callstack 28
  9440  003732                     
  9441                           ;fifo.c: 314:     return( ind_fila < 18 );
  9442  003732  0E11               	movlw	17
  9443  003734  6458               	cpfsgt	_ind_fila^0,c
  9444  003736  EF9F  F01B         	goto	u3571
  9445  00373A  EFA2  F01B         	goto	u3570
  9446  00373E                     u3571:
  9447  00373E  0E01               	movlw	1
  9448  003740  EFA3  F01B         	goto	u3580
  9449  003744                     u3570:
  9450  003744  0E00               	movlw	0
  9451  003746                     u3580:
  9452  003746  0012               	return		;funcret
  9453  003748                     __end_of_fifo_disponivel:
  9454                           	callstack 0
  9455                           
  9456 ;; *************** function _fifo_delete *****************
  9457 ;; Defined at:
  9458 ;;		line 183 in file "fifo.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;		None
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      void 
  9465 ;; Registers used:
  9466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0
  9473 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9474 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9475 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9476 ;;Total ram usage:        2 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    5
  9479 ;; This function calls:
  9480 ;;		_alt_atuador
  9481 ;;		_codifica
  9482 ;;		_decodifica
  9483 ;;		_fifo_alinharPrint
  9484 ;; This function is called by:
  9485 ;;		_main
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text36
  9490  002C82                     __ptext36:
  9491                           	callstack 0
  9492  002C82                     _fifo_delete:
  9493                           	callstack 25
  9494  002C82                     
  9495                           ;fifo.c: 185:     if(ind_fila)
  9496  002C82  5058               	movf	_ind_fila^0,w,c
  9497  002C84  B4D8               	btfsc	status,2,c
  9498  002C86  EF47  F016         	goto	u3621
  9499  002C8A  EF49  F016         	goto	u3620
  9500  002C8E                     u3621:
  9501  002C8E  EF8A  F016         	goto	l5329
  9502  002C92                     u3620:
  9503  002C92                     
  9504                           ;fifo.c: 186:     {;fifo.c: 187:         if(ind_fila > 2)
  9505  002C92  0E02               	movlw	2
  9506  002C94  6458               	cpfsgt	_ind_fila^0,c
  9507  002C96  EF4F  F016         	goto	u3631
  9508  002C9A  EF51  F016         	goto	u3630
  9509  002C9E                     u3631:
  9510  002C9E  EF52  F016         	goto	l5323
  9511  002CA2                     u3630:
  9512  002CA2                     
  9513                           ;fifo.c: 188:             ind_fila--;
  9514  002CA2  0658               	decf	_ind_fila^0,f,c
  9515  002CA4                     l5323:
  9516                           
  9517                           ;fifo.c: 189:         if(fila[ind_fila] > 0xDC)
  9518  002CA4  0E14               	movlw	low _fila
  9519  002CA6  2458               	addwf	_ind_fila^0,w,c
  9520  002CA8  6ED9               	movwf	fsr2l,c
  9521  002CAA  6ADA               	clrf	fsr2h,c
  9522  002CAC  0E00               	movlw	high _fila
  9523  002CAE  22DA               	addwfc	fsr2h,f,c
  9524  002CB0  0EDC               	movlw	220
  9525  002CB2  64DF               	cpfsgt	indf2,c
  9526  002CB4  EF5E  F016         	goto	u3641
  9527  002CB8  EF60  F016         	goto	u3640
  9528  002CBC                     u3641:
  9529  002CBC  EF82  F016         	goto	l5327
  9530  002CC0                     u3640:
  9531  002CC0                     
  9532                           ;fifo.c: 190:         {;fifo.c: 191:             decodifica(&fila[ind_fila]);
  9533  002CC0  0E14               	movlw	low _fila
  9534  002CC2  2458               	addwf	_ind_fila^0,w,c
  9535  002CC4  6E26               	movwf	decodifica@d^0,c
  9536  002CC6  6A27               	clrf	(decodifica@d+1)^0,c
  9537  002CC8  0E00               	movlw	high _fila
  9538  002CCA  2227               	addwfc	(decodifica@d+1)^0,f,c
  9539  002CCC  EC4D  F011         	call	_decodifica	;wreg free
  9540                           
  9541                           ;fifo.c: 192:             alt_atuador(fila[ind_fila] & ~0x20);
  9542  002CD0  0E14               	movlw	low _fila
  9543  002CD2  2458               	addwf	_ind_fila^0,w,c
  9544  002CD4  6ED9               	movwf	fsr2l,c
  9545  002CD6  6ADA               	clrf	fsr2h,c
  9546  002CD8  0E00               	movlw	high _fila
  9547  002CDA  22DA               	addwfc	fsr2h,f,c
  9548  002CDC  50DF               	movf	indf2,w,c
  9549  002CDE  0BDF               	andlw	223
  9550  002CE0  ECF4  F015         	call	_alt_atuador
  9551                           
  9552                           ;fifo.c: 193:             codifica('a',fila[ind_fila]);
  9553  002CE4  0E14               	movlw	low _fila
  9554  002CE6  2458               	addwf	_ind_fila^0,w,c
  9555  002CE8  6ED9               	movwf	fsr2l,c
  9556  002CEA  6ADA               	clrf	fsr2h,c
  9557  002CEC  0E00               	movlw	high _fila
  9558  002CEE  22DA               	addwfc	fsr2h,f,c
  9559  002CF0  50DF               	movf	indf2,w,c
  9560  002CF2  6E35               	movwf	??_fifo_delete^0,c
  9561  002CF4  6A36               	clrf	(??_fifo_delete+1)^0,c
  9562  002CF6  C035  F026         	movff	??_fifo_delete,codifica@dado
  9563  002CFA  C036  F027         	movff	??_fifo_delete+1,codifica@dado+1
  9564  002CFE  0E61               	movlw	97
  9565  002D00  ECA3  F010         	call	_codifica
  9566  002D04                     l5327:
  9567                           
  9568                           ;fifo.c: 195:         fila[ind_fila] = 0;
  9569  002D04  0E14               	movlw	low _fila
  9570  002D06  2458               	addwf	_ind_fila^0,w,c
  9571  002D08  6ED9               	movwf	fsr2l,c
  9572  002D0A  6ADA               	clrf	fsr2h,c
  9573  002D0C  0E00               	movlw	high _fila
  9574  002D0E  22DA               	addwfc	fsr2h,f,c
  9575  002D10  0E00               	movlw	0
  9576  002D12  6EDF               	movwf	indf2,c
  9577  002D14                     l5329:
  9578                           
  9579                           ;fifo.c: 197:     fifo_alinharPrint();
  9580  002D14  EC5F  F013         	call	_fifo_alinharPrint	;wreg free
  9581  002D18  0012               	return		;funcret
  9582  002D1A                     __end_of_fifo_delete:
  9583                           	callstack 0
  9584                           
  9585 ;; *************** function _decodifica *****************
  9586 ;; Defined at:
  9587 ;;		line 228 in file "fifo.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  d               2    0[COMRAM] PTR unsigned char 
  9590 ;;		 -> printExec@passo(1), fifo_print@comando(1), fila(18), main@vetor_aux(16), 
  9591 ;;		 -> main@auxPasso(1), 
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  1    wreg      void 
  9596 ;; Registers used:
  9597 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9603 ;;      Params:         2       0       0       0       0       0       0       0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9605 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9606 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9607 ;;Total ram usage:        4 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    2
  9610 ;; This function calls:
  9611 ;;		Nothing
  9612 ;; This function is called by:
  9613 ;;		_main
  9614 ;;		_fifo_delete
  9615 ;;		_fifo_print
  9616 ;;		_printExec
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           	psect	text37
  9621  00229A                     __ptext37:
  9622                           	callstack 0
  9623  00229A                     _decodifica:
  9624                           	callstack 27
  9625  00229A                     
  9626                           ;fifo.c: 228: void decodifica( unsigned char *d );fifo.c: 229: {;fifo.c: 230:     if( *d
      +                           <= 100 )
  9627  00229A  C026  FFD9         	movff	decodifica@d,fsr2l
  9628  00229E  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9629  0022A2  0E65               	movlw	101
  9630  0022A4  60DF               	cpfslt	indf2,c
  9631  0022A6  EF57  F011         	goto	u2791
  9632  0022AA  EF59  F011         	goto	u2790
  9633  0022AE                     u2791:
  9634  0022AE  EF5B  F011         	goto	l4637
  9635  0022B2                     u2790:
  9636  0022B2  EFEC  F011         	goto	l719
  9637  0022B6                     l4637:
  9638  0022B6  C026  FFD9         	movff	decodifica@d,fsr2l
  9639  0022BA  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9640  0022BE  0EDD               	movlw	221
  9641  0022C0  60DF               	cpfslt	indf2,c
  9642  0022C2  EF65  F011         	goto	u2801
  9643  0022C6  EF67  F011         	goto	u2800
  9644  0022CA                     u2801:
  9645  0022CA  EFB7  F011         	goto	l4661
  9646  0022CE                     u2800:
  9647  0022CE                     
  9648                           ;fifo.c: 235:     {;fifo.c: 236:         *d -= 0x64;
  9649  0022CE  C026  FFD9         	movff	decodifica@d,fsr2l
  9650  0022D2  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9651  0022D6  0E64               	movlw	100
  9652  0022D8  5EDF               	subwf	indf2,f,c
  9653                           
  9654                           ;fifo.c: 237:     } else
  9655  0022DA  EFEC  F011         	goto	l719
  9656  0022DE                     l4641:
  9657  0022DE  C026  FFD9         	movff	decodifica@d,fsr2l
  9658  0022E2  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9659  0022E6  0E41               	movlw	65
  9660  0022E8  6EDF               	movwf	indf2,c
  9661  0022EA  EFEC  F011         	goto	l719
  9662  0022EE                     l4643:
  9663  0022EE  C026  FFD9         	movff	decodifica@d,fsr2l
  9664  0022F2  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9665  0022F6  0E61               	movlw	97
  9666  0022F8  6EDF               	movwf	indf2,c
  9667  0022FA  EFEC  F011         	goto	l719
  9668  0022FE                     l4645:
  9669  0022FE  C026  FFD9         	movff	decodifica@d,fsr2l
  9670  002302  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9671  002306  0E42               	movlw	66
  9672  002308  6EDF               	movwf	indf2,c
  9673  00230A  EFEC  F011         	goto	l719
  9674  00230E                     l4647:
  9675  00230E  C026  FFD9         	movff	decodifica@d,fsr2l
  9676  002312  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9677  002316  0E62               	movlw	98
  9678  002318  6EDF               	movwf	indf2,c
  9679  00231A  EFEC  F011         	goto	l719
  9680  00231E                     l4649:
  9681  00231E  C026  FFD9         	movff	decodifica@d,fsr2l
  9682  002322  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9683  002326  0E43               	movlw	67
  9684  002328  6EDF               	movwf	indf2,c
  9685  00232A  EFEC  F011         	goto	l719
  9686  00232E                     l4651:
  9687  00232E  C026  FFD9         	movff	decodifica@d,fsr2l
  9688  002332  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9689  002336  0E63               	movlw	99
  9690  002338  6EDF               	movwf	indf2,c
  9691  00233A  EFEC  F011         	goto	l719
  9692  00233E                     l4653:
  9693  00233E  C026  FFD9         	movff	decodifica@d,fsr2l
  9694  002342  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9695  002346  0E44               	movlw	68
  9696  002348  6EDF               	movwf	indf2,c
  9697  00234A  EFEC  F011         	goto	l719
  9698  00234E                     l4655:
  9699  00234E  C026  FFD9         	movff	decodifica@d,fsr2l
  9700  002352  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9701  002356  0E64               	movlw	100
  9702  002358  6EDF               	movwf	indf2,c
  9703  00235A  EFEC  F011         	goto	l719
  9704  00235E                     l4657:
  9705  00235E  C026  FFD9         	movff	decodifica@d,fsr2l
  9706  002362  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9707  002366  0E00               	movlw	0
  9708  002368  6EDF               	movwf	indf2,c
  9709  00236A  EFEC  F011         	goto	l719
  9710  00236E                     l4661:
  9711  00236E  C026  FFD9         	movff	decodifica@d,fsr2l
  9712  002372  C027  FFDA         	movff	decodifica@d+1,fsr2h
  9713  002376  50DF               	movf	indf2,w,c
  9714  002378  6E28               	movwf	??_decodifica^0,c
  9715  00237A  6A29               	clrf	(??_decodifica+1)^0,c
  9716                           
  9717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9718                           ; Switch size 1, requested type "simple"
  9719                           ; Number of cases is 1, Range of values is 0 to 0
  9720                           ; switch strategies available:
  9721                           ; Name         Instructions Cycles
  9722                           ; simple_byte            4     3 (average)
  9723                           ;	Chosen strategy is simple_byte
  9724  00237C  5029               	movf	(??_decodifica+1)^0,w,c
  9725  00237E  0A00               	xorlw	0	; case 0
  9726  002380  B4D8               	btfsc	status,2,c
  9727  002382  EFC5  F011         	goto	l7141
  9728  002386  EFEC  F011         	goto	l719
  9729  00238A                     l7141:
  9730                           
  9731                           ; Switch size 1, requested type "simple"
  9732                           ; Number of cases is 9, Range of values is 221 to 254
  9733                           ; switch strategies available:
  9734                           ; Name         Instructions Cycles
  9735                           ; simple_byte           28    15 (average)
  9736                           ;	Chosen strategy is simple_byte
  9737  00238A  5028               	movf	??_decodifica^0,w,c
  9738  00238C  0ADD               	xorlw	221	; case 221
  9739  00238E  B4D8               	btfsc	status,2,c
  9740  002390  EF6F  F011         	goto	l4641
  9741  002394  0A03               	xorlw	3	; case 222
  9742  002396  B4D8               	btfsc	status,2,c
  9743  002398  EF77  F011         	goto	l4643
  9744  00239C  0A01               	xorlw	1	; case 223
  9745  00239E  B4D8               	btfsc	status,2,c
  9746  0023A0  EF7F  F011         	goto	l4645
  9747  0023A4  0A3F               	xorlw	63	; case 224
  9748  0023A6  B4D8               	btfsc	status,2,c
  9749  0023A8  EF87  F011         	goto	l4647
  9750  0023AC  0A01               	xorlw	1	; case 225
  9751  0023AE  B4D8               	btfsc	status,2,c
  9752  0023B0  EF8F  F011         	goto	l4649
  9753  0023B4  0A03               	xorlw	3	; case 226
  9754  0023B6  B4D8               	btfsc	status,2,c
  9755  0023B8  EF97  F011         	goto	l4651
  9756  0023BC  0A01               	xorlw	1	; case 227
  9757  0023BE  B4D8               	btfsc	status,2,c
  9758  0023C0  EF9F  F011         	goto	l4653
  9759  0023C4  0A07               	xorlw	7	; case 228
  9760  0023C6  B4D8               	btfsc	status,2,c
  9761  0023C8  EFA7  F011         	goto	l4655
  9762  0023CC  0A1A               	xorlw	26	; case 254
  9763  0023CE  B4D8               	btfsc	status,2,c
  9764  0023D0  EFAF  F011         	goto	l4657
  9765  0023D4  EFEC  F011         	goto	l719
  9766  0023D8                     l719:
  9767  0023D8  0012               	return		;funcret
  9768  0023DA                     __end_of_decodifica:
  9769                           	callstack 0
  9770                           
  9771 ;; *************** function _alt_atuador *****************
  9772 ;; Defined at:
  9773 ;;		line 92 in file "fifo.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;  tecla           1    wreg     unsigned char 
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;  tecla           1    2[COMRAM] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;                  1    wreg      void 
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0
  9788 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9789 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9790 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9791 ;;Total ram usage:        3 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    2
  9794 ;; This function calls:
  9795 ;;		Nothing
  9796 ;; This function is called by:
  9797 ;;		_main
  9798 ;;		_manipula_atuadores_init
  9799 ;;		_fifo_delete
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           	psect	text38
  9804  002BE8                     __ptext38:
  9805                           	callstack 0
  9806  002BE8                     _alt_atuador:
  9807                           	callstack 27
  9808                           
  9809                           ;incstack = 0
  9810                           ;alt_atuador@tecla stored from wreg
  9811  002BE8  6E28               	movwf	alt_atuador@tecla^0,c
  9812  002BEA                     
  9813                           ;fifo.c: 92: void alt_atuador( char tecla );fifo.c: 93: {;fifo.c: 94:     switch(tecla)
  9814  002BEA  EF23  F016         	goto	l4671
  9815  002BEE                     l636:
  9816  002BEE  A013               	btfss	_atuador^0,0,c
  9817  002BF0  EFFC  F015         	goto	u2811
  9818  002BF4  EFFF  F015         	goto	u2810
  9819  002BF8                     u2811:
  9820  002BF8  8013               	bsf	_atuador^0,0,c
  9821  002BFA  EF00  F016         	goto	u2825
  9822  002BFE                     u2810:
  9823  002BFE  9013               	bcf	_atuador^0,0,c
  9824  002C00                     u2825:
  9825  002C00  EF40  F016         	goto	l641
  9826  002C04                     l638:
  9827  002C04  A213               	btfss	_atuador^0,1,c
  9828  002C06  EF07  F016         	goto	u2831
  9829  002C0A  EF0A  F016         	goto	u2830
  9830  002C0E                     u2831:
  9831  002C0E  8213               	bsf	_atuador^0,1,c
  9832  002C10  EF0B  F016         	goto	u2845
  9833  002C14                     u2830:
  9834  002C14  9213               	bcf	_atuador^0,1,c
  9835  002C16                     u2845:
  9836  002C16  EF40  F016         	goto	l641
  9837  002C1A                     l639:
  9838  002C1A  A413               	btfss	_atuador^0,2,c
  9839  002C1C  EF12  F016         	goto	u2851
  9840  002C20  EF15  F016         	goto	u2850
  9841  002C24                     u2851:
  9842  002C24  8413               	bsf	_atuador^0,2,c
  9843  002C26  EF16  F016         	goto	u2865
  9844  002C2A                     u2850:
  9845  002C2A  9413               	bcf	_atuador^0,2,c
  9846  002C2C                     u2865:
  9847  002C2C  EF40  F016         	goto	l641
  9848  002C30                     l640:
  9849  002C30  A613               	btfss	_atuador^0,3,c
  9850  002C32  EF1D  F016         	goto	u2871
  9851  002C36  EF20  F016         	goto	u2870
  9852  002C3A                     u2871:
  9853  002C3A  8613               	bsf	_atuador^0,3,c
  9854  002C3C  EF21  F016         	goto	u2885
  9855  002C40                     u2870:
  9856  002C40  9613               	bcf	_atuador^0,3,c
  9857  002C42                     u2885:
  9858  002C42  EF40  F016         	goto	l641
  9859  002C46                     l4671:
  9860  002C46  5028               	movf	alt_atuador@tecla^0,w,c
  9861  002C48  6E26               	movwf	??_alt_atuador^0,c
  9862  002C4A  6A27               	clrf	(??_alt_atuador+1)^0,c
  9863                           
  9864                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9865                           ; Switch size 1, requested type "simple"
  9866                           ; Number of cases is 1, Range of values is 0 to 0
  9867                           ; switch strategies available:
  9868                           ; Name         Instructions Cycles
  9869                           ; simple_byte            4     3 (average)
  9870                           ;	Chosen strategy is simple_byte
  9871  002C4C  5027               	movf	(??_alt_atuador+1)^0,w,c
  9872  002C4E  0A00               	xorlw	0	; case 0
  9873  002C50  B4D8               	btfsc	status,2,c
  9874  002C52  EF2D  F016         	goto	l7143
  9875  002C56  EF40  F016         	goto	l641
  9876  002C5A                     l7143:
  9877                           
  9878                           ; Switch size 1, requested type "simple"
  9879                           ; Number of cases is 4, Range of values is 65 to 68
  9880                           ; switch strategies available:
  9881                           ; Name         Instructions Cycles
  9882                           ; simple_byte           13     7 (average)
  9883                           ;	Chosen strategy is simple_byte
  9884  002C5A  5026               	movf	??_alt_atuador^0,w,c
  9885  002C5C  0A41               	xorlw	65	; case 65
  9886  002C5E  B4D8               	btfsc	status,2,c
  9887  002C60  EFF7  F015         	goto	l636
  9888  002C64  0A03               	xorlw	3	; case 66
  9889  002C66  B4D8               	btfsc	status,2,c
  9890  002C68  EF02  F016         	goto	l638
  9891  002C6C  0A01               	xorlw	1	; case 67
  9892  002C6E  B4D8               	btfsc	status,2,c
  9893  002C70  EF0D  F016         	goto	l639
  9894  002C74  0A07               	xorlw	7	; case 68
  9895  002C76  B4D8               	btfsc	status,2,c
  9896  002C78  EF18  F016         	goto	l640
  9897  002C7C  EF40  F016         	goto	l641
  9898  002C80                     l641:
  9899  002C80  0012               	return		;funcret
  9900  002C82                     __end_of_alt_atuador:
  9901                           	callstack 0
  9902                           
  9903 ;; *************** function _fifo_adrs *****************
  9904 ;; Defined at:
  9905 ;;		line 178 in file "fifo.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;		None
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;		None
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  2    0[COMRAM] PTR unsigned char 
  9912 ;; Registers used:
  9913 ;;		wreg, status,2, status,0
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9919 ;;      Params:         2       0       0       0       0       0       0       0       0
  9920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9922 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9923 ;;Total ram usage:        2 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    2
  9926 ;; This function calls:
  9927 ;;		Nothing
  9928 ;; This function is called by:
  9929 ;;		_main
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           	psect	text39
  9934  003854                     __ptext39:
  9935                           	callstack 0
  9936  003854                     _fifo_adrs:
  9937                           	callstack 28
  9938  003854                     
  9939                           ;fifo.c: 180:     return fila;
  9940  003854  0E14               	movlw	low _fila
  9941  003856  6E26               	movwf	?_fifo_adrs^0,c
  9942  003858  0E00               	movlw	high _fila
  9943  00385A  6E27               	movwf	(?_fifo_adrs+1)^0,c
  9944  00385C  0012               	return		;funcret
  9945  00385E                     __end_of_fifo_adrs:
  9946                           	callstack 0
  9947                           
  9948 ;; *************** function _fifo_add_tempo *****************
  9949 ;; Defined at:
  9950 ;;		line 269 in file "fifo.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;  t               1    wreg     const unsigned char 
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  t               1   15[COMRAM] const unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0
  9965 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9967 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9968 ;;Total ram usage:        1 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    5
  9971 ;; This function calls:
  9972 ;;		_codifica
  9973 ;;		_fifo_alinharPrint
  9974 ;; This function is called by:
  9975 ;;		_main
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text40
  9980  0030A6                     __ptext40:
  9981                           	callstack 0
  9982  0030A6                     _fifo_add_tempo:
  9983                           	callstack 25
  9984                           
  9985                           ;incstack = 0
  9986                           ;fifo_add_tempo@t stored from wreg
  9987  0030A6  6E35               	movwf	fifo_add_tempo@t^0,c
  9988  0030A8                     
  9989                           ;fifo.c: 269: void fifo_add_tempo(const char t);fifo.c: 270: {;fifo.c: 271:     if(ind_f
      +                          ila < 18)
  9990  0030A8  0E12               	movlw	18
  9991  0030AA  6058               	cpfslt	_ind_fila^0,c
  9992  0030AC  EF5A  F018         	goto	u3351
  9993  0030B0  EF5C  F018         	goto	u3350
  9994  0030B4                     u3351:
  9995  0030B4  EF7C  F018         	goto	l5117
  9996  0030B8                     u3350:
  9997  0030B8                     
  9998                           ;fifo.c: 272:     {;fifo.c: 273:         if(t)
  9999  0030B8  5035               	movf	fifo_add_tempo@t^0,w,c
 10000  0030BA  B4D8               	btfsc	status,2,c
 10001  0030BC  EF62  F018         	goto	u3361
 10002  0030C0  EF64  F018         	goto	u3360
 10003  0030C4                     u3361:
 10004  0030C4  EF7C  F018         	goto	l5117
 10005  0030C8                     u3360:
 10006  0030C8                     
 10007                           ;fifo.c: 274:         {;fifo.c: 275:             codifica('t', &t);
 10008  0030C8  0E35               	movlw	low fifo_add_tempo@t
 10009  0030CA  6E26               	movwf	codifica@dado^0,c
 10010  0030CC  0E00               	movlw	high fifo_add_tempo@t
 10011  0030CE  6E27               	movwf	(codifica@dado+1)^0,c
 10012  0030D0  0E74               	movlw	116
 10013  0030D2  ECA3  F010         	call	_codifica
 10014  0030D6                     
 10015                           ;fifo.c: 276:             fila[ind_fila] = t;
 10016  0030D6  0E14               	movlw	low _fila
 10017  0030D8  2458               	addwf	_ind_fila^0,w,c
 10018  0030DA  6ED9               	movwf	fsr2l,c
 10019  0030DC  6ADA               	clrf	fsr2h,c
 10020  0030DE  0E00               	movlw	high _fila
 10021  0030E0  22DA               	addwfc	fsr2h,f,c
 10022  0030E2  C035  FFDF         	movff	fifo_add_tempo@t,indf2
 10023  0030E6                     
 10024                           ;fifo.c: 277:             ind_fila++;
 10025  0030E6  2A58               	incf	_ind_fila^0,f,c
 10026  0030E8                     
 10027                           ;fifo.c: 278:             fila[ind_fila] = 0;
 10028  0030E8  0E14               	movlw	low _fila
 10029  0030EA  2458               	addwf	_ind_fila^0,w,c
 10030  0030EC  6ED9               	movwf	fsr2l,c
 10031  0030EE  6ADA               	clrf	fsr2h,c
 10032  0030F0  0E00               	movlw	high _fila
 10033  0030F2  22DA               	addwfc	fsr2h,f,c
 10034  0030F4  0E00               	movlw	0
 10035  0030F6  6EDF               	movwf	indf2,c
 10036  0030F8                     l5117:
 10037                           
 10038                           ;fifo.c: 281:     fifo_alinharPrint();
 10039  0030F8  EC5F  F013         	call	_fifo_alinharPrint	;wreg free
 10040  0030FC  0012               	return		;funcret
 10041  0030FE                     __end_of_fifo_add_tempo:
 10042                           	callstack 0
 10043                           
 10044 ;; *************** function _fifo_add_control *****************
 10045 ;; Defined at:
 10046 ;;		line 284 in file "fifo.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  c               1    wreg     const unsigned char 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  c               1   15[COMRAM] const unsigned char 
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  1    wreg      void 
 10053 ;; Registers used:
 10054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10060 ;;      Params:         0       0       0       0       0       0       0       0       0
 10061 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10062 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10063 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10064 ;;Total ram usage:        1 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    5
 10067 ;; This function calls:
 10068 ;;		_codifica
 10069 ;;		_fifo_alinharPrint
 10070 ;; This function is called by:
 10071 ;;		_main
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text41
 10076  0031F4                     __ptext41:
 10077                           	callstack 0
 10078  0031F4                     _fifo_add_control:
 10079                           	callstack 25
 10080                           
 10081                           ;incstack = 0
 10082                           ;fifo_add_control@c stored from wreg
 10083  0031F4  6E35               	movwf	fifo_add_control@c^0,c
 10084  0031F6                     
 10085                           ;fifo.c: 284: void fifo_add_control(const char c);fifo.c: 285: {;fifo.c: 286:     if(ind
      +                          _fila < 18)
 10086  0031F6  0E12               	movlw	18
 10087  0031F8  6058               	cpfslt	_ind_fila^0,c
 10088  0031FA  EF01  F019         	goto	u3341
 10089  0031FE  EF03  F019         	goto	u3340
 10090  003202                     u3341:
 10091  003202  EF1B  F019         	goto	l5103
 10092  003206                     u3340:
 10093  003206                     
 10094                           ;fifo.c: 287:     {;fifo.c: 290:             codifica('p', &c);
 10095  003206  0E35               	movlw	low fifo_add_control@c
 10096  003208  6E26               	movwf	codifica@dado^0,c
 10097  00320A  0E00               	movlw	high fifo_add_control@c
 10098  00320C  6E27               	movwf	(codifica@dado+1)^0,c
 10099  00320E  0E70               	movlw	112
 10100  003210  ECA3  F010         	call	_codifica
 10101  003214                     
 10102                           ;fifo.c: 291:             fila[ind_fila] = c;
 10103  003214  0E14               	movlw	low _fila
 10104  003216  2458               	addwf	_ind_fila^0,w,c
 10105  003218  6ED9               	movwf	fsr2l,c
 10106  00321A  6ADA               	clrf	fsr2h,c
 10107  00321C  0E00               	movlw	high _fila
 10108  00321E  22DA               	addwfc	fsr2h,f,c
 10109  003220  C035  FFDF         	movff	fifo_add_control@c,indf2
 10110  003224                     
 10111                           ;fifo.c: 292:             ind_fila++;
 10112  003224  2A58               	incf	_ind_fila^0,f,c
 10113  003226                     
 10114                           ;fifo.c: 293:             fila[ind_fila] = 0;
 10115  003226  0E14               	movlw	low _fila
 10116  003228  2458               	addwf	_ind_fila^0,w,c
 10117  00322A  6ED9               	movwf	fsr2l,c
 10118  00322C  6ADA               	clrf	fsr2h,c
 10119  00322E  0E00               	movlw	high _fila
 10120  003230  22DA               	addwfc	fsr2h,f,c
 10121  003232  0E00               	movlw	0
 10122  003234  6EDF               	movwf	indf2,c
 10123  003236                     l5103:
 10124                           
 10125                           ;fifo.c: 296:     fifo_alinharPrint();
 10126  003236  EC5F  F013         	call	_fifo_alinharPrint	;wreg free
 10127  00323A  0012               	return		;funcret
 10128  00323C                     __end_of_fifo_add_control:
 10129                           	callstack 0
 10130                           
 10131 ;; *************** function _fifo_add_ciclo *****************
 10132 ;; Defined at:
 10133 ;;		line 299 in file "fifo.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;  ciclos          2    0[COMRAM] unsigned int 
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  1    wreg      void 
 10140 ;; Registers used:
 10141 ;;		wreg, status,2
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10147 ;;      Params:         2       0       0       0       0       0       0       0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10150 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10151 ;;Total ram usage:        2 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    2
 10154 ;; This function calls:
 10155 ;;		Nothing
 10156 ;; This function is called by:
 10157 ;;		_main
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           	psect	text42
 10162  00385E                     __ptext42:
 10163                           	callstack 0
 10164  00385E                     _fifo_add_ciclo:
 10165                           	callstack 28
 10166  00385E                     
 10167                           ;fifo.c: 299: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 300: {;fifo.c: 301:     f
      +                          ila[0] = ciclos & 0x00ff;
 10168  00385E  C026  F014         	movff	fifo_add_ciclo@ciclos,_fila
 10169  003862                     
 10170                           ;fifo.c: 302:     fila[1] = ciclos >> 8;
 10171  003862  5027               	movf	(fifo_add_ciclo@ciclos+1)^0,w,c
 10172  003864  6E15               	movwf	(_fila+1)^0,c
 10173  003866  0012               	return		;funcret
 10174  003868                     __end_of_fifo_add_ciclo:
 10175                           	callstack 0
 10176                           
 10177 ;; *************** function _fifo_add *****************
 10178 ;; Defined at:
 10179 ;;		line 254 in file "fifo.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  passo           1    wreg     const unsigned char 
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;  passo           1   15[COMRAM] const unsigned char 
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  1    wreg      void 
 10186 ;; Registers used:
 10187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10193 ;;      Params:         0       0       0       0       0       0       0       0       0
 10194 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10196 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10197 ;;Total ram usage:        1 bytes
 10198 ;; Hardware stack levels used:    1
 10199 ;; Hardware stack levels required when called:    5
 10200 ;; This function calls:
 10201 ;;		_codifica
 10202 ;;		_fifo_alinharPrint
 10203 ;; This function is called by:
 10204 ;;		_main
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text43
 10209  0030FE                     __ptext43:
 10210                           	callstack 0
 10211  0030FE                     _fifo_add:
 10212                           	callstack 25
 10213                           
 10214                           ;incstack = 0
 10215                           ;fifo_add@passo stored from wreg
 10216  0030FE  6E35               	movwf	fifo_add@passo^0,c
 10217  003100                     
 10218                           ;fifo.c: 254: void fifo_add(const char passo);fifo.c: 255: {;fifo.c: 256:     if(ind_fil
      +                          a < 18)
 10219  003100  0E12               	movlw	18
 10220  003102  6058               	cpfslt	_ind_fila^0,c
 10221  003104  EF86  F018         	goto	u3371
 10222  003108  EF88  F018         	goto	u3370
 10223  00310C                     u3371:
 10224  00310C  EFA8  F018         	goto	l5131
 10225  003110                     u3370:
 10226  003110                     
 10227                           ;fifo.c: 257:     {;fifo.c: 258:         if(passo)
 10228  003110  5035               	movf	fifo_add@passo^0,w,c
 10229  003112  B4D8               	btfsc	status,2,c
 10230  003114  EF8E  F018         	goto	u3381
 10231  003118  EF90  F018         	goto	u3380
 10232  00311C                     u3381:
 10233  00311C  EFA8  F018         	goto	l5131
 10234  003120                     u3380:
 10235  003120                     
 10236                           ;fifo.c: 259:         {;fifo.c: 260:             codifica('a', &passo);
 10237  003120  0E35               	movlw	low fifo_add@passo
 10238  003122  6E26               	movwf	codifica@dado^0,c
 10239  003124  0E00               	movlw	high fifo_add@passo
 10240  003126  6E27               	movwf	(codifica@dado+1)^0,c
 10241  003128  0E61               	movlw	97
 10242  00312A  ECA3  F010         	call	_codifica
 10243  00312E                     
 10244                           ;fifo.c: 261:             fila[ind_fila] = passo;
 10245  00312E  0E14               	movlw	low _fila
 10246  003130  2458               	addwf	_ind_fila^0,w,c
 10247  003132  6ED9               	movwf	fsr2l,c
 10248  003134  6ADA               	clrf	fsr2h,c
 10249  003136  0E00               	movlw	high _fila
 10250  003138  22DA               	addwfc	fsr2h,f,c
 10251  00313A  C035  FFDF         	movff	fifo_add@passo,indf2
 10252  00313E                     
 10253                           ;fifo.c: 262:             ind_fila++;
 10254  00313E  2A58               	incf	_ind_fila^0,f,c
 10255  003140                     
 10256                           ;fifo.c: 263:             fila[ind_fila] = 0;
 10257  003140  0E14               	movlw	low _fila
 10258  003142  2458               	addwf	_ind_fila^0,w,c
 10259  003144  6ED9               	movwf	fsr2l,c
 10260  003146  6ADA               	clrf	fsr2h,c
 10261  003148  0E00               	movlw	high _fila
 10262  00314A  22DA               	addwfc	fsr2h,f,c
 10263  00314C  0E00               	movlw	0
 10264  00314E  6EDF               	movwf	indf2,c
 10265  003150                     l5131:
 10266                           
 10267                           ;fifo.c: 266:      fifo_alinharPrint();
 10268  003150  EC5F  F013         	call	_fifo_alinharPrint	;wreg free
 10269  003154  0012               	return		;funcret
 10270  003156                     __end_of_fifo_add:
 10271                           	callstack 0
 10272                           
 10273 ;; *************** function _fifo_alinharPrint *****************
 10274 ;; Defined at:
 10275 ;;		line 482 in file "fifo.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;  aux             1   14[COMRAM] unsigned char 
 10280 ;;  i               1   13[COMRAM] unsigned char 
 10281 ;;  cont            1   12[COMRAM] unsigned char 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      void 
 10284 ;; Registers used:
 10285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0
 10292 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10293 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10294 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10295 ;;Total ram usage:        4 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    4
 10298 ;; This function calls:
 10299 ;;		_dignum_tam
 10300 ;; This function is called by:
 10301 ;;		_fifo_delete
 10302 ;;		_fifo_add
 10303 ;;		_fifo_add_tempo
 10304 ;;		_fifo_add_control
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text44
 10309  0026BE                     __ptext44:
 10310                           	callstack 0
 10311  0026BE                     _fifo_alinharPrint:
 10312                           	callstack 25
 10313  0026BE                     
 10314                           ;fifo.c: 484:     unsigned char i;;fifo.c: 485:     unsigned char aux;;fifo.c: 486:     
      +                          unsigned char cont = 0;
 10315  0026BE  0E00               	movlw	0
 10316  0026C0  6E32               	movwf	fifo_alinharPrint@cont^0,c
 10317  0026C2                     
 10318                           ;fifo.c: 488:     for( i=ind_fila-1; i>=2; i-- )
 10319  0026C2  0458               	decf	_ind_fila^0,w,c
 10320  0026C4  6E33               	movwf	fifo_alinharPrint@i^0,c
 10321  0026C6                     l4809:
 10322  0026C6  0E02               	movlw	2
 10323  0026C8  6033               	cpfslt	fifo_alinharPrint@i^0,c
 10324  0026CA  EF69  F013         	goto	u3041
 10325  0026CE  EF6B  F013         	goto	u3040
 10326  0026D2                     u3041:
 10327  0026D2  EF6D  F013         	goto	l4813
 10328  0026D6                     u3040:
 10329  0026D6  EFD2  F013         	goto	l815
 10330  0026DA                     l4813:
 10331                           
 10332                           ;fifo.c: 489:     {;fifo.c: 490:         aux = fila[i];
 10333  0026DA  0E14               	movlw	low _fila
 10334  0026DC  2433               	addwf	fifo_alinharPrint@i^0,w,c
 10335  0026DE  6ED9               	movwf	fsr2l,c
 10336  0026E0  6ADA               	clrf	fsr2h,c
 10337  0026E2  0E00               	movlw	high _fila
 10338  0026E4  22DA               	addwfc	fsr2h,f,c
 10339  0026E6  50DF               	movf	indf2,w,c
 10340  0026E8  6E34               	movwf	fifo_alinharPrint@aux^0,c
 10341  0026EA                     
 10342                           ;fifo.c: 491:         if( aux <= 0x64 )
 10343  0026EA  0E65               	movlw	101
 10344  0026EC  6034               	cpfslt	fifo_alinharPrint@aux^0,c
 10345  0026EE  EF7B  F013         	goto	u3051
 10346  0026F2  EF7D  F013         	goto	u3050
 10347  0026F6                     u3051:
 10348  0026F6  EF85  F013         	goto	l4819
 10349  0026FA                     u3050:
 10350  0026FA                     
 10351                           ;fifo.c: 492:             cont += dignum_tam( aux )+1;
 10352  0026FA  C034  F02E         	movff	fifo_alinharPrint@aux,dignum_tam@num
 10353  0026FE  6A2F               	clrf	(dignum_tam@num+1)^0,c
 10354  002700  ECEC  F019         	call	_dignum_tam	;wreg free
 10355  002704  6E31               	movwf	??_fifo_alinharPrint^0,c
 10356  002706  2831               	incf	??_fifo_alinharPrint^0,w,c
 10357  002708  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10358  00270A                     l4819:
 10359                           
 10360                           ;fifo.c: 494:         if( aux > 0x64 && aux <= 0xDC )
 10361  00270A  0E64               	movlw	100
 10362  00270C  6434               	cpfsgt	fifo_alinharPrint@aux^0,c
 10363  00270E  EF8B  F013         	goto	u3061
 10364  002712  EF8D  F013         	goto	u3060
 10365  002716                     u3061:
 10366  002716  EFA0  F013         	goto	l4825
 10367  00271A                     u3060:
 10368  00271A  0EDD               	movlw	221
 10369  00271C  6034               	cpfslt	fifo_alinharPrint@aux^0,c
 10370  00271E  EF93  F013         	goto	u3071
 10371  002722  EF95  F013         	goto	u3070
 10372  002726                     u3071:
 10373  002726  EFA0  F013         	goto	l4825
 10374  00272A                     u3070:
 10375  00272A                     
 10376                           ;fifo.c: 495:             cont += dignum_tam( aux - 0x64 )+1;
 10377  00272A  0E9C               	movlw	156
 10378  00272C  2434               	addwf	fifo_alinharPrint@aux^0,w,c
 10379  00272E  6E2E               	movwf	dignum_tam@num^0,c
 10380  002730  6A2F               	clrf	(dignum_tam@num+1)^0,c
 10381  002732  0EFF               	movlw	255
 10382  002734  222F               	addwfc	(dignum_tam@num+1)^0,f,c
 10383  002736  ECEC  F019         	call	_dignum_tam	;wreg free
 10384  00273A  6E31               	movwf	??_fifo_alinharPrint^0,c
 10385  00273C  2831               	incf	??_fifo_alinharPrint^0,w,c
 10386  00273E  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10387  002740                     l4825:
 10388                           
 10389                           ;fifo.c: 497:         if( aux > 0xDC && aux < 0xFE )
 10390  002740  0EDC               	movlw	220
 10391  002742  6434               	cpfsgt	fifo_alinharPrint@aux^0,c
 10392  002744  EFA6  F013         	goto	u3081
 10393  002748  EFA8  F013         	goto	u3080
 10394  00274C                     u3081:
 10395  00274C  EFB2  F013         	goto	l811
 10396  002750                     u3080:
 10397  002750  0EFE               	movlw	254
 10398  002752  6034               	cpfslt	fifo_alinharPrint@aux^0,c
 10399  002754  EFAE  F013         	goto	u3091
 10400  002758  EFB0  F013         	goto	u3090
 10401  00275C                     u3091:
 10402  00275C  EFB2  F013         	goto	l811
 10403  002760                     u3090:
 10404  002760                     
 10405                           ;fifo.c: 498:             cont += 2;
 10406  002760  0E02               	movlw	2
 10407  002762  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10408  002764                     l811:
 10409                           
 10410                           ;fifo.c: 500:         if( aux == 0xFE )
 10411  002764  0EFE               	movlw	254
 10412  002766  1834               	xorwf	fifo_alinharPrint@aux^0,w,c
 10413  002768  A4D8               	btfss	status,2,c
 10414  00276A  EFB9  F013         	goto	u3101
 10415  00276E  EFBB  F013         	goto	u3100
 10416  002772                     u3101:
 10417  002772  EFC3  F013         	goto	l4833
 10418  002776                     u3100:
 10419  002776                     
 10420                           ;fifo.c: 501:             cont += dignum_tam( aux )+1;
 10421  002776  C034  F02E         	movff	fifo_alinharPrint@aux,dignum_tam@num
 10422  00277A  6A2F               	clrf	(dignum_tam@num+1)^0,c
 10423  00277C  ECEC  F019         	call	_dignum_tam	;wreg free
 10424  002780  6E31               	movwf	??_fifo_alinharPrint^0,c
 10425  002782  2831               	incf	??_fifo_alinharPrint^0,w,c
 10426  002784  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10427  002786                     l4833:
 10428                           
 10429                           ;fifo.c: 503:         if( cont > 20 )
 10430  002786  0E14               	movlw	20
 10431  002788  6432               	cpfsgt	fifo_alinharPrint@cont^0,c
 10432  00278A  EFC9  F013         	goto	u3111
 10433  00278E  EFCB  F013         	goto	u3110
 10434  002792                     u3111:
 10435  002792  EFCD  F013         	goto	l813
 10436  002796                     u3110:
 10437  002796  EFD2  F013         	goto	l815
 10438  00279A                     l813:
 10439                           
 10440                           ;fifo.c: 508:             ind_print = i;
 10441  00279A  C033  F057         	movff	fifo_alinharPrint@i,_ind_print
 10442  00279E                     
 10443                           ;fifo.c: 509:     }
 10444  00279E  0633               	decf	fifo_alinharPrint@i^0,f,c
 10445  0027A0  EF63  F013         	goto	l4809
 10446  0027A4                     l815:
 10447  0027A4  0012               	return		;funcret
 10448  0027A6                     __end_of_fifo_alinharPrint:
 10449                           	callstack 0
 10450                           
 10451 ;; *************** function _dignum_tam *****************
 10452 ;; Defined at:
 10453 ;;		line 470 in file "fifo.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;  num             2    8[COMRAM] int 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  tam             1   10[COMRAM] unsigned char 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      unsigned char 
 10460 ;; Registers used:
 10461 ;;		wreg, status,2, status,0, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10467 ;;      Params:         2       0       0       0       0       0       0       0       0
 10468 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10470 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10471 ;;Total ram usage:        3 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    3
 10474 ;; This function calls:
 10475 ;;		___awdiv
 10476 ;; This function is called by:
 10477 ;;		_fifo_alinharPrint
 10478 ;;		_printExec
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text45
 10483  0033D8                     __ptext45:
 10484                           	callstack 0
 10485  0033D8                     _dignum_tam:
 10486                           	callstack 26
 10487  0033D8                     
 10488                           ;fifo.c: 470: unsigned char dignum_tam(int num);fifo.c: 471: {;fifo.c: 472:     unsigned
      +                           char tam = 0;
 10489  0033D8  0E00               	movlw	0
 10490  0033DA  6E30               	movwf	dignum_tam@tam^0,c
 10491                           
 10492                           ;fifo.c: 474:     while(num != 0)
 10493  0033DC  EFFF  F019         	goto	l4585
 10494  0033E0                     l4581:
 10495                           
 10496                           ;fifo.c: 475:     {;fifo.c: 476:         num /= 10;
 10497  0033E0  C02E  F026         	movff	dignum_tam@num,___awdiv@dividend
 10498  0033E4  C02F  F027         	movff	dignum_tam@num+1,___awdiv@dividend+1
 10499  0033E8  0E00               	movlw	0
 10500  0033EA  6E29               	movwf	(___awdiv@divisor+1)^0,c
 10501  0033EC  0E0A               	movlw	10
 10502  0033EE  6E28               	movwf	___awdiv@divisor^0,c
 10503  0033F0  EC44  F014         	call	___awdiv	;wreg free
 10504  0033F4  C026  F02E         	movff	?___awdiv,dignum_tam@num
 10505  0033F8  C027  F02F         	movff	?___awdiv+1,dignum_tam@num+1
 10506  0033FC                     
 10507                           ;fifo.c: 477:         tam++;
 10508  0033FC  2A30               	incf	dignum_tam@tam^0,f,c
 10509  0033FE                     l4585:
 10510                           
 10511                           ;fifo.c: 474:     while(num != 0)
 10512  0033FE  502E               	movf	dignum_tam@num^0,w,c
 10513  003400  102F               	iorwf	(dignum_tam@num+1)^0,w,c
 10514  003402  A4D8               	btfss	status,2,c
 10515  003404  EF06  F01A         	goto	u2691
 10516  003408  EF08  F01A         	goto	u2690
 10517  00340C                     u2691:
 10518  00340C  EFF0  F019         	goto	l4581
 10519  003410                     u2690:
 10520  003410                     
 10521                           ;fifo.c: 479:     return ( tam );
 10522  003410  5030               	movf	dignum_tam@tam^0,w,c
 10523  003412  0012               	return		;funcret
 10524  003414                     __end_of_dignum_tam:
 10525                           	callstack 0
 10526                           
 10527 ;; *************** function ___awdiv *****************
 10528 ;; Defined at:
 10529 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;  dividend        2    0[COMRAM] int 
 10532 ;;  divisor         2    2[COMRAM] int 
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;  quotient        2    6[COMRAM] int 
 10535 ;;  sign            1    5[COMRAM] unsigned char 
 10536 ;;  counter         1    4[COMRAM] unsigned char 
 10537 ;; Return value:  Size  Location     Type
 10538 ;;                  2    0[COMRAM] int 
 10539 ;; Registers used:
 10540 ;;		wreg, status,2, status,0
 10541 ;; Tracked objects:
 10542 ;;		On entry : 0/0
 10543 ;;		On exit  : 0/0
 10544 ;;		Unchanged: 0/0
 10545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10546 ;;      Params:         4       0       0       0       0       0       0       0       0
 10547 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10548 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10549 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10550 ;;Total ram usage:        8 bytes
 10551 ;; Hardware stack levels used:    1
 10552 ;; Hardware stack levels required when called:    2
 10553 ;; This function calls:
 10554 ;;		Nothing
 10555 ;; This function is called by:
 10556 ;;		_dispLCD_num
 10557 ;;		_fifo_print
 10558 ;;		_dignum_tam
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           	psect	text46
 10563  002888                     __ptext46:
 10564                           	callstack 0
 10565  002888                     ___awdiv:
 10566                           	callstack 26
 10567  002888  0E00               	movlw	0
 10568  00288A  6E2B               	movwf	___awdiv@sign^0,c
 10569  00288C  BE29               	btfsc	(___awdiv@divisor+1)^0,7,c
 10570  00288E  EF4D  F014         	goto	u2620
 10571  002892  EF4B  F014         	goto	u2621
 10572  002896                     u2621:
 10573  002896  EF53  F014         	goto	l4493
 10574  00289A                     u2620:
 10575  00289A  6C28               	negf	___awdiv@divisor^0,c
 10576  00289C  1E29               	comf	(___awdiv@divisor+1)^0,f,c
 10577  00289E  B0D8               	btfsc	status,0,c
 10578  0028A0  2A29               	incf	(___awdiv@divisor+1)^0,f,c
 10579  0028A2  0E01               	movlw	1
 10580  0028A4  6E2B               	movwf	___awdiv@sign^0,c
 10581  0028A6                     l4493:
 10582  0028A6  BE27               	btfsc	(___awdiv@dividend+1)^0,7,c
 10583  0028A8  EF5A  F014         	goto	u2630
 10584  0028AC  EF58  F014         	goto	u2631
 10585  0028B0                     u2631:
 10586  0028B0  EF60  F014         	goto	l4499
 10587  0028B4                     u2630:
 10588  0028B4  6C26               	negf	___awdiv@dividend^0,c
 10589  0028B6  1E27               	comf	(___awdiv@dividend+1)^0,f,c
 10590  0028B8  B0D8               	btfsc	status,0,c
 10591  0028BA  2A27               	incf	(___awdiv@dividend+1)^0,f,c
 10592  0028BC  0E01               	movlw	1
 10593  0028BE  1A2B               	xorwf	___awdiv@sign^0,f,c
 10594  0028C0                     l4499:
 10595  0028C0  0E00               	movlw	0
 10596  0028C2  6E2D               	movwf	(___awdiv@quotient+1)^0,c
 10597  0028C4  0E00               	movlw	0
 10598  0028C6  6E2C               	movwf	___awdiv@quotient^0,c
 10599  0028C8  5028               	movf	___awdiv@divisor^0,w,c
 10600  0028CA  1029               	iorwf	(___awdiv@divisor+1)^0,w,c
 10601  0028CC  B4D8               	btfsc	status,2,c
 10602  0028CE  EF6B  F014         	goto	u2641
 10603  0028D2  EF6D  F014         	goto	u2640
 10604  0028D6                     u2641:
 10605  0028D6  EF95  F014         	goto	l4521
 10606  0028DA                     u2640:
 10607  0028DA  0E01               	movlw	1
 10608  0028DC  6E2A               	movwf	___awdiv@counter^0,c
 10609  0028DE  EF75  F014         	goto	l4507
 10610  0028E2                     l4505:
 10611  0028E2  90D8               	bcf	status,0,c
 10612  0028E4  3628               	rlcf	___awdiv@divisor^0,f,c
 10613  0028E6  3629               	rlcf	(___awdiv@divisor+1)^0,f,c
 10614  0028E8  2A2A               	incf	___awdiv@counter^0,f,c
 10615  0028EA                     l4507:
 10616  0028EA  AE29               	btfss	(___awdiv@divisor+1)^0,7,c
 10617  0028EC  EF7A  F014         	goto	u2651
 10618  0028F0  EF7C  F014         	goto	u2650
 10619  0028F4                     u2651:
 10620  0028F4  EF71  F014         	goto	l4505
 10621  0028F8                     u2650:
 10622  0028F8                     l4509:
 10623  0028F8  90D8               	bcf	status,0,c
 10624  0028FA  362C               	rlcf	___awdiv@quotient^0,f,c
 10625  0028FC  362D               	rlcf	(___awdiv@quotient+1)^0,f,c
 10626  0028FE  5028               	movf	___awdiv@divisor^0,w,c
 10627  002900  5C26               	subwf	___awdiv@dividend^0,w,c
 10628  002902  5029               	movf	(___awdiv@divisor+1)^0,w,c
 10629  002904  5827               	subwfb	(___awdiv@dividend+1)^0,w,c
 10630  002906  A0D8               	btfss	status,0,c
 10631  002908  EF88  F014         	goto	u2661
 10632  00290C  EF8A  F014         	goto	u2660
 10633  002910                     u2661:
 10634  002910  EF8F  F014         	goto	l4517
 10635  002914                     u2660:
 10636  002914  5028               	movf	___awdiv@divisor^0,w,c
 10637  002916  5E26               	subwf	___awdiv@dividend^0,f,c
 10638  002918  5029               	movf	(___awdiv@divisor+1)^0,w,c
 10639  00291A  5A27               	subwfb	(___awdiv@dividend+1)^0,f,c
 10640  00291C  802C               	bsf	___awdiv@quotient^0,0,c
 10641  00291E                     l4517:
 10642  00291E  90D8               	bcf	status,0,c
 10643  002920  3229               	rrcf	(___awdiv@divisor+1)^0,f,c
 10644  002922  3228               	rrcf	___awdiv@divisor^0,f,c
 10645  002924  2E2A               	decfsz	___awdiv@counter^0,f,c
 10646  002926  EF7C  F014         	goto	l4509
 10647  00292A                     l4521:
 10648  00292A  502B               	movf	___awdiv@sign^0,w,c
 10649  00292C  B4D8               	btfsc	status,2,c
 10650  00292E  EF9B  F014         	goto	u2671
 10651  002932  EF9D  F014         	goto	u2670
 10652  002936                     u2671:
 10653  002936  EFA1  F014         	goto	l4525
 10654  00293A                     u2670:
 10655  00293A  6C2C               	negf	___awdiv@quotient^0,c
 10656  00293C  1E2D               	comf	(___awdiv@quotient+1)^0,f,c
 10657  00293E  B0D8               	btfsc	status,0,c
 10658  002940  2A2D               	incf	(___awdiv@quotient+1)^0,f,c
 10659  002942                     l4525:
 10660  002942  C02C  F026         	movff	___awdiv@quotient,?___awdiv
 10661  002946  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
 10662  00294A  0012               	return		;funcret
 10663  00294C                     __end_of___awdiv:
 10664                           	callstack 0
 10665                           
 10666 ;; *************** function _codifica *****************
 10667 ;; Defined at:
 10668 ;;		line 200 in file "fifo.c"
 10669 ;; Parameters:    Size  Location     Type
 10670 ;;  tipo            1    wreg     unsigned char 
 10671 ;;  dado            2    0[COMRAM] PTR unsigned char 
 10672 ;;		 -> fifo_add_control@c(1), fifo_add_tempo@t(1), fifo_add@passo(1), RAM(2047), 
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  tipo            1    4[COMRAM] unsigned char 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      void 
 10677 ;; Registers used:
 10678 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10684 ;;      Params:         2       0       0       0       0       0       0       0       0
 10685 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10686 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10687 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10688 ;;Total ram usage:        5 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    2
 10691 ;; This function calls:
 10692 ;;		Nothing
 10693 ;; This function is called by:
 10694 ;;		_fifo_delete
 10695 ;;		_fifo_add
 10696 ;;		_fifo_add_tempo
 10697 ;;		_fifo_add_control
 10698 ;; This function uses a non-reentrant model
 10699 ;;
 10700                           
 10701                           	psect	text47
 10702  002146                     __ptext47:
 10703                           	callstack 0
 10704  002146                     _codifica:
 10705                           	callstack 27
 10706                           
 10707                           ;incstack = 0
 10708                           ;codifica@tipo stored from wreg
 10709  002146  6E2A               	movwf	codifica@tipo^0,c
 10710  002148                     
 10711                           ;fifo.c: 200: void codifica( unsigned char tipo, unsigned char *dado );fifo.c: 201: {;fi
      +                          fo.c: 202:     switch( tipo )
 10712  002148  EF33  F011         	goto	l4795
 10713  00214C                     l4767:
 10714  00214C  C026  FFD9         	movff	codifica@dado,fsr2l
 10715  002150  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10716  002154  50DF               	movf	indf2,w,c
 10717  002156  A4D8               	btfss	status,2,c
 10718  002158  EFB0  F010         	goto	u3031
 10719  00215C  EFB2  F010         	goto	u3030
 10720  002160                     u3031:
 10721  002160  EF4C  F011         	goto	l701
 10722  002164                     u3030:
 10723  002164                     
 10724                           ;fifo.c: 205:                        *dado = 254;
 10725  002164  C026  FFD9         	movff	codifica@dado,fsr2l
 10726  002168  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10727  00216C  0EFE               	movlw	254
 10728  00216E  6EDF               	movwf	indf2,c
 10729  002170  EF4C  F011         	goto	l701
 10730  002174                     l4771:
 10731  002174  C026  FFD9         	movff	codifica@dado,fsr2l
 10732  002178  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10733  00217C  0E64               	movlw	100
 10734  00217E  26DF               	addwf	indf2,f,c
 10735  002180  EF4C  F011         	goto	l701
 10736  002184                     l4773:
 10737  002184  C026  FFD9         	movff	codifica@dado,fsr2l
 10738  002188  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10739  00218C  0EDD               	movlw	221
 10740  00218E  6EDF               	movwf	indf2,c
 10741  002190  EF4C  F011         	goto	l701
 10742  002194                     l4775:
 10743  002194  C026  FFD9         	movff	codifica@dado,fsr2l
 10744  002198  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10745  00219C  0EDE               	movlw	222
 10746  00219E  6EDF               	movwf	indf2,c
 10747  0021A0  EF4C  F011         	goto	l701
 10748  0021A4                     l4777:
 10749  0021A4  C026  FFD9         	movff	codifica@dado,fsr2l
 10750  0021A8  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10751  0021AC  0EDF               	movlw	223
 10752  0021AE  6EDF               	movwf	indf2,c
 10753  0021B0  EF4C  F011         	goto	l701
 10754  0021B4                     l4779:
 10755  0021B4  C026  FFD9         	movff	codifica@dado,fsr2l
 10756  0021B8  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10757  0021BC  0EE0               	movlw	224
 10758  0021BE  6EDF               	movwf	indf2,c
 10759  0021C0  EF4C  F011         	goto	l701
 10760  0021C4                     l4781:
 10761  0021C4  C026  FFD9         	movff	codifica@dado,fsr2l
 10762  0021C8  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10763  0021CC  0EE1               	movlw	225
 10764  0021CE  6EDF               	movwf	indf2,c
 10765  0021D0  EF4C  F011         	goto	l701
 10766  0021D4                     l4783:
 10767  0021D4  C026  FFD9         	movff	codifica@dado,fsr2l
 10768  0021D8  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10769  0021DC  0EE2               	movlw	226
 10770  0021DE  6EDF               	movwf	indf2,c
 10771  0021E0  EF4C  F011         	goto	l701
 10772  0021E4                     l4785:
 10773  0021E4  C026  FFD9         	movff	codifica@dado,fsr2l
 10774  0021E8  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10775  0021EC  0EE3               	movlw	227
 10776  0021EE  6EDF               	movwf	indf2,c
 10777  0021F0  EF4C  F011         	goto	l701
 10778  0021F4                     l4787:
 10779  0021F4  C026  FFD9         	movff	codifica@dado,fsr2l
 10780  0021F8  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10781  0021FC  0EE4               	movlw	228
 10782  0021FE  6EDF               	movwf	indf2,c
 10783  002200  EF4C  F011         	goto	l701
 10784  002204                     l4791:
 10785  002204  C026  FFD9         	movff	codifica@dado,fsr2l
 10786  002208  C027  FFDA         	movff	codifica@dado+1,fsr2h
 10787  00220C  50DF               	movf	indf2,w,c
 10788  00220E  6E28               	movwf	??_codifica^0,c
 10789  002210  6A29               	clrf	(??_codifica+1)^0,c
 10790                           
 10791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10792                           ; Switch size 1, requested type "simple"
 10793                           ; Number of cases is 1, Range of values is 0 to 0
 10794                           ; switch strategies available:
 10795                           ; Name         Instructions Cycles
 10796                           ; simple_byte            4     3 (average)
 10797                           ;	Chosen strategy is simple_byte
 10798  002212  5029               	movf	(??_codifica+1)^0,w,c
 10799  002214  0A00               	xorlw	0	; case 0
 10800  002216  B4D8               	btfsc	status,2,c
 10801  002218  EF10  F011         	goto	l7145
 10802  00221C  EF4C  F011         	goto	l701
 10803  002220                     l7145:
 10804                           
 10805                           ; Switch size 1, requested type "simple"
 10806                           ; Number of cases is 8, Range of values is 65 to 100
 10807                           ; switch strategies available:
 10808                           ; Name         Instructions Cycles
 10809                           ; simple_byte           25    13 (average)
 10810                           ;	Chosen strategy is simple_byte
 10811  002220  5028               	movf	??_codifica^0,w,c
 10812  002222  0A41               	xorlw	65	; case 65
 10813  002224  B4D8               	btfsc	status,2,c
 10814  002226  EFC2  F010         	goto	l4773
 10815  00222A  0A03               	xorlw	3	; case 66
 10816  00222C  B4D8               	btfsc	status,2,c
 10817  00222E  EFD2  F010         	goto	l4777
 10818  002232  0A01               	xorlw	1	; case 67
 10819  002234  B4D8               	btfsc	status,2,c
 10820  002236  EFE2  F010         	goto	l4781
 10821  00223A  0A07               	xorlw	7	; case 68
 10822  00223C  B4D8               	btfsc	status,2,c
 10823  00223E  EFF2  F010         	goto	l4785
 10824  002242  0A25               	xorlw	37	; case 97
 10825  002244  B4D8               	btfsc	status,2,c
 10826  002246  EFCA  F010         	goto	l4775
 10827  00224A  0A03               	xorlw	3	; case 98
 10828  00224C  B4D8               	btfsc	status,2,c
 10829  00224E  EFDA  F010         	goto	l4779
 10830  002252  0A01               	xorlw	1	; case 99
 10831  002254  B4D8               	btfsc	status,2,c
 10832  002256  EFEA  F010         	goto	l4783
 10833  00225A  0A07               	xorlw	7	; case 100
 10834  00225C  B4D8               	btfsc	status,2,c
 10835  00225E  EFFA  F010         	goto	l4787
 10836  002262  EF4C  F011         	goto	l701
 10837  002266                     l4795:
 10838  002266  502A               	movf	codifica@tipo^0,w,c
 10839  002268  6E28               	movwf	??_codifica^0,c
 10840  00226A  6A29               	clrf	(??_codifica+1)^0,c
 10841                           
 10842                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10843                           ; Switch size 1, requested type "simple"
 10844                           ; Number of cases is 1, Range of values is 0 to 0
 10845                           ; switch strategies available:
 10846                           ; Name         Instructions Cycles
 10847                           ; simple_byte            4     3 (average)
 10848                           ;	Chosen strategy is simple_byte
 10849  00226C  5029               	movf	(??_codifica+1)^0,w,c
 10850  00226E  0A00               	xorlw	0	; case 0
 10851  002270  B4D8               	btfsc	status,2,c
 10852  002272  EF3D  F011         	goto	l7147
 10853  002276  EF4C  F011         	goto	l701
 10854  00227A                     l7147:
 10855                           
 10856                           ; Switch size 1, requested type "simple"
 10857                           ; Number of cases is 3, Range of values is 97 to 116
 10858                           ; switch strategies available:
 10859                           ; Name         Instructions Cycles
 10860                           ; simple_byte           10     6 (average)
 10861                           ;	Chosen strategy is simple_byte
 10862  00227A  5028               	movf	??_codifica^0,w,c
 10863  00227C  0A61               	xorlw	97	; case 97
 10864  00227E  B4D8               	btfsc	status,2,c
 10865  002280  EF02  F011         	goto	l4791
 10866  002284  0A11               	xorlw	17	; case 112
 10867  002286  B4D8               	btfsc	status,2,c
 10868  002288  EFA6  F010         	goto	l4767
 10869  00228C  0A04               	xorlw	4	; case 116
 10870  00228E  B4D8               	btfsc	status,2,c
 10871  002290  EFBA  F010         	goto	l4771
 10872  002294  EF4C  F011         	goto	l701
 10873  002298                     l701:
 10874  002298  0012               	return		;funcret
 10875  00229A                     __end_of_codifica:
 10876                           	callstack 0
 10877                           
 10878 ;; *************** function _dispLCD_str *****************
 10879 ;; Defined at:
 10880 ;;		line 250 in file "dispLCD4vias.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  str             2    7[COMRAM] PTR const unsigned char 
 10883 ;;		 -> STR_27(78), STR_26(62), STR_15(81), STR_4(83), 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  c               1   10[COMRAM] unsigned char 
 10886 ;;  lin             1    9[COMRAM] unsigned char 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      void 
 10889 ;; Registers used:
 10890 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10896 ;;      Params:         2       0       0       0       0       0       0       0       0
 10897 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10899 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10900 ;;Total ram usage:        4 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    4
 10903 ;; This function calls:
 10904 ;;		_dispLCD_dataReg
 10905 ;;		_dispLCD_lincol
 10906 ;; This function is called by:
 10907 ;;		_main
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text48
 10912  002F96                     __ptext48:
 10913                           	callstack 0
 10914  002F96                     _dispLCD_str:
 10915                           	callstack 26
 10916  002F96                     
 10917                           ;dispLCD4vias.c: 250: void dispLCD_str( const char * str );dispLCD4vias.c: 251: {;dispLC
      +                          D4vias.c: 252:     char lin = 0;
 10918  002F96  0E00               	movlw	0
 10919  002F98  6E2F               	movwf	dispLCD_str@lin^0,c
 10920  002F9A                     
 10921                           ;dispLCD4vias.c: 253:     char c;;dispLCD4vias.c: 254:     dispLCD_lincol(0,0);
 10922  002F9A  0E00               	movlw	0
 10923  002F9C  6E28               	movwf	dispLCD_lincol@col^0,c
 10924  002F9E  0E00               	movlw	0
 10925  002FA0  EC3B  F017         	call	_dispLCD_lincol
 10926                           
 10927                           ;dispLCD4vias.c: 256:     while( c = *str )
 10928  002FA4  EFEA  F017         	goto	l5541
 10929  002FA8                     l5533:
 10930                           
 10931                           ;dispLCD4vias.c: 257:     {;dispLCD4vias.c: 258:         if( c != '\n' )
 10932  002FA8  0E0A               	movlw	10
 10933  002FAA  1830               	xorwf	dispLCD_str@c^0,w,c
 10934  002FAC  B4D8               	btfsc	status,2,c
 10935  002FAE  EFDB  F017         	goto	u3771
 10936  002FB2  EFDD  F017         	goto	u3770
 10937  002FB6                     u3771:
 10938  002FB6  EFE2  F017         	goto	l5537
 10939  002FBA                     u3770:
 10940  002FBA                     
 10941                           ;dispLCD4vias.c: 259:             dispLCD_dataReg( c );
 10942  002FBA  5030               	movf	dispLCD_str@c^0,w,c
 10943  002FBC  ECD3  F018         	call	_dispLCD_dataReg
 10944  002FC0  EFE8  F017         	goto	l5539
 10945  002FC4                     l5537:
 10946                           
 10947                           ;dispLCD4vias.c: 261:             dispLCD_lincol(++lin,0);
 10948  002FC4  0E00               	movlw	0
 10949  002FC6  6E28               	movwf	dispLCD_lincol@col^0,c
 10950  002FC8  2A2F               	incf	dispLCD_str@lin^0,f,c
 10951  002FCA  502F               	movf	dispLCD_str@lin^0,w,c
 10952  002FCC  EC3B  F017         	call	_dispLCD_lincol
 10953  002FD0                     l5539:
 10954                           
 10955                           ;dispLCD4vias.c: 262:         ++str;
 10956  002FD0  4A2D               	infsnz	dispLCD_str@str^0,f,c
 10957  002FD2  2A2E               	incf	(dispLCD_str@str+1)^0,f,c
 10958  002FD4                     l5541:
 10959                           
 10960                           ;dispLCD4vias.c: 256:     while( c = *str )
 10961  002FD4  C02D  FFF6         	movff	dispLCD_str@str,tblptrl
 10962  002FD8  C02E  FFF7         	movff	dispLCD_str@str+1,tblptrh
 10963  002FDC                     	if	0	;tblptru may be non-zero
 10964  002FDC                     	endif
 10965  002FDC                     	if	0	;tblptru may be non-zero
 10966  002FDC                     	endif
 10967  002FDC  0008               	tblrd		*
 10968  002FDE  CFF5 F030          	movff	tablat,dispLCD_str@c
 10969  002FE2  5030               	movf	dispLCD_str@c^0,w,c
 10970  002FE4  A4D8               	btfss	status,2,c
 10971  002FE6  EFF7  F017         	goto	u3781
 10972  002FEA  EFF9  F017         	goto	u3780
 10973  002FEE                     u3781:
 10974  002FEE  EFD4  F017         	goto	l5533
 10975  002FF2                     u3780:
 10976  002FF2  0012               	return		;funcret
 10977  002FF4                     __end_of_dispLCD_str:
 10978                           	callstack 0
 10979                           
 10980 ;; *************** function _dispLCD_init *****************
 10981 ;; Defined at:
 10982 ;;		line 165 in file "dispLCD4vias.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;		None
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;		None
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      void 
 10989 ;; Registers used:
 10990 ;;		wreg, status,2, status,0, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10996 ;;      Params:         0       0       0       0       0       0       0       0       0
 10997 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10998 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10999 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11000 ;;Total ram usage:        0 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    3
 11003 ;; This function calls:
 11004 ;;		_delay
 11005 ;;		_dispLCD_instReg
 11006 ;; This function is called by:
 11007 ;;		_main
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text49
 11012  0034BC                     __ptext49:
 11013                           	callstack 0
 11014  0034BC                     _dispLCD_init:
 11015                           	callstack 27
 11016  0034BC                     
 11017                           ;dispLCD4vias.c: 167:     ADCON1 = 0xFF;
 11018  0034BC  68C1               	setf	193,c	;volatile
 11019                           
 11020                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB2 = 0;
 11021  0034BE  9493               	bcf	147,2,c	;volatile
 11022                           
 11023                           ;dispLCD4vias.c: 171:     TRISBbits.TRISB3 = 0;
 11024  0034C0  9693               	bcf	147,3,c	;volatile
 11025                           
 11026                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB4 = 0;
 11027  0034C2  9893               	bcf	147,4,c	;volatile
 11028                           
 11029                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB5 = 0;
 11030  0034C4  9A93               	bcf	147,5,c	;volatile
 11031                           
 11032                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB6 = 0;
 11033  0034C6  9C93               	bcf	147,6,c	;volatile
 11034                           
 11035                           ;dispLCD4vias.c: 176:     TRISBbits.TRISB7 = 0;
 11036  0034C8  9E93               	bcf	147,7,c	;volatile
 11037                           
 11038                           ;dispLCD4vias.c: 178:     LCDbits.EN = 1;
 11039  0034CA  8E8A               	bsf	138,7,c	;volatile
 11040  0034CC                     
 11041                           ;dispLCD4vias.c: 179:     delay(5);
 11042  0034CC  0E00               	movlw	0
 11043  0034CE  6E27               	movwf	(delay@t+1)^0,c
 11044  0034D0  0E05               	movlw	5
 11045  0034D2  6E26               	movwf	delay@t^0,c
 11046  0034D4  ECD6  F01A         	call	_delay	;wreg free
 11047                           
 11048                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x20|0x00|0x08);
 11049  0034D8  0E28               	movlw	40
 11050  0034DA  EC73  F012         	call	_dispLCD_instReg
 11051                           
 11052                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
 11053  0034DE  0E0C               	movlw	12
 11054  0034E0  EC73  F012         	call	_dispLCD_instReg
 11055                           
 11056                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x01 );
 11057  0034E4  0E01               	movlw	1
 11058  0034E6  EC73  F012         	call	_dispLCD_instReg
 11059                           
 11060                           ;dispLCD4vias.c: 183:     dispLCD_instReg( 0x02 );
 11061  0034EA  0E02               	movlw	2
 11062  0034EC  EC73  F012         	call	_dispLCD_instReg
 11063  0034F0  0012               	return		;funcret
 11064  0034F2                     __end_of_dispLCD_init:
 11065                           	callstack 0
 11066                           
 11067 ;; *************** function _dispLCD_clr *****************
 11068 ;; Defined at:
 11069 ;;		line 244 in file "dispLCD4vias.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;		None
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;		None
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      void 
 11076 ;; Registers used:
 11077 ;;		wreg, status,2, status,0, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11083 ;;      Params:         0       0       0       0       0       0       0       0       0
 11084 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11085 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11086 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11087 ;;Total ram usage:        0 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    3
 11090 ;; This function calls:
 11091 ;;		_dispLCD_instReg
 11092 ;; This function is called by:
 11093 ;;		_main
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           	psect	text50
 11098  003868                     __ptext50:
 11099                           	callstack 0
 11100  003868                     _dispLCD_clr:
 11101                           	callstack 27
 11102  003868                     
 11103                           ;dispLCD4vias.c: 246:     dispLCD_instReg(0x01);
 11104  003868  0E01               	movlw	1
 11105  00386A  EC73  F012         	call	_dispLCD_instReg
 11106  00386E  0012               	return		;funcret
 11107  003870                     __end_of_dispLCD_clr:
 11108                           	callstack 0
 11109                           
 11110 ;; *************** function _dispLCD *****************
 11111 ;; Defined at:
 11112 ;;		line 187 in file "dispLCD4vias.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;  lin             1    wreg     unsigned char 
 11115 ;;  col             1    7[COMRAM] unsigned char 
 11116 ;;  str             2    8[COMRAM] PTR const unsigned char 
 11117 ;;		 -> STR_32(21), STR_31(21), STR_30(21), STR_29(2), 
 11118 ;;		 -> STR_28(2), STR_25(21), STR_24(21), STR_23(21), 
 11119 ;;		 -> STR_22(21), STR_21(21), STR_20(8), STR_19(21), 
 11120 ;;		 -> STR_18(21), STR_17(21), STR_16(21), STR_14(21), 
 11121 ;;		 -> STR_13(21), STR_12(2), STR_11(2), STR_10(21), 
 11122 ;;		 -> STR_9(21), STR_8(21), STR_7(21), STR_6(21), 
 11123 ;;		 -> STR_5(21), STR_3(21), STR_2(2), STR_1(2), 
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;  lin             1   11[COMRAM] unsigned char 
 11126 ;;  pos             1   10[COMRAM] unsigned char 
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  1    wreg      void 
 11129 ;; Registers used:
 11130 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11136 ;;      Params:         3       0       0       0       0       0       0       0       0
 11137 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11139 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11140 ;;Total ram usage:        5 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:    4
 11143 ;; This function calls:
 11144 ;;		_dispLCD_dataReg
 11145 ;;		_dispLCD_lincol
 11146 ;; This function is called by:
 11147 ;;		_main
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           	psect	text51
 11152  00323C                     __ptext51:
 11153                           	callstack 0
 11154  00323C                     _dispLCD:
 11155                           	callstack 26
 11156                           
 11157                           ;incstack = 0
 11158                           ;dispLCD@lin stored from wreg
 11159  00323C  6E31               	movwf	dispLCD@lin^0,c
 11160  00323E                     
 11161                           ;dispLCD4vias.c: 187: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 188: {;dispLCD4vias.c: 189:     char pos = col;
 11162  00323E  C02D  F030         	movff	dispLCD@col,dispLCD@pos
 11163  003242                     
 11164                           ;dispLCD4vias.c: 190:     dispLCD_lincol( lin, col );
 11165  003242  C02D  F028         	movff	dispLCD@col,dispLCD_lincol@col
 11166  003246  5031               	movf	dispLCD@lin^0,w,c
 11167  003248  EC3B  F017         	call	_dispLCD_lincol
 11168                           
 11169                           ;dispLCD4vias.c: 192:     while( *str )
 11170  00324C  EF33  F019         	goto	l5071
 11171  003250                     l5065:
 11172                           
 11173                           ;dispLCD4vias.c: 193:     {;dispLCD4vias.c: 194:         dispLCD_dataReg( *str );
 11174  003250  C02E  FFF6         	movff	dispLCD@str,tblptrl
 11175  003254  C02F  FFF7         	movff	dispLCD@str+1,tblptrh
 11176  003258                     	if	0	;tblptru may be non-zero
 11177  003258                     	endif
 11178  003258                     	if	0	;tblptru may be non-zero
 11179  003258                     	endif
 11180  003258  0008               	tblrd		*
 11181  00325A  50F5               	movf	tablat,w,c
 11182  00325C  ECD3  F018         	call	_dispLCD_dataReg
 11183  003260                     
 11184                           ;dispLCD4vias.c: 195:         ++str;
 11185  003260  4A2E               	infsnz	dispLCD@str^0,f,c
 11186  003262  2A2F               	incf	(dispLCD@str+1)^0,f,c
 11187  003264                     
 11188                           ;dispLCD4vias.c: 196:         ++pos;
 11189  003264  2A30               	incf	dispLCD@pos^0,f,c
 11190  003266                     l5071:
 11191                           
 11192                           ;dispLCD4vias.c: 192:     while( *str )
 11193  003266  C02E  FFF6         	movff	dispLCD@str,tblptrl
 11194  00326A  C02F  FFF7         	movff	dispLCD@str+1,tblptrh
 11195  00326E                     	if	0	;tblptru may be non-zero
 11196  00326E                     	endif
 11197  00326E                     	if	0	;tblptru may be non-zero
 11198  00326E                     	endif
 11199  00326E  0008               	tblrd		*
 11200  003270  50F5               	movf	tablat,w,c
 11201  003272  0900               	iorlw	0
 11202  003274  A4D8               	btfss	status,2,c
 11203  003276  EF3F  F019         	goto	u3301
 11204  00327A  EF41  F019         	goto	u3300
 11205  00327E                     u3301:
 11206  00327E  EF28  F019         	goto	l5065
 11207  003282                     u3300:
 11208  003282  0012               	return		;funcret
 11209  003284                     __end_of_dispLCD:
 11210                           	callstack 0
 11211                           
 11212 ;; *************** function _dispLCD_lincol *****************
 11213 ;; Defined at:
 11214 ;;		line 150 in file "dispLCD4vias.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  lin             1    wreg     unsigned char 
 11217 ;;  col             1    2[COMRAM] unsigned char 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  lin             1    5[COMRAM] unsigned char 
 11220 ;;  aux             1    6[COMRAM] unsigned char 
 11221 ;; Return value:  Size  Location     Type
 11222 ;;                  1    wreg      void 
 11223 ;; Registers used:
 11224 ;;		wreg, status,2, status,0, cstack
 11225 ;; Tracked objects:
 11226 ;;		On entry : 0/0
 11227 ;;		On exit  : 0/0
 11228 ;;		Unchanged: 0/0
 11229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11230 ;;      Params:         1       0       0       0       0       0       0       0       0
 11231 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11232 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11233 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11234 ;;Total ram usage:        5 bytes
 11235 ;; Hardware stack levels used:    1
 11236 ;; Hardware stack levels required when called:    3
 11237 ;; This function calls:
 11238 ;;		_dispLCD_instReg
 11239 ;; This function is called by:
 11240 ;;		_main
 11241 ;;		_dispLCD
 11242 ;;		_dispLCD_num
 11243 ;;		_dispLCD_str
 11244 ;;		_fifo_print
 11245 ;;		_printExec
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           	psect	text52
 11250  002E76                     __ptext52:
 11251                           	callstack 0
 11252  002E76                     _dispLCD_lincol:
 11253                           	callstack 25
 11254                           
 11255                           ;incstack = 0
 11256                           ;dispLCD_lincol@lin stored from wreg
 11257  002E76  6E2B               	movwf	dispLCD_lincol@lin^0,c
 11258  002E78                     
 11259                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
 11260  002E78  0E00               	movlw	0
 11261  002E7A  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11262                           
 11263                           ;dispLCD4vias.c: 154:     switch(lin)
 11264  002E7C  EF4C  F017         	goto	l4545
 11265  002E80                     l4537:
 11266  002E80  0E40               	movlw	64
 11267  002E82  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11268  002E84  EF65  F017         	goto	l4547
 11269  002E88                     l4539:
 11270  002E88  0E14               	movlw	20
 11271  002E8A  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11272  002E8C  EF65  F017         	goto	l4547
 11273  002E90                     l4541:
 11274  002E90  0E54               	movlw	84
 11275  002E92  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11276  002E94  EF65  F017         	goto	l4547
 11277  002E98                     l4545:
 11278  002E98  502B               	movf	dispLCD_lincol@lin^0,w,c
 11279  002E9A  6E29               	movwf	??_dispLCD_lincol^0,c
 11280  002E9C  6A2A               	clrf	(??_dispLCD_lincol+1)^0,c
 11281                           
 11282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11283                           ; Switch size 1, requested type "simple"
 11284                           ; Number of cases is 1, Range of values is 0 to 0
 11285                           ; switch strategies available:
 11286                           ; Name         Instructions Cycles
 11287                           ; simple_byte            4     3 (average)
 11288                           ;	Chosen strategy is simple_byte
 11289  002E9E  502A               	movf	(??_dispLCD_lincol+1)^0,w,c
 11290  002EA0  0A00               	xorlw	0	; case 0
 11291  002EA2  B4D8               	btfsc	status,2,c
 11292  002EA4  EF56  F017         	goto	l7149
 11293  002EA8  EF65  F017         	goto	l4547
 11294  002EAC                     l7149:
 11295                           
 11296                           ; Switch size 1, requested type "simple"
 11297                           ; Number of cases is 3, Range of values is 1 to 3
 11298                           ; switch strategies available:
 11299                           ; Name         Instructions Cycles
 11300                           ; simple_byte           10     6 (average)
 11301                           ;	Chosen strategy is simple_byte
 11302  002EAC  5029               	movf	??_dispLCD_lincol^0,w,c
 11303  002EAE  0A01               	xorlw	1	; case 1
 11304  002EB0  B4D8               	btfsc	status,2,c
 11305  002EB2  EF40  F017         	goto	l4537
 11306  002EB6  0A03               	xorlw	3	; case 2
 11307  002EB8  B4D8               	btfsc	status,2,c
 11308  002EBA  EF44  F017         	goto	l4539
 11309  002EBE  0A01               	xorlw	1	; case 3
 11310  002EC0  B4D8               	btfsc	status,2,c
 11311  002EC2  EF48  F017         	goto	l4541
 11312  002EC6  EF65  F017         	goto	l4547
 11313  002ECA                     l4547:
 11314                           
 11315                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
 11316  002ECA  502C               	movf	dispLCD_lincol@aux^0,w,c
 11317  002ECC  2428               	addwf	dispLCD_lincol@col^0,w,c
 11318  002ECE  0B7F               	andlw	127
 11319  002ED0  0F80               	addlw	128
 11320  002ED2  EC73  F012         	call	_dispLCD_instReg
 11321  002ED6  0012               	return		;funcret
 11322  002ED8                     __end_of_dispLCD_lincol:
 11323                           	callstack 0
 11324                           
 11325 ;; *************** function _dispLCD_instReg *****************
 11326 ;; Defined at:
 11327 ;;		line 101 in file "dispLCD4vias.c"
 11328 ;; Parameters:    Size  Location     Type
 11329 ;;  i               1    wreg     unsigned char 
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;  i               1    1[COMRAM] unsigned char 
 11332 ;; Return value:  Size  Location     Type
 11333 ;;                  1    wreg      void 
 11334 ;; Registers used:
 11335 ;;		wreg, status,2, status,0
 11336 ;; Tracked objects:
 11337 ;;		On entry : 0/0
 11338 ;;		On exit  : 0/0
 11339 ;;		Unchanged: 0/0
 11340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11341 ;;      Params:         0       0       0       0       0       0       0       0       0
 11342 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11343 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11344 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11345 ;;Total ram usage:        2 bytes
 11346 ;; Hardware stack levels used:    1
 11347 ;; Hardware stack levels required when called:    2
 11348 ;; This function calls:
 11349 ;;		Nothing
 11350 ;; This function is called by:
 11351 ;;		_dispLCD_lincol
 11352 ;;		_dispLCD_init
 11353 ;;		_dispLCD_clr
 11354 ;; This function uses a non-reentrant model
 11355 ;;
 11356                           
 11357                           	psect	text53
 11358  0024E6                     __ptext53:
 11359                           	callstack 0
 11360  0024E6                     _dispLCD_instReg:
 11361                           	callstack 25
 11362                           
 11363                           ;incstack = 0
 11364                           ;dispLCD_instReg@i stored from wreg
 11365  0024E6  6E27               	movwf	dispLCD_instReg@i^0,c
 11366  0024E8                     
 11367                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
 11368  0024E8  9C8A               	bcf	138,6,c	;volatile
 11369  0024EA                     
 11370                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
 11371  0024EA  C027  F026         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 11372  0024EE  3A26               	swapf	??_dispLCD_instReg^0,f,c
 11373  0024F0  0E0F               	movlw	15
 11374  0024F2  1626               	andwf	??_dispLCD_instReg^0,f,c
 11375  0024F4  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11376  0024F6  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11377  0024F8  508A               	movf	138,w,c	;volatile
 11378  0024FA  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11379  0024FC  0BC3               	andlw	-61
 11380  0024FE  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11381  002500  6E8A               	movwf	138,c	;volatile
 11382  002502                     
 11383                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
 11384  002502  9E8A               	bcf	138,7,c	;volatile
 11385                           
 11386                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
 11387  002504  0427               	decf	dispLCD_instReg@i^0,w,c
 11388  002506  B4D8               	btfsc	status,2,c
 11389  002508  EF88  F012         	goto	u2571
 11390  00250C  EF8A  F012         	goto	u2570
 11391  002510                     u2571:
 11392  002510  EF93  F012         	goto	l4451
 11393  002514                     u2570:
 11394  002514  0E02               	movlw	2
 11395  002516  1827               	xorwf	dispLCD_instReg@i^0,w,c
 11396  002518  A4D8               	btfss	status,2,c
 11397  00251A  EF91  F012         	goto	u2581
 11398  00251E  EF93  F012         	goto	u2580
 11399  002522                     u2581:
 11400  002522  EF9C  F012         	goto	l4453
 11401  002526                     u2580:
 11402  002526                     l4451:
 11403                           
 11404                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
 11405  002526  0E0D               	movlw	13
 11406  002528  6E26               	movwf	??_dispLCD_instReg^0,c
 11407  00252A  0EFC               	movlw	252
 11408  00252C                     u5027:
 11409  00252C  2EE8               	decfsz	wreg,f,c
 11410  00252E  D7FE               	bra	u5027
 11411  002530  2E26               	decfsz	??_dispLCD_instReg^0,f,c
 11412  002532  D7FC               	bra	u5027
 11413  002534  EFA0  F012         	goto	l4455
 11414  002538                     l4453:
 11415                           
 11416                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 11417  002538  0E42               	movlw	66
 11418  00253A                     u5037:
 11419  00253A  2EE8               	decfsz	wreg,f,c
 11420  00253C  D7FE               	bra	u5037
 11421  00253E  D000               	nop2	
 11422  002540                     l4455:
 11423                           
 11424                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
 11425  002540  8E8A               	bsf	138,7,c	;volatile
 11426  002542                     
 11427                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
 11428  002542  5027               	movf	dispLCD_instReg@i^0,w,c
 11429  002544  0BF0               	andlw	240
 11430  002546  0A20               	xorlw	32
 11431  002548  A4D8               	btfss	status,2,c
 11432  00254A  EFA9  F012         	goto	u2591
 11433  00254E  EFAB  F012         	goto	u2590
 11434  002552                     u2591:
 11435  002552  EFBE  F012         	goto	l4469
 11436  002556                     u2590:
 11437  002556                     
 11438                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
 11439  002556  9C8A               	bcf	138,6,c	;volatile
 11440  002558                     
 11441                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
 11442  002558  C027  F026         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 11443  00255C  3A26               	swapf	??_dispLCD_instReg^0,f,c
 11444  00255E  0E0F               	movlw	15
 11445  002560  1626               	andwf	??_dispLCD_instReg^0,f,c
 11446  002562  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11447  002564  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11448  002566  508A               	movf	138,w,c	;volatile
 11449  002568  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11450  00256A  0BC3               	andlw	-61
 11451  00256C  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11452  00256E  6E8A               	movwf	138,c	;volatile
 11453  002570                     
 11454                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
 11455  002570  9E8A               	bcf	138,7,c	;volatile
 11456  002572                     
 11457                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 11458  002572  0E42               	movlw	66
 11459  002574                     u5047:
 11460  002574  2EE8               	decfsz	wreg,f,c
 11461  002576  D7FE               	bra	u5047
 11462  002578  D000               	nop2	
 11463  00257A                     
 11464                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
 11465  00257A  8E8A               	bsf	138,7,c	;volatile
 11466  00257C                     l4469:
 11467                           
 11468                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
 11469  00257C  9C8A               	bcf	138,6,c	;volatile
 11470  00257E                     
 11471                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
 11472  00257E  C027  F026         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 11473  002582  0E0F               	movlw	15
 11474  002584  1626               	andwf	??_dispLCD_instReg^0,f,c
 11475  002586  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11476  002588  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11477  00258A  508A               	movf	138,w,c	;volatile
 11478  00258C  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11479  00258E  0BC3               	andlw	-61
 11480  002590  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11481  002592  6E8A               	movwf	138,c	;volatile
 11482  002594                     
 11483                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
 11484  002594  9E8A               	bcf	138,7,c	;volatile
 11485  002596                     
 11486                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
 11487  002596  0427               	decf	dispLCD_instReg@i^0,w,c
 11488  002598  B4D8               	btfsc	status,2,c
 11489  00259A  EFD1  F012         	goto	u2601
 11490  00259E  EFD3  F012         	goto	u2600
 11491  0025A2                     u2601:
 11492  0025A2  EFDC  F012         	goto	l4479
 11493  0025A6                     u2600:
 11494  0025A6  0E02               	movlw	2
 11495  0025A8  1827               	xorwf	dispLCD_instReg@i^0,w,c
 11496  0025AA  A4D8               	btfss	status,2,c
 11497  0025AC  EFDA  F012         	goto	u2611
 11498  0025B0  EFDC  F012         	goto	u2610
 11499  0025B4                     u2611:
 11500  0025B4  EFE5  F012         	goto	l4481
 11501  0025B8                     u2610:
 11502  0025B8                     l4479:
 11503                           
 11504                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
 11505  0025B8  0E0D               	movlw	13
 11506  0025BA  6E26               	movwf	??_dispLCD_instReg^0,c
 11507  0025BC  0EFC               	movlw	252
 11508  0025BE                     u5057:
 11509  0025BE  2EE8               	decfsz	wreg,f,c
 11510  0025C0  D7FE               	bra	u5057
 11511  0025C2  2E26               	decfsz	??_dispLCD_instReg^0,f,c
 11512  0025C4  D7FC               	bra	u5057
 11513  0025C6  EFE9  F012         	goto	l4483
 11514  0025CA                     l4481:
 11515                           
 11516                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 11517  0025CA  0E42               	movlw	66
 11518  0025CC                     u5067:
 11519  0025CC  2EE8               	decfsz	wreg,f,c
 11520  0025CE  D7FE               	bra	u5067
 11521  0025D0  D000               	nop2	
 11522  0025D2                     l4483:
 11523                           
 11524                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
 11525  0025D2  8E8A               	bsf	138,7,c	;volatile
 11526  0025D4  0012               	return		;funcret
 11527  0025D6                     __end_of_dispLCD_instReg:
 11528                           	callstack 0
 11529                           
 11530 ;; *************** function _dispLCD_dataReg *****************
 11531 ;; Defined at:
 11532 ;;		line 134 in file "dispLCD4vias.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  d               1    wreg     unsigned char 
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  d               1    1[COMRAM] unsigned char 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      void 
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11546 ;;      Params:         0       0       0       0       0       0       0       0       0
 11547 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11548 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11549 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11550 ;;Total ram usage:        2 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    2
 11553 ;; This function calls:
 11554 ;;		Nothing
 11555 ;; This function is called by:
 11556 ;;		_main
 11557 ;;		_dispLCD
 11558 ;;		_dispLCD_num
 11559 ;;		_dispLCD_str
 11560 ;;		_fifo_print
 11561 ;;		_printExec
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           	psect	text54
 11566  0031A6                     __ptext54:
 11567                           	callstack 0
 11568  0031A6                     _dispLCD_dataReg:
 11569                           	callstack 26
 11570                           
 11571                           ;incstack = 0
 11572                           ;dispLCD_dataReg@d stored from wreg
 11573  0031A6  6E27               	movwf	dispLCD_dataReg@d^0,c
 11574  0031A8                     
 11575                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
 11576  0031A8  8C8A               	bsf	138,6,c	;volatile
 11577  0031AA                     
 11578                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
 11579  0031AA  C027  F026         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 11580  0031AE  3A26               	swapf	??_dispLCD_dataReg^0,f,c
 11581  0031B0  0E0F               	movlw	15
 11582  0031B2  1626               	andwf	??_dispLCD_dataReg^0,f,c
 11583  0031B4  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11584  0031B6  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11585  0031B8  508A               	movf	138,w,c	;volatile
 11586  0031BA  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11587  0031BC  0BC3               	andlw	-61
 11588  0031BE  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11589  0031C0  6E8A               	movwf	138,c	;volatile
 11590  0031C2                     
 11591                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
 11592  0031C2  9E8A               	bcf	138,7,c	;volatile
 11593  0031C4                     
 11594                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 11595  0031C4  0E42               	movlw	66
 11596  0031C6                     u5077:
 11597  0031C6  2EE8               	decfsz	wreg,f,c
 11598  0031C8  D7FE               	bra	u5077
 11599  0031CA  D000               	nop2	
 11600  0031CC                     
 11601                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
 11602  0031CC  8E8A               	bsf	138,7,c	;volatile
 11603  0031CE                     
 11604                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
 11605  0031CE  8C8A               	bsf	138,6,c	;volatile
 11606  0031D0                     
 11607                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
 11608  0031D0  C027  F026         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 11609  0031D4  0E0F               	movlw	15
 11610  0031D6  1626               	andwf	??_dispLCD_dataReg^0,f,c
 11611  0031D8  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11612  0031DA  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11613  0031DC  508A               	movf	138,w,c	;volatile
 11614  0031DE  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11615  0031E0  0BC3               	andlw	-61
 11616  0031E2  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11617  0031E4  6E8A               	movwf	138,c	;volatile
 11618  0031E6                     
 11619                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
 11620  0031E6  9E8A               	bcf	138,7,c	;volatile
 11621                           
 11622                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 11623  0031E8  0E42               	movlw	66
 11624  0031EA                     u5087:
 11625  0031EA  2EE8               	decfsz	wreg,f,c
 11626  0031EC  D7FE               	bra	u5087
 11627  0031EE  D000               	nop2	
 11628  0031F0                     
 11629                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
 11630  0031F0  8E8A               	bsf	138,7,c	;volatile
 11631  0031F2  0012               	return		;funcret
 11632  0031F4                     __end_of_dispLCD_dataReg:
 11633                           	callstack 0
 11634                           
 11635 ;; *************** function _dignum_conc *****************
 11636 ;; Defined at:
 11637 ;;		line 460 in file "fifo.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;  dig             1    wreg     unsigned char 
 11640 ;;  ptrNum          2    6[COMRAM] PTR unsigned int 
 11641 ;;		 -> main@ciclos(2), main@num(2), 
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;  dig             1   10[COMRAM] unsigned char 
 11644 ;; Return value:  Size  Location     Type
 11645 ;;                  1    wreg      void 
 11646 ;; Registers used:
 11647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11648 ;; Tracked objects:
 11649 ;;		On entry : 0/0
 11650 ;;		On exit  : 0/0
 11651 ;;		Unchanged: 0/0
 11652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11653 ;;      Params:         2       0       0       0       0       0       0       0       0
 11654 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11655 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11656 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11657 ;;Total ram usage:        5 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; Hardware stack levels required when called:    3
 11660 ;; This function calls:
 11661 ;;		___wmul
 11662 ;; This function is called by:
 11663 ;;		_main
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           	psect	text55
 11668  003284                     __ptext55:
 11669                           	callstack 0
 11670  003284                     _dignum_conc:
 11671                           	callstack 27
 11672                           
 11673                           ;incstack = 0
 11674                           ;dignum_conc@dig stored from wreg
 11675  003284  6E30               	movwf	dignum_conc@dig^0,c
 11676  003286                     
 11677                           ;fifo.c: 460: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 461: {;fifo.c: 
      +                          462:     *ptrNum = (*ptrNum * 10) + (dig - '0');
 11678  003286  0ED0               	movlw	208
 11679  003288  6E2E               	movwf	??_dignum_conc^0,c
 11680  00328A  0EFF               	movlw	255
 11681  00328C  6E2F               	movwf	(??_dignum_conc+1)^0,c
 11682  00328E  C02C  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 11683  003292  C02D  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 11684  003296  CFDE F026          	movff	postinc2,___wmul@multiplier
 11685  00329A  CFDD F027          	movff	postdec2,___wmul@multiplier+1
 11686  00329E  0E00               	movlw	0
 11687  0032A0  6E29               	movwf	(___wmul@multiplicand+1)^0,c
 11688  0032A2  0E0A               	movlw	10
 11689  0032A4  6E28               	movwf	___wmul@multiplicand^0,c
 11690  0032A6  EC2B  F01B         	call	___wmul	;wreg free
 11691  0032AA  5030               	movf	dignum_conc@dig^0,w,c
 11692  0032AC  2626               	addwf	?___wmul^0,f,c
 11693  0032AE  0E00               	movlw	0
 11694  0032B0  2227               	addwfc	(?___wmul+1)^0,f,c
 11695  0032B2  502E               	movf	??_dignum_conc^0,w,c
 11696  0032B4  2626               	addwf	?___wmul^0,f,c
 11697  0032B6  502F               	movf	(??_dignum_conc+1)^0,w,c
 11698  0032B8  2227               	addwfc	(?___wmul+1)^0,f,c
 11699  0032BA  C02C  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 11700  0032BE  C02D  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 11701  0032C2  C026  FFDE         	movff	?___wmul,postinc2
 11702  0032C6  C027  FFDD         	movff	?___wmul+1,postdec2
 11703  0032CA  0012               	return		;funcret
 11704  0032CC                     __end_of_dignum_conc:
 11705                           	callstack 0
 11706                           
 11707 ;; *************** function ___wmul *****************
 11708 ;; Defined at:
 11709 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;  multiplier      2    0[COMRAM] unsigned int 
 11712 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;  product         2    4[COMRAM] unsigned int 
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  2    0[COMRAM] unsigned int 
 11717 ;; Registers used:
 11718 ;;		wreg, status,2, status,0, prodl, prodh
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11724 ;;      Params:         4       0       0       0       0       0       0       0       0
 11725 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11726 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11727 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11728 ;;Total ram usage:        6 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:    2
 11731 ;; This function calls:
 11732 ;;		Nothing
 11733 ;; This function is called by:
 11734 ;;		_main
 11735 ;;		_dignum_conc
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           	psect	text56
 11740  003656                     __ptext56:
 11741                           	callstack 0
 11742  003656                     ___wmul:
 11743                           	callstack 27
 11744  003656  5026               	movf	___wmul@multiplier^0,w,c
 11745  003658  0228               	mulwf	___wmul@multiplicand^0,c
 11746  00365A  CFF3 F02A          	movff	prodl,___wmul@product
 11747  00365E  CFF4 F02B          	movff	prodh,___wmul@product+1
 11748  003662  5026               	movf	___wmul@multiplier^0,w,c
 11749  003664  0229               	mulwf	(___wmul@multiplicand+1)^0,c
 11750  003666  50F3               	movf	243,w,c
 11751  003668  262B               	addwf	(___wmul@product+1)^0,f,c
 11752  00366A  5027               	movf	(___wmul@multiplier+1)^0,w,c
 11753  00366C  0228               	mulwf	___wmul@multiplicand^0,c
 11754  00366E  50F3               	movf	243,w,c
 11755  003670  262B               	addwf	(___wmul@product+1)^0,f,c
 11756  003672  C02A  F026         	movff	___wmul@product,?___wmul
 11757  003676  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 11758  00367A  0012               	return		;funcret
 11759  00367C                     __end_of___wmul:
 11760                           	callstack 0
 11761                           
 11762 ;; *************** function _dignum_apagar *****************
 11763 ;; Defined at:
 11764 ;;		line 465 in file "fifo.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  ptrNum          2    7[COMRAM] PTR unsigned int 
 11767 ;;		 -> main@ciclos(2), main@num(2), 
 11768 ;; Auto vars:     Size  Location     Type
 11769 ;;		None
 11770 ;; Return value:  Size  Location     Type
 11771 ;;                  1    wreg      void 
 11772 ;; Registers used:
 11773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11774 ;; Tracked objects:
 11775 ;;		On entry : 0/0
 11776 ;;		On exit  : 0/0
 11777 ;;		Unchanged: 0/0
 11778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11779 ;;      Params:         2       0       0       0       0       0       0       0       0
 11780 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11781 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11782 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11783 ;;Total ram usage:        2 bytes
 11784 ;; Hardware stack levels used:    1
 11785 ;; Hardware stack levels required when called:    3
 11786 ;; This function calls:
 11787 ;;		___lwdiv
 11788 ;; This function is called by:
 11789 ;;		_main
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           	psect	text57
 11794  003550                     __ptext57:
 11795                           	callstack 0
 11796  003550                     _dignum_apagar:
 11797                           	callstack 27
 11798  003550                     
 11799                           ;fifo.c: 465: void dignum_apagar(unsigned int * ptrNum );fifo.c: 466: {;fifo.c: 467:    
      +                           *ptrNum /= 10;
 11800  003550  C02D  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 11801  003554  C02E  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 11802  003558  CFDE F026          	movff	postinc2,___lwdiv@dividend
 11803  00355C  CFDD F027          	movff	postdec2,___lwdiv@dividend+1
 11804  003560  0E00               	movlw	0
 11805  003562  6E29               	movwf	(___lwdiv@divisor+1)^0,c
 11806  003564  0E0A               	movlw	10
 11807  003566  6E28               	movwf	___lwdiv@divisor^0,c
 11808  003568  ECCC  F016         	call	___lwdiv	;wreg free
 11809  00356C  C02D  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 11810  003570  C02E  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 11811  003574  C026  FFDE         	movff	?___lwdiv,postinc2
 11812  003578  C027  FFDD         	movff	?___lwdiv+1,postdec2
 11813  00357C  0012               	return		;funcret
 11814  00357E                     __end_of_dignum_apagar:
 11815                           	callstack 0
 11816                           
 11817 ;; *************** function ___lwdiv *****************
 11818 ;; Defined at:
 11819 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  dividend        2    0[COMRAM] unsigned int 
 11822 ;;  divisor         2    2[COMRAM] unsigned int 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  quotient        2    4[COMRAM] unsigned int 
 11825 ;;  counter         1    6[COMRAM] unsigned char 
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  2    0[COMRAM] unsigned int 
 11828 ;; Registers used:
 11829 ;;		wreg, status,2, status,0
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11835 ;;      Params:         4       0       0       0       0       0       0       0       0
 11836 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11837 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11838 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11839 ;;Total ram usage:        7 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    2
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_dignum_apagar
 11846 ;; This function uses a non-reentrant model
 11847 ;;
 11848                           
 11849                           	psect	text58
 11850  002D98                     __ptext58:
 11851                           	callstack 0
 11852  002D98                     ___lwdiv:
 11853                           	callstack 27
 11854  002D98  0E00               	movlw	0
 11855  002D9A  6E2B               	movwf	(___lwdiv@quotient+1)^0,c
 11856  002D9C  0E00               	movlw	0
 11857  002D9E  6E2A               	movwf	___lwdiv@quotient^0,c
 11858  002DA0  5028               	movf	___lwdiv@divisor^0,w,c
 11859  002DA2  1029               	iorwf	(___lwdiv@divisor+1)^0,w,c
 11860  002DA4  B4D8               	btfsc	status,2,c
 11861  002DA6  EFD7  F016         	goto	u3251
 11862  002DAA  EFD9  F016         	goto	u3250
 11863  002DAE                     u3251:
 11864  002DAE  EF01  F017         	goto	l1517
 11865  002DB2                     u3250:
 11866  002DB2  0E01               	movlw	1
 11867  002DB4  6E2C               	movwf	___lwdiv@counter^0,c
 11868  002DB6  EFE1  F016         	goto	l4961
 11869  002DBA                     l4959:
 11870  002DBA  90D8               	bcf	status,0,c
 11871  002DBC  3628               	rlcf	___lwdiv@divisor^0,f,c
 11872  002DBE  3629               	rlcf	(___lwdiv@divisor+1)^0,f,c
 11873  002DC0  2A2C               	incf	___lwdiv@counter^0,f,c
 11874  002DC2                     l4961:
 11875  002DC2  AE29               	btfss	(___lwdiv@divisor+1)^0,7,c
 11876  002DC4  EFE6  F016         	goto	u3261
 11877  002DC8  EFE8  F016         	goto	u3260
 11878  002DCC                     u3261:
 11879  002DCC  EFDD  F016         	goto	l4959
 11880  002DD0                     u3260:
 11881  002DD0                     l4963:
 11882  002DD0  90D8               	bcf	status,0,c
 11883  002DD2  362A               	rlcf	___lwdiv@quotient^0,f,c
 11884  002DD4  362B               	rlcf	(___lwdiv@quotient+1)^0,f,c
 11885  002DD6  5028               	movf	___lwdiv@divisor^0,w,c
 11886  002DD8  5C26               	subwf	___lwdiv@dividend^0,w,c
 11887  002DDA  5029               	movf	(___lwdiv@divisor+1)^0,w,c
 11888  002DDC  5827               	subwfb	(___lwdiv@dividend+1)^0,w,c
 11889  002DDE  A0D8               	btfss	status,0,c
 11890  002DE0  EFF4  F016         	goto	u3271
 11891  002DE4  EFF6  F016         	goto	u3270
 11892  002DE8                     u3271:
 11893  002DE8  EFFB  F016         	goto	l4971
 11894  002DEC                     u3270:
 11895  002DEC  5028               	movf	___lwdiv@divisor^0,w,c
 11896  002DEE  5E26               	subwf	___lwdiv@dividend^0,f,c
 11897  002DF0  5029               	movf	(___lwdiv@divisor+1)^0,w,c
 11898  002DF2  5A27               	subwfb	(___lwdiv@dividend+1)^0,f,c
 11899  002DF4  802A               	bsf	___lwdiv@quotient^0,0,c
 11900  002DF6                     l4971:
 11901  002DF6  90D8               	bcf	status,0,c
 11902  002DF8  3229               	rrcf	(___lwdiv@divisor+1)^0,f,c
 11903  002DFA  3228               	rrcf	___lwdiv@divisor^0,f,c
 11904  002DFC  2E2C               	decfsz	___lwdiv@counter^0,f,c
 11905  002DFE  EFE8  F016         	goto	l4963
 11906  002E02                     l1517:
 11907  002E02  C02A  F026         	movff	___lwdiv@quotient,?___lwdiv
 11908  002E06  C02B  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11909  002E0A  0012               	return		;funcret
 11910  002E0C                     __end_of___lwdiv:
 11911                           	callstack 0
 11912                           
 11913 ;; *************** function _deletar_receita *****************
 11914 ;; Defined at:
 11915 ;;		line 77 in file "eeprom.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  receita         1    wreg     unsigned char 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  receita         1    6[COMRAM] unsigned char 
 11920 ;;  i               1    7[COMRAM] unsigned char 
 11921 ;;  aux             2    4[COMRAM] int 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      void 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2, status,0, cstack
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11931 ;;      Params:         0       0       0       0       0       0       0       0       0
 11932 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11934 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11935 ;;Total ram usage:        4 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    3
 11938 ;; This function calls:
 11939 ;;		_EEPROM_write
 11940 ;;		_end_receita
 11941 ;; This function is called by:
 11942 ;;		_main
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           	psect	text59
 11947  00344E                     __ptext59:
 11948                           	callstack 0
 11949  00344E                     _deletar_receita:
 11950                           	callstack 27
 11951                           
 11952                           ;incstack = 0
 11953                           ;deletar_receita@receita stored from wreg
 11954  00344E  6E2C               	movwf	deletar_receita@receita^0,c
 11955  003450                     
 11956                           ;eeprom.c: 77: void deletar_receita (char receita);eeprom.c: 78: {;eeprom.c: 79:    int 
      +                          aux;;eeprom.c: 80:    aux = end_receita(receita);
 11957  003450  C02C  F026         	movff	deletar_receita@receita,end_receita@x
 11958  003454  6A27               	clrf	(end_receita@x+1)^0,c
 11959  003456  EC3E  F01B         	call	_end_receita	;wreg free
 11960  00345A  C026  F02A         	movff	?_end_receita,deletar_receita@aux
 11961  00345E  C027  F02B         	movff	?_end_receita+1,deletar_receita@aux+1
 11962  003462                     
 11963                           ;eeprom.c: 81:    for( char i=0 ; i<16; i++)
 11964  003462  0E00               	movlw	0
 11965  003464  6E2D               	movwf	deletar_receita@i^0,c
 11966  003466                     l5579:
 11967                           
 11968                           ;eeprom.c: 82:         EEPROM_write((aux+i),0);
 11969  003466  0E00               	movlw	0
 11970  003468  6E26               	movwf	EEPROM_write@data^0,c
 11971  00346A  502D               	movf	deletar_receita@i^0,w,c
 11972  00346C  242A               	addwf	deletar_receita@aux^0,w,c
 11973  00346E  ECBF  F01A         	call	_EEPROM_write
 11974  003472  2A2D               	incf	deletar_receita@i^0,f,c
 11975  003474  0E0F               	movlw	15
 11976  003476  642D               	cpfsgt	deletar_receita@i^0,c
 11977  003478  EF40  F01A         	goto	u3811
 11978  00347C  EF42  F01A         	goto	u3810
 11979  003480                     u3811:
 11980  003480  EF33  F01A         	goto	l5579
 11981  003484                     u3810:
 11982  003484  0012               	return		;funcret
 11983  003486                     __end_of_deletar_receita:
 11984                           	callstack 0
 11985                           
 11986 ;; *************** function _EEPROM_write *****************
 11987 ;; Defined at:
 11988 ;;		line 24 in file "eeprom.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  addr            1    wreg     unsigned char 
 11991 ;;  data            1    0[COMRAM] unsigned char 
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  addr            1    1[COMRAM] unsigned char 
 11994 ;; Return value:  Size  Location     Type
 11995 ;;                  1    wreg      void 
 11996 ;; Registers used:
 11997 ;;		wreg, status,2
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12003 ;;      Params:         1       0       0       0       0       0       0       0       0
 12004 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12005 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12006 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12007 ;;Total ram usage:        2 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; Hardware stack levels required when called:    2
 12010 ;; This function calls:
 12011 ;;		Nothing
 12012 ;; This function is called by:
 12013 ;;		_salvar_receita
 12014 ;;		_salvar_dado
 12015 ;;		_deletar_receita
 12016 ;;		_formatar_receitas
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           	psect	text60
 12021  00357E                     __ptext60:
 12022                           	callstack 0
 12023  00357E                     _EEPROM_write:
 12024                           	callstack 27
 12025                           
 12026                           ;incstack = 0
 12027                           ;EEPROM_write@addr stored from wreg
 12028  00357E  6E27               	movwf	EEPROM_write@addr^0,c
 12029  003580                     
 12030                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
 12031  003580  9EF2               	bcf	242,7,c	;volatile
 12032  003582                     
 12033                           ;eeprom.c: 27:     EEADR = addr;
 12034  003582  C027  FFA9         	movff	EEPROM_write@addr,4009	;volatile
 12035  003586                     
 12036                           ;eeprom.c: 28:     EEDATA = data;
 12037  003586  C026  FFA8         	movff	EEPROM_write@data,4008	;volatile
 12038  00358A                     
 12039                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
 12040  00358A  9EA6               	bcf	166,7,c	;volsfr
 12041  00358C                     
 12042                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
 12043  00358C  84A6               	bsf	166,2,c	;volsfr
 12044  00358E                     
 12045                           ;eeprom.c: 31:     EECON2 = 0x55;
 12046  00358E  0E55               	movlw	85
 12047  003590  6EA7               	movwf	167,c	;volsfr
 12048  003592                     
 12049                           ;eeprom.c: 32:     EECON2 = 0xAA;
 12050  003592  0EAA               	movlw	170
 12051  003594  6EA7               	movwf	167,c	;volsfr
 12052  003596                     
 12053                           ;eeprom.c: 33:     EECON1bits.WR = 1;
 12054  003596  82A6               	bsf	166,1,c	;volsfr
 12055  003598                     l530:
 12056  003598  B2A6               	btfsc	166,1,c	;volsfr
 12057  00359A  EFD1  F01A         	goto	u3021
 12058  00359E  EFD3  F01A         	goto	u3020
 12059  0035A2                     u3021:
 12060  0035A2  EFCC  F01A         	goto	l530
 12061  0035A6                     u3020:
 12062  0035A6                     
 12063                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
 12064  0035A6  94A6               	bcf	166,2,c	;volsfr
 12065                           
 12066                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
 12067  0035A8  8EF2               	bsf	242,7,c	;volatile
 12068  0035AA  0012               	return		;funcret
 12069  0035AC                     __end_of_EEPROM_write:
 12070                           	callstack 0
 12071                           
 12072 ;; *************** function _buscar_receita *****************
 12073 ;; Defined at:
 12074 ;;		line 55 in file "eeprom.c"
 12075 ;; Parameters:    Size  Location     Type
 12076 ;;  adrs            1    wreg     unsigned char 
 12077 ;;  data            2    6[COMRAM] PTR unsigned char 
 12078 ;;		 -> main@vetor_aux(16), 
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;  adrs            1   10[COMRAM] unsigned char 
 12081 ;;  i               1   11[COMRAM] unsigned char 
 12082 ;;  aux             2    8[COMRAM] int 
 12083 ;; Return value:  Size  Location     Type
 12084 ;;                  1    wreg      void 
 12085 ;; Registers used:
 12086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12092 ;;      Params:         2       0       0       0       0       0       0       0       0
 12093 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12094 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12095 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12096 ;;Total ram usage:        6 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    3
 12099 ;; This function calls:
 12100 ;;		_EEPROM_read
 12101 ;;		_end_receita
 12102 ;; This function is called by:
 12103 ;;		_main
 12104 ;; This function uses a non-reentrant model
 12105 ;;
 12106                           
 12107                           	psect	text61
 12108  003358                     __ptext61:
 12109                           	callstack 0
 12110  003358                     _buscar_receita:
 12111                           	callstack 27
 12112                           
 12113                           ;incstack = 0
 12114                           ;buscar_receita@adrs stored from wreg
 12115  003358  6E30               	movwf	buscar_receita@adrs^0,c
 12116  00335A                     
 12117                           ;eeprom.c: 55: void buscar_receita (char adrs, unsigned char * data );eeprom.c: 56: {;ee
      +                          prom.c: 57:     int aux;;eeprom.c: 58:     aux = end_receita(adrs);
 12118  00335A  C030  F026         	movff	buscar_receita@adrs,end_receita@x
 12119  00335E  6A27               	clrf	(end_receita@x+1)^0,c
 12120  003360  EC3E  F01B         	call	_end_receita	;wreg free
 12121  003364  C026  F02E         	movff	?_end_receita,buscar_receita@aux
 12122  003368  C027  F02F         	movff	?_end_receita+1,buscar_receita@aux+1
 12123  00336C                     
 12124                           ;eeprom.c: 59:     for( char i=0; i<16; i++ )
 12125  00336C  0E00               	movlw	0
 12126  00336E  6E31               	movwf	buscar_receita@i^0,c
 12127  003370                     l5565:
 12128                           
 12129                           ;eeprom.c: 60:        *(data+i) = EEPROM_read(aux+i);
 12130  003370  5031               	movf	buscar_receita@i^0,w,c
 12131  003372  242C               	addwf	buscar_receita@data^0,w,c
 12132  003374  6ED9               	movwf	fsr2l,c
 12133  003376  0E00               	movlw	0
 12134  003378  202D               	addwfc	(buscar_receita@data+1)^0,w,c
 12135  00337A  6EDA               	movwf	fsr2h,c
 12136  00337C  5031               	movf	buscar_receita@i^0,w,c
 12137  00337E  242E               	addwf	buscar_receita@aux^0,w,c
 12138  003380  EC0F  F01C         	call	_EEPROM_read
 12139  003384  6EDF               	movwf	indf2,c
 12140  003386  2A31               	incf	buscar_receita@i^0,f,c
 12141  003388  0E0F               	movlw	15
 12142  00338A  6431               	cpfsgt	buscar_receita@i^0,c
 12143  00338C  EFCA  F019         	goto	u3801
 12144  003390  EFCC  F019         	goto	u3800
 12145  003394                     u3801:
 12146  003394  EFB8  F019         	goto	l5565
 12147  003398                     u3800:
 12148  003398  0012               	return		;funcret
 12149  00339A                     __end_of_buscar_receita:
 12150                           	callstack 0
 12151                           
 12152 ;; *************** function _buscar_dado *****************
 12153 ;; Defined at:
 12154 ;;		line 70 in file "eeprom.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;  adrs            1    wreg     unsigned char 
 12157 ;;  col             1    6[COMRAM] unsigned char 
 12158 ;;  data            2    7[COMRAM] PTR unsigned char 
 12159 ;;		 -> main@init_cond(1), 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;  adrs            1   11[COMRAM] unsigned char 
 12162 ;;  aux             2    9[COMRAM] int 
 12163 ;; Return value:  Size  Location     Type
 12164 ;;                  1    wreg      void 
 12165 ;; Registers used:
 12166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12167 ;; Tracked objects:
 12168 ;;		On entry : 0/0
 12169 ;;		On exit  : 0/0
 12170 ;;		Unchanged: 0/0
 12171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12172 ;;      Params:         3       0       0       0       0       0       0       0       0
 12173 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12174 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12175 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12176 ;;Total ram usage:        6 bytes
 12177 ;; Hardware stack levels used:    1
 12178 ;; Hardware stack levels required when called:    3
 12179 ;; This function calls:
 12180 ;;		_EEPROM_read
 12181 ;;		_end_receita
 12182 ;; This function is called by:
 12183 ;;		_main
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           	psect	text62
 12188  00362E                     __ptext62:
 12189                           	callstack 0
 12190  00362E                     _buscar_dado:
 12191                           	callstack 27
 12192                           
 12193                           ;incstack = 0
 12194                           ;buscar_dado@adrs stored from wreg
 12195  00362E  6E31               	movwf	buscar_dado@adrs^0,c
 12196  003630                     
 12197                           ;eeprom.c: 70: void buscar_dado (char adrs, char col, unsigned char *data);eeprom.c: 71:
      +                           {;eeprom.c: 72:     int aux;;eeprom.c: 73:     aux = end_receita(adrs);
 12198  003630  C031  F026         	movff	buscar_dado@adrs,end_receita@x
 12199  003634  6A27               	clrf	(end_receita@x+1)^0,c
 12200  003636  EC3E  F01B         	call	_end_receita	;wreg free
 12201  00363A  C026  F02F         	movff	?_end_receita,buscar_dado@aux
 12202  00363E  C027  F030         	movff	?_end_receita+1,buscar_dado@aux+1
 12203  003642                     
 12204                           ;eeprom.c: 74:     *data = EEPROM_read((aux+col));
 12205  003642  502C               	movf	buscar_dado@col^0,w,c
 12206  003644  242F               	addwf	buscar_dado@aux^0,w,c
 12207  003646  EC0F  F01C         	call	_EEPROM_read
 12208  00364A  C02D  FFD9         	movff	buscar_dado@data,fsr2l
 12209  00364E  C02E  FFDA         	movff	buscar_dado@data+1,fsr2h
 12210  003652  6EDF               	movwf	indf2,c
 12211  003654  0012               	return		;funcret
 12212  003656                     __end_of_buscar_dado:
 12213                           	callstack 0
 12214                           
 12215 ;; *************** function _end_receita *****************
 12216 ;; Defined at:
 12217 ;;		line 41 in file "eeprom.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  x               2    0[COMRAM] int 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;		None
 12222 ;; Return value:  Size  Location     Type
 12223 ;;                  2    0[COMRAM] int 
 12224 ;; Registers used:
 12225 ;;		wreg, status,2, status,0
 12226 ;; Tracked objects:
 12227 ;;		On entry : 0/0
 12228 ;;		On exit  : 0/0
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12231 ;;      Params:         2       0       0       0       0       0       0       0       0
 12232 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12233 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12234 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12235 ;;Total ram usage:        4 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    2
 12238 ;; This function calls:
 12239 ;;		Nothing
 12240 ;; This function is called by:
 12241 ;;		_salvar_receita
 12242 ;;		_buscar_receita
 12243 ;;		_salvar_dado
 12244 ;;		_buscar_dado
 12245 ;;		_deletar_receita
 12246 ;;		_receita_livre
 12247 ;; This function uses a non-reentrant model
 12248 ;;
 12249                           
 12250                           	psect	text63
 12251  00367C                     __ptext63:
 12252                           	callstack 0
 12253  00367C                     _end_receita:
 12254                           	callstack 27
 12255  00367C                     
 12256                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
 12257  00367C  C026  F028         	movff	end_receita@x,??_end_receita
 12258  003680  C027  F029         	movff	end_receita@x+1,??_end_receita+1
 12259  003684  3A28               	swapf	??_end_receita^0,f,c
 12260  003686  3A29               	swapf	(??_end_receita+1)^0,f,c
 12261  003688  0EF0               	movlw	240
 12262  00368A  1629               	andwf	(??_end_receita+1)^0,f,c
 12263  00368C  5028               	movf	??_end_receita^0,w,c
 12264  00368E  0B0F               	andlw	15
 12265  003690  1229               	iorwf	(??_end_receita+1)^0,f,c
 12266  003692  0EF0               	movlw	240
 12267  003694  1628               	andwf	??_end_receita^0,f,c
 12268  003696  C028  F026         	movff	??_end_receita,?_end_receita
 12269  00369A  C029  F027         	movff	??_end_receita+1,?_end_receita+1
 12270  00369E  0012               	return		;funcret
 12271  0036A0                     __end_of_end_receita:
 12272                           	callstack 0
 12273                           
 12274 ;; *************** function _EEPROM_read *****************
 12275 ;; Defined at:
 12276 ;;		line 14 in file "eeprom.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;  addr            1    wreg     unsigned char 
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;  addr            1    0[COMRAM] unsigned char 
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      unsigned char 
 12283 ;; Registers used:
 12284 ;;		wreg, status,2
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12290 ;;      Params:         0       0       0       0       0       0       0       0       0
 12291 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12292 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12293 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12294 ;;Total ram usage:        1 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    2
 12297 ;; This function calls:
 12298 ;;		Nothing
 12299 ;; This function is called by:
 12300 ;;		_buscar_receita
 12301 ;;		_buscar_dado
 12302 ;;		_receita_livre
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           	psect	text64
 12307  00381E                     __ptext64:
 12308                           	callstack 0
 12309  00381E                     _EEPROM_read:
 12310                           	callstack 27
 12311                           
 12312                           ;incstack = 0
 12313                           ;EEPROM_read@addr stored from wreg
 12314  00381E  6E26               	movwf	EEPROM_read@addr^0,c
 12315  003820                     
 12316                           ;eeprom.c: 14: char EEPROM_read( unsigned char addr );eeprom.c: 15: {;eeprom.c: 17:     
      +                          EEADR = addr;
 12317  003820  C026  FFA9         	movff	EEPROM_read@addr,4009	;volatile
 12318  003824                     
 12319                           ;eeprom.c: 18:     EECON1bits.EEPGD = 0;
 12320  003824  9EA6               	bcf	166,7,c	;volsfr
 12321  003826                     
 12322                           ;eeprom.c: 19:     EECON1bits.RD = 1;
 12323  003826  80A6               	bsf	166,0,c	;volsfr
 12324  003828                     
 12325                           ;eeprom.c: 20:     return( EEDATA );
 12326  003828  50A8               	movf	168,w,c	;volatile
 12327  00382A  0012               	return		;funcret
 12328  00382C                     __end_of_EEPROM_read:
 12329                           	callstack 0
 12330                           
 12331 ;; *************** function _addIndicePassos *****************
 12332 ;; Defined at:
 12333 ;;		line 19 in file "fifo.c"
 12334 ;; Parameters:    Size  Location     Type
 12335 ;;		None
 12336 ;; Auto vars:     Size  Location     Type
 12337 ;;		None
 12338 ;; Return value:  Size  Location     Type
 12339 ;;                  1    wreg      void 
 12340 ;; Registers used:
 12341 ;;		wreg, status,2, status,0
 12342 ;; Tracked objects:
 12343 ;;		On entry : 0/0
 12344 ;;		On exit  : 0/0
 12345 ;;		Unchanged: 0/0
 12346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12347 ;;      Params:         0       0       0       0       0       0       0       0       0
 12348 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12349 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12350 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12351 ;;Total ram usage:        0 bytes
 12352 ;; Hardware stack levels used:    1
 12353 ;; Hardware stack levels required when called:    2
 12354 ;; This function calls:
 12355 ;;		Nothing
 12356 ;; This function is called by:
 12357 ;;		_main
 12358 ;; This function uses a non-reentrant model
 12359 ;;
 12360                           
 12361                           	psect	text65
 12362  003748                     __ptext65:
 12363                           	callstack 0
 12364  003748                     _addIndicePassos:
 12365                           	callstack 28
 12366  003748                     
 12367                           ;fifo.c: 21:     if(indice_passos < ind_fila)
 12368  003748  5058               	movf	_ind_fila^0,w,c
 12369  00374A  5C56               	subwf	_indice_passos^0,w,c
 12370  00374C  B0D8               	btfsc	status,0,c
 12371  00374E  EFAB  F01B         	goto	u3761
 12372  003752  EFAD  F01B         	goto	u3760
 12373  003756                     u3761:
 12374  003756  EFAE  F01B         	goto	l598
 12375  00375A                     u3760:
 12376  00375A                     
 12377                           ;fifo.c: 22:         indice_passos++;
 12378  00375A  2A56               	incf	_indice_passos^0,f,c
 12379  00375C                     l598:
 12380  00375C  0012               	return		;funcret
 12381  00375E                     __end_of_addIndicePassos:
 12382                           	callstack 0
 12383                           
 12384 ;; *************** function _addContCiclos *****************
 12385 ;; Defined at:
 12386 ;;		line 59 in file "fifo.c"
 12387 ;; Parameters:    Size  Location     Type
 12388 ;;		None
 12389 ;; Auto vars:     Size  Location     Type
 12390 ;;		None
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  1    wreg      void 
 12393 ;; Registers used:
 12394 ;;		status,2, status,0
 12395 ;; Tracked objects:
 12396 ;;		On entry : 0/0
 12397 ;;		On exit  : 0/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12400 ;;      Params:         0       0       0       0       0       0       0       0       0
 12401 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12402 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12403 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12404 ;;Total ram usage:        0 bytes
 12405 ;; Hardware stack levels used:    1
 12406 ;; Hardware stack levels required when called:    2
 12407 ;; This function calls:
 12408 ;;		Nothing
 12409 ;; This function is called by:
 12410 ;;		_main
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           	psect	text66
 12415  00387C                     __ptext66:
 12416                           	callstack 0
 12417  00387C                     _addContCiclos:
 12418                           	callstack 28
 12419  00387C                     
 12420                           ;fifo.c: 61:     cont_ciclos++;
 12421  00387C  4A0D               	infsnz	_cont_ciclos^0,f,c
 12422  00387E  2A0E               	incf	(_cont_ciclos+1)^0,f,c
 12423  003880  0012               	return		;funcret
 12424  003882                     __end_of_addContCiclos:
 12425                           	callstack 0
 12426                           
 12427 ;; *************** function ___lmul *****************
 12428 ;; Defined at:
 12429 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul32.c"
 12430 ;; Parameters:    Size  Location     Type
 12431 ;;  multiplier      4    0[COMRAM] unsigned long 
 12432 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;  product         4    8[COMRAM] unsigned long 
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  4    0[COMRAM] unsigned long 
 12437 ;; Registers used:
 12438 ;;		wreg, status,2, status,0
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12444 ;;      Params:         8       0       0       0       0       0       0       0       0
 12445 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12446 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12447 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12448 ;;Total ram usage:       12 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    2
 12451 ;; This function calls:
 12452 ;;		Nothing
 12453 ;; This function is called by:
 12454 ;;		_main
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           	psect	text67
 12459  002E0C                     __ptext67:
 12460                           	callstack 0
 12461  002E0C                     ___lmul:
 12462                           	callstack 28
 12463  002E0C  0E00               	movlw	0
 12464  002E0E  6E2E               	movwf	___lmul@product^0,c
 12465  002E10  0E00               	movlw	0
 12466  002E12  6E2F               	movwf	(___lmul@product+1)^0,c
 12467  002E14  0E00               	movlw	0
 12468  002E16  6E30               	movwf	(___lmul@product+2)^0,c
 12469  002E18  0E00               	movlw	0
 12470  002E1A  6E31               	movwf	(___lmul@product+3)^0,c
 12471  002E1C                     l5595:
 12472  002E1C  A026               	btfss	___lmul@multiplier^0,0,c
 12473  002E1E  EF13  F017         	goto	u3821
 12474  002E22  EF15  F017         	goto	u3820
 12475  002E26                     u3821:
 12476  002E26  EF1D  F017         	goto	l5599
 12477  002E2A                     u3820:
 12478  002E2A  502A               	movf	___lmul@multiplicand^0,w,c
 12479  002E2C  262E               	addwf	___lmul@product^0,f,c
 12480  002E2E  502B               	movf	(___lmul@multiplicand+1)^0,w,c
 12481  002E30  222F               	addwfc	(___lmul@product+1)^0,f,c
 12482  002E32  502C               	movf	(___lmul@multiplicand+2)^0,w,c
 12483  002E34  2230               	addwfc	(___lmul@product+2)^0,f,c
 12484  002E36  502D               	movf	(___lmul@multiplicand+3)^0,w,c
 12485  002E38  2231               	addwfc	(___lmul@product+3)^0,f,c
 12486  002E3A                     l5599:
 12487  002E3A  90D8               	bcf	status,0,c
 12488  002E3C  362A               	rlcf	___lmul@multiplicand^0,f,c
 12489  002E3E  362B               	rlcf	(___lmul@multiplicand+1)^0,f,c
 12490  002E40  362C               	rlcf	(___lmul@multiplicand+2)^0,f,c
 12491  002E42  362D               	rlcf	(___lmul@multiplicand+3)^0,f,c
 12492  002E44  90D8               	bcf	status,0,c
 12493  002E46  3229               	rrcf	(___lmul@multiplier+3)^0,f,c
 12494  002E48  3228               	rrcf	(___lmul@multiplier+2)^0,f,c
 12495  002E4A  3227               	rrcf	(___lmul@multiplier+1)^0,f,c
 12496  002E4C  3226               	rrcf	___lmul@multiplier^0,f,c
 12497  002E4E  5026               	movf	___lmul@multiplier^0,w,c
 12498  002E50  1027               	iorwf	(___lmul@multiplier+1)^0,w,c
 12499  002E52  1028               	iorwf	(___lmul@multiplier+2)^0,w,c
 12500  002E54  1029               	iorwf	(___lmul@multiplier+3)^0,w,c
 12501  002E56  A4D8               	btfss	status,2,c
 12502  002E58  EF30  F017         	goto	u3831
 12503  002E5C  EF32  F017         	goto	u3830
 12504  002E60                     u3831:
 12505  002E60  EF0E  F017         	goto	l5595
 12506  002E64                     u3830:
 12507  002E64  C02E  F026         	movff	___lmul@product,?___lmul
 12508  002E68  C02F  F027         	movff	___lmul@product+1,?___lmul+1
 12509  002E6C  C030  F028         	movff	___lmul@product+2,?___lmul+2
 12510  002E70  C031  F029         	movff	___lmul@product+3,?___lmul+3
 12511  002E74  0012               	return		;funcret
 12512  002E76                     __end_of___lmul:
 12513                           	callstack 0
 12514                           
 12515 ;; *************** function ___aldiv *****************
 12516 ;; Defined at:
 12517 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aldiv.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;  dividend        4   12[COMRAM] long 
 12520 ;;  divisor         4   16[COMRAM] long 
 12521 ;; Auto vars:     Size  Location     Type
 12522 ;;  quotient        4   22[COMRAM] long 
 12523 ;;  sign            1   21[COMRAM] unsigned char 
 12524 ;;  counter         1   20[COMRAM] unsigned char 
 12525 ;; Return value:  Size  Location     Type
 12526 ;;                  4   12[COMRAM] long 
 12527 ;; Registers used:
 12528 ;;		wreg, status,2, status,0
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12534 ;;      Params:         8       0       0       0       0       0       0       0       0
 12535 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12537 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12538 ;;Total ram usage:       14 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    2
 12541 ;; This function calls:
 12542 ;;		Nothing
 12543 ;; This function is called by:
 12544 ;;		_main
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           	psect	text68
 12549  0023DA                     __ptext68:
 12550                           	callstack 0
 12551  0023DA                     ___aldiv:
 12552                           	callstack 28
 12553  0023DA  0E00               	movlw	0
 12554  0023DC  6E3B               	movwf	___aldiv@sign^0,c
 12555  0023DE  BE39               	btfsc	(___aldiv@divisor+3)^0,7,c
 12556  0023E0  EFF6  F011         	goto	u3840
 12557  0023E4  EFF4  F011         	goto	u3841
 12558  0023E8                     u3841:
 12559  0023E8  EF00  F012         	goto	l5611
 12560  0023EC                     u3840:
 12561  0023EC  1E39               	comf	(___aldiv@divisor+3)^0,f,c
 12562  0023EE  1E38               	comf	(___aldiv@divisor+2)^0,f,c
 12563  0023F0  1E37               	comf	(___aldiv@divisor+1)^0,f,c
 12564  0023F2  6C36               	negf	___aldiv@divisor^0,c
 12565  0023F4  0E00               	movlw	0
 12566  0023F6  2237               	addwfc	(___aldiv@divisor+1)^0,f,c
 12567  0023F8  2238               	addwfc	(___aldiv@divisor+2)^0,f,c
 12568  0023FA  2239               	addwfc	(___aldiv@divisor+3)^0,f,c
 12569  0023FC  0E01               	movlw	1
 12570  0023FE  6E3B               	movwf	___aldiv@sign^0,c
 12571  002400                     l5611:
 12572  002400  BE35               	btfsc	(___aldiv@dividend+3)^0,7,c
 12573  002402  EF07  F012         	goto	u3850
 12574  002406  EF05  F012         	goto	u3851
 12575  00240A                     u3851:
 12576  00240A  EF11  F012         	goto	l5617
 12577  00240E                     u3850:
 12578  00240E  1E35               	comf	(___aldiv@dividend+3)^0,f,c
 12579  002410  1E34               	comf	(___aldiv@dividend+2)^0,f,c
 12580  002412  1E33               	comf	(___aldiv@dividend+1)^0,f,c
 12581  002414  6C32               	negf	___aldiv@dividend^0,c
 12582  002416  0E00               	movlw	0
 12583  002418  2233               	addwfc	(___aldiv@dividend+1)^0,f,c
 12584  00241A  2234               	addwfc	(___aldiv@dividend+2)^0,f,c
 12585  00241C  2235               	addwfc	(___aldiv@dividend+3)^0,f,c
 12586  00241E  0E01               	movlw	1
 12587  002420  1A3B               	xorwf	___aldiv@sign^0,f,c
 12588  002422                     l5617:
 12589  002422  0E00               	movlw	0
 12590  002424  6E3C               	movwf	___aldiv@quotient^0,c
 12591  002426  0E00               	movlw	0
 12592  002428  6E3D               	movwf	(___aldiv@quotient+1)^0,c
 12593  00242A  0E00               	movlw	0
 12594  00242C  6E3E               	movwf	(___aldiv@quotient+2)^0,c
 12595  00242E  0E00               	movlw	0
 12596  002430  6E3F               	movwf	(___aldiv@quotient+3)^0,c
 12597  002432  5036               	movf	___aldiv@divisor^0,w,c
 12598  002434  1037               	iorwf	(___aldiv@divisor+1)^0,w,c
 12599  002436  1038               	iorwf	(___aldiv@divisor+2)^0,w,c
 12600  002438  1039               	iorwf	(___aldiv@divisor+3)^0,w,c
 12601  00243A  B4D8               	btfsc	status,2,c
 12602  00243C  EF22  F012         	goto	u3861
 12603  002440  EF24  F012         	goto	u3860
 12604  002444                     u3861:
 12605  002444  EF5A  F012         	goto	l5639
 12606  002448                     u3860:
 12607  002448  0E01               	movlw	1
 12608  00244A  6E3A               	movwf	___aldiv@counter^0,c
 12609  00244C  EF2E  F012         	goto	l5625
 12610  002450                     l5623:
 12611  002450  90D8               	bcf	status,0,c
 12612  002452  3636               	rlcf	___aldiv@divisor^0,f,c
 12613  002454  3637               	rlcf	(___aldiv@divisor+1)^0,f,c
 12614  002456  3638               	rlcf	(___aldiv@divisor+2)^0,f,c
 12615  002458  3639               	rlcf	(___aldiv@divisor+3)^0,f,c
 12616  00245A  2A3A               	incf	___aldiv@counter^0,f,c
 12617  00245C                     l5625:
 12618  00245C  AE39               	btfss	(___aldiv@divisor+3)^0,7,c
 12619  00245E  EF33  F012         	goto	u3871
 12620  002462  EF35  F012         	goto	u3870
 12621  002466                     u3871:
 12622  002466  EF28  F012         	goto	l5623
 12623  00246A                     u3870:
 12624  00246A                     l5627:
 12625  00246A  90D8               	bcf	status,0,c
 12626  00246C  363C               	rlcf	___aldiv@quotient^0,f,c
 12627  00246E  363D               	rlcf	(___aldiv@quotient+1)^0,f,c
 12628  002470  363E               	rlcf	(___aldiv@quotient+2)^0,f,c
 12629  002472  363F               	rlcf	(___aldiv@quotient+3)^0,f,c
 12630  002474  5036               	movf	___aldiv@divisor^0,w,c
 12631  002476  5C32               	subwf	___aldiv@dividend^0,w,c
 12632  002478  5037               	movf	(___aldiv@divisor+1)^0,w,c
 12633  00247A  5833               	subwfb	(___aldiv@dividend+1)^0,w,c
 12634  00247C  5038               	movf	(___aldiv@divisor+2)^0,w,c
 12635  00247E  5834               	subwfb	(___aldiv@dividend+2)^0,w,c
 12636  002480  5039               	movf	(___aldiv@divisor+3)^0,w,c
 12637  002482  5835               	subwfb	(___aldiv@dividend+3)^0,w,c
 12638  002484  A0D8               	btfss	status,0,c
 12639  002486  EF47  F012         	goto	u3881
 12640  00248A  EF49  F012         	goto	u3880
 12641  00248E                     u3881:
 12642  00248E  EF52  F012         	goto	l5635
 12643  002492                     u3880:
 12644  002492  5036               	movf	___aldiv@divisor^0,w,c
 12645  002494  5E32               	subwf	___aldiv@dividend^0,f,c
 12646  002496  5037               	movf	(___aldiv@divisor+1)^0,w,c
 12647  002498  5A33               	subwfb	(___aldiv@dividend+1)^0,f,c
 12648  00249A  5038               	movf	(___aldiv@divisor+2)^0,w,c
 12649  00249C  5A34               	subwfb	(___aldiv@dividend+2)^0,f,c
 12650  00249E  5039               	movf	(___aldiv@divisor+3)^0,w,c
 12651  0024A0  5A35               	subwfb	(___aldiv@dividend+3)^0,f,c
 12652  0024A2  803C               	bsf	___aldiv@quotient^0,0,c
 12653  0024A4                     l5635:
 12654  0024A4  90D8               	bcf	status,0,c
 12655  0024A6  3239               	rrcf	(___aldiv@divisor+3)^0,f,c
 12656  0024A8  3238               	rrcf	(___aldiv@divisor+2)^0,f,c
 12657  0024AA  3237               	rrcf	(___aldiv@divisor+1)^0,f,c
 12658  0024AC  3236               	rrcf	___aldiv@divisor^0,f,c
 12659  0024AE  2E3A               	decfsz	___aldiv@counter^0,f,c
 12660  0024B0  EF35  F012         	goto	l5627
 12661  0024B4                     l5639:
 12662  0024B4  503B               	movf	___aldiv@sign^0,w,c
 12663  0024B6  B4D8               	btfsc	status,2,c
 12664  0024B8  EF60  F012         	goto	u3891
 12665  0024BC  EF62  F012         	goto	u3890
 12666  0024C0                     u3891:
 12667  0024C0  EF6A  F012         	goto	l5643
 12668  0024C4                     u3890:
 12669  0024C4  1E3F               	comf	(___aldiv@quotient+3)^0,f,c
 12670  0024C6  1E3E               	comf	(___aldiv@quotient+2)^0,f,c
 12671  0024C8  1E3D               	comf	(___aldiv@quotient+1)^0,f,c
 12672  0024CA  6C3C               	negf	___aldiv@quotient^0,c
 12673  0024CC  0E00               	movlw	0
 12674  0024CE  223D               	addwfc	(___aldiv@quotient+1)^0,f,c
 12675  0024D0  223E               	addwfc	(___aldiv@quotient+2)^0,f,c
 12676  0024D2  223F               	addwfc	(___aldiv@quotient+3)^0,f,c
 12677  0024D4                     l5643:
 12678  0024D4  C03C  F032         	movff	___aldiv@quotient,?___aldiv
 12679  0024D8  C03D  F033         	movff	___aldiv@quotient+1,?___aldiv+1
 12680  0024DC  C03E  F034         	movff	___aldiv@quotient+2,?___aldiv+2
 12681  0024E0  C03F  F035         	movff	___aldiv@quotient+3,?___aldiv+3
 12682  0024E4  0012               	return		;funcret
 12683  0024E6                     __end_of___aldiv:
 12684                           	callstack 0
 12685                           
 12686 ;; *************** function _MCP4725 *****************
 12687 ;; Defined at:
 12688 ;;		line 35 in file "MCP4725.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;  Vout            2   26[COMRAM] unsigned int 
 12691 ;; Auto vars:     Size  Location     Type
 12692 ;;		None
 12693 ;; Return value:  Size  Location     Type
 12694 ;;                  1    wreg      void 
 12695 ;; Registers used:
 12696 ;;		wreg, status,2, status,0, cstack
 12697 ;; Tracked objects:
 12698 ;;		On entry : 0/0
 12699 ;;		On exit  : 0/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12702 ;;      Params:         2       0       0       0       0       0       0       0       0
 12703 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12704 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12705 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12706 ;;Total ram usage:        2 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:    4
 12709 ;; This function calls:
 12710 ;;		_I2C_stop
 12711 ;;		_dac_init
 12712 ;;		_dac_write
 12713 ;;		_delay
 12714 ;; This function is called by:
 12715 ;;		_main
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text69
 12720  0036C2                     __ptext69:
 12721                           	callstack 0
 12722  0036C2                     _MCP4725:
 12723                           	callstack 26
 12724  0036C2                     
 12725                           ;MCP4725.c: 35: void MCP4725 (unsigned int Vout);MCP4725.c: 36: {;MCP4725.c: 37:     dac
      +                          _init();
 12726  0036C2  ECCD  F019         	call	_dac_init	;wreg free
 12727                           
 12728                           ;MCP4725.c: 38:     dac_write(Vout);
 12729  0036C6  C040  F029         	movff	MCP4725@Vout,dac_write@code
 12730  0036CA  C041  F02A         	movff	MCP4725@Vout+1,dac_write@code+1
 12731  0036CE  EC66  F019         	call	_dac_write	;wreg free
 12732  0036D2                     
 12733                           ;MCP4725.c: 39:     I2C_stop();
 12734  0036D2  ECD8  F01B         	call	_I2C_stop	;wreg free
 12735  0036D6                     
 12736                           ;MCP4725.c: 40:     delay(1);
 12737  0036D6  0E00               	movlw	0
 12738  0036D8  6E27               	movwf	(delay@t+1)^0,c
 12739  0036DA  0E01               	movlw	1
 12740  0036DC  6E26               	movwf	delay@t^0,c
 12741  0036DE  ECD6  F01A         	call	_delay	;wreg free
 12742  0036E2  0012               	return		;funcret
 12743  0036E4                     __end_of_MCP4725:
 12744                           	callstack 0
 12745                           
 12746 ;; *************** function _dac_write *****************
 12747 ;; Defined at:
 12748 ;;		line 25 in file "MCP4725.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  code            2    3[COMRAM] unsigned int 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;		None
 12753 ;; Return value:  Size  Location     Type
 12754 ;;                  1    wreg      void 
 12755 ;; Registers used:
 12756 ;;		wreg, status,2, status,0, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12762 ;;      Params:         2       0       0       0       0       0       0       0       0
 12763 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12764 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12765 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12766 ;;Total ram usage:        5 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    3
 12769 ;; This function calls:
 12770 ;;		_I2C_ack_receive
 12771 ;;		_I2C_tx
 12772 ;;		_delay
 12773 ;; This function is called by:
 12774 ;;		_MCP4725
 12775 ;;		_MCP4725X
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           	psect	text70
 12780  0032CC                     __ptext70:
 12781                           	callstack 0
 12782  0032CC                     _dac_write:
 12783                           	callstack 26
 12784  0032CC                     
 12785                           ;MCP4725.c: 25: void dac_write ( unsigned int code );MCP4725.c: 26: {;MCP4725.c: 27:    
      +                           I2C_tx( code >> 4 );
 12786  0032CC  C029  F02B         	movff	dac_write@code,??_dac_write
 12787  0032D0  C02A  F02C         	movff	dac_write@code+1,??_dac_write+1
 12788  0032D4  0E04               	movlw	4
 12789  0032D6  6E2D               	movwf	(??_dac_write+2)^0,c
 12790  0032D8                     u3125:
 12791  0032D8  90D8               	bcf	status,0,c
 12792  0032DA  322C               	rrcf	(??_dac_write+1)^0,f,c
 12793  0032DC  322B               	rrcf	??_dac_write^0,f,c
 12794  0032DE  2E2D               	decfsz	(??_dac_write+2)^0,f,c
 12795  0032E0  EF6C  F019         	goto	u3125
 12796  0032E4  502B               	movf	??_dac_write^0,w,c
 12797  0032E6  ECAF  F01B         	call	_I2C_tx
 12798  0032EA                     
 12799                           ;MCP4725.c: 28:     I2C_ack_receive();
 12800  0032EA  EC07  F01C         	call	_I2C_ack_receive	;wreg free
 12801  0032EE                     
 12802                           ;MCP4725.c: 29:     delay(1);
 12803  0032EE  0E00               	movlw	0
 12804  0032F0  6E27               	movwf	(delay@t+1)^0,c
 12805  0032F2  0E01               	movlw	1
 12806  0032F4  6E26               	movwf	delay@t^0,c
 12807  0032F6  ECD6  F01A         	call	_delay	;wreg free
 12808  0032FA                     
 12809                           ;MCP4725.c: 30:     I2C_tx( code << 4);
 12810  0032FA  3829               	swapf	dac_write@code^0,w,c
 12811  0032FC  0BF0               	andlw	240
 12812  0032FE  ECAF  F01B         	call	_I2C_tx
 12813  003302                     
 12814                           ;MCP4725.c: 31:     I2C_ack_receive();
 12815  003302  EC07  F01C         	call	_I2C_ack_receive	;wreg free
 12816                           
 12817                           ;MCP4725.c: 32:     delay(1);
 12818  003306  0E00               	movlw	0
 12819  003308  6E27               	movwf	(delay@t+1)^0,c
 12820  00330A  0E01               	movlw	1
 12821  00330C  6E26               	movwf	delay@t^0,c
 12822  00330E  ECD6  F01A         	call	_delay	;wreg free
 12823  003312  0012               	return		;funcret
 12824  003314                     __end_of_dac_write:
 12825                           	callstack 0
 12826                           
 12827 ;; *************** function _dac_init *****************
 12828 ;; Defined at:
 12829 ;;		line 13 in file "MCP4725.c"
 12830 ;; Parameters:    Size  Location     Type
 12831 ;;		None
 12832 ;; Auto vars:     Size  Location     Type
 12833 ;;		None
 12834 ;; Return value:  Size  Location     Type
 12835 ;;                  1    wreg      void 
 12836 ;; Registers used:
 12837 ;;		wreg, status,2, status,0, cstack
 12838 ;; Tracked objects:
 12839 ;;		On entry : 0/0
 12840 ;;		On exit  : 0/0
 12841 ;;		Unchanged: 0/0
 12842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12843 ;;      Params:         0       0       0       0       0       0       0       0       0
 12844 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12845 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12846 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12847 ;;Total ram usage:        0 bytes
 12848 ;; Hardware stack levels used:    1
 12849 ;; Hardware stack levels required when called:    3
 12850 ;; This function calls:
 12851 ;;		_I2C_ack_receive
 12852 ;;		_I2C_start
 12853 ;;		_I2C_tx
 12854 ;;		_delay
 12855 ;; This function is called by:
 12856 ;;		_MCP4725
 12857 ;;		_MCP4725X
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           	psect	text71
 12862  00339A                     __ptext71:
 12863                           	callstack 0
 12864  00339A                     _dac_init:
 12865                           	callstack 26
 12866  00339A                     
 12867                           ;MCP4725.c: 15:     I2C_start();
 12868  00339A  ECCE  F01B         	call	_I2C_start	;wreg free
 12869  00339E                     
 12870                           ;MCP4725.c: 16:     delay(1);
 12871  00339E  0E00               	movlw	0
 12872  0033A0  6E27               	movwf	(delay@t+1)^0,c
 12873  0033A2  0E01               	movlw	1
 12874  0033A4  6E26               	movwf	delay@t^0,c
 12875  0033A6  ECD6  F01A         	call	_delay	;wreg free
 12876  0033AA                     
 12877                           ;MCP4725.c: 17:     I2C_tx( 0b11000000 );
 12878  0033AA  0EC0               	movlw	192
 12879  0033AC  ECAF  F01B         	call	_I2C_tx
 12880  0033B0                     
 12881                           ;MCP4725.c: 18:     I2C_ack_receive();
 12882  0033B0  EC07  F01C         	call	_I2C_ack_receive	;wreg free
 12883  0033B4                     
 12884                           ;MCP4725.c: 19:     delay(1);
 12885  0033B4  0E00               	movlw	0
 12886  0033B6  6E27               	movwf	(delay@t+1)^0,c
 12887  0033B8  0E01               	movlw	1
 12888  0033BA  6E26               	movwf	delay@t^0,c
 12889  0033BC  ECD6  F01A         	call	_delay	;wreg free
 12890                           
 12891                           ;MCP4725.c: 20:     I2C_tx( 0b01100000 );
 12892  0033C0  0E60               	movlw	96
 12893  0033C2  ECAF  F01B         	call	_I2C_tx
 12894  0033C6                     
 12895                           ;MCP4725.c: 21:     I2C_ack_receive();
 12896  0033C6  EC07  F01C         	call	_I2C_ack_receive	;wreg free
 12897  0033CA                     
 12898                           ;MCP4725.c: 22:     delay(1);
 12899  0033CA  0E00               	movlw	0
 12900  0033CC  6E27               	movwf	(delay@t+1)^0,c
 12901  0033CE  0E01               	movlw	1
 12902  0033D0  6E26               	movwf	delay@t^0,c
 12903  0033D2  ECD6  F01A         	call	_delay	;wreg free
 12904  0033D6  0012               	return		;funcret
 12905  0033D8                     __end_of_dac_init:
 12906                           	callstack 0
 12907                           
 12908 ;; *************** function _delay *****************
 12909 ;; Defined at:
 12910 ;;		line 10 in file "delay.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;  t               2    0[COMRAM] unsigned int 
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;		None
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      void 
 12917 ;; Registers used:
 12918 ;;		wreg, status,2, status,0
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12924 ;;      Params:         2       0       0       0       0       0       0       0       0
 12925 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12926 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12927 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12928 ;;Total ram usage:        3 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    2
 12931 ;; This function calls:
 12932 ;;		Nothing
 12933 ;; This function is called by:
 12934 ;;		_main
 12935 ;;		_dispLCD_init
 12936 ;;		_dac_init
 12937 ;;		_dac_write
 12938 ;;		_MCP4725
 12939 ;;		_MCP4725X
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text72
 12944  0035AC                     __ptext72:
 12945                           	callstack 0
 12946  0035AC                     _delay:
 12947                           	callstack 27
 12948  0035AC                     
 12949                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
 12950  0035AC  EFE3  F01A         	goto	l429
 12951  0035B0                     l4531:
 12952                           
 12953                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
 12954  0035B0  0E07               	movlw	7
 12955  0035B2  6E28               	movwf	??_delay^0,c
 12956  0035B4  0E7D               	movlw	125
 12957  0035B6                     u5097:
 12958  0035B6  2EE8               	decfsz	wreg,f,c
 12959  0035B8  D7FE               	bra	u5097
 12960  0035BA  2E28               	decfsz	??_delay^0,f,c
 12961  0035BC  D7FC               	bra	u5097
 12962  0035BE  F000               	nop	
 12963  0035C0                     
 12964                           ;delay.c: 15:         --t;
 12965  0035C0  0626               	decf	delay@t^0,f,c
 12966  0035C2  A0D8               	btfss	status,0,c
 12967  0035C4  0627               	decf	(delay@t+1)^0,f,c
 12968  0035C6                     l429:
 12969                           
 12970                           ;delay.c: 12:     while( t )
 12971  0035C6  5026               	movf	delay@t^0,w,c
 12972  0035C8  1027               	iorwf	(delay@t+1)^0,w,c
 12973  0035CA  A4D8               	btfss	status,2,c
 12974  0035CC  EFEA  F01A         	goto	u2681
 12975  0035D0  EFEC  F01A         	goto	u2680
 12976  0035D4                     u2681:
 12977  0035D4  EFD8  F01A         	goto	l4531
 12978  0035D8                     u2680:
 12979  0035D8  0012               	return		;funcret
 12980  0035DA                     __end_of_delay:
 12981                           	callstack 0
 12982                           
 12983 ;; *************** function _I2C_tx *****************
 12984 ;; Defined at:
 12985 ;;		line 36 in file "spi_i2c.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  b               1    wreg     unsigned char 
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;  b               1    0[COMRAM] unsigned char 
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  1    wreg      void 
 12992 ;; Registers used:
 12993 ;;		wreg
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12999 ;;      Params:         0       0       0       0       0       0       0       0       0
 13000 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13001 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13002 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13003 ;;Total ram usage:        1 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    2
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_dac_init
 13010 ;;		_dac_write
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           	psect	text73
 13015  00375E                     __ptext73:
 13016                           	callstack 0
 13017  00375E                     _I2C_tx:
 13018                           	callstack 26
 13019                           
 13020                           ;incstack = 0
 13021                           ;I2C_tx@b stored from wreg
 13022  00375E  6E26               	movwf	I2C_tx@b^0,c
 13023  003760                     
 13024                           ;spi_i2c.c: 36: void I2C_tx( unsigned char b );spi_i2c.c: 37: {;spi_i2c.c: 38:     SSPBU
      +                          F = b;
 13025  003760  C026  FFC9         	movff	I2C_tx@b,4041	;volatile
 13026  003764                     l926:
 13027  003764  B0C7               	btfsc	199,0,c	;volatile
 13028  003766  EFB7  F01B         	goto	u2711
 13029  00376A  EFB9  F01B         	goto	u2710
 13030  00376E                     u2711:
 13031  00376E  EFB2  F01B         	goto	l926
 13032  003772                     u2710:
 13033  003772  0012               	return		;funcret
 13034  003774                     __end_of_I2C_tx:
 13035                           	callstack 0
 13036                           
 13037 ;; *************** function _I2C_start *****************
 13038 ;; Defined at:
 13039 ;;		line 22 in file "spi_i2c.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;		None
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;		None
 13044 ;; Return value:  Size  Location     Type
 13045 ;;                  1    wreg      void 
 13046 ;; Registers used:
 13047 ;;		None
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13053 ;;      Params:         0       0       0       0       0       0       0       0       0
 13054 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13055 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13056 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13057 ;;Total ram usage:        0 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    2
 13060 ;; This function calls:
 13061 ;;		Nothing
 13062 ;; This function is called by:
 13063 ;;		_dac_init
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067                           	psect	text74
 13068  00379C                     __ptext74:
 13069                           	callstack 0
 13070  00379C                     _I2C_start:
 13071                           	callstack 26
 13072  00379C                     
 13073                           ;spi_i2c.c: 24:     SSPCON2bits.SEN = 1;
 13074  00379C  80C5               	bsf	197,0,c	;volatile
 13075  00379E                     l911:
 13076  00379E  A69E               	btfss	158,3,c	;volatile
 13077  0037A0  EFD4  F01B         	goto	u2701
 13078  0037A4  EFD6  F01B         	goto	u2700
 13079  0037A8                     u2701:
 13080  0037A8  EFCF  F01B         	goto	l911
 13081  0037AC                     u2700:
 13082  0037AC                     
 13083                           ;spi_i2c.c: 26:     PIR1bits.SSPIF = 0;
 13084  0037AC  969E               	bcf	158,3,c	;volatile
 13085  0037AE  0012               	return		;funcret
 13086  0037B0                     __end_of_I2C_start:
 13087                           	callstack 0
 13088                           
 13089 ;; *************** function _I2C_ack_receive *****************
 13090 ;; Defined at:
 13091 ;;		line 56 in file "spi_i2c.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;		None
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;		None
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		None
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13108 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13109 ;;Total ram usage:        0 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    2
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_dac_init
 13116 ;;		_dac_write
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text75
 13121  00380E                     __ptext75:
 13122                           	callstack 0
 13123  00380E                     _I2C_ack_receive:
 13124                           	callstack 26
 13125  00380E                     l947:
 13126  00380E  BCC5               	btfsc	197,6,c	;volatile
 13127  003810  EF0C  F01C         	goto	u2721
 13128  003814  EF0E  F01C         	goto	u2720
 13129  003818                     u2721:
 13130  003818  EF07  F01C         	goto	l947
 13131  00381C                     u2720:
 13132  00381C  0012               	return		;funcret
 13133  00381E                     __end_of_I2C_ack_receive:
 13134                           	callstack 0
 13135                           
 13136 ;; *************** function _I2C_stop *****************
 13137 ;; Defined at:
 13138 ;;		line 41 in file "spi_i2c.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;		None
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;		None
 13143 ;; Return value:  Size  Location     Type
 13144 ;;                  1    wreg      void 
 13145 ;; Registers used:
 13146 ;;		None
 13147 ;; Tracked objects:
 13148 ;;		On entry : 0/0
 13149 ;;		On exit  : 0/0
 13150 ;;		Unchanged: 0/0
 13151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13152 ;;      Params:         0       0       0       0       0       0       0       0       0
 13153 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13154 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13155 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13156 ;;Total ram usage:        0 bytes
 13157 ;; Hardware stack levels used:    1
 13158 ;; Hardware stack levels required when called:    2
 13159 ;; This function calls:
 13160 ;;		Nothing
 13161 ;; This function is called by:
 13162 ;;		_MCP4725
 13163 ;;		_MCP4725X
 13164 ;; This function uses a non-reentrant model
 13165 ;;
 13166                           
 13167                           	psect	text76
 13168  0037B0                     __ptext76:
 13169                           	callstack 0
 13170  0037B0                     _I2C_stop:
 13171                           	callstack 27
 13172  0037B0                     
 13173                           ;spi_i2c.c: 43:     SSPCON2bits.PEN = 1;
 13174  0037B0  84C5               	bsf	197,2,c	;volatile
 13175  0037B2                     l932:
 13176  0037B2  A69E               	btfss	158,3,c	;volatile
 13177  0037B4  EFDE  F01B         	goto	u3131
 13178  0037B8  EFE0  F01B         	goto	u3130
 13179  0037BC                     u3131:
 13180  0037BC  EFD9  F01B         	goto	l932
 13181  0037C0                     u3130:
 13182  0037C0                     
 13183                           ;spi_i2c.c: 45:     PIR1bits.SSPIF = 0;
 13184  0037C0  969E               	bcf	158,3,c	;volatile
 13185  0037C2  0012               	return		;funcret
 13186  0037C4                     __end_of_I2C_stop:
 13187                           	callstack 0
 13188                           
 13189 ;; *************** function _I2C_init *****************
 13190 ;; Defined at:
 13191 ;;		line 12 in file "spi_i2c.c"
 13192 ;; Parameters:    Size  Location     Type
 13193 ;;  freq            4   13[COMRAM] unsigned long 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;		None
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  1    wreg      void 
 13198 ;; Registers used:
 13199 ;;		wreg, status,2, status,0, cstack
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13205 ;;      Params:         4       0       0       0       0       0       0       0       0
 13206 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13207 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13208 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13209 ;;Total ram usage:        4 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    3
 13212 ;; This function calls:
 13213 ;;		___lldiv
 13214 ;; This function is called by:
 13215 ;;		_main
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           	psect	text77
 13220  003414                     __ptext77:
 13221                           	callstack 0
 13222  003414                     _I2C_init:
 13223                           	callstack 27
 13224  003414                     
 13225                           ;spi_i2c.c: 12: void I2C_init( unsigned long freq );spi_i2c.c: 13: {;spi_i2c.c: 14:     
      +                          TRISBbits.TRISB0 = 1;
 13226  003414  8093               	bsf	147,0,c	;volatile
 13227                           
 13228                           ;spi_i2c.c: 15:     TRISBbits.TRISB1 = 1;
 13229  003416  8293               	bsf	147,1,c	;volatile
 13230  003418                     
 13231                           ;spi_i2c.c: 16:     SSPCON1bits.SSPM = 0x8;
 13232  003418  50C6               	movf	198,w,c	;volatile
 13233  00341A  0BF0               	andlw	-16
 13234  00341C  0908               	iorlw	8
 13235  00341E  6EC6               	movwf	198,c	;volatile
 13236  003420                     
 13237                           ;spi_i2c.c: 17:     SSPADD = ((20000000>>2) / (freq))-1;
 13238  003420  0E40               	movlw	64
 13239  003422  6E26               	movwf	___lldiv@dividend^0,c
 13240  003424  0E4B               	movlw	75
 13241  003426  6E27               	movwf	(___lldiv@dividend+1)^0,c
 13242  003428  0E4C               	movlw	76
 13243  00342A  6E28               	movwf	(___lldiv@dividend+2)^0,c
 13244  00342C  0E00               	movlw	0
 13245  00342E  6E29               	movwf	(___lldiv@dividend+3)^0,c
 13246  003430  C033  F02A         	movff	I2C_init@freq,___lldiv@divisor
 13247  003434  C034  F02B         	movff	I2C_init@freq+1,___lldiv@divisor+1
 13248  003438  C035  F02C         	movff	I2C_init@freq+2,___lldiv@divisor+2
 13249  00343C  C036  F02D         	movff	I2C_init@freq+3,___lldiv@divisor+3
 13250  003440  EC52  F015         	call	___lldiv	;wreg free
 13251  003444  0426               	decf	?___lldiv^0,w,c
 13252  003446  6EC8               	movwf	200,c	;volatile
 13253  003448                     
 13254                           ;spi_i2c.c: 18:     SSPSTATbits.SMP = 1;
 13255  003448  8EC7               	bsf	199,7,c	;volatile
 13256  00344A                     
 13257                           ;spi_i2c.c: 19:     SSPCON1bits.SSPEN = 1;
 13258  00344A  8AC6               	bsf	198,5,c	;volatile
 13259  00344C  0012               	return		;funcret
 13260  00344E                     __end_of_I2C_init:
 13261                           	callstack 0
 13262                           
 13263 ;; *************** function ___lldiv *****************
 13264 ;; Defined at:
 13265 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\__lldiv.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;  dividend        4    0[COMRAM] unsigned long 
 13268 ;;  divisor         4    4[COMRAM] unsigned long 
 13269 ;; Auto vars:     Size  Location     Type
 13270 ;;  quotient        4    8[COMRAM] unsigned long 
 13271 ;;  counter         1   12[COMRAM] unsigned char 
 13272 ;; Return value:  Size  Location     Type
 13273 ;;                  4    0[COMRAM] unsigned long 
 13274 ;; Registers used:
 13275 ;;		wreg, status,2, status,0
 13276 ;; Tracked objects:
 13277 ;;		On entry : 0/0
 13278 ;;		On exit  : 0/0
 13279 ;;		Unchanged: 0/0
 13280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13281 ;;      Params:         8       0       0       0       0       0       0       0       0
 13282 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13283 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13284 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13285 ;;Total ram usage:       13 bytes
 13286 ;; Hardware stack levels used:    1
 13287 ;; Hardware stack levels required when called:    2
 13288 ;; This function calls:
 13289 ;;		Nothing
 13290 ;; This function is called by:
 13291 ;;		_I2C_init
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           	psect	text78
 13296  002AA4                     __ptext78:
 13297                           	callstack 0
 13298  002AA4                     ___lldiv:
 13299                           	callstack 27
 13300  002AA4  0E00               	movlw	0
 13301  002AA6  6E2E               	movwf	___lldiv@quotient^0,c
 13302  002AA8  0E00               	movlw	0
 13303  002AAA  6E2F               	movwf	(___lldiv@quotient+1)^0,c
 13304  002AAC  0E00               	movlw	0
 13305  002AAE  6E30               	movwf	(___lldiv@quotient+2)^0,c
 13306  002AB0  0E00               	movlw	0
 13307  002AB2  6E31               	movwf	(___lldiv@quotient+3)^0,c
 13308  002AB4  502A               	movf	___lldiv@divisor^0,w,c
 13309  002AB6  102B               	iorwf	(___lldiv@divisor+1)^0,w,c
 13310  002AB8  102C               	iorwf	(___lldiv@divisor+2)^0,w,c
 13311  002ABA  102D               	iorwf	(___lldiv@divisor+3)^0,w,c
 13312  002ABC  B4D8               	btfsc	status,2,c
 13313  002ABE  EF63  F015         	goto	u3221
 13314  002AC2  EF65  F015         	goto	u3220
 13315  002AC6                     u3221:
 13316  002AC6  EF9B  F015         	goto	l1053
 13317  002ACA                     u3220:
 13318  002ACA  0E01               	movlw	1
 13319  002ACC  6E32               	movwf	___lldiv@counter^0,c
 13320  002ACE  EF6F  F015         	goto	l4939
 13321  002AD2                     l4937:
 13322  002AD2  90D8               	bcf	status,0,c
 13323  002AD4  362A               	rlcf	___lldiv@divisor^0,f,c
 13324  002AD6  362B               	rlcf	(___lldiv@divisor+1)^0,f,c
 13325  002AD8  362C               	rlcf	(___lldiv@divisor+2)^0,f,c
 13326  002ADA  362D               	rlcf	(___lldiv@divisor+3)^0,f,c
 13327  002ADC  2A32               	incf	___lldiv@counter^0,f,c
 13328  002ADE                     l4939:
 13329  002ADE  AE2D               	btfss	(___lldiv@divisor+3)^0,7,c
 13330  002AE0  EF74  F015         	goto	u3231
 13331  002AE4  EF76  F015         	goto	u3230
 13332  002AE8                     u3231:
 13333  002AE8  EF69  F015         	goto	l4937
 13334  002AEC                     u3230:
 13335  002AEC                     l4941:
 13336  002AEC  90D8               	bcf	status,0,c
 13337  002AEE  362E               	rlcf	___lldiv@quotient^0,f,c
 13338  002AF0  362F               	rlcf	(___lldiv@quotient+1)^0,f,c
 13339  002AF2  3630               	rlcf	(___lldiv@quotient+2)^0,f,c
 13340  002AF4  3631               	rlcf	(___lldiv@quotient+3)^0,f,c
 13341  002AF6  502A               	movf	___lldiv@divisor^0,w,c
 13342  002AF8  5C26               	subwf	___lldiv@dividend^0,w,c
 13343  002AFA  502B               	movf	(___lldiv@divisor+1)^0,w,c
 13344  002AFC  5827               	subwfb	(___lldiv@dividend+1)^0,w,c
 13345  002AFE  502C               	movf	(___lldiv@divisor+2)^0,w,c
 13346  002B00  5828               	subwfb	(___lldiv@dividend+2)^0,w,c
 13347  002B02  502D               	movf	(___lldiv@divisor+3)^0,w,c
 13348  002B04  5829               	subwfb	(___lldiv@dividend+3)^0,w,c
 13349  002B06  A0D8               	btfss	status,0,c
 13350  002B08  EF88  F015         	goto	u3241
 13351  002B0C  EF8A  F015         	goto	u3240
 13352  002B10                     u3241:
 13353  002B10  EF93  F015         	goto	l4949
 13354  002B14                     u3240:
 13355  002B14  502A               	movf	___lldiv@divisor^0,w,c
 13356  002B16  5E26               	subwf	___lldiv@dividend^0,f,c
 13357  002B18  502B               	movf	(___lldiv@divisor+1)^0,w,c
 13358  002B1A  5A27               	subwfb	(___lldiv@dividend+1)^0,f,c
 13359  002B1C  502C               	movf	(___lldiv@divisor+2)^0,w,c
 13360  002B1E  5A28               	subwfb	(___lldiv@dividend+2)^0,f,c
 13361  002B20  502D               	movf	(___lldiv@divisor+3)^0,w,c
 13362  002B22  5A29               	subwfb	(___lldiv@dividend+3)^0,f,c
 13363  002B24  802E               	bsf	___lldiv@quotient^0,0,c
 13364  002B26                     l4949:
 13365  002B26  90D8               	bcf	status,0,c
 13366  002B28  322D               	rrcf	(___lldiv@divisor+3)^0,f,c
 13367  002B2A  322C               	rrcf	(___lldiv@divisor+2)^0,f,c
 13368  002B2C  322B               	rrcf	(___lldiv@divisor+1)^0,f,c
 13369  002B2E  322A               	rrcf	___lldiv@divisor^0,f,c
 13370  002B30  2E32               	decfsz	___lldiv@counter^0,f,c
 13371  002B32  EF76  F015         	goto	l4941
 13372  002B36                     l1053:
 13373  002B36  C02E  F026         	movff	___lldiv@quotient,?___lldiv
 13374  002B3A  C02F  F027         	movff	___lldiv@quotient+1,?___lldiv+1
 13375  002B3E  C030  F028         	movff	___lldiv@quotient+2,?___lldiv+2
 13376  002B42  C031  F029         	movff	___lldiv@quotient+3,?___lldiv+3
 13377  002B46  0012               	return		;funcret
 13378  002B48                     __end_of___lldiv:
 13379                           	callstack 0
 13380                           
 13381 ;; *************** function _irq *****************
 13382 ;; Defined at:
 13383 ;;		line 56 in file "main.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;		None
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;		None
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  1    wreg      void 
 13390 ;; Registers used:
 13391 ;;		wreg, status,2, status,0, cstack
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0
 13398 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13400 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13401 ;;Total ram usage:        0 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    1
 13404 ;; This function calls:
 13405 ;;		_intt1_1ms
 13406 ;; This function is called by:
 13407 ;;		Interrupt level 2
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	intcode
 13412  000008                     __pintcode:
 13413                           	callstack 0
 13414  000008                     _irq:
 13415                           	callstack 25
 13416                           
 13417                           ;incstack = 0
 13418  000008  8259               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 13419  00000A  EDED  F01A         	call	int_func,f	;refresh shadow registers
 13420                           
 13421                           	psect	intcode_body
 13422  0035DA                     __pintcode_body:
 13423                           	callstack 25
 13424  0035DA                     int_func:
 13425                           	callstack 25
 13426  0035DA  0006               	pop		; remove dummy address from shadow register refresh
 13427  0035DC                     
 13428                           ;main.c: 58:     INTCONbits.GIE = 0;
 13429  0035DC  9EF2               	bcf	242,7,c	;volatile
 13430                           
 13431                           ;main.c: 59:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 13432  0035DE  A09E               	btfss	158,0,c	;volatile
 13433  0035E0  EFF4  F01A         	goto	i2u135_41
 13434  0035E4  EFF6  F01A         	goto	i2u135_40
 13435  0035E8                     i2u135_41:
 13436  0035E8  EF00  F01B         	goto	i2l2917
 13437  0035EC                     i2u135_40:
 13438  0035EC  A09D               	btfss	157,0,c	;volatile
 13439  0035EE  EFFB  F01A         	goto	i2u136_41
 13440  0035F2  EFFD  F01A         	goto	i2u136_40
 13441  0035F6                     i2u136_41:
 13442  0035F6  EF00  F01B         	goto	i2l2917
 13443  0035FA                     i2u136_40:
 13444  0035FA                     
 13445                           ;main.c: 60:     {;main.c: 61:         PIR1bits.TMR1IF = 0;
 13446  0035FA  909E               	bcf	158,0,c	;volatile
 13447  0035FC                     
 13448                           ;main.c: 63:         intt1_1ms();
 13449  0035FC  EC79  F01A         	call	_intt1_1ms	;wreg free
 13450  003600                     i2l2917:
 13451                           
 13452                           ;main.c: 65:     INTCONbits.GIE = 1;
 13453  003600  8EF2               	bsf	242,7,c	;volatile
 13454  003602  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 13455  003604  0011               	retfie		f
 13456  003606                     __end_of_irq:
 13457                           	callstack 0
 13458                           
 13459 ;; *************** function _intt1_1ms *****************
 13460 ;; Defined at:
 13461 ;;		line 5 in file "timer1.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;		None
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;		None
 13466 ;; Return value:  Size  Location     Type
 13467 ;;                  1    wreg      void 
 13468 ;; Registers used:
 13469 ;;		wreg, status,2, status,0
 13470 ;; Tracked objects:
 13471 ;;		On entry : 0/0
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13475 ;;      Params:         0       0       0       0       0       0       0       0       0
 13476 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13477 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13478 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13479 ;;Total ram usage:        0 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; This function calls:
 13482 ;;		Nothing
 13483 ;; This function is called by:
 13484 ;;		_irq
 13485 ;; This function uses a non-reentrant model
 13486 ;;
 13487                           
 13488                           	psect	text80
 13489  0034F2                     __ptext80:
 13490                           	callstack 0
 13491  0034F2                     _intt1_1ms:
 13492                           	callstack 25
 13493  0034F2                     
 13494                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 13495  0034F2  0EFD               	movlw	253
 13496  0034F4  6ECF               	movwf	207,c	;volatile
 13497                           
 13498                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 13499  0034F6  0E8F               	movlw	143
 13500  0034F8  6ECE               	movwf	206,c	;volatile
 13501  0034FA                     
 13502                           ;timer1.c: 10:     if(t1cont)
 13503  0034FA  5001               	movf	_t1cont^0,w,c
 13504  0034FC  1002               	iorwf	(_t1cont+1)^0,w,c
 13505  0034FE  1003               	iorwf	(_t1cont+2)^0,w,c
 13506  003500  1004               	iorwf	(_t1cont+3)^0,w,c
 13507  003502  B4D8               	btfsc	status,2,c
 13508  003504  EF86  F01A         	goto	i2u72_41
 13509  003508  EF88  F01A         	goto	i2u72_40
 13510  00350C                     i2u72_41:
 13511  00350C  EF8F  F01A         	goto	i2l1012
 13512  003510                     i2u72_40:
 13513  003510                     
 13514                           ;timer1.c: 11:         --t1cont;
 13515  003510  0601               	decf	_t1cont^0,f,c
 13516  003512  0E00               	movlw	0
 13517  003514  5A02               	subwfb	(_t1cont+1)^0,f,c
 13518  003516  5A03               	subwfb	(_t1cont+2)^0,f,c
 13519  003518  5A04               	subwfb	(_t1cont+3)^0,f,c
 13520  00351A  EF90  F01A         	goto	i2l1014
 13521  00351E                     i2l1012:
 13522                           
 13523                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 13524  00351E  90CD               	bcf	205,0,c	;volatile
 13525  003520                     i2l1014:
 13526  003520  0012               	return		;funcret
 13527  003522                     __end_of_intt1_1ms:
 13528                           	callstack 0
 13529                           
 13530                           	psect	text81
 13531  000000                     __ptext81:
 13532                           	callstack 0
 13533  000000                     
 13534                           	psect	rparam
 13535  0000                     
 13536                           	psect	temp
 13537  000059                     btemp:
 13538                           	callstack 0
 13539  000059                     	ds	1
 13540  0000                     int$flags	set	btemp
 13541  0000                     wtemp8	set	btemp+1
 13542  0000                     ttemp5	set	btemp+1
 13543  0000                     ttemp6	set	btemp+4
 13544  0000                     ttemp7	set	btemp+8
 13545                           
 13546                           	psect	idloc
 13547                           
 13548                           ;Config register IDLOC0 @ 0x200000
 13549                           ;	unspecified, using default values
 13550  200000                     	org	2097152
 13551  200000  FF                 	db	255
 13552                           
 13553                           ;Config register IDLOC1 @ 0x200001
 13554                           ;	unspecified, using default values
 13555  200001                     	org	2097153
 13556  200001  FF                 	db	255
 13557                           
 13558                           ;Config register IDLOC2 @ 0x200002
 13559                           ;	unspecified, using default values
 13560  200002                     	org	2097154
 13561  200002  FF                 	db	255
 13562                           
 13563                           ;Config register IDLOC3 @ 0x200003
 13564                           ;	unspecified, using default values
 13565  200003                     	org	2097155
 13566  200003  FF                 	db	255
 13567                           
 13568                           ;Config register IDLOC4 @ 0x200004
 13569                           ;	unspecified, using default values
 13570  200004                     	org	2097156
 13571  200004  FF                 	db	255
 13572                           
 13573                           ;Config register IDLOC5 @ 0x200005
 13574                           ;	unspecified, using default values
 13575  200005                     	org	2097157
 13576  200005  FF                 	db	255
 13577                           
 13578                           ;Config register IDLOC6 @ 0x200006
 13579                           ;	unspecified, using default values
 13580  200006                     	org	2097158
 13581  200006  FF                 	db	255
 13582                           
 13583                           ;Config register IDLOC7 @ 0x200007
 13584                           ;	unspecified, using default values
 13585  200007                     	org	2097159
 13586  200007  FF                 	db	255
 13587                           
 13588                           	psect	config
 13589                           
 13590                           ;Config register CONFIG1L @ 0x300000
 13591                           ;	PLL Prescaler Selection bits
 13592                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
 13593                           ;	System Clock Postscaler Selection bits
 13594                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 13595                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 13596                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 13597  300000                     	org	3145728
 13598  300000  04                 	db	4
 13599                           
 13600                           ;Config register CONFIG1H @ 0x300001
 13601                           ;	Oscillator Selection bits
 13602                           ;	FOSC = HS, HS oscillator (HS)
 13603                           ;	Fail-Safe Clock Monitor Enable bit
 13604                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 13605                           ;	Internal/External Oscillator Switchover bit
 13606                           ;	IESO = OFF, Oscillator Switchover mode disabled
 13607  300001                     	org	3145729
 13608  300001  0C                 	db	12
 13609                           
 13610                           ;Config register CONFIG2L @ 0x300002
 13611                           ;	Power-up Timer Enable bit
 13612                           ;	PWRT = ON, PWRT enabled
 13613                           ;	Brown-out Reset Enable bits
 13614                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 13615                           ;	Brown-out Reset Voltage bits
 13616                           ;	BORV = 3, Minimum setting 2.05V
 13617                           ;	USB Voltage Regulator Enable bit
 13618                           ;	VREGEN = OFF, USB voltage regulator disabled
 13619  300002                     	org	3145730
 13620  300002  18                 	db	24
 13621                           
 13622                           ;Config register CONFIG2H @ 0x300003
 13623                           ;	Watchdog Timer Enable bit
 13624                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 13625                           ;	Watchdog Timer Postscale Select bits
 13626                           ;	WDTPS = 32768, 1:32768
 13627  300003                     	org	3145731
 13628  300003  1E                 	db	30
 13629                           
 13630                           ; Padding undefined space
 13631  300004                     	org	3145732
 13632  300004  FF                 	db	255
 13633                           
 13634                           ;Config register CONFIG3H @ 0x300005
 13635                           ;	CCP2 MUX bit
 13636                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 13637                           ;	PORTB A/D Enable bit
 13638                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 13639                           ;	Low-Power Timer 1 Oscillator Enable bit
 13640                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 13641                           ;	MCLR Pin Enable bit
 13642                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
 13643  300005                     	org	3145733
 13644  300005  01                 	db	1
 13645                           
 13646                           ;Config register CONFIG4L @ 0x300006
 13647                           ;	Stack Full/Underflow Reset Enable bit
 13648                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
 13649                           ;	Single-Supply ICSP Enable bit
 13650                           ;	LVP = OFF, Single-Supply ICSP disabled
 13651                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 13652                           ;	ICPRT = OFF, ICPORT disabled
 13653                           ;	Extended Instruction Set Enable bit
 13654                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 13655                           ;	Background Debugger Enable bit
 13656                           ;	DEBUG = 0x1, unprogrammed default
 13657  300006                     	org	3145734
 13658  300006  80                 	db	128
 13659                           
 13660                           ; Padding undefined space
 13661  300007                     	org	3145735
 13662  300007  FF                 	db	255
 13663                           
 13664                           ;Config register CONFIG5L @ 0x300008
 13665                           ;	Code Protection bit
 13666                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 13667                           ;	Code Protection bit
 13668                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 13669                           ;	Code Protection bit
 13670                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 13671                           ;	Code Protection bit
 13672                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 13673  300008                     	org	3145736
 13674  300008  0F                 	db	15
 13675                           
 13676                           ;Config register CONFIG5H @ 0x300009
 13677                           ;	Boot Block Code Protection bit
 13678                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 13679                           ;	Data EEPROM Code Protection bit
 13680                           ;	CPD = OFF, Data EEPROM is not code-protected
 13681  300009                     	org	3145737
 13682  300009  C0                 	db	192
 13683                           
 13684                           ;Config register CONFIG6L @ 0x30000A
 13685                           ;	Write Protection bit
 13686                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 13687                           ;	Write Protection bit
 13688                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 13689                           ;	Write Protection bit
 13690                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 13691                           ;	Write Protection bit
 13692                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 13693  30000A                     	org	3145738
 13694  30000A  0F                 	db	15
 13695                           
 13696                           ;Config register CONFIG6H @ 0x30000B
 13697                           ;	Configuration Register Write Protection bit
 13698                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 13699                           ;	Boot Block Write Protection bit
 13700                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 13701                           ;	Data EEPROM Write Protection bit
 13702                           ;	WRTD = OFF, Data EEPROM is not write-protected
 13703  30000B                     	org	3145739
 13704  30000B  E0                 	db	224
 13705                           
 13706                           ;Config register CONFIG7L @ 0x30000C
 13707                           ;	Table Read Protection bit
 13708                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 13709                           ;	Table Read Protection bit
 13710                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 13711                           ;	Table Read Protection bit
 13712                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 13713                           ;	Table Read Protection bit
 13714                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 13715  30000C                     	org	3145740
 13716  30000C  0F                 	db	15
 13717                           
 13718                           ;Config register CONFIG7H @ 0x30000D
 13719                           ;	Boot Block Table Read Protection bit
 13720                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 13721  30000D                     	org	3145741
 13722  30000D  40                 	db	64
 13723                           tosu	equ	0xFFF
 13724                           tosh	equ	0xFFE
 13725                           tosl	equ	0xFFD
 13726                           stkptr	equ	0xFFC
 13727                           pclatu	equ	0xFFB
 13728                           pclath	equ	0xFFA
 13729                           pcl	equ	0xFF9
 13730                           tblptru	equ	0xFF8
 13731                           tblptrh	equ	0xFF7
 13732                           tblptrl	equ	0xFF6
 13733                           tablat	equ	0xFF5
 13734                           prodh	equ	0xFF4
 13735                           prodl	equ	0xFF3
 13736                           indf0	equ	0xFEF
 13737                           postinc0	equ	0xFEE
 13738                           postdec0	equ	0xFED
 13739                           preinc0	equ	0xFEC
 13740                           plusw0	equ	0xFEB
 13741                           fsr0h	equ	0xFEA
 13742                           fsr0l	equ	0xFE9
 13743                           wreg	equ	0xFE8
 13744                           indf1	equ	0xFE7
 13745                           postinc1	equ	0xFE6
 13746                           postdec1	equ	0xFE5
 13747                           preinc1	equ	0xFE4
 13748                           plusw1	equ	0xFE3
 13749                           fsr1h	equ	0xFE2
 13750                           fsr1l	equ	0xFE1
 13751                           bsr	equ	0xFE0
 13752                           indf2	equ	0xFDF
 13753                           postinc2	equ	0xFDE
 13754                           postdec2	equ	0xFDD
 13755                           preinc2	equ	0xFDC
 13756                           plusw2	equ	0xFDB
 13757                           fsr2h	equ	0xFDA
 13758                           fsr2l	equ	0xFD9
 13759                           status	equ	0xFD8

Data Sizes:
    Strings     734
    Constant    0
    Data        59
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      88
    BANK0           160     89     131
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    S85$3$0	PTR unsigned char  size(2) Largest target is 0

    S85$0$1	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S85$1$1	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    S29$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_27(CODE[78]), STR_26(CODE[62]), STR_15(CODE[81]), STR_4(CODE[83]), 

    S29$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[21]), STR_24(CODE[21]), STR_23(CODE[21]), 
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[8]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_14(CODE[21]), 
		 -> STR_13(CODE[21]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), STR_3(CODE[21]), STR_2(CODE[2]), STR_1(CODE[2]), 

    initSerialIO@ptrOut	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK0[1]), 

    dignum_apagar@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    decodifica@d	PTR unsigned char  size(2) Largest target is 18
		 -> printExec@passo(COMRAM[1]), fifo_print@comando(COMRAM[1]), fila(COMRAM[18]), main@vetor_aux(BANK0[16]), 
		 -> main@auxPasso(BANK0[1]), 

    codifica@dado	PTR unsigned char  size(2) Largest target is 2047
		 -> fifo_add_control@c(COMRAM[1]), fifo_add_tempo@t(COMRAM[1]), fifo_add@passo(COMRAM[1]), RAM(DATA[2047]), 

    salva_atuadores_init@pt	PTR unsigned char  size(2) Largest target is 4
		 -> salva_atuadores_init@condi_init(COMRAM[4]), 

    buscar_dado@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@init_cond(BANK0[1]), 

    buscar_receita@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    salvar_receita@data	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_27(CODE[78]), STR_26(CODE[62]), STR_15(CODE[81]), STR_4(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[21]), STR_24(CODE[21]), STR_23(CODE[21]), 
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[8]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_14(CODE[21]), 
		 -> STR_13(CODE[21]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), STR_3(CODE[21]), STR_2(CODE[2]), STR_1(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    set_passo@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    sp__fifo_adrs	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    main@ptr_562	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@pt	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr	PTR unsigned char  size(2) Largest target is 20
		 -> main@lema(BANK0[20]), 

    S85$formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    S85$livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    S85$deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    S85$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    S85$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    S29$clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    S29$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    S29$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    S29$print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    S29$init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 


Critical Paths under _main in COMRAM

    _main->_printExec
    _teclado_borda->_teclado_scan
    _setT1->___wmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _manipula_atuadores_init->_alt_atuador
    _formatar_receitas->_EEPROM_write
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    _deletar_receita->_end_receita
    _buscar_receita->___awmod
    _buscar_dado->___awmod
    ___aldiv->___lmul
    _MCP4725->___aldiv
    _dac_write->_delay
    _dac_init->_delay
    _I2C_init->___lldiv

Critical Paths under _irq in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _irq in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _irq in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _irq in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _irq in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                92    92      0   71471
                                             30 COMRAM     2     2      0
                                              0 BANK0     89    89      0
                           _I2C_init
                            _MCP4725
                            ___aldiv
                            ___awmod
                             ___lmul
                             ___wmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                        _buscar_dado
                     _buscar_receita *
                         _decodifica
                              _delay
                    _deletar_receita *
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                  _formatar_receitas *
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
            _manipula_atuadores_init
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        2     2      0     296
                                              5 COMRAM     2     2      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         5     5      0     204
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     478
                                              6 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         4     4      0     205
                                              3 COMRAM     4     4      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    3     3      0     114
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       6     4      2    1036
                                              6 COMRAM     6     4      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          5     3      2    1067
                                              6 COMRAM     5     3      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     235
                                              3 COMRAM     8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                            5     4      1   12580
                                             25 COMRAM     5     4      1
                         _decodifica
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         14    10      4    7015
                                             11 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _manipula_atuadores_init                              3     3      0     136
                                              3 COMRAM     3     3      0
                        _alt_atuador
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         5     0      5     294
                                              0 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _formatar_receitas                                    1     1      0     372
                                              2 COMRAM     1     1      0
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                           9     9      0    6633
                                              8 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                         _decodifica
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1816
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 7     7      0       0
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          2     2      0    4167
                                             15 COMRAM     2     2      0
                        _alt_atuador
                           _codifica
                         _decodifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _decodifica                                           4     2      2    1198
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     1     1      0    3013
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       2     0      2     120
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    4     4      0    2357
                                             11 COMRAM     4     4      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           3     1      2    2041
                                              8 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _codifica                                             5     3      2     590
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          4     2      2    1733
                                              7 COMRAM     4     2      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0    1415
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     176
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              5     2      3    4971
                                              7 COMRAM     5     2      3
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1386
                                              2 COMRAM     5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      2     2      0     176
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          5     3      2     757
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        2     0      2     540
                                              7 COMRAM     2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _deletar_receita                                      4     4      0     939
                                              4 COMRAM     4     4      0
                       _EEPROM_write
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     348
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _buscar_receita                                       6     4      2     710
                                              6 COMRAM     6     4      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _buscar_dado                                          6     3      3     741
                                              6 COMRAM     6     3      3
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     478
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _MCP4725                                              2     0      2    4207
                                             26 COMRAM     2     0      2
                           _I2C_stop
                            ___aldiv (ARG)
                             ___lmul (ARG)
                           _dac_init
                          _dac_write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_write                                            5     3      2    1533
                                              3 COMRAM     5     3      2
                    _I2C_ack_receive
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_init                                             0     0      0    1261
                    _I2C_ack_receive
                          _I2C_start
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     1      2    1239
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _I2C_tx                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ack_receive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             4     0      4     412
                                             13 COMRAM     4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  0     0      0       0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     ___lldiv
   _MCP4725
     _I2C_stop
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
     _dac_init (ARG)
       _I2C_ack_receive
       _I2C_start
       _I2C_tx
       _delay
     _dac_write (ARG)
       _I2C_ack_receive
       _I2C_tx
       _delay
     _delay (ARG)
   ___aldiv
     ___lmul (ARG)
   ___awmod
   ___lmul
   ___wmul
   _addContCiclos
   _addIndicePassos
   _alt_atuador
   _buscar_dado
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _buscar_receita *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _decodifica *
   _delay *
   _deletar_receita *
     _EEPROM_write
     _end_receita
   _dignum_apagar *
     ___lwdiv
   _dignum_conc *
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _codifica
     _decodifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _decodifica
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _formatar_receitas *
     _EEPROM_write
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _manipula_atuadores_init *
     _alt_atuador
   _printExec *
     _decodifica
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___wmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     59      83       5       81.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      58       1       93.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DB      20        0.0%
DATA                 0      0      DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sun Nov 14 18:44:26 2021

              ??_fifo_add_control 0035                     dac_write@code 0029  
                ??_fifo_add_tempo 0035     __size_of_fifo_indicePrint_dec 0014  
   __size_of_fifo_indicePrint_inc 005E                       _SSPSTATbits 000FC7  
                    ___awdiv@sign 002B           __end_of_dispLCD_dataReg 31F4  
             ___wmul@multiplicand 0028                      printExec@col 0042  
                    printExec@ind 003F                    salvar_dado@col 002C  
                  salvar_dado@aux 002E                __size_of_I2C_start 0014  
                             l310 109E                               l321 11CE  
                             l410 2886                               l138 1762  
                             l218 077C                               l317 11C4  
                             l502 2FF2                               l415 26BC  
                             l432 35D8                               l361 1700  
                             l530 3598                               l338 13A6  
                             l611 3700                               l283 0CD2  
                             l620 3880                               l532 35A6  
                             l429 35C6                               l533 35AA  
                             l701 2298                               l605 3884  
                             l541 3356                               l454 25D4  
                             l614 3852                               l630 2B7A  
                             l198 0602                               l527 382A  
                             l631 2B90                               l279 0C88  
                             l536 369E                               l552 3654  
                             l640 2C30                               l608 387A  
                             l457 31F2                               l465 2ED6  
                             l641 2C80                               l617 383E  
                             l546 3398                               l474 3282  
                             l626 2B4E                               l386 1A60  
                             l811 2764                               l491 2144  
                             l627 2BE6                               l468 34F0  
                             l804 3412                               l724 3154  
                             l636 2BEE                               l644 3848  
                             l557 3484                               l813 279A  
                             l733 323A                               l629 2B64  
                             l653 2D96                               l549 36C0  
                             l494 386E                               l638 2C04  
                             l742 3746                               l662 31A4  
                             l670 380C                               l911 379E  
                             l815 27A4                               l639 2C1A  
                             l719 23D8                               l736 3866  
                             l752 2F94                               l913 37AC  
                             l729 30FC                               l745 3888  
                             l489 20D6                               l914 37AE  
                             l850 3312                               l682 2D18  
                             l818 37FA                               l826 1FCA  
                             l834 1FCA                               l739 388C  
                             l908 344C                               l932 37B2  
                             l676 385C                               l756 379A  
                             l853 36E2                               l934 37C0  
                             l950 381C                               l926 3764  
                             l598 375C                               l935 37C2  
                             l847 33D6                               l792 1E40  
                             l768 1E30                               l929 3772  
                             l881 3048                               l873 3874  
                             l882 304C                               l947 380E  
                             l795 32CA                               l779 1D6A  
                             l891 354E                               l980 34B4  
                             l877 3002                               l981 34BA  
                             l965 3834                               l798 357C  
                             l878 301E                               l879 3020  
                             l975 2AA2                               l888 30A4  
                             _IHM 00D7                deletar_receita@aux 002A  
                             _irq 0008           __size_of_buscar_receita 0042  
               fp__buscar_receita 0000           __end_of_dispLCD_instReg 25D6  
                    ___awmod@sign 002B                               tosl 000FFD  
                             wreg 000FE8                   __end_of_MCP4725 36E4  
                 salvar_dado@data 002D                   salvar_dado@adrs 0030  
                alt_atuador@tecla 0028                      ?_buscar_dado 002C  
                            l1020 3786                              l1023 37E8  
                            l1105 24E4                              l1017 371A  
                            l1026 367A                              l1060 2B46  
                            l1053 2B36                              l1037 2E64  
                            l1038 2E74                              l1270 29FA  
                            l1257 294A                              l1524 2E0A  
                            l1517 2E02                              l5001 3448  
                            l5003 344A                              l5011 3522  
                            l5005 36C2                              l5101 3226  
                            l5021 353C                              l5013 3524  
                            l5007 36D2                              l5103 3236  
                            l5111 30D6                              l5031 3546  
                            l5023 353E                              l5015 3534  
                            l5009 36D6                              l5121 3110  
                            l5113 30E6                              l5105 30A8  
                            l5201 1CCC                              l5033 3548  
                            l5025 3540                              l5017 3538  
                            l5041 37D8                              l6001 0AA2  
                            l5123 3120                              l5131 3150  
                            l5115 30E8                              l5107 30B8  
                            l5211 1D0E                              l5203 1CDC  
                            l5035 354A                              l5027 3542  
                            l5019 353A                              l5043 3840  
                            l5051 34A0                              l6011 0AF6  
                            l6003 0AAE                              l5061 323E  
                            l4501 28C8                              l5125 312E  
                            l5109 30C8                              l5117 30F8  
                            l5301 2F48                              l5213 1D10  
                            l5205 1CE2                              l5221 1D3A  
                            l5141 1B88                              l5133 1B5E  
                            l5037 354C                              l5029 3544  
                            l5053 34B0                              l5045 3486  
                            l6101 0E4A                              l6021 0B64  
                            l6013 0B1C                              l6005 0AD4  
                            l5071 3266                              l5063 3242  
                            l4511 28FE                              l4503 28DA  
                            l5127 313E                              l5119 3100  
                            l5311 3798                              l5303 2F82  
                            l5231 1D74                              l5223 1D4A  
                            l5215 1D26                              l5207 1CE4  
                            l5151 1BB6                              l5143 1B8E  
                            l5135 1B6A                              l5039 3774  
                            l5055 34B8                              l5047 348A  
                            l6111 0EB0                              l6103 0E56  
                            l6031 0BBA                              l6023 0B72  
                            l6015 0B2A                              l6007 0AE2  
                            l5073 3630                              l5065 3250  
                            l4513 2914                              l4505 28E2  
                            l4521 292A                              l5129 3140  
                            l5401 385E                              l5321 2CA2  
                            l5313 388A                              l5305 2F88  
                            l4601 295E                              l5233 1D82  
                            l5225 1D5A                              l5217 1D2E  
                            l5209 1CF4                              l5161 1BE8  
                            l5153 1BBE                              l5145 1B94  
                            l5137 1B6E                              l5049 3490  
                            l6121 0F64                              l6113 0EBA  
                            l6105 0E68                              l6033 0BC4  
                            l6025 0B7C                              l6017 0B34  
                            l6009 0AEC                              l6041 0BD6  
                            l4531 35B0                              l5075 3642  
                            l4451 2526                              l4443 24E8  
                            l5067 3260                              l5059 3868  
                            l4523 293A                              l4515 291C  
                            l4507 28EA                              l5403 3862  
                            l5323 2CA4                              l5307 2F90  
                            l4611 2992                              l4603 2966  
                            l5251 1E1C                              l5235 1D8E  
                            l5227 1D6A                              l5243 1DA0  
                            l5163 1BEA                              l5171 1C18  
                            l5155 1BCE                              l5147 1BA4  
                            l5139 1B78                              l5331 3886  
                            l5083 3174                              l5091 3194  
                            l5411 305E                              l6211 12DA  
                            l6203 11EA                              l6131 0FDC  
                            l6115 0EC4                              l6107 0E7A  
                            l6123 0F9C                              l6051 0C7C  
                            l6043 0C20                              l6035 0BCE  
                            l6027 0B86                              l6019 0B3E  
                            l4533 35C0                              l4461 2558  
                            l4453 2538                              l4445 24EA  
                            l4541 2E90                              l5069 3264  
                            l4525 2942                              l4517 291E  
                            l4509 28F8                              l5093 31F6  
                            l5325 2CC0                              l5317 2C82  
                            l5309 3788                              l4621 29CE  
                            l4613 299A                              l4605 296A  
                            l5253 1E24                              l5237 1D96  
                            l5229 1D72                              l5245 1DFA  
                            l5181 1C62                              l5173 1C28  
                            l5165 1C00                              l5157 1BD2  
                            l5149 1BA6                              l5085 3188  
                            l5077 3158                              l4701 1FCE  
                            l5341 1E6C                              l5421 3836  
                            l5413 308C                              l5405 304E  
                            l6301 1608                              l6213 12E4  
                            l6205 1234                              l6133 0FE4  
                            l6125 0FAE                              l6117 0EF0  
                            l6109 0EA6                              l6053 0C88  
                            l6045 0C28                              l6029 0BAC  
                            l4471 257E                              l4463 2570  
                            l4455 2540                              l4447 2502  
                            l4535 2E78                              l4519 2924  
                            l5095 3206                              l5327 2D04  
                            l5319 2C92                              l4623 29D4  
                            l4615 29A2                              l4607 2978  
                            l5255 1E26                              l5247 1E0C  
                            l5191 1C9A                              l5175 1C42  
                            l5167 1C10                              l5159 1BE2  
                            l5087 318E                              l5079 3160  
                            l4711 200C                              l4703 1FE2  
                            l5351 1EBE                              l5343 1E86  
                            l5335 1E44                              l5271 2D3A  
                            l5415 308E                              l5407 3052  
                            l5431 27DC                              l5423 27A8  
                            l6311 1670                              l6303 161C  
                            l6231 1394                              l6215 130A  
                            l6207 1252                              l6151 1070  
                            l6135 0FEC                              l6143 100E  
                            l6127 0FB2                              l6119 0F2A  
                            l6071 0CF4                              l6063 0CE4  
                            l6055 0C9C                              l6047 0C46  
                            l7111 045A                              l4529 35AC  
                            l5601 2E44                              l5513 3748  
                            l4561 31CC                              l4553 31A8  
                            l4481 25CA                              l4473 2594  
                            l4465 2572                              l4457 2542  
                            l4449 2514                              l4537 2E80  
                            l4545 2E98                              l5097 3214  
                            l4641 22DE                              l4633 229A  
                            l5329 2D14                              l4617 29B0  
                            l4625 29DA                              l4609 2980  
                            l5249 1E18                              l5193 1C9E  
                            l5177 1C44                              l5169 1C16  
                            l5185 1C6E                              l5521 36EA  
                            l5089 3190                              l4721 2076  
                            l4713 2014                              l4705 1FF2  
                            l5361 1F12                              l5353 1ECE  
                            l5345 1E88                              l5337 1E4C  
                            l5281 2D5E                              l5273 2D42  
                            l5265 2D1A                              l5417 30A0  
                            l5409 3056                              l5433 27EC  
                            l5425 27AC                              l6401 1A4A  
                            l6321 16D2                              l6313 16A0  
                            l6305 1626                              l6241 1410  
                            l6233 139A                              l6217 1316  
                            l6225 1326                              l6209 127E  
                            l6161 10C0                              l6153 107E  
                            l6145 1048                              l7121 1022  
                            l6137 0FF4                              l6129 0FD0  
                            l6081 0D1E                              l6057 0CBC  
                            l6049 0C72                              l7113 07A8  
                            l5611 2400                              l5603 23DA  
                            l5515 375A                              l4563 31CE  
                            l4555 31AA                              l4483 25D2  
                            l4475 2596                              l4467 257A  
                            l4459 2556                              l4539 2E88  
                            l4547 2ECA                              l5531 2F9A  
                            l4491 28A2                              l5099 3224  
                            l4651 232E                              l4643 22EE  
                            l4627 29EA                              l4619 29C6  
                            l5195 1CAE                              l5187 1C7E  
                            l5179 1C5A                              l5259 1E30  
                            l5523 36F0                              l5451 25DC  
                            l5507 2662                              l4731 20D0  
                            l4723 207C                              l4715 203A  
                            l4707 1FFA                              l4571 3882  
                            l5371 1F52                              l5355 1EDA  
                            l5363 1F1C                              l5347 1EA4  
                            l5339 1E5C                              l5419 3876  
                            l5291 2D94                              l5283 2D76  
                            l5275 2D4A                              l5267 2D2A  
                            l5435 27FC                              l5427 27BC  
                            l5443 282C                              l7131 1B0C  
                            l6411 1A8E                              l6403 1A5C  
                            l6331 1722                              l6323 16E0  
                            l6315 16AA                              l6251 14C2  
                            l6235 13A6                              l6227 1350  
                            l6219 131E                              l7123 11FE  
                            l6171 113C                              l6163 10C6  
                            l6155 1096                              l6147 1050  
                            l6139 1006                              l6083 0D26  
                            l6075 0D0C                              l6067 0CEC  
                            l6059 0CDA                              l7115 0896  
                            l7107 0304                              l5621 2448  
                            l5613 240E                              l5605 23DE  
                            l5517 387C                              l4741 3828  
                            l4565 31D0                              l4557 31C2  
                            l4477 25A6                              l4469 257C  
                            l5533 2FA8                              l5541 2FD4  
                            l4493 28A6                              l4485 2888  
                            l4581 33E0                              l4821 271A  
                            l4813 26DA                              l4805 26BE  
                            l7141 238A                              l4653 233E  
                            l4645 22FE                              l4661 236E  
                            l4637 22B6                              l4629 29F2  
                            l5197 1CB4                              l5189 1C8E  
                            l5525 36F8                              l4733 212A  
                            l4717 203C                              l4725 207E  
                            l4709 2004                              l5373 1F5A  
                            l5365 1F2C                              l5381 1F86  
                            l5357 1EF4                              l5349 1EAE  
                            l5285 2D7C                              l5277 2D52  
                            l5269 2D32                              l7133 2840  
                            l5437 280C                              l5429 27CC  
                            l4901 2A18                              l6413 1A98  
                            l6405 1A68                              l6333 1728  
                            l6325 16F8                              l6317 16B2  
                            l6309 1644                              l6253 14C8  
                            l6237 13C6                              l6229 136E  
                            l7125 133A                              l6181 1176  
                            l6173 1146                              l6165 10D8  
                            l6149 1060                              l6157 10A2  
                            l6093 0DA0                              l7117 0BEA  
                            l7109 03C4                              l5701 0106  
                            l4591 379C                              l5631 2492  
                            l5623 2450                              l5615 241E  
                            l5607 23EC                              l4735 3820  
                            l4751 358A                              l5391 3286  
                            l4567 31E6                              l4559 31C4  
                            l4479 25B8                              l5535 2FBA  
                            l4495 28B4                              l4487 288C  
                            l4583 33FC                              l4831 2776  
                            l4823 272A                              l4815 26EA  
                            l4807 26C2                              l7143 2C5A  
                            l4671 2C46                              l4655 234E  
                            l4647 230E                              l4639 22CE  
                            l5295 3732                              l5199 1CB6  
                            l5519 36E4                              l5463 25FC  
                            l4727 20B0                              l4719 2058  
                            l4575 37FE                              l5383 1F98  
                            l5375 1F68                              l5367 1F3C  
                            l5359 1EF6                              l7135 2BC0  
                            l5287 2D80                              l5279 2D56  
                            l5551 332C                              l5543 3316  
                            l5439 281C                              l4911 2A64  
                            l4903 2A34                              l6415 1AA8  
                            l6423 1AEC                              l6343 174C  
                            l6335 173A                              l6319 16C2  
                            l6327 1704                              l6271 1534  
                            l6263 14F4                              l7127 1446  
                            l6239 1406                              l6247 1432  
                            l6183 1186                              l6175 114C  
                            l6167 10E0                              l6159 10B4  
                            l6095 0DCC                              l7119 0D42  
                            l6079 0D14                              l6087 0D2E  
                            l5703 010A                              l6351 1762  
                            l4593 3760                              l5641 24C4  
                            l5633 24A2                              l5625 245C  
                            l5617 2422                              l5609 23FC  
                            l4737 3824                              l4761 367C  
                            l4753 358C                              l4745 3580  
                            l5393 3550                              l4569 31F0  
                            l5537 2FC4                              l5529 2F96  
                            l7145 2220                              l4497 28BC  
                            l4489 289A                              l4585 33FE  
                            l4833 2786                              l4825 2740  
                            l4817 26FA                              l4809 26C6  
                            l4657 235E                              l4649 231E  
                            l7137 2676                              l5481 262C  
                            l5457 25EC                              l5449 25D8  
                            l4729 20C0                              l5385 1FA4  
                            l5377 1F74                              l5369 1F48  
                            l5289 2D84                              l5553 3344  
                            l5545 3328                              l4913 2A88  
                            l4921 2AA0                              l6417 1ACE  
                            l6409 1A8A                              l6361 18CC  
                            l7129 1778                              l6345 1758  
                            l6337 1742                              l6329 1716  
                            l6281 1552                              l6265 1520  
                            l6257 14DC                              l6249 14A4  
                            l6185 1196                              l6169 110C  
                            l6097 0E06                              l6089 0D98  
                            l6353 18A6                              l5721 0176  
                            l5713 0136                              l4931 2AA4  
                            l4595 380E                              l4851 339A  
                            l5643 24D4                              l5635 24A4  
                            l5627 246A                              l5619 2432  
                            l4739 3826                              l4755 358E  
                            l4747 3582                              l5571 3450  
                            l5539 2FD0                              l7147 227A  
                            l4771 2174                              l4499 28C0  
                            l4587 3410                              l4579 33D8  
                            l4827 2750                              l4819 270A  
                            l4667 2BEA                              l5299 2F38  
                            l7139 1DB4                              l5475 261C  
                            l4843 37EC                              l5387 1FC0  
                            l5379 1F7C                              l5395 36A2  
                            l5555 3346                              l4915 2A8A  
                            l6419 1AE4                              l6371 1916  
                            l6363 18DC                              l6355 18AE  
                            l6427 1AF6                              l6291 15A2  
                            l6283 1556                              l6267 152C  
                            l6259 14E0                              l6275 153A  
                            l6195 11D2                              l6187 11A4  
                            l6179 116E                              l6099 0E40  
                            l5811 043E                              l5803 03B0  
                            l5731 01C2                              l5715 0162  
                            l5707 011E                              l5651 001A  
                            l4941 2AEC                              l4933 2AB4  
                            l4861 33C6                              l4853 339E  
                            l5637 24AE                              l5629 2474  
                            l5565 3370                              l5557 335A  
                            l4757 3592                              l4749 3586  
                            l5581 3472                              l5573 3462  
                            l4925 3656                              l7149 2EAC  
                            l4781 21C4                              l4773 2184  
                            l4765 2148                              l4829 2760  
                            l5397 3854                              l4597 294C  
                            l5389 384A                              l5493 264C  
                            l5469 260C                              l4845 37EC  
                            l4677 2B4A                              l4917 2A9A  
                            l4909 2A38                              l6381 199E  
                            l6373 1928                              l6365 18EE  
                            l6357 18B6                              l6277 153E  
                            l6197 11DA                              l6189 11BC  
                            l5901 06BC                              l5821 048E  
                            l5805 03E2                              l5741 01F0  
                            l5733 01C8                              l5717 016E  
                            l5709 0122                              l5725 017C  
                            l5661 004C                              l5653 003E  
                            l4951 2B30                              l4943 2AF6  
                            l4935 2ACA                              l4863 33CA  
                            l4855 33AA                              l4871 32FA  
                            l5639 24B4                              l5567 3386  
                            l5559 336C                              l4759 3596  
                            l5583 3474                              l4927 3672  
                            l4791 2204                              l4783 21D4  
                            l4775 2194                              l4767 214C  
                            l4839 279E                              l4599 2950  
                            l5591 372A                              l5487 263C  
                            l4847 37F8                              l4687 2BA6  
                            l4695 2BAC                              l6391 1A00  
                            l6383 19AE                              l6375 1934  
                            l6367 18FE                              l6359 18C0  
                            l6295 15AA                              l6287 156A  
                            l5911 071E                              l5903 06C2  
                            l5831 04B0                              l5823 0492  
                            l5807 042A                              l5751 0238  
                            l5743 01FC                              l5735 01D4  
                            l5727 0184                              l5671 0078  
                            l5663 0050                              l5655 003E  
                            l5647 0012                              l4945 2B14  
                            l4937 2AD2                              l4857 33B0  
                            l4873 3302                              l4865 32CC  
                            l5593 2E0C                              l5569 3388  
                            l4961 2DC2                              l4953 2D98  
                            l4785 21E4                              l4777 21A4  
                            l4769 2164                              l5585 371C  
                            l4881 3004                              l6393 1A0A  
                            l6385 19B2                              l6377 1984  
                            l6369 1906                              l6289 1596  
                            l5913 0736                              l5905 06CE  
                            l5825 0498                              l5809 0436  
                            l5817 0446                              l5761 029A  
                            l5753 0252                              l5737 01DE  
                            l5745 0202                              l5729 01B0  
                            l5673 0080                              l5665 006C  
                            l5657 0044                              l5649 0016  
                            ?_irq 0026                              l4947 2B24  
                            l4939 2ADE                              l4875 37B0  
                            l4859 33B4                              l4867 32EA  
                            l5595 2E1C                              l5579 3466  
                            l4971 2DF6                              l4963 2DD0  
                            l4955 2DA0                              l4787 21F4  
                            l4779 21B4                              l4795 2266  
                            l5499 265C                              l4891 304A  
                            l4883 3018                              l6387 19DA  
                            l6379 198E                              l6299 15B0  
                            l5931 084C                              l5923 078C  
                            l5915 074E                              l5907 06E6  
                            l5843 04EA                              l5835 04C4  
                            l5819 0470                              l5771 02DE  
                            l5763 02A4                              l5755 025C  
                            l5747 021A                              l5739 01EC  
                            l5691 00EC                              l5683 00A8  
                            l5675 0088                              l5667 0070  
                            l5659 0048                              l4949 2B26  
                            l4869 32EE                              l5597 2E2A  
                            l4973 2DFC                              l4965 2DD6  
                            l4957 2DB2                              l5589 3720  
                            l4885 302E                              l4877 3870  
                            l4981 3702                              l6397 1A28  
                            l6389 19E4                              l5941 0878  
                            l5925 07EE                              l5917 076C  
                            l5933 0852                              l5909 0700  
                            l5861 0532                              l5853 0508  
                            l5837 04D6                              l5829 04AC  
                            l5781 032E                              l5773 02E6  
                            l5765 02BE                              l5757 0260  
                            l5749 022E                              l5693 00F8  
                            l5685 00AC                              l5677 0090  
                            l5669 0074                              l5599 2E3A  
                            l4967 2DEC                              l4959 2DBA  
                            l4975 34BC                              l4887 3032  
                            l4879 2FF6                              l4895 29FC  
                            l4991 3716                              l4983 3704  
                            l5951 0912                              l5935 0856  
                            l5927 081A                              l5919 077C  
                            l5863 053E                              l5855 050C  
                            l5871 054C                              l5839 04E2  
                            l5847 04F0                              l5791 038A  
                            l5783 0340                              l5767 02C8  
                            l5759 0286                              l5679 0094  
                            l4969 2DF4                              l4977 34CC  
                            l4889 3038                              l4897 2A04  
                            l4993 3718                              l4985 3708  
                            l5961 09AA                              l5953 093E  
                            l5929 0838                              l5937 085C  
                            l5881 05AC                              l5873 0570  
                            l5849 04F4                              l5793 0394  
                            l5785 0352                              l5769 02D4  
                            l5777 02F0                              l5697 0100  
                            l5689 00C0                              l4995 3414  
                            l4979 382C                              l4987 3712  
                            l5971 09E8                              l5963 09C0  
                            l5955 096A                              l5939 0874  
                            l5891 0626                              l5947 0882  
                            l5883 05CA                              l5875 0584  
                            l5867 0546                              l5859 0520  
                            l5795 03A0                              l5787 0366  
                            l5779 032A                              l4997 3418  
                            l4989 3714                              l5981 0A26  
                            l5973 09FE                              l5965 09CE  
                            l5957 0974                              l5949 08F4  
                            l5893 062E                              l5885 05F0  
                            l5877 058E                              l5797 03A8  
                            l5789 0370                              l4999 3420  
                            l5991 0A64                              l5983 0A3C  
                            l5975 0A0C                              l5967 09D8  
                            l5959 09A0                              l5895 0668  
                            l5887 05F6                              l5993 0A7A  
                            l5985 0A4A                              l5977 0A16  
                            l5969 09DE                              l5897 0672  
                            l5889 0602                              l5995 0A88  
                            l5987 0A54                              l5979 0A1C  
                            l5899 068A                              l5997 0A92  
                            l5989 0A5A                              l5999 0A98  
         __end_of_getIndicePassos 3886                              STR_1 7FFD  
                            STR_2 7E64                              STR_3 7E90  
                            STR_4 7D21                              STR_5 7FCB  
                            STR_6 7F4D                              STR_7 7FA1  
                            STR_8 7F38                              STR_9 7EE4  
                            u3000 20D0                              u3001 20CC  
                            u3010 2144                              u3011 2140  
                            u3020 35A6                              u3100 2776  
                            u3021 35A2                              u3101 2772  
                            u3030 2164                              u3110 2796  
                            u3031 2160                              u3111 2792  
                            u3040 26D6                              u3200 2A64  
                            u3041 26D2                              u3201 2A60  
                            u3130 37C0                              u3050 26FA  
                            u3210 2A9A                              u4010 02BE  
                            u3131 37BC                              u3051 26F6  
                            u3211 2A96                              u4011 02BA  
                            u3220 2ACA                              u3300 3282  
                            u3060 271A                              u3140 3018  
                            u4020 038A                              u3221 2AC6  
                            u3125 32D8                              u3301 327E  
                            u3061 2716                              u3141 3014  
                            u4021 0386                              u3230 2AEC  
                            u3070 272A                              u3310 3170  
                            u3150 302E                              u3231 2AE8  
                            u3071 2726                              u3311 316C  
                            u3151 302A                              u3240 2B14  
                            u2600 25A6                              u3080 2750  
                            u3400 1BB6                              u3320 3188  
                            u3160 3048                              u5000 1AE4  
                            u4120 068A                              u4040 04A8  
                            u4008 0272                              u3241 2B10  
                            u2601 25A2                              u3081 274C  
                            u3401 1BB2                              u3321 3184  
                            u3161 3044                              u5001 1AE0  
                            u4121 0686                              u4041 04A4  
                            u4009 0286                              u3250 2DB2  
                            u2610 25B8                              u3090 2760  
                            u3410 1BCE                              u3330 31A4  
                            u3170 2A14                              u4050 04C0  
                            u3251 2DAE                              u2611 25B4  
                            u3091 275C                              u3411 1BCA  
                            u3331 31A0                              u3171 2A10  
                            u4051 04BC                              u2700 37AC  
                            u3260 2DD0                              u2620 289A  
                            u3340 3206                              u3500 1D4A  
                            u3420 1BE2                              u4300 0B64  
                            u4140 06E6                              u4108 05DC  
                            u4060 0504                              u2701 37A8  
                            u3261 2DCC                              u2621 2896  
                            u3341 3202                              u3501 1D46  
                            u3421 1BDE                              u4301 0B60  
                            u4141 06E2                              u4109 05F0  
                            u4061 0500                              u2710 3772  
                            u3270 2DEC                              u2630 28B4  
                            u3350 30B8                              u3510 1D5A  
                            u3430 1C10                              u4310 0BAC  
                            u4150 0700                              u4118 0638  
                            u4070 051C                              u4038 047A  
                            u2711 376E                              u3271 2DE8  
                            u2631 28B0                              u3351 30B4  
                            u3511 1D56                              u3431 1C0C  
                            u4311 0BA8                              u4151 06FC  
                            u4119 0668                              u4071 0518  
                            u4039 048E                              u2720 381C  
                            u2640 28DA                              u3360 30C8  
                            u2800 22CE                              u3600 2F82  
                            u3520 1D82                              u3440 1C28  
                            u3184 2A2A                              u3280 34A0  
                            u4400 0E68                              u4240 09C0  
                            u4208 08FE                              u4160 0736  
                            u4080 05A8                              u2721 3818  
                            u2641 28D6                              u3361 30C4  
                            u2801 22CA                              u3601 2F7E  
                            u3521 1D7E                              u3441 1C24  
                            u3185 2A26                              u3281 349C  
                            u4401 0E64                              u4241 09BC  
                            u4209 0912                              u4161 0732  
                            u4081 05A4                              u2570 2514  
                            u2650 28F8                              u3370 3110  
                            u2810 2BFE                              u3610 3798  
                            u2730 295E                              u3530 1E0C  
                            u3450 1C7E                              u3194 2A4A  
                            u3290 34B0                              u4410 0E7A  
                            u4250 09FE                              u4218 091C  
                            u4170 074E                              u4138 0694  
                            u5027 252C                              u2571 2510  
                            u2651 28F4                              u3371 310C  
                            u2811 2BF8                              u3611 3794  
                            u2731 295A                              u3531 1E08  
                            u3451 1C7A                              u3195 2A46  
                            u3291 34AC                              u4411 0E76  
                            u4251 09FA                              u4219 093E  
                            u4171 074A                              u4139 06BC  
                            u2580 2526                              u2660 2914  
                            u3380 3120                              u3620 2C92  
                            u2740 2978                              u3540 1E40  
                            u3460 1C8E                              u3700 1EF4  
                            u2900 2B74                              u4500 1060  
                            u4340 0C9C                              u4260 0A3C  
                            u4228 0948                              u4180 081A  
                            u5037 253A                              u2581 2522  
                            u2661 2910                              u3381 311C  
                            u3621 2C8E                              u2741 2974  
                            u3541 1E3C                              u3461 1C8A  
                            u3701 1EF0                              u2901 2B6E  
                            u4501 105C                              u4341 0C98  
                            u4261 0A38                              u4229 096A  
                            u4181 0816                              u2590 2556  
                            u2670 293A                              u2830 2C14  
                            u3630 2CA2                              u2750 2992  
                            u3470 1CAE                              u3390 1B88  
                            u3710 1F2C                              u2910 2B8A  
                            u3550 2D76                              u4510 1070  
                            u4350 0CBC                              u4270 0A7A  
                            u4238 097E                              u4190 0874  
                            u5047 2574                              u2591 2552  
                            u2671 2936                              u2831 2C0E  
                            u3631 2C9E                              u2751 298E  
                            u3471 1CAA                              u3391 1B84  
                            u3711 1F28                              u2911 2B84  
                            u3551 2D72                              u4511 106C  
                            u4351 0CB8                              u4271 0A76  
                            u4239 09A0                              u4191 0870  
                            u2680 35D8                              u3800 3398  
                            u3640 2CC0                              u2760 29B0  
                            u3480 1CDC                              u3720 1F3C  
                            u2920 2BA0                              u3560 2D94  
                            u4600 11BC                              u4520 1096  
                            u4360 0D08                              u4328 0C32  
                            u4280 0AD4                              u2681 35D4  
                            u3801 3394                              u5057 25BE  
                            u2825 2C00                              u3641 2CBC  
                            u2761 29AC                              u3481 1CD8  
                            u3721 1F38                              u2921 2B9A  
                            u3561 2D90                              u4601 11B8  
                            u4521 1092                              u4361 0D04  
                            u4329 0C46                              u4281 0AD0  
                            u3810 3484                              u2690 3410  
                            u2850 2C2A                              u3570 3744  
                            u2770 29C6                              u3490 1CF4  
                            u2930 1FDE                              u3730 1F68  
                            u3650 1E5C                              u2906 2B76  
                            u4530 10B4                              u4338 0C50  
                            u4290 0B1C                              u4098 05B6  
                            u3811 3480                              u5067 25CC  
                            u2691 340C                              u2851 2C24  
                            u3571 373E                              u2771 29C2  
                            u3491 1CF0                              u2931 1FD8  
                            u3731 1F64                              u3651 1E58  
                            u4531 10B0                              u4339 0C72  
                            u4291 0B18                              u4099 05CA  
                            u3820 2E2A                              u3580 3746  
                            u2780 29EA                              u2940 1FE0  
                            u3740 1F98                              u3660 1E6C  
                            u2916 2B8C                              u4540 10D8  
                            u4428 0E84                              u3900 00A4  
                            u3821 2E26                              u5077 31C6  
                            u2845 2C16                              u2781 29E6  
                            u3741 1F94                              u3661 1E68  
                            u4541 10D4                              u4429 0EA6  
                            u3901 00A0                              u3830 2E64  
                            u2870 2C40                              u2790 22B2  
                            u3590 2F48                              u2950 1FF2  
                            u3670 1E86                              u2926 2BA2  
                            u3750 30A0                              u4710 14D8  
                            u4470 0FAE                              u4438 0ECE  
                            u3910 00BC                              u3831 2E60  
                            u5087 31EA                              u2871 2C3A  
                            u2791 22AE                              u3591 2F44  
                            u2951 1FEE                              u3671 1E82  
                            u3751 309C                              u4711 14D4  
                            u4471 0FAA                              u4439 0EF0  
                            u3911 00B8                              u3840 23EC  
                            u3760 375A                              u2960 203A  
                            u3680 1EBE                              u4720 14F0  
                            u4448 0EFA                              u5097 35B6  
                            u3841 23E8                              u3761 3756  
                            u2865 2C2C                              u2961 2036  
                            u3681 1EBA                              u4721 14EC  
                            u4449 0F2A                              u3850 240E  
                            u3770 2FBA                              u2970 2072  
                            u3690 1ECE                              u2890 2B5E  
                            u4618 123E                              u4490 1006  
                            u4458 0F34                              u4378 0DAA  
                            u3930 011A                              u3851 240A  
                            u3771 2FB6                              u2971 206E  
                            u3691 1ECA                              u2891 2B58  
                            u4619 1252                              u4491 1002  
                            u4459 0F64                              u4379 0DCC  
                            u3931 0116                              u3860 2448  
                            u3780 2FF2                              u2980 20B0  
                            u4900 1916                              u4820 16C2  
                            u4740 154E                              u4708 14AE  
                            u4628 125C                              u4580 1186  
                            u4468 0F6E                              u4388 0DD6  
                            u3940 0132                              u3861 2444  
                            u3781 2FEE                              u2885 2C42  
                            u2981 20AC                              u4901 1912  
                            u4821 16BE                              u4741 154A  
                            u4709 14C2                              u4629 127E  
                            u4581 1182                              u4469 0F9C  
                            u4389 0E06                              u3941 012E  
                            u3870 246A                              u2990 20C0  
                            u3790 3356                              u4910 1928  
                            u4830 16D2                              u4750 1566  
                            u4638 1288                              u4590 1196  
                            u4558 10EA                              u4398 0E10  
                            u3871 2466                              u2991 20BC  
                            u3791 3352                              u4911 1924  
                            u4831 16CE                              u4751 1562  
                            u4639 12AE                              u4591 1192  
                            u4559 110C                              u4399 0E40  
                            u3880 2492                              u2896 2B60  
                            u4920 199E                              u4840 16F8  
                            u4808 164E                              u4648 12B8  
                            u4568 1116                              u4488 0FBC  
                            u3928 00CA                              u3881 248E  
                            u4921 199A                              u4841 16F4  
                            u4809 1670                              u4649 12DA  
                            u4569 113C                              u4489 0FD0  
                            u3929 00EC                              u3890 24C4  
                            u4930 19AE                              u4850 1716  
                            u4818 167A                              u4738 14FE  
                            u4658 12F6                              u4578 1156  
                            u3891 24C0                              u4931 19AA  
                            u4851 1712                              u4819 16A0  
                            u4739 1520                              u4659 130A  
                            u4579 116A                              u3971 01BA  
                            u4940 1A24                              u4860 173A  
                            u4668 135A                              u3980 021A  
                            u4941 1A20                              u4861 1736  
                            u4669 136E                              u3981 0216  
                            u4950 1A46                              u4870 18DC  
                            u4790 1640                              u4678 1380  
                            u3990 0252                              u3958 0140  
                            u4951 1A42                              u4871 18D8  
                            u4791 163C                              u4679 1394  
                            u3991 024E                              u3959 0162  
                            u4960 1A5C                              u4880 18EE  
                            u4768 1574                              u4688 13CC  
                            u3968 018E                              u4961 1A58  
                            u4881 18EA                              u4769 1596  
                            u4689 1406                              u3969 01B0  
                            u4970 1A86                              u4890 18FE  
                            u4778 15BA                              u4698 141A  
                            u4971 1A82                              u4891 18FA  
                            u4779 15DC                              u4699 142E  
                            u4980 1AA8                              u4788 15E6  
                            u4981 1AA4                              u4789 1608  
                            u4990 1ACE                              u4991 1ACA  
                     main@ptr_562 00B4                              _fila 0014  
                            _main 0012                              fsr2h 000FDA  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0059                    ?_addContCiclos 0026  
                __end_of_I2C_init 344E                              prodh 000FF4  
                            prodl 000FF3                       main@vetorIn 00AC  
                            start 000E           __size_of_salvar_receita 0044  
               fp__salvar_receita 0000                  __end_of_I2C_stop 37C4  
               _formatar_receitas 371C                      ___param_bank 000000  
                    ?_ler_atuador 0026                    printExec@passo 0043  
              ?_formatar_receitas 0026      __end_of_salva_atuadores_init 2D98  
                           ??_irq 0026                   _addIndicePassos 3748  
            __end_of_EEPROM_write 35AC                      main@auxPasso 00B7  
                 __end_of___aldiv 24E6                             ?_main 0026  
                 __end_of___awdiv 294C                             _EEADR 000FA9  
                           STR_10 7E3C                             STR_11 7FFD  
                           STR_12 7E64                             STR_20 7FF5  
                           STR_13 7EBA                             STR_21 7EA5  
                           STR_30 7EF9                             STR_14 7ECF  
                           STR_22 7E66                             STR_23 7FE0  
                           STR_31 7E7B                             STR_15 7D74  
                           STR_32 7FB6                             STR_16 7F62  
                           STR_24 7E51                             STR_25 7F8C  
                           STR_17 7F0E                             STR_18 7F23  
                           STR_26 7E13                             STR_19 7F77  
                           STR_27 7DC5                             STR_28 7FFD  
                 __end_of___awmod 29FC                             STR_29 7E64  
                 __end_of___lldiv 2B48                   ___awdiv@divisor 0028  
             ??_formatar_receitas 0028                   __end_of___lwdiv 2E0C  
                           i2l128 3602                   ___awdiv@counter 002A  
                           _TMR1H 000FCF                             _TMR1L 000FCE  
                           _PORTD 000F83                             _TRISD 000F95  
__size_of_manipula_atuadores_init 0050               ___lmul@multiplicand 002A  
                 __end_of_dispLCD 3284                 ??_fifo_disponivel 0026  
           __end_of_teclado_borda 34BC                             _delay 35AC  
                           _setT1 3774                   salvar_receita@i 0031  
                           main@i 009F                             main@j 00A0  
                           pclath 000FFA                             tablat 000FF5  
                 _I2C_ack_receive 380E                             plusw1 000FE3  
                           plusw2 000FDB                      main@vetorOut 00AD  
                           ttemp5 005A                             ttemp6 005D  
                           ttemp7 0061                             status 000FD8  
               __end_of_I2C_start 37B0                             wtemp8 005A  
       __end_of_formatar_receitas 3732                   EEPROM_read@addr 0026  
                   _indice_passos 0056              __end_of_dispLCD_init 34F2  
            __size_of_EEPROM_read 000E                   __initialization 2ED8  
                    __end_of_main 1B5E                  ?_dispLCD_dataReg 0026  
                          ??_main 0044                         ??_MCP4725 0042  
                   __activetblptr 000002                     ?_initSerialIO 0026  
            __size_of_dispLCD_clr 0008              __size_of_dispLCD_num 017A  
            __size_of_dispLCD_str 005E              __size_of_alt_atuador 009A  
                ?_dispLCD_instReg 0026                            ?_delay 0026  
                    ?_salvar_dado 002C                            _ADCON1 000FC1  
                          ?_setT1 002C                            _EEDATA 000FA8  
                          _EECON2 000FA7                  ___awdiv@dividend 0026  
                          _I2C_tx 375E              __size_of_dignum_conc 0048  
                          _EEPROM 00CD                  ?_getIndicePassos 0026  
                          i2l1012 351E                            i2l1014 3520  
                          i2l2231 34F2                            i2l2233 34FA  
                          i2l2235 3510                            i2l2911 35EC  
                          i2l2913 35FA                            i2l2915 35FC  
                          i2l2917 3600                            i2l2909 35DC  
            __size_of_fifo_delete 0098                  __end_of_dac_init 33D8  
                 ??_addContCiclos 0026              __size_of_end_receita 0024  
            __size_of_fifo_indice 0004              __size_of_fifo_lerPos 0012  
                          _SSPADD 000FC8                            _SSPBUF 000FC9  
                   main@init_cond 00AB                   ler_sensor@passo 002A  
                __end_of_codifica 229A                  __end_of_fifo_add 3156  
                __end_of_fifo_tam 388A           __end_of_addIndicePassos 375E  
                          _t1cont 0001                            ___lmul 2E0C  
                       ??___aldiv 003A                            ___wmul 3656  
                       ??___awdiv 002A                         ??___awmod 002A  
                          _ciclos 000F                         ??___lldiv 002E  
               _fifo_alinharPrint 26BE                      ?_timer1_init 0026  
                       ??___lwdiv 002A                            delay@t 0026  
                          clear_0 2F24                  ___awdiv@quotient 002C  
                          _teclas 0046                   ___awmod@divisor 0028  
              ?_fifo_alinharPrint 0026                         ??_dispLCD 0030  
                 ___awmod@counter 002A                    ??_initSerialIO 002B  
                          main@pt 0086                    _buscar_receita 3358  
                __end_of_posAtual 37FC                            setT1@c 002C  
                    __pdataCOMRAM 0046                      __mediumconst 7D20  
                       ?_I2C_init 0033                            tblptrh 000FF7  
                          tblptrl 000FF6               ??_fifo_alinharPrint 0031  
                          tblptru 000FF8                         ?_I2C_stop 0026  
         __end_of_I2C_ack_receive 381E             __end_of_getContCiclos 3854  
                   main@vetor_aux 0074                  __end_of_statusT1 37EA  
          salva_atuadores_init@pt 002D              _salva_atuadores_init 2D1A  
                      __accesstop 0060           __end_of__initialization 2F2A  
            __size_of_buscar_dado 0028          __size_of_deletar_receita 0038  
              fp__deletar_receita 0000                 _serialIObyteShift 2FF4  
                  _salvar_receita 3314        __size_of_formatar_receitas 0016  
         __size_of_dispLCD_lincol 0062                     ___rparam_used 000001  
              ?_serialIObyteShift 0026                __size_of_dac_write 0048  
       __end_of_fifo_alinharPrint 27A6                    __pcstackCOMRAM 0026  
           __size_of_EEPROM_write 002E          __size_of_resetContCiclos 000A  
                    __pidataBANK0 3606                     __end_of_delay 35DA  
                   __end_of_setT1 3788                 fifo_add_control@c 0035  
            __size_of_ler_atuador 00A0               ??_serialIObyteShift 0026  
          __end_of_buscar_receita 339A                __size_of_getCiclos 001E  
         _manipula_atuadores_init 3156         __size_of_fifo_add_control 0048  
               initSerialIO@ptrIn 0026                __size_of_fifo_adrs 000A  
                         I2C_tx@b 0026                        ??_I2C_init 0037  
    __end_of_fifo_indicePrint_dec 379C                        ??_I2C_stop 0026  
    __end_of_fifo_indicePrint_inc 2F96                           ??_delay 0028  
                         ??_setT1 0030                teclado_borda@tecla 002C  
                         ?_I2C_tx 0026             ?_salva_atuadores_init 0026  
                      __pbssBANK0 00E1             __size_of_dispLCD_init 0036  
       __end_of_serialIObyteShift 304E            __end_of_salvar_receita 3358  
                      _decodifica 229A                     ?_teclado_init 0026  
                   ?_teclado_scan 0026                __size_of_intt1_1ms 0030  
                    _EEPROM_write 357E                  teclado_borda@aux 002B  
           __end_of_dignum_apagar 357E                  ?_addIndicePassos 0026  
                  main@contPassos 0084                           ?___lmul 0026  
                         ?___wmul 0026                   _fifo_disponivel 3732  
                  ___lmul@product 002E           serialIObyteShift@dataIn 0026  
                 ?_buscar_receita 002C                        _dignum_tam 33D8  
              __size_of_set_passo 00E2                           _MCP4725 36C2  
                       ?_dac_init 0026                        _fifo_print 1B5E  
              __size_of_printExec 018A                           _LCDbits 000F8A  
                    _dispLCD_init 34BC                           i2u72_40 3510  
                ?_I2C_ack_receive 0026                           i2u72_41 350C  
               __end_of_dac_write 3314                         ?_codifica 0026  
                       ?_fifo_add 0026                         ?_fifo_tam 0026  
                 __size_of_I2C_tx 0016              __size_of_salvar_dado 0022  
                  ??_teclado_init 0026                    ??_teclado_scan 0026  
                 ?_salvar_receita 002C                     ?_serialIOload 0026  
                   ?_serialIOscan 0026                 __end_of_getCiclos 3702  
            __end_of_initSerialIO 3550                       posAtual@ind 0027  
                EEPROM_write@addr 0027                  EEPROM_write@data 0026  
                         __Hparam 0000                 __end_of_fifo_adrs 385E  
                       ?_posAtual 0026                           __Lparam 0000  
                       _I2C_start 379C        __size_of_fifo_alinharPrint 00E8  
               ??_deletar_receita 002A                           ___aldiv 23DA  
                         ___awdiv 2888                   __size_of___lmul 006A  
                         ___awmod 294C                        _ler_sensor 25D6  
                         ___lldiv 2AA4                   __size_of___wmul 0026  
         __size_of_init_atuadores 000A                           ___lwdiv 2D98  
                       ?_statusT1 0026            deletar_receita@receita 002C  
       ??_manipula_atuadores_init 0029                           __pcinit 2ED8  
                         __ramtop 0800                           _dispLCD 323C  
            __size_of_timer1_init 001A                           __ptext0 0012  
                         __ptext1 3702                           __ptext2 382C  
                         __ptext3 3486                           __ptext4 29FC  
                         __ptext5 37D8                           __ptext6 27A6  
                         __ptext7 3774                           __ptext8 304E  
                         __ptext9 3870                     teclado_scan@c 002A  
                   teclado_scan@l 0029                        ??_dac_init 0029  
               __end_of_intt1_1ms 3522                 ??_resetContCiclos 0026  
                         _atuador 0013           __size_of_fifo_add_ciclo 000A  
                       _T1CONbits 000FCD                      __size_of_irq 35FE  
         __size_of_fifo_add_tempo 0058                  ___awmod@dividend 0026  
               salvar_receita@aux 002E                  ___aldiv@dividend 0032  
                   _receita_livre 000000                        ??_codifica 0028  
          ??_salva_atuadores_init 0029                        ??_fifo_add 0035  
                      ??_fifo_tam 0026                           main@aux 0085  
                         main@num 00B2                           main@ptr 009D  
                  __pintcode_body 35DA              end_of_initialization 2F2A  
                  ??_serialIOload 0026                    ??_serialIOscan 0029  
      __size_of_serialIObyteShift 005A                       ?_decodifica 0026  
                   __Lmediumconst 7D20                           int_func 35DA  
                  dispLCD_num@col 0031                    dispLCD_num@div 003D  
                  dispLCD_num@lin 003A                    dispLCD_num@tam 0034  
                  dispLCD_num@num 0032                    _dispLCD_lincol 2E76  
                   ??_EEPROM_read 0026                 __end_of_set_passo 2888  
                  dispLCD_str@lin 002F                    dispLCD_str@str 002D  
                      dispLCD@col 002D                   ___lldiv@divisor 002A  
                      dispLCD@lin 0031                        dispLCD@pos 0030  
                      dispLCD@str 002E           __end_of_fifo_disponivel 3748  
               __end_of_printExec 1FCC                   ___lldiv@counter 0032  
                      ??_posAtual 0027                        ?_I2C_start 0026  
                    I2C_init@freq 0033              _fifo_indicePrint_dec 3788  
                ___aldiv@quotient 003C              _fifo_indicePrint_inc 2F38  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
          __size_of_teclado_borda 0036                fifo_alinharPrint@i 0033  
                      ??_statusT1 002A                     ??_dispLCD_clr 0028  
                   ??_dispLCD_num 0035                     ??_dispLCD_str 002F  
                   ??_alt_atuador 0026                       ?_dignum_tam 002E  
                       _PORTAbits 000F80                  _fifo_add_control 31F4  
            fp__formatar_receitas 0000                       ?_fifo_print 0026  
                      fp__dispLCD 0000                     ??_dignum_conc 002E  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
        __size_of_dispLCD_dataReg 004E                     ??_fifo_delete 0035  
                   ??_end_receita 0028                     ??_fifo_indice 0026  
                   ??_fifo_lerPos 0026                 __size_of_I2C_init 003A  
               __size_of_I2C_stop 0014                     _teclaAnterior 0011  
 __end_of_manipula_atuadores_init 31A6            __end_of_dispLCD_lincol 2ED8  
                  __end_of_I2C_tx 3774    manipula_atuadores_init@atuador 0029  
        __size_of_dispLCD_instReg 00F0                        main@ciclos 00AF  
             dignum_apagar@ptrNum 002D                        main@estado 00B6  
           __end_of_addContCiclos 3882          __size_of_getIndicePassos 0004  
           ?_fifo_indicePrint_dec 0026             ?_fifo_indicePrint_inc 0026  
             __end_of_EEPROM_read 382C                       ?_ler_sensor 0026  
                  __end_of___lmul 2E76                    __end_of___wmul 367C  
                   __pidataCOMRAM 37C4                    set_passo@passo 002A  
            __end_of_teclado_init 3836              __end_of_teclado_scan 2AA4  
             __size_of_decodifica 0140               start_initialization 2ED8  
             __end_of_dispLCD_clr 3870                     posAtual@passo 0028  
             __end_of_dispLCD_num 2146               __end_of_dispLCD_str 2FF4  
             __end_of_alt_atuador 2C82                       __end_of_irq 3606  
                   _teclado_borda 3486                     ??_buscar_dado 002F  
                        ??_I2C_tx 0026             __size_of_initSerialIO 002E  
                 fifo_add_tempo@t 0035                   ?_dispLCD_lincol 0028  
             __end_of_dignum_conc 32CC                initSerialIO@length 002A  
             __size_of_dignum_tam 003C               __end_of_fifo_delete 2D1A  
              initSerialIO@ptrOut 0028               __end_of_end_receita 36A0  
             __end_of_fifo_indice 388E               __end_of_fifo_lerPos 380E  
             __size_of_fifo_print 02E4                  ?_fifo_disponivel 0026  
               dispLCD_lincol@col 0028                 dispLCD_lincol@aux 002C  
               dispLCD_lincol@lin 002B                       ??_I2C_start 0026  
                 main@meAtuadores 00AE                     ??_ler_atuador 0026  
                ??_buscar_receita 002E                          ??___lmul 002E  
                        ??___wmul 002A                    _init_atuadores 3840  
          __size_of_getContCiclos 000A                       __pdataBANK0 00B9  
            __end_of_serialIOload 3876              __end_of_serialIOscan 30A6  
                        ?_MCP4725 0040                    _fifo_add_ciclo 385E  
                ler_atuador@tecla 0028                      _initSerialIO 3522  
                  _fifo_add_tempo 30A6                       __pbssCOMRAM 0001  
               __size_of_dac_init 003E                     __pcstackBANK0 0060  
                ??_salvar_receita 002E                    ?_teclado_borda 0026  
             __size_of_ler_sensor 00E8                 __size_of_codifica 0154  
               __size_of_fifo_add 0058                         _dac_write 32CC  
               __size_of_fifo_tam 0004                   _deletar_receita 344E  
               ??_dispLCD_dataReg 0026                       _EEPROM_read 381E  
             __end_of_buscar_dado 3656            ??_fifo_indicePrint_dec 0026  
          ??_fifo_indicePrint_inc 0026                  ___lwdiv@dividend 0026  
          __end_of_init_atuadores 384A                   _resetContCiclos 3836  
                       _getCiclos 36E4                 ??_dispLCD_instReg 0026  
                       __pintcode 0008                     __pmediumconst 7D20  
                        ?___aldiv 0032                          ?___awdiv 0026  
               __size_of_posAtual 0012                          ?___awmod 0026  
                        ?___lldiv 0026                          ?___lwdiv 0026  
                       _fifo_adrs 3854                     serialIOscan@i 002C  
                   serialIOscan@j 002B            __end_of_fifo_add_ciclo 3868  
                     _dispLCD_clr 3868                       _dispLCD_num 1FCC  
                     _dispLCD_str 2F96                 ??_getIndicePassos 0026  
          __end_of_fifo_add_tempo 30FE                          ?_dispLCD 002D  
                     _alt_atuador 2BE8               __end_of_ler_atuador 2BE8  
               __size_of_statusT1 0012          __size_of_addIndicePassos 0016  
                       _ind_print 0057                          _I2C_init 3414  
        serialIObyteShift@dataBit 0028                          _I2C_stop 37B0  
          __size_of_dignum_apagar 002E                       _dignum_conc 3284  
        serialIObyteShift@dataOut 0027                         _intt1_1ms 34F2  
                   ??_salvar_dado 002E                  ___lwdiv@quotient 002A  
                   _getContCiclos 384A                    __size_of_delay 002E  
                     _fifo_delete 2C82                    __size_of_setT1 0014  
                     _end_receita 367C                       _fifo_indice 388A  
                     _fifo_lerPos 37FC                        ?_dac_write 0029  
                    ??_decodifica 0028                 teclado_scan@tecla 0028  
                 ___aldiv@divisor 0036                    _fifo_print$944 0030  
                 ___aldiv@counter 003A                    ___wmul@product 002A  
        __size_of_I2C_ack_receive 0010          __end_of_fifo_add_control 323C  
                        _PIE1bits 000F9D                          i2u135_40 35EC  
                        i2u135_41 35E8                          i2u136_40 35FA  
                        i2u136_41 35F6                          _PIR1bits 000F9E  
                 ?_init_atuadores 0026                          _SERIALIO 000F80  
                      ?_getCiclos 0026                         _set_passo 27A6  
           __size_of_teclado_init 000A                         main@F3405 00B9  
           __size_of_teclado_scan 00A8                         main@F3381 00E1  
                       main@F3379 00E2                    dignum_conc@dig 0030  
                   ??_timer1_init 0026                        ?_fifo_adrs 0026  
                       _printExec 1E42                  dispLCD_dataReg@d 0027  
                 ?_fifo_add_ciclo 0026                      ??_dignum_tam 0030  
                     _cont_ciclos 000D                   ?_fifo_add_tempo 0026  
                       main@i_542 009C                         main@i_552 00A3  
                       main@i_536 00A1                         main@i_555 00A5  
                       main@i_585 00A7                         main@i_588 00A9  
                       main@j_553 00A4                         main@j_537 00A2  
               ___wmul@multiplier 0026                         main@j_556 00A6  
                       main@j_586 00A8                         main@j_589 00AA  
             fifo_print@completar 0032                  deletar_receita@i 002D  
                    ??_fifo_print 002E                __end_of_decodifica 23DA  
                __size_of_MCP4725 0022                         main@botao 00B1  
                     _lenSerialIO 0012                   ??_teclado_borda 002B  
                       main@tecla 00B8           __end_of_deletar_receita 3486  
                      ?_intt1_1ms 0026                    ?_getContCiclos 0026  
               _resetIndicePassos 3876                 ___lmul@multiplier 0026  
                       copy_data0 2EEC                         copy_data1 2F0C  
                     _buscar_dado 362E     __size_of_salva_atuadores_init 007E  
              ?_resetIndicePassos 0026           __end_of_resetContCiclos 3840  
                    _teclado_init 382C               __end_of_salvar_dado 36C2  
                    _teclado_scan 29FC                        _EECON1bits 000FA6  
              __end_of_dignum_tam 3414               ??_resetIndicePassos 0026  
                        __Hrparam 0000                     _dignum_apagar 3550  
                   ler_sensor@ptr 0026                __end_of_fifo_print 1E42  
                        __Lrparam 0000          ?_manipula_atuadores_init 0026  
                      ?_set_passo 0026             __size_of_serialIOload 0006  
           __size_of_serialIOscan 0058                      getCiclos@aux 0028  
                dispLCD_instReg@i 0027                       _ler_atuador 2B48  
                    ??_ler_sensor 0028                        ?_printExec 003F  
                __size_of___aldiv 010C                  __size_of___awdiv 00C4  
                __size_of___awmod 00B0                  __size_of___lldiv 00A4  
                __size_of___lwdiv 0074                   fp__dispLCD_init 0000  
              buscar_receita@data 002C                buscar_receita@adrs 0030  
                dispLCD_num@sinal 003C             fifo_alinharPrint@cont 0032  
     manipula_atuadores_init@mask 002B                          _dac_init 339A  
                __size_of_dispLCD 0048               __end_of_timer1_init 371C  
       __end_of_resetIndicePassos 387C                       decodifica@d 0026  
                        _main$570 0090                          _main$571 0092  
                        _main$563 0088                          _main$572 0094  
                        _main$573 0096                          _main$574 0098  
                        _main$567 008A                          _main$576 009A  
                        _main$568 008C                          _main$569 008E  
                ??_dispLCD_lincol 0029                   ___lwdiv@divisor 0028  
                 ___lwdiv@counter 002C                          _codifica 2146  
                        __ptext10 2FF4                          __ptext11 3314  
                        __ptext20 37FC                          __ptext12 36A0  
                        __ptext21 1FCC                          __ptext13 2D1A  
                        __ptext30 1B5E                          __ptext22 3156  
                        __ptext14 2B48                          __ptext31 294C  
                        __ptext23 25D6                          __ptext15 3876  
                        __ptext40 30A6                          __ptext32 2F38  
                        __ptext24 3840                          __ptext16 3836  
                        __ptext41 31F4                          __ptext33 3788  
                        __ptext25 3522                          __ptext17 1E42  
                        __ptext50 3868                          __ptext42 385E  
                        __ptext34 388A                          __ptext26 384A  
                        __ptext18 37EA                          __ptext51 323C  
                        __ptext43 30FE                          __ptext35 3732  
                        __ptext27 36E4                          __ptext19 3882  
                        __ptext60 357E                          __ptext52 2E76  
                        __ptext44 26BE                          __ptext36 2C82  
                        __ptext28 371C                          __ptext61 3358  
                        __ptext53 24E6                          __ptext45 33D8  
                        __ptext37 229A                          __ptext29 3886  
                        __ptext70 32CC                          __ptext62 362E  
                        __ptext54 31A6                          __ptext46 2888  
                        __ptext38 2BE8                          __ptext71 339A  
                        __ptext63 367C                          __ptext55 3284  
                        __ptext47 2146                          __ptext39 3854  
                        __ptext80 34F2                          __ptext72 35AC  
                        __ptext64 381E                          __ptext56 3656  
                        __ptext48 2F96                          __ptext81 0000  
                        __ptext73 375E                          __ptext65 3748  
                        __ptext57 3550                          __ptext49 34BC  
                        __ptext74 379C                          __ptext66 387C  
                        __ptext58 2D98                          __ptext75 380E  
                        __ptext67 2E0C                          __ptext59 344E  
                        __ptext76 37B0                          __ptext68 23DA  
                        __ptext77 3414                          __ptext69 36C2  
                        __ptext78 2AA4                          _fifo_add 30FE  
               ??_addIndicePassos 0026                          _fifo_tam 3886  
                        _ind_fila 0058                       ??_dac_write 002B  
              __end_of_ler_sensor 26BE                     ?_EEPROM_write 0026  
                    _serialIOload 3870                      _serialIOscan 304E  
                   __size_of_main 1B4C                salvar_receita@data 002C  
              salvar_receita@adrs 0030                    ?_dignum_apagar 002D  
                        _posAtual 37EA                      dispLCD_str@c 0030  
                     ??_getCiclos 0028                 ??_I2C_ack_receive 0026  
                   _printExec$966 0040                          int$flags 0059  
                     ??_fifo_adrs 0028                fifo_print@indPrint 0033  
                   fifo_add@passo 0035                          _statusT1 37D8  
                     MCP4725@Vout 0040                     dignum_tam@tam 0030  
                   dignum_tam@num 002E                          main@lema 0060  
                    set_passo@ptr 0026    salva_atuadores_init@condi_init 0029  
                 ??_getContCiclos 0028                        _INTCONbits 000FF2  
                   ?_dispLCD_init 0026            __size_of_addContCiclos 0006  
                    codifica@dado 0026                   _dispLCD_dataReg 31A6  
                    codifica@tipo 002A                       ??_intt1_1ms 0026  
                ?_deletar_receita 0026                formatar_receitas@i 0028  
                 buscar_dado@data 002D                   buscar_dado@adrs 0031  
                     _salvar_dado 36A0                    fp__dispLCD_clr 0000  
                  fp__dispLCD_num 0000                    fp__dispLCD_str 0000  
               buscar_receita@aux 002E                   dispLCD_num@size 003B  
            fifo_alinharPrint@aux 0034        manipula_atuadores_init@aux 002A  
                 _dispLCD_instReg 24E6                          intlevel2 0000  
                  ??_EEPROM_write 0027                  ?_resetContCiclos 0026  
                ___lldiv@dividend 0026                      ?_EEPROM_read 0026  
                 _getIndicePassos 3882                 dignum_conc@ptrNum 002C  
                     ??_set_passo 0028                 fifo_print@comando 0036  
                     ??_printExec 0040          salva_atuadores_init@F108 0005  
                     _timer1_init 3702                      _ptrSerialOut 0009  
                    ?_dispLCD_clr 0026                      ?_dispLCD_num 0031  
                    ?_dispLCD_str 002D          __size_of_fifo_disponivel 0016  
                    ?_alt_atuador 0026          salva_atuadores_init@dado 002F  
                  buscar_dado@col 002C                    buscar_dado@aux 002F  
            fifo_add_ciclo@ciclos 0026          salva_atuadores_init@mask 0030  
                  ??_dispLCD_init 0029                  ___lldiv@quotient 002E  
      __size_of_resetIndicePassos 0006                      ___aldiv@sign 003B  
                    ?_dignum_conc 002C                       _SSPCON1bits 000FC6  
                    end_receita@x 0026                       _SSPCON2bits 000FC5  
                fifo_print@atraso 0035                      ?_fifo_delete 0026  
                     _ptrSerialIn 000B                      fifo_lerPos@i 0026  
                    ?_end_receita 0026                      ?_fifo_indice 0026  
                    ?_fifo_lerPos 0026                   buscar_receita@i 0031  
                ??_init_atuadores 0026                   ??_dignum_apagar 002F  
               ?_fifo_add_control 0026                     _addContCiclos 387C  
                ??_fifo_add_ciclo 0028                       fifo_print@i 0034  
