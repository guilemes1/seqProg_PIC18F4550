

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed Nov 24 21:03:50 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   105                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   112                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   113  0000                     
   114                           ; Version 2.20
   115                           ; Generated 12/02/2020 GMT
   116                           ; 
   117                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   118                           ; All rights reserved.
   119                           ; 
   120                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   121                           ; 
   122                           ; Redistribution and use in source and binary forms, with or without modification, are
   123                           ; permitted provided that the following conditions are met:
   124                           ; 
   125                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   126                           ;        conditions and the following disclaimer.
   127                           ; 
   128                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   129                           ;        of conditions and the following disclaimer in the documentation and/or other
   130                           ;        materials provided with the distribution.
   131                           ; 
   132                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   133                           ;        software without specific prior written permission.
   134                           ; 
   135                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   136                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   137                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   138                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   139                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   140                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   141                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   142                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   143                           ; 
   144                           ; 
   145                           ; Code-generator required, PIC18F4550 Definitions
   146                           ; 
   147                           ; SFR Addresses
   148  0000                     
   149 ;; Function _receita_livre is unused but had its address taken
   150  0000                     
   151 ;; Function _rxEUSART is unused but had its address taken
   152  0000                     
   153 ;; Function _rxStatusEUSART is unused but had its address taken
   154  0000                     
   155 ;; Function _rxErrorEUSART is unused but had its address taken
   156  0000                     
   157 ;; Function _rxResetErrorEUSART is unused but had its address taken
   158  0000                     
   159 ;; Function _search is unused but had its address taken
   160  0000                     
   161 ;; Function _wifi_receive is unused but had its address taken
   162  0000                     
   163 ;; Function _Wifi_scan is unused but had its address taken
   164  0000                     
   165 ;; Function _Wifi_ip is unused but had its address taken
   166  0000                     
   167 ;; Function _Wifi_autoconnect is unused but had its address taken
   168  0000                     
   169 ;; Function _Wifi_config_servidor is unused but had its address taken
   170  0000                     
   171 ;; Function _Wifi_cipsend is unused but had its address taken
   172  0000                     
   173                           	psect	idataCOMRAM
   174  003F86                     __pidataCOMRAM:
   175                           	callstack 0
   176                           
   177                           ;initializer for _indice_passos
   178  003F86  02                 	db	2
   179                           
   180                           ;initializer for _ind_print
   181  003F87  02                 	db	2
   182                           
   183                           ;initializer for _ind_fila
   184  003F88  02                 	db	2
   185                           
   186                           	psect	idataBANK0
   187  003AFE                     __pidataBANK0:
   188                           	callstack 0
   189                           
   190                           ;initializer for _wifi
   191  003AFE  DA                 	db	low _wifi_init
   192  003AFF  3B                 	db	high _wifi_init
   193  003B00  C0                 	db	low _wifi_send
   194  003B01  2F                 	db	high _wifi_send
   195  003B02  00                 	db	0
   196  003B03  00                 	db	0
   197  003B04  68                 	db	low _Wifi_mode
   198  003B05  2E                 	db	high _Wifi_mode
   199  003B06  0E                 	db	low _Wifi_connect
   200  003B07  27                 	db	high _Wifi_connect
   201  003B08  00                 	db	0
   202  003B09  00                 	db	0
   203  003B0A  00                 	db	0
   204  003B0B  00                 	db	0
   205  003B0C  00                 	db	0
   206  003B0D  00                 	db	0
   207  003B0E  00                 	db	0
   208  003B0F  00                 	db	0
   209  003B10  00                 	db	0
   210  003B11  00                 	db	0
   211                           
   212                           ;initializer for _eusart
   213  003B12  00                 	db	0
   214  003B13  00                 	db	0
   215  003B14  00                 	db	0
   216  003B15  00                 	db	0
   217  003B16  00                 	db	0
   218  003B17  00                 	db	0
   219  003B18  00                 	db	0
   220  003B19  00                 	db	0
   221  003B1A  60                 	db	low _txEUSART
   222  003B1B  3F                 	db	high _txEUSART
   223  003B1C  8C                 	db	low _txStatusEUSART
   224  003B1D  3E                 	db	high _txStatusEUSART
   225  003B1E  58                 	db	low _initEUSART
   226  003B1F  34                 	db	high _initEUSART
   227  003B20  00                 	db	0
   228  003B21  00                 	db	0
   229                           
   230                           ;initializer for _IHM
   231  003B22  A4                 	db	low _dispLCD_init
   232  003B23  3B                 	db	high _dispLCD_init
   233  003B24  F0                 	db	low _dispLCD_str
   234  003B25  35                 	db	high _dispLCD_str
   235  003B26  EC                 	db	low _dispLCD
   236  003B27  38                 	db	high _dispLCD
   237  003B28  00                 	db	low _dispLCD_num
   238  003B29  23                 	db	high _dispLCD_num
   239  003B2A  58                 	db	low _dispLCD_clr
   240  003B2B  3F                 	db	high _dispLCD_clr
   241                           
   242                           ;initializer for _EEPROM
   243  003B2C  C4                 	db	low _salvar_receita
   244  003B2D  39                 	db	high _salvar_receita
   245  003B2E  08                 	db	low _buscar_receita
   246  003B2F  3A                 	db	high _buscar_receita
   247  003B30  36                 	db	low _deletar_receita
   248  003B31  3B                 	db	high _deletar_receita
   249  003B32  00                 	db	0
   250  003B33  00                 	db	0
   251  003B34  0C                 	db	low _formatar_receitas
   252  003B35  3E                 	db	high _formatar_receitas
   253                           
   254                           	psect	idataBANK1
   255  0037B0                     __pidataBANK1:
   256                           	callstack 0
   257                           
   258                           ;initializer for Wifi_connect@F3287
   259  0037B0  41                 	db	65
   260  0037B1  54                 	db	84
   261  0037B2  2B                 	db	43
   262  0037B3  43                 	db	67
   263  0037B4  57                 	db	87
   264  0037B5  4A                 	db	74
   265  0037B6  41                 	db	65
   266  0037B7  50                 	db	80
   267  0037B8  3D                 	db	61
   268  0037B9  22                 	db	34
   269  0037BA  00                 	db	0
   270  0037BB  00                 	db	0
   271  0037BC  00                 	db	0
   272  0037BD  00                 	db	0
   273  0037BE  00                 	db	0
   274  0037BF  00                 	db	0
   275  0037C0  00                 	db	0
   276  0037C1  00                 	db	0
   277  0037C2  00                 	db	0
   278  0037C3  00                 	db	0
   279  0037C4  00                 	db	0
   280  0037C5  00                 	db	0
   281  0037C6  00                 	db	0
   282  0037C7  00                 	db	0
   283  0037C8  00                 	db	0
   284  0037C9  00                 	db	0
   285  0037CA  00                 	db	0
   286  0037CB  00                 	db	0
   287  0037CC  00                 	db	0
   288  0037CD  00                 	db	0
   289                           
   290                           ;initializer for Wifi_cipsend@F3299
   291  0037CE  41                 	db	65
   292  0037CF  54                 	db	84
   293  0037D0  2B                 	db	43
   294  0037D1  43                 	db	67
   295  0037D2  49                 	db	73
   296  0037D3  50                 	db	80
   297  0037D4  53                 	db	83
   298  0037D5  45                 	db	69
   299  0037D6  4E                 	db	78
   300  0037D7  44                 	db	68
   301  0037D8  3D                 	db	61
   302  0037D9  22                 	db	34
   303  0037DA  00                 	db	0
   304  0037DB  00                 	db	0
   305  0037DC  00                 	db	0
   306  0037DD  00                 	db	0
   307  0037DE  00                 	db	0
   308  0037DF  00                 	db	0
   309  0037E0  00                 	db	0
   310  0037E1  00                 	db	0
   311                           
   312                           ;initializer for main@F3513
   313  0037E2  4D                 	db	77
   314  0037E3  75                 	db	117
   315  0037E4  6E                 	db	110
   316  0037E5  64                 	db	100
   317  0037E6  6F                 	db	111
   318  0037E7  20                 	db	32
   319  0037E8  61                 	db	97
   320  0037E9  6F                 	db	111
   321  0037EA  20                 	db	32
   322  0037EB  73                 	db	115
   323  0037EC  65                 	db	101
   324  0037ED  75                 	db	117
   325  0037EE  20                 	db	32
   326  0037EF  63                 	db	99
   327  0037F0  6F                 	db	111
   328  0037F1  6D                 	db	109
   329  0037F2  61                 	db	97
   330  0037F3  6E                 	db	110
   331  0037F4  64                 	db	100
   332  0037F5  6F                 	db	111
   333                           
   334                           ;initializer for _teclas
   335  0037F6  31                 	db	49
   336  0037F7  32                 	db	50
   337  0037F8  33                 	db	51
   338  0037F9  41                 	db	65
   339  0037FA  34                 	db	52
   340  0037FB  35                 	db	53
   341  0037FC  36                 	db	54
   342  0037FD  42                 	db	66
   343  0037FE  37                 	db	55
   344  0037FF  38                 	db	56
   345  003800  39                 	db	57
   346  003801  43                 	db	67
   347  003802  2A                 	db	42
   348  003803  30                 	db	48
   349  003804  23                 	db	35
   350  003805  44                 	db	68
   351  0000                     _SPBRbits	set	4015
   352  0000                     _BAUDCONbits	set	4024
   353  0000                     _TRISCbits	set	3988
   354  0000                     _TXSTAbits	set	4012
   355  0000                     _TXREG	set	4013
   356  0000                     _RCSTAbits	set	4011
   357  0000                     _RCREG	set	4014
   358  0000                     _T1CONbits	set	4045
   359  0000                     _TMR1L	set	4046
   360  0000                     _TMR1H	set	4047
   361  0000                     _TRISD	set	3989
   362  0000                     _PORTD	set	3971
   363  0000                     _SSPBUF	set	4041
   364  0000                     _SSPCON2bits	set	4037
   365  0000                     _SSPSTATbits	set	4039
   366  0000                     _SSPADD	set	4040
   367  0000                     _SSPCON1bits	set	4038
   368  0000                     _TRISAbits	set	3986
   369  0000                     _PORTAbits	set	3968
   370  0000                     _PIE1bits	set	3997
   371  0000                     _PIR1bits	set	3998
   372  0000                     _EECON2	set	4007
   373  0000                     _INTCONbits	set	4082
   374  0000                     _EEDATA	set	4008
   375  0000                     _EECON1bits	set	4006
   376  0000                     _EEADR	set	4009
   377  0000                     _TRISBbits	set	3987
   378  0000                     _ADCON1	set	4033
   379                           
   380                           	psect	mediumconst
   381  007BDC                     __pmediumconst:
   382                           	callstack 0
   383  007BDC  00                 	db	0
   384  007BDD                     STR_6:
   385  007BDD  31                 	db	49	;'1'
   386  007BDE  3A                 	db	58	;':'
   387  007BDF  20                 	db	32
   388  007BE0  49                 	db	73	;'I'
   389  007BE1  4E                 	db	78	;'N'
   390  007BE2  53                 	db	83	;'S'
   391  007BE3  45                 	db	69	;'E'
   392  007BE4  52                 	db	82	;'R'
   393  007BE5  49                 	db	73	;'I'
   394  007BE6  52                 	db	82	;'R'
   395  007BE7  20                 	db	32
   396  007BE8  53                 	db	83	;'S'
   397  007BE9  45                 	db	69	;'E'
   398  007BEA  51                 	db	81	;'Q'
   399  007BEB  55                 	db	85	;'U'
   400  007BEC  45                 	db	69	;'E'
   401  007BED  4E                 	db	78	;'N'
   402  007BEE  43                 	db	67	;'C'
   403  007BEF  49                 	db	73	;'I'
   404  007BF0  41                 	db	65	;'A'
   405  007BF1  0A                 	db	10
   406  007BF2  32                 	db	50	;'2'
   407  007BF3  3A                 	db	58	;':'
   408  007BF4  20                 	db	32
   409  007BF5  42                 	db	66	;'B'
   410  007BF6  55                 	db	85	;'U'
   411  007BF7  53                 	db	83	;'S'
   412  007BF8  43                 	db	67	;'C'
   413  007BF9  41                 	db	65	;'A'
   414  007BFA  52                 	db	82	;'R'
   415  007BFB  20                 	db	32
   416  007BFC  53                 	db	83	;'S'
   417  007BFD  45                 	db	69	;'E'
   418  007BFE  51                 	db	81	;'Q'
   419  007BFF  55                 	db	85	;'U'
   420  007C00  45                 	db	69	;'E'
   421  007C01  4E                 	db	78	;'N'
   422  007C02  43                 	db	67	;'C'
   423  007C03  49                 	db	73	;'I'
   424  007C04  41                 	db	65	;'A'
   425  007C05  0A                 	db	10
   426  007C06  33                 	db	51	;'3'
   427  007C07  3A                 	db	58	;':'
   428  007C08  20                 	db	32
   429  007C09  52                 	db	82	;'R'
   430  007C0A  45                 	db	69	;'E'
   431  007C0B  50                 	db	80	;'P'
   432  007C0C  45                 	db	69	;'E'
   433  007C0D  54                 	db	84	;'T'
   434  007C0E  49                 	db	73	;'I'
   435  007C0F  52                 	db	82	;'R'
   436  007C10  20                 	db	32
   437  007C11  55                 	db	85	;'U'
   438  007C12  4C                 	db	76	;'L'
   439  007C13  54                 	db	84	;'T'
   440  007C14  2E                 	db	46
   441  007C15  20                 	db	32
   442  007C16  53                 	db	83	;'S'
   443  007C17  45                 	db	69	;'E'
   444  007C18  51                 	db	81	;'Q'
   445  007C19  55                 	db	85	;'U'
   446  007C1A  0A                 	db	10
   447  007C1B  34                 	db	52	;'4'
   448  007C1C  3A                 	db	58	;':'
   449  007C1D  20                 	db	32
   450  007C1E  43                 	db	67	;'C'
   451  007C1F  4F                 	db	79	;'O'
   452  007C20  4E                 	db	78	;'N'
   453  007C21  46                 	db	70	;'F'
   454  007C22  49                 	db	73	;'I'
   455  007C23  47                 	db	71	;'G'
   456  007C24  55                 	db	85	;'U'
   457  007C25  52                 	db	82	;'R'
   458  007C26  41                 	db	65	;'A'
   459  007C27  43                 	db	67	;'C'
   460  007C28  4F                 	db	79	;'O'
   461  007C29  45                 	db	69	;'E'
   462  007C2A  53                 	db	83	;'S'
   463  007C2B  20                 	db	32
   464  007C2C  20                 	db	32
   465  007C2D  20                 	db	32
   466  007C2E  20                 	db	32
   467  007C2F  00                 	db	0
   468  007C30                     STR_17:
   469  007C30  20                 	db	32
   470  007C31  45                 	db	69	;'E'
   471  007C32  53                 	db	83	;'S'
   472  007C33  43                 	db	67	;'C'
   473  007C34  4F                 	db	79	;'O'
   474  007C35  4C                 	db	76	;'L'
   475  007C36  48                 	db	72	;'H'
   476  007C37  41                 	db	65	;'A'
   477  007C38  20                 	db	32
   478  007C39  41                 	db	65	;'A'
   479  007C3A  20                 	db	32
   480  007C3B  4D                 	db	77	;'M'
   481  007C3C  45                 	db	69	;'E'
   482  007C3D  4D                 	db	77	;'M'
   483  007C3E  4F                 	db	79	;'O'
   484  007C3F  52                 	db	82	;'R'
   485  007C40  49                 	db	73	;'I'
   486  007C41  41                 	db	65	;'A'
   487  007C42  20                 	db	32
   488  007C43  0A                 	db	10
   489  007C44  51                 	db	81	;'Q'
   490  007C45  55                 	db	85	;'U'
   491  007C46  45                 	db	69	;'E'
   492  007C47  20                 	db	32
   493  007C48  44                 	db	68	;'D'
   494  007C49  45                 	db	69	;'E'
   495  007C4A  53                 	db	83	;'S'
   496  007C4B  45                 	db	69	;'E'
   497  007C4C  4A                 	db	74	;'J'
   498  007C4D  41                 	db	65	;'A'
   499  007C4E  20                 	db	32
   500  007C4F  45                 	db	69	;'E'
   501  007C50  58                 	db	88	;'X'
   502  007C51  45                 	db	69	;'E'
   503  007C52  43                 	db	67	;'C'
   504  007C53  55                 	db	85	;'U'
   505  007C54  54                 	db	84	;'T'
   506  007C55  41                 	db	65	;'A'
   507  007C56  52                 	db	82	;'R'
   508  007C57  0A                 	db	10
   509  007C58  20                 	db	32
   510  007C59  30                 	db	48	;'0'
   511  007C5A  20                 	db	32
   512  007C5B  20                 	db	32
   513  007C5C  20                 	db	32
   514  007C5D  31                 	db	49	;'1'
   515  007C5E  20                 	db	32
   516  007C5F  20                 	db	32
   517  007C60  20                 	db	32
   518  007C61  32                 	db	50	;'2'
   519  007C62  20                 	db	32
   520  007C63  20                 	db	32
   521  007C64  20                 	db	32
   522  007C65  33                 	db	51	;'3'
   523  007C66  20                 	db	32
   524  007C67  20                 	db	32
   525  007C68  20                 	db	32
   526  007C69  34                 	db	52	;'4'
   527  007C6A  20                 	db	32
   528  007C6B  0A                 	db	10
   529  007C6C  20                 	db	32
   530  007C6D  35                 	db	53	;'5'
   531  007C6E  20                 	db	32
   532  007C6F  20                 	db	32
   533  007C70  20                 	db	32
   534  007C71  36                 	db	54	;'6'
   535  007C72  20                 	db	32
   536  007C73  20                 	db	32
   537  007C74  20                 	db	32
   538  007C75  37                 	db	55	;'7'
   539  007C76  20                 	db	32
   540  007C77  20                 	db	32
   541  007C78  20                 	db	32
   542  007C79  38                 	db	56	;'8'
   543  007C7A  20                 	db	32
   544  007C7B  20                 	db	32
   545  007C7C  20                 	db	32
   546  007C7D  39                 	db	57	;'9'
   547  007C7E  20                 	db	32
   548  007C7F  0A                 	db	10
   549  007C80  00                 	db	0
   550  007C81                     STR_29:
   551  007C81  20                 	db	32
   552  007C82  45                 	db	69	;'E'
   553  007C83  53                 	db	83	;'S'
   554  007C84  43                 	db	67	;'C'
   555  007C85  4F                 	db	79	;'O'
   556  007C86  4C                 	db	76	;'L'
   557  007C87  48                 	db	72	;'H'
   558  007C88  41                 	db	65	;'A'
   559  007C89  20                 	db	32
   560  007C8A  41                 	db	65	;'A'
   561  007C8B  20                 	db	32
   562  007C8C  4D                 	db	77	;'M'
   563  007C8D  45                 	db	69	;'E'
   564  007C8E  4D                 	db	77	;'M'
   565  007C8F  4F                 	db	79	;'O'
   566  007C90  52                 	db	82	;'R'
   567  007C91  49                 	db	73	;'I'
   568  007C92  41                 	db	65	;'A'
   569  007C93  0A                 	db	10
   570  007C94  20                 	db	32
   571  007C95  51                 	db	81	;'Q'
   572  007C96  55                 	db	85	;'U'
   573  007C97  45                 	db	69	;'E'
   574  007C98  20                 	db	32
   575  007C99  44                 	db	68	;'D'
   576  007C9A  45                 	db	69	;'E'
   577  007C9B  53                 	db	83	;'S'
   578  007C9C  45                 	db	69	;'E'
   579  007C9D  4A                 	db	74	;'J'
   580  007C9E  41                 	db	65	;'A'
   581  007C9F  20                 	db	32
   582  007CA0  53                 	db	83	;'S'
   583  007CA1  41                 	db	65	;'A'
   584  007CA2  4C                 	db	76	;'L'
   585  007CA3  56                 	db	86	;'V'
   586  007CA4  41                 	db	65	;'A'
   587  007CA5  52                 	db	82	;'R'
   588  007CA6  0A                 	db	10
   589  007CA7  20                 	db	32
   590  007CA8  30                 	db	48	;'0'
   591  007CA9  20                 	db	32
   592  007CAA  20                 	db	32
   593  007CAB  20                 	db	32
   594  007CAC  31                 	db	49	;'1'
   595  007CAD  20                 	db	32
   596  007CAE  20                 	db	32
   597  007CAF  20                 	db	32
   598  007CB0  32                 	db	50	;'2'
   599  007CB1  20                 	db	32
   600  007CB2  20                 	db	32
   601  007CB3  20                 	db	32
   602  007CB4  33                 	db	51	;'3'
   603  007CB5  20                 	db	32
   604  007CB6  20                 	db	32
   605  007CB7  20                 	db	32
   606  007CB8  34                 	db	52	;'4'
   607  007CB9  0A                 	db	10
   608  007CBA  20                 	db	32
   609  007CBB  35                 	db	53	;'5'
   610  007CBC  20                 	db	32
   611  007CBD  20                 	db	32
   612  007CBE  20                 	db	32
   613  007CBF  36                 	db	54	;'6'
   614  007CC0  20                 	db	32
   615  007CC1  20                 	db	32
   616  007CC2  20                 	db	32
   617  007CC3  37                 	db	55	;'7'
   618  007CC4  20                 	db	32
   619  007CC5  20                 	db	32
   620  007CC6  20                 	db	32
   621  007CC7  38                 	db	56	;'8'
   622  007CC8  20                 	db	32
   623  007CC9  20                 	db	32
   624  007CCA  20                 	db	32
   625  007CCB  39                 	db	57	;'9'
   626  007CCC  20                 	db	32
   627  007CCD  20                 	db	32
   628  007CCE  00                 	db	0
   629  007CCF                     STR_28:
   630  007CCF  20                 	db	32
   631  007CD0  20                 	db	32
   632  007CD1  20                 	db	32
   633  007CD2  20                 	db	32
   634  007CD3  44                 	db	68	;'D'
   635  007CD4  45                 	db	69	;'E'
   636  007CD5  53                 	db	83	;'S'
   637  007CD6  45                 	db	69	;'E'
   638  007CD7  4A                 	db	74	;'J'
   639  007CD8  41                 	db	65	;'A'
   640  007CD9  20                 	db	32
   641  007CDA  53                 	db	83	;'S'
   642  007CDB  41                 	db	65	;'A'
   643  007CDC  4C                 	db	76	;'L'
   644  007CDD  56                 	db	86	;'V'
   645  007CDE  41                 	db	65	;'A'
   646  007CDF  52                 	db	82	;'R'
   647  007CE0  20                 	db	32
   648  007CE1  20                 	db	32
   649  007CE2  20                 	db	32
   650  007CE3  0A                 	db	10
   651  007CE4  20                 	db	32
   652  007CE5  20                 	db	32
   653  007CE6  20                 	db	32
   654  007CE7  20                 	db	32
   655  007CE8  20                 	db	32
   656  007CE9  53                 	db	83	;'S'
   657  007CEA  45                 	db	69	;'E'
   658  007CEB  51                 	db	81	;'Q'
   659  007CEC  55                 	db	85	;'U'
   660  007CED  45                 	db	69	;'E'
   661  007CEE  4E                 	db	78	;'N'
   662  007CEF  43                 	db	67	;'C'
   663  007CF0  49                 	db	73	;'I'
   664  007CF1  41                 	db	65	;'A'
   665  007CF2  20                 	db	32
   666  007CF3  3F                 	db	63	;'?'
   667  007CF4  20                 	db	32
   668  007CF5  20                 	db	32
   669  007CF6  0A                 	db	10
   670  007CF7  0A                 	db	10
   671  007CF8  23                 	db	35
   672  007CF9  20                 	db	32
   673  007CFA  2D                 	db	45
   674  007CFB  20                 	db	32
   675  007CFC  53                 	db	83	;'S'
   676  007CFD  49                 	db	73	;'I'
   677  007CFE  4D                 	db	77	;'M'
   678  007CFF  20                 	db	32
   679  007D00  20                 	db	32
   680  007D01  20                 	db	32
   681  007D02  20                 	db	32
   682  007D03  20                 	db	32
   683  007D04  20                 	db	32
   684  007D05  2A                 	db	42
   685  007D06  20                 	db	32
   686  007D07  2D                 	db	45
   687  007D08  20                 	db	32
   688  007D09  4E                 	db	78	;'N'
   689  007D0A  41                 	db	65	;'A'
   690  007D0B  4F                 	db	79	;'O'
   691  007D0C  00                 	db	0
   692  007D0D                     STR_42:
   693  007D0D  41                 	db	65	;'A'
   694  007D0E  54                 	db	84	;'T'
   695  007D0F  2B                 	db	43
   696  007D10  43                 	db	67	;'C'
   697  007D11  57                 	db	87	;'W'
   698  007D12  53                 	db	83	;'S'
   699  007D13  41                 	db	65	;'A'
   700  007D14  50                 	db	80	;'P'
   701  007D15  3D                 	db	61	;'='
   702  007D16  22                 	db	34
   703  007D17  57                 	db	87	;'W'
   704  007D18  69                 	db	105	;'i'
   705  007D19  72                 	db	114	;'r'
   706  007D1A  65                 	db	101	;'e'
   707  007D1B  6C                 	db	108	;'l'
   708  007D1C  65                 	db	101	;'e'
   709  007D1D  73                 	db	115	;'s'
   710  007D1E  73                 	db	115	;'s'
   711  007D1F  22                 	db	34
   712  007D20  2C                 	db	44
   713  007D21  22                 	db	34
   714  007D22  2A                 	db	42
   715  007D23  2A                 	db	42
   716  007D24  2A                 	db	42
   717  007D25  2A                 	db	42
   718  007D26  2A                 	db	42
   719  007D27  2A                 	db	42
   720  007D28  2A                 	db	42
   721  007D29  2A                 	db	42
   722  007D2A  22                 	db	34
   723  007D2B  2C                 	db	44
   724  007D2C  31                 	db	49	;'1'
   725  007D2D  2C                 	db	44
   726  007D2E  32                 	db	50	;'2'
   727  007D2F  2C                 	db	44
   728  007D30  34                 	db	52	;'4'
   729  007D31  2C                 	db	44
   730  007D32  30                 	db	48	;'0'
   731  007D33  0D                 	db	13
   732  007D34  0A                 	db	10
   733  007D35  00                 	db	0
   734  007D36  41                 	db	65	;'A'
   735  007D37  54                 	db	84	;'T'
   736  007D38  2B                 	db	43
   737  007D39  43                 	db	67	;'C'
   738  007D3A  49                 	db	73	;'I'
   739  007D3B  50                 	db	80	;'P'
   740  007D3C  53                 	db	83	;'S'
   741  007D3D  54                 	db	84	;'T'
   742  007D3E  41                 	db	65	;'A'
   743  007D3F  52                 	db	82	;'R'
   744  007D40  54                 	db	84	;'T'
   745  007D41  3D                 	db	61	;'='
   746  007D42  22                 	db	34
   747  007D43  54                 	db	84	;'T'
   748  007D44  43                 	db	67	;'C'
   749  007D45  50                 	db	80	;'P'
   750  007D46  22                 	db	34
   751  007D47  2C                 	db	44
   752  007D48  22                 	db	34
   753  007D49  31                 	db	49	;'1'
   754  007D4A  39                 	db	57	;'9'
   755  007D4B  32                 	db	50	;'2'
   756  007D4C  2E                 	db	46
   757  007D4D  31                 	db	49	;'1'
   758  007D4E  36                 	db	54	;'6'
   759  007D4F  38                 	db	56	;'8'
   760  007D50  2E                 	db	46
   761  007D51  34                 	db	52	;'4'
   762  007D52  2E                 	db	46
   763  007D53  31                 	db	49	;'1'
   764  007D54  22                 	db	34
   765  007D55  2C                 	db	44
   766  007D56  22                 	db	34
   767  007D57  33                 	db	51	;'3'
   768  007D58  33                 	db	51	;'3'
   769  007D59  33                 	db	51	;'3'
   770  007D5A  22                 	db	34
   771  007D5B  0D                 	db	13
   772  007D5C  0A                 	db	10
   773  007D5D  00                 	db	0
   774  007D5E                     STR_40:
   775  007D5E  41                 	db	65	;'A'
   776  007D5F  54                 	db	84	;'T'
   777  007D60  2B                 	db	43
   778  007D61  43                 	db	67	;'C'
   779  007D62  57                 	db	87	;'W'
   780  007D63  53                 	db	83	;'S'
   781  007D64  41                 	db	65	;'A'
   782  007D65  50                 	db	80	;'P'
   783  007D66  3D                 	db	61	;'='
   784  007D67  22                 	db	34
   785  007D68  54                 	db	84	;'T'
   786  007D69  43                 	db	67	;'C'
   787  007D6A  43                 	db	67	;'C'
   788  007D6B  22                 	db	34
   789  007D6C  2C                 	db	44
   790  007D6D  22                 	db	34
   791  007D6E  38                 	db	56	;'8'
   792  007D6F  37                 	db	55	;'7'
   793  007D70  36                 	db	54	;'6'
   794  007D71  35                 	db	53	;'5'
   795  007D72  34                 	db	52	;'4'
   796  007D73  33                 	db	51	;'3'
   797  007D74  32                 	db	50	;'2'
   798  007D75  31                 	db	49	;'1'
   799  007D76  22                 	db	34
   800  007D77  2C                 	db	44
   801  007D78  31                 	db	49	;'1'
   802  007D79  2C                 	db	44
   803  007D7A  32                 	db	50	;'2'
   804  007D7B  2C                 	db	44
   805  007D7C  34                 	db	52	;'4'
   806  007D7D  2C                 	db	44
   807  007D7E  30                 	db	48	;'0'
   808  007D7F  0D                 	db	13
   809  007D80  0A                 	db	10
   810  007D81  00                 	db	0
   811  007D82  41                 	db	65	;'A'
   812  007D83  54                 	db	84	;'T'
   813  007D84  2B                 	db	43
   814  007D85  43                 	db	67	;'C'
   815  007D86  49                 	db	73	;'I'
   816  007D87  50                 	db	80	;'P'
   817  007D88  53                 	db	83	;'S'
   818  007D89  45                 	db	69	;'E'
   819  007D8A  52                 	db	82	;'R'
   820  007D8B  56                 	db	86	;'V'
   821  007D8C  45                 	db	69	;'E'
   822  007D8D  52                 	db	82	;'R'
   823  007D8E  3D                 	db	61	;'='
   824  007D8F  31                 	db	49	;'1'
   825  007D90  2C                 	db	44
   826  007D91  33                 	db	51	;'3'
   827  007D92  33                 	db	51	;'3'
   828  007D93  33                 	db	51	;'3'
   829  007D94  0D                 	db	13
   830  007D95  0A                 	db	10
   831  007D96  00                 	db	0
   832  007D97                     STR_26:
   833  007D97  43                 	db	67	;'C'
   834  007D98  69                 	db	105	;'i'
   835  007D99  63                 	db	99	;'c'
   836  007D9A  6C                 	db	108	;'l'
   837  007D9B  6F                 	db	111	;'o'
   838  007D9C  73                 	db	115	;'s'
   839  007D9D  3A                 	db	58	;':'
   840  007D9E  20                 	db	32
   841  007D9F  20                 	db	32
   842  007DA0  20                 	db	32
   843  007DA1  20                 	db	32
   844  007DA2  20                 	db	32
   845  007DA3  20                 	db	32
   846  007DA4  20                 	db	32
   847  007DA5  20                 	db	32
   848  007DA6  20                 	db	32
   849  007DA7  20                 	db	32
   850  007DA8  20                 	db	32
   851  007DA9  20                 	db	32
   852  007DAA  20                 	db	32
   853  007DAB  00                 	db	0
   854  007DAC                     STR_24:
   855  007DAC  3C                 	db	60	;'<'
   856  007DAD  20                 	db	32
   857  007DAE  20                 	db	32
   858  007DAF  2F                 	db	47
   859  007DB0  20                 	db	32
   860  007DB1  20                 	db	32
   861  007DB2  3E                 	db	62	;'>'
   862  007DB3  20                 	db	32
   863  007DB4  63                 	db	99	;'c'
   864  007DB5  3A                 	db	58	;':'
   865  007DB6  20                 	db	32
   866  007DB7  20                 	db	32
   867  007DB8  20                 	db	32
   868  007DB9  20                 	db	32
   869  007DBA  20                 	db	32
   870  007DBB  20                 	db	32
   871  007DBC  20                 	db	32
   872  007DBD  20                 	db	32
   873  007DBE  20                 	db	32
   874  007DBF  20                 	db	32
   875  007DC0  00                 	db	0
   876  007DC1                     STR_33:
   877  007DC1  20                 	db	32
   878  007DC2  20                 	db	32
   879  007DC3  20                 	db	32
   880  007DC4  20                 	db	32
   881  007DC5  20                 	db	32
   882  007DC6  20                 	db	32
   883  007DC7  20                 	db	32
   884  007DC8  20                 	db	32
   885  007DC9  53                 	db	83	;'S'
   886  007DCA  41                 	db	65	;'A'
   887  007DCB  4C                 	db	76	;'L'
   888  007DCC  56                 	db	86	;'V'
   889  007DCD  41                 	db	65	;'A'
   890  007DCE  20                 	db	32
   891  007DCF  20                 	db	32
   892  007DD0  20                 	db	32
   893  007DD1  20                 	db	32
   894  007DD2  20                 	db	32
   895  007DD3  20                 	db	32
   896  007DD4  20                 	db	32
   897  007DD5  00                 	db	0
   898  007DD6                     STR_5:
   899  007DD6  20                 	db	32
   900  007DD7  20                 	db	32
   901  007DD8  20                 	db	32
   902  007DD9  20                 	db	32
   903  007DDA  20                 	db	32
   904  007DDB  20                 	db	32
   905  007DDC  53                 	db	83	;'S'
   906  007DDD  45                 	db	69	;'E'
   907  007DDE  47                 	db	71	;'G'
   908  007DDF  47                 	db	71	;'G'
   909  007DE0  55                 	db	85	;'U'
   910  007DE1  49                 	db	73	;'I'
   911  007DE2  54                 	db	84	;'T'
   912  007DE3  20                 	db	32
   913  007DE4  20                 	db	32
   914  007DE5  20                 	db	32
   915  007DE6  20                 	db	32
   916  007DE7  20                 	db	32
   917  007DE8  20                 	db	32
   918  007DE9  20                 	db	32
   919  007DEA  00                 	db	0
   920  007DEB                     STR_23:
   921  007DEB  20                 	db	32
   922  007DEC  20                 	db	32
   923  007DED  20                 	db	32
   924  007DEE  20                 	db	32
   925  007DEF  20                 	db	32
   926  007DF0  20                 	db	32
   927  007DF1  20                 	db	32
   928  007DF2  5B                 	db	91	;'['
   929  007DF3  20                 	db	32
   930  007DF4  20                 	db	32
   931  007DF5  20                 	db	32
   932  007DF6  20                 	db	32
   933  007DF7  5D                 	db	93	;']'
   934  007DF8  20                 	db	32
   935  007DF9  20                 	db	32
   936  007DFA  20                 	db	32
   937  007DFB  20                 	db	32
   938  007DFC  20                 	db	32
   939  007DFD  20                 	db	32
   940  007DFE  20                 	db	32
   941  007DFF  00                 	db	0
   942  007E00                     STR_15:
   943  007E00  20                 	db	32
   944  007E01  20                 	db	32
   945  007E02  20                 	db	32
   946  007E03  20                 	db	32
   947  007E04  20                 	db	32
   948  007E05  20                 	db	32
   949  007E06  20                 	db	32
   950  007E07  44                 	db	68	;'D'
   951  007E08  45                 	db	69	;'E'
   952  007E09  4C                 	db	76	;'L'
   953  007E0A  45                 	db	69	;'E'
   954  007E0B  54                 	db	84	;'T'
   955  007E0C  45                 	db	69	;'E'
   956  007E0D  44                 	db	68	;'D'
   957  007E0E  20                 	db	32
   958  007E0F  20                 	db	32
   959  007E10  20                 	db	32
   960  007E11  20                 	db	32
   961  007E12  20                 	db	32
   962  007E13  20                 	db	32
   963  007E14  00                 	db	0
   964  007E15                     STR_16:
   965  007E15  20                 	db	32
   966  007E16  20                 	db	32
   967  007E17  20                 	db	32
   968  007E18  20                 	db	32
   969  007E19  20                 	db	32
   970  007E1A  20                 	db	32
   971  007E1B  20                 	db	32
   972  007E1C  20                 	db	32
   973  007E1D  4D                 	db	77	;'M'
   974  007E1E  45                 	db	69	;'E'
   975  007E1F  4D                 	db	77	;'M'
   976  007E20  4F                 	db	79	;'O'
   977  007E21  52                 	db	82	;'R'
   978  007E22  59                 	db	89	;'Y'
   979  007E23  20                 	db	32
   980  007E24  20                 	db	32
   981  007E25  20                 	db	32
   982  007E26  20                 	db	32
   983  007E27  20                 	db	32
   984  007E28  20                 	db	32
   985  007E29  00                 	db	0
   986  007E2A                     STR_11:
   987  007E2A  20                 	db	32
   988  007E2B  20                 	db	32
   989  007E2C  20                 	db	32
   990  007E2D  20                 	db	32
   991  007E2E  20                 	db	32
   992  007E2F  20                 	db	32
   993  007E30  4D                 	db	77	;'M'
   994  007E31  45                 	db	69	;'E'
   995  007E32  4D                 	db	77	;'M'
   996  007E33  4F                 	db	79	;'O'
   997  007E34  52                 	db	82	;'R'
   998  007E35  49                 	db	73	;'I'
   999  007E36  41                 	db	65	;'A'
  1000  007E37  20                 	db	32
  1001  007E38  3F                 	db	63	;'?'
  1002  007E39  20                 	db	32
  1003  007E3A  20                 	db	32
  1004  007E3B  20                 	db	32
  1005  007E3C  20                 	db	32
  1006  007E3D  20                 	db	32
  1007  007E3E  00                 	db	0
  1008  007E3F                     STR_32:
  1009  007E3F  20                 	db	32
  1010  007E40  20                 	db	32
  1011  007E41  20                 	db	32
  1012  007E42  20                 	db	32
  1013  007E43  20                 	db	32
  1014  007E44  20                 	db	32
  1015  007E45  53                 	db	83	;'S'
  1016  007E46  45                 	db	69	;'E'
  1017  007E47  51                 	db	81	;'Q'
  1018  007E48  55                 	db	85	;'U'
  1019  007E49  45                 	db	69	;'E'
  1020  007E4A  4E                 	db	78	;'N'
  1021  007E4B  43                 	db	67	;'C'
  1022  007E4C  49                 	db	73	;'I'
  1023  007E4D  41                 	db	65	;'A'
  1024  007E4E  20                 	db	32
  1025  007E4F  20                 	db	32
  1026  007E50  20                 	db	32
  1027  007E51  20                 	db	32
  1028  007E52  20                 	db	32
  1029  007E53  00                 	db	0
  1030  007E54                     STR_19:
  1031  007E54  20                 	db	32
  1032  007E55  20                 	db	32
  1033  007E56  20                 	db	32
  1034  007E57  20                 	db	32
  1035  007E58  20                 	db	32
  1036  007E59  44                 	db	68	;'D'
  1037  007E5A  4F                 	db	79	;'O'
  1038  007E5B  20                 	db	32
  1039  007E5C  53                 	db	83	;'S'
  1040  007E5D  49                 	db	73	;'I'
  1041  007E5E  53                 	db	83	;'S'
  1042  007E5F  54                 	db	84	;'T'
  1043  007E60  45                 	db	69	;'E'
  1044  007E61  4D                 	db	77	;'M'
  1045  007E62  41                 	db	65	;'A'
  1046  007E63  20                 	db	32
  1047  007E64  20                 	db	32
  1048  007E65  20                 	db	32
  1049  007E66  20                 	db	32
  1050  007E67  20                 	db	32
  1051  007E68  00                 	db	0
  1052  007E69                     STR_20:
  1053  007E69  20                 	db	32
  1054  007E6A  20                 	db	32
  1055  007E6B  20                 	db	32
  1056  007E6C  41                 	db	65	;'A'
  1057  007E6D  20                 	db	32
  1058  007E6E  20                 	db	32
  1059  007E6F  20                 	db	32
  1060  007E70  42                 	db	66	;'B'
  1061  007E71  20                 	db	32
  1062  007E72  20                 	db	32
  1063  007E73  20                 	db	32
  1064  007E74  43                 	db	67	;'C'
  1065  007E75  20                 	db	32
  1066  007E76  20                 	db	32
  1067  007E77  20                 	db	32
  1068  007E78  44                 	db	68	;'D'
  1069  007E79  20                 	db	32
  1070  007E7A  20                 	db	32
  1071  007E7B  20                 	db	32
  1072  007E7C  20                 	db	32
  1073  007E7D  00                 	db	0
  1074  007E7E                     STR_10:
  1075  007E7E  20                 	db	32
  1076  007E7F  20                 	db	32
  1077  007E80  20                 	db	32
  1078  007E81  44                 	db	68	;'D'
  1079  007E82  45                 	db	69	;'E'
  1080  007E83  4C                 	db	76	;'L'
  1081  007E84  45                 	db	69	;'E'
  1082  007E85  54                 	db	84	;'T'
  1083  007E86  41                 	db	65	;'A'
  1084  007E87  52                 	db	82	;'R'
  1085  007E88  20                 	db	32
  1086  007E89  54                 	db	84	;'T'
  1087  007E8A  4F                 	db	79	;'O'
  1088  007E8B  44                 	db	68	;'D'
  1089  007E8C  41                 	db	65	;'A'
  1090  007E8D  20                 	db	32
  1091  007E8E  41                 	db	65	;'A'
  1092  007E8F  20                 	db	32
  1093  007E90  20                 	db	32
  1094  007E91  20                 	db	32
  1095  007E92  00                 	db	0
  1096  007E93                     STR_8:
  1097  007E93  32                 	db	50	;'2'
  1098  007E94  3A                 	db	58	;':'
  1099  007E95  20                 	db	32
  1100  007E96  4C                 	db	76	;'L'
  1101  007E97  49                 	db	73	;'I'
  1102  007E98  4D                 	db	77	;'M'
  1103  007E99  50                 	db	80	;'P'
  1104  007E9A  41                 	db	65	;'A'
  1105  007E9B  52                 	db	82	;'R'
  1106  007E9C  20                 	db	32
  1107  007E9D  4D                 	db	77	;'M'
  1108  007E9E  45                 	db	69	;'E'
  1109  007E9F  4D                 	db	77	;'M'
  1110  007EA0  4F                 	db	79	;'O'
  1111  007EA1  52                 	db	82	;'R'
  1112  007EA2  49                 	db	73	;'I'
  1113  007EA3  41                 	db	65	;'A'
  1114  007EA4  20                 	db	32
  1115  007EA5  20                 	db	32
  1116  007EA6  20                 	db	32
  1117  007EA7  00                 	db	0
  1118  007EA8                     STR_18:
  1119  007EA8  20                 	db	32
  1120  007EA9  20                 	db	32
  1121  007EAA  20                 	db	32
  1122  007EAB  41                 	db	65	;'A'
  1123  007EAC  4A                 	db	74	;'J'
  1124  007EAD  55                 	db	85	;'U'
  1125  007EAE  53                 	db	83	;'S'
  1126  007EAF  54                 	db	84	;'T'
  1127  007EB0  45                 	db	69	;'E'
  1128  007EB1  20                 	db	32
  1129  007EB2  4F                 	db	79	;'O'
  1130  007EB3  20                 	db	32
  1131  007EB4  49                 	db	73	;'I'
  1132  007EB5  4E                 	db	78	;'N'
  1133  007EB6  49                 	db	73	;'I'
  1134  007EB7  43                 	db	67	;'C'
  1135  007EB8  49                 	db	73	;'I'
  1136  007EB9  4F                 	db	79	;'O'
  1137  007EBA  20                 	db	32
  1138  007EBB  20                 	db	32
  1139  007EBC  00                 	db	0
  1140  007EBD                     STR_21:
  1141  007EBD  20                 	db	32
  1142  007EBE  20                 	db	32
  1143  007EBF  49                 	db	73	;'I'
  1144  007EC0  4E                 	db	78	;'N'
  1145  007EC1  53                 	db	83	;'S'
  1146  007EC2  49                 	db	73	;'I'
  1147  007EC3  52                 	db	82	;'R'
  1148  007EC4  41                 	db	65	;'A'
  1149  007EC5  20                 	db	32
  1150  007EC6  4F                 	db	79	;'O'
  1151  007EC7  53                 	db	83	;'S'
  1152  007EC8  20                 	db	32
  1153  007EC9  50                 	db	80	;'P'
  1154  007ECA  41                 	db	65	;'A'
  1155  007ECB  53                 	db	83	;'S'
  1156  007ECC  53                 	db	83	;'S'
  1157  007ECD  4F                 	db	79	;'O'
  1158  007ECE  53                 	db	83	;'S'
  1159  007ECF  20                 	db	32
  1160  007ED0  20                 	db	32
  1161  007ED1  00                 	db	0
  1162  007ED2                     STR_27:
  1163  007ED2  30                 	db	48	;'0'
  1164  007ED3  20                 	db	32
  1165  007ED4  2D                 	db	45
  1166  007ED5  20                 	db	32
  1167  007ED6  43                 	db	67	;'C'
  1168  007ED7  69                 	db	105	;'i'
  1169  007ED8  63                 	db	99	;'c'
  1170  007ED9  6C                 	db	108	;'l'
  1171  007EDA  6F                 	db	111	;'o'
  1172  007EDB  20                 	db	32
  1173  007EDC  63                 	db	99	;'c'
  1174  007EDD  6F                 	db	111	;'o'
  1175  007EDE  6E                 	db	110	;'n'
  1176  007EDF  74                 	db	116	;'t'
  1177  007EE0  69                 	db	105	;'i'
  1178  007EE1  6E                 	db	110	;'n'
  1179  007EE2  75                 	db	117	;'u'
  1180  007EE3  6F                 	db	111	;'o'
  1181  007EE4  20                 	db	32
  1182  007EE5  20                 	db	32
  1183  007EE6  00                 	db	0
  1184  007EE7                     STR_9:
  1185  007EE7  20                 	db	32
  1186  007EE8  43                 	db	67	;'C'
  1187  007EE9  45                 	db	69	;'E'
  1188  007EEA  52                 	db	82	;'R'
  1189  007EEB  54                 	db	84	;'T'
  1190  007EEC  45                 	db	69	;'E'
  1191  007EED  5A                 	db	90	;'Z'
  1192  007EEE  41                 	db	65	;'A'
  1193  007EEF  20                 	db	32
  1194  007EF0  51                 	db	81	;'Q'
  1195  007EF1  55                 	db	85	;'U'
  1196  007EF2  45                 	db	69	;'E'
  1197  007EF3  20                 	db	32
  1198  007EF4  44                 	db	68	;'D'
  1199  007EF5  45                 	db	69	;'E'
  1200  007EF6  53                 	db	83	;'S'
  1201  007EF7  45                 	db	69	;'E'
  1202  007EF8  4A                 	db	74	;'J'
  1203  007EF9  41                 	db	65	;'A'
  1204  007EFA  20                 	db	32
  1205  007EFB  00                 	db	0
  1206  007EFC                     STR_34:
  1207  007EFC  63                 	db	99	;'c'
  1208  007EFD  6F                 	db	111	;'o'
  1209  007EFE  6E                 	db	110	;'n'
  1210  007EFF  66                 	db	102	;'f'
  1211  007F00  69                 	db	105	;'i'
  1212  007F01  67                 	db	103	;'g'
  1213  007F02  20                 	db	32
  1214  007F03  63                 	db	99	;'c'
  1215  007F04  6F                 	db	111	;'o'
  1216  007F05  6E                 	db	110	;'n'
  1217  007F06  74                 	db	116	;'t'
  1218  007F07  72                 	db	114	;'r'
  1219  007F08  6C                 	db	108	;'l'
  1220  007F09  3A                 	db	58	;':'
  1221  007F0A  20                 	db	32
  1222  007F0B  20                 	db	32
  1223  007F0C  20                 	db	32
  1224  007F0D  20                 	db	32
  1225  007F0E  20                 	db	32
  1226  007F0F  25                 	db	37
  1227  007F10  00                 	db	0
  1228  007F11                     STR_7:
  1229  007F11  31                 	db	49	;'1'
  1230  007F12  3A                 	db	58	;':'
  1231  007F13  20                 	db	32
  1232  007F14  56                 	db	86	;'V'
  1233  007F15  45                 	db	69	;'E'
  1234  007F16  52                 	db	82	;'R'
  1235  007F17  49                 	db	73	;'I'
  1236  007F18  46                 	db	70	;'F'
  1237  007F19  49                 	db	73	;'I'
  1238  007F1A  43                 	db	67	;'C'
  1239  007F1B  41                 	db	65	;'A'
  1240  007F1C  52                 	db	82	;'R'
  1241  007F1D  20                 	db	32
  1242  007F1E  4D                 	db	77	;'M'
  1243  007F1F  45                 	db	69	;'E'
  1244  007F20  4D                 	db	77	;'M'
  1245  007F21  4F                 	db	79	;'O'
  1246  007F22  52                 	db	82	;'R'
  1247  007F23  49                 	db	73	;'I'
  1248  007F24  41                 	db	65	;'A'
  1249  007F25  00                 	db	0
  1250  007F26                     STR_25:
  1251  007F26  63                 	db	99	;'c'
  1252  007F27  6F                 	db	111	;'o'
  1253  007F28  6E                 	db	110	;'n'
  1254  007F29  66                 	db	102	;'f'
  1255  007F2A  69                 	db	105	;'i'
  1256  007F2B  67                 	db	103	;'g'
  1257  007F2C  20                 	db	32
  1258  007F2D  74                 	db	116	;'t'
  1259  007F2E  65                 	db	101	;'e'
  1260  007F2F  6D                 	db	109	;'m'
  1261  007F30  70                 	db	112	;'p'
  1262  007F31  6F                 	db	111	;'o'
  1263  007F32  3A                 	db	58	;':'
  1264  007F33  20                 	db	32
  1265  007F34  20                 	db	32
  1266  007F35  20                 	db	32
  1267  007F36  20                 	db	32
  1268  007F37  20                 	db	32
  1269  007F38  20                 	db	32
  1270  007F39  73                 	db	115	;'s'
  1271  007F3A  00                 	db	0
  1272  007F3B  41                 	db	65	;'A'
  1273  007F3C  54                 	db	84	;'T'
  1274  007F3D  2B                 	db	43
  1275  007F3E  43                 	db	67	;'C'
  1276  007F3F  57                 	db	87	;'W'
  1277  007F40  41                 	db	65	;'A'
  1278  007F41  55                 	db	85	;'U'
  1279  007F42  54                 	db	84	;'T'
  1280  007F43  4F                 	db	79	;'O'
  1281  007F44  43                 	db	67	;'C'
  1282  007F45  4F                 	db	79	;'O'
  1283  007F46  4E                 	db	78	;'N'
  1284  007F47  4E                 	db	78	;'N'
  1285  007F48  3D                 	db	61	;'='
  1286  007F49  30                 	db	48	;'0'
  1287  007F4A  0D                 	db	13
  1288  007F4B  0A                 	db	10
  1289  007F4C  00                 	db	0
  1290  007F4D                     STR_36:
  1291  007F4D  41                 	db	65	;'A'
  1292  007F4E  54                 	db	84	;'T'
  1293  007F4F  2B                 	db	43
  1294  007F50  43                 	db	67	;'C'
  1295  007F51  49                 	db	73	;'I'
  1296  007F52  50                 	db	80	;'P'
  1297  007F53  53                 	db	83	;'S'
  1298  007F54  45                 	db	69	;'E'
  1299  007F55  52                 	db	82	;'R'
  1300  007F56  56                 	db	86	;'V'
  1301  007F57  45                 	db	69	;'E'
  1302  007F58  52                 	db	82	;'R'
  1303  007F59  3D                 	db	61	;'='
  1304  007F5A  30                 	db	48	;'0'
  1305  007F5B  0D                 	db	13
  1306  007F5C  0A                 	db	10
  1307  007F5D  00                 	db	0
  1308  007F5E  41                 	db	65	;'A'
  1309  007F5F  54                 	db	84	;'T'
  1310  007F60  2B                 	db	43
  1311  007F61  43                 	db	67	;'C'
  1312  007F62  49                 	db	73	;'I'
  1313  007F63  50                 	db	80	;'P'
  1314  007F64  4D                 	db	77	;'M'
  1315  007F65  4F                 	db	79	;'O'
  1316  007F66  44                 	db	68	;'D'
  1317  007F67  45                 	db	69	;'E'
  1318  007F68  3D                 	db	61	;'='
  1319  007F69  30                 	db	48	;'0'
  1320  007F6A  0D                 	db	13
  1321  007F6B  0A                 	db	10
  1322  007F6C  00                 	db	0
  1323  007F6D                     STR_38:
  1324  007F6D  41                 	db	65	;'A'
  1325  007F6E  54                 	db	84	;'T'
  1326  007F6F  2B                 	db	43
  1327  007F70  43                 	db	67	;'C'
  1328  007F71  49                 	db	73	;'I'
  1329  007F72  50                 	db	80	;'P'
  1330  007F73  4D                 	db	77	;'M'
  1331  007F74  4F                 	db	79	;'O'
  1332  007F75  44                 	db	68	;'D'
  1333  007F76  45                 	db	69	;'E'
  1334  007F77  3D                 	db	61	;'='
  1335  007F78  31                 	db	49	;'1'
  1336  007F79  0D                 	db	13
  1337  007F7A  0A                 	db	10
  1338  007F7B  00                 	db	0
  1339  007F7C                     STR_37:
  1340  007F7C  41                 	db	65	;'A'
  1341  007F7D  54                 	db	84	;'T'
  1342  007F7E  2B                 	db	43
  1343  007F7F  43                 	db	67	;'C'
  1344  007F80  49                 	db	73	;'I'
  1345  007F81  50                 	db	80	;'P'
  1346  007F82  4D                 	db	77	;'M'
  1347  007F83  55                 	db	85	;'U'
  1348  007F84  58                 	db	88	;'X'
  1349  007F85  3D                 	db	61	;'='
  1350  007F86  30                 	db	48	;'0'
  1351  007F87  0D                 	db	13
  1352  007F88  0A                 	db	10
  1353  007F89  00                 	db	0
  1354  007F8A                     STR_35:
  1355  007F8A  41                 	db	65	;'A'
  1356  007F8B  54                 	db	84	;'T'
  1357  007F8C  2B                 	db	43
  1358  007F8D  43                 	db	67	;'C'
  1359  007F8E  57                 	db	87	;'W'
  1360  007F8F  4D                 	db	77	;'M'
  1361  007F90  4F                 	db	79	;'O'
  1362  007F91  44                 	db	68	;'D'
  1363  007F92  45                 	db	69	;'E'
  1364  007F93  3D                 	db	61	;'='
  1365  007F94  31                 	db	49	;'1'
  1366  007F95  0D                 	db	13
  1367  007F96  0A                 	db	10
  1368  007F97  00                 	db	0
  1369  007F98  41                 	db	65	;'A'
  1370  007F99  54                 	db	84	;'T'
  1371  007F9A  2B                 	db	43
  1372  007F9B  43                 	db	67	;'C'
  1373  007F9C  49                 	db	73	;'I'
  1374  007F9D  50                 	db	80	;'P'
  1375  007F9E  4D                 	db	77	;'M'
  1376  007F9F  55                 	db	85	;'U'
  1377  007FA0  58                 	db	88	;'X'
  1378  007FA1  3D                 	db	61	;'='
  1379  007FA2  31                 	db	49	;'1'
  1380  007FA3  0D                 	db	13
  1381  007FA4  0A                 	db	10
  1382  007FA5  00                 	db	0
  1383  007FA6                     STR_39:
  1384  007FA6  41                 	db	65	;'A'
  1385  007FA7  54                 	db	84	;'T'
  1386  007FA8  2B                 	db	43
  1387  007FA9  43                 	db	67	;'C'
  1388  007FAA  57                 	db	87	;'W'
  1389  007FAB  4D                 	db	77	;'M'
  1390  007FAC  4F                 	db	79	;'O'
  1391  007FAD  44                 	db	68	;'D'
  1392  007FAE  45                 	db	69	;'E'
  1393  007FAF  3D                 	db	61	;'='
  1394  007FB0  32                 	db	50	;'2'
  1395  007FB1  0D                 	db	13
  1396  007FB2  0A                 	db	10
  1397  007FB3  00                 	db	0
  1398  007FB4                     STR_41:
  1399  007FB4  41                 	db	65	;'A'
  1400  007FB5  54                 	db	84	;'T'
  1401  007FB6  2B                 	db	43
  1402  007FB7  43                 	db	67	;'C'
  1403  007FB8  57                 	db	87	;'W'
  1404  007FB9  4D                 	db	77	;'M'
  1405  007FBA  4F                 	db	79	;'O'
  1406  007FBB  44                 	db	68	;'D'
  1407  007FBC  45                 	db	69	;'E'
  1408  007FBD  3D                 	db	61	;'='
  1409  007FBE  33                 	db	51	;'3'
  1410  007FBF  0D                 	db	13
  1411  007FC0  0A                 	db	10
  1412  007FC1  00                 	db	0
  1413  007FC2  41                 	db	65	;'A'
  1414  007FC3  54                 	db	84	;'T'
  1415  007FC4  2B                 	db	43
  1416  007FC5  43                 	db	67	;'C'
  1417  007FC6  49                 	db	73	;'I'
  1418  007FC7  50                 	db	80	;'P'
  1419  007FC8  43                 	db	67	;'C'
  1420  007FC9  4C                 	db	76	;'L'
  1421  007FCA  4F                 	db	79	;'O'
  1422  007FCB  53                 	db	83	;'S'
  1423  007FCC  45                 	db	69	;'E'
  1424  007FCD  0D                 	db	13
  1425  007FCE  0A                 	db	10
  1426  007FCF  00                 	db	0
  1427  007FD0  41                 	db	65	;'A'
  1428  007FD1  54                 	db	84	;'T'
  1429  007FD2  2B                 	db	43
  1430  007FD3  43                 	db	67	;'C'
  1431  007FD4  57                 	db	87	;'W'
  1432  007FD5  4C                 	db	76	;'L'
  1433  007FD6  41                 	db	65	;'A'
  1434  007FD7  50                 	db	80	;'P'
  1435  007FD8  0D                 	db	13
  1436  007FD9  0A                 	db	10
  1437  007FDA  00                 	db	0
  1438  007FDB  41                 	db	65	;'A'
  1439  007FDC  54                 	db	84	;'T'
  1440  007FDD  2B                 	db	43
  1441  007FDE  43                 	db	67	;'C'
  1442  007FDF  49                 	db	73	;'I'
  1443  007FE0  46                 	db	70	;'F'
  1444  007FE1  53                 	db	83	;'S'
  1445  007FE2  52                 	db	82	;'R'
  1446  007FE3  0D                 	db	13
  1447  007FE4  0A                 	db	10
  1448  007FE5  00                 	db	0
  1449  007FE6                     STR_2:
  1450  007FE6  32                 	db	50	;'2'
  1451  007FE7  38                 	db	56	;'8'
  1452  007FE8  30                 	db	48	;'0'
  1453  007FE9  39                 	db	57	;'9'
  1454  007FEA  30                 	db	48	;'0'
  1455  007FEB  32                 	db	50	;'2'
  1456  007FEC  31                 	db	49	;'1'
  1457  007FED  30                 	db	48	;'0'
  1458  007FEE  00                 	db	0
  1459  007FEF                     STR_22:
  1460  007FEF  3C                 	db	60	;'<'
  1461  007FF0  20                 	db	32
  1462  007FF1  20                 	db	32
  1463  007FF2  2F                 	db	47
  1464  007FF3  20                 	db	32
  1465  007FF4  20                 	db	32
  1466  007FF5  3E                 	db	62	;'>'
  1467  007FF6  00                 	db	0
  1468  007FF7                     STR_1:
  1469  007FF7  4C                 	db	76	;'L'
  1470  007FF8  45                 	db	69	;'E'
  1471  007FF9  4D                 	db	77	;'M'
  1472  007FFA  45                 	db	69	;'E'
  1473  007FFB  53                 	db	83	;'S'
  1474  007FFC  00                 	db	0
  1475  007FFD                     STR_3:
  1476  007FFD  FF                 	db	-1
  1477  007FFE  00                 	db	0
  1478  007FFF  00                 	db	0	; dummy byte at the end
  1479  0000                     
  1480                           ; #config settings
  1481                           
  1482                           	psect	cinit
  1483  0032DC                     __pcinit:
  1484                           	callstack 0
  1485  0032DC                     start_initialization:
  1486                           	callstack 0
  1487  0032DC                     __initialization:
  1488                           	callstack 0
  1489                           
  1490                           ; Initialize objects allocated to BANK1 (86 bytes)
  1491                           ; load TBLPTR registers with __pidataBANK1
  1492  0032DC  0EB0               	movlw	low __pidataBANK1
  1493  0032DE  6EF6               	movwf	tblptrl,c
  1494  0032E0  0E37               	movlw	high __pidataBANK1
  1495  0032E2  6EF7               	movwf	tblptrh,c
  1496  0032E4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1497  0032E6  6EF8               	movwf	tblptru,c
  1498  0032E8  EE01  F000         	lfsr	0,__pdataBANK1
  1499  0032EC  EE10 F056          	lfsr	1,86
  1500  0032F0                     copy_data0:
  1501  0032F0  0009               	tblrd		*+
  1502  0032F2  CFF5 FFEE          	movff	tablat,postinc0
  1503  0032F6  50E5               	movf	postdec1,w,c
  1504  0032F8  50E1               	movf	fsr1l,w,c
  1505  0032FA  E1FA               	bnz	copy_data0
  1506                           
  1507                           ; Initialize objects allocated to BANK0 (56 bytes)
  1508                           ; load TBLPTR registers with __pidataBANK0
  1509  0032FC  0EFE               	movlw	low __pidataBANK0
  1510  0032FE  6EF6               	movwf	tblptrl,c
  1511  003300  0E3A               	movlw	high __pidataBANK0
  1512  003302  6EF7               	movwf	tblptrh,c
  1513  003304  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1514  003306  6EF8               	movwf	tblptru,c
  1515  003308  EE00  F0BD         	lfsr	0,__pdataBANK0
  1516  00330C  EE10 F038          	lfsr	1,56
  1517  003310                     copy_data1:
  1518  003310  0009               	tblrd		*+
  1519  003312  CFF5 FFEE          	movff	tablat,postinc0
  1520  003316  50E5               	movf	postdec1,w,c
  1521  003318  50E1               	movf	fsr1l,w,c
  1522  00331A  E1FA               	bnz	copy_data1
  1523                           
  1524                           ; Initialize objects allocated to COMRAM (3 bytes)
  1525                           ; load TBLPTR registers with __pidataCOMRAM
  1526  00331C  0E86               	movlw	low __pidataCOMRAM
  1527  00331E  6EF6               	movwf	tblptrl,c
  1528  003320  0E3F               	movlw	high __pidataCOMRAM
  1529  003322  6EF7               	movwf	tblptrh,c
  1530  003324  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1531  003326  6EF8               	movwf	tblptru,c
  1532  003328  0009               	tblrd		*+	;fetch initializer
  1533  00332A  CFF5 F05B          	movff	tablat,__pdataCOMRAM
  1534  00332E  0009               	tblrd		*+	;fetch initializer
  1535  003330  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
  1536  003334  0009               	tblrd		*+	;fetch initializer
  1537  003336  CFF5 F05D          	movff	tablat,__pdataCOMRAM+2
  1538                           
  1539                           ; Clear objects allocated to BANK1 (20 bytes)
  1540  00333A  EE01  F056         	lfsr	0,__pbssBANK1
  1541  00333E  0E14               	movlw	20
  1542  003340                     clear_0:
  1543  003340  6AEE               	clrf	postinc0,c
  1544  003342  06E8               	decf	wreg,f,c
  1545  003344  E1FD               	bnz	clear_0
  1546                           
  1547                           ; Clear objects allocated to BANK0 (2 bytes)
  1548  003346  0100               	movlb	0
  1549  003348  6BF6               	clrf	(__pbssBANK0+1)& (0+255),b
  1550  00334A  6BF5               	clrf	__pbssBANK0& (0+255),b
  1551                           
  1552                           ; Clear objects allocated to COMRAM (48 bytes)
  1553  00334C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1554  003350  0E30               	movlw	48
  1555  003352                     clear_1:
  1556  003352  6AEE               	clrf	postinc0,c
  1557  003354  06E8               	decf	wreg,f,c
  1558  003356  E1FD               	bnz	clear_1
  1559  003358                     end_of_initialization:
  1560                           	callstack 0
  1561  003358                     __end_of__initialization:
  1562                           	callstack 0
  1563  003358  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1564  00335A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1565  00335C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1566  00335E  6EF8               	movwf	tblptru,c
  1567  003360  0100               	movlb	0
  1568  003362  EF09  F000         	goto	_main	;jump to C main() function
  1569                           
  1570                           	psect	bssCOMRAM
  1571  000001                     __pbssCOMRAM:
  1572                           	callstack 0
  1573  000001                     	ds	10
  1574  00000B                     _t1cont:
  1575                           	callstack 0
  1576  00000B                     	ds	4
  1577  00000F                     	ds	4
  1578  000013                     _ptrSerialOut:
  1579                           	callstack 0
  1580  000013                     	ds	2
  1581  000015                     _ptrSerialIn:
  1582                           	callstack 0
  1583  000015                     	ds	2
  1584  000017                     _cont_ciclos:
  1585                           	callstack 0
  1586  000017                     	ds	2
  1587  000019                     _ciclos:
  1588                           	callstack 0
  1589  000019                     	ds	2
  1590  00001B                     _teclaAnterior:
  1591                           	callstack 0
  1592  00001B                     	ds	1
  1593  00001C                     _lenSerialIO:
  1594                           	callstack 0
  1595  00001C                     	ds	1
  1596  00001D                     _d:
  1597                           	callstack 0
  1598  00001D                     	ds	1
  1599  00001E                     _atuador:
  1600                           	callstack 0
  1601  00001E                     	ds	1
  1602  00001F                     _fila:
  1603                           	callstack 0
  1604  00001F                     	ds	18
  1605                           
  1606                           	psect	dataCOMRAM
  1607  00005B                     __pdataCOMRAM:
  1608                           	callstack 0
  1609  00005B                     _indice_passos:
  1610                           	callstack 0
  1611  00005B                     	ds	1
  1612  00005C                     _ind_print:
  1613                           	callstack 0
  1614  00005C                     	ds	1
  1615  00005D                     _ind_fila:
  1616                           	callstack 0
  1617  00005D                     	ds	1
  1618                           
  1619                           	psect	bssBANK0
  1620  0000F5                     __pbssBANK0:
  1621                           	callstack 0
  1622  0000F5                     	ds	1
  1623  0000F6                     	ds	1
  1624                           
  1625                           	psect	dataBANK0
  1626  0000BD                     __pdataBANK0:
  1627                           	callstack 0
  1628  0000BD                     _wifi:
  1629                           	callstack 0
  1630  0000BD                     	ds	20
  1631  0000D1                     _eusart:
  1632                           	callstack 0
  1633  0000D1                     	ds	16
  1634  0000E1                     _IHM:
  1635                           	callstack 0
  1636  0000E1                     	ds	10
  1637  0000EB                     _EEPROM:
  1638                           	callstack 0
  1639  0000EB                     	ds	10
  1640                           
  1641                           	psect	bssBANK1
  1642  000156                     __pbssBANK1:
  1643                           	callstack 0
  1644  000156                     _aux:
  1645                           	callstack 0
  1646  000156                     	ds	20
  1647                           
  1648                           	psect	dataBANK1
  1649  000100                     __pdataBANK1:
  1650                           	callstack 0
  1651  000100                     Wifi_connect@F3287:
  1652                           	callstack 0
  1653  000100                     	ds	30
  1654  00011E                     Wifi_cipsend@F3299:
  1655                           	callstack 0
  1656  00011E                     	ds	20
  1657  000132                     main@F3513:
  1658                           	callstack 0
  1659  000132                     	ds	20
  1660  000146                     _teclas:
  1661                           	callstack 0
  1662  000146                     	ds	16
  1663                           
  1664                           	psect	cstackBANK0
  1665  000060                     __pcstackBANK0:
  1666                           	callstack 0
  1667  000060                     main@lema:
  1668                           	callstack 0
  1669                           
  1670                           ; 20 bytes @ 0x0
  1671  000060                     	ds	20
  1672  000074                     main@contPassos:
  1673                           	callstack 0
  1674                           
  1675                           ; 1 bytes @ 0x14
  1676  000074                     	ds	1
  1677  000075                     main@aux:
  1678                           	callstack 0
  1679                           
  1680                           ; 1 bytes @ 0x15
  1681  000075                     	ds	1
  1682  000076                     main@vetor_aux:
  1683                           	callstack 0
  1684                           
  1685                           ; 16 bytes @ 0x16
  1686  000076                     	ds	16
  1687  000086                     _main$919:
  1688                           	callstack 0
  1689                           
  1690                           ; 2 bytes @ 0x26
  1691  000086                     	ds	2
  1692  000088                     _main$941:
  1693                           	callstack 0
  1694                           
  1695                           ; 2 bytes @ 0x28
  1696  000088                     	ds	2
  1697  00008A                     _main$945:
  1698                           	callstack 0
  1699                           
  1700                           ; 2 bytes @ 0x2A
  1701  00008A                     	ds	2
  1702  00008C                     _main$946:
  1703                           	callstack 0
  1704                           
  1705                           ; 2 bytes @ 0x2C
  1706  00008C                     	ds	2
  1707  00008E                     _main$947:
  1708                           	callstack 0
  1709                           
  1710                           ; 2 bytes @ 0x2E
  1711  00008E                     	ds	2
  1712  000090                     _main$948:
  1713                           	callstack 0
  1714                           
  1715                           ; 2 bytes @ 0x30
  1716  000090                     	ds	2
  1717  000092                     _main$949:
  1718                           	callstack 0
  1719                           
  1720                           ; 2 bytes @ 0x32
  1721  000092                     	ds	2
  1722  000094                     _main$950:
  1723                           	callstack 0
  1724                           
  1725                           ; 2 bytes @ 0x34
  1726  000094                     	ds	2
  1727  000096                     _main$951:
  1728                           	callstack 0
  1729                           
  1730                           ; 2 bytes @ 0x36
  1731  000096                     	ds	2
  1732  000098                     _main$952:
  1733                           	callstack 0
  1734                           
  1735                           ; 2 bytes @ 0x38
  1736  000098                     	ds	2
  1737  00009A                     _main$956:
  1738                           	callstack 0
  1739                           
  1740                           ; 2 bytes @ 0x3A
  1741  00009A                     	ds	2
  1742  00009C                     main@i_909:
  1743                           	callstack 0
  1744                           
  1745                           ; 1 bytes @ 0x3C
  1746  00009C                     	ds	1
  1747  00009D                     main@pt:
  1748                           	callstack 0
  1749                           
  1750                           ; 2 bytes @ 0x3D
  1751  00009D                     	ds	2
  1752  00009F                     main@ptr:
  1753                           	callstack 0
  1754                           
  1755                           ; 2 bytes @ 0x3F
  1756  00009F                     	ds	2
  1757  0000A1                     main@i:
  1758                           	callstack 0
  1759                           
  1760                           ; 1 bytes @ 0x41
  1761  0000A1                     	ds	1
  1762  0000A2                     main@j:
  1763                           	callstack 0
  1764                           
  1765                           ; 1 bytes @ 0x42
  1766  0000A2                     	ds	1
  1767  0000A3                     main@i_903:
  1768                           	callstack 0
  1769                           
  1770                           ; 1 bytes @ 0x43
  1771  0000A3                     	ds	1
  1772  0000A4                     main@j_904:
  1773                           	callstack 0
  1774                           
  1775                           ; 1 bytes @ 0x44
  1776  0000A4                     	ds	1
  1777  0000A5                     main@i_930:
  1778                           	callstack 0
  1779                           
  1780                           ; 1 bytes @ 0x45
  1781  0000A5                     	ds	1
  1782  0000A6                     main@j_931:
  1783                           	callstack 0
  1784                           
  1785                           ; 1 bytes @ 0x46
  1786  0000A6                     	ds	1
  1787  0000A7                     main@i_933:
  1788                           	callstack 0
  1789                           
  1790                           ; 1 bytes @ 0x47
  1791  0000A7                     	ds	1
  1792  0000A8                     main@j_934:
  1793                           	callstack 0
  1794                           
  1795                           ; 1 bytes @ 0x48
  1796  0000A8                     	ds	1
  1797  0000A9                     main@i_975:
  1798                           	callstack 0
  1799                           
  1800                           ; 1 bytes @ 0x49
  1801  0000A9                     	ds	1
  1802  0000AA                     main@j_976:
  1803                           	callstack 0
  1804                           
  1805                           ; 1 bytes @ 0x4A
  1806  0000AA                     	ds	1
  1807  0000AB                     main@i_978:
  1808                           	callstack 0
  1809                           
  1810                           ; 1 bytes @ 0x4B
  1811  0000AB                     	ds	1
  1812  0000AC                     main@j_979:
  1813                           	callstack 0
  1814                           
  1815                           ; 1 bytes @ 0x4C
  1816  0000AC                     	ds	1
  1817  0000AD                     main@vetorIn:
  1818                           	callstack 0
  1819                           
  1820                           ; 1 bytes @ 0x4D
  1821  0000AD                     	ds	1
  1822  0000AE                     main@vetorOut:
  1823                           	callstack 0
  1824                           
  1825                           ; 1 bytes @ 0x4E
  1826  0000AE                     	ds	1
  1827  0000AF                     main@meAtuadores:
  1828                           	callstack 0
  1829                           
  1830                           ; 1 bytes @ 0x4F
  1831  0000AF                     	ds	1
  1832  0000B0                     main@ciclos:
  1833                           	callstack 0
  1834                           
  1835                           ; 2 bytes @ 0x50
  1836  0000B0                     	ds	2
  1837  0000B2                     main@init_cond:
  1838                           	callstack 0
  1839                           
  1840                           ; 1 bytes @ 0x52
  1841  0000B2                     	ds	1
  1842  0000B3                     main@botao:
  1843                           	callstack 0
  1844                           
  1845                           ; 1 bytes @ 0x53
  1846  0000B3                     	ds	1
  1847  0000B4                     main@num:
  1848                           	callstack 0
  1849                           
  1850                           ; 2 bytes @ 0x54
  1851  0000B4                     	ds	2
  1852  0000B6                     main@ptr_915:
  1853                           	callstack 0
  1854                           
  1855                           ; 2 bytes @ 0x56
  1856  0000B6                     	ds	2
  1857  0000B8                     main@ptr_940:
  1858                           	callstack 0
  1859                           
  1860                           ; 2 bytes @ 0x58
  1861  0000B8                     	ds	2
  1862  0000BA                     main@auxPasso:
  1863                           	callstack 0
  1864                           
  1865                           ; 1 bytes @ 0x5A
  1866  0000BA                     	ds	1
  1867  0000BB                     main@estado:
  1868                           	callstack 0
  1869                           
  1870                           ; 1 bytes @ 0x5B
  1871  0000BB                     	ds	1
  1872  0000BC                     main@tecla:
  1873                           	callstack 0
  1874                           
  1875                           ; 1 bytes @ 0x5C
  1876  0000BC                     	ds	1
  1877                           
  1878                           	psect	cstackCOMRAM
  1879  000031                     __pcstackCOMRAM:
  1880                           	callstack 0
  1881  000031                     ??_dispLCD_instReg:
  1882  000031                     ??_dispLCD_dataReg:
  1883  000031                     ??_ler_atuador:
  1884  000031                     ??_alt_atuador:
  1885  000031                     ??_fifo_indicePrint_inc:
  1886  000031                     ??_teclado_scan:
  1887  000031                     ?_fifo_adrs:
  1888                           	callstack 0
  1889  000031                     ?_end_receita:
  1890                           	callstack 0
  1891  000031                     ?_getCiclos:
  1892                           	callstack 0
  1893  000031                     ?_getContCiclos:
  1894                           	callstack 0
  1895  000031                     ?___wmul:
  1896                           	callstack 0
  1897  000031                     ?___awdiv:
  1898                           	callstack 0
  1899  000031                     ?___awmod:
  1900                           	callstack 0
  1901  000031                     ?___lwdiv:
  1902                           	callstack 0
  1903  000031                     ?_statusT1:
  1904                           	callstack 0
  1905  000031                     ?___lmul:
  1906                           	callstack 0
  1907  000031                     ?___lldiv:
  1908                           	callstack 0
  1909  000031                     EEPROM_read@addr:
  1910                           	callstack 0
  1911  000031                     EEPROM_write@data:
  1912                           	callstack 0
  1913  000031                     fifo_lerPos@i:
  1914                           	callstack 0
  1915  000031                     serialIObyteShift@dataIn:
  1916                           	callstack 0
  1917  000031                     I2C_tx@b:
  1918                           	callstack 0
  1919  000031                     txEUSART@d:
  1920                           	callstack 0
  1921  000031                     set_passo@ptr:
  1922                           	callstack 0
  1923  000031                     ler_sensor@ptr:
  1924                           	callstack 0
  1925  000031                     delay@t:
  1926                           	callstack 0
  1927  000031                     end_receita@x:
  1928                           	callstack 0
  1929  000031                     codifica@dado:
  1930                           	callstack 0
  1931  000031                     decodifica@d:
  1932                           	callstack 0
  1933  000031                     fifo_add_ciclo@ciclos:
  1934                           	callstack 0
  1935  000031                     initSerialIO@ptrIn:
  1936                           	callstack 0
  1937  000031                     ___wmul@multiplier:
  1938                           	callstack 0
  1939  000031                     ___awdiv@dividend:
  1940                           	callstack 0
  1941  000031                     ___awmod@dividend:
  1942                           	callstack 0
  1943  000031                     ___lwdiv@dividend:
  1944                           	callstack 0
  1945  000031                     ___lmul@multiplier:
  1946                           	callstack 0
  1947  000031                     ___lldiv@dividend:
  1948                           	callstack 0
  1949                           
  1950                           ; 4 bytes @ 0x0
  1951  000031                     	ds	1
  1952  000032                     dispLCD_instReg@i:
  1953                           	callstack 0
  1954  000032                     dispLCD_dataReg@d:
  1955                           	callstack 0
  1956  000032                     EEPROM_write@addr:
  1957                           	callstack 0
  1958  000032                     posAtual@ind:
  1959                           	callstack 0
  1960  000032                     serialIObyteShift@dataOut:
  1961                           	callstack 0
  1962  000032                     wifi_send@msg:
  1963                           	callstack 0
  1964                           
  1965                           ; 2 bytes @ 0x1
  1966  000032                     	ds	1
  1967  000033                     ??_delay:
  1968  000033                     ??_decodifica:
  1969  000033                     ??_codifica:
  1970  000033                     ??_set_passo:
  1971  000033                     ??_ler_sensor:
  1972  000033                     ??_end_receita:
  1973  000033                     dispLCD_lincol@col:
  1974                           	callstack 0
  1975  000033                     formatar_receitas@i:
  1976                           	callstack 0
  1977  000033                     ler_atuador@tecla:
  1978                           	callstack 0
  1979  000033                     alt_atuador@tecla:
  1980                           	callstack 0
  1981  000033                     posAtual@passo:
  1982                           	callstack 0
  1983  000033                     serialIObyteShift@dataBit:
  1984                           	callstack 0
  1985  000033                     teclado_scan@tecla:
  1986                           	callstack 0
  1987  000033                     getCiclos@aux:
  1988                           	callstack 0
  1989  000033                     initSerialIO@ptrOut:
  1990                           	callstack 0
  1991  000033                     ___wmul@multiplicand:
  1992                           	callstack 0
  1993  000033                     ___awdiv@divisor:
  1994                           	callstack 0
  1995  000033                     ___awmod@divisor:
  1996                           	callstack 0
  1997  000033                     ___lwdiv@divisor:
  1998                           	callstack 0
  1999                           
  2000                           ; 2 bytes @ 0x2
  2001  000033                     	ds	1
  2002  000034                     ??_serialIOscan:
  2003  000034                     ??_dispLCD_lincol:
  2004  000034                     manipula_atuadores_init@atuador:
  2005                           	callstack 0
  2006  000034                     teclado_scan@l:
  2007                           	callstack 0
  2008  000034                     Wifi_mode@d:
  2009                           	callstack 0
  2010  000034                     dac_write@code:
  2011                           	callstack 0
  2012  000034                     Wifi_connect@ssid:
  2013                           	callstack 0
  2014  000034                     salva_atuadores_init@condi_init:
  2015                           	callstack 0
  2016                           
  2017                           ; 4 bytes @ 0x3
  2018  000034                     	ds	1
  2019  000035                     set_passo@passo:
  2020                           	callstack 0
  2021  000035                     ler_sensor@passo:
  2022                           	callstack 0
  2023  000035                     manipula_atuadores_init@aux:
  2024                           	callstack 0
  2025  000035                     codifica@tipo:
  2026                           	callstack 0
  2027  000035                     initSerialIO@length:
  2028                           	callstack 0
  2029  000035                     teclado_scan@c:
  2030                           	callstack 0
  2031  000035                     ___awdiv@counter:
  2032                           	callstack 0
  2033  000035                     ___awmod@counter:
  2034                           	callstack 0
  2035  000035                     deletar_receita@aux:
  2036                           	callstack 0
  2037  000035                     ___wmul@product:
  2038                           	callstack 0
  2039  000035                     ___lwdiv@quotient:
  2040                           	callstack 0
  2041  000035                     ___lmul@multiplicand:
  2042                           	callstack 0
  2043  000035                     ___lldiv@divisor:
  2044                           	callstack 0
  2045                           
  2046                           ; 4 bytes @ 0x4
  2047  000035                     	ds	1
  2048  000036                     ??_dac_write:
  2049  000036                     dispLCD_lincol@lin:
  2050                           	callstack 0
  2051  000036                     manipula_atuadores_init@mask:
  2052                           	callstack 0
  2053  000036                     serialIOscan@j:
  2054                           	callstack 0
  2055  000036                     teclado_borda@aux:
  2056                           	callstack 0
  2057  000036                     ___awdiv@sign:
  2058                           	callstack 0
  2059  000036                     ___awmod@sign:
  2060                           	callstack 0
  2061  000036                     Wifi_connect@pass:
  2062                           	callstack 0
  2063                           
  2064                           ; 2 bytes @ 0x5
  2065  000036                     	ds	1
  2066  000037                     dispLCD_lincol@aux:
  2067                           	callstack 0
  2068  000037                     salvar_dado@col:
  2069                           	callstack 0
  2070  000037                     buscar_dado@col:
  2071                           	callstack 0
  2072  000037                     deletar_receita@receita:
  2073                           	callstack 0
  2074  000037                     serialIOscan@i:
  2075                           	callstack 0
  2076  000037                     teclado_borda@tecla:
  2077                           	callstack 0
  2078  000037                     ___lwdiv@counter:
  2079                           	callstack 0
  2080  000037                     salvar_receita@data:
  2081                           	callstack 0
  2082  000037                     buscar_receita@data:
  2083                           	callstack 0
  2084  000037                     dignum_conc@ptrNum:
  2085                           	callstack 0
  2086  000037                     ___awdiv@quotient:
  2087                           	callstack 0
  2088  000037                     setT1@c:
  2089                           	callstack 0
  2090                           
  2091                           ; 4 bytes @ 0x6
  2092  000037                     	ds	1
  2093  000038                     ??_Wifi_connect:
  2094  000038                     dispLCD@col:
  2095                           	callstack 0
  2096  000038                     salvar_dado@data:
  2097                           	callstack 0
  2098  000038                     deletar_receita@i:
  2099                           	callstack 0
  2100  000038                     dispLCD_str@str:
  2101                           	callstack 0
  2102  000038                     buscar_dado@data:
  2103                           	callstack 0
  2104  000038                     salva_atuadores_init@pt:
  2105                           	callstack 0
  2106  000038                     dignum_apagar@ptrNum:
  2107                           	callstack 0
  2108                           
  2109                           ; 2 bytes @ 0x7
  2110  000038                     	ds	1
  2111  000039                     ??_fifo_print:
  2112  000039                     ??_dignum_conc:
  2113  000039                     dispLCD@str:
  2114                           	callstack 0
  2115  000039                     salvar_receita@aux:
  2116                           	callstack 0
  2117  000039                     buscar_receita@aux:
  2118                           	callstack 0
  2119  000039                     salvar_dado@aux:
  2120                           	callstack 0
  2121  000039                     dignum_tam@num:
  2122                           	callstack 0
  2123  000039                     ___lmul@product:
  2124                           	callstack 0
  2125  000039                     ___lldiv@quotient:
  2126                           	callstack 0
  2127                           
  2128                           ; 4 bytes @ 0x8
  2129  000039                     	ds	1
  2130  00003A                     dispLCD_str@lin:
  2131                           	callstack 0
  2132  00003A                     salva_atuadores_init@dado:
  2133                           	callstack 0
  2134  00003A                     buscar_dado@aux:
  2135                           	callstack 0
  2136  00003A                     Wifi_connect@str:
  2137                           	callstack 0
  2138                           
  2139                           ; 30 bytes @ 0x9
  2140  00003A                     	ds	1
  2141  00003B                     dispLCD@pos:
  2142                           	callstack 0
  2143  00003B                     dispLCD_str@c:
  2144                           	callstack 0
  2145  00003B                     salvar_receita@adrs:
  2146                           	callstack 0
  2147  00003B                     buscar_receita@adrs:
  2148                           	callstack 0
  2149  00003B                     salvar_dado@adrs:
  2150                           	callstack 0
  2151  00003B                     salva_atuadores_init@mask:
  2152                           	callstack 0
  2153  00003B                     dignum_conc@dig:
  2154                           	callstack 0
  2155  00003B                     dignum_tam@tam:
  2156                           	callstack 0
  2157  00003B                     _fifo_print$473:
  2158                           	callstack 0
  2159                           
  2160                           ; 2 bytes @ 0xA
  2161  00003B                     	ds	1
  2162  00003C                     ??_fifo_alinharPrint:
  2163  00003C                     dispLCD@lin:
  2164                           	callstack 0
  2165  00003C                     dispLCD_num@col:
  2166                           	callstack 0
  2167  00003C                     salvar_receita@i:
  2168                           	callstack 0
  2169  00003C                     buscar_receita@i:
  2170                           	callstack 0
  2171  00003C                     buscar_dado@adrs:
  2172                           	callstack 0
  2173                           
  2174                           ; 1 bytes @ 0xB
  2175  00003C                     	ds	1
  2176  00003D                     ?___aldiv:
  2177                           	callstack 0
  2178  00003D                     fifo_print@completar:
  2179                           	callstack 0
  2180  00003D                     fifo_alinharPrint@cont:
  2181                           	callstack 0
  2182  00003D                     ___lldiv@counter:
  2183                           	callstack 0
  2184  00003D                     dispLCD_num@num:
  2185                           	callstack 0
  2186  00003D                     ___aldiv@dividend:
  2187                           	callstack 0
  2188                           
  2189                           ; 4 bytes @ 0xC
  2190  00003D                     	ds	1
  2191  00003E                     fifo_print@indPrint:
  2192                           	callstack 0
  2193  00003E                     fifo_alinharPrint@i:
  2194                           	callstack 0
  2195  00003E                     I2C_init@freq:
  2196                           	callstack 0
  2197  00003E                     initEUSART@baudRate:
  2198                           	callstack 0
  2199                           
  2200                           ; 4 bytes @ 0xD
  2201  00003E                     	ds	1
  2202  00003F                     dispLCD_num@tam:
  2203                           	callstack 0
  2204  00003F                     fifo_print@i:
  2205                           	callstack 0
  2206  00003F                     fifo_alinharPrint@aux:
  2207                           	callstack 0
  2208                           
  2209                           ; 1 bytes @ 0xE
  2210  00003F                     	ds	1
  2211  000040                     ??_dispLCD_num:
  2212  000040                     ??_fifo_delete:
  2213  000040                     fifo_add@passo:
  2214                           	callstack 0
  2215  000040                     fifo_add_tempo@t:
  2216                           	callstack 0
  2217  000040                     fifo_add_control@c:
  2218                           	callstack 0
  2219  000040                     fifo_print@atraso:
  2220                           	callstack 0
  2221                           
  2222                           ; 1 bytes @ 0xF
  2223  000040                     	ds	1
  2224  000041                     fifo_print@comando:
  2225                           	callstack 0
  2226  000041                     ___aldiv@divisor:
  2227                           	callstack 0
  2228                           
  2229                           ; 4 bytes @ 0x10
  2230  000041                     	ds	1
  2231  000042                     ??_initEUSART:
  2232                           
  2233                           ; 1 bytes @ 0x11
  2234  000042                     	ds	3
  2235  000045                     dispLCD_num@lin:
  2236                           	callstack 0
  2237  000045                     ___aldiv@counter:
  2238                           	callstack 0
  2239                           
  2240                           ; 1 bytes @ 0x14
  2241  000045                     	ds	1
  2242  000046                     dispLCD_num@size:
  2243                           	callstack 0
  2244  000046                     ___aldiv@sign:
  2245                           	callstack 0
  2246  000046                     wifi_init@br:
  2247                           	callstack 0
  2248                           
  2249                           ; 4 bytes @ 0x15
  2250  000046                     	ds	1
  2251  000047                     dispLCD_num@sinal:
  2252                           	callstack 0
  2253  000047                     ___aldiv@quotient:
  2254                           	callstack 0
  2255                           
  2256                           ; 4 bytes @ 0x16
  2257  000047                     	ds	1
  2258  000048                     dispLCD_num@div:
  2259                           	callstack 0
  2260                           
  2261                           ; 2 bytes @ 0x17
  2262  000048                     	ds	2
  2263  00004A                     printExec@ind:
  2264                           	callstack 0
  2265                           
  2266                           ; 1 bytes @ 0x19
  2267  00004A                     	ds	1
  2268  00004B                     MCP4725@Vout:
  2269                           	callstack 0
  2270  00004B                     _printExec$498:
  2271                           	callstack 0
  2272                           
  2273                           ; 2 bytes @ 0x1A
  2274  00004B                     	ds	2
  2275  00004D                     printExec@col:
  2276                           	callstack 0
  2277                           
  2278                           ; 1 bytes @ 0x1C
  2279  00004D                     	ds	1
  2280  00004E                     printExec@passo:
  2281                           	callstack 0
  2282                           
  2283                           ; 1 bytes @ 0x1D
  2284  00004E                     	ds	10
  2285  000058                     Wifi_connect@i:
  2286                           	callstack 0
  2287                           
  2288                           ; 1 bytes @ 0x27
  2289  000058                     	ds	1
  2290  000059                     ??_main:
  2291                           
  2292                           ; 1 bytes @ 0x28
  2293  000059                     	ds	2
  2294                           
  2295 ;;
  2296 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2297 ;;
  2298 ;; *************** function _main *****************
  2299 ;; Defined at:
  2300 ;;		line 71 in file "main.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;  j               1   76[BANK0 ] unsigned char 
  2305 ;;  j               1   74[BANK0 ] unsigned char 
  2306 ;;  j               1   72[BANK0 ] unsigned char 
  2307 ;;  j               1   70[BANK0 ] unsigned char 
  2308 ;;  j               1   68[BANK0 ] unsigned char 
  2309 ;;  j               1   66[BANK0 ] unsigned char 
  2310 ;;  ptr             2   88[BANK0 ] PTR unsigned char 
  2311 ;;		 -> main@vetor_aux(16), 
  2312 ;;  i               1   75[BANK0 ] unsigned char 
  2313 ;;  i               1   73[BANK0 ] unsigned char 
  2314 ;;  i               1   71[BANK0 ] unsigned char 
  2315 ;;  i               1   69[BANK0 ] unsigned char 
  2316 ;;  ptr             2   86[BANK0 ] PTR unsigned char 
  2317 ;;		 -> main@vetor_aux(16), 
  2318 ;;  i               1   67[BANK0 ] unsigned char 
  2319 ;;  i               1   65[BANK0 ] unsigned char 
  2320 ;;  lema           20    0[BANK0 ] unsigned char [20]
  2321 ;;  ptr             2   63[BANK0 ] PTR unsigned char 
  2322 ;;		 -> main@lema(20), 
  2323 ;;  i               1   60[BANK0 ] unsigned char 
  2324 ;;  vetor_aux      16   22[BANK0 ] unsigned char [16]
  2325 ;;  num             2   84[BANK0 ] unsigned int 
  2326 ;;  ciclos          2   80[BANK0 ] unsigned int 
  2327 ;;  pt              2   61[BANK0 ] PTR unsigned char 
  2328 ;;		 -> main@vetor_aux(16), 
  2329 ;;  tecla           1   92[BANK0 ] unsigned char 
  2330 ;;  estado          1   91[BANK0 ] unsigned char 
  2331 ;;  auxPasso        1   90[BANK0 ] unsigned char 
  2332 ;;  botao           1   83[BANK0 ] unsigned char 
  2333 ;;  init_cond       1   82[BANK0 ] unsigned char 
  2334 ;;  meAtuadores     1   79[BANK0 ] unsigned char 
  2335 ;;  vetorOut        1   78[BANK0 ] unsigned char [1]
  2336 ;;  vetorIn         1   77[BANK0 ] unsigned char [1]
  2337 ;;  aux             1   21[BANK0 ] unsigned char 
  2338 ;;  contPassos      1   20[BANK0 ] unsigned char 
  2339 ;;  atuador         1    0        unsigned char 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2349 ;;      Params:         0       0       0       0       0       0       0       0       0
  2350 ;;      Locals:         0      93       0       0       0       0       0       0       0
  2351 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2352 ;;      Totals:         2      93       0       0       0       0       0       0       0
  2353 ;;Total ram usage:       95 bytes
  2354 ;; Hardware stack levels required when called:    6
  2355 ;; This function calls:
  2356 ;;		_I2C_init
  2357 ;;		_MCP4725
  2358 ;;		_Wifi_connect
  2359 ;;		_Wifi_mode
  2360 ;;		___aldiv
  2361 ;;		___awmod
  2362 ;;		___lmul
  2363 ;;		___wmul
  2364 ;;		_addContCiclos
  2365 ;;		_addIndicePassos
  2366 ;;		_alt_atuador
  2367 ;;		_buscar_dado
  2368 ;;		_buscar_receita
  2369 ;;		_decodifica
  2370 ;;		_delay
  2371 ;;		_deletar_receita
  2372 ;;		_dignum_apagar
  2373 ;;		_dignum_conc
  2374 ;;		_dispLCD
  2375 ;;		_dispLCD_clr
  2376 ;;		_dispLCD_dataReg
  2377 ;;		_dispLCD_init
  2378 ;;		_dispLCD_lincol
  2379 ;;		_dispLCD_num
  2380 ;;		_dispLCD_str
  2381 ;;		_fifo_add
  2382 ;;		_fifo_add_ciclo
  2383 ;;		_fifo_add_control
  2384 ;;		_fifo_add_tempo
  2385 ;;		_fifo_adrs
  2386 ;;		_fifo_delete
  2387 ;;		_fifo_disponivel
  2388 ;;		_fifo_indice
  2389 ;;		_fifo_indicePrint_dec
  2390 ;;		_fifo_indicePrint_inc
  2391 ;;		_fifo_lerPos
  2392 ;;		_fifo_print
  2393 ;;		_fifo_tam
  2394 ;;		_formatar_receitas
  2395 ;;		_getCiclos
  2396 ;;		_getContCiclos
  2397 ;;		_getIndicePassos
  2398 ;;		_initSerialIO
  2399 ;;		_init_atuadores
  2400 ;;		_ler_atuador
  2401 ;;		_ler_sensor
  2402 ;;		_manipula_atuadores_init
  2403 ;;		_printExec
  2404 ;;		_resetContCiclos
  2405 ;;		_resetIndicePassos
  2406 ;;		_salva_atuadores_init
  2407 ;;		_salvar_dado
  2408 ;;		_salvar_receita
  2409 ;;		_serialIOscan
  2410 ;;		_setT1
  2411 ;;		_set_passo
  2412 ;;		_statusT1
  2413 ;;		_teclado_borda
  2414 ;;		_teclado_init
  2415 ;;		_timer1_init
  2416 ;;		_wifi_init
  2417 ;; This function is called by:
  2418 ;;		Startup code after reset
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text0
  2423  000012                     __ptext0:
  2424                           	callstack 0
  2425  000012                     _main:
  2426                           	callstack 25
  2427  000012                     
  2428                           ;main.c: 73:     dispLCD_init();
  2429  000012  ECD2  F01D         	call	_dispLCD_init	;wreg free
  2430  000016                     
  2431                           ;main.c: 74:     teclado_init();
  2432  000016  EC8E  F01F         	call	_teclado_init	;wreg free
  2433  00001A                     
  2434                           ;main.c: 75:     timer1_init();
  2435  00001A  ECF9  F01E         	call	_timer1_init	;wreg free
  2436                           
  2437                           ;main.c: 76:     I2C_init(20000000);
  2438  00001E  0E00               	movlw	0
  2439  000020  6E3E               	movwf	I2C_init@freq^0,c
  2440  000022  0E2D               	movlw	45
  2441  000024  6E3F               	movwf	(I2C_init@freq+1)^0,c
  2442  000026  0E31               	movlw	49
  2443  000028  6E40               	movwf	(I2C_init@freq+2)^0,c
  2444  00002A  0E01               	movlw	1
  2445  00002C  6E41               	movwf	(I2C_init@freq+3)^0,c
  2446  00002E  EC62  F01D         	call	_I2C_init	;wreg free
  2447                           
  2448                           ;main.c: 77:     MCP4725(0);
  2449  000032  0E00               	movlw	0
  2450  000034  6E4C               	movwf	(MCP4725@Vout+1)^0,c
  2451  000036  0E00               	movlw	0
  2452  000038  6E4B               	movwf	MCP4725@Vout^0,c
  2453  00003A  ECD9  F01E         	call	_MCP4725	;wreg free
  2454  00003E                     
  2455                           ;main.c: 78:     wifi.init(115200);
  2456  00003E  0E00               	movlw	0
  2457  000040  6E46               	movwf	wifi_init@br^0,c
  2458  000042  0EC2               	movlw	194
  2459  000044  6E47               	movwf	(wifi_init@br+1)^0,c
  2460  000046  0E01               	movlw	1
  2461  000048  6E48               	movwf	(wifi_init@br+2)^0,c
  2462  00004A  0E00               	movlw	0
  2463  00004C  6E49               	movwf	(wifi_init@br+3)^0,c
  2464  00004E  D802               	call	u4588
  2465  000050  EF35  F000         	goto	u4589
  2466  000054                     u4588:
  2467  000054  0005               	push	
  2468  000056  0100               	movlb	0	; () banked
  2469  000058  6EFA               	movwf	pclath,c
  2470  00005A  51BD               	movf	_wifi& (0+255),w,b
  2471  00005C  6EFD               	movwf	tosl,c
  2472  00005E  51BE               	movf	(_wifi+1)& (0+255),w,b
  2473  000060  6EFE               	movwf	tosh,c
  2474  000062  50F8               	movf	tblptru,w,c
  2475  000064  6EFF               	movwf	tosu,c
  2476  000066  50FA               	movf	pclath,w,c
  2477  000068  0012               	return		;indir
  2478  00006A                     u4589:
  2479  00006A                     
  2480                           ;main.c: 79:     delay(1000);
  2481  00006A  0E03               	movlw	3
  2482  00006C  6E32               	movwf	(delay@t+1)^0,c
  2483  00006E  0EE8               	movlw	232
  2484  000070  6E31               	movwf	delay@t^0,c
  2485  000072  EC62  F01E         	call	_delay	;wreg free
  2486  000076                     
  2487                           ;main.c: 80:     wifi.mode(1);
  2488  000076  EE20  F0C3         	lfsr	2,_wifi+6
  2489  00007A  D802               	call	u4598
  2490  00007C  EF4B  F000         	goto	u4599
  2491  000080                     u4598:
  2492  000080  0005               	push	
  2493  000082  6EFA               	movwf	pclath,c
  2494  000084  50DE               	movf	postinc2,w,c
  2495  000086  6EFD               	movwf	tosl,c
  2496  000088  50DE               	movf	postinc2,w,c
  2497  00008A  6EFE               	movwf	tosh,c
  2498  00008C  50F8               	movf	tblptru,w,c
  2499  00008E  6EFF               	movwf	tosu,c
  2500  000090  50FA               	movf	pclath,w,c
  2501  000092  0E01               	movlw	1
  2502  000094  0012               	return		;indir
  2503  000096                     u4599:
  2504  000096                     
  2505                           ;main.c: 81:     delay(1000);
  2506  000096  0E03               	movlw	3
  2507  000098  6E32               	movwf	(delay@t+1)^0,c
  2508  00009A  0EE8               	movlw	232
  2509  00009C  6E31               	movwf	delay@t^0,c
  2510  00009E  EC62  F01E         	call	_delay
  2511  0000A2                     
  2512                           ;main.c: 82:     wifi.connect("LEMES","28090210");
  2513  0000A2  0EF7               	movlw	low STR_1
  2514  0000A4  6E34               	movwf	Wifi_connect@ssid^0,c
  2515  0000A6  0E7F               	movlw	high STR_1
  2516  0000A8  6E35               	movwf	(Wifi_connect@ssid+1)^0,c
  2517  0000AA  0EE6               	movlw	low STR_2
  2518  0000AC  6E36               	movwf	Wifi_connect@pass^0,c
  2519  0000AE  0E7F               	movlw	high STR_2
  2520  0000B0  6E37               	movwf	(Wifi_connect@pass+1)^0,c
  2521  0000B2  EE20  F0C5         	lfsr	2,_wifi+8
  2522  0000B6  D802               	call	u4608
  2523  0000B8  EF68  F000         	goto	u4609
  2524  0000BC                     u4608:
  2525  0000BC  0005               	push	
  2526  0000BE  6EFA               	movwf	pclath,c
  2527  0000C0  50DE               	movf	postinc2,w,c
  2528  0000C2  6EFD               	movwf	tosl,c
  2529  0000C4  50DE               	movf	postinc2,w,c
  2530  0000C6  6EFE               	movwf	tosh,c
  2531  0000C8  50F8               	movf	tblptru,w,c
  2532  0000CA  6EFF               	movwf	tosu,c
  2533  0000CC  50FA               	movf	pclath,w,c
  2534  0000CE  0012               	return		;indir
  2535  0000D0                     u4609:
  2536  0000D0                     
  2537                           ;main.c: 91:     char tecla = 0;
  2538  0000D0  0E00               	movlw	0
  2539  0000D2  0100               	movlb	0	; () banked
  2540  0000D4  6FBC               	movwf	main@tecla& (0+255),b
  2541  0000D6                     
  2542                           ; BSR set to: 0
  2543                           ;main.c: 92:     char estado = 0;
  2544  0000D6  0E00               	movlw	0
  2545  0000D8  6FBB               	movwf	main@estado& (0+255),b
  2546  0000DA                     
  2547                           ; BSR set to: 0
  2548                           ;main.c: 93:     char atuador;;main.c: 94:     char vetor_aux[16];;main.c: 95:     char 
      +                          init_cond = 0;
  2549  0000DA  0E00               	movlw	0
  2550  0000DC  6FB2               	movwf	main@init_cond& (0+255),b
  2551  0000DE                     
  2552                           ; BSR set to: 0
  2553                           ;main.c: 96:     char *pt;;main.c: 98:     char contPassos = 0;
  2554  0000DE  0E00               	movlw	0
  2555  0000E0  6F74               	movwf	main@contPassos& (0+255),b
  2556  0000E2                     
  2557                           ; BSR set to: 0
  2558                           ;main.c: 99:     char vetorIn[1] = { 0 };
  2559  0000E2  0E00               	movlw	0
  2560  0000E4  6FAD               	movwf	main@vetorIn& (0+255),b
  2561  0000E6                     
  2562                           ; BSR set to: 0
  2563                           ;main.c: 100:     char vetorOut[1] = { 0 };
  2564  0000E6  0E00               	movlw	0
  2565  0000E8  6FAE               	movwf	main@vetorOut& (0+255),b
  2566  0000EA                     
  2567                           ; BSR set to: 0
  2568                           ;main.c: 101:     initSerialIO( vetorIn, vetorOut, 1 );
  2569  0000EA  0EAD               	movlw	low main@vetorIn
  2570  0000EC  6E31               	movwf	initSerialIO@ptrIn^0,c
  2571  0000EE  0E00               	movlw	high main@vetorIn
  2572  0000F0  6E32               	movwf	(initSerialIO@ptrIn+1)^0,c
  2573  0000F2  0EAE               	movlw	low main@vetorOut
  2574  0000F4  6E33               	movwf	initSerialIO@ptrOut^0,c
  2575  0000F6  0E00               	movlw	high main@vetorOut
  2576  0000F8  6E34               	movwf	(initSerialIO@ptrOut+1)^0,c
  2577  0000FA  0E01               	movlw	1
  2578  0000FC  6E35               	movwf	initSerialIO@length^0,c
  2579  0000FE  EC1D  F01E         	call	_initSerialIO	;wreg free
  2580  000102                     
  2581                           ;main.c: 102:     char meAtuadores = -1;
  2582  000102  0100               	movlb	0	; () banked
  2583  000104  69AF               	setf	main@meAtuadores& (0+255),b
  2584  000106                     
  2585                           ; BSR set to: 0
  2586                           ;main.c: 103:     char auxPasso = 0;
  2587  000106  0E00               	movlw	0
  2588  000108  6FBA               	movwf	main@auxPasso& (0+255),b
  2589  00010A                     
  2590                           ; BSR set to: 0
  2591                           ;main.c: 104:     char aux = 2;
  2592  00010A  0E02               	movlw	2
  2593  00010C  6F75               	movwf	main@aux& (0+255),b
  2594  00010E                     
  2595                           ; BSR set to: 0
  2596                           ;main.c: 105:     unsigned int num = 0;
  2597  00010E  0E00               	movlw	0
  2598  000110  6FB5               	movwf	(main@num+1)& (0+255),b
  2599  000112  0E00               	movlw	0
  2600  000114  6FB4               	movwf	main@num& (0+255),b
  2601  000116                     
  2602                           ; BSR set to: 0
  2603                           ;main.c: 106:     unsigned int ciclos = 0;
  2604  000116  0E00               	movlw	0
  2605  000118  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  2606  00011A  0E00               	movlw	0
  2607  00011C  6FB0               	movwf	main@ciclos& (0+255),b
  2608  00011E                     
  2609                           ; BSR set to: 0
  2610                           ;main.c: 107:     char botao = 0;
  2611  00011E  0E00               	movlw	0
  2612  000120  6FB3               	movwf	main@botao& (0+255),b
  2613  000122  EF47  F00D         	goto	l7139
  2614  000126                     l6405:
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 125:                             for(char i = 0; i <= 3; i++)
  2618  000126  0E00               	movlw	0
  2619  000128  6FA1               	movwf	main@i& (0+255),b
  2620  00012A                     l6407:
  2621                           
  2622                           ; BSR set to: 0
  2623  00012A  0E03               	movlw	3
  2624  00012C  65A1               	cpfsgt	main@i& (0+255),b
  2625  00012E  EF9B  F000         	goto	u4611
  2626  000132  EF9D  F000         	goto	u4610
  2627  000136                     u4611:
  2628  000136  EF9F  F000         	goto	l6411
  2629  00013A                     u4610:
  2630  00013A  EFCE  F000         	goto	l6429
  2631  00013E                     l6411:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 126:                             {;main.c: 127:                                
      +                           for(char j = 0; j <= 19; j++)
  2635  00013E  0E00               	movlw	0
  2636  000140  6FA2               	movwf	main@j& (0+255),b
  2637  000142                     l6413:
  2638                           
  2639                           ; BSR set to: 0
  2640  000142  0E13               	movlw	19
  2641  000144  65A2               	cpfsgt	main@j& (0+255),b
  2642  000146  EFA7  F000         	goto	u4621
  2643  00014A  EFA9  F000         	goto	u4620
  2644  00014E                     u4621:
  2645  00014E  EFAB  F000         	goto	l6417
  2646  000152                     u4620:
  2647  000152  EFCB  F000         	goto	l6425
  2648  000156                     l6417:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 128:                                 {;main.c: 129:                            
      +                                   IHM.printpos(i, j, "\377");
  2652  000156  EE20  F0E5         	lfsr	2,_IHM+4
  2653  00015A  D802               	call	u4638
  2654  00015C  EFC1  F000         	goto	u4639
  2655  000160                     u4638:
  2656  000160  0005               	push	
  2657  000162  6EFA               	movwf	pclath,c
  2658  000164  50DE               	movf	postinc2,w,c
  2659  000166  6EFD               	movwf	tosl,c
  2660  000168  50DE               	movf	postinc2,w,c
  2661  00016A  6EFE               	movwf	tosh,c
  2662  00016C  50F8               	movf	tblptru,w,c
  2663  00016E  6EFF               	movwf	tosu,c
  2664  000170  50FA               	movf	pclath,w,c
  2665  000172  C0A2  F038         	movff	main@j,dispLCD@col
  2666  000176  0EFD               	movlw	low STR_3
  2667  000178  6E39               	movwf	dispLCD@str^0,c
  2668  00017A  0E7F               	movlw	high STR_3
  2669  00017C  6E3A               	movwf	(dispLCD@str+1)^0,c
  2670  00017E  51A1               	movf	main@i& (0+255),w,b
  2671  000180  0012               	return		;indir
  2672  000182                     u4639:
  2673  000182                     
  2674                           ;main.c: 130:                                     delay(10);
  2675  000182  0E00               	movlw	0
  2676  000184  6E32               	movwf	(delay@t+1)^0,c
  2677  000186  0E0A               	movlw	10
  2678  000188  6E31               	movwf	delay@t^0,c
  2679  00018A  EC62  F01E         	call	_delay
  2680  00018E                     
  2681                           ;main.c: 131:                                 }
  2682  00018E  0100               	movlb	0	; () banked
  2683  000190  2BA2               	incf	main@j& (0+255),f,b
  2684  000192  EFA1  F000         	goto	l6413
  2685  000196                     l6425:
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 132:                             }
  2689  000196  2BA1               	incf	main@i& (0+255),f,b
  2690  000198  EF95  F000         	goto	l6407
  2691  00019C                     l6429:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 134:                             for(char i = 0; i <= 3; i++)
  2695  00019C  0E00               	movlw	0
  2696  00019E  6FA3               	movwf	main@i_903& (0+255),b
  2697  0001A0                     l6431:
  2698                           
  2699                           ; BSR set to: 0
  2700  0001A0  0E03               	movlw	3
  2701  0001A2  65A3               	cpfsgt	main@i_903& (0+255),b
  2702  0001A4  EFD6  F000         	goto	u4641
  2703  0001A8  EFD8  F000         	goto	u4640
  2704  0001AC                     u4641:
  2705  0001AC  EFDA  F000         	goto	l6435
  2706  0001B0                     u4640:
  2707  0001B0  EF09  F001         	goto	l6453
  2708  0001B4                     l6435:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;main.c: 135:                             {;main.c: 136:                                
      +                           for(char j = 0; j <= 19; j++)
  2712  0001B4  0E00               	movlw	0
  2713  0001B6  6FA4               	movwf	main@j_904& (0+255),b
  2714  0001B8                     l6437:
  2715                           
  2716                           ; BSR set to: 0
  2717  0001B8  0E13               	movlw	19
  2718  0001BA  65A4               	cpfsgt	main@j_904& (0+255),b
  2719  0001BC  EFE2  F000         	goto	u4651
  2720  0001C0  EFE4  F000         	goto	u4650
  2721  0001C4                     u4651:
  2722  0001C4  EFE6  F000         	goto	l6441
  2723  0001C8                     u4650:
  2724  0001C8  EF06  F001         	goto	l6449
  2725  0001CC                     l6441:
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;main.c: 137:                                 {;main.c: 138:                            
      +                                   IHM.printpos(i, j, " ");
  2729  0001CC  EE20  F0E5         	lfsr	2,_IHM+4
  2730  0001D0  D802               	call	u4668
  2731  0001D2  EFFC  F000         	goto	u4669
  2732  0001D6                     u4668:
  2733  0001D6  0005               	push	
  2734  0001D8  6EFA               	movwf	pclath,c
  2735  0001DA  50DE               	movf	postinc2,w,c
  2736  0001DC  6EFD               	movwf	tosl,c
  2737  0001DE  50DE               	movf	postinc2,w,c
  2738  0001E0  6EFE               	movwf	tosh,c
  2739  0001E2  50F8               	movf	tblptru,w,c
  2740  0001E4  6EFF               	movwf	tosu,c
  2741  0001E6  50FA               	movf	pclath,w,c
  2742  0001E8  C0A4  F038         	movff	main@j_904,dispLCD@col
  2743  0001EC  0EAA               	movlw	low (STR_26+19)
  2744  0001EE  6E39               	movwf	dispLCD@str^0,c
  2745  0001F0  0E7D               	movlw	high (STR_26+19)
  2746  0001F2  6E3A               	movwf	(dispLCD@str+1)^0,c
  2747  0001F4  51A3               	movf	main@i_903& (0+255),w,b
  2748  0001F6  0012               	return		;indir
  2749  0001F8                     u4669:
  2750  0001F8                     
  2751                           ;main.c: 139:                                     delay(10);
  2752  0001F8  0E00               	movlw	0
  2753  0001FA  6E32               	movwf	(delay@t+1)^0,c
  2754  0001FC  0E0A               	movlw	10
  2755  0001FE  6E31               	movwf	delay@t^0,c
  2756  000200  EC62  F01E         	call	_delay
  2757  000204                     
  2758                           ;main.c: 140:                                 }
  2759  000204  0100               	movlb	0	; () banked
  2760  000206  2BA4               	incf	main@j_904& (0+255),f,b
  2761  000208  EFDC  F000         	goto	l6437
  2762  00020C                     l6449:
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 141:                             }
  2766  00020C  2BA3               	incf	main@i_903& (0+255),f,b
  2767  00020E  EFD0  F000         	goto	l6431
  2768  000212                     l6453:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 142:                             estado = 1;
  2772  000212  0E01               	movlw	1
  2773  000214  6FBB               	movwf	main@estado& (0+255),b
  2774                           
  2775                           ;main.c: 143:                             break;
  2776  000216  EFED  F00D         	goto	l7141
  2777  00021A                     l6455:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;main.c: 146:                             IHM.printpos(1, 0, "      SEGGUIT       ");
  2781  00021A  EE20  F0E5         	lfsr	2,_IHM+4
  2782  00021E  D802               	call	u4678
  2783  000220  EF23  F001         	goto	u4679
  2784  000224                     u4678:
  2785  000224  0005               	push	
  2786  000226  6EFA               	movwf	pclath,c
  2787  000228  50DE               	movf	postinc2,w,c
  2788  00022A  6EFD               	movwf	tosl,c
  2789  00022C  50DE               	movf	postinc2,w,c
  2790  00022E  6EFE               	movwf	tosh,c
  2791  000230  50F8               	movf	tblptru,w,c
  2792  000232  6EFF               	movwf	tosu,c
  2793  000234  50FA               	movf	pclath,w,c
  2794  000236  0E00               	movlw	0
  2795  000238  6E38               	movwf	dispLCD@col^0,c
  2796  00023A  0ED6               	movlw	low STR_5
  2797  00023C  6E39               	movwf	dispLCD@str^0,c
  2798  00023E  0E7D               	movlw	high STR_5
  2799  000240  6E3A               	movwf	(dispLCD@str+1)^0,c
  2800  000242  0E01               	movlw	1
  2801  000244  0012               	return		;indir
  2802  000246                     u4679:
  2803  000246                     
  2804                           ;main.c: 148:                             char lema[20] = "Mundo ao seu comando";
  2805  000246  EE21  F032         	lfsr	2,main@F3513
  2806  00024A  EE10  F060         	lfsr	1,main@lema
  2807  00024E  0E13               	movlw	19
  2808  000250                     u4681:
  2809  000250  CFDB FFE3          	movff	plusw2,plusw1
  2810  000254  06E8               	decf	wreg,f,c
  2811  000256  E2FC               	bc	u4681
  2812  000258                     
  2813                           ;main.c: 149:                             char i = 0;
  2814  000258  0E00               	movlw	0
  2815  00025A  0100               	movlb	0	; () banked
  2816  00025C  6F9C               	movwf	main@i_909& (0+255),b
  2817  00025E                     
  2818                           ; BSR set to: 0
  2819                           ;main.c: 150:                             char *ptr;;main.c: 152:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  2820  00025E  0E60               	movlw	low main@lema
  2821  000260  6F9F               	movwf	main@ptr& (0+255),b
  2822  000262  0E00               	movlw	high main@lema
  2823  000264  6FA0               	movwf	(main@ptr+1)& (0+255),b
  2824  000266  EF4C  F001         	goto	l6473
  2825  00026A                     l6463:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;main.c: 153:                             {;main.c: 154:                                
      +                           dispLCD_lincol( 2, i );
  2829  00026A  C09C  F033         	movff	main@i_909,dispLCD_lincol@col
  2830  00026E  0E02               	movlw	2
  2831  000270  EC98  F01A         	call	_dispLCD_lincol
  2832  000274                     
  2833                           ;main.c: 155:                                 dispLCD_dataReg( *ptr );
  2834  000274  C09F  FFD9         	movff	main@ptr,fsr2l
  2835  000278  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2836  00027C  50DF               	movf	indf2,w,c
  2837  00027E  EC2B  F01C         	call	_dispLCD_dataReg
  2838  000282                     
  2839                           ;main.c: 156:                                 i++;
  2840  000282  0100               	movlb	0	; () banked
  2841  000284  2B9C               	incf	main@i_909& (0+255),f,b
  2842  000286                     
  2843                           ; BSR set to: 0
  2844                           ;main.c: 157:                                 delay(50);
  2845  000286  0E00               	movlw	0
  2846  000288  6E32               	movwf	(delay@t+1)^0,c
  2847  00028A  0E32               	movlw	50
  2848  00028C  6E31               	movwf	delay@t^0,c
  2849  00028E  EC62  F01E         	call	_delay	;wreg free
  2850  000292                     
  2851                           ;main.c: 158:                             }
  2852  000292  0100               	movlb	0	; () banked
  2853  000294  4B9F               	infsnz	main@ptr& (0+255),f,b
  2854  000296  2BA0               	incf	(main@ptr+1)& (0+255),f,b
  2855  000298                     l6473:
  2856                           
  2857                           ; BSR set to: 0
  2858  000298  C09F  FFD9         	movff	main@ptr,fsr2l
  2859  00029C  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2860  0002A0  50DF               	movf	indf2,w,c
  2861  0002A2  A4D8               	btfss	status,2,c
  2862  0002A4  EF56  F001         	goto	u4691
  2863  0002A8  EF58  F001         	goto	u4690
  2864  0002AC                     u4691:
  2865  0002AC  EF35  F001         	goto	l6463
  2866  0002B0                     u4690:
  2867  0002B0                     
  2868                           ; BSR set to: 0
  2869                           ;main.c: 160:                             setT1(1500);
  2870  0002B0  0EDC               	movlw	220
  2871  0002B2  6E37               	movwf	setT1@c^0,c
  2872  0002B4  0E05               	movlw	5
  2873  0002B6  6E38               	movwf	(setT1@c+1)^0,c
  2874  0002B8  0E00               	movlw	0
  2875  0002BA  6E39               	movwf	(setT1@c+2)^0,c
  2876  0002BC  0E00               	movlw	0
  2877  0002BE  6E3A               	movwf	(setT1@c+3)^0,c
  2878  0002C0  EC32  F01F         	call	_setT1	;wreg free
  2879  0002C4                     
  2880                           ;main.c: 161:                             estado = 2;
  2881  0002C4  0E02               	movlw	2
  2882  0002C6  0100               	movlb	0	; () banked
  2883  0002C8  6FBB               	movwf	main@estado& (0+255),b
  2884                           
  2885                           ;main.c: 162:                             break;
  2886  0002CA  EFED  F00D         	goto	l7141
  2887  0002CE                     l6479:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 165:                             if(!statusT1())
  2891  0002CE  EC64  F01F         	call	_statusT1	;wreg free
  2892  0002D2  5031               	movf	?_statusT1^0,w,c
  2893  0002D4  1032               	iorwf	(?_statusT1+1)^0,w,c
  2894  0002D6  1033               	iorwf	(?_statusT1+2)^0,w,c
  2895  0002D8  1034               	iorwf	(?_statusT1+3)^0,w,c
  2896  0002DA  A4D8               	btfss	status,2,c
  2897  0002DC  EF72  F001         	goto	u4701
  2898  0002E0  EF74  F001         	goto	u4700
  2899  0002E4                     u4701:
  2900  0002E4  EFED  F00D         	goto	l7141
  2901  0002E8                     u4700:
  2902  0002E8                     l6481:
  2903                           
  2904                           ;main.c: 166:                                 estado = 8;
  2905  0002E8  0E08               	movlw	8
  2906  0002EA  0100               	movlb	0	; () banked
  2907  0002EC  6FBB               	movwf	main@estado& (0+255),b
  2908  0002EE  EFED  F00D         	goto	l7141
  2909  0002F2                     l6483:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 185:                             init_atuadores();
  2913  0002F2  EC98  F01F         	call	_init_atuadores	;wreg free
  2914  0002F6                     
  2915                           ;main.c: 186:                             IHM.print("1: INSERIR SEQUENCIA\n"
  2916  0002F6  0EDD               	movlw	low STR_6
  2917  0002F8  6E38               	movwf	dispLCD_str@str^0,c
  2918  0002FA  0E7B               	movlw	high STR_6
  2919  0002FC  6E39               	movwf	(dispLCD_str@str+1)^0,c
  2920  0002FE  EE20  F0E3         	lfsr	2,_IHM+2
  2921  000302  D802               	call	u4718
  2922  000304  EF8E  F001         	goto	u4719
  2923  000308                     u4718:
  2924  000308  0005               	push	
  2925  00030A  6EFA               	movwf	pclath,c
  2926  00030C  50DE               	movf	postinc2,w,c
  2927  00030E  6EFD               	movwf	tosl,c
  2928  000310  50DE               	movf	postinc2,w,c
  2929  000312  6EFE               	movwf	tosh,c
  2930  000314  50F8               	movf	tblptru,w,c
  2931  000316  6EFF               	movwf	tosu,c
  2932  000318  50FA               	movf	pclath,w,c
  2933  00031A  0012               	return		;indir
  2934  00031C                     u4719:
  2935  00031C                     
  2936                           ;main.c: 190:                             setT1(1000);
  2937  00031C  0EE8               	movlw	232
  2938  00031E  6E37               	movwf	setT1@c^0,c
  2939  000320  0E03               	movlw	3
  2940  000322  6E38               	movwf	(setT1@c+1)^0,c
  2941  000324  0E00               	movlw	0
  2942  000326  6E39               	movwf	(setT1@c+2)^0,c
  2943  000328  0E00               	movlw	0
  2944  00032A  6E3A               	movwf	(setT1@c+3)^0,c
  2945  00032C  EC32  F01F         	call	_setT1	;wreg free
  2946  000330                     
  2947                           ;main.c: 191:                             estado = 9;
  2948  000330  0E09               	movlw	9
  2949  000332  0100               	movlb	0	; () banked
  2950  000334  6FBB               	movwf	main@estado& (0+255),b
  2951                           
  2952                           ;main.c: 192:                             break;
  2953  000336  EFED  F00D         	goto	l7141
  2954  00033A                     l6491:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;main.c: 195:                             if(!statusT1())
  2958  00033A  EC64  F01F         	call	_statusT1	;wreg free
  2959  00033E  5031               	movf	?_statusT1^0,w,c
  2960  000340  1032               	iorwf	(?_statusT1+1)^0,w,c
  2961  000342  1033               	iorwf	(?_statusT1+2)^0,w,c
  2962  000344  1034               	iorwf	(?_statusT1+3)^0,w,c
  2963  000346  A4D8               	btfss	status,2,c
  2964  000348  EFA8  F001         	goto	u4721
  2965  00034C  EFAA  F001         	goto	u4720
  2966  000350                     u4721:
  2967  000350  EFED  F00D         	goto	l7141
  2968  000354                     u4720:
  2969  000354                     
  2970                           ;main.c: 196:                                 estado = 71;
  2971  000354  0E47               	movlw	71
  2972  000356  0100               	movlb	0	; () banked
  2973  000358  6FBB               	movwf	main@estado& (0+255),b
  2974  00035A  EFED  F00D         	goto	l7141
  2975  00035E                     l6495:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 200:                             tecla = teclado_borda();
  2979  00035E  ECB7  F01D         	call	_teclado_borda	;wreg free
  2980  000362  0100               	movlb	0	; () banked
  2981  000364  6FBC               	movwf	main@tecla& (0+255),b
  2982                           
  2983                           ;main.c: 201:                             switch(tecla)
  2984  000366  EFC7  F001         	goto	l6507
  2985  00036A                     l6497:
  2986  00036A  0E03               	movlw	3
  2987  00036C  0100               	movlb	0	; () banked
  2988  00036E  6FBB               	movwf	main@estado& (0+255),b
  2989  000370  EFED  F00D         	goto	l7141
  2990  000374                     l6499:
  2991                           
  2992                           ; BSR set to: 0
  2993  000374  0E48               	movlw	72
  2994  000376  6FBB               	movwf	main@estado& (0+255),b
  2995  000378  EFED  F00D         	goto	l7141
  2996  00037C                     l6501:
  2997                           
  2998                           ; BSR set to: 0
  2999  00037C  0E64               	movlw	100
  3000  00037E  6FBB               	movwf	main@estado& (0+255),b
  3001  000380  EFED  F00D         	goto	l7141
  3002  000384                     l6503:
  3003  000384  0E50               	movlw	80
  3004  000386  0100               	movlb	0	; () banked
  3005  000388  6FBB               	movwf	main@estado& (0+255),b
  3006  00038A  EFED  F00D         	goto	l7141
  3007  00038E                     l6507:
  3008                           
  3009                           ; BSR set to: 0
  3010  00038E  51BC               	movf	main@tecla& (0+255),w,b
  3011  000390  6E59               	movwf	??_main^0,c
  3012  000392  6A5A               	clrf	(??_main+1)^0,c
  3013                           
  3014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3015                           ; Switch size 1, requested type "simple"
  3016                           ; Number of cases is 1, Range of values is 0 to 0
  3017                           ; switch strategies available:
  3018                           ; Name         Instructions Cycles
  3019                           ; simple_byte            4     3 (average)
  3020                           ;	Chosen strategy is simple_byte
  3021  000394  505A               	movf	(??_main+1)^0,w,c
  3022  000396  0A00               	xorlw	0	; case 0
  3023  000398  B4D8               	btfsc	status,2,c
  3024  00039A  EFD1  F001         	goto	l7983
  3025  00039E  EFED  F00D         	goto	l7141
  3026  0003A2                     l7983:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ; Switch size 1, requested type "simple"
  3030                           ; Number of cases is 4, Range of values is 49 to 52
  3031                           ; switch strategies available:
  3032                           ; Name         Instructions Cycles
  3033                           ; simple_byte           13     7 (average)
  3034                           ;	Chosen strategy is simple_byte
  3035  0003A2  5059               	movf	??_main^0,w,c
  3036  0003A4  0A31               	xorlw	49	; case 49
  3037  0003A6  B4D8               	btfsc	status,2,c
  3038  0003A8  EFB5  F001         	goto	l6497
  3039  0003AC  0A03               	xorlw	3	; case 50
  3040  0003AE  B4D8               	btfsc	status,2,c
  3041  0003B0  EFBA  F001         	goto	l6499
  3042  0003B4  0A01               	xorlw	1	; case 51
  3043  0003B6  B4D8               	btfsc	status,2,c
  3044  0003B8  EFBE  F001         	goto	l6501
  3045  0003BC  0A07               	xorlw	7	; case 52
  3046  0003BE  B4D8               	btfsc	status,2,c
  3047  0003C0  EFC2  F001         	goto	l6503
  3048  0003C4  EFED  F00D         	goto	l7141
  3049  0003C8                     l6509:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;main.c: 212:                             buscar_dado(10, 10, &init_cond);
  3053  0003C8  0E0A               	movlw	10
  3054  0003CA  6E37               	movwf	buscar_dado@col^0,c
  3055  0003CC  0EB2               	movlw	low main@init_cond
  3056  0003CE  6E38               	movwf	buscar_dado@data^0,c
  3057  0003D0  0E00               	movlw	high main@init_cond
  3058  0003D2  6E39               	movwf	(buscar_dado@data+1)^0,c
  3059  0003D4  0E0A               	movlw	10
  3060  0003D6  EC8F  F01E         	call	_buscar_dado
  3061  0003DA                     
  3062                           ;main.c: 213:                             manipula_atuadores_init(init_cond);
  3063  0003DA  0100               	movlb	0	; () banked
  3064  0003DC  51B2               	movf	main@init_cond& (0+255),w,b
  3065  0003DE  EC03  F01C         	call	_manipula_atuadores_init
  3066  0003E2                     
  3067                           ;main.c: 215:                             EEPROM.buscar(11, vetor_aux);
  3068  0003E2  EE20  F0ED         	lfsr	2,_EEPROM+2
  3069  0003E6  D802               	call	u4738
  3070  0003E8  EF05  F002         	goto	u4739
  3071  0003EC                     u4738:
  3072  0003EC  0005               	push	
  3073  0003EE  6EFA               	movwf	pclath,c
  3074  0003F0  50DE               	movf	postinc2,w,c
  3075  0003F2  6EFD               	movwf	tosl,c
  3076  0003F4  50DE               	movf	postinc2,w,c
  3077  0003F6  6EFE               	movwf	tosh,c
  3078  0003F8  50F8               	movf	tblptru,w,c
  3079  0003FA  6EFF               	movwf	tosu,c
  3080  0003FC  50FA               	movf	pclath,w,c
  3081  0003FE  0E76               	movlw	low main@vetor_aux
  3082  000400  6E37               	movwf	buscar_receita@data^0,c
  3083  000402  0E00               	movlw	high main@vetor_aux
  3084  000404  6E38               	movwf	(buscar_receita@data+1)^0,c
  3085  000406  0E0B               	movlw	11
  3086  000408  0012               	return		;indir
  3087  00040A                     u4739:
  3088  00040A                     
  3089                           ;main.c: 216:                             pt = vetor_aux;
  3090  00040A  0E76               	movlw	low main@vetor_aux
  3091  00040C  0100               	movlb	0	; () banked
  3092  00040E  6F9D               	movwf	main@pt& (0+255),b
  3093  000410  0E00               	movlw	high main@vetor_aux
  3094  000412  6F9E               	movwf	(main@pt+1)& (0+255),b
  3095  000414                     
  3096                           ; BSR set to: 0
  3097                           ;main.c: 218:                             if(*pt == 0xFF)
  3098  000414  C09D  FFD9         	movff	main@pt,fsr2l
  3099  000418  C09E  FFDA         	movff	main@pt+1,fsr2h
  3100  00041C  28DE               	incf	postinc2,w,c
  3101  00041E  A4D8               	btfss	status,2,c
  3102  000420  EF14  F002         	goto	u4741
  3103  000424  EF16  F002         	goto	u4740
  3104  000428                     u4741:
  3105  000428  EF32  F002         	goto	l6523
  3106  00042C                     u4740:
  3107  00042C                     
  3108                           ; BSR set to: 0
  3109                           ;main.c: 219:                             {;main.c: 220:                                
      +                           EEPROM.deletar(tecla % 0x30);
  3110  00042C  EE20  F0EF         	lfsr	2,_EEPROM+4
  3111  000430  D802               	call	u4758
  3112  000432  EF2F  F002         	goto	u4759
  3113  000436                     u4758:
  3114  000436  0005               	push	
  3115  000438  6EFA               	movwf	pclath,c
  3116  00043A  50DE               	movf	postinc2,w,c
  3117  00043C  6EFD               	movwf	tosl,c
  3118  00043E  50DE               	movf	postinc2,w,c
  3119  000440  6EFE               	movwf	tosh,c
  3120  000442  50F8               	movf	tblptru,w,c
  3121  000444  6EFF               	movwf	tosu,c
  3122  000446  50FA               	movf	pclath,w,c
  3123  000448  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3124  00044C  6A32               	clrf	(___awmod@dividend+1)^0,c
  3125  00044E  0E00               	movlw	0
  3126  000450  6E34               	movwf	(___awmod@divisor+1)^0,c
  3127  000452  0E30               	movlw	48
  3128  000454  6E33               	movwf	___awmod@divisor^0,c
  3129  000456  ECDC  F016         	call	___awmod
  3130  00045A  5031               	movf	?___awmod^0,w,c
  3131  00045C  0012               	return		;indir
  3132  00045E                     u4759:
  3133  00045E                     
  3134                           ;main.c: 221:                                 vetor_aux[0] = 0;
  3135  00045E  0E00               	movlw	0
  3136  000460  0100               	movlb	0	; () banked
  3137  000462  6F76               	movwf	main@vetor_aux& (0+255),b
  3138  000464                     l6523:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 225:                             for(char *ptr = vetor_aux; *ptr != 0; ptr++)
  3142  000464  0E76               	movlw	low main@vetor_aux
  3143  000466  6FB6               	movwf	main@ptr_915& (0+255),b
  3144  000468  0E00               	movlw	high main@vetor_aux
  3145  00046A  6FB7               	movwf	(main@ptr_915+1)& (0+255),b
  3146  00046C  EFFF  F002         	goto	l6557
  3147  000470                     l6525:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 226:                             {;main.c: 227:                                
      +                           if(*ptr <= 0x64 || *ptr == 0xFE)
  3151  000470  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3152  000474  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3153  000478  0E64               	movlw	100
  3154  00047A  64DF               	cpfsgt	indf2,c
  3155  00047C  EF42  F002         	goto	u4761
  3156  000480  EF44  F002         	goto	u4760
  3157  000484                     u4761:
  3158  000484  EF51  F002         	goto	l6529
  3159  000488                     u4760:
  3160  000488                     
  3161                           ; BSR set to: 0
  3162  000488  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3163  00048C  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3164  000490  0EFE               	movlw	254
  3165  000492  18DE               	xorwf	postinc2,w,c
  3166  000494  A4D8               	btfss	status,2,c
  3167  000496  EF4F  F002         	goto	u4771
  3168  00049A  EF51  F002         	goto	u4770
  3169  00049E                     u4771:
  3170  00049E  EF60  F002         	goto	l6531
  3171  0004A2                     u4770:
  3172  0004A2                     l6529:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 228:                                 {;main.c: 229:                            
      +                                   decodifica(&*ptr);
  3176  0004A2  C0B6  F031         	movff	main@ptr_915,decodifica@d
  3177  0004A6  C0B7  F032         	movff	main@ptr_915+1,decodifica@d+1
  3178  0004AA  ECE7  F012         	call	_decodifica
  3179                           
  3180                           ;main.c: 230:                                     fifo_add_control(*ptr);
  3181  0004AE  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3182  0004B2  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3183  0004B6  50DF               	movf	indf2,w,c
  3184  0004B8  EC52  F01C         	call	_fifo_add_control
  3185                           
  3186                           ;main.c: 231:                                 }
  3187  0004BC  EFFA  F002         	goto	l6553
  3188  0004C0                     l6531:
  3189                           
  3190                           ; BSR set to: 0
  3191  0004C0  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3192  0004C4  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3193  0004C8  0E64               	movlw	100
  3194  0004CA  64DF               	cpfsgt	indf2,c
  3195  0004CC  EF6A  F002         	goto	u4781
  3196  0004D0  EF6C  F002         	goto	u4780
  3197  0004D4                     u4781:
  3198  0004D4  EF87  F002         	goto	l6537
  3199  0004D8                     u4780:
  3200  0004D8                     
  3201                           ; BSR set to: 0
  3202  0004D8  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3203  0004DC  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3204  0004E0  0EDD               	movlw	221
  3205  0004E2  60DF               	cpfslt	indf2,c
  3206  0004E4  EF76  F002         	goto	u4791
  3207  0004E8  EF78  F002         	goto	u4790
  3208  0004EC                     u4791:
  3209  0004EC  EF87  F002         	goto	l6537
  3210  0004F0                     u4790:
  3211  0004F0                     
  3212                           ; BSR set to: 0
  3213                           ;main.c: 233:                                 {;main.c: 234:                            
      +                                   decodifica(&*ptr);
  3214  0004F0  C0B6  F031         	movff	main@ptr_915,decodifica@d
  3215  0004F4  C0B7  F032         	movff	main@ptr_915+1,decodifica@d+1
  3216  0004F8  ECE7  F012         	call	_decodifica	;wreg free
  3217                           
  3218                           ;main.c: 235:                                     fifo_add_tempo(*ptr);
  3219  0004FC  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3220  000500  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3221  000504  50DF               	movf	indf2,w,c
  3222  000506  EC80  F01B         	call	_fifo_add_tempo
  3223                           
  3224                           ;main.c: 236:                                 }
  3225  00050A  EFFA  F002         	goto	l6553
  3226  00050E                     l6537:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;main.c: 238:                                 {;main.c: 239:                            
      +                                   decodifica(&*ptr);
  3230  00050E  C0B6  F031         	movff	main@ptr_915,decodifica@d
  3231  000512  C0B7  F032         	movff	main@ptr_915+1,decodifica@d+1
  3232  000516  ECE7  F012         	call	_decodifica	;wreg free
  3233                           
  3234                           ;main.c: 240:                                     switch( *ptr )
  3235  00051A  EF97  F002         	goto	l6543
  3236  00051E                     l664:
  3237  00051E                     l6539:
  3238                           
  3239                           ;main.c: 250:                                                 *ptr &= ~0x20;
  3240  00051E  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3241  000522  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3242  000526  0EDF               	movlw	223
  3243  000528  16DF               	andwf	indf2,f,c
  3244                           
  3245                           ;main.c: 251:                                                 break;
  3246  00052A  EFC8  F002         	goto	l6545
  3247  00052E                     l6543:
  3248  00052E  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3249  000532  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3250  000536  50DF               	movf	indf2,w,c
  3251  000538  6E59               	movwf	??_main^0,c
  3252  00053A  6A5A               	clrf	(??_main+1)^0,c
  3253                           
  3254                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3255                           ; Switch size 1, requested type "simple"
  3256                           ; Number of cases is 1, Range of values is 0 to 0
  3257                           ; switch strategies available:
  3258                           ; Name         Instructions Cycles
  3259                           ; simple_byte            4     3 (average)
  3260                           ;	Chosen strategy is simple_byte
  3261  00053C  505A               	movf	(??_main+1)^0,w,c
  3262  00053E  0A00               	xorlw	0	; case 0
  3263  000540  B4D8               	btfsc	status,2,c
  3264  000542  EFA5  F002         	goto	l7985
  3265  000546  EFC8  F002         	goto	l6545
  3266  00054A                     l7985:
  3267                           
  3268                           ; Switch size 1, requested type "simple"
  3269                           ; Number of cases is 8, Range of values is 65 to 100
  3270                           ; switch strategies available:
  3271                           ; Name         Instructions Cycles
  3272                           ; simple_byte           25    13 (average)
  3273                           ;	Chosen strategy is simple_byte
  3274  00054A  5059               	movf	??_main^0,w,c
  3275  00054C  0A41               	xorlw	65	; case 65
  3276  00054E  B4D8               	btfsc	status,2,c
  3277  000550  EF8F  F002         	goto	l664
  3278  000554  0A03               	xorlw	3	; case 66
  3279  000556  B4D8               	btfsc	status,2,c
  3280  000558  EF8F  F002         	goto	l6539
  3281  00055C  0A01               	xorlw	1	; case 67
  3282  00055E  B4D8               	btfsc	status,2,c
  3283  000560  EF8F  F002         	goto	l6539
  3284  000564  0A07               	xorlw	7	; case 68
  3285  000566  B4D8               	btfsc	status,2,c
  3286  000568  EF8F  F002         	goto	l6539
  3287  00056C  0A25               	xorlw	37	; case 97
  3288  00056E  B4D8               	btfsc	status,2,c
  3289  000570  EF8F  F002         	goto	l6539
  3290  000574  0A03               	xorlw	3	; case 98
  3291  000576  B4D8               	btfsc	status,2,c
  3292  000578  EF8F  F002         	goto	l6539
  3293  00057C  0A01               	xorlw	1	; case 99
  3294  00057E  B4D8               	btfsc	status,2,c
  3295  000580  EF8F  F002         	goto	l6539
  3296  000584  0A07               	xorlw	7	; case 100
  3297  000586  B4D8               	btfsc	status,2,c
  3298  000588  EF8F  F002         	goto	l6539
  3299  00058C  EFC8  F002         	goto	l6545
  3300  000590                     l6545:
  3301                           
  3302                           ;main.c: 253:                                         alt_atuador(*ptr);
  3303  000590  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3304  000594  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3305  000598  50DF               	movf	indf2,w,c
  3306  00059A  ECD5  F018         	call	_alt_atuador
  3307                           
  3308                           ;main.c: 254:                                         fifo_add( ler_atuador(*ptr) ? *ptr
      +                           : *ptr|0x20 );
  3309  00059E  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3310  0005A2  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3311  0005A6  50DF               	movf	indf2,w,c
  3312  0005A8  EC85  F018         	call	_ler_atuador
  3313  0005AC  0900               	iorlw	0
  3314  0005AE  A4D8               	btfss	status,2,c
  3315  0005B0  EFDC  F002         	goto	u4801
  3316  0005B4  EFDE  F002         	goto	u4800
  3317  0005B8                     u4801:
  3318  0005B8  EFED  F002         	goto	l6549
  3319  0005BC                     u4800:
  3320  0005BC  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3321  0005C0  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3322  0005C4  50DF               	movf	indf2,w,c
  3323  0005C6  6E59               	movwf	??_main^0,c
  3324  0005C8  6A5A               	clrf	(??_main+1)^0,c
  3325  0005CA  0E20               	movlw	32
  3326  0005CC  1059               	iorwf	??_main^0,w,c
  3327  0005CE  0100               	movlb	0	; () banked
  3328  0005D0  6F86               	movwf	_main$919& (0+255),b
  3329  0005D2  505A               	movf	(??_main+1)^0,w,c
  3330  0005D4  6F87               	movwf	(_main$919+1)& (0+255),b
  3331  0005D6  EFF7  F002         	goto	l6551
  3332  0005DA                     l6549:
  3333  0005DA  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3334  0005DE  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3335  0005E2  50DF               	movf	indf2,w,c
  3336  0005E4  6E59               	movwf	??_main^0,c
  3337  0005E6  5059               	movf	??_main^0,w,c
  3338  0005E8  0100               	movlb	0	; () banked
  3339  0005EA  6F86               	movwf	_main$919& (0+255),b
  3340  0005EC  6B87               	clrf	(_main$919+1)& (0+255),b
  3341  0005EE                     l6551:
  3342                           
  3343                           ; BSR set to: 0
  3344  0005EE  5186               	movf	_main$919& (0+255),w,b
  3345  0005F0  ECAC  F01B         	call	_fifo_add
  3346  0005F4                     l6553:
  3347                           
  3348                           ;main.c: 256:                                 fifo_print();
  3349  0005F4  EC49  F00F         	call	_fifo_print	;wreg free
  3350  0005F8                     
  3351                           ;main.c: 257:                             }
  3352  0005F8  0100               	movlb	0	; () banked
  3353  0005FA  4BB6               	infsnz	main@ptr_915& (0+255),f,b
  3354  0005FC  2BB7               	incf	(main@ptr_915+1)& (0+255),f,b
  3355  0005FE                     l6557:
  3356                           
  3357                           ; BSR set to: 0
  3358  0005FE  C0B6  FFD9         	movff	main@ptr_915,fsr2l
  3359  000602  C0B7  FFDA         	movff	main@ptr_915+1,fsr2h
  3360  000606  50DF               	movf	indf2,w,c
  3361  000608  A4D8               	btfss	status,2,c
  3362  00060A  EF09  F003         	goto	u4811
  3363  00060E  EF0B  F003         	goto	u4810
  3364  000612                     u4811:
  3365  000612  EF38  F002         	goto	l6525
  3366  000616                     u4810:
  3367  000616                     l6559:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 259:                             dispLCD_clr();
  3371  000616  ECAC  F01F         	call	_dispLCD_clr	;wreg free
  3372  00061A                     l6561:
  3373                           
  3374                           ;main.c: 260:                             estado = 16;
  3375  00061A  0E10               	movlw	16
  3376  00061C  0100               	movlb	0	; () banked
  3377  00061E  6FBB               	movwf	main@estado& (0+255),b
  3378                           
  3379                           ;main.c: 261:                             break;
  3380  000620  EFED  F00D         	goto	l7141
  3381  000624                     l6563:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 264:                             dispLCD_clr();
  3385  000624  ECAC  F01F         	call	_dispLCD_clr	;wreg free
  3386  000628                     
  3387                           ;main.c: 265:                             dispLCD(0,0,"1: VERIFICAR MEMORIA");
  3388  000628  0E00               	movlw	0
  3389  00062A  6E38               	movwf	dispLCD@col^0,c
  3390  00062C  0E11               	movlw	low STR_7
  3391  00062E  6E39               	movwf	dispLCD@str^0,c
  3392  000630  0E7F               	movlw	high STR_7
  3393  000632  6E3A               	movwf	(dispLCD@str+1)^0,c
  3394  000634  0E00               	movlw	0
  3395  000636  EC76  F01C         	call	_dispLCD
  3396  00063A                     
  3397                           ;main.c: 266:                             dispLCD(1,0,"2: LIMPAR MEMORIA   ");
  3398  00063A  0E00               	movlw	0
  3399  00063C  6E38               	movwf	dispLCD@col^0,c
  3400  00063E  0E93               	movlw	low STR_8
  3401  000640  6E39               	movwf	dispLCD@str^0,c
  3402  000642  0E7E               	movlw	high STR_8
  3403  000644  6E3A               	movwf	(dispLCD@str+1)^0,c
  3404  000646  0E01               	movlw	1
  3405  000648  EC76  F01C         	call	_dispLCD
  3406  00064C                     
  3407                           ;main.c: 268:                             setT1(1000);
  3408  00064C  0EE8               	movlw	232
  3409  00064E  6E37               	movwf	setT1@c^0,c
  3410  000650  0E03               	movlw	3
  3411  000652  6E38               	movwf	(setT1@c+1)^0,c
  3412  000654  0E00               	movlw	0
  3413  000656  6E39               	movwf	(setT1@c+2)^0,c
  3414  000658  0E00               	movlw	0
  3415  00065A  6E3A               	movwf	(setT1@c+3)^0,c
  3416  00065C  EC32  F01F         	call	_setT1	;wreg free
  3417  000660                     
  3418                           ;main.c: 269:                             estado = 81;
  3419  000660  0E51               	movlw	81
  3420  000662  0100               	movlb	0	; () banked
  3421  000664  6FBB               	movwf	main@estado& (0+255),b
  3422                           
  3423                           ;main.c: 270:                             break;
  3424  000666  EFED  F00D         	goto	l7141
  3425  00066A                     l6573:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;main.c: 273:                             if(!statusT1())
  3429  00066A  EC64  F01F         	call	_statusT1	;wreg free
  3430  00066E  5031               	movf	?_statusT1^0,w,c
  3431  000670  1032               	iorwf	(?_statusT1+1)^0,w,c
  3432  000672  1033               	iorwf	(?_statusT1+2)^0,w,c
  3433  000674  1034               	iorwf	(?_statusT1+3)^0,w,c
  3434  000676  A4D8               	btfss	status,2,c
  3435  000678  EF40  F003         	goto	u4821
  3436  00067C  EF42  F003         	goto	u4820
  3437  000680                     u4821:
  3438  000680  EFED  F00D         	goto	l7141
  3439  000684                     u4820:
  3440  000684                     
  3441                           ;main.c: 274:                                 estado = 82;
  3442  000684  0E52               	movlw	82
  3443  000686  0100               	movlb	0	; () banked
  3444  000688  6FBB               	movwf	main@estado& (0+255),b
  3445  00068A  EFED  F00D         	goto	l7141
  3446  00068E                     l6577:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;main.c: 278:                             tecla = teclado_borda();
  3450  00068E  ECB7  F01D         	call	_teclado_borda	;wreg free
  3451  000692  0100               	movlb	0	; () banked
  3452  000694  6FBC               	movwf	main@tecla& (0+255),b
  3453                           
  3454                           ;main.c: 279:                             switch(tecla)
  3455  000696  EF55  F003         	goto	l6587
  3456  00069A                     l6579:
  3457                           
  3458                           ; BSR set to: 0
  3459  00069A  0E53               	movlw	83
  3460  00069C  6FBB               	movwf	main@estado& (0+255),b
  3461  00069E  EFED  F00D         	goto	l7141
  3462  0006A2                     l6581:
  3463                           
  3464                           ; BSR set to: 0
  3465  0006A2  0E54               	movlw	84
  3466  0006A4  6FBB               	movwf	main@estado& (0+255),b
  3467  0006A6  EFED  F00D         	goto	l7141
  3468  0006AA                     l6587:
  3469                           
  3470                           ; BSR set to: 0
  3471  0006AA  51BC               	movf	main@tecla& (0+255),w,b
  3472  0006AC  6E59               	movwf	??_main^0,c
  3473  0006AE  6A5A               	clrf	(??_main+1)^0,c
  3474                           
  3475                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3476                           ; Switch size 1, requested type "simple"
  3477                           ; Number of cases is 1, Range of values is 0 to 0
  3478                           ; switch strategies available:
  3479                           ; Name         Instructions Cycles
  3480                           ; simple_byte            4     3 (average)
  3481                           ;	Chosen strategy is simple_byte
  3482  0006B0  505A               	movf	(??_main+1)^0,w,c
  3483  0006B2  0A00               	xorlw	0	; case 0
  3484  0006B4  B4D8               	btfsc	status,2,c
  3485  0006B6  EF5F  F003         	goto	l7987
  3486  0006BA  EFED  F00D         	goto	l7141
  3487  0006BE                     l7987:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ; Switch size 1, requested type "simple"
  3491                           ; Number of cases is 3, Range of values is 42 to 50
  3492                           ; switch strategies available:
  3493                           ; Name         Instructions Cycles
  3494                           ; simple_byte           10     6 (average)
  3495                           ;	Chosen strategy is simple_byte
  3496  0006BE  5059               	movf	??_main^0,w,c
  3497  0006C0  0A2A               	xorlw	42	; case 42
  3498  0006C2  B4D8               	btfsc	status,2,c
  3499  0006C4  EF74  F001         	goto	l6481
  3500  0006C8  0A1B               	xorlw	27	; case 49
  3501  0006CA  B4D8               	btfsc	status,2,c
  3502  0006CC  EF4D  F003         	goto	l6579
  3503  0006D0  0A03               	xorlw	3	; case 50
  3504  0006D2  B4D8               	btfsc	status,2,c
  3505  0006D4  EF51  F003         	goto	l6581
  3506  0006D8  EFED  F00D         	goto	l7141
  3507  0006DC                     l6589:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 288:                             dispLCD(0, 0, " CERTEZA QUE DESEJA ");
  3511  0006DC  0E00               	movlw	0
  3512  0006DE  6E38               	movwf	dispLCD@col^0,c
  3513  0006E0  0EE7               	movlw	low STR_9
  3514  0006E2  6E39               	movwf	dispLCD@str^0,c
  3515  0006E4  0E7E               	movlw	high STR_9
  3516  0006E6  6E3A               	movwf	(dispLCD@str+1)^0,c
  3517  0006E8  0E00               	movlw	0
  3518  0006EA  EC76  F01C         	call	_dispLCD
  3519                           
  3520                           ;main.c: 289:                             dispLCD(1, 0, "   DELETAR TODA A   ");
  3521  0006EE  0E00               	movlw	0
  3522  0006F0  6E38               	movwf	dispLCD@col^0,c
  3523  0006F2  0E7E               	movlw	low STR_10
  3524  0006F4  6E39               	movwf	dispLCD@str^0,c
  3525  0006F6  0E7E               	movlw	high STR_10
  3526  0006F8  6E3A               	movwf	(dispLCD@str+1)^0,c
  3527  0006FA  0E01               	movlw	1
  3528  0006FC  EC76  F01C         	call	_dispLCD
  3529                           
  3530                           ;main.c: 290:                             dispLCD(2, 0, "      MEMORIA ?     ");
  3531  000700  0E00               	movlw	0
  3532  000702  6E38               	movwf	dispLCD@col^0,c
  3533  000704  0E2A               	movlw	low STR_11
  3534  000706  6E39               	movwf	dispLCD@str^0,c
  3535  000708  0E7E               	movlw	high STR_11
  3536  00070A  6E3A               	movwf	(dispLCD@str+1)^0,c
  3537  00070C  0E02               	movlw	2
  3538  00070E  EC76  F01C         	call	_dispLCD
  3539                           
  3540                           ;main.c: 291:                             dispLCD(3, 0, "# - SIM      * - NAO");
  3541  000712  0E00               	movlw	0
  3542  000714  6E38               	movwf	dispLCD@col^0,c
  3543  000716  0EF8               	movlw	low (STR_28+41)
  3544  000718  6E39               	movwf	dispLCD@str^0,c
  3545  00071A  0E7C               	movlw	high (STR_28+41)
  3546  00071C  6E3A               	movwf	(dispLCD@str+1)^0,c
  3547  00071E  0E03               	movlw	3
  3548  000720  EC76  F01C         	call	_dispLCD
  3549  000724                     
  3550                           ;main.c: 293:                             tecla = teclado_borda();
  3551  000724  ECB7  F01D         	call	_teclado_borda	;wreg free
  3552  000728  0100               	movlb	0	; () banked
  3553  00072A  6FBC               	movwf	main@tecla& (0+255),b
  3554                           
  3555                           ;main.c: 294:                             switch(tecla)
  3556  00072C  EFA0  F003         	goto	l6601
  3557  000730                     l6593:
  3558                           
  3559                           ; BSR set to: 0
  3560  000730  0E55               	movlw	85
  3561  000732  6FBB               	movwf	main@estado& (0+255),b
  3562  000734  EFED  F00D         	goto	l7141
  3563  000738                     l6595:
  3564                           
  3565                           ; BSR set to: 0
  3566  000738  ECAC  F01F         	call	_dispLCD_clr	;wreg free
  3567  00073C  EFC2  F001         	goto	l6503
  3568  000740                     l6601:
  3569                           
  3570                           ; BSR set to: 0
  3571  000740  51BC               	movf	main@tecla& (0+255),w,b
  3572  000742  6E59               	movwf	??_main^0,c
  3573  000744  6A5A               	clrf	(??_main+1)^0,c
  3574                           
  3575                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3576                           ; Switch size 1, requested type "simple"
  3577                           ; Number of cases is 1, Range of values is 0 to 0
  3578                           ; switch strategies available:
  3579                           ; Name         Instructions Cycles
  3580                           ; simple_byte            4     3 (average)
  3581                           ;	Chosen strategy is simple_byte
  3582  000746  505A               	movf	(??_main+1)^0,w,c
  3583  000748  0A00               	xorlw	0	; case 0
  3584  00074A  B4D8               	btfsc	status,2,c
  3585  00074C  EFAA  F003         	goto	l7989
  3586  000750  EFED  F00D         	goto	l7141
  3587  000754                     l7989:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ; Switch size 1, requested type "simple"
  3591                           ; Number of cases is 2, Range of values is 35 to 42
  3592                           ; switch strategies available:
  3593                           ; Name         Instructions Cycles
  3594                           ; simple_byte            7     4 (average)
  3595                           ;	Chosen strategy is simple_byte
  3596  000754  5059               	movf	??_main^0,w,c
  3597  000756  0A23               	xorlw	35	; case 35
  3598  000758  B4D8               	btfsc	status,2,c
  3599  00075A  EF98  F003         	goto	l6593
  3600  00075E  0A09               	xorlw	9	; case 42
  3601  000760  B4D8               	btfsc	status,2,c
  3602  000762  EF9C  F003         	goto	l6595
  3603  000766  EFED  F00D         	goto	l7141
  3604  00076A                     l6603:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;main.c: 303:                             EEPROM.formatar();
  3608  00076A  EE20  F0F3         	lfsr	2,_EEPROM+8
  3609  00076E  D802               	call	u4838
  3610  000770  EFC4  F003         	goto	u4839
  3611  000774                     u4838:
  3612  000774  0005               	push	
  3613  000776  6EFA               	movwf	pclath,c
  3614  000778  50DE               	movf	postinc2,w,c
  3615  00077A  6EFD               	movwf	tosl,c
  3616  00077C  50DE               	movf	postinc2,w,c
  3617  00077E  6EFE               	movwf	tosh,c
  3618  000780  50F8               	movf	tblptru,w,c
  3619  000782  6EFF               	movwf	tosu,c
  3620  000784  50FA               	movf	pclath,w,c
  3621  000786  0012               	return		;indir
  3622  000788                     u4839:
  3623  000788                     
  3624                           ;main.c: 304:                             dispLCD_clr();
  3625  000788  ECAC  F01F         	call	_dispLCD_clr	;wreg free
  3626  00078C                     
  3627                           ;main.c: 305:                             for(char i = 0; i <= 3; i++)
  3628  00078C  0E00               	movlw	0
  3629  00078E  0100               	movlb	0	; () banked
  3630  000790  6FA5               	movwf	main@i_930& (0+255),b
  3631  000792                     l6609:
  3632                           
  3633                           ; BSR set to: 0
  3634  000792  0E03               	movlw	3
  3635  000794  65A5               	cpfsgt	main@i_930& (0+255),b
  3636  000796  EFCF  F003         	goto	u4841
  3637  00079A  EFD1  F003         	goto	u4840
  3638  00079E                     u4841:
  3639  00079E  EFD3  F003         	goto	l6613
  3640  0007A2                     u4840:
  3641  0007A2  EFF5  F003         	goto	l6631
  3642  0007A6                     l6613:
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;main.c: 306:                             {;main.c: 307:                                
      +                           for(char j = 0; j <= 19; j++)
  3646  0007A6  0E00               	movlw	0
  3647  0007A8  6FA6               	movwf	main@j_931& (0+255),b
  3648  0007AA                     l6615:
  3649                           
  3650                           ; BSR set to: 0
  3651  0007AA  0E13               	movlw	19
  3652  0007AC  65A6               	cpfsgt	main@j_931& (0+255),b
  3653  0007AE  EFDB  F003         	goto	u4851
  3654  0007B2  EFDD  F003         	goto	u4850
  3655  0007B6                     u4851:
  3656  0007B6  EFDF  F003         	goto	l6619
  3657  0007BA                     u4850:
  3658  0007BA  EFF2  F003         	goto	l6627
  3659  0007BE                     l6619:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 308:                                 {;main.c: 309:                            
      +                                   dispLCD(i, j, "\377");
  3663  0007BE  C0A6  F038         	movff	main@j_931,dispLCD@col
  3664  0007C2  0EFD               	movlw	low STR_3
  3665  0007C4  6E39               	movwf	dispLCD@str^0,c
  3666  0007C6  0E7F               	movlw	high STR_3
  3667  0007C8  6E3A               	movwf	(dispLCD@str+1)^0,c
  3668  0007CA  51A5               	movf	main@i_930& (0+255),w,b
  3669  0007CC  EC76  F01C         	call	_dispLCD
  3670  0007D0                     
  3671                           ;main.c: 310:                                     delay(10);
  3672  0007D0  0E00               	movlw	0
  3673  0007D2  6E32               	movwf	(delay@t+1)^0,c
  3674  0007D4  0E0A               	movlw	10
  3675  0007D6  6E31               	movwf	delay@t^0,c
  3676  0007D8  EC62  F01E         	call	_delay	;wreg free
  3677  0007DC                     
  3678                           ;main.c: 311:                                 }
  3679  0007DC  0100               	movlb	0	; () banked
  3680  0007DE  2BA6               	incf	main@j_931& (0+255),f,b
  3681  0007E0  EFD5  F003         	goto	l6615
  3682  0007E4                     l6627:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main.c: 312:                             }
  3686  0007E4  2BA5               	incf	main@i_930& (0+255),f,b
  3687  0007E6  EFC9  F003         	goto	l6609
  3688  0007EA                     l6631:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;main.c: 314:                             for(char i = 0; i <= 3; i++)
  3692  0007EA  0E00               	movlw	0
  3693  0007EC  6FA7               	movwf	main@i_933& (0+255),b
  3694  0007EE                     l6633:
  3695                           
  3696                           ; BSR set to: 0
  3697  0007EE  0E03               	movlw	3
  3698  0007F0  65A7               	cpfsgt	main@i_933& (0+255),b
  3699  0007F2  EFFD  F003         	goto	u4861
  3700  0007F6  EFFF  F003         	goto	u4860
  3701  0007FA                     u4861:
  3702  0007FA  EF01  F004         	goto	l6637
  3703  0007FE                     u4860:
  3704  0007FE  EF23  F004         	goto	l6655
  3705  000802                     l6637:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;main.c: 315:                             {;main.c: 316:                                
      +                           for(char j = 0; j <= 19; j++)
  3709  000802  0E00               	movlw	0
  3710  000804  6FA8               	movwf	main@j_934& (0+255),b
  3711  000806                     l6639:
  3712                           
  3713                           ; BSR set to: 0
  3714  000806  0E13               	movlw	19
  3715  000808  65A8               	cpfsgt	main@j_934& (0+255),b
  3716  00080A  EF09  F004         	goto	u4871
  3717  00080E  EF0B  F004         	goto	u4870
  3718  000812                     u4871:
  3719  000812  EF0D  F004         	goto	l6643
  3720  000816                     u4870:
  3721  000816  EF20  F004         	goto	l6651
  3722  00081A                     l6643:
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;main.c: 317:                                 {;main.c: 318:                            
      +                                   dispLCD(i, j, " ");
  3726  00081A  C0A8  F038         	movff	main@j_934,dispLCD@col
  3727  00081E  0EAA               	movlw	low (STR_26+19)
  3728  000820  6E39               	movwf	dispLCD@str^0,c
  3729  000822  0E7D               	movlw	high (STR_26+19)
  3730  000824  6E3A               	movwf	(dispLCD@str+1)^0,c
  3731  000826  51A7               	movf	main@i_933& (0+255),w,b
  3732  000828  EC76  F01C         	call	_dispLCD
  3733  00082C                     
  3734                           ;main.c: 319:                                     delay(10);
  3735  00082C  0E00               	movlw	0
  3736  00082E  6E32               	movwf	(delay@t+1)^0,c
  3737  000830  0E0A               	movlw	10
  3738  000832  6E31               	movwf	delay@t^0,c
  3739  000834  EC62  F01E         	call	_delay	;wreg free
  3740  000838                     
  3741                           ;main.c: 320:                                 }
  3742  000838  0100               	movlb	0	; () banked
  3743  00083A  2BA8               	incf	main@j_934& (0+255),f,b
  3744  00083C  EF03  F004         	goto	l6639
  3745  000840                     l6651:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;main.c: 321:                             }
  3749  000840  2BA7               	incf	main@i_933& (0+255),f,b
  3750  000842  EFF7  F003         	goto	l6633
  3751  000846                     l6655:
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;main.c: 322:                             dispLCD(1, 0, "       DELETED      ");
  3755  000846  0E00               	movlw	0
  3756  000848  6E38               	movwf	dispLCD@col^0,c
  3757  00084A  0E00               	movlw	low STR_15
  3758  00084C  6E39               	movwf	dispLCD@str^0,c
  3759  00084E  0E7E               	movlw	high STR_15
  3760  000850  6E3A               	movwf	(dispLCD@str+1)^0,c
  3761  000852  0E01               	movlw	1
  3762  000854  EC76  F01C         	call	_dispLCD
  3763                           
  3764                           ;main.c: 323:                             dispLCD(2, 0, "        MEMORY      ");
  3765  000858  0E00               	movlw	0
  3766  00085A  6E38               	movwf	dispLCD@col^0,c
  3767  00085C  0E15               	movlw	low STR_16
  3768  00085E  6E39               	movwf	dispLCD@str^0,c
  3769  000860  0E7E               	movlw	high STR_16
  3770  000862  6E3A               	movwf	(dispLCD@str+1)^0,c
  3771  000864  0E02               	movlw	2
  3772  000866  EC76  F01C         	call	_dispLCD
  3773  00086A                     
  3774                           ;main.c: 325:                             setT1(1000);
  3775  00086A  0EE8               	movlw	232
  3776  00086C  6E37               	movwf	setT1@c^0,c
  3777  00086E  0E03               	movlw	3
  3778  000870  6E38               	movwf	(setT1@c+1)^0,c
  3779  000872  0E00               	movlw	0
  3780  000874  6E39               	movwf	(setT1@c+2)^0,c
  3781  000876  0E00               	movlw	0
  3782  000878  6E3A               	movwf	(setT1@c+3)^0,c
  3783  00087A  EC32  F01F         	call	_setT1	;wreg free
  3784  00087E                     
  3785                           ;main.c: 326:                             estado = 86;
  3786  00087E  0E56               	movlw	86
  3787  000880  0100               	movlb	0	; () banked
  3788  000882  6FBB               	movwf	main@estado& (0+255),b
  3789                           
  3790                           ;main.c: 327:                             break;
  3791  000884  EFED  F00D         	goto	l7141
  3792  000888                     l6661:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;main.c: 330:                             if(!statusT1())
  3796  000888  EC64  F01F         	call	_statusT1	;wreg free
  3797  00088C  5031               	movf	?_statusT1^0,w,c
  3798  00088E  1032               	iorwf	(?_statusT1+1)^0,w,c
  3799  000890  1033               	iorwf	(?_statusT1+2)^0,w,c
  3800  000892  1034               	iorwf	(?_statusT1+3)^0,w,c
  3801  000894  A4D8               	btfss	status,2,c
  3802  000896  EF4F  F004         	goto	u4881
  3803  00089A  EF51  F004         	goto	u4880
  3804  00089E                     u4881:
  3805  00089E  EFED  F00D         	goto	l7141
  3806  0008A2                     u4880:
  3807  0008A2  EFC2  F001         	goto	l6503
  3808  0008A6                     l6665:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;main.c: 335:                             IHM.clr();
  3812  0008A6  EE20  F0E9         	lfsr	2,_IHM+8
  3813  0008AA  D802               	call	u4898
  3814  0008AC  EF62  F004         	goto	u4899
  3815  0008B0                     u4898:
  3816  0008B0  0005               	push	
  3817  0008B2  6EFA               	movwf	pclath,c
  3818  0008B4  50DE               	movf	postinc2,w,c
  3819  0008B6  6EFD               	movwf	tosl,c
  3820  0008B8  50DE               	movf	postinc2,w,c
  3821  0008BA  6EFE               	movwf	tosh,c
  3822  0008BC  50F8               	movf	tblptru,w,c
  3823  0008BE  6EFF               	movwf	tosu,c
  3824  0008C0  50FA               	movf	pclath,w,c
  3825  0008C2  0012               	return		;indir
  3826  0008C4                     u4899:
  3827  0008C4                     
  3828                           ;main.c: 336:                             IHM.print(" ESCOLHA A MEMORIA \n"
  3829  0008C4  0E30               	movlw	low STR_17
  3830  0008C6  6E38               	movwf	dispLCD_str@str^0,c
  3831  0008C8  0E7C               	movlw	high STR_17
  3832  0008CA  6E39               	movwf	(dispLCD_str@str+1)^0,c
  3833  0008CC  EE20  F0E3         	lfsr	2,_IHM+2
  3834  0008D0  D802               	call	u4908
  3835  0008D2  EF75  F004         	goto	u4909
  3836  0008D6                     u4908:
  3837  0008D6  0005               	push	
  3838  0008D8  6EFA               	movwf	pclath,c
  3839  0008DA  50DE               	movf	postinc2,w,c
  3840  0008DC  6EFD               	movwf	tosl,c
  3841  0008DE  50DE               	movf	postinc2,w,c
  3842  0008E0  6EFE               	movwf	tosh,c
  3843  0008E2  50F8               	movf	tblptru,w,c
  3844  0008E4  6EFF               	movwf	tosu,c
  3845  0008E6  50FA               	movf	pclath,w,c
  3846  0008E8  0012               	return		;indir
  3847  0008EA                     u4909:
  3848  0008EA                     
  3849                           ;main.c: 340:                             estado = 73;
  3850  0008EA  0E49               	movlw	73
  3851  0008EC  0100               	movlb	0	; () banked
  3852  0008EE  6FBB               	movwf	main@estado& (0+255),b
  3853  0008F0                     l6671:
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 343:                             tecla = teclado_borda();
  3857  0008F0  ECB7  F01D         	call	_teclado_borda	;wreg free
  3858  0008F4  0100               	movlb	0	; () banked
  3859  0008F6  6FBC               	movwf	main@tecla& (0+255),b
  3860                           
  3861                           ;main.c: 344:                             switch(tecla)
  3862  0008F8  EFB9  F005         	goto	l6731
  3863  0008FC                     l706:
  3864  0008FC                     l6673:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;main.c: 356:                                            buscar_dado(10, tecla % 0x30, &
      +                          init_cond);
  3868  0008FC  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3869  000900  6A32               	clrf	(___awmod@dividend+1)^0,c
  3870  000902  0E00               	movlw	0
  3871  000904  6E34               	movwf	(___awmod@divisor+1)^0,c
  3872  000906  0E30               	movlw	48
  3873  000908  6E33               	movwf	___awmod@divisor^0,c
  3874  00090A  ECDC  F016         	call	___awmod	;wreg free
  3875  00090E  5031               	movf	?___awmod^0,w,c
  3876  000910  6E37               	movwf	buscar_dado@col^0,c
  3877  000912  0EB2               	movlw	low main@init_cond
  3878  000914  6E38               	movwf	buscar_dado@data^0,c
  3879  000916  0E00               	movlw	high main@init_cond
  3880  000918  6E39               	movwf	(buscar_dado@data+1)^0,c
  3881  00091A  0E0A               	movlw	10
  3882  00091C  EC8F  F01E         	call	_buscar_dado
  3883  000920                     
  3884                           ;main.c: 357:                                            manipula_atuadores_init(init_co
      +                          nd);
  3885  000920  0100               	movlb	0	; () banked
  3886  000922  51B2               	movf	main@init_cond& (0+255),w,b
  3887  000924  EC03  F01C         	call	_manipula_atuadores_init
  3888  000928                     
  3889                           ;main.c: 359:                                            EEPROM.buscar(tecla % 0x30, vet
      +                          or_aux);
  3890  000928  EE20  F0ED         	lfsr	2,_EEPROM+2
  3891  00092C  D802               	call	u4918
  3892  00092E  EFB1  F004         	goto	u4919
  3893  000932                     u4918:
  3894  000932  0005               	push	
  3895  000934  6EFA               	movwf	pclath,c
  3896  000936  50DE               	movf	postinc2,w,c
  3897  000938  6EFD               	movwf	tosl,c
  3898  00093A  50DE               	movf	postinc2,w,c
  3899  00093C  6EFE               	movwf	tosh,c
  3900  00093E  50F8               	movf	tblptru,w,c
  3901  000940  6EFF               	movwf	tosu,c
  3902  000942  50FA               	movf	pclath,w,c
  3903  000944  0E76               	movlw	low main@vetor_aux
  3904  000946  6E37               	movwf	buscar_receita@data^0,c
  3905  000948  0E00               	movlw	high main@vetor_aux
  3906  00094A  6E38               	movwf	(buscar_receita@data+1)^0,c
  3907  00094C  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3908  000950  6A32               	clrf	(___awmod@dividend+1)^0,c
  3909  000952  0E00               	movlw	0
  3910  000954  6E34               	movwf	(___awmod@divisor+1)^0,c
  3911  000956  0E30               	movlw	48
  3912  000958  6E33               	movwf	___awmod@divisor^0,c
  3913  00095A  ECDC  F016         	call	___awmod	;wreg free
  3914  00095E  5031               	movf	?___awmod^0,w,c
  3915  000960  0012               	return		;indir
  3916  000962                     u4919:
  3917  000962                     
  3918                           ;main.c: 360:                                            pt = vetor_aux;
  3919  000962  0E76               	movlw	low main@vetor_aux
  3920  000964  0100               	movlb	0	; () banked
  3921  000966  6F9D               	movwf	main@pt& (0+255),b
  3922  000968  0E00               	movlw	high main@vetor_aux
  3923  00096A  6F9E               	movwf	(main@pt+1)& (0+255),b
  3924  00096C                     
  3925                           ; BSR set to: 0
  3926                           ;main.c: 362:                                            if(*pt == 0xFF)
  3927  00096C  C09D  FFD9         	movff	main@pt,fsr2l
  3928  000970  C09E  FFDA         	movff	main@pt+1,fsr2h
  3929  000974  28DE               	incf	postinc2,w,c
  3930  000976  A4D8               	btfss	status,2,c
  3931  000978  EFC0  F004         	goto	u4921
  3932  00097C  EFC2  F004         	goto	u4920
  3933  000980                     u4921:
  3934  000980  EFDE  F004         	goto	l6687
  3935  000984                     u4920:
  3936  000984                     
  3937                           ; BSR set to: 0
  3938                           ;main.c: 363:                                            {;main.c: 364:                 
      +                                                         EEPROM.deletar(tecla % 0x30);
  3939  000984  EE20  F0EF         	lfsr	2,_EEPROM+4
  3940  000988  D802               	call	u4938
  3941  00098A  EFDB  F004         	goto	u4939
  3942  00098E                     u4938:
  3943  00098E  0005               	push	
  3944  000990  6EFA               	movwf	pclath,c
  3945  000992  50DE               	movf	postinc2,w,c
  3946  000994  6EFD               	movwf	tosl,c
  3947  000996  50DE               	movf	postinc2,w,c
  3948  000998  6EFE               	movwf	tosh,c
  3949  00099A  50F8               	movf	tblptru,w,c
  3950  00099C  6EFF               	movwf	tosu,c
  3951  00099E  50FA               	movf	pclath,w,c
  3952  0009A0  C0BC  F031         	movff	main@tecla,___awmod@dividend
  3953  0009A4  6A32               	clrf	(___awmod@dividend+1)^0,c
  3954  0009A6  0E00               	movlw	0
  3955  0009A8  6E34               	movwf	(___awmod@divisor+1)^0,c
  3956  0009AA  0E30               	movlw	48
  3957  0009AC  6E33               	movwf	___awmod@divisor^0,c
  3958  0009AE  ECDC  F016         	call	___awmod
  3959  0009B2  5031               	movf	?___awmod^0,w,c
  3960  0009B4  0012               	return		;indir
  3961  0009B6                     u4939:
  3962  0009B6                     
  3963                           ;main.c: 365:                                                vetor_aux[0] = 0;
  3964  0009B6  0E00               	movlw	0
  3965  0009B8  0100               	movlb	0	; () banked
  3966  0009BA  6F76               	movwf	main@vetor_aux& (0+255),b
  3967  0009BC                     l6687:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;main.c: 369:                                            for(char *ptr = vetor_aux; *ptr
      +                           != 0; ptr++)
  3971  0009BC  0E76               	movlw	low main@vetor_aux
  3972  0009BE  6FB8               	movwf	main@ptr_940& (0+255),b
  3973  0009C0  0E00               	movlw	high main@vetor_aux
  3974  0009C2  6FB9               	movwf	(main@ptr_940+1)& (0+255),b
  3975  0009C4  EFAB  F005         	goto	l6721
  3976  0009C8                     l6689:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;main.c: 370:                                            {;main.c: 371:                 
      +                                                          if(*ptr <= 0x64 || *ptr == 0xFE)
  3980  0009C8  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  3981  0009CC  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  3982  0009D0  0E64               	movlw	100
  3983  0009D2  64DF               	cpfsgt	indf2,c
  3984  0009D4  EFEE  F004         	goto	u4941
  3985  0009D8  EFF0  F004         	goto	u4940
  3986  0009DC                     u4941:
  3987  0009DC  EFFD  F004         	goto	l6693
  3988  0009E0                     u4940:
  3989  0009E0                     
  3990                           ; BSR set to: 0
  3991  0009E0  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  3992  0009E4  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  3993  0009E8  0EFE               	movlw	254
  3994  0009EA  18DE               	xorwf	postinc2,w,c
  3995  0009EC  A4D8               	btfss	status,2,c
  3996  0009EE  EFFB  F004         	goto	u4951
  3997  0009F2  EFFD  F004         	goto	u4950
  3998  0009F6                     u4951:
  3999  0009F6  EF0C  F005         	goto	l6695
  4000  0009FA                     u4950:
  4001  0009FA                     l6693:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 372:                                                 {;main.c: 373:            
      +                                                                   decodifica(&*ptr);
  4005  0009FA  C0B8  F031         	movff	main@ptr_940,decodifica@d
  4006  0009FE  C0B9  F032         	movff	main@ptr_940+1,decodifica@d+1
  4007  000A02  ECE7  F012         	call	_decodifica
  4008                           
  4009                           ;main.c: 374:                                                     fifo_add_control(*ptr)
      +                          ;
  4010  000A06  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4011  000A0A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4012  000A0E  50DF               	movf	indf2,w,c
  4013  000A10  EC52  F01C         	call	_fifo_add_control
  4014                           
  4015                           ;main.c: 375:                                                 }
  4016  000A14  EFA6  F005         	goto	l6717
  4017  000A18                     l6695:
  4018                           
  4019                           ; BSR set to: 0
  4020  000A18  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4021  000A1C  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4022  000A20  0E64               	movlw	100
  4023  000A22  64DF               	cpfsgt	indf2,c
  4024  000A24  EF16  F005         	goto	u4961
  4025  000A28  EF18  F005         	goto	u4960
  4026  000A2C                     u4961:
  4027  000A2C  EF33  F005         	goto	l6701
  4028  000A30                     u4960:
  4029  000A30                     
  4030                           ; BSR set to: 0
  4031  000A30  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4032  000A34  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4033  000A38  0EDD               	movlw	221
  4034  000A3A  60DF               	cpfslt	indf2,c
  4035  000A3C  EF22  F005         	goto	u4971
  4036  000A40  EF24  F005         	goto	u4970
  4037  000A44                     u4971:
  4038  000A44  EF33  F005         	goto	l6701
  4039  000A48                     u4970:
  4040  000A48                     
  4041                           ; BSR set to: 0
  4042                           ;main.c: 377:                                                 {;main.c: 378:            
      +                                                                   decodifica(&*ptr);
  4043  000A48  C0B8  F031         	movff	main@ptr_940,decodifica@d
  4044  000A4C  C0B9  F032         	movff	main@ptr_940+1,decodifica@d+1
  4045  000A50  ECE7  F012         	call	_decodifica	;wreg free
  4046                           
  4047                           ;main.c: 379:                                                     fifo_add_tempo(*ptr);
  4048  000A54  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4049  000A58  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4050  000A5C  50DF               	movf	indf2,w,c
  4051  000A5E  EC80  F01B         	call	_fifo_add_tempo
  4052                           
  4053                           ;main.c: 380:                                                 }
  4054  000A62  EFA6  F005         	goto	l6717
  4055  000A66                     l6701:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;main.c: 382:                                                 {;main.c: 383:            
      +                                                                   decodifica(&*ptr);
  4059  000A66  C0B8  F031         	movff	main@ptr_940,decodifica@d
  4060  000A6A  C0B9  F032         	movff	main@ptr_940+1,decodifica@d+1
  4061  000A6E  ECE7  F012         	call	_decodifica	;wreg free
  4062                           
  4063                           ;main.c: 384:                                                     switch( *ptr )
  4064  000A72  EF43  F005         	goto	l6707
  4065  000A76                     l726:
  4066  000A76                     l6703:
  4067                           
  4068                           ;main.c: 394:                                                                 *ptr &= ~0
      +                          x20;
  4069  000A76  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4070  000A7A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4071  000A7E  0EDF               	movlw	223
  4072  000A80  16DF               	andwf	indf2,f,c
  4073                           
  4074                           ;main.c: 395:                                                                 break;
  4075  000A82  EF74  F005         	goto	l6709
  4076  000A86                     l6707:
  4077  000A86  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4078  000A8A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4079  000A8E  50DF               	movf	indf2,w,c
  4080  000A90  6E59               	movwf	??_main^0,c
  4081  000A92  6A5A               	clrf	(??_main+1)^0,c
  4082                           
  4083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4084                           ; Switch size 1, requested type "simple"
  4085                           ; Number of cases is 1, Range of values is 0 to 0
  4086                           ; switch strategies available:
  4087                           ; Name         Instructions Cycles
  4088                           ; simple_byte            4     3 (average)
  4089                           ;	Chosen strategy is simple_byte
  4090  000A94  505A               	movf	(??_main+1)^0,w,c
  4091  000A96  0A00               	xorlw	0	; case 0
  4092  000A98  B4D8               	btfsc	status,2,c
  4093  000A9A  EF51  F005         	goto	l7991
  4094  000A9E  EF74  F005         	goto	l6709
  4095  000AA2                     l7991:
  4096                           
  4097                           ; Switch size 1, requested type "simple"
  4098                           ; Number of cases is 8, Range of values is 65 to 100
  4099                           ; switch strategies available:
  4100                           ; Name         Instructions Cycles
  4101                           ; simple_byte           25    13 (average)
  4102                           ;	Chosen strategy is simple_byte
  4103  000AA2  5059               	movf	??_main^0,w,c
  4104  000AA4  0A41               	xorlw	65	; case 65
  4105  000AA6  B4D8               	btfsc	status,2,c
  4106  000AA8  EF3B  F005         	goto	l726
  4107  000AAC  0A03               	xorlw	3	; case 66
  4108  000AAE  B4D8               	btfsc	status,2,c
  4109  000AB0  EF3B  F005         	goto	l6703
  4110  000AB4  0A01               	xorlw	1	; case 67
  4111  000AB6  B4D8               	btfsc	status,2,c
  4112  000AB8  EF3B  F005         	goto	l6703
  4113  000ABC  0A07               	xorlw	7	; case 68
  4114  000ABE  B4D8               	btfsc	status,2,c
  4115  000AC0  EF3B  F005         	goto	l6703
  4116  000AC4  0A25               	xorlw	37	; case 97
  4117  000AC6  B4D8               	btfsc	status,2,c
  4118  000AC8  EF3B  F005         	goto	l6703
  4119  000ACC  0A03               	xorlw	3	; case 98
  4120  000ACE  B4D8               	btfsc	status,2,c
  4121  000AD0  EF3B  F005         	goto	l6703
  4122  000AD4  0A01               	xorlw	1	; case 99
  4123  000AD6  B4D8               	btfsc	status,2,c
  4124  000AD8  EF3B  F005         	goto	l6703
  4125  000ADC  0A07               	xorlw	7	; case 100
  4126  000ADE  B4D8               	btfsc	status,2,c
  4127  000AE0  EF3B  F005         	goto	l6703
  4128  000AE4  EF74  F005         	goto	l6709
  4129  000AE8                     l6709:
  4130                           
  4131                           ;main.c: 397:                                                     alt_atuador(*ptr);
  4132  000AE8  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4133  000AEC  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4134  000AF0  50DF               	movf	indf2,w,c
  4135  000AF2  ECD5  F018         	call	_alt_atuador
  4136                           
  4137                           ;main.c: 398:                                                     fifo_add( ler_atuador(
      +                          *ptr) ? *ptr : *ptr|0x20 );
  4138  000AF6  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4139  000AFA  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4140  000AFE  50DF               	movf	indf2,w,c
  4141  000B00  EC85  F018         	call	_ler_atuador
  4142  000B04  0900               	iorlw	0
  4143  000B06  A4D8               	btfss	status,2,c
  4144  000B08  EF88  F005         	goto	u4981
  4145  000B0C  EF8A  F005         	goto	u4980
  4146  000B10                     u4981:
  4147  000B10  EF99  F005         	goto	l6713
  4148  000B14                     u4980:
  4149  000B14  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4150  000B18  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4151  000B1C  50DF               	movf	indf2,w,c
  4152  000B1E  6E59               	movwf	??_main^0,c
  4153  000B20  6A5A               	clrf	(??_main+1)^0,c
  4154  000B22  0E20               	movlw	32
  4155  000B24  1059               	iorwf	??_main^0,w,c
  4156  000B26  0100               	movlb	0	; () banked
  4157  000B28  6F88               	movwf	_main$941& (0+255),b
  4158  000B2A  505A               	movf	(??_main+1)^0,w,c
  4159  000B2C  6F89               	movwf	(_main$941+1)& (0+255),b
  4160  000B2E  EFA3  F005         	goto	l6715
  4161  000B32                     l6713:
  4162  000B32  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4163  000B36  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4164  000B3A  50DF               	movf	indf2,w,c
  4165  000B3C  6E59               	movwf	??_main^0,c
  4166  000B3E  5059               	movf	??_main^0,w,c
  4167  000B40  0100               	movlb	0	; () banked
  4168  000B42  6F88               	movwf	_main$941& (0+255),b
  4169  000B44  6B89               	clrf	(_main$941+1)& (0+255),b
  4170  000B46                     l6715:
  4171                           
  4172                           ; BSR set to: 0
  4173  000B46  5188               	movf	_main$941& (0+255),w,b
  4174  000B48  ECAC  F01B         	call	_fifo_add
  4175  000B4C                     l6717:
  4176                           
  4177                           ;main.c: 400:                                                 fifo_print();
  4178  000B4C  EC49  F00F         	call	_fifo_print	;wreg free
  4179  000B50                     
  4180                           ;main.c: 401:                                            }
  4181  000B50  0100               	movlb	0	; () banked
  4182  000B52  4BB8               	infsnz	main@ptr_940& (0+255),f,b
  4183  000B54  2BB9               	incf	(main@ptr_940+1)& (0+255),f,b
  4184  000B56                     l6721:
  4185                           
  4186                           ; BSR set to: 0
  4187  000B56  C0B8  FFD9         	movff	main@ptr_940,fsr2l
  4188  000B5A  C0B9  FFDA         	movff	main@ptr_940+1,fsr2h
  4189  000B5E  50DF               	movf	indf2,w,c
  4190  000B60  A4D8               	btfss	status,2,c
  4191  000B62  EFB5  F005         	goto	u4991
  4192  000B66  EFB7  F005         	goto	u4990
  4193  000B6A                     u4991:
  4194  000B6A  EFE4  F004         	goto	l6689
  4195  000B6E                     u4990:
  4196  000B6E  EF0B  F003         	goto	l6559
  4197  000B72                     l6731:
  4198                           
  4199                           ; BSR set to: 0
  4200  000B72  51BC               	movf	main@tecla& (0+255),w,b
  4201  000B74  6E59               	movwf	??_main^0,c
  4202  000B76  6A5A               	clrf	(??_main+1)^0,c
  4203                           
  4204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4205                           ; Switch size 1, requested type "simple"
  4206                           ; Number of cases is 1, Range of values is 0 to 0
  4207                           ; switch strategies available:
  4208                           ; Name         Instructions Cycles
  4209                           ; simple_byte            4     3 (average)
  4210                           ;	Chosen strategy is simple_byte
  4211  000B78  505A               	movf	(??_main+1)^0,w,c
  4212  000B7A  0A00               	xorlw	0	; case 0
  4213  000B7C  B4D8               	btfsc	status,2,c
  4214  000B7E  EFC3  F005         	goto	l7993
  4215  000B82  EFED  F00D         	goto	l7141
  4216  000B86                     l7993:
  4217                           
  4218                           ; BSR set to: 0
  4219                           ; Switch size 1, requested type "simple"
  4220                           ; Number of cases is 11, Range of values is 42 to 57
  4221                           ; switch strategies available:
  4222                           ; Name         Instructions Cycles
  4223                           ; simple_byte           34    18 (average)
  4224                           ;	Chosen strategy is simple_byte
  4225  000B86  5059               	movf	??_main^0,w,c
  4226  000B88  0A2A               	xorlw	42	; case 42
  4227  000B8A  B4D8               	btfsc	status,2,c
  4228  000B8C  EF74  F001         	goto	l6481
  4229  000B90  0A1A               	xorlw	26	; case 48
  4230  000B92  B4D8               	btfsc	status,2,c
  4231  000B94  EF7E  F004         	goto	l706
  4232  000B98  0A01               	xorlw	1	; case 49
  4233  000B9A  B4D8               	btfsc	status,2,c
  4234  000B9C  EF7E  F004         	goto	l706
  4235  000BA0  0A03               	xorlw	3	; case 50
  4236  000BA2  B4D8               	btfsc	status,2,c
  4237  000BA4  EF7E  F004         	goto	l6673
  4238  000BA8  0A01               	xorlw	1	; case 51
  4239  000BAA  B4D8               	btfsc	status,2,c
  4240  000BAC  EF7E  F004         	goto	l6673
  4241  000BB0  0A07               	xorlw	7	; case 52
  4242  000BB2  B4D8               	btfsc	status,2,c
  4243  000BB4  EF7E  F004         	goto	l6673
  4244  000BB8  0A01               	xorlw	1	; case 53
  4245  000BBA  B4D8               	btfsc	status,2,c
  4246  000BBC  EF7E  F004         	goto	l6673
  4247  000BC0  0A03               	xorlw	3	; case 54
  4248  000BC2  B4D8               	btfsc	status,2,c
  4249  000BC4  EF7E  F004         	goto	l6673
  4250  000BC8  0A01               	xorlw	1	; case 55
  4251  000BCA  B4D8               	btfsc	status,2,c
  4252  000BCC  EF7E  F004         	goto	l6673
  4253  000BD0  0A0F               	xorlw	15	; case 56
  4254  000BD2  B4D8               	btfsc	status,2,c
  4255  000BD4  EF7E  F004         	goto	l6673
  4256  000BD8  0A01               	xorlw	1	; case 57
  4257  000BDA  B4D8               	btfsc	status,2,c
  4258  000BDC  EF7E  F004         	goto	l6673
  4259  000BE0  EFED  F00D         	goto	l7141
  4260  000BE4                     l6733:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;main.c: 412:                             IHM.clr();
  4264  000BE4  EE20  F0E9         	lfsr	2,_IHM+8
  4265  000BE8  D802               	call	u5008
  4266  000BEA  EF01  F006         	goto	u5009
  4267  000BEE                     u5008:
  4268  000BEE  0005               	push	
  4269  000BF0  6EFA               	movwf	pclath,c
  4270  000BF2  50DE               	movf	postinc2,w,c
  4271  000BF4  6EFD               	movwf	tosl,c
  4272  000BF6  50DE               	movf	postinc2,w,c
  4273  000BF8  6EFE               	movwf	tosh,c
  4274  000BFA  50F8               	movf	tblptru,w,c
  4275  000BFC  6EFF               	movwf	tosu,c
  4276  000BFE  50FA               	movf	pclath,w,c
  4277  000C00  0012               	return		;indir
  4278  000C02                     u5009:
  4279  000C02                     
  4280                           ;main.c: 413:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
  4281  000C02  EE20  F0E5         	lfsr	2,_IHM+4
  4282  000C06  D802               	call	u5018
  4283  000C08  EF17  F006         	goto	u5019
  4284  000C0C                     u5018:
  4285  000C0C  0005               	push	
  4286  000C0E  6EFA               	movwf	pclath,c
  4287  000C10  50DE               	movf	postinc2,w,c
  4288  000C12  6EFD               	movwf	tosl,c
  4289  000C14  50DE               	movf	postinc2,w,c
  4290  000C16  6EFE               	movwf	tosh,c
  4291  000C18  50F8               	movf	tblptru,w,c
  4292  000C1A  6EFF               	movwf	tosu,c
  4293  000C1C  50FA               	movf	pclath,w,c
  4294  000C1E  0E00               	movlw	0
  4295  000C20  6E38               	movwf	dispLCD@col^0,c
  4296  000C22  0EA8               	movlw	low STR_18
  4297  000C24  6E39               	movwf	dispLCD@str^0,c
  4298  000C26  0E7E               	movlw	high STR_18
  4299  000C28  6E3A               	movwf	(dispLCD@str+1)^0,c
  4300  000C2A  0E00               	movlw	0
  4301  000C2C  0012               	return		;indir
  4302  000C2E                     u5019:
  4303  000C2E                     
  4304                           ;main.c: 414:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
  4305  000C2E  EE20  F0E5         	lfsr	2,_IHM+4
  4306  000C32  D802               	call	u5028
  4307  000C34  EF2D  F006         	goto	u5029
  4308  000C38                     u5028:
  4309  000C38  0005               	push	
  4310  000C3A  6EFA               	movwf	pclath,c
  4311  000C3C  50DE               	movf	postinc2,w,c
  4312  000C3E  6EFD               	movwf	tosl,c
  4313  000C40  50DE               	movf	postinc2,w,c
  4314  000C42  6EFE               	movwf	tosh,c
  4315  000C44  50F8               	movf	tblptru,w,c
  4316  000C46  6EFF               	movwf	tosu,c
  4317  000C48  50FA               	movf	pclath,w,c
  4318  000C4A  0E00               	movlw	0
  4319  000C4C  6E38               	movwf	dispLCD@col^0,c
  4320  000C4E  0E54               	movlw	low STR_19
  4321  000C50  6E39               	movwf	dispLCD@str^0,c
  4322  000C52  0E7E               	movlw	high STR_19
  4323  000C54  6E3A               	movwf	(dispLCD@str+1)^0,c
  4324  000C56  0E01               	movlw	1
  4325  000C58  0012               	return		;indir
  4326  000C5A                     u5029:
  4327  000C5A                     
  4328                           ;main.c: 415:                             estado = 6;
  4329  000C5A  0E06               	movlw	6
  4330  000C5C  0100               	movlb	0	; () banked
  4331  000C5E  6FBB               	movwf	main@estado& (0+255),b
  4332                           
  4333                           ;main.c: 416:                             break;
  4334  000C60  EFED  F00D         	goto	l7141
  4335  000C64                     l6741:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;main.c: 419:                             IHM.printpos(3,0,"   A   B   C   D    ");
  4339  000C64  EE20  F0E5         	lfsr	2,_IHM+4
  4340  000C68  D802               	call	u5038
  4341  000C6A  EF48  F006         	goto	u5039
  4342  000C6E                     u5038:
  4343  000C6E  0005               	push	
  4344  000C70  6EFA               	movwf	pclath,c
  4345  000C72  50DE               	movf	postinc2,w,c
  4346  000C74  6EFD               	movwf	tosl,c
  4347  000C76  50DE               	movf	postinc2,w,c
  4348  000C78  6EFE               	movwf	tosh,c
  4349  000C7A  50F8               	movf	tblptru,w,c
  4350  000C7C  6EFF               	movwf	tosu,c
  4351  000C7E  50FA               	movf	pclath,w,c
  4352  000C80  0E00               	movlw	0
  4353  000C82  6E38               	movwf	dispLCD@col^0,c
  4354  000C84  0E69               	movlw	low STR_20
  4355  000C86  6E39               	movwf	dispLCD@str^0,c
  4356  000C88  0E7E               	movlw	high STR_20
  4357  000C8A  6E3A               	movwf	(dispLCD@str+1)^0,c
  4358  000C8C  0E03               	movlw	3
  4359  000C8E  0012               	return		;indir
  4360  000C90                     u5039:
  4361  000C90                     
  4362                           ;main.c: 420:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
  4363  000C90  0E04               	movlw	4
  4364  000C92  6E33               	movwf	dispLCD_lincol@col^0,c
  4365  000C94  0E03               	movlw	3
  4366  000C96  EC98  F01A         	call	_dispLCD_lincol
  4367  000C9A  0E41               	movlw	65
  4368  000C9C  EC85  F018         	call	_ler_atuador
  4369  000CA0  0900               	iorlw	0
  4370  000CA2  A4D8               	btfss	status,2,c
  4371  000CA4  EF56  F006         	goto	u5041
  4372  000CA8  EF58  F006         	goto	u5040
  4373  000CAC                     u5041:
  4374  000CAC  EF5F  F006         	goto	l6749
  4375  000CB0                     u5040:
  4376  000CB0  0E00               	movlw	0
  4377  000CB2  0100               	movlb	0	; () banked
  4378  000CB4  6F8B               	movwf	(_main$945+1)& (0+255),b
  4379  000CB6  0E2D               	movlw	45
  4380  000CB8  6F8A               	movwf	_main$945& (0+255),b
  4381  000CBA  EF64  F006         	goto	l6751
  4382  000CBE                     l6749:
  4383  000CBE  0E00               	movlw	0
  4384  000CC0  0100               	movlb	0	; () banked
  4385  000CC2  6F8B               	movwf	(_main$945+1)& (0+255),b
  4386  000CC4  0E2B               	movlw	43
  4387  000CC6  6F8A               	movwf	_main$945& (0+255),b
  4388  000CC8                     l6751:
  4389                           
  4390                           ; BSR set to: 0
  4391  000CC8  518A               	movf	_main$945& (0+255),w,b
  4392  000CCA  EC2B  F01C         	call	_dispLCD_dataReg
  4393  000CCE                     
  4394                           ;main.c: 421:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
  4395  000CCE  0E08               	movlw	8
  4396  000CD0  6E33               	movwf	dispLCD_lincol@col^0,c
  4397  000CD2  0E03               	movlw	3
  4398  000CD4  EC98  F01A         	call	_dispLCD_lincol
  4399  000CD8  0E42               	movlw	66
  4400  000CDA  EC85  F018         	call	_ler_atuador
  4401  000CDE  0900               	iorlw	0
  4402  000CE0  A4D8               	btfss	status,2,c
  4403  000CE2  EF75  F006         	goto	u5051
  4404  000CE6  EF77  F006         	goto	u5050
  4405  000CEA                     u5051:
  4406  000CEA  EF7E  F006         	goto	l6759
  4407  000CEE                     u5050:
  4408  000CEE  0E00               	movlw	0
  4409  000CF0  0100               	movlb	0	; () banked
  4410  000CF2  6F8D               	movwf	(_main$946+1)& (0+255),b
  4411  000CF4  0E2D               	movlw	45
  4412  000CF6  6F8C               	movwf	_main$946& (0+255),b
  4413  000CF8  EF83  F006         	goto	l6761
  4414  000CFC                     l6759:
  4415  000CFC  0E00               	movlw	0
  4416  000CFE  0100               	movlb	0	; () banked
  4417  000D00  6F8D               	movwf	(_main$946+1)& (0+255),b
  4418  000D02  0E2B               	movlw	43
  4419  000D04  6F8C               	movwf	_main$946& (0+255),b
  4420  000D06                     l6761:
  4421                           
  4422                           ; BSR set to: 0
  4423  000D06  518C               	movf	_main$946& (0+255),w,b
  4424  000D08  EC2B  F01C         	call	_dispLCD_dataReg
  4425  000D0C                     
  4426                           ;main.c: 422:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
  4427  000D0C  0E0C               	movlw	12
  4428  000D0E  6E33               	movwf	dispLCD_lincol@col^0,c
  4429  000D10  0E03               	movlw	3
  4430  000D12  EC98  F01A         	call	_dispLCD_lincol
  4431  000D16  0E43               	movlw	67
  4432  000D18  EC85  F018         	call	_ler_atuador
  4433  000D1C  0900               	iorlw	0
  4434  000D1E  A4D8               	btfss	status,2,c
  4435  000D20  EF94  F006         	goto	u5061
  4436  000D24  EF96  F006         	goto	u5060
  4437  000D28                     u5061:
  4438  000D28  EF9D  F006         	goto	l6769
  4439  000D2C                     u5060:
  4440  000D2C  0E00               	movlw	0
  4441  000D2E  0100               	movlb	0	; () banked
  4442  000D30  6F8F               	movwf	(_main$947+1)& (0+255),b
  4443  000D32  0E2D               	movlw	45
  4444  000D34  6F8E               	movwf	_main$947& (0+255),b
  4445  000D36  EFA2  F006         	goto	l6771
  4446  000D3A                     l6769:
  4447  000D3A  0E00               	movlw	0
  4448  000D3C  0100               	movlb	0	; () banked
  4449  000D3E  6F8F               	movwf	(_main$947+1)& (0+255),b
  4450  000D40  0E2B               	movlw	43
  4451  000D42  6F8E               	movwf	_main$947& (0+255),b
  4452  000D44                     l6771:
  4453                           
  4454                           ; BSR set to: 0
  4455  000D44  518E               	movf	_main$947& (0+255),w,b
  4456  000D46  EC2B  F01C         	call	_dispLCD_dataReg
  4457  000D4A                     
  4458                           ;main.c: 423:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
  4459  000D4A  0E10               	movlw	16
  4460  000D4C  6E33               	movwf	dispLCD_lincol@col^0,c
  4461  000D4E  0E03               	movlw	3
  4462  000D50  EC98  F01A         	call	_dispLCD_lincol
  4463  000D54  0E44               	movlw	68
  4464  000D56  EC85  F018         	call	_ler_atuador
  4465  000D5A  0900               	iorlw	0
  4466  000D5C  A4D8               	btfss	status,2,c
  4467  000D5E  EFB3  F006         	goto	u5071
  4468  000D62  EFB5  F006         	goto	u5070
  4469  000D66                     u5071:
  4470  000D66  EFBC  F006         	goto	l6779
  4471  000D6A                     u5070:
  4472  000D6A  0E00               	movlw	0
  4473  000D6C  0100               	movlb	0	; () banked
  4474  000D6E  6F91               	movwf	(_main$948+1)& (0+255),b
  4475  000D70  0E2D               	movlw	45
  4476  000D72  6F90               	movwf	_main$948& (0+255),b
  4477  000D74  EFC1  F006         	goto	l6781
  4478  000D78                     l6779:
  4479  000D78  0E00               	movlw	0
  4480  000D7A  0100               	movlb	0	; () banked
  4481  000D7C  6F91               	movwf	(_main$948+1)& (0+255),b
  4482  000D7E  0E2B               	movlw	43
  4483  000D80  6F90               	movwf	_main$948& (0+255),b
  4484  000D82                     l6781:
  4485                           
  4486                           ; BSR set to: 0
  4487  000D82  5190               	movf	_main$948& (0+255),w,b
  4488  000D84  EC2B  F01C         	call	_dispLCD_dataReg
  4489  000D88                     
  4490                           ;main.c: 424:                             estado = 7;
  4491  000D88  0E07               	movlw	7
  4492  000D8A  0100               	movlb	0	; () banked
  4493  000D8C  6FBB               	movwf	main@estado& (0+255),b
  4494                           
  4495                           ;main.c: 425:                             break;
  4496  000D8E  EFED  F00D         	goto	l7141
  4497  000D92                     l6785:
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;main.c: 428:                             tecla = teclado_borda();
  4501  000D92  ECB7  F01D         	call	_teclado_borda	;wreg free
  4502  000D96  0100               	movlb	0	; () banked
  4503  000D98  6FBC               	movwf	main@tecla& (0+255),b
  4504                           
  4505                           ;main.c: 429:                             switch(tecla)
  4506  000D9A  EF63  F007         	goto	l6825
  4507  000D9E                     l6787:
  4508                           
  4509                           ; BSR set to: 0
  4510  000D9E  51BC               	movf	main@tecla& (0+255),w,b
  4511  000DA0  ECD5  F018         	call	_alt_atuador
  4512  000DA4  0E04               	movlw	4
  4513  000DA6  6E33               	movwf	dispLCD_lincol@col^0,c
  4514  000DA8  0E03               	movlw	3
  4515  000DAA  EC98  F01A         	call	_dispLCD_lincol
  4516  000DAE  0E41               	movlw	65
  4517  000DB0  EC85  F018         	call	_ler_atuador
  4518  000DB4  0900               	iorlw	0
  4519  000DB6  A4D8               	btfss	status,2,c
  4520  000DB8  EFE0  F006         	goto	u5081
  4521  000DBC  EFE2  F006         	goto	u5080
  4522  000DC0                     u5081:
  4523  000DC0  EFE9  F006         	goto	l6791
  4524  000DC4                     u5080:
  4525  000DC4  0E00               	movlw	0
  4526  000DC6  0100               	movlb	0	; () banked
  4527  000DC8  6F93               	movwf	(_main$949+1)& (0+255),b
  4528  000DCA  0E2D               	movlw	45
  4529  000DCC  6F92               	movwf	_main$949& (0+255),b
  4530  000DCE  EFEE  F006         	goto	l6793
  4531  000DD2                     l6791:
  4532  000DD2  0E00               	movlw	0
  4533  000DD4  0100               	movlb	0	; () banked
  4534  000DD6  6F93               	movwf	(_main$949+1)& (0+255),b
  4535  000DD8  0E2B               	movlw	43
  4536  000DDA  6F92               	movwf	_main$949& (0+255),b
  4537  000DDC                     l6793:
  4538                           
  4539                           ; BSR set to: 0
  4540  000DDC  5192               	movf	_main$949& (0+255),w,b
  4541  000DDE  EC2B  F01C         	call	_dispLCD_dataReg
  4542  000DE2  EFED  F00D         	goto	l7141
  4543  000DE6                     l6795:
  4544                           
  4545                           ; BSR set to: 0
  4546  000DE6  51BC               	movf	main@tecla& (0+255),w,b
  4547  000DE8  ECD5  F018         	call	_alt_atuador
  4548  000DEC  0E08               	movlw	8
  4549  000DEE  6E33               	movwf	dispLCD_lincol@col^0,c
  4550  000DF0  0E03               	movlw	3
  4551  000DF2  EC98  F01A         	call	_dispLCD_lincol
  4552  000DF6  0E42               	movlw	66
  4553  000DF8  EC85  F018         	call	_ler_atuador
  4554  000DFC  0900               	iorlw	0
  4555  000DFE  A4D8               	btfss	status,2,c
  4556  000E00  EF04  F007         	goto	u5091
  4557  000E04  EF06  F007         	goto	u5090
  4558  000E08                     u5091:
  4559  000E08  EF0D  F007         	goto	l6799
  4560  000E0C                     u5090:
  4561  000E0C  0E00               	movlw	0
  4562  000E0E  0100               	movlb	0	; () banked
  4563  000E10  6F95               	movwf	(_main$950+1)& (0+255),b
  4564  000E12  0E2D               	movlw	45
  4565  000E14  6F94               	movwf	_main$950& (0+255),b
  4566  000E16  EF12  F007         	goto	l6801
  4567  000E1A                     l6799:
  4568  000E1A  0E00               	movlw	0
  4569  000E1C  0100               	movlb	0	; () banked
  4570  000E1E  6F95               	movwf	(_main$950+1)& (0+255),b
  4571  000E20  0E2B               	movlw	43
  4572  000E22  6F94               	movwf	_main$950& (0+255),b
  4573  000E24                     l6801:
  4574                           
  4575                           ; BSR set to: 0
  4576  000E24  5194               	movf	_main$950& (0+255),w,b
  4577  000E26  EC2B  F01C         	call	_dispLCD_dataReg
  4578  000E2A  EFED  F00D         	goto	l7141
  4579  000E2E                     l6803:
  4580                           
  4581                           ; BSR set to: 0
  4582  000E2E  51BC               	movf	main@tecla& (0+255),w,b
  4583  000E30  ECD5  F018         	call	_alt_atuador
  4584  000E34  0E0C               	movlw	12
  4585  000E36  6E33               	movwf	dispLCD_lincol@col^0,c
  4586  000E38  0E03               	movlw	3
  4587  000E3A  EC98  F01A         	call	_dispLCD_lincol
  4588  000E3E  0E43               	movlw	67
  4589  000E40  EC85  F018         	call	_ler_atuador
  4590  000E44  0900               	iorlw	0
  4591  000E46  A4D8               	btfss	status,2,c
  4592  000E48  EF28  F007         	goto	u5101
  4593  000E4C  EF2A  F007         	goto	u5100
  4594  000E50                     u5101:
  4595  000E50  EF31  F007         	goto	l6807
  4596  000E54                     u5100:
  4597  000E54  0E00               	movlw	0
  4598  000E56  0100               	movlb	0	; () banked
  4599  000E58  6F97               	movwf	(_main$951+1)& (0+255),b
  4600  000E5A  0E2D               	movlw	45
  4601  000E5C  6F96               	movwf	_main$951& (0+255),b
  4602  000E5E  EF36  F007         	goto	l6809
  4603  000E62                     l6807:
  4604  000E62  0E00               	movlw	0
  4605  000E64  0100               	movlb	0	; () banked
  4606  000E66  6F97               	movwf	(_main$951+1)& (0+255),b
  4607  000E68  0E2B               	movlw	43
  4608  000E6A  6F96               	movwf	_main$951& (0+255),b
  4609  000E6C                     l6809:
  4610                           
  4611                           ; BSR set to: 0
  4612  000E6C  5196               	movf	_main$951& (0+255),w,b
  4613  000E6E  EC2B  F01C         	call	_dispLCD_dataReg
  4614  000E72  EFED  F00D         	goto	l7141
  4615  000E76                     l6811:
  4616                           
  4617                           ; BSR set to: 0
  4618  000E76  51BC               	movf	main@tecla& (0+255),w,b
  4619  000E78  ECD5  F018         	call	_alt_atuador
  4620  000E7C  0E10               	movlw	16
  4621  000E7E  6E33               	movwf	dispLCD_lincol@col^0,c
  4622  000E80  0E03               	movlw	3
  4623  000E82  EC98  F01A         	call	_dispLCD_lincol
  4624  000E86  0E44               	movlw	68
  4625  000E88  EC85  F018         	call	_ler_atuador
  4626  000E8C  0900               	iorlw	0
  4627  000E8E  A4D8               	btfss	status,2,c
  4628  000E90  EF4C  F007         	goto	u5111
  4629  000E94  EF4E  F007         	goto	u5110
  4630  000E98                     u5111:
  4631  000E98  EF55  F007         	goto	l6815
  4632  000E9C                     u5110:
  4633  000E9C  0E00               	movlw	0
  4634  000E9E  0100               	movlb	0	; () banked
  4635  000EA0  6F99               	movwf	(_main$952+1)& (0+255),b
  4636  000EA2  0E2D               	movlw	45
  4637  000EA4  6F98               	movwf	_main$952& (0+255),b
  4638  000EA6  EF5A  F007         	goto	l6817
  4639  000EAA                     l6815:
  4640  000EAA  0E00               	movlw	0
  4641  000EAC  0100               	movlb	0	; () banked
  4642  000EAE  6F99               	movwf	(_main$952+1)& (0+255),b
  4643  000EB0  0E2B               	movlw	43
  4644  000EB2  6F98               	movwf	_main$952& (0+255),b
  4645  000EB4                     l6817:
  4646                           
  4647                           ; BSR set to: 0
  4648  000EB4  5198               	movf	_main$952& (0+255),w,b
  4649  000EB6  EC2B  F01C         	call	_dispLCD_dataReg
  4650  000EBA  EFED  F00D         	goto	l7141
  4651  000EBE                     l6819:
  4652                           
  4653                           ; BSR set to: 0
  4654  000EBE  0E0A               	movlw	10
  4655  000EC0  6FBB               	movwf	main@estado& (0+255),b
  4656  000EC2  EFED  F00D         	goto	l7141
  4657  000EC6                     l6825:
  4658                           
  4659                           ; BSR set to: 0
  4660  000EC6  51BC               	movf	main@tecla& (0+255),w,b
  4661  000EC8  6E59               	movwf	??_main^0,c
  4662  000ECA  6A5A               	clrf	(??_main+1)^0,c
  4663                           
  4664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4665                           ; Switch size 1, requested type "simple"
  4666                           ; Number of cases is 1, Range of values is 0 to 0
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte            4     3 (average)
  4670                           ;	Chosen strategy is simple_byte
  4671  000ECC  505A               	movf	(??_main+1)^0,w,c
  4672  000ECE  0A00               	xorlw	0	; case 0
  4673  000ED0  B4D8               	btfsc	status,2,c
  4674  000ED2  EF6D  F007         	goto	l7995
  4675  000ED6  EFED  F00D         	goto	l7141
  4676  000EDA                     l7995:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ; Switch size 1, requested type "simple"
  4680                           ; Number of cases is 6, Range of values is 35 to 68
  4681                           ; switch strategies available:
  4682                           ; Name         Instructions Cycles
  4683                           ; simple_byte           19    10 (average)
  4684                           ;	Chosen strategy is simple_byte
  4685  000EDA  5059               	movf	??_main^0,w,c
  4686  000EDC  0A23               	xorlw	35	; case 35
  4687  000EDE  B4D8               	btfsc	status,2,c
  4688  000EE0  EF5F  F007         	goto	l6819
  4689  000EE4  0A09               	xorlw	9	; case 42
  4690  000EE6  B4D8               	btfsc	status,2,c
  4691  000EE8  EF74  F001         	goto	l6481
  4692  000EEC  0A6B               	xorlw	107	; case 65
  4693  000EEE  B4D8               	btfsc	status,2,c
  4694  000EF0  EFCF  F006         	goto	l6787
  4695  000EF4  0A03               	xorlw	3	; case 66
  4696  000EF6  B4D8               	btfsc	status,2,c
  4697  000EF8  EFF3  F006         	goto	l6795
  4698  000EFC  0A01               	xorlw	1	; case 67
  4699  000EFE  B4D8               	btfsc	status,2,c
  4700  000F00  EF17  F007         	goto	l6803
  4701  000F04  0A07               	xorlw	7	; case 68
  4702  000F06  B4D8               	btfsc	status,2,c
  4703  000F08  EF3B  F007         	goto	l6811
  4704  000F0C  EFED  F00D         	goto	l7141
  4705  000F10                     l6827:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;main.c: 443:                             init_cond = salva_atuadores_init();
  4709  000F10  ECB3  F019         	call	_salva_atuadores_init	;wreg free
  4710  000F14  0100               	movlb	0	; () banked
  4711  000F16  6FB2               	movwf	main@init_cond& (0+255),b
  4712  000F18                     
  4713                           ; BSR set to: 0
  4714                           ;main.c: 444:                             IHM.clr();
  4715  000F18  EE20  F0E9         	lfsr	2,_IHM+8
  4716  000F1C  D802               	call	u5128
  4717  000F1E  EF9B  F007         	goto	u5129
  4718  000F22                     u5128:
  4719  000F22  0005               	push	
  4720  000F24  6EFA               	movwf	pclath,c
  4721  000F26  50DE               	movf	postinc2,w,c
  4722  000F28  6EFD               	movwf	tosl,c
  4723  000F2A  50DE               	movf	postinc2,w,c
  4724  000F2C  6EFE               	movwf	tosh,c
  4725  000F2E  50F8               	movf	tblptru,w,c
  4726  000F30  6EFF               	movwf	tosu,c
  4727  000F32  50FA               	movf	pclath,w,c
  4728  000F34  0012               	return		;indir
  4729  000F36                     u5129:
  4730  000F36                     
  4731                           ;main.c: 445:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
  4732  000F36  EE20  F0E5         	lfsr	2,_IHM+4
  4733  000F3A  D802               	call	u5138
  4734  000F3C  EFB1  F007         	goto	u5139
  4735  000F40                     u5138:
  4736  000F40  0005               	push	
  4737  000F42  6EFA               	movwf	pclath,c
  4738  000F44  50DE               	movf	postinc2,w,c
  4739  000F46  6EFD               	movwf	tosl,c
  4740  000F48  50DE               	movf	postinc2,w,c
  4741  000F4A  6EFE               	movwf	tosh,c
  4742  000F4C  50F8               	movf	tblptru,w,c
  4743  000F4E  6EFF               	movwf	tosu,c
  4744  000F50  50FA               	movf	pclath,w,c
  4745  000F52  0E00               	movlw	0
  4746  000F54  6E38               	movwf	dispLCD@col^0,c
  4747  000F56  0EBD               	movlw	low STR_21
  4748  000F58  6E39               	movwf	dispLCD@str^0,c
  4749  000F5A  0E7E               	movlw	high STR_21
  4750  000F5C  6E3A               	movwf	(dispLCD@str+1)^0,c
  4751  000F5E  0E00               	movlw	0
  4752  000F60  0012               	return		;indir
  4753  000F62                     u5139:
  4754  000F62                     l6833:
  4755                           
  4756                           ;main.c: 446:                             estado = 14;
  4757  000F62  0E0E               	movlw	14
  4758  000F64  0100               	movlb	0	; () banked
  4759  000F66  6FBB               	movwf	main@estado& (0+255),b
  4760                           
  4761                           ;main.c: 447:                             break;
  4762  000F68  EFED  F00D         	goto	l7141
  4763  000F6C                     l6835:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;main.c: 450:                             tecla = teclado_borda();
  4767  000F6C  ECB7  F01D         	call	_teclado_borda
  4768  000F70  0100               	movlb	0	; () banked
  4769  000F72  6FBC               	movwf	main@tecla& (0+255),b
  4770                           
  4771                           ;main.c: 451:                             switch( tecla )
  4772  000F74  EF0F  F008         	goto	l6871
  4773  000F78                     l787:
  4774  000F78                     l6837:
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;main.c: 457:                                             if( fifo_disponivel() )
  4778  000F78  EC11  F01F         	call	_fifo_disponivel	;wreg free
  4779  000F7C  0900               	iorlw	0
  4780  000F7E  B4D8               	btfsc	status,2,c
  4781  000F80  EFC4  F007         	goto	u5141
  4782  000F84  EFC6  F007         	goto	u5140
  4783  000F88                     u5141:
  4784  000F88  EFED  F00D         	goto	l7141
  4785  000F8C                     u5140:
  4786  000F8C                     
  4787                           ;main.c: 458:                                             {;main.c: 459:                
      +                                                           alt_atuador(tecla);
  4788  000F8C  0100               	movlb	0	; () banked
  4789  000F8E  51BC               	movf	main@tecla& (0+255),w,b
  4790  000F90  ECD5  F018         	call	_alt_atuador
  4791                           
  4792                           ;main.c: 460:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
  4793  000F94  0100               	movlb	0	; () banked
  4794  000F96  51BC               	movf	main@tecla& (0+255),w,b
  4795  000F98  EC85  F018         	call	_ler_atuador
  4796  000F9C  0900               	iorlw	0
  4797  000F9E  A4D8               	btfss	status,2,c
  4798  000FA0  EFD4  F007         	goto	u5151
  4799  000FA4  EFD6  F007         	goto	u5150
  4800  000FA8                     u5151:
  4801  000FA8  EFE1  F007         	goto	l791
  4802  000FAC                     u5150:
  4803  000FAC  0E20               	movlw	32
  4804  000FAE  C0BC  F059         	movff	main@tecla,??_main
  4805  000FB2  6A5A               	clrf	(??_main+1)^0,c
  4806  000FB4  1059               	iorwf	??_main^0,w,c
  4807  000FB6  0100               	movlb	0	; () banked
  4808  000FB8  6F9A               	movwf	_main$956& (0+255),b
  4809  000FBA  505A               	movf	(??_main+1)^0,w,c
  4810  000FBC  6F9B               	movwf	(_main$956+1)& (0+255),b
  4811  000FBE  EFE5  F007         	goto	l6843
  4812  000FC2                     l791:
  4813  000FC2  C0BC  F09A         	movff	main@tecla,_main$956
  4814  000FC6  0100               	movlb	0	; () banked
  4815  000FC8  6B9B               	clrf	(_main$956+1)& (0+255),b
  4816  000FCA                     l6843:
  4817                           
  4818                           ; BSR set to: 0
  4819  000FCA  519A               	movf	_main$956& (0+255),w,b
  4820  000FCC  ECAC  F01B         	call	_fifo_add
  4821  000FD0  EF0D  F003         	goto	l6561
  4822  000FD4                     l6847:
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;main.c: 465:                                             fifo_indicePrint_inc();
  4826  000FD4  ECC9  F01A         	call	_fifo_indicePrint_inc	;wreg free
  4827  000FD8  EF0D  F003         	goto	l6561
  4828  000FDC                     l6851:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;main.c: 469:                                             fifo_indicePrint_dec();
  4832  000FDC  EC3C  F01F         	call	_fifo_indicePrint_dec	;wreg free
  4833  000FE0  EF0D  F003         	goto	l6561
  4834  000FE4                     l6855:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;main.c: 474:                                             if(fifo_indice() == 2 )
  4838  000FE4  ECC1  F01F         	call	_fifo_indice	;wreg free
  4839  000FE8  0A02               	xorlw	2
  4840  000FEA  A4D8               	btfss	status,2,c
  4841  000FEC  EFFA  F007         	goto	u5161
  4842  000FF0  EFFC  F007         	goto	u5160
  4843  000FF4                     u5161:
  4844  000FF4  EFFE  F007         	goto	l6859
  4845  000FF8                     u5160:
  4846  000FF8  EFB5  F001         	goto	l6497
  4847  000FFC                     l6859:
  4848                           
  4849                           ;main.c: 477:                                             {;main.c: 478:                
      +                                                           fifo_delete();
  4850  000FFC  EC22  F019         	call	_fifo_delete	;wreg free
  4851  001000  EF0D  F003         	goto	l6561
  4852  001004                     l6863:
  4853  001004  0E4A               	movlw	74
  4854  001006  0100               	movlb	0	; () banked
  4855  001008  6FBB               	movwf	main@estado& (0+255),b
  4856  00100A  EFED  F00D         	goto	l7141
  4857  00100E                     l6865:
  4858                           
  4859                           ; BSR set to: 0
  4860  00100E  0E29               	movlw	41
  4861  001010  6FBB               	movwf	main@estado& (0+255),b
  4862  001012  EFED  F00D         	goto	l7141
  4863  001016                     l6867:
  4864                           
  4865                           ; BSR set to: 0
  4866  001016  0E5A               	movlw	90
  4867  001018  6FBB               	movwf	main@estado& (0+255),b
  4868  00101A  EFED  F00D         	goto	l7141
  4869  00101E                     l6871:
  4870                           
  4871                           ; BSR set to: 0
  4872  00101E  51BC               	movf	main@tecla& (0+255),w,b
  4873  001020  6E59               	movwf	??_main^0,c
  4874  001022  6A5A               	clrf	(??_main+1)^0,c
  4875                           
  4876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4877                           ; Switch size 1, requested type "simple"
  4878                           ; Number of cases is 1, Range of values is 0 to 0
  4879                           ; switch strategies available:
  4880                           ; Name         Instructions Cycles
  4881                           ; simple_byte            4     3 (average)
  4882                           ;	Chosen strategy is simple_byte
  4883  001024  505A               	movf	(??_main+1)^0,w,c
  4884  001026  0A00               	xorlw	0	; case 0
  4885  001028  B4D8               	btfsc	status,2,c
  4886  00102A  EF19  F008         	goto	l7997
  4887  00102E  EFED  F00D         	goto	l7141
  4888  001032                     l7997:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ; Switch size 1, requested type "simple"
  4892                           ; Number of cases is 10, Range of values is 35 to 68
  4893                           ; switch strategies available:
  4894                           ; Name         Instructions Cycles
  4895                           ; simple_byte           31    16 (average)
  4896                           ;	Chosen strategy is simple_byte
  4897  001032  5059               	movf	??_main^0,w,c
  4898  001034  0A23               	xorlw	35	; case 35
  4899  001036  B4D8               	btfsc	status,2,c
  4900  001038  EF02  F008         	goto	l6863
  4901  00103C  0A09               	xorlw	9	; case 42
  4902  00103E  B4D8               	btfsc	status,2,c
  4903  001040  EFF2  F007         	goto	l6855
  4904  001044  0A1A               	xorlw	26	; case 48
  4905  001046  B4D8               	btfsc	status,2,c
  4906  001048  EF07  F008         	goto	l6865
  4907  00104C  0A04               	xorlw	4	; case 52
  4908  00104E  B4D8               	btfsc	status,2,c
  4909  001050  EFEE  F007         	goto	l6851
  4910  001054  0A02               	xorlw	2	; case 54
  4911  001056  B4D8               	btfsc	status,2,c
  4912  001058  EFEA  F007         	goto	l6847
  4913  00105C  0A0F               	xorlw	15	; case 57
  4914  00105E  B4D8               	btfsc	status,2,c
  4915  001060  EF0B  F008         	goto	l6867
  4916  001064  0A78               	xorlw	120	; case 65
  4917  001066  B4D8               	btfsc	status,2,c
  4918  001068  EFBC  F007         	goto	l787
  4919  00106C  0A03               	xorlw	3	; case 66
  4920  00106E  B4D8               	btfsc	status,2,c
  4921  001070  EFBC  F007         	goto	l6837
  4922  001074  0A01               	xorlw	1	; case 67
  4923  001076  B4D8               	btfsc	status,2,c
  4924  001078  EFBC  F007         	goto	l6837
  4925  00107C  0A07               	xorlw	7	; case 68
  4926  00107E  B4D8               	btfsc	status,2,c
  4927  001080  EFBC  F007         	goto	l6837
  4928  001084  EFED  F00D         	goto	l7141
  4929  001088                     l6873:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;main.c: 492:                             fifo_print();
  4933  001088  EC49  F00F         	call	_fifo_print	;wreg free
  4934  00108C  EFB1  F007         	goto	l6833
  4935  001090                     l6877:
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;main.c: 497:                             IHM.printpos(3,0,"<  /  >");
  4939  001090  EE20  F0E5         	lfsr	2,_IHM+4
  4940  001094  D802               	call	u5178
  4941  001096  EF5E  F008         	goto	u5179
  4942  00109A                     u5178:
  4943  00109A  0005               	push	
  4944  00109C  6EFA               	movwf	pclath,c
  4945  00109E  50DE               	movf	postinc2,w,c
  4946  0010A0  6EFD               	movwf	tosl,c
  4947  0010A2  50DE               	movf	postinc2,w,c
  4948  0010A4  6EFE               	movwf	tosh,c
  4949  0010A6  50F8               	movf	tblptru,w,c
  4950  0010A8  6EFF               	movwf	tosu,c
  4951  0010AA  50FA               	movf	pclath,w,c
  4952  0010AC  0E00               	movlw	0
  4953  0010AE  6E38               	movwf	dispLCD@col^0,c
  4954  0010B0  0EEF               	movlw	low STR_22
  4955  0010B2  6E39               	movwf	dispLCD@str^0,c
  4956  0010B4  0E7F               	movlw	high STR_22
  4957  0010B6  6E3A               	movwf	(dispLCD@str+1)^0,c
  4958  0010B8  0E03               	movlw	3
  4959  0010BA  0012               	return		;indir
  4960  0010BC                     u5179:
  4961  0010BC                     
  4962                           ;main.c: 498:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
  4963  0010BC  EE20  F0E7         	lfsr	2,_IHM+6
  4964  0010C0  D802               	call	u5188
  4965  0010C2  EF7B  F008         	goto	u5189
  4966  0010C6                     u5188:
  4967  0010C6  0005               	push	
  4968  0010C8  6EFA               	movwf	pclath,c
  4969  0010CA  50DE               	movf	postinc2,w,c
  4970  0010CC  6EFD               	movwf	tosl,c
  4971  0010CE  50DE               	movf	postinc2,w,c
  4972  0010D0  6EFE               	movwf	tosh,c
  4973  0010D2  50F8               	movf	tblptru,w,c
  4974  0010D4  6EFF               	movwf	tosu,c
  4975  0010D6  50FA               	movf	pclath,w,c
  4976  0010D8  0E01               	movlw	1
  4977  0010DA  6E3C               	movwf	dispLCD_num@col^0,c
  4978  0010DC  ECC1  F01F         	call	_fifo_indice
  4979  0010E0  6E59               	movwf	??_main^0,c
  4980  0010E2  0EFE               	movlw	254
  4981  0010E4  2459               	addwf	??_main^0,w,c
  4982  0010E6  6E3D               	movwf	dispLCD_num@num^0,c
  4983  0010E8  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  4984  0010EA  0EFF               	movlw	255
  4985  0010EC  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  4986  0010EE  0E02               	movlw	2
  4987  0010F0  6E3F               	movwf	dispLCD_num@tam^0,c
  4988  0010F2  0E03               	movlw	3
  4989  0010F4  0012               	return		;indir
  4990  0010F6                     u5189:
  4991  0010F6                     
  4992                           ;main.c: 499:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
  4993  0010F6  EE20  F0E7         	lfsr	2,_IHM+6
  4994  0010FA  D802               	call	u5198
  4995  0010FC  EF98  F008         	goto	u5199
  4996  001100                     u5198:
  4997  001100  0005               	push	
  4998  001102  6EFA               	movwf	pclath,c
  4999  001104  50DE               	movf	postinc2,w,c
  5000  001106  6EFD               	movwf	tosl,c
  5001  001108  50DE               	movf	postinc2,w,c
  5002  00110A  6EFE               	movwf	tosh,c
  5003  00110C  50F8               	movf	tblptru,w,c
  5004  00110E  6EFF               	movwf	tosu,c
  5005  001110  50FA               	movf	pclath,w,c
  5006  001112  0E04               	movlw	4
  5007  001114  6E3C               	movwf	dispLCD_num@col^0,c
  5008  001116  ECBF  F01F         	call	_fifo_tam
  5009  00111A  6E59               	movwf	??_main^0,c
  5010  00111C  0EFE               	movlw	254
  5011  00111E  2459               	addwf	??_main^0,w,c
  5012  001120  6E3D               	movwf	dispLCD_num@num^0,c
  5013  001122  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5014  001124  0EFF               	movlw	255
  5015  001126  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5016  001128  0E02               	movlw	2
  5017  00112A  6E3F               	movwf	dispLCD_num@tam^0,c
  5018  00112C  0E03               	movlw	3
  5019  00112E  0012               	return		;indir
  5020  001130                     u5199:
  5021  001130                     
  5022                           ;main.c: 500:                             estado = 11;
  5023  001130  0E0B               	movlw	11
  5024  001132  0100               	movlb	0	; () banked
  5025  001134  6FBB               	movwf	main@estado& (0+255),b
  5026                           
  5027                           ;main.c: 501:                             break;
  5028  001136  EFED  F00D         	goto	l7141
  5029  00113A                     l6885:
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;main.c: 505:                             estado = 70;
  5033  00113A  0E46               	movlw	70
  5034  00113C  6FBB               	movwf	main@estado& (0+255),b
  5035                           
  5036                           ;main.c: 506:                             meAtuadores = 1;
  5037  00113E  0E01               	movlw	1
  5038  001140  6FAF               	movwf	main@meAtuadores& (0+255),b
  5039                           
  5040                           ;main.c: 507:                             break;
  5041  001142  EFED  F00D         	goto	l7141
  5042  001146                     l6887:
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;main.c: 510:                             if( meAtuadores == 3 && botao != 2 )
  5046  001146  0E03               	movlw	3
  5047  001148  19AF               	xorwf	main@meAtuadores& (0+255),w,b
  5048  00114A  A4D8               	btfss	status,2,c
  5049  00114C  EFAA  F008         	goto	u5201
  5050  001150  EFAC  F008         	goto	u5200
  5051  001154                     u5201:
  5052  001154  EF46  F009         	goto	l6907
  5053  001158                     u5200:
  5054  001158                     
  5055                           ; BSR set to: 0
  5056  001158  0E02               	movlw	2
  5057  00115A  19B3               	xorwf	main@botao& (0+255),w,b
  5058  00115C  B4D8               	btfsc	status,2,c
  5059  00115E  EFB3  F008         	goto	u5211
  5060  001162  EFB5  F008         	goto	u5210
  5061  001166                     u5211:
  5062  001166  EF46  F009         	goto	l6907
  5063  00116A                     u5210:
  5064  00116A                     
  5065                           ; BSR set to: 0
  5066                           ;main.c: 511:                             {;main.c: 512:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
  5067  00116A  EE20  F0E5         	lfsr	2,_IHM+4
  5068  00116E  D802               	call	u5228
  5069  001170  EFCB  F008         	goto	u5229
  5070  001174                     u5228:
  5071  001174  0005               	push	
  5072  001176  6EFA               	movwf	pclath,c
  5073  001178  50DE               	movf	postinc2,w,c
  5074  00117A  6EFD               	movwf	tosl,c
  5075  00117C  50DE               	movf	postinc2,w,c
  5076  00117E  6EFE               	movwf	tosh,c
  5077  001180  50F8               	movf	tblptru,w,c
  5078  001182  6EFF               	movwf	tosu,c
  5079  001184  50FA               	movf	pclath,w,c
  5080  001186  0E00               	movlw	0
  5081  001188  6E38               	movwf	dispLCD@col^0,c
  5082  00118A  0EEB               	movlw	low STR_23
  5083  00118C  6E39               	movwf	dispLCD@str^0,c
  5084  00118E  0E7D               	movlw	high STR_23
  5085  001190  6E3A               	movwf	(dispLCD@str+1)^0,c
  5086  001192  0E00               	movlw	0
  5087  001194  0012               	return		;indir
  5088  001196                     u5229:
  5089  001196                     
  5090                           ;main.c: 513:                                 printExec(1, -1);
  5091  001196  0EFF               	movlw	255
  5092  001198  6E4A               	movwf	printExec@ind^0,c
  5093  00119A  0E01               	movlw	1
  5094  00119C  ECBB  F010         	call	_printExec
  5095  0011A0                     
  5096                           ;main.c: 514:                                 printExec(9, 0);
  5097  0011A0  0E00               	movlw	0
  5098  0011A2  6E4A               	movwf	printExec@ind^0,c
  5099  0011A4  0E09               	movlw	9
  5100  0011A6  ECBB  F010         	call	_printExec
  5101  0011AA                     
  5102                           ;main.c: 515:                                 printExec(14, 1);
  5103  0011AA  0E01               	movlw	1
  5104  0011AC  6E4A               	movwf	printExec@ind^0,c
  5105  0011AE  0E0E               	movlw	14
  5106  0011B0  ECBB  F010         	call	_printExec
  5107  0011B4                     
  5108                           ;main.c: 516:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
  5109  0011B4  EE20  F0E5         	lfsr	2,_IHM+4
  5110  0011B8  D802               	call	u5238
  5111  0011BA  EFF0  F008         	goto	u5239
  5112  0011BE                     u5238:
  5113  0011BE  0005               	push	
  5114  0011C0  6EFA               	movwf	pclath,c
  5115  0011C2  50DE               	movf	postinc2,w,c
  5116  0011C4  6EFD               	movwf	tosl,c
  5117  0011C6  50DE               	movf	postinc2,w,c
  5118  0011C8  6EFE               	movwf	tosh,c
  5119  0011CA  50F8               	movf	tblptru,w,c
  5120  0011CC  6EFF               	movwf	tosu,c
  5121  0011CE  50FA               	movf	pclath,w,c
  5122  0011D0  0E00               	movlw	0
  5123  0011D2  6E38               	movwf	dispLCD@col^0,c
  5124  0011D4  0EAC               	movlw	low STR_24
  5125  0011D6  6E39               	movwf	dispLCD@str^0,c
  5126  0011D8  0E7D               	movlw	high STR_24
  5127  0011DA  6E3A               	movwf	(dispLCD@str+1)^0,c
  5128  0011DC  0E02               	movlw	2
  5129  0011DE  0012               	return		;indir
  5130  0011E0                     u5239:
  5131  0011E0                     
  5132                           ;main.c: 517:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
  5133  0011E0  EE20  F0E7         	lfsr	2,_IHM+6
  5134  0011E4  D802               	call	u5248
  5135  0011E6  EF0D  F009         	goto	u5249
  5136  0011EA                     u5248:
  5137  0011EA  0005               	push	
  5138  0011EC  6EFA               	movwf	pclath,c
  5139  0011EE  50DE               	movf	postinc2,w,c
  5140  0011F0  6EFD               	movwf	tosl,c
  5141  0011F2  50DE               	movf	postinc2,w,c
  5142  0011F4  6EFE               	movwf	tosh,c
  5143  0011F6  50F8               	movf	tblptru,w,c
  5144  0011F8  6EFF               	movwf	tosu,c
  5145  0011FA  50FA               	movf	pclath,w,c
  5146  0011FC  0E04               	movlw	4
  5147  0011FE  6E3C               	movwf	dispLCD_num@col^0,c
  5148  001200  ECC1  F01F         	call	_fifo_indice
  5149  001204  6E59               	movwf	??_main^0,c
  5150  001206  0EFE               	movlw	254
  5151  001208  2459               	addwf	??_main^0,w,c
  5152  00120A  6E3D               	movwf	dispLCD_num@num^0,c
  5153  00120C  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5154  00120E  0EFF               	movlw	255
  5155  001210  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5156  001212  0E02               	movlw	2
  5157  001214  6E3F               	movwf	dispLCD_num@tam^0,c
  5158  001216  0E02               	movlw	2
  5159  001218  0012               	return		;indir
  5160  00121A                     u5249:
  5161  00121A                     
  5162                           ;main.c: 518:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
  5163  00121A  EE20  F0E7         	lfsr	2,_IHM+6
  5164  00121E  D802               	call	u5258
  5165  001220  EF2A  F009         	goto	u5259
  5166  001224                     u5258:
  5167  001224  0005               	push	
  5168  001226  6EFA               	movwf	pclath,c
  5169  001228  50DE               	movf	postinc2,w,c
  5170  00122A  6EFD               	movwf	tosl,c
  5171  00122C  50DE               	movf	postinc2,w,c
  5172  00122E  6EFE               	movwf	tosh,c
  5173  001230  50F8               	movf	tblptru,w,c
  5174  001232  6EFF               	movwf	tosu,c
  5175  001234  50FA               	movf	pclath,w,c
  5176  001236  0E01               	movlw	1
  5177  001238  6E3C               	movwf	dispLCD_num@col^0,c
  5178  00123A  ECBD  F01F         	call	_getIndicePassos
  5179  00123E  6E59               	movwf	??_main^0,c
  5180  001240  0EFF               	movlw	255
  5181  001242  2459               	addwf	??_main^0,w,c
  5182  001244  6E3D               	movwf	dispLCD_num@num^0,c
  5183  001246  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  5184  001248  0EFF               	movlw	255
  5185  00124A  223E               	addwfc	(dispLCD_num@num+1)^0,f,c
  5186  00124C  0E02               	movlw	2
  5187  00124E  6E3F               	movwf	dispLCD_num@tam^0,c
  5188  001250  0E02               	movlw	2
  5189  001252  0012               	return		;indir
  5190  001254                     u5259:
  5191  001254                     
  5192                           ;main.c: 519:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
  5193  001254  EE20  F0E7         	lfsr	2,_IHM+6
  5194  001258  D802               	call	u5268
  5195  00125A  EF46  F009         	goto	u5269
  5196  00125E                     u5268:
  5197  00125E  0005               	push	
  5198  001260  6EFA               	movwf	pclath,c
  5199  001262  50DE               	movf	postinc2,w,c
  5200  001264  6EFD               	movwf	tosl,c
  5201  001266  50DE               	movf	postinc2,w,c
  5202  001268  6EFE               	movwf	tosh,c
  5203  00126A  50F8               	movf	tblptru,w,c
  5204  00126C  6EFF               	movwf	tosu,c
  5205  00126E  50FA               	movf	pclath,w,c
  5206  001270  0E0B               	movlw	11
  5207  001272  6E3C               	movwf	dispLCD_num@col^0,c
  5208  001274  EC9D  F01F         	call	_getContCiclos
  5209  001278  0E01               	movlw	1
  5210  00127A  2431               	addwf	?_getContCiclos^0,w,c
  5211  00127C  6E3D               	movwf	dispLCD_num@num^0,c
  5212  00127E  0E00               	movlw	0
  5213  001280  2032               	addwfc	(?_getContCiclos+1)^0,w,c
  5214  001282  6E3E               	movwf	(dispLCD_num@num+1)^0,c
  5215  001284  0E05               	movlw	5
  5216  001286  6E3F               	movwf	dispLCD_num@tam^0,c
  5217  001288  0E02               	movlw	2
  5218  00128A  0012               	return		;indir
  5219  00128C                     u5269:
  5220  00128C                     l6907:
  5221                           
  5222                           ;main.c: 522:                             if(meAtuadores == 0)
  5223  00128C  0100               	movlb	0	; () banked
  5224  00128E  51AF               	movf	main@meAtuadores& (0+255),w,b
  5225  001290  A4D8               	btfss	status,2,c
  5226  001292  EF4D  F009         	goto	u5271
  5227  001296  EF4F  F009         	goto	u5270
  5228  00129A                     u5271:
  5229  00129A  EF60  F009         	goto	l6913
  5230  00129E                     u5270:
  5231  00129E                     
  5232                           ; BSR set to: 0
  5233                           ;main.c: 523:                             {;main.c: 524:                                
      +                           estado = 16;
  5234  00129E  0E10               	movlw	16
  5235  0012A0  6FBB               	movwf	main@estado& (0+255),b
  5236  0012A2                     
  5237                           ; BSR set to: 0
  5238                           ;main.c: 525:                                 IHM.clr();
  5239  0012A2  EE20  F0E9         	lfsr	2,_IHM+8
  5240  0012A6  D802               	call	u5288
  5241  0012A8  EF60  F009         	goto	u5289
  5242  0012AC                     u5288:
  5243  0012AC  0005               	push	
  5244  0012AE  6EFA               	movwf	pclath,c
  5245  0012B0  50DE               	movf	postinc2,w,c
  5246  0012B2  6EFD               	movwf	tosl,c
  5247  0012B4  50DE               	movf	postinc2,w,c
  5248  0012B6  6EFE               	movwf	tosh,c
  5249  0012B8  50F8               	movf	tblptru,w,c
  5250  0012BA  6EFF               	movwf	tosu,c
  5251  0012BC  50FA               	movf	pclath,w,c
  5252  0012BE  0012               	return		;indir
  5253  0012C0                     u5289:
  5254  0012C0                     l6913:
  5255                           
  5256                           ;main.c: 527:                             tecla = teclado_borda();
  5257  0012C0  ECB7  F01D         	call	_teclado_borda
  5258  0012C4  0100               	movlb	0	; () banked
  5259  0012C6  6FBC               	movwf	main@tecla& (0+255),b
  5260                           
  5261                           ;main.c: 528:                             switch(tecla)
  5262  0012C8  EF7F  F009         	goto	l6927
  5263  0012CC                     l6915:
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;main.c: 531:                                     botao = 1;
  5267  0012CC  0E01               	movlw	1
  5268  0012CE  6FB3               	movwf	main@botao& (0+255),b
  5269                           
  5270                           ;main.c: 532:                                     break;
  5271  0012D0  EFED  F00D         	goto	l7141
  5272  0012D4                     l6917:
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;main.c: 535:                                     botao = 2;
  5276  0012D4  0E02               	movlw	2
  5277  0012D6  6FB3               	movwf	main@botao& (0+255),b
  5278                           
  5279                           ;main.c: 536:                                     break;
  5280  0012D8  EFED  F00D         	goto	l7141
  5281  0012DC                     l6919:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;main.c: 539:                                     botao = 0;
  5285  0012DC  0E00               	movlw	0
  5286  0012DE  6FB3               	movwf	main@botao& (0+255),b
  5287                           
  5288                           ;main.c: 540:                                     break;
  5289  0012E0  EFED  F00D         	goto	l7141
  5290  0012E4                     l6921:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;main.c: 543:                                     if(botao == 2)
  5294  0012E4  0E02               	movlw	2
  5295  0012E6  19B3               	xorwf	main@botao& (0+255),w,b
  5296  0012E8  A4D8               	btfss	status,2,c
  5297  0012EA  EF79  F009         	goto	u5291
  5298  0012EE  EF7B  F009         	goto	u5290
  5299  0012F2                     u5291:
  5300  0012F2  EFED  F00D         	goto	l7141
  5301  0012F6                     u5290:
  5302  0012F6                     
  5303                           ; BSR set to: 0
  5304                           ;main.c: 544:                                         botao = 3;
  5305  0012F6  0E03               	movlw	3
  5306  0012F8  6FB3               	movwf	main@botao& (0+255),b
  5307  0012FA  EFED  F00D         	goto	l7141
  5308  0012FE                     l6927:
  5309                           
  5310                           ; BSR set to: 0
  5311  0012FE  51BC               	movf	main@tecla& (0+255),w,b
  5312  001300  6E59               	movwf	??_main^0,c
  5313  001302  6A5A               	clrf	(??_main+1)^0,c
  5314                           
  5315                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5316                           ; Switch size 1, requested type "simple"
  5317                           ; Number of cases is 1, Range of values is 0 to 0
  5318                           ; switch strategies available:
  5319                           ; Name         Instructions Cycles
  5320                           ; simple_byte            4     3 (average)
  5321                           ;	Chosen strategy is simple_byte
  5322  001304  505A               	movf	(??_main+1)^0,w,c
  5323  001306  0A00               	xorlw	0	; case 0
  5324  001308  B4D8               	btfsc	status,2,c
  5325  00130A  EF89  F009         	goto	l7999
  5326  00130E  EFED  F00D         	goto	l7141
  5327  001312                     l7999:
  5328                           
  5329                           ; BSR set to: 0
  5330                           ; Switch size 1, requested type "simple"
  5331                           ; Number of cases is 4, Range of values is 35 to 53
  5332                           ; switch strategies available:
  5333                           ; Name         Instructions Cycles
  5334                           ; simple_byte           13     7 (average)
  5335                           ;	Chosen strategy is simple_byte
  5336  001312  5059               	movf	??_main^0,w,c
  5337  001314  0A23               	xorlw	35	; case 35
  5338  001316  B4D8               	btfsc	status,2,c
  5339  001318  EF66  F009         	goto	l6915
  5340  00131C  0A13               	xorlw	19	; case 48
  5341  00131E  B4D8               	btfsc	status,2,c
  5342  001320  EF6E  F009         	goto	l6919
  5343  001324  0A01               	xorlw	1	; case 49
  5344  001326  B4D8               	btfsc	status,2,c
  5345  001328  EF72  F009         	goto	l6921
  5346  00132C  0A04               	xorlw	4	; case 53
  5347  00132E  B4D8               	btfsc	status,2,c
  5348  001330  EF6A  F009         	goto	l6917
  5349  001334  EFED  F00D         	goto	l7141
  5350  001338                     l6929:
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;main.c: 550:                             tecla = teclado_borda();
  5354  001338  ECB7  F01D         	call	_teclado_borda	;wreg free
  5355  00133C  0100               	movlb	0	; () banked
  5356  00133E  6FBC               	movwf	main@tecla& (0+255),b
  5357  001340                     
  5358                           ; BSR set to: 0
  5359                           ;main.c: 551:                             if(tecla >= '0' && tecla <= '9')
  5360  001340  0E2F               	movlw	47
  5361  001342  65BC               	cpfsgt	main@tecla& (0+255),b
  5362  001344  EFA6  F009         	goto	u5301
  5363  001348  EFA8  F009         	goto	u5300
  5364  00134C                     u5301:
  5365  00134C  EFC9  F009         	goto	l6941
  5366  001350                     u5300:
  5367  001350                     
  5368                           ; BSR set to: 0
  5369  001350  0E3A               	movlw	58
  5370  001352  61BC               	cpfslt	main@tecla& (0+255),b
  5371  001354  EFAE  F009         	goto	u5311
  5372  001358  EFB0  F009         	goto	u5310
  5373  00135C                     u5311:
  5374  00135C  EFC9  F009         	goto	l6941
  5375  001360                     u5310:
  5376  001360                     
  5377                           ; BSR set to: 0
  5378                           ;main.c: 552:                             {;main.c: 553:                                
      +                           dignum_conc(tecla, &num);
  5379  001360  0EB4               	movlw	low main@num
  5380  001362  6E37               	movwf	dignum_conc@ptrNum^0,c
  5381  001364  0E00               	movlw	high main@num
  5382  001366  6E38               	movwf	(dignum_conc@ptrNum+1)^0,c
  5383  001368  51BC               	movf	main@tecla& (0+255),w,b
  5384  00136A  EC9A  F01C         	call	_dignum_conc
  5385  00136E                     
  5386                           ;main.c: 554:                                 if(num > 120)
  5387  00136E  0100               	movlb	0	; () banked
  5388  001370  51B5               	movf	(main@num+1)& (0+255),w,b
  5389  001372  E109               	bnz	u5320
  5390  001374  0E79               	movlw	121
  5391  001376  5DB4               	subwf	main@num& (0+255),w,b
  5392  001378  A0D8               	btfss	status,0,c
  5393  00137A  EFC1  F009         	goto	u5321
  5394  00137E  EFC3  F009         	goto	u5320
  5395  001382                     u5321:
  5396  001382  EFC7  F009         	goto	l818
  5397  001386                     u5320:
  5398  001386                     
  5399                           ; BSR set to: 0
  5400                           ;main.c: 555:                                     num = 120;
  5401  001386  0E00               	movlw	0
  5402  001388  6FB5               	movwf	(main@num+1)& (0+255),b
  5403  00138A  0E78               	movlw	120
  5404  00138C  6FB4               	movwf	main@num& (0+255),b
  5405  00138E                     l818:
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;main.c: 556:                                 estado = 41;
  5409  00138E  0E29               	movlw	41
  5410  001390  6FBB               	movwf	main@estado& (0+255),b
  5411  001392                     l6941:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;main.c: 558:                             if(tecla == '*')
  5415  001392  0E2A               	movlw	42
  5416  001394  19BC               	xorwf	main@tecla& (0+255),w,b
  5417  001396  A4D8               	btfss	status,2,c
  5418  001398  EFD0  F009         	goto	u5331
  5419  00139C  EFD2  F009         	goto	u5330
  5420  0013A0                     u5331:
  5421  0013A0  EFDB  F009         	goto	l6947
  5422  0013A4                     u5330:
  5423  0013A4                     
  5424                           ; BSR set to: 0
  5425                           ;main.c: 559:                             {;main.c: 560:                                
      +                           dignum_apagar(&num);
  5426  0013A4  0EB4               	movlw	low main@num
  5427  0013A6  6E38               	movwf	dignum_apagar@ptrNum^0,c
  5428  0013A8  0E00               	movlw	high main@num
  5429  0013AA  6E39               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5430  0013AC  EC34  F01E         	call	_dignum_apagar	;wreg free
  5431  0013B0                     
  5432                           ;main.c: 561:                                 estado = 41;
  5433  0013B0  0E29               	movlw	41
  5434  0013B2  0100               	movlb	0	; () banked
  5435  0013B4  6FBB               	movwf	main@estado& (0+255),b
  5436  0013B6                     l6947:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;main.c: 563:                             if(tecla == '#')
  5440  0013B6  0E23               	movlw	35
  5441  0013B8  19BC               	xorwf	main@tecla& (0+255),w,b
  5442  0013BA  A4D8               	btfss	status,2,c
  5443  0013BC  EFE2  F009         	goto	u5341
  5444  0013C0  EFE4  F009         	goto	u5340
  5445  0013C4                     u5341:
  5446  0013C4  EFED  F00D         	goto	l7141
  5447  0013C8                     u5340:
  5448  0013C8                     
  5449                           ; BSR set to: 0
  5450                           ;main.c: 564:                                 estado = 42;
  5451  0013C8  0E2A               	movlw	42
  5452  0013CA  6FBB               	movwf	main@estado& (0+255),b
  5453  0013CC  EFED  F00D         	goto	l7141
  5454  0013D0                     l6951:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;main.c: 569:                             IHM.printpos(2, 0, "config tempo:      s");
  5458  0013D0  EE20  F0E5         	lfsr	2,_IHM+4
  5459  0013D4  D802               	call	u5358
  5460  0013D6  EFFE  F009         	goto	u5359
  5461  0013DA                     u5358:
  5462  0013DA  0005               	push	
  5463  0013DC  6EFA               	movwf	pclath,c
  5464  0013DE  50DE               	movf	postinc2,w,c
  5465  0013E0  6EFD               	movwf	tosl,c
  5466  0013E2  50DE               	movf	postinc2,w,c
  5467  0013E4  6EFE               	movwf	tosh,c
  5468  0013E6  50F8               	movf	tblptru,w,c
  5469  0013E8  6EFF               	movwf	tosu,c
  5470  0013EA  50FA               	movf	pclath,w,c
  5471  0013EC  0E00               	movlw	0
  5472  0013EE  6E38               	movwf	dispLCD@col^0,c
  5473  0013F0  0E26               	movlw	low STR_25
  5474  0013F2  6E39               	movwf	dispLCD@str^0,c
  5475  0013F4  0E7F               	movlw	high STR_25
  5476  0013F6  6E3A               	movwf	(dispLCD@str+1)^0,c
  5477  0013F8  0E02               	movlw	2
  5478  0013FA  0012               	return		;indir
  5479  0013FC                     u5359:
  5480  0013FC                     
  5481                           ;main.c: 570:                             IHM.printv(2, 15, num, 3);
  5482  0013FC  EE20  F0E7         	lfsr	2,_IHM+6
  5483  001400  D802               	call	u5368
  5484  001402  EF16  F00A         	goto	u5369
  5485  001406                     u5368:
  5486  001406  0005               	push	
  5487  001408  6EFA               	movwf	pclath,c
  5488  00140A  50DE               	movf	postinc2,w,c
  5489  00140C  6EFD               	movwf	tosl,c
  5490  00140E  50DE               	movf	postinc2,w,c
  5491  001410  6EFE               	movwf	tosh,c
  5492  001412  50F8               	movf	tblptru,w,c
  5493  001414  6EFF               	movwf	tosu,c
  5494  001416  50FA               	movf	pclath,w,c
  5495  001418  0E0F               	movlw	15
  5496  00141A  6E3C               	movwf	dispLCD_num@col^0,c
  5497  00141C  C0B4  F03D         	movff	main@num,dispLCD_num@num
  5498  001420  C0B5  F03E         	movff	main@num+1,dispLCD_num@num+1
  5499  001424  0E03               	movlw	3
  5500  001426  6E3F               	movwf	dispLCD_num@tam^0,c
  5501  001428  0E02               	movlw	2
  5502  00142A  0012               	return		;indir
  5503  00142C                     u5369:
  5504  00142C                     
  5505                           ;main.c: 571:                             estado = 40;
  5506  00142C  0E28               	movlw	40
  5507  00142E  0100               	movlb	0	; () banked
  5508  001430  6FBB               	movwf	main@estado& (0+255),b
  5509                           
  5510                           ;main.c: 572:                             break;
  5511  001432  EFED  F00D         	goto	l7141
  5512  001436                     l6957:
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;main.c: 575:                             fifo_add_tempo(num);
  5516  001436  51B4               	movf	main@num& (0+255),w,b
  5517  001438  EC80  F01B         	call	_fifo_add_tempo
  5518  00143C                     l6959:
  5519                           
  5520                           ;main.c: 576:                             IHM.clr();
  5521  00143C  EE20  F0E9         	lfsr	2,_IHM+8
  5522  001440  D802               	call	u5378
  5523  001442  EF2D  F00A         	goto	u5379
  5524  001446                     u5378:
  5525  001446  0005               	push	
  5526  001448  6EFA               	movwf	pclath,c
  5527  00144A  50DE               	movf	postinc2,w,c
  5528  00144C  6EFD               	movwf	tosl,c
  5529  00144E  50DE               	movf	postinc2,w,c
  5530  001450  6EFE               	movwf	tosh,c
  5531  001452  50F8               	movf	tblptru,w,c
  5532  001454  6EFF               	movwf	tosu,c
  5533  001456  50FA               	movf	pclath,w,c
  5534  001458  0012               	return		;indir
  5535  00145A                     u5379:
  5536  00145A  EF0D  F003         	goto	l6561
  5537  00145E                     l6963:
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;main.c: 609:                             tecla = teclado_borda();
  5541  00145E  ECB7  F01D         	call	_teclado_borda	;wreg free
  5542  001462  0100               	movlb	0	; () banked
  5543  001464  6FBC               	movwf	main@tecla& (0+255),b
  5544  001466                     
  5545                           ; BSR set to: 0
  5546                           ;main.c: 610:                             if(tecla >= '0' && tecla <= '9')
  5547  001466  0E2F               	movlw	47
  5548  001468  65BC               	cpfsgt	main@tecla& (0+255),b
  5549  00146A  EF39  F00A         	goto	u5381
  5550  00146E  EF3B  F00A         	goto	u5380
  5551  001472                     u5381:
  5552  001472  EF6D  F00A         	goto	l6987
  5553  001476                     u5380:
  5554  001476                     
  5555                           ; BSR set to: 0
  5556  001476  0E3A               	movlw	58
  5557  001478  61BC               	cpfslt	main@tecla& (0+255),b
  5558  00147A  EF41  F00A         	goto	u5391
  5559  00147E  EF43  F00A         	goto	u5390
  5560  001482                     u5391:
  5561  001482  EF6D  F00A         	goto	l6987
  5562  001486                     u5390:
  5563  001486                     
  5564                           ; BSR set to: 0
  5565                           ;main.c: 611:                                {;main.c: 612:                             
      +                              dignum_conc(tecla, &ciclos);
  5566  001486  0EB0               	movlw	low main@ciclos
  5567  001488  6E37               	movwf	dignum_conc@ptrNum^0,c
  5568  00148A  0E00               	movlw	high main@ciclos
  5569  00148C  6E38               	movwf	(dignum_conc@ptrNum+1)^0,c
  5570  00148E  51BC               	movf	main@tecla& (0+255),w,b
  5571  001490  EC9A  F01C         	call	_dignum_conc
  5572  001494                     
  5573                           ;main.c: 613:                                 if(ciclos > 10000)
  5574  001494  0E11               	movlw	17
  5575  001496  0100               	movlb	0	; () banked
  5576  001498  5DB0               	subwf	main@ciclos& (0+255),w,b
  5577  00149A  0E27               	movlw	39
  5578  00149C  59B1               	subwfb	(main@ciclos+1)& (0+255),w,b
  5579  00149E  A0D8               	btfss	status,0,c
  5580  0014A0  EF54  F00A         	goto	u5401
  5581  0014A4  EF56  F00A         	goto	u5400
  5582  0014A8                     u5401:
  5583  0014A8  EF5A  F00A         	goto	l825
  5584  0014AC                     u5400:
  5585  0014AC                     
  5586                           ; BSR set to: 0
  5587                           ;main.c: 614:                                     ciclos = 10000;
  5588  0014AC  0E27               	movlw	39
  5589  0014AE  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  5590  0014B0  0E10               	movlw	16
  5591  0014B2  6FB0               	movwf	main@ciclos& (0+255),b
  5592  0014B4                     l825:
  5593                           
  5594                           ;main.c: 615:                                 estado = 53;
  5595  0014B4  0E35               	movlw	53
  5596  0014B6  0100               	movlb	0	; () banked
  5597  0014B8  6FBB               	movwf	main@estado& (0+255),b
  5598                           
  5599                           ;main.c: 616:                                 break;
  5600  0014BA  EFED  F00D         	goto	l7141
  5601  0014BE                     l829:
  5602                           
  5603                           ; BSR set to: 0
  5604  0014BE  EF0B  F003         	goto	l6559
  5605  0014C2                     l6979:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;main.c: 628:                                        estado = 54;
  5609  0014C2  0E36               	movlw	54
  5610  0014C4  6FBB               	movwf	main@estado& (0+255),b
  5611                           
  5612                           ;main.c: 629:                                        break;
  5613  0014C6  EFED  F00D         	goto	l7141
  5614  0014CA                     l6981:
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;main.c: 631:                                        dignum_apagar(&ciclos);
  5618  0014CA  0EB0               	movlw	low main@ciclos
  5619  0014CC  6E38               	movwf	dignum_apagar@ptrNum^0,c
  5620  0014CE  0E00               	movlw	high main@ciclos
  5621  0014D0  6E39               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5622  0014D2  EC34  F01E         	call	_dignum_apagar	;wreg free
  5623  0014D6  EF5A  F00A         	goto	l825
  5624  0014DA                     l6987:
  5625                           
  5626                           ; BSR set to: 0
  5627  0014DA  51BC               	movf	main@tecla& (0+255),w,b
  5628  0014DC  6E59               	movwf	??_main^0,c
  5629  0014DE  6A5A               	clrf	(??_main+1)^0,c
  5630                           
  5631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5632                           ; Switch size 1, requested type "simple"
  5633                           ; Number of cases is 1, Range of values is 0 to 0
  5634                           ; switch strategies available:
  5635                           ; Name         Instructions Cycles
  5636                           ; simple_byte            4     3 (average)
  5637                           ;	Chosen strategy is simple_byte
  5638  0014E0  505A               	movf	(??_main+1)^0,w,c
  5639  0014E2  0A00               	xorlw	0	; case 0
  5640  0014E4  B4D8               	btfsc	status,2,c
  5641  0014E6  EF77  F00A         	goto	l8001
  5642  0014EA  EFED  F00D         	goto	l7141
  5643  0014EE                     l8001:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ; Switch size 1, requested type "simple"
  5647                           ; Number of cases is 6, Range of values is 35 to 68
  5648                           ; switch strategies available:
  5649                           ; Name         Instructions Cycles
  5650                           ; simple_byte           19    10 (average)
  5651                           ;	Chosen strategy is simple_byte
  5652  0014EE  5059               	movf	??_main^0,w,c
  5653  0014F0  0A23               	xorlw	35	; case 35
  5654  0014F2  B4D8               	btfsc	status,2,c
  5655  0014F4  EF61  F00A         	goto	l6979
  5656  0014F8  0A09               	xorlw	9	; case 42
  5657  0014FA  B4D8               	btfsc	status,2,c
  5658  0014FC  EF65  F00A         	goto	l6981
  5659  001500  0A6B               	xorlw	107	; case 65
  5660  001502  B4D8               	btfsc	status,2,c
  5661  001504  EF5F  F00A         	goto	l829
  5662  001508  0A03               	xorlw	3	; case 66
  5663  00150A  B4D8               	btfsc	status,2,c
  5664  00150C  EF0B  F003         	goto	l6559
  5665  001510  0A01               	xorlw	1	; case 67
  5666  001512  B4D8               	btfsc	status,2,c
  5667  001514  EF0B  F003         	goto	l6559
  5668  001518  0A07               	xorlw	7	; case 68
  5669  00151A  B4D8               	btfsc	status,2,c
  5670  00151C  EF0B  F003         	goto	l6559
  5671  001520  EFED  F00D         	goto	l7141
  5672  001524                     l6989:
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;main.c: 638:                             IHM.clr();
  5676  001524  EE20  F0E9         	lfsr	2,_IHM+8
  5677  001528  D802               	call	u5418
  5678  00152A  EFA1  F00A         	goto	u5419
  5679  00152E                     u5418:
  5680  00152E  0005               	push	
  5681  001530  6EFA               	movwf	pclath,c
  5682  001532  50DE               	movf	postinc2,w,c
  5683  001534  6EFD               	movwf	tosl,c
  5684  001536  50DE               	movf	postinc2,w,c
  5685  001538  6EFE               	movwf	tosh,c
  5686  00153A  50F8               	movf	tblptru,w,c
  5687  00153C  6EFF               	movwf	tosu,c
  5688  00153E  50FA               	movf	pclath,w,c
  5689  001540  0012               	return		;indir
  5690  001542                     u5419:
  5691  001542                     
  5692                           ;main.c: 639:                             IHM.printpos(0, 0, "Ciclos:             ");
  5693  001542  EE20  F0E5         	lfsr	2,_IHM+4
  5694  001546  D802               	call	u5428
  5695  001548  EFB7  F00A         	goto	u5429
  5696  00154C                     u5428:
  5697  00154C  0005               	push	
  5698  00154E  6EFA               	movwf	pclath,c
  5699  001550  50DE               	movf	postinc2,w,c
  5700  001552  6EFD               	movwf	tosl,c
  5701  001554  50DE               	movf	postinc2,w,c
  5702  001556  6EFE               	movwf	tosh,c
  5703  001558  50F8               	movf	tblptru,w,c
  5704  00155A  6EFF               	movwf	tosu,c
  5705  00155C  50FA               	movf	pclath,w,c
  5706  00155E  0E00               	movlw	0
  5707  001560  6E38               	movwf	dispLCD@col^0,c
  5708  001562  0E97               	movlw	low STR_26
  5709  001564  6E39               	movwf	dispLCD@str^0,c
  5710  001566  0E7D               	movlw	high STR_26
  5711  001568  6E3A               	movwf	(dispLCD@str+1)^0,c
  5712  00156A  0E00               	movlw	0
  5713  00156C  0012               	return		;indir
  5714  00156E                     u5429:
  5715  00156E                     
  5716                           ;main.c: 640:                             IHM.printv(0, 15, ciclos, 5);
  5717  00156E  EE20  F0E7         	lfsr	2,_IHM+6
  5718  001572  D802               	call	u5438
  5719  001574  EFCF  F00A         	goto	u5439
  5720  001578                     u5438:
  5721  001578  0005               	push	
  5722  00157A  6EFA               	movwf	pclath,c
  5723  00157C  50DE               	movf	postinc2,w,c
  5724  00157E  6EFD               	movwf	tosl,c
  5725  001580  50DE               	movf	postinc2,w,c
  5726  001582  6EFE               	movwf	tosh,c
  5727  001584  50F8               	movf	tblptru,w,c
  5728  001586  6EFF               	movwf	tosu,c
  5729  001588  50FA               	movf	pclath,w,c
  5730  00158A  0E0F               	movlw	15
  5731  00158C  6E3C               	movwf	dispLCD_num@col^0,c
  5732  00158E  C0B0  F03D         	movff	main@ciclos,dispLCD_num@num
  5733  001592  C0B1  F03E         	movff	main@ciclos+1,dispLCD_num@num+1
  5734  001596  0E05               	movlw	5
  5735  001598  6E3F               	movwf	dispLCD_num@tam^0,c
  5736  00159A  0E00               	movlw	0
  5737  00159C  0012               	return		;indir
  5738  00159E                     u5439:
  5739                           
  5740                           ;main.c: 641:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
  5741  00159E  EE20  F0E5         	lfsr	2,_IHM+4
  5742  0015A2  D802               	call	u5448
  5743  0015A4  EFE5  F00A         	goto	u5449
  5744  0015A8                     u5448:
  5745  0015A8  0005               	push	
  5746  0015AA  6EFA               	movwf	pclath,c
  5747  0015AC  50DE               	movf	postinc2,w,c
  5748  0015AE  6EFD               	movwf	tosl,c
  5749  0015B0  50DE               	movf	postinc2,w,c
  5750  0015B2  6EFE               	movwf	tosh,c
  5751  0015B4  50F8               	movf	tblptru,w,c
  5752  0015B6  6EFF               	movwf	tosu,c
  5753  0015B8  50FA               	movf	pclath,w,c
  5754  0015BA  0E00               	movlw	0
  5755  0015BC  6E38               	movwf	dispLCD@col^0,c
  5756  0015BE  0ED2               	movlw	low STR_27
  5757  0015C0  6E39               	movwf	dispLCD@str^0,c
  5758  0015C2  0E7E               	movlw	high STR_27
  5759  0015C4  6E3A               	movwf	(dispLCD@str+1)^0,c
  5760  0015C6  0E02               	movlw	2
  5761  0015C8  0012               	return		;indir
  5762  0015CA                     u5449:
  5763  0015CA                     
  5764                           ;main.c: 642:                             estado = 52;
  5765  0015CA  0E34               	movlw	52
  5766  0015CC  0100               	movlb	0	; () banked
  5767  0015CE  6FBB               	movwf	main@estado& (0+255),b
  5768                           
  5769                           ;main.c: 643:                             break;
  5770  0015D0  EFED  F00D         	goto	l7141
  5771  0015D4                     l6997:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;main.c: 646:                             salvar_dado(10, 10, init_cond);
  5775  0015D4  0E0A               	movlw	10
  5776  0015D6  6E37               	movwf	salvar_dado@col^0,c
  5777  0015D8  C0B2  F038         	movff	main@init_cond,salvar_dado@data
  5778  0015DC  0E0A               	movlw	10
  5779  0015DE  ECC8  F01E         	call	_salvar_dado
  5780  0015E2                     
  5781                           ;main.c: 647:                             EEPROM.salvar(11, fifo_adrs() + 2);
  5782  0015E2  D802               	call	u5458
  5783  0015E4  EF08  F00B         	goto	u5459
  5784  0015E8                     u5458:
  5785  0015E8  0005               	push	
  5786  0015EA  0100               	movlb	0	; () banked
  5787  0015EC  6EFA               	movwf	pclath,c
  5788  0015EE  51EB               	movf	_EEPROM& (0+255),w,b
  5789  0015F0  6EFD               	movwf	tosl,c
  5790  0015F2  51EC               	movf	(_EEPROM+1)& (0+255),w,b
  5791  0015F4  6EFE               	movwf	tosh,c
  5792  0015F6  50F8               	movf	tblptru,w,c
  5793  0015F8  6EFF               	movwf	tosu,c
  5794  0015FA  50FA               	movf	pclath,w,c
  5795  0015FC  ECA2  F01F         	call	_fifo_adrs	;wreg free
  5796  001600  0E02               	movlw	2
  5797  001602  2431               	addwf	?_fifo_adrs^0,w,c
  5798  001604  6E37               	movwf	salvar_receita@data^0,c
  5799  001606  0E00               	movlw	0
  5800  001608  2032               	addwfc	(?_fifo_adrs+1)^0,w,c
  5801  00160A  6E38               	movwf	(salvar_receita@data+1)^0,c
  5802  00160C  0E0B               	movlw	11
  5803  00160E  0012               	return		;indir
  5804  001610                     u5459:
  5805  001610                     
  5806                           ;main.c: 648:                             IHM.print("    DESEJA SALVAR   \n"
  5807  001610  0ECF               	movlw	low STR_28
  5808  001612  6E38               	movwf	dispLCD_str@str^0,c
  5809  001614  0E7C               	movlw	high STR_28
  5810  001616  6E39               	movwf	(dispLCD_str@str+1)^0,c
  5811  001618  EE20  F0E3         	lfsr	2,_IHM+2
  5812  00161C  D802               	call	u5468
  5813  00161E  EF1B  F00B         	goto	u5469
  5814  001622                     u5468:
  5815  001622  0005               	push	
  5816  001624  6EFA               	movwf	pclath,c
  5817  001626  50DE               	movf	postinc2,w,c
  5818  001628  6EFD               	movwf	tosl,c
  5819  00162A  50DE               	movf	postinc2,w,c
  5820  00162C  6EFE               	movwf	tosh,c
  5821  00162E  50F8               	movf	tblptru,w,c
  5822  001630  6EFF               	movwf	tosu,c
  5823  001632  50FA               	movf	pclath,w,c
  5824  001634  0012               	return		;indir
  5825  001636                     u5469:
  5826  001636                     
  5827                           ;main.c: 652:                             tecla = teclado_borda();
  5828  001636  ECB7  F01D         	call	_teclado_borda
  5829  00163A  0100               	movlb	0	; () banked
  5830  00163C  6FBC               	movwf	main@tecla& (0+255),b
  5831                           
  5832                           ;main.c: 653:                             switch(tecla)
  5833  00163E  EF29  F00B         	goto	l7013
  5834  001642                     l7005:
  5835                           
  5836                           ; BSR set to: 0
  5837  001642  0E4B               	movlw	75
  5838  001644  6FBB               	movwf	main@estado& (0+255),b
  5839  001646  EFED  F00D         	goto	l7141
  5840  00164A                     l7007:
  5841                           
  5842                           ; BSR set to: 0
  5843  00164A  ECAC  F01F         	call	_dispLCD_clr	;wreg free
  5844  00164E  EF5A  F00A         	goto	l825
  5845  001652                     l7013:
  5846                           
  5847                           ; BSR set to: 0
  5848  001652  51BC               	movf	main@tecla& (0+255),w,b
  5849  001654  6E59               	movwf	??_main^0,c
  5850  001656  6A5A               	clrf	(??_main+1)^0,c
  5851                           
  5852                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5853                           ; Switch size 1, requested type "simple"
  5854                           ; Number of cases is 1, Range of values is 0 to 0
  5855                           ; switch strategies available:
  5856                           ; Name         Instructions Cycles
  5857                           ; simple_byte            4     3 (average)
  5858                           ;	Chosen strategy is simple_byte
  5859  001658  505A               	movf	(??_main+1)^0,w,c
  5860  00165A  0A00               	xorlw	0	; case 0
  5861  00165C  B4D8               	btfsc	status,2,c
  5862  00165E  EF33  F00B         	goto	l8003
  5863  001662  EFED  F00D         	goto	l7141
  5864  001666                     l8003:
  5865                           
  5866                           ; BSR set to: 0
  5867                           ; Switch size 1, requested type "simple"
  5868                           ; Number of cases is 2, Range of values is 35 to 42
  5869                           ; switch strategies available:
  5870                           ; Name         Instructions Cycles
  5871                           ; simple_byte            7     4 (average)
  5872                           ;	Chosen strategy is simple_byte
  5873  001666  5059               	movf	??_main^0,w,c
  5874  001668  0A23               	xorlw	35	; case 35
  5875  00166A  B4D8               	btfsc	status,2,c
  5876  00166C  EF21  F00B         	goto	l7005
  5877  001670  0A09               	xorlw	9	; case 42
  5878  001672  B4D8               	btfsc	status,2,c
  5879  001674  EF25  F00B         	goto	l7007
  5880  001678  EFED  F00D         	goto	l7141
  5881  00167C                     l7015:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;main.c: 661:                             IHM.clr();
  5885  00167C  EE20  F0E9         	lfsr	2,_IHM+8
  5886  001680  D802               	call	u5478
  5887  001682  EF4D  F00B         	goto	u5479
  5888  001686                     u5478:
  5889  001686  0005               	push	
  5890  001688  6EFA               	movwf	pclath,c
  5891  00168A  50DE               	movf	postinc2,w,c
  5892  00168C  6EFD               	movwf	tosl,c
  5893  00168E  50DE               	movf	postinc2,w,c
  5894  001690  6EFE               	movwf	tosh,c
  5895  001692  50F8               	movf	tblptru,w,c
  5896  001694  6EFF               	movwf	tosu,c
  5897  001696  50FA               	movf	pclath,w,c
  5898  001698  0012               	return		;indir
  5899  00169A                     u5479:
  5900  00169A                     
  5901                           ;main.c: 662:                             IHM.print(" ESCOLHA A MEMORIA\n"
  5902  00169A  0E81               	movlw	low STR_29
  5903  00169C  6E38               	movwf	dispLCD_str@str^0,c
  5904  00169E  0E7C               	movlw	high STR_29
  5905  0016A0  6E39               	movwf	(dispLCD_str@str+1)^0,c
  5906  0016A2  EE20  F0E3         	lfsr	2,_IHM+2
  5907  0016A6  D802               	call	u5488
  5908  0016A8  EF60  F00B         	goto	u5489
  5909  0016AC                     u5488:
  5910  0016AC  0005               	push	
  5911  0016AE  6EFA               	movwf	pclath,c
  5912  0016B0  50DE               	movf	postinc2,w,c
  5913  0016B2  6EFD               	movwf	tosl,c
  5914  0016B4  50DE               	movf	postinc2,w,c
  5915  0016B6  6EFE               	movwf	tosh,c
  5916  0016B8  50F8               	movf	tblptru,w,c
  5917  0016BA  6EFF               	movwf	tosu,c
  5918  0016BC  50FA               	movf	pclath,w,c
  5919  0016BE  0012               	return		;indir
  5920  0016C0                     u5489:
  5921  0016C0                     
  5922                           ;main.c: 666:                             estado = 76;
  5923  0016C0  0E4C               	movlw	76
  5924  0016C2  0100               	movlb	0	; () banked
  5925  0016C4  6FBB               	movwf	main@estado& (0+255),b
  5926  0016C6                     l7021:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;main.c: 669:                             tecla = teclado_borda();
  5930  0016C6  ECB7  F01D         	call	_teclado_borda	;wreg free
  5931  0016CA  0100               	movlb	0	; () banked
  5932  0016CC  6FBC               	movwf	main@tecla& (0+255),b
  5933                           
  5934                           ;main.c: 670:                             switch(tecla)
  5935  0016CE  EFAF  F00B         	goto	l7035
  5936  0016D2                     l846:
  5937  0016D2                     l7023:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;main.c: 682:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
  5941  0016D2  C0BC  F031         	movff	main@tecla,___awmod@dividend
  5942  0016D6  6A32               	clrf	(___awmod@dividend+1)^0,c
  5943  0016D8  0E00               	movlw	0
  5944  0016DA  6E34               	movwf	(___awmod@divisor+1)^0,c
  5945  0016DC  0E30               	movlw	48
  5946  0016DE  6E33               	movwf	___awmod@divisor^0,c
  5947  0016E0  ECDC  F016         	call	___awmod	;wreg free
  5948  0016E4  5031               	movf	?___awmod^0,w,c
  5949  0016E6  6E37               	movwf	salvar_dado@col^0,c
  5950  0016E8  C0B2  F038         	movff	main@init_cond,salvar_dado@data
  5951  0016EC  0E0A               	movlw	10
  5952  0016EE  ECC8  F01E         	call	_salvar_dado
  5953  0016F2                     
  5954                           ;main.c: 683:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
  5955  0016F2  D802               	call	u5498
  5956  0016F4  EF99  F00B         	goto	u5499
  5957  0016F8                     u5498:
  5958  0016F8  0005               	push	
  5959  0016FA  0100               	movlb	0	; () banked
  5960  0016FC  6EFA               	movwf	pclath,c
  5961  0016FE  51EB               	movf	_EEPROM& (0+255),w,b
  5962  001700  6EFD               	movwf	tosl,c
  5963  001702  51EC               	movf	(_EEPROM+1)& (0+255),w,b
  5964  001704  6EFE               	movwf	tosh,c
  5965  001706  50F8               	movf	tblptru,w,c
  5966  001708  6EFF               	movwf	tosu,c
  5967  00170A  50FA               	movf	pclath,w,c
  5968  00170C  ECA2  F01F         	call	_fifo_adrs	;wreg free
  5969  001710  0E02               	movlw	2
  5970  001712  2431               	addwf	?_fifo_adrs^0,w,c
  5971  001714  6E37               	movwf	salvar_receita@data^0,c
  5972  001716  0E00               	movlw	0
  5973  001718  2032               	addwfc	(?_fifo_adrs+1)^0,w,c
  5974  00171A  6E38               	movwf	(salvar_receita@data+1)^0,c
  5975  00171C  C0BC  F031         	movff	main@tecla,___awmod@dividend
  5976  001720  6A32               	clrf	(___awmod@dividend+1)^0,c
  5977  001722  0E00               	movlw	0
  5978  001724  6E34               	movwf	(___awmod@divisor+1)^0,c
  5979  001726  0E30               	movlw	48
  5980  001728  6E33               	movwf	___awmod@divisor^0,c
  5981  00172A  ECDC  F016         	call	___awmod	;wreg free
  5982  00172E  5031               	movf	?___awmod^0,w,c
  5983  001730  0012               	return		;indir
  5984  001732                     u5499:
  5985  001732                     
  5986                           ;main.c: 684:                                            estado = 77;
  5987  001732  0E4D               	movlw	77
  5988  001734  0100               	movlb	0	; () banked
  5989  001736  6FBB               	movwf	main@estado& (0+255),b
  5990                           
  5991                           ;main.c: 685:                                            break;
  5992  001738  EFED  F00D         	goto	l7141
  5993  00173C                     l7029:
  5994                           
  5995                           ; BSR set to: 0
  5996  00173C  EE20  F0E9         	lfsr	2,_IHM+8
  5997  001740  D802               	call	u5508
  5998  001742  EFAD  F00B         	goto	u5509
  5999  001746                     u5508:
  6000  001746  0005               	push	
  6001  001748  6EFA               	movwf	pclath,c
  6002  00174A  50DE               	movf	postinc2,w,c
  6003  00174C  6EFD               	movwf	tosl,c
  6004  00174E  50DE               	movf	postinc2,w,c
  6005  001750  6EFE               	movwf	tosh,c
  6006  001752  50F8               	movf	tblptru,w,c
  6007  001754  6EFF               	movwf	tosu,c
  6008  001756  50FA               	movf	pclath,w,c
  6009  001758  0012               	return		;indir
  6010  00175A                     u5509:
  6011  00175A  EF02  F008         	goto	l6863
  6012  00175E                     l7035:
  6013                           
  6014                           ; BSR set to: 0
  6015  00175E  51BC               	movf	main@tecla& (0+255),w,b
  6016  001760  6E59               	movwf	??_main^0,c
  6017  001762  6A5A               	clrf	(??_main+1)^0,c
  6018                           
  6019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6020                           ; Switch size 1, requested type "simple"
  6021                           ; Number of cases is 1, Range of values is 0 to 0
  6022                           ; switch strategies available:
  6023                           ; Name         Instructions Cycles
  6024                           ; simple_byte            4     3 (average)
  6025                           ;	Chosen strategy is simple_byte
  6026  001764  505A               	movf	(??_main+1)^0,w,c
  6027  001766  0A00               	xorlw	0	; case 0
  6028  001768  B4D8               	btfsc	status,2,c
  6029  00176A  EFB9  F00B         	goto	l8005
  6030  00176E  EFED  F00D         	goto	l7141
  6031  001772                     l8005:
  6032                           
  6033                           ; BSR set to: 0
  6034                           ; Switch size 1, requested type "simple"
  6035                           ; Number of cases is 11, Range of values is 42 to 57
  6036                           ; switch strategies available:
  6037                           ; Name         Instructions Cycles
  6038                           ; simple_byte           34    18 (average)
  6039                           ;	Chosen strategy is simple_byte
  6040  001772  5059               	movf	??_main^0,w,c
  6041  001774  0A2A               	xorlw	42	; case 42
  6042  001776  B4D8               	btfsc	status,2,c
  6043  001778  EF9E  F00B         	goto	l7029
  6044  00177C  0A1A               	xorlw	26	; case 48
  6045  00177E  B4D8               	btfsc	status,2,c
  6046  001780  EF69  F00B         	goto	l846
  6047  001784  0A01               	xorlw	1	; case 49
  6048  001786  B4D8               	btfsc	status,2,c
  6049  001788  EF69  F00B         	goto	l846
  6050  00178C  0A03               	xorlw	3	; case 50
  6051  00178E  B4D8               	btfsc	status,2,c
  6052  001790  EF69  F00B         	goto	l7023
  6053  001794  0A01               	xorlw	1	; case 51
  6054  001796  B4D8               	btfsc	status,2,c
  6055  001798  EF69  F00B         	goto	l7023
  6056  00179C  0A07               	xorlw	7	; case 52
  6057  00179E  B4D8               	btfsc	status,2,c
  6058  0017A0  EF69  F00B         	goto	l7023
  6059  0017A4  0A01               	xorlw	1	; case 53
  6060  0017A6  B4D8               	btfsc	status,2,c
  6061  0017A8  EF69  F00B         	goto	l7023
  6062  0017AC  0A03               	xorlw	3	; case 54
  6063  0017AE  B4D8               	btfsc	status,2,c
  6064  0017B0  EF69  F00B         	goto	l7023
  6065  0017B4  0A01               	xorlw	1	; case 55
  6066  0017B6  B4D8               	btfsc	status,2,c
  6067  0017B8  EF69  F00B         	goto	l7023
  6068  0017BC  0A0F               	xorlw	15	; case 56
  6069  0017BE  B4D8               	btfsc	status,2,c
  6070  0017C0  EF69  F00B         	goto	l7023
  6071  0017C4  0A01               	xorlw	1	; case 57
  6072  0017C6  B4D8               	btfsc	status,2,c
  6073  0017C8  EF69  F00B         	goto	l7023
  6074  0017CC  EFED  F00D         	goto	l7141
  6075  0017D0                     l7037:
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;main.c: 692:                             IHM.clr();
  6079  0017D0  EE20  F0E9         	lfsr	2,_IHM+8
  6080  0017D4  D802               	call	u5518
  6081  0017D6  EFF7  F00B         	goto	u5519
  6082  0017DA                     u5518:
  6083  0017DA  0005               	push	
  6084  0017DC  6EFA               	movwf	pclath,c
  6085  0017DE  50DE               	movf	postinc2,w,c
  6086  0017E0  6EFD               	movwf	tosl,c
  6087  0017E2  50DE               	movf	postinc2,w,c
  6088  0017E4  6EFE               	movwf	tosh,c
  6089  0017E6  50F8               	movf	tblptru,w,c
  6090  0017E8  6EFF               	movwf	tosu,c
  6091  0017EA  50FA               	movf	pclath,w,c
  6092  0017EC  0012               	return		;indir
  6093  0017EE                     u5519:
  6094  0017EE                     
  6095                           ;main.c: 693:                             for(char i = 0; i <= 3; i++)
  6096  0017EE  0E00               	movlw	0
  6097  0017F0  0100               	movlb	0	; () banked
  6098  0017F2  6FA9               	movwf	main@i_975& (0+255),b
  6099  0017F4                     l7041:
  6100                           
  6101                           ; BSR set to: 0
  6102  0017F4  0E03               	movlw	3
  6103  0017F6  65A9               	cpfsgt	main@i_975& (0+255),b
  6104  0017F8  EF00  F00C         	goto	u5521
  6105  0017FC  EF02  F00C         	goto	u5520
  6106  001800                     u5521:
  6107  001800  EF04  F00C         	goto	l7045
  6108  001804                     u5520:
  6109  001804  EF33  F00C         	goto	l7063
  6110  001808                     l7045:
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;main.c: 694:                             {;main.c: 695:                                
      +                           for(char j = 0; j <= 19; j++)
  6114  001808  0E00               	movlw	0
  6115  00180A  6FAA               	movwf	main@j_976& (0+255),b
  6116  00180C                     l7047:
  6117                           
  6118                           ; BSR set to: 0
  6119  00180C  0E13               	movlw	19
  6120  00180E  65AA               	cpfsgt	main@j_976& (0+255),b
  6121  001810  EF0C  F00C         	goto	u5531
  6122  001814  EF0E  F00C         	goto	u5530
  6123  001818                     u5531:
  6124  001818  EF10  F00C         	goto	l7051
  6125  00181C                     u5530:
  6126  00181C  EF30  F00C         	goto	l7059
  6127  001820                     l7051:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;main.c: 696:                                 {;main.c: 697:                            
      +                                   IHM.printpos(i, j, "\377");
  6131  001820  EE20  F0E5         	lfsr	2,_IHM+4
  6132  001824  D802               	call	u5548
  6133  001826  EF26  F00C         	goto	u5549
  6134  00182A                     u5548:
  6135  00182A  0005               	push	
  6136  00182C  6EFA               	movwf	pclath,c
  6137  00182E  50DE               	movf	postinc2,w,c
  6138  001830  6EFD               	movwf	tosl,c
  6139  001832  50DE               	movf	postinc2,w,c
  6140  001834  6EFE               	movwf	tosh,c
  6141  001836  50F8               	movf	tblptru,w,c
  6142  001838  6EFF               	movwf	tosu,c
  6143  00183A  50FA               	movf	pclath,w,c
  6144  00183C  C0AA  F038         	movff	main@j_976,dispLCD@col
  6145  001840  0EFD               	movlw	low STR_3
  6146  001842  6E39               	movwf	dispLCD@str^0,c
  6147  001844  0E7F               	movlw	high STR_3
  6148  001846  6E3A               	movwf	(dispLCD@str+1)^0,c
  6149  001848  51A9               	movf	main@i_975& (0+255),w,b
  6150  00184A  0012               	return		;indir
  6151  00184C                     u5549:
  6152  00184C                     
  6153                           ;main.c: 698:                                     delay(10);
  6154  00184C  0E00               	movlw	0
  6155  00184E  6E32               	movwf	(delay@t+1)^0,c
  6156  001850  0E0A               	movlw	10
  6157  001852  6E31               	movwf	delay@t^0,c
  6158  001854  EC62  F01E         	call	_delay
  6159  001858                     
  6160                           ;main.c: 699:                                 }
  6161  001858  0100               	movlb	0	; () banked
  6162  00185A  2BAA               	incf	main@j_976& (0+255),f,b
  6163  00185C  EF06  F00C         	goto	l7047
  6164  001860                     l7059:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;main.c: 700:                             }
  6168  001860  2BA9               	incf	main@i_975& (0+255),f,b
  6169  001862  EFFA  F00B         	goto	l7041
  6170  001866                     l7063:
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;main.c: 702:                             for(char i = 0; i <= 3; i++)
  6174  001866  0E00               	movlw	0
  6175  001868  6FAB               	movwf	main@i_978& (0+255),b
  6176  00186A                     l7065:
  6177                           
  6178                           ; BSR set to: 0
  6179  00186A  0E03               	movlw	3
  6180  00186C  65AB               	cpfsgt	main@i_978& (0+255),b
  6181  00186E  EF3B  F00C         	goto	u5551
  6182  001872  EF3D  F00C         	goto	u5550
  6183  001876                     u5551:
  6184  001876  EF3F  F00C         	goto	l7069
  6185  00187A                     u5550:
  6186  00187A  EF6E  F00C         	goto	l7087
  6187  00187E                     l7069:
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;main.c: 703:                             {;main.c: 704:                                
      +                           for(char j = 0; j <= 19; j++)
  6191  00187E  0E00               	movlw	0
  6192  001880  6FAC               	movwf	main@j_979& (0+255),b
  6193  001882                     l7071:
  6194                           
  6195                           ; BSR set to: 0
  6196  001882  0E13               	movlw	19
  6197  001884  65AC               	cpfsgt	main@j_979& (0+255),b
  6198  001886  EF47  F00C         	goto	u5561
  6199  00188A  EF49  F00C         	goto	u5560
  6200  00188E                     u5561:
  6201  00188E  EF4B  F00C         	goto	l7075
  6202  001892                     u5560:
  6203  001892  EF6B  F00C         	goto	l7083
  6204  001896                     l7075:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;main.c: 705:                                 {;main.c: 706:                            
      +                                   IHM.printpos(i, j, " ");
  6208  001896  EE20  F0E5         	lfsr	2,_IHM+4
  6209  00189A  D802               	call	u5578
  6210  00189C  EF61  F00C         	goto	u5579
  6211  0018A0                     u5578:
  6212  0018A0  0005               	push	
  6213  0018A2  6EFA               	movwf	pclath,c
  6214  0018A4  50DE               	movf	postinc2,w,c
  6215  0018A6  6EFD               	movwf	tosl,c
  6216  0018A8  50DE               	movf	postinc2,w,c
  6217  0018AA  6EFE               	movwf	tosh,c
  6218  0018AC  50F8               	movf	tblptru,w,c
  6219  0018AE  6EFF               	movwf	tosu,c
  6220  0018B0  50FA               	movf	pclath,w,c
  6221  0018B2  C0AC  F038         	movff	main@j_979,dispLCD@col
  6222  0018B6  0EAA               	movlw	low (STR_26+19)
  6223  0018B8  6E39               	movwf	dispLCD@str^0,c
  6224  0018BA  0E7D               	movlw	high (STR_26+19)
  6225  0018BC  6E3A               	movwf	(dispLCD@str+1)^0,c
  6226  0018BE  51AB               	movf	main@i_978& (0+255),w,b
  6227  0018C0  0012               	return		;indir
  6228  0018C2                     u5579:
  6229  0018C2                     
  6230                           ;main.c: 707:                                     delay(10);
  6231  0018C2  0E00               	movlw	0
  6232  0018C4  6E32               	movwf	(delay@t+1)^0,c
  6233  0018C6  0E0A               	movlw	10
  6234  0018C8  6E31               	movwf	delay@t^0,c
  6235  0018CA  EC62  F01E         	call	_delay
  6236  0018CE                     
  6237                           ;main.c: 708:                                 }
  6238  0018CE  0100               	movlb	0	; () banked
  6239  0018D0  2BAC               	incf	main@j_979& (0+255),f,b
  6240  0018D2  EF41  F00C         	goto	l7071
  6241  0018D6                     l7083:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;main.c: 709:                             }
  6245  0018D6  2BAB               	incf	main@i_978& (0+255),f,b
  6246  0018D8  EF35  F00C         	goto	l7065
  6247  0018DC                     l7087:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;main.c: 710:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
  6251  0018DC  EE20  F0E5         	lfsr	2,_IHM+4
  6252  0018E0  D802               	call	u5588
  6253  0018E2  EF84  F00C         	goto	u5589
  6254  0018E6                     u5588:
  6255  0018E6  0005               	push	
  6256  0018E8  6EFA               	movwf	pclath,c
  6257  0018EA  50DE               	movf	postinc2,w,c
  6258  0018EC  6EFD               	movwf	tosl,c
  6259  0018EE  50DE               	movf	postinc2,w,c
  6260  0018F0  6EFE               	movwf	tosh,c
  6261  0018F2  50F8               	movf	tblptru,w,c
  6262  0018F4  6EFF               	movwf	tosu,c
  6263  0018F6  50FA               	movf	pclath,w,c
  6264  0018F8  0E00               	movlw	0
  6265  0018FA  6E38               	movwf	dispLCD@col^0,c
  6266  0018FC  0E3F               	movlw	low STR_32
  6267  0018FE  6E39               	movwf	dispLCD@str^0,c
  6268  001900  0E7E               	movlw	high STR_32
  6269  001902  6E3A               	movwf	(dispLCD@str+1)^0,c
  6270  001904  0E01               	movlw	1
  6271  001906  0012               	return		;indir
  6272  001908                     u5589:
  6273                           
  6274                           ;main.c: 711:                             IHM.printpos(2, 0, "        SALVA       ");
  6275  001908  EE20  F0E5         	lfsr	2,_IHM+4
  6276  00190C  D802               	call	u5598
  6277  00190E  EF9A  F00C         	goto	u5599
  6278  001912                     u5598:
  6279  001912  0005               	push	
  6280  001914  6EFA               	movwf	pclath,c
  6281  001916  50DE               	movf	postinc2,w,c
  6282  001918  6EFD               	movwf	tosl,c
  6283  00191A  50DE               	movf	postinc2,w,c
  6284  00191C  6EFE               	movwf	tosh,c
  6285  00191E  50F8               	movf	tblptru,w,c
  6286  001920  6EFF               	movwf	tosu,c
  6287  001922  50FA               	movf	pclath,w,c
  6288  001924  0E00               	movlw	0
  6289  001926  6E38               	movwf	dispLCD@col^0,c
  6290  001928  0EC1               	movlw	low STR_33
  6291  00192A  6E39               	movwf	dispLCD@str^0,c
  6292  00192C  0E7D               	movlw	high STR_33
  6293  00192E  6E3A               	movwf	(dispLCD@str+1)^0,c
  6294  001930  0E02               	movlw	2
  6295  001932  0012               	return		;indir
  6296  001934                     u5599:
  6297  001934                     
  6298                           ;main.c: 713:                             setT1(1000);
  6299  001934  0EE8               	movlw	232
  6300  001936  6E37               	movwf	setT1@c^0,c
  6301  001938  0E03               	movlw	3
  6302  00193A  6E38               	movwf	(setT1@c+1)^0,c
  6303  00193C  0E00               	movlw	0
  6304  00193E  6E39               	movwf	(setT1@c+2)^0,c
  6305  001940  0E00               	movlw	0
  6306  001942  6E3A               	movwf	(setT1@c+3)^0,c
  6307  001944  EC32  F01F         	call	_setT1
  6308  001948                     
  6309                           ;main.c: 714:                             estado = 78;
  6310  001948  0E4E               	movlw	78
  6311  00194A  0100               	movlb	0	; () banked
  6312  00194C  6FBB               	movwf	main@estado& (0+255),b
  6313                           
  6314                           ;main.c: 715:                             break;
  6315  00194E  EFED  F00D         	goto	l7141
  6316  001952                     l7093:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 718:                             if(!statusT1())
  6320  001952  EC64  F01F         	call	_statusT1	;wreg free
  6321  001956  5031               	movf	?_statusT1^0,w,c
  6322  001958  1032               	iorwf	(?_statusT1+1)^0,w,c
  6323  00195A  1033               	iorwf	(?_statusT1+2)^0,w,c
  6324  00195C  1034               	iorwf	(?_statusT1+3)^0,w,c
  6325  00195E  A4D8               	btfss	status,2,c
  6326  001960  EFB4  F00C         	goto	u5601
  6327  001964  EFB6  F00C         	goto	u5600
  6328  001968                     u5601:
  6329  001968  EFED  F00D         	goto	l7141
  6330  00196C                     u5600:
  6331  00196C  EF5A  F00A         	goto	l825
  6332  001970                     l7097:
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;main.c: 723:                             IHM.printpos(2, 0, "config contrl:     %");
  6336  001970  EE20  F0E5         	lfsr	2,_IHM+4
  6337  001974  D802               	call	u5618
  6338  001976  EFCE  F00C         	goto	u5619
  6339  00197A                     u5618:
  6340  00197A  0005               	push	
  6341  00197C  6EFA               	movwf	pclath,c
  6342  00197E  50DE               	movf	postinc2,w,c
  6343  001980  6EFD               	movwf	tosl,c
  6344  001982  50DE               	movf	postinc2,w,c
  6345  001984  6EFE               	movwf	tosh,c
  6346  001986  50F8               	movf	tblptru,w,c
  6347  001988  6EFF               	movwf	tosu,c
  6348  00198A  50FA               	movf	pclath,w,c
  6349  00198C  0E00               	movlw	0
  6350  00198E  6E38               	movwf	dispLCD@col^0,c
  6351  001990  0EFC               	movlw	low STR_34
  6352  001992  6E39               	movwf	dispLCD@str^0,c
  6353  001994  0E7E               	movlw	high STR_34
  6354  001996  6E3A               	movwf	(dispLCD@str+1)^0,c
  6355  001998  0E02               	movlw	2
  6356  00199A  0012               	return		;indir
  6357  00199C                     u5619:
  6358  00199C                     
  6359                           ;main.c: 724:                             IHM.printv(2, 15, num, 3);
  6360  00199C  EE20  F0E7         	lfsr	2,_IHM+6
  6361  0019A0  D802               	call	u5628
  6362  0019A2  EFE6  F00C         	goto	u5629
  6363  0019A6                     u5628:
  6364  0019A6  0005               	push	
  6365  0019A8  6EFA               	movwf	pclath,c
  6366  0019AA  50DE               	movf	postinc2,w,c
  6367  0019AC  6EFD               	movwf	tosl,c
  6368  0019AE  50DE               	movf	postinc2,w,c
  6369  0019B0  6EFE               	movwf	tosh,c
  6370  0019B2  50F8               	movf	tblptru,w,c
  6371  0019B4  6EFF               	movwf	tosu,c
  6372  0019B6  50FA               	movf	pclath,w,c
  6373  0019B8  0E0F               	movlw	15
  6374  0019BA  6E3C               	movwf	dispLCD_num@col^0,c
  6375  0019BC  C0B4  F03D         	movff	main@num,dispLCD_num@num
  6376  0019C0  C0B5  F03E         	movff	main@num+1,dispLCD_num@num+1
  6377  0019C4  0E03               	movlw	3
  6378  0019C6  6E3F               	movwf	dispLCD_num@tam^0,c
  6379  0019C8  0E02               	movlw	2
  6380  0019CA  0012               	return		;indir
  6381  0019CC                     u5629:
  6382  0019CC                     
  6383                           ;main.c: 725:                             estado = 91;
  6384  0019CC  0E5B               	movlw	91
  6385  0019CE  0100               	movlb	0	; () banked
  6386  0019D0  6FBB               	movwf	main@estado& (0+255),b
  6387                           
  6388                           ;main.c: 726:                             break;
  6389  0019D2  EFED  F00D         	goto	l7141
  6390  0019D6                     l7103:
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;main.c: 729:                             tecla = teclado_borda();
  6394  0019D6  ECB7  F01D         	call	_teclado_borda
  6395  0019DA  0100               	movlb	0	; () banked
  6396  0019DC  6FBC               	movwf	main@tecla& (0+255),b
  6397  0019DE                     
  6398                           ; BSR set to: 0
  6399                           ;main.c: 730:                             if(tecla >= '0' && tecla <= '9')
  6400  0019DE  0E2F               	movlw	47
  6401  0019E0  65BC               	cpfsgt	main@tecla& (0+255),b
  6402  0019E2  EFF5  F00C         	goto	u5631
  6403  0019E6  EFF7  F00C         	goto	u5630
  6404  0019EA                     u5631:
  6405  0019EA  EF18  F00D         	goto	l7115
  6406  0019EE                     u5630:
  6407  0019EE                     
  6408                           ; BSR set to: 0
  6409  0019EE  0E3A               	movlw	58
  6410  0019F0  61BC               	cpfslt	main@tecla& (0+255),b
  6411  0019F2  EFFD  F00C         	goto	u5641
  6412  0019F6  EFFF  F00C         	goto	u5640
  6413  0019FA                     u5641:
  6414  0019FA  EF18  F00D         	goto	l7115
  6415  0019FE                     u5640:
  6416  0019FE                     
  6417                           ; BSR set to: 0
  6418                           ;main.c: 731:                             {;main.c: 732:                                
      +                           dignum_conc(tecla, &num);
  6419  0019FE  0EB4               	movlw	low main@num
  6420  001A00  6E37               	movwf	dignum_conc@ptrNum^0,c
  6421  001A02  0E00               	movlw	high main@num
  6422  001A04  6E38               	movwf	(dignum_conc@ptrNum+1)^0,c
  6423  001A06  51BC               	movf	main@tecla& (0+255),w,b
  6424  001A08  EC9A  F01C         	call	_dignum_conc
  6425  001A0C                     
  6426                           ;main.c: 733:                                 if(num > 100)
  6427  001A0C  0100               	movlb	0	; () banked
  6428  001A0E  51B5               	movf	(main@num+1)& (0+255),w,b
  6429  001A10  E109               	bnz	u5650
  6430  001A12  0E65               	movlw	101
  6431  001A14  5DB4               	subwf	main@num& (0+255),w,b
  6432  001A16  A0D8               	btfss	status,0,c
  6433  001A18  EF10  F00D         	goto	u5651
  6434  001A1C  EF12  F00D         	goto	u5650
  6435  001A20                     u5651:
  6436  001A20  EF16  F00D         	goto	l869
  6437  001A24                     u5650:
  6438  001A24                     
  6439                           ; BSR set to: 0
  6440                           ;main.c: 734:                                     num = 100;
  6441  001A24  0E00               	movlw	0
  6442  001A26  6FB5               	movwf	(main@num+1)& (0+255),b
  6443  001A28  0E64               	movlw	100
  6444  001A2A  6FB4               	movwf	main@num& (0+255),b
  6445  001A2C                     l869:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;main.c: 735:                                 estado = 90;
  6449  001A2C  0E5A               	movlw	90
  6450  001A2E  6FBB               	movwf	main@estado& (0+255),b
  6451  001A30                     l7115:
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;main.c: 737:                             if(tecla == '*')
  6455  001A30  0E2A               	movlw	42
  6456  001A32  19BC               	xorwf	main@tecla& (0+255),w,b
  6457  001A34  A4D8               	btfss	status,2,c
  6458  001A36  EF1F  F00D         	goto	u5661
  6459  001A3A  EF21  F00D         	goto	u5660
  6460  001A3E                     u5661:
  6461  001A3E  EF2A  F00D         	goto	l7121
  6462  001A42                     u5660:
  6463  001A42                     
  6464                           ; BSR set to: 0
  6465                           ;main.c: 738:                             {;main.c: 739:                                
      +                           dignum_apagar(&num);
  6466  001A42  0EB4               	movlw	low main@num
  6467  001A44  6E38               	movwf	dignum_apagar@ptrNum^0,c
  6468  001A46  0E00               	movlw	high main@num
  6469  001A48  6E39               	movwf	(dignum_apagar@ptrNum+1)^0,c
  6470  001A4A  EC34  F01E         	call	_dignum_apagar	;wreg free
  6471  001A4E                     
  6472                           ;main.c: 740:                                 estado = 90;
  6473  001A4E  0E5A               	movlw	90
  6474  001A50  0100               	movlb	0	; () banked
  6475  001A52  6FBB               	movwf	main@estado& (0+255),b
  6476  001A54                     l7121:
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;main.c: 742:                             if(tecla == '#')
  6480  001A54  0E23               	movlw	35
  6481  001A56  19BC               	xorwf	main@tecla& (0+255),w,b
  6482  001A58  A4D8               	btfss	status,2,c
  6483  001A5A  EF31  F00D         	goto	u5671
  6484  001A5E  EF33  F00D         	goto	u5670
  6485  001A62                     u5671:
  6486  001A62  EFED  F00D         	goto	l7141
  6487  001A66                     u5670:
  6488  001A66                     
  6489                           ; BSR set to: 0
  6490                           ;main.c: 743:                                 estado = 92;
  6491  001A66  0E5C               	movlw	92
  6492  001A68  6FBB               	movwf	main@estado& (0+255),b
  6493  001A6A  EFED  F00D         	goto	l7141
  6494  001A6E                     l7125:
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;main.c: 747:                             fifo_add_control(num);
  6498  001A6E  51B4               	movf	main@num& (0+255),w,b
  6499  001A70  EC52  F01C         	call	_fifo_add_control
  6500  001A74  EF1E  F00A         	goto	l6959
  6501  001A78                     l7131:
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;main.c: 753:                             fifo_add_ciclo(ciclos);
  6505  001A78  C0B0  F031         	movff	main@ciclos,fifo_add_ciclo@ciclos
  6506  001A7C  C0B1  F032         	movff	main@ciclos+1,fifo_add_ciclo@ciclos+1
  6507  001A80  ECA7  F01F         	call	_fifo_add_ciclo	;wreg free
  6508  001A84                     
  6509                           ;main.c: 754:                             estado = 30;
  6510  001A84  0E1E               	movlw	30
  6511  001A86  0100               	movlb	0	; () banked
  6512  001A88  6FBB               	movwf	main@estado& (0+255),b
  6513  001A8A  EF66  F009         	goto	l6915
  6514  001A8E                     l621:
  6515  001A8E                     l7139:
  6516  001A8E  0100               	movlb	0	; () banked
  6517  001A90  51BB               	movf	main@estado& (0+255),w,b
  6518  001A92  6E59               	movwf	??_main^0,c
  6519  001A94  6A5A               	clrf	(??_main+1)^0,c
  6520                           
  6521                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6522                           ; Switch size 1, requested type "simple"
  6523                           ; Number of cases is 1, Range of values is 0 to 0
  6524                           ; switch strategies available:
  6525                           ; Name         Instructions Cycles
  6526                           ; simple_byte            4     3 (average)
  6527                           ;	Chosen strategy is simple_byte
  6528  001A96  505A               	movf	(??_main+1)^0,w,c
  6529  001A98  0A00               	xorlw	0	; case 0
  6530  001A9A  B4D8               	btfsc	status,2,c
  6531  001A9C  EF52  F00D         	goto	l8007
  6532  001AA0  EFED  F00D         	goto	l7141
  6533  001AA4                     l8007:
  6534                           
  6535                           ; BSR set to: 0
  6536                           ; Switch size 1, requested type "simple"
  6537                           ; Number of cases is 38, Range of values is 0 to 100
  6538                           ; switch strategies available:
  6539                           ; Name         Instructions Cycles
  6540                           ; simple_byte          115    58 (average)
  6541                           ;	Chosen strategy is simple_byte
  6542  001AA4  5059               	movf	??_main^0,w,c
  6543  001AA6  0A00               	xorlw	0	; case 0
  6544  001AA8  B4D8               	btfsc	status,2,c
  6545  001AAA  EF93  F000         	goto	l6405
  6546  001AAE  0A01               	xorlw	1	; case 1
  6547  001AB0  B4D8               	btfsc	status,2,c
  6548  001AB2  EF0D  F001         	goto	l6455
  6549  001AB6  0A03               	xorlw	3	; case 2
  6550  001AB8  B4D8               	btfsc	status,2,c
  6551  001ABA  EF67  F001         	goto	l6479
  6552  001ABE  0A01               	xorlw	1	; case 3
  6553  001AC0  B4D8               	btfsc	status,2,c
  6554  001AC2  EFF2  F005         	goto	l6733
  6555  001AC6  0A05               	xorlw	5	; case 6
  6556  001AC8  B4D8               	btfsc	status,2,c
  6557  001ACA  EF32  F006         	goto	l6741
  6558  001ACE  0A01               	xorlw	1	; case 7
  6559  001AD0  B4D8               	btfsc	status,2,c
  6560  001AD2  EFC9  F006         	goto	l6785
  6561  001AD6  0A0F               	xorlw	15	; case 8
  6562  001AD8  B4D8               	btfsc	status,2,c
  6563  001ADA  EF79  F001         	goto	l6483
  6564  001ADE  0A01               	xorlw	1	; case 9
  6565  001AE0  B4D8               	btfsc	status,2,c
  6566  001AE2  EF9D  F001         	goto	l6491
  6567  001AE6  0A03               	xorlw	3	; case 10
  6568  001AE8  B4D8               	btfsc	status,2,c
  6569  001AEA  EF88  F007         	goto	l6827
  6570  001AEE  0A01               	xorlw	1	; case 11
  6571  001AF0  B4D8               	btfsc	status,2,c
  6572  001AF2  EFB6  F007         	goto	l6835
  6573  001AF6  0A05               	xorlw	5	; case 14
  6574  001AF8  B4D8               	btfsc	status,2,c
  6575  001AFA  EF48  F008         	goto	l6877
  6576  001AFE  0A1E               	xorlw	30	; case 16
  6577  001B00  B4D8               	btfsc	status,2,c
  6578  001B02  EF44  F008         	goto	l6873
  6579  001B06  0A0E               	xorlw	14	; case 30
  6580  001B08  B4D8               	btfsc	status,2,c
  6581  001B0A  EF9D  F008         	goto	l6885
  6582  001B0E  0A36               	xorlw	54	; case 40
  6583  001B10  B4D8               	btfsc	status,2,c
  6584  001B12  EF9C  F009         	goto	l6929
  6585  001B16  0A01               	xorlw	1	; case 41
  6586  001B18  B4D8               	btfsc	status,2,c
  6587  001B1A  EFE8  F009         	goto	l6951
  6588  001B1E  0A03               	xorlw	3	; case 42
  6589  001B20  B4D8               	btfsc	status,2,c
  6590  001B22  EF1B  F00A         	goto	l6957
  6591  001B26  0A1E               	xorlw	30	; case 52
  6592  001B28  B4D8               	btfsc	status,2,c
  6593  001B2A  EF2F  F00A         	goto	l6963
  6594  001B2E  0A01               	xorlw	1	; case 53
  6595  001B30  B4D8               	btfsc	status,2,c
  6596  001B32  EF92  F00A         	goto	l6989
  6597  001B36  0A03               	xorlw	3	; case 54
  6598  001B38  B4D8               	btfsc	status,2,c
  6599  001B3A  EF3C  F00D         	goto	l7131
  6600  001B3E  0A70               	xorlw	112	; case 70
  6601  001B40  B4D8               	btfsc	status,2,c
  6602  001B42  EFA3  F008         	goto	l6887
  6603  001B46  0A01               	xorlw	1	; case 71
  6604  001B48  B4D8               	btfsc	status,2,c
  6605  001B4A  EFAF  F001         	goto	l6495
  6606  001B4E  0A0F               	xorlw	15	; case 72
  6607  001B50  B4D8               	btfsc	status,2,c
  6608  001B52  EF53  F004         	goto	l6665
  6609  001B56  0A01               	xorlw	1	; case 73
  6610  001B58  B4D8               	btfsc	status,2,c
  6611  001B5A  EF78  F004         	goto	l6671
  6612  001B5E  0A03               	xorlw	3	; case 74
  6613  001B60  B4D8               	btfsc	status,2,c
  6614  001B62  EFEA  F00A         	goto	l6997
  6615  001B66  0A01               	xorlw	1	; case 75
  6616  001B68  B4D8               	btfsc	status,2,c
  6617  001B6A  EF3E  F00B         	goto	l7015
  6618  001B6E  0A07               	xorlw	7	; case 76
  6619  001B70  B4D8               	btfsc	status,2,c
  6620  001B72  EF63  F00B         	goto	l7021
  6621  001B76  0A01               	xorlw	1	; case 77
  6622  001B78  B4D8               	btfsc	status,2,c
  6623  001B7A  EFE8  F00B         	goto	l7037
  6624  001B7E  0A03               	xorlw	3	; case 78
  6625  001B80  B4D8               	btfsc	status,2,c
  6626  001B82  EFA9  F00C         	goto	l7093
  6627  001B86  0A1E               	xorlw	30	; case 80
  6628  001B88  B4D8               	btfsc	status,2,c
  6629  001B8A  EF12  F003         	goto	l6563
  6630  001B8E  0A01               	xorlw	1	; case 81
  6631  001B90  B4D8               	btfsc	status,2,c
  6632  001B92  EF35  F003         	goto	l6573
  6633  001B96  0A03               	xorlw	3	; case 82
  6634  001B98  B4D8               	btfsc	status,2,c
  6635  001B9A  EF47  F003         	goto	l6577
  6636  001B9E  0A06               	xorlw	6	; case 84
  6637  001BA0  B4D8               	btfsc	status,2,c
  6638  001BA2  EF6E  F003         	goto	l6589
  6639  001BA6  0A01               	xorlw	1	; case 85
  6640  001BA8  B4D8               	btfsc	status,2,c
  6641  001BAA  EFB5  F003         	goto	l6603
  6642  001BAE  0A03               	xorlw	3	; case 86
  6643  001BB0  B4D8               	btfsc	status,2,c
  6644  001BB2  EF44  F004         	goto	l6661
  6645  001BB6  0A0C               	xorlw	12	; case 90
  6646  001BB8  B4D8               	btfsc	status,2,c
  6647  001BBA  EFB8  F00C         	goto	l7097
  6648  001BBE  0A01               	xorlw	1	; case 91
  6649  001BC0  B4D8               	btfsc	status,2,c
  6650  001BC2  EFEB  F00C         	goto	l7103
  6651  001BC6  0A07               	xorlw	7	; case 92
  6652  001BC8  B4D8               	btfsc	status,2,c
  6653  001BCA  EF37  F00D         	goto	l7125
  6654  001BCE  0A38               	xorlw	56	; case 100
  6655  001BD0  B4D8               	btfsc	status,2,c
  6656  001BD2  EFE4  F001         	goto	l6509
  6657  001BD6  EFED  F00D         	goto	l7141
  6658  001BDA                     l7141:
  6659                           
  6660                           ;main.c: 759:         serialIOscan();
  6661  001BDA  EC54  F01B         	call	_serialIOscan	;wreg free
  6662                           
  6663                           ;main.c: 761:         switch(meAtuadores)
  6664  001BDE  EF15  F00F         	goto	l7215
  6665  001BE2                     l7143:
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;main.c: 766:                             resetIndicePassos();
  6669  001BE2  ECB7  F01F         	call	_resetIndicePassos	;wreg free
  6670                           
  6671                           ;main.c: 767:                             resetContCiclos();
  6672  001BE6  EC93  F01F         	call	_resetContCiclos	;wreg free
  6673  001BEA                     l7145:
  6674                           
  6675                           ;main.c: 768:                             meAtuadores = 2;
  6676  001BEA  0E02               	movlw	2
  6677  001BEC  0100               	movlb	0	; () banked
  6678  001BEE  6FAF               	movwf	main@meAtuadores& (0+255),b
  6679                           
  6680                           ;main.c: 769:                             break;
  6681  001BF0  EF47  F00D         	goto	l7139
  6682  001BF4                     l7147:
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;main.c: 772:                             auxPasso = fifo_lerPos(getIndicePassos());
  6686  001BF4  ECBD  F01F         	call	_getIndicePassos	;wreg free
  6687  001BF8  EC76  F01F         	call	_fifo_lerPos
  6688  001BFC  0100               	movlb	0	; () banked
  6689  001BFE  6FBA               	movwf	main@auxPasso& (0+255),b
  6690  001C00                     
  6691                           ; BSR set to: 0
  6692                           ;main.c: 774:                             if(botao == 1 || botao == 3 || botao == 0)
  6693  001C00  05B3               	decf	main@botao& (0+255),w,b
  6694  001C02  B4D8               	btfsc	status,2,c
  6695  001C04  EF06  F00E         	goto	u5681
  6696  001C08  EF08  F00E         	goto	u5680
  6697  001C0C                     u5681:
  6698  001C0C  EF19  F00E         	goto	l7155
  6699  001C10                     u5680:
  6700  001C10                     
  6701                           ; BSR set to: 0
  6702  001C10  0E03               	movlw	3
  6703  001C12  19B3               	xorwf	main@botao& (0+255),w,b
  6704  001C14  B4D8               	btfsc	status,2,c
  6705  001C16  EF0F  F00E         	goto	u5691
  6706  001C1A  EF11  F00E         	goto	u5690
  6707  001C1E                     u5691:
  6708  001C1E  EF19  F00E         	goto	l7155
  6709  001C22                     u5690:
  6710  001C22                     
  6711                           ; BSR set to: 0
  6712  001C22  51B3               	movf	main@botao& (0+255),w,b
  6713  001C24  A4D8               	btfss	status,2,c
  6714  001C26  EF17  F00E         	goto	u5701
  6715  001C2A  EF19  F00E         	goto	u5700
  6716  001C2E                     u5701:
  6717  001C2E  EF47  F00D         	goto	l621
  6718  001C32                     u5700:
  6719  001C32                     l7155:
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;main.c: 775:                                 meAtuadores = 3;
  6723  001C32  0E03               	movlw	3
  6724  001C34  6FAF               	movwf	main@meAtuadores& (0+255),b
  6725  001C36  EF47  F00D         	goto	l7139
  6726  001C3A                     l7157:
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;main.c: 779:                             if(auxPasso <= 0x64 || auxPasso == 0xFE)
  6730  001C3A  0E64               	movlw	100
  6731  001C3C  65BA               	cpfsgt	main@auxPasso& (0+255),b
  6732  001C3E  EF23  F00E         	goto	u5711
  6733  001C42  EF25  F00E         	goto	u5710
  6734  001C46                     u5711:
  6735  001C46  EF2E  F00E         	goto	l7161
  6736  001C4A                     u5710:
  6737  001C4A                     
  6738                           ; BSR set to: 0
  6739  001C4A  0EFE               	movlw	254
  6740  001C4C  19BA               	xorwf	main@auxPasso& (0+255),w,b
  6741  001C4E  A4D8               	btfss	status,2,c
  6742  001C50  EF2C  F00E         	goto	u5721
  6743  001C54  EF2E  F00E         	goto	u5720
  6744  001C58                     u5721:
  6745  001C58  EF61  F00E         	goto	l7167
  6746  001C5C                     u5720:
  6747  001C5C                     l7161:
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;main.c: 780:                             {;main.c: 781:                                
      +                           decodifica(&auxPasso);
  6751  001C5C  0EBA               	movlw	low main@auxPasso
  6752  001C5E  6E31               	movwf	decodifica@d^0,c
  6753  001C60  0E00               	movlw	high main@auxPasso
  6754  001C62  6E32               	movwf	(decodifica@d+1)^0,c
  6755  001C64  ECE7  F012         	call	_decodifica	;wreg free
  6756  001C68                     
  6757                           ;main.c: 782:                                 MCP4725((long)((4095L * auxPasso)/100));
  6758  001C68  0100               	movlb	0	; () banked
  6759  001C6A  51BA               	movf	main@auxPasso& (0+255),w,b
  6760  001C6C  6E31               	movwf	___lmul@multiplier^0,c
  6761  001C6E  6A32               	clrf	(___lmul@multiplier+1)^0,c
  6762  001C70  6A33               	clrf	(___lmul@multiplier+2)^0,c
  6763  001C72  6A34               	clrf	(___lmul@multiplier+3)^0,c
  6764  001C74  0EFF               	movlw	255
  6765  001C76  6E35               	movwf	___lmul@multiplicand^0,c
  6766  001C78  0E0F               	movlw	15
  6767  001C7A  6E36               	movwf	(___lmul@multiplicand+1)^0,c
  6768  001C7C  0E00               	movlw	0
  6769  001C7E  6E37               	movwf	(___lmul@multiplicand+2)^0,c
  6770  001C80  0E00               	movlw	0
  6771  001C82  6E38               	movwf	(___lmul@multiplicand+3)^0,c
  6772  001C84  EC63  F01A         	call	___lmul	;wreg free
  6773  001C88  C031  F03D         	movff	?___lmul,___aldiv@dividend
  6774  001C8C  C032  F03E         	movff	?___lmul+1,___aldiv@dividend+1
  6775  001C90  C033  F03F         	movff	?___lmul+2,___aldiv@dividend+2
  6776  001C94  C034  F040         	movff	?___lmul+3,___aldiv@dividend+3
  6777  001C98  0E64               	movlw	100
  6778  001C9A  6E41               	movwf	___aldiv@divisor^0,c
  6779  001C9C  0E00               	movlw	0
  6780  001C9E  6E42               	movwf	(___aldiv@divisor+1)^0,c
  6781  001CA0  0E00               	movlw	0
  6782  001CA2  6E43               	movwf	(___aldiv@divisor+2)^0,c
  6783  001CA4  0E00               	movlw	0
  6784  001CA6  6E44               	movwf	(___aldiv@divisor+3)^0,c
  6785  001CA8  EC23  F014         	call	___aldiv	;wreg free
  6786  001CAC  C03D  F04B         	movff	?___aldiv,MCP4725@Vout
  6787  001CB0  C03E  F04C         	movff	?___aldiv+1,MCP4725@Vout+1
  6788  001CB4  ECD9  F01E         	call	_MCP4725	;wreg free
  6789  001CB8                     l7165:
  6790                           
  6791                           ;main.c: 783:                                 meAtuadores = 6;
  6792  001CB8  0E06               	movlw	6
  6793  001CBA  0100               	movlb	0	; () banked
  6794  001CBC  6FAF               	movwf	main@meAtuadores& (0+255),b
  6795                           
  6796                           ;main.c: 784:                             }
  6797  001CBE  EF47  F00D         	goto	l7139
  6798  001CC2                     l7167:
  6799                           
  6800                           ; BSR set to: 0
  6801  001CC2  0E64               	movlw	100
  6802  001CC4  65BA               	cpfsgt	main@auxPasso& (0+255),b
  6803  001CC6  EF67  F00E         	goto	u5731
  6804  001CCA  EF69  F00E         	goto	u5730
  6805  001CCE                     u5731:
  6806  001CCE  EF8C  F00E         	goto	l7177
  6807  001CD2                     u5730:
  6808  001CD2                     
  6809                           ; BSR set to: 0
  6810  001CD2  0EDD               	movlw	221
  6811  001CD4  61BA               	cpfslt	main@auxPasso& (0+255),b
  6812  001CD6  EF6F  F00E         	goto	u5741
  6813  001CDA  EF71  F00E         	goto	u5740
  6814  001CDE                     u5741:
  6815  001CDE  EF8C  F00E         	goto	l7177
  6816  001CE2                     u5740:
  6817  001CE2                     
  6818                           ; BSR set to: 0
  6819                           ;main.c: 786:                             {;main.c: 787:                                
      +                           auxPasso -= 0x64;
  6820  001CE2  0E64               	movlw	100
  6821  001CE4  5FBA               	subwf	main@auxPasso& (0+255),f,b
  6822  001CE6                     
  6823                           ; BSR set to: 0
  6824                           ;main.c: 788:                                 setT1(auxPasso * 1000 );
  6825  001CE6  C0BA  F031         	movff	main@auxPasso,___wmul@multiplier
  6826  001CEA  6A32               	clrf	(___wmul@multiplier+1)^0,c
  6827  001CEC  0E03               	movlw	3
  6828  001CEE  6E34               	movwf	(___wmul@multiplicand+1)^0,c
  6829  001CF0  0EE8               	movlw	232
  6830  001CF2  6E33               	movwf	___wmul@multiplicand^0,c
  6831  001CF4  ECA3  F01E         	call	___wmul	;wreg free
  6832  001CF8  C031  F037         	movff	?___wmul,setT1@c
  6833  001CFC  C032  F038         	movff	?___wmul+1,setT1@c+1
  6834  001D00  0E00               	movlw	0
  6835  001D02  BE38               	btfsc	(setT1@c+1)^0,7,c
  6836  001D04  0EFF               	movlw	-1
  6837  001D06  6E39               	movwf	(setT1@c+2)^0,c
  6838  001D08  6E3A               	movwf	(setT1@c+3)^0,c
  6839  001D0A  EC32  F01F         	call	_setT1	;wreg free
  6840  001D0E                     
  6841                           ;main.c: 789:                                 meAtuadores = 4;
  6842  001D0E  0E04               	movlw	4
  6843  001D10  0100               	movlb	0	; () banked
  6844  001D12  6FAF               	movwf	main@meAtuadores& (0+255),b
  6845                           
  6846                           ;main.c: 790:                             }
  6847  001D14  EF47  F00D         	goto	l7139
  6848  001D18                     l7177:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;main.c: 792:                             {;main.c: 793:                                
      +                           decodifica(&auxPasso);
  6852  001D18  0EBA               	movlw	low main@auxPasso
  6853  001D1A  6E31               	movwf	decodifica@d^0,c
  6854  001D1C  0E00               	movlw	high main@auxPasso
  6855  001D1E  6E32               	movwf	(decodifica@d+1)^0,c
  6856  001D20  ECE7  F012         	call	_decodifica	;wreg free
  6857                           
  6858                           ;main.c: 794:                                 set_passo(auxPasso, vetorOut);
  6859  001D24  0EAE               	movlw	low main@vetorOut
  6860  001D26  6E31               	movwf	set_passo@ptr^0,c
  6861  001D28  0E00               	movlw	high main@vetorOut
  6862  001D2A  6E32               	movwf	(set_passo@ptr+1)^0,c
  6863  001D2C  0100               	movlb	0	; () banked
  6864  001D2E  51BA               	movf	main@auxPasso& (0+255),w,b
  6865  001D30  EC09  F016         	call	_set_passo
  6866  001D34                     
  6867                           ;main.c: 795:                                 meAtuadores = 5;
  6868  001D34  0E05               	movlw	5
  6869  001D36  0100               	movlb	0	; () banked
  6870  001D38  6FAF               	movwf	main@meAtuadores& (0+255),b
  6871  001D3A  EF47  F00D         	goto	l7139
  6872  001D3E                     l7181:
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;main.c: 800:                             if(!statusT1())
  6876  001D3E  EC64  F01F         	call	_statusT1	;wreg free
  6877  001D42  5031               	movf	?_statusT1^0,w,c
  6878  001D44  1032               	iorwf	(?_statusT1+1)^0,w,c
  6879  001D46  1033               	iorwf	(?_statusT1+2)^0,w,c
  6880  001D48  1034               	iorwf	(?_statusT1+3)^0,w,c
  6881  001D4A  A4D8               	btfss	status,2,c
  6882  001D4C  EFAA  F00E         	goto	u5751
  6883  001D50  EFAC  F00E         	goto	u5750
  6884  001D54                     u5751:
  6885  001D54  EF47  F00D         	goto	l621
  6886  001D58                     u5750:
  6887  001D58  EF5C  F00E         	goto	l7165
  6888  001D5C                     l7185:
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;main.c: 805:                             if(ler_sensor(auxPasso, vetorIn))
  6892  001D5C  0EAD               	movlw	low main@vetorIn
  6893  001D5E  6E31               	movwf	ler_sensor@ptr^0,c
  6894  001D60  0E00               	movlw	high main@vetorIn
  6895  001D62  6E32               	movwf	(ler_sensor@ptr+1)^0,c
  6896  001D64  51BA               	movf	main@auxPasso& (0+255),w,b
  6897  001D66  EC21  F015         	call	_ler_sensor
  6898  001D6A  0900               	iorlw	0
  6899  001D6C  B4D8               	btfsc	status,2,c
  6900  001D6E  EFBB  F00E         	goto	u5761
  6901  001D72  EFBD  F00E         	goto	u5760
  6902  001D76                     u5761:
  6903  001D76  EF47  F00D         	goto	l621
  6904  001D7A                     u5760:
  6905  001D7A  EF5C  F00E         	goto	l7165
  6906  001D7E                     l7189:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;main.c: 810:                             if(botao == 3)
  6910  001D7E  0E03               	movlw	3
  6911  001D80  19B3               	xorwf	main@botao& (0+255),w,b
  6912  001D82  A4D8               	btfss	status,2,c
  6913  001D84  EFC6  F00E         	goto	u5771
  6914  001D88  EFC8  F00E         	goto	u5770
  6915  001D8C                     u5771:
  6916  001D8C  EFCA  F00E         	goto	l894
  6917  001D90                     u5770:
  6918  001D90                     
  6919                           ; BSR set to: 0
  6920                           ;main.c: 811:                             {;main.c: 812:                                
      +                           botao = 2;
  6921  001D90  0E02               	movlw	2
  6922  001D92  6FB3               	movwf	main@botao& (0+255),b
  6923  001D94                     l894:
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;main.c: 814:                             meAtuadores = 7;
  6927  001D94  0E07               	movlw	7
  6928  001D96  6FAF               	movwf	main@meAtuadores& (0+255),b
  6929                           
  6930                           ;main.c: 816:                             break;
  6931  001D98  EF47  F00D         	goto	l7139
  6932  001D9C                     l7193:
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;main.c: 819:                             addIndicePassos();
  6936  001D9C  EC1C  F01F         	call	_addIndicePassos	;wreg free
  6937                           
  6938                           ;main.c: 820:                             if(getIndicePassos() < fifo_indice())
  6939  001DA0  ECBD  F01F         	call	_getIndicePassos	;wreg free
  6940  001DA4  6E59               	movwf	??_main^0,c
  6941  001DA6  ECC1  F01F         	call	_fifo_indice	;wreg free
  6942  001DAA  5C59               	subwf	??_main^0,w,c
  6943  001DAC  B0D8               	btfsc	status,0,c
  6944  001DAE  EFDB  F00E         	goto	u5781
  6945  001DB2  EFDD  F00E         	goto	u5780
  6946  001DB6                     u5781:
  6947  001DB6  EFDF  F00E         	goto	l7197
  6948  001DBA                     u5780:
  6949  001DBA  EFF5  F00D         	goto	l7145
  6950  001DBE                     l7197:
  6951                           
  6952                           ;main.c: 823:                             {;main.c: 824:                                
      +                           addContCiclos();
  6953  001DBE  ECBA  F01F         	call	_addContCiclos	;wreg free
  6954  001DC2                     
  6955                           ;main.c: 825:                                 meAtuadores = 8;
  6956  001DC2  0E08               	movlw	8
  6957  001DC4  0100               	movlb	0	; () banked
  6958  001DC6  6FAF               	movwf	main@meAtuadores& (0+255),b
  6959  001DC8  EF47  F00D         	goto	l7139
  6960  001DCC                     l7201:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;main.c: 830:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
  6964  001DCC  51B3               	movf	main@botao& (0+255),w,b
  6965  001DCE  B4D8               	btfsc	status,2,c
  6966  001DD0  EFEC  F00E         	goto	u5791
  6967  001DD4  EFEE  F00E         	goto	u5790
  6968  001DD8                     u5791:
  6969  001DD8  EF10  F00F         	goto	l7211
  6970  001DDC                     u5790:
  6971  001DDC                     
  6972                           ; BSR set to: 0
  6973  001DDC  EC9D  F01F         	call	_getContCiclos	;wreg free
  6974  001DE0  C031  F059         	movff	?_getContCiclos,??_main
  6975  001DE4  C032  F05A         	movff	?_getContCiclos+1,??_main+1
  6976  001DE8  ECEA  F01E         	call	_getCiclos	;wreg free
  6977  001DEC  5031               	movf	?_getCiclos^0,w,c
  6978  001DEE  5C59               	subwf	??_main^0,w,c
  6979  001DF0  5032               	movf	(?_getCiclos+1)^0,w,c
  6980  001DF2  585A               	subwfb	(??_main+1)^0,w,c
  6981  001DF4  A0D8               	btfss	status,0,c
  6982  001DF6  EFFF  F00E         	goto	u5801
  6983  001DFA  EF01  F00F         	goto	u5800
  6984  001DFE                     u5801:
  6985  001DFE  EF0C  F00F         	goto	l7207
  6986  001E02                     u5800:
  6987  001E02  ECEA  F01E         	call	_getCiclos	;wreg free
  6988  001E06  5031               	movf	?_getCiclos^0,w,c
  6989  001E08  1032               	iorwf	(?_getCiclos+1)^0,w,c
  6990  001E0A  A4D8               	btfss	status,2,c
  6991  001E0C  EF0A  F00F         	goto	u5811
  6992  001E10  EF0C  F00F         	goto	u5810
  6993  001E14                     u5811:
  6994  001E14  EF10  F00F         	goto	l7211
  6995  001E18                     u5810:
  6996  001E18                     l7207:
  6997                           
  6998                           ;main.c: 831:                             {;main.c: 832:                                
      +                           resetIndicePassos();
  6999  001E18  ECB7  F01F         	call	_resetIndicePassos	;wreg free
  7000  001E1C  EFF5  F00D         	goto	l7145
  7001  001E20                     l7211:
  7002                           
  7003                           ;main.c: 836:                             {;main.c: 837:                                
      +                           meAtuadores = 0;
  7004  001E20  0E00               	movlw	0
  7005  001E22  0100               	movlb	0	; () banked
  7006  001E24  6FAF               	movwf	main@meAtuadores& (0+255),b
  7007  001E26  EF47  F00D         	goto	l7139
  7008  001E2A                     l7215:
  7009  001E2A  0100               	movlb	0	; () banked
  7010  001E2C  51AF               	movf	main@meAtuadores& (0+255),w,b
  7011  001E2E  6E59               	movwf	??_main^0,c
  7012  001E30  6A5A               	clrf	(??_main+1)^0,c
  7013                           
  7014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7015                           ; Switch size 1, requested type "simple"
  7016                           ; Number of cases is 1, Range of values is 0 to 0
  7017                           ; switch strategies available:
  7018                           ; Name         Instructions Cycles
  7019                           ; simple_byte            4     3 (average)
  7020                           ;	Chosen strategy is simple_byte
  7021  001E32  505A               	movf	(??_main+1)^0,w,c
  7022  001E34  0A00               	xorlw	0	; case 0
  7023  001E36  B4D8               	btfsc	status,2,c
  7024  001E38  EF20  F00F         	goto	l8009
  7025  001E3C  EF47  F00D         	goto	l7139
  7026  001E40                     l8009:
  7027                           
  7028                           ; BSR set to: 0
  7029                           ; Switch size 1, requested type "simple"
  7030                           ; Number of cases is 9, Range of values is 0 to 8
  7031                           ; switch strategies available:
  7032                           ; Name         Instructions Cycles
  7033                           ; simple_byte           28    15 (average)
  7034                           ;	Chosen strategy is simple_byte
  7035  001E40  5059               	movf	??_main^0,w,c
  7036  001E42  0A00               	xorlw	0	; case 0
  7037  001E44  B4D8               	btfsc	status,2,c
  7038  001E46  EF47  F00D         	goto	l7139
  7039  001E4A  0A01               	xorlw	1	; case 1
  7040  001E4C  B4D8               	btfsc	status,2,c
  7041  001E4E  EFF1  F00D         	goto	l7143
  7042  001E52  0A03               	xorlw	3	; case 2
  7043  001E54  B4D8               	btfsc	status,2,c
  7044  001E56  EFFA  F00D         	goto	l7147
  7045  001E5A  0A01               	xorlw	1	; case 3
  7046  001E5C  B4D8               	btfsc	status,2,c
  7047  001E5E  EF1D  F00E         	goto	l7157
  7048  001E62  0A07               	xorlw	7	; case 4
  7049  001E64  B4D8               	btfsc	status,2,c
  7050  001E66  EF9F  F00E         	goto	l7181
  7051  001E6A  0A01               	xorlw	1	; case 5
  7052  001E6C  B4D8               	btfsc	status,2,c
  7053  001E6E  EFAE  F00E         	goto	l7185
  7054  001E72  0A03               	xorlw	3	; case 6
  7055  001E74  B4D8               	btfsc	status,2,c
  7056  001E76  EFBF  F00E         	goto	l7189
  7057  001E7A  0A01               	xorlw	1	; case 7
  7058  001E7C  B4D8               	btfsc	status,2,c
  7059  001E7E  EFCE  F00E         	goto	l7193
  7060  001E82  0A0F               	xorlw	15	; case 8
  7061  001E84  B4D8               	btfsc	status,2,c
  7062  001E86  EFE6  F00E         	goto	l7201
  7063  001E8A  EF47  F00D         	goto	l7139
  7064  001E8E  EF07  F000         	goto	start
  7065  001E92                     __end_of_main:
  7066                           	callstack 0
  7067                           
  7068 ;; *************** function _wifi_init *****************
  7069 ;; Defined at:
  7070 ;;		line 13 in file "wifi.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  br              4   21[COMRAM] long 
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7084 ;;      Params:         4       0       0       0       0       0       0       0       0
  7085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7087 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7088 ;;Total ram usage:        4 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    4
  7091 ;; This function calls:
  7092 ;;		_initEUSART
  7093 ;; This function is called by:
  7094 ;;		_main
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text1
  7099  003BDA                     __ptext1:
  7100                           	callstack 0
  7101  003BDA                     _wifi_init:
  7102                           	callstack 26
  7103  003BDA                     
  7104                           ;wifi.c: 13: void wifi_init( long br);wifi.c: 14: {;wifi.c: 15:     eusart.init(br);
  7105  003BDA  C046  F03E         	movff	wifi_init@br,initEUSART@baudRate
  7106  003BDE  C047  F03F         	movff	wifi_init@br+1,initEUSART@baudRate+1
  7107  003BE2  C048  F040         	movff	wifi_init@br+2,initEUSART@baudRate+2
  7108  003BE6  C049  F041         	movff	wifi_init@br+3,initEUSART@baudRate+3
  7109  003BEA  EE20  F0DD         	lfsr	2,_eusart+12
  7110  003BEE  D802               	call	u4428
  7111  003BF0  EF04  F01E         	goto	u4429
  7112  003BF4                     u4428:
  7113  003BF4  0005               	push	
  7114  003BF6  6EFA               	movwf	pclath,c
  7115  003BF8  50DE               	movf	postinc2,w,c
  7116  003BFA  6EFD               	movwf	tosl,c
  7117  003BFC  50DE               	movf	postinc2,w,c
  7118  003BFE  6EFE               	movwf	tosh,c
  7119  003C00  50F8               	movf	tblptru,w,c
  7120  003C02  6EFF               	movwf	tosu,c
  7121  003C04  50FA               	movf	pclath,w,c
  7122  003C06  0012               	return		;indir
  7123  003C08                     u4429:
  7124  003C08  0012               	return		;funcret
  7125  003C0A                     __end_of_wifi_init:
  7126                           	callstack 0
  7127                           
  7128 ;; *************** function _initEUSART *****************
  7129 ;; Defined at:
  7130 ;;		line 137 in file "eusart.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  baudRate        4   13[COMRAM] unsigned long 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;		None
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      void 
  7137 ;; Registers used:
  7138 ;;		wreg, status,2, status,0, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7144 ;;      Params:         4       0       0       0       0       0       0       0       0
  7145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7146 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7147 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7148 ;;Total ram usage:        8 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    3
  7151 ;; This function calls:
  7152 ;;		___lldiv
  7153 ;; This function is called by:
  7154 ;;		_wifi_init
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text2
  7159  003458                     __ptext2:
  7160                           	callstack 0
  7161  003458                     _initEUSART:
  7162                           	callstack 26
  7163  003458                     
  7164                           ;eusart.c: 137: void initEUSART( unsigned long baudRate );eusart.c: 138: {;eusart.c: 139
      +                          :     TRISCbits.TRISC6 = 0;
  7165  003458  9C94               	bcf	148,6,c	;volatile
  7166                           
  7167                           ;eusart.c: 140:     TRISCbits.TRISC7 = 1;
  7168  00345A  8E94               	bsf	148,7,c	;volatile
  7169                           
  7170                           ;eusart.c: 141:     INTCONbits.GIE = 0;
  7171  00345C  9EF2               	bcf	242,7,c	;volatile
  7172  00345E                     
  7173                           ;eusart.c: 144:     SPBRbits.u16 = (unsigned int)( (20000000 / (baudRate<<2)) - 1);
  7174  00345E  0E00               	movlw	0
  7175  003460  6E31               	movwf	___lldiv@dividend^0,c
  7176  003462  0E2D               	movlw	45
  7177  003464  6E32               	movwf	(___lldiv@dividend+1)^0,c
  7178  003466  0E31               	movlw	49
  7179  003468  6E33               	movwf	(___lldiv@dividend+2)^0,c
  7180  00346A  0E01               	movlw	1
  7181  00346C  6E34               	movwf	(___lldiv@dividend+3)^0,c
  7182  00346E  C03E  F042         	movff	initEUSART@baudRate,??_initEUSART
  7183  003472  C03F  F043         	movff	initEUSART@baudRate+1,??_initEUSART+1
  7184  003476  C040  F044         	movff	initEUSART@baudRate+2,??_initEUSART+2
  7185  00347A  C041  F045         	movff	initEUSART@baudRate+3,??_initEUSART+3
  7186  00347E  0E02               	movlw	2
  7187  003480                     u3775:
  7188  003480  90D8               	bcf	status,0,c
  7189  003482  3642               	rlcf	??_initEUSART^0,f,c
  7190  003484  3643               	rlcf	(??_initEUSART+1)^0,f,c
  7191  003486  3644               	rlcf	(??_initEUSART+2)^0,f,c
  7192  003488  3645               	rlcf	(??_initEUSART+3)^0,f,c
  7193  00348A  2EE8               	decfsz	wreg,f,c
  7194  00348C  EF40  F01A         	goto	u3775
  7195  003490  C042  F035         	movff	??_initEUSART,___lldiv@divisor
  7196  003494  C043  F036         	movff	??_initEUSART+1,___lldiv@divisor+1
  7197  003498  C044  F037         	movff	??_initEUSART+2,___lldiv@divisor+2
  7198  00349C  C045  F038         	movff	??_initEUSART+3,___lldiv@divisor+3
  7199  0034A0  EC33  F018         	call	___lldiv	;wreg free
  7200  0034A4  0EFF               	movlw	255
  7201  0034A6  2431               	addwf	?___lldiv^0,w,c
  7202  0034A8  6EAF               	movwf	175,c	;volatile
  7203  0034AA  0EFF               	movlw	255
  7204  0034AC  2032               	addwfc	(?___lldiv+1)^0,w,c
  7205  0034AE  6EB0               	movwf	176,c	;volatile
  7206  0034B0                     
  7207                           ;eusart.c: 148:     TXSTAbits.SYNC = 0;
  7208  0034B0  98AC               	bcf	172,4,c	;volatile
  7209  0034B2                     
  7210                           ;eusart.c: 149:     BAUDCONbits.BRG16 = 1;
  7211  0034B2  86B8               	bsf	184,3,c	;volatile
  7212  0034B4                     
  7213                           ;eusart.c: 150:     TXSTAbits.BRGH = 1;
  7214  0034B4  84AC               	bsf	172,2,c	;volatile
  7215  0034B6                     
  7216                           ;eusart.c: 152:     RCSTAbits.SPEN = 1;
  7217  0034B6  8EAB               	bsf	171,7,c	;volatile
  7218  0034B8                     
  7219                           ;eusart.c: 153:     TXSTAbits.TXEN = 1;
  7220  0034B8  8AAC               	bsf	172,5,c	;volatile
  7221  0034BA                     
  7222                           ;eusart.c: 154:     RCSTAbits.CREN = 1;
  7223  0034BA  88AB               	bsf	171,4,c	;volatile
  7224  0034BC                     
  7225                           ;eusart.c: 156:     PIE1bits.RCIE = 1;
  7226  0034BC  8A9D               	bsf	157,5,c	;volatile
  7227  0034BE                     
  7228                           ;eusart.c: 157:     PIE1bits.TXIE = 0;
  7229  0034BE  989D               	bcf	157,4,c	;volatile
  7230  0034C0                     
  7231                           ;eusart.c: 158:     INTCONbits.PEIE = 1;
  7232  0034C0  8CF2               	bsf	242,6,c	;volatile
  7233  0034C2                     
  7234                           ;eusart.c: 159:     INTCONbits.GIE = 1;
  7235  0034C2  8EF2               	bsf	242,7,c	;volatile
  7236  0034C4  0012               	return		;funcret
  7237  0034C6                     __end_of_initEUSART:
  7238                           	callstack 0
  7239                           
  7240 ;; *************** function _timer1_init *****************
  7241 ;; Defined at:
  7242 ;;		line 16 in file "timer1.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;		None
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, status,2
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7256 ;;      Params:         0       0       0       0       0       0       0       0       0
  7257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7259 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7260 ;;Total ram usage:        0 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    2
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_main
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text3
  7271  003DF2                     __ptext3:
  7272                           	callstack 0
  7273  003DF2                     _timer1_init:
  7274                           	callstack 28
  7275  003DF2                     
  7276                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  7277  003DF2  92CD               	bcf	205,1,c	;volatile
  7278  003DF4                     
  7279                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  7280  003DF4  0E30               	movlw	48
  7281  003DF6  12CD               	iorwf	205,f,c	;volatile
  7282  003DF8                     
  7283                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  7284  003DF8  84CD               	bsf	205,2,c	;volatile
  7285                           
  7286                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  7287  003DFA  0EFD               	movlw	253
  7288  003DFC  6ECF               	movwf	207,c	;volatile
  7289                           
  7290                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  7291  003DFE  0E8F               	movlw	143
  7292  003E00  6ECE               	movwf	206,c	;volatile
  7293  003E02                     
  7294                           ;timer1.c: 23:     T1CONbits.T1RUN = 0;
  7295  003E02  9CCD               	bcf	205,6,c	;volatile
  7296  003E04                     
  7297                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  7298  003E04  809D               	bsf	157,0,c	;volatile
  7299  003E06                     
  7300                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  7301  003E06  8CF2               	bsf	242,6,c	;volatile
  7302  003E08                     
  7303                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  7304  003E08  8EF2               	bsf	242,7,c	;volatile
  7305  003E0A  0012               	return		;funcret
  7306  003E0C                     __end_of_timer1_init:
  7307                           	callstack 0
  7308                           
  7309 ;; *************** function _teclado_init *****************
  7310 ;; Defined at:
  7311 ;;		line 29 in file "teclado.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    2
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_main
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text4
  7340  003F1C                     __ptext4:
  7341                           	callstack 0
  7342  003F1C                     _teclado_init:
  7343                           	callstack 28
  7344  003F1C                     
  7345                           ;teclado.c: 31:     PORTD = 0x00;
  7346  003F1C  0E00               	movlw	0
  7347  003F1E  6E83               	movwf	131,c	;volatile
  7348                           
  7349                           ;teclado.c: 32:     TRISD = 0xF0;
  7350  003F20  0EF0               	movlw	240
  7351  003F22  6E95               	movwf	149,c	;volatile
  7352  003F24  0012               	return		;funcret
  7353  003F26                     __end_of_teclado_init:
  7354                           	callstack 0
  7355                           
  7356 ;; *************** function _teclado_borda *****************
  7357 ;; Defined at:
  7358 ;;		line 92 in file "teclado.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;		None
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  tecla           1    6[COMRAM] unsigned char 
  7363 ;;  aux             1    5[COMRAM] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      unsigned char 
  7366 ;; Registers used:
  7367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0
  7374 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7376 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7377 ;;Total ram usage:        2 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    3
  7380 ;; This function calls:
  7381 ;;		_teclado_scan
  7382 ;; This function is called by:
  7383 ;;		_main
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text5
  7388  003B6E                     __ptext5:
  7389                           	callstack 0
  7390  003B6E                     _teclado_borda:
  7391                           	callstack 27
  7392  003B6E                     
  7393                           ;teclado.c: 95:     char aux = 0;
  7394  003B6E  0E00               	movlw	0
  7395  003B70  6E36               	movwf	teclado_borda@aux^0,c
  7396  003B72                     
  7397                           ;teclado.c: 97:     tecla = teclado_scan();
  7398  003B72  EC8C  F017         	call	_teclado_scan	;wreg free
  7399  003B76  6E37               	movwf	teclado_borda@tecla^0,c
  7400  003B78                     
  7401                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  7402  003B78  5037               	movf	teclado_borda@tecla^0,w,c
  7403  003B7A  B4D8               	btfsc	status,2,c
  7404  003B7C  EFC2  F01D         	goto	u4381
  7405  003B80  EFC4  F01D         	goto	u4380
  7406  003B84                     u4381:
  7407  003B84  EFCE  F01D         	goto	l1029
  7408  003B88                     u4380:
  7409  003B88  501B               	movf	_teclaAnterior^0,w,c
  7410  003B8A  A4D8               	btfss	status,2,c
  7411  003B8C  EFCA  F01D         	goto	u4391
  7412  003B90  EFCC  F01D         	goto	u4390
  7413  003B94                     u4391:
  7414  003B94  EFCE  F01D         	goto	l1029
  7415  003B98                     u4390:
  7416  003B98                     
  7417                           ;teclado.c: 100:         aux = tecla;
  7418  003B98  C037  F036         	movff	teclado_borda@tecla,teclado_borda@aux
  7419  003B9C                     l1029:
  7420                           
  7421                           ;teclado.c: 102:     teclaAnterior = tecla;
  7422  003B9C  C037  F01B         	movff	teclado_borda@tecla,_teclaAnterior
  7423  003BA0                     
  7424                           ;teclado.c: 104:     return(aux);
  7425  003BA0  5036               	movf	teclado_borda@aux^0,w,c
  7426  003BA2  0012               	return		;funcret
  7427  003BA4                     __end_of_teclado_borda:
  7428                           	callstack 0
  7429                           
  7430 ;; *************** function _teclado_scan *****************
  7431 ;; Defined at:
  7432 ;;		line 55 in file "teclado.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;		None
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  c               1    4[COMRAM] unsigned char 
  7437 ;;  l               1    3[COMRAM] unsigned char 
  7438 ;;  tecla           1    2[COMRAM] unsigned char 
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      unsigned char 
  7441 ;; Registers used:
  7442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0
  7449 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7450 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7451 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7452 ;;Total ram usage:        5 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    2
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		_teclado_borda
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	text6
  7463  002F18                     __ptext6:
  7464                           	callstack 0
  7465  002F18                     _teclado_scan:
  7466                           	callstack 27
  7467  002F18                     
  7468                           ;teclado.c: 57:    char tecla = 0;
  7469  002F18  0E00               	movlw	0
  7470  002F1A  6E33               	movwf	teclado_scan@tecla^0,c
  7471                           
  7472                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  7473  002F1C  0E00               	movlw	0
  7474  002F1E  6E34               	movwf	teclado_scan@l^0,c
  7475  002F20                     l5501:
  7476  002F20  0E03               	movlw	3
  7477  002F22  6434               	cpfsgt	teclado_scan@l^0,c
  7478  002F24  EF96  F017         	goto	u3721
  7479  002F28  EF98  F017         	goto	u3720
  7480  002F2C                     u3721:
  7481  002F2C  EF9A  F017         	goto	l5505
  7482  002F30                     u3720:
  7483  002F30  EFDE  F017         	goto	l5525
  7484  002F34                     l5505:
  7485                           
  7486                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  7487  002F34  C034  F031         	movff	teclado_scan@l,??_teclado_scan
  7488  002F38  0E01               	movlw	1
  7489  002F3A  6E32               	movwf	(??_teclado_scan+1)^0,c
  7490  002F3C  2A31               	incf	??_teclado_scan^0,f,c
  7491  002F3E  EFA3  F017         	goto	u3734
  7492  002F42                     u3735:
  7493  002F42  90D8               	bcf	status,0,c
  7494  002F44  3632               	rlcf	(??_teclado_scan+1)^0,f,c
  7495  002F46                     u3734:
  7496  002F46  2E31               	decfsz	??_teclado_scan^0,f,c
  7497  002F48  EFA1  F017         	goto	u3735
  7498  002F4C  5032               	movf	(??_teclado_scan+1)^0,w,c
  7499  002F4E  6E83               	movwf	131,c	;volatile
  7500  002F50                     
  7501                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  7502  002F50  0E00               	movlw	0
  7503  002F52  6E35               	movwf	teclado_scan@c^0,c
  7504  002F54                     l5513:
  7505                           
  7506                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  7507  002F54  C035  F031         	movff	teclado_scan@c,??_teclado_scan
  7508  002F58  0E10               	movlw	16
  7509  002F5A  6E32               	movwf	(??_teclado_scan+1)^0,c
  7510  002F5C  2A31               	incf	??_teclado_scan^0,f,c
  7511  002F5E  EFB3  F017         	goto	u3744
  7512  002F62                     u3745:
  7513  002F62  90D8               	bcf	status,0,c
  7514  002F64  3632               	rlcf	(??_teclado_scan+1)^0,f,c
  7515  002F66                     u3744:
  7516  002F66  2E31               	decfsz	??_teclado_scan^0,f,c
  7517  002F68  EFB1  F017         	goto	u3745
  7518  002F6C  5032               	movf	(??_teclado_scan+1)^0,w,c
  7519  002F6E  1483               	andwf	131,w,c	;volatile
  7520  002F70  0900               	iorlw	0
  7521  002F72  B4D8               	btfsc	status,2,c
  7522  002F74  EFBE  F017         	goto	u3751
  7523  002F78  EFC0  F017         	goto	u3750
  7524  002F7C                     u3751:
  7525  002F7C  EFD2  F017         	goto	l5517
  7526  002F80                     u3750:
  7527  002F80                     
  7528                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  7529  002F80  5034               	movf	teclado_scan@l^0,w,c
  7530  002F82  0D04               	mullw	4
  7531  002F84  0E46               	movlw	low _teclas
  7532  002F86  6E31               	movwf	??_teclado_scan^0,c
  7533  002F88  0E01               	movlw	high _teclas
  7534  002F8A  6E32               	movwf	(??_teclado_scan+1)^0,c
  7535  002F8C  50F3               	movf	243,w,c
  7536  002F8E  2631               	addwf	??_teclado_scan^0,f,c
  7537  002F90  50F4               	movf	244,w,c
  7538  002F92  2232               	addwfc	(??_teclado_scan+1)^0,f,c
  7539  002F94  5035               	movf	teclado_scan@c^0,w,c
  7540  002F96  2431               	addwf	??_teclado_scan^0,w,c
  7541  002F98  6ED9               	movwf	fsr2l,c
  7542  002F9A  0E00               	movlw	0
  7543  002F9C  2032               	addwfc	(??_teclado_scan+1)^0,w,c
  7544  002F9E  6EDA               	movwf	fsr2h,c
  7545  002FA0  50DF               	movf	indf2,w,c
  7546  002FA2  6E33               	movwf	teclado_scan@tecla^0,c
  7547  002FA4                     l5517:
  7548                           
  7549                           ;teclado.c: 85:         }
  7550  002FA4  2A35               	incf	teclado_scan@c^0,f,c
  7551  002FA6  0E03               	movlw	3
  7552  002FA8  6435               	cpfsgt	teclado_scan@c^0,c
  7553  002FAA  EFD9  F017         	goto	u3761
  7554  002FAE  EFDB  F017         	goto	u3760
  7555  002FB2                     u3761:
  7556  002FB2  EFAA  F017         	goto	l5513
  7557  002FB6                     u3760:
  7558  002FB6                     
  7559                           ;teclado.c: 86:     }
  7560  002FB6  2A34               	incf	teclado_scan@l^0,f,c
  7561  002FB8  EF90  F017         	goto	l5501
  7562  002FBC                     l5525:
  7563                           
  7564                           ;teclado.c: 87:     return( tecla );
  7565  002FBC  5033               	movf	teclado_scan@tecla^0,w,c
  7566  002FBE  0012               	return		;funcret
  7567  002FC0                     __end_of_teclado_scan:
  7568                           	callstack 0
  7569                           
  7570 ;; *************** function _statusT1 *****************
  7571 ;; Defined at:
  7572 ;;		line 38 in file "timer1.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;		None
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  4    0[COMRAM] unsigned long 
  7579 ;; Registers used:
  7580 ;;		None
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7586 ;;      Params:         4       0       0       0       0       0       0       0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7589 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7590 ;;Total ram usage:        4 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    2
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_main
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text7
  7601  003EC8                     __ptext7:
  7602                           	callstack 0
  7603  003EC8                     _statusT1:
  7604                           	callstack 28
  7605  003EC8                     
  7606                           ;timer1.c: 40:     return( t1cont );
  7607  003EC8  C00B  F031         	movff	_t1cont,?_statusT1
  7608  003ECC  C00C  F032         	movff	_t1cont+1,?_statusT1+1
  7609  003ED0  C00D  F033         	movff	_t1cont+2,?_statusT1+2
  7610  003ED4  C00E  F034         	movff	_t1cont+3,?_statusT1+3
  7611  003ED8  0012               	return		;funcret
  7612  003EDA                     __end_of_statusT1:
  7613                           	callstack 0
  7614                           
  7615 ;; *************** function _set_passo *****************
  7616 ;; Defined at:
  7617 ;;		line 53 in file "atuadores.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  passo           1    wreg     unsigned char 
  7620 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7621 ;;		 -> main@vetorOut(1), 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  passo           1    4[COMRAM] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      void 
  7626 ;; Registers used:
  7627 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7633 ;;      Params:         2       0       0       0       0       0       0       0       0
  7634 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7635 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7636 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7637 ;;Total ram usage:        5 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    2
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_main
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           	psect	text8
  7648  002C12                     __ptext8:
  7649                           	callstack 0
  7650  002C12                     _set_passo:
  7651                           	callstack 28
  7652                           
  7653                           ;incstack = 0
  7654                           ;set_passo@passo stored from wreg
  7655  002C12  6E35               	movwf	set_passo@passo^0,c
  7656  002C14                     
  7657                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  7658  002C14  EF4C  F016         	goto	l5617
  7659  002C18                     l5599:
  7660  002C18  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7661  002C1C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7662  002C20  0E00               	movlw	0
  7663  002C22  80DB               	bsf	plusw2,0,c
  7664  002C24  EF79  F016         	goto	l35
  7665  002C28                     l5601:
  7666  002C28  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7667  002C2C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7668  002C30  0EFE               	movlw	254
  7669  002C32  16DF               	andwf	indf2,f,c
  7670  002C34  EF79  F016         	goto	l35
  7671  002C38                     l5603:
  7672  002C38  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7673  002C3C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7674  002C40  0E00               	movlw	0
  7675  002C42  82DB               	bsf	plusw2,1,c
  7676  002C44  EF79  F016         	goto	l35
  7677  002C48                     l5605:
  7678  002C48  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7679  002C4C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7680  002C50  0EFD               	movlw	253
  7681  002C52  16DF               	andwf	indf2,f,c
  7682  002C54  EF79  F016         	goto	l35
  7683  002C58                     l5607:
  7684  002C58  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7685  002C5C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7686  002C60  0E00               	movlw	0
  7687  002C62  84DB               	bsf	plusw2,2,c
  7688  002C64  EF79  F016         	goto	l35
  7689  002C68                     l5609:
  7690  002C68  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7691  002C6C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7692  002C70  0EFB               	movlw	251
  7693  002C72  16DF               	andwf	indf2,f,c
  7694  002C74  EF79  F016         	goto	l35
  7695  002C78                     l5611:
  7696  002C78  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7697  002C7C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7698  002C80  0E00               	movlw	0
  7699  002C82  86DB               	bsf	plusw2,3,c
  7700  002C84  EF79  F016         	goto	l35
  7701  002C88                     l5613:
  7702  002C88  C031  FFD9         	movff	set_passo@ptr,fsr2l
  7703  002C8C  C032  FFDA         	movff	set_passo@ptr+1,fsr2h
  7704  002C90  0EF7               	movlw	247
  7705  002C92  16DF               	andwf	indf2,f,c
  7706  002C94  EF79  F016         	goto	l35
  7707  002C98                     l5617:
  7708  002C98  5035               	movf	set_passo@passo^0,w,c
  7709  002C9A  6E33               	movwf	??_set_passo^0,c
  7710  002C9C  6A34               	clrf	(??_set_passo+1)^0,c
  7711                           
  7712                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7713                           ; Switch size 1, requested type "simple"
  7714                           ; Number of cases is 1, Range of values is 0 to 0
  7715                           ; switch strategies available:
  7716                           ; Name         Instructions Cycles
  7717                           ; simple_byte            4     3 (average)
  7718                           ;	Chosen strategy is simple_byte
  7719  002C9E  5034               	movf	(??_set_passo+1)^0,w,c
  7720  002CA0  0A00               	xorlw	0	; case 0
  7721  002CA2  B4D8               	btfsc	status,2,c
  7722  002CA4  EF56  F016         	goto	l8011
  7723  002CA8  EF79  F016         	goto	l35
  7724  002CAC                     l8011:
  7725                           
  7726                           ; Switch size 1, requested type "simple"
  7727                           ; Number of cases is 8, Range of values is 65 to 100
  7728                           ; switch strategies available:
  7729                           ; Name         Instructions Cycles
  7730                           ; simple_byte           25    13 (average)
  7731                           ;	Chosen strategy is simple_byte
  7732  002CAC  5033               	movf	??_set_passo^0,w,c
  7733  002CAE  0A41               	xorlw	65	; case 65
  7734  002CB0  B4D8               	btfsc	status,2,c
  7735  002CB2  EF0C  F016         	goto	l5599
  7736  002CB6  0A03               	xorlw	3	; case 66
  7737  002CB8  B4D8               	btfsc	status,2,c
  7738  002CBA  EF1C  F016         	goto	l5603
  7739  002CBE  0A01               	xorlw	1	; case 67
  7740  002CC0  B4D8               	btfsc	status,2,c
  7741  002CC2  EF2C  F016         	goto	l5607
  7742  002CC6  0A07               	xorlw	7	; case 68
  7743  002CC8  B4D8               	btfsc	status,2,c
  7744  002CCA  EF3C  F016         	goto	l5611
  7745  002CCE  0A25               	xorlw	37	; case 97
  7746  002CD0  B4D8               	btfsc	status,2,c
  7747  002CD2  EF14  F016         	goto	l5601
  7748  002CD6  0A03               	xorlw	3	; case 98
  7749  002CD8  B4D8               	btfsc	status,2,c
  7750  002CDA  EF24  F016         	goto	l5605
  7751  002CDE  0A01               	xorlw	1	; case 99
  7752  002CE0  B4D8               	btfsc	status,2,c
  7753  002CE2  EF34  F016         	goto	l5609
  7754  002CE6  0A07               	xorlw	7	; case 100
  7755  002CE8  B4D8               	btfsc	status,2,c
  7756  002CEA  EF44  F016         	goto	l5613
  7757  002CEE  EF79  F016         	goto	l35
  7758  002CF2                     l35:
  7759  002CF2  0012               	return		;funcret
  7760  002CF4                     __end_of_set_passo:
  7761                           	callstack 0
  7762                           
  7763 ;; *************** function _setT1 *****************
  7764 ;; Defined at:
  7765 ;;		line 31 in file "timer1.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  c               4    6[COMRAM] unsigned long 
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;		None
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      void 
  7772 ;; Registers used:
  7773 ;;		None
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7779 ;;      Params:         4       0       0       0       0       0       0       0       0
  7780 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7782 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7783 ;;Total ram usage:        4 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    2
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_main
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           	psect	text9
  7794  003E64                     __ptext9:
  7795                           	callstack 0
  7796  003E64                     _setT1:
  7797                           	callstack 28
  7798  003E64                     
  7799                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  7800  003E64  C037  F00B         	movff	setT1@c,_t1cont
  7801  003E68  C038  F00C         	movff	setT1@c+1,_t1cont+1
  7802  003E6C  C039  F00D         	movff	setT1@c+2,_t1cont+2
  7803  003E70  C03A  F00E         	movff	setT1@c+3,_t1cont+3
  7804                           
  7805                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  7806  003E74  80CD               	bsf	205,0,c	;volatile
  7807  003E76  0012               	return		;funcret
  7808  003E78                     __end_of_setT1:
  7809                           	callstack 0
  7810                           
  7811 ;; *************** function _serialIOscan *****************
  7812 ;; Defined at:
  7813 ;;		line 76 in file "serialIO.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  i               1    6[COMRAM] unsigned char 
  7818 ;;  j               1    5[COMRAM] unsigned char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  1    wreg      void 
  7821 ;; Registers used:
  7822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7828 ;;      Params:         0       0       0       0       0       0       0       0       0
  7829 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7830 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7831 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7832 ;;Total ram usage:        4 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:    3
  7835 ;; This function calls:
  7836 ;;		_serialIObyteShift
  7837 ;;		_serialIOload
  7838 ;; This function is called by:
  7839 ;;		_main
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           	psect	text10
  7844  0036A8                     __ptext10:
  7845                           	callstack 0
  7846  0036A8                     _serialIOscan:
  7847                           	callstack 27
  7848  0036A8                     
  7849                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  7850  0036A8  041C               	decf	_lenSerialIO^0,w,c
  7851  0036AA  6E36               	movwf	serialIOscan@j^0,c
  7852  0036AC                     
  7853                           ;serialIO.c: 80:     serialIOload();
  7854  0036AC  ECB4  F01F         	call	_serialIOload	;wreg free
  7855  0036B0                     
  7856                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  7857  0036B0  0E00               	movlw	0
  7858  0036B2  6E37               	movwf	serialIOscan@i^0,c
  7859  0036B4  EF74  F01B         	goto	l6205
  7860  0036B8                     l6201:
  7861                           
  7862                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  7863  0036B8  5037               	movf	serialIOscan@i^0,w,c
  7864  0036BA  2415               	addwf	_ptrSerialIn^0,w,c
  7865  0036BC  6ED9               	movwf	fsr2l,c
  7866  0036BE  0E00               	movlw	0
  7867  0036C0  2016               	addwfc	(_ptrSerialIn+1)^0,w,c
  7868  0036C2  6EDA               	movwf	fsr2h,c
  7869  0036C4  5036               	movf	serialIOscan@j^0,w,c
  7870  0036C6  2413               	addwf	_ptrSerialOut^0,w,c
  7871  0036C8  6E34               	movwf	??_serialIOscan^0,c
  7872  0036CA  0E00               	movlw	0
  7873  0036CC  2014               	addwfc	(_ptrSerialOut+1)^0,w,c
  7874  0036CE  6E35               	movwf	(??_serialIOscan+1)^0,c
  7875  0036D0  5037               	movf	serialIOscan@i^0,w,c
  7876  0036D2  5C34               	subwf	??_serialIOscan^0,w,c
  7877  0036D4  6EE1               	movwf	fsr1l,c
  7878  0036D6  5035               	movf	(??_serialIOscan+1)^0,w,c
  7879  0036D8  A0D8               	btfss	status,0,c
  7880  0036DA  0435               	decf	(??_serialIOscan+1)^0,w,c
  7881  0036DC  6EE2               	movwf	fsr1h,c
  7882  0036DE  50E7               	movf	indf1,w,c
  7883  0036E0  EC27  F01B         	call	_serialIObyteShift
  7884  0036E4  6EDF               	movwf	indf2,c
  7885  0036E6                     
  7886                           ;serialIO.c: 84:     }
  7887  0036E6  2A37               	incf	serialIOscan@i^0,f,c
  7888  0036E8                     l6205:
  7889  0036E8  501C               	movf	_lenSerialIO^0,w,c
  7890  0036EA  5C37               	subwf	serialIOscan@i^0,w,c
  7891  0036EC  A0D8               	btfss	status,0,c
  7892  0036EE  EF7B  F01B         	goto	u4401
  7893  0036F2  EF7D  F01B         	goto	u4400
  7894  0036F6                     u4401:
  7895  0036F6  EF5C  F01B         	goto	l6201
  7896  0036FA                     u4400:
  7897  0036FA                     
  7898                           ;serialIO.c: 85:     serialIOload();
  7899  0036FA  ECB4  F01F         	call	_serialIOload	;wreg free
  7900  0036FE  0012               	return		;funcret
  7901  003700                     __end_of_serialIOscan:
  7902                           	callstack 0
  7903                           
  7904 ;; *************** function _serialIOload *****************
  7905 ;; Defined at:
  7906 ;;		line 45 in file "serialIO.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		None
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7920 ;;      Params:         0       0       0       0       0       0       0       0       0
  7921 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7923 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7924 ;;Total ram usage:        0 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    2
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_serialIOscan
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           	psect	text11
  7935  003F68                     __ptext11:
  7936                           	callstack 0
  7937  003F68                     _serialIOload:
  7938                           	callstack 27
  7939  003F68                     
  7940                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  7941  003F68  9680               	bcf	128,3,c	;volatile
  7942                           
  7943                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  7944  003F6A  8680               	bsf	128,3,c	;volatile
  7945  003F6C  0012               	return		;funcret
  7946  003F6E                     __end_of_serialIOload:
  7947                           	callstack 0
  7948                           
  7949 ;; *************** function _serialIObyteShift *****************
  7950 ;; Defined at:
  7951 ;;		line 50 in file "serialIO.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  dataIn          1    wreg     unsigned char 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  dataIn          1    0[COMRAM] unsigned char 
  7956 ;;  dataBit         1    2[COMRAM] unsigned char 
  7957 ;;  dataOut         1    1[COMRAM] unsigned char 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  1    wreg      unsigned char 
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, status,0
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7967 ;;      Params:         0       0       0       0       0       0       0       0       0
  7968 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7970 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7971 ;;Total ram usage:        3 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    2
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_serialIOscan
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text12
  7982  00364E                     __ptext12:
  7983                           	callstack 0
  7984  00364E                     _serialIObyteShift:
  7985                           	callstack 27
  7986                           
  7987                           ;incstack = 0
  7988                           ;serialIObyteShift@dataIn stored from wreg
  7989  00364E  6E31               	movwf	serialIObyteShift@dataIn^0,c
  7990  003650                     
  7991                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  7992  003650  0E80               	movlw	128
  7993  003652  6E33               	movwf	serialIObyteShift@dataBit^0,c
  7994                           
  7995                           ;serialIO.c: 56:     dataOut = 0;
  7996  003654  0E00               	movlw	0
  7997  003656  6E32               	movwf	serialIObyteShift@dataOut^0,c
  7998                           
  7999                           ;serialIO.c: 58:     while( dataBit )
  8000  003658  EF49  F01B         	goto	l5493
  8001  00365C                     l926:
  8002                           
  8003                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  8004  00365C  9480               	bcf	128,2,c	;volatile
  8005  00365E                     
  8006                           ;serialIO.c: 61:         if( dataIn & dataBit )
  8007  00365E  5031               	movf	serialIObyteShift@dataIn^0,w,c
  8008  003660  1433               	andwf	serialIObyteShift@dataBit^0,w,c
  8009  003662  0900               	iorlw	0
  8010  003664  B4D8               	btfsc	status,2,c
  8011  003666  EF37  F01B         	goto	u3691
  8012  00366A  EF39  F01B         	goto	u3690
  8013  00366E                     u3691:
  8014  00366E  EF3C  F01B         	goto	l927
  8015  003672                     u3690:
  8016  003672                     
  8017                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  8018  003672  8080               	bsf	128,0,c	;volatile
  8019  003674  EF3D  F01B         	goto	l928
  8020  003678                     l927:
  8021                           
  8022                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  8023  003678  9080               	bcf	128,0,c	;volatile
  8024  00367A                     l928:
  8025                           
  8026                           ;serialIO.c: 66:         if( SERIALIO.IN )
  8027  00367A  A280               	btfss	128,1,c	;volatile
  8028  00367C  EF42  F01B         	goto	u3701
  8029  003680  EF44  F01B         	goto	u3700
  8030  003684                     u3701:
  8031  003684  EF46  F01B         	goto	l5491
  8032  003688                     u3700:
  8033  003688                     
  8034                           ;serialIO.c: 67:             dataOut |= dataBit;
  8035  003688  5033               	movf	serialIObyteShift@dataBit^0,w,c
  8036  00368A  1232               	iorwf	serialIObyteShift@dataOut^0,f,c
  8037  00368C                     l5491:
  8038                           
  8039                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  8040  00368C  8480               	bsf	128,2,c	;volatile
  8041                           
  8042                           ;serialIO.c: 69:         dataBit >>= 1;
  8043  00368E  90D8               	bcf	status,0,c
  8044  003690  3233               	rrcf	serialIObyteShift@dataBit^0,f,c
  8045  003692                     l5493:
  8046                           
  8047                           ;serialIO.c: 58:     while( dataBit )
  8048  003692  5033               	movf	serialIObyteShift@dataBit^0,w,c
  8049  003694  A4D8               	btfss	status,2,c
  8050  003696  EF4F  F01B         	goto	u3711
  8051  00369A  EF51  F01B         	goto	u3710
  8052  00369E                     u3711:
  8053  00369E  EF2E  F01B         	goto	l926
  8054  0036A2                     u3710:
  8055  0036A2                     
  8056                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  8057  0036A2  9480               	bcf	128,2,c	;volatile
  8058  0036A4                     
  8059                           ;serialIO.c: 72:     return( dataOut );
  8060  0036A4  5032               	movf	serialIObyteShift@dataOut^0,w,c
  8061  0036A6  0012               	return		;funcret
  8062  0036A8                     __end_of_serialIObyteShift:
  8063                           	callstack 0
  8064                           
  8065 ;; *************** function _salvar_receita *****************
  8066 ;; Defined at:
  8067 ;;		line 46 in file "eeprom.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;  adrs            1    wreg     unsigned char 
  8070 ;;  data            2    6[COMRAM] PTR unsigned char 
  8071 ;;		 -> fila(18), 
  8072 ;; Auto vars:     Size  Location     Type
  8073 ;;  adrs            1   10[COMRAM] unsigned char 
  8074 ;;  i               1   11[COMRAM] unsigned char 
  8075 ;;  aux             2    8[COMRAM] int 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8085 ;;      Params:         2       0       0       0       0       0       0       0       0
  8086 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8088 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8089 ;;Total ram usage:        6 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    3
  8092 ;; This function calls:
  8093 ;;		_EEPROM_write
  8094 ;;		_end_receita
  8095 ;; This function is called by:
  8096 ;;		_main
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           	psect	text13
  8101  0039C4                     __ptext13:
  8102                           	callstack 0
  8103  0039C4                     _salvar_receita:
  8104                           	callstack 27
  8105                           
  8106                           ;incstack = 0
  8107                           ;salvar_receita@adrs stored from wreg
  8108  0039C4  6E3B               	movwf	salvar_receita@adrs^0,c
  8109  0039C6                     
  8110                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  8111  0039C6  C03B  F031         	movff	salvar_receita@adrs,end_receita@x
  8112  0039CA  6A32               	clrf	(end_receita@x+1)^0,c
  8113  0039CC  ECB6  F01E         	call	_end_receita	;wreg free
  8114  0039D0  C031  F039         	movff	?_end_receita,salvar_receita@aux
  8115  0039D4  C032  F03A         	movff	?_end_receita+1,salvar_receita@aux+1
  8116  0039D8                     
  8117                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  8118  0039D8  0E00               	movlw	0
  8119  0039DA  6E3C               	movwf	salvar_receita@i^0,c
  8120  0039DC                     l5727:
  8121                           
  8122                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  8123  0039DC  503C               	movf	salvar_receita@i^0,w,c
  8124  0039DE  2437               	addwf	salvar_receita@data^0,w,c
  8125  0039E0  6ED9               	movwf	fsr2l,c
  8126  0039E2  0E00               	movlw	0
  8127  0039E4  2038               	addwfc	(salvar_receita@data+1)^0,w,c
  8128  0039E6  6EDA               	movwf	fsr2h,c
  8129  0039E8  50DF               	movf	indf2,w,c
  8130  0039EA  6E31               	movwf	EEPROM_write@data^0,c
  8131  0039EC  503C               	movf	salvar_receita@i^0,w,c
  8132  0039EE  2439               	addwf	salvar_receita@aux^0,w,c
  8133  0039F0  EC4B  F01E         	call	_EEPROM_write
  8134  0039F4  2A3C               	incf	salvar_receita@i^0,f,c
  8135  0039F6  0E0F               	movlw	15
  8136  0039F8  643C               	cpfsgt	salvar_receita@i^0,c
  8137  0039FA  EF01  F01D         	goto	u3901
  8138  0039FE  EF03  F01D         	goto	u3900
  8139  003A02                     u3901:
  8140  003A02  EFEE  F01C         	goto	l5727
  8141  003A06                     u3900:
  8142  003A06  0012               	return		;funcret
  8143  003A08                     __end_of_salvar_receita:
  8144                           	callstack 0
  8145                           
  8146 ;; *************** function _salvar_dado *****************
  8147 ;; Defined at:
  8148 ;;		line 63 in file "eeprom.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  adrs            1    wreg     unsigned char 
  8151 ;;  col             1    6[COMRAM] unsigned char 
  8152 ;;  data            1    7[COMRAM] unsigned char 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  adrs            1   10[COMRAM] unsigned char 
  8155 ;;  aux             2    8[COMRAM] int 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  1    wreg      void 
  8158 ;; Registers used:
  8159 ;;		wreg, status,2, status,0, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8165 ;;      Params:         2       0       0       0       0       0       0       0       0
  8166 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8168 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8169 ;;Total ram usage:        5 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    3
  8172 ;; This function calls:
  8173 ;;		_EEPROM_write
  8174 ;;		_end_receita
  8175 ;; This function is called by:
  8176 ;;		_main
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           	psect	text14
  8181  003D90                     __ptext14:
  8182                           	callstack 0
  8183  003D90                     _salvar_dado:
  8184                           	callstack 27
  8185                           
  8186                           ;incstack = 0
  8187                           ;salvar_dado@adrs stored from wreg
  8188  003D90  6E3B               	movwf	salvar_dado@adrs^0,c
  8189  003D92                     
  8190                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  8191  003D92  C03B  F031         	movff	salvar_dado@adrs,end_receita@x
  8192  003D96  6A32               	clrf	(end_receita@x+1)^0,c
  8193  003D98  ECB6  F01E         	call	_end_receita	;wreg free
  8194  003D9C  C031  F039         	movff	?_end_receita,salvar_dado@aux
  8195  003DA0  C032  F03A         	movff	?_end_receita+1,salvar_dado@aux+1
  8196                           
  8197                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  8198  003DA4  C038  F031         	movff	salvar_dado@data,EEPROM_write@data
  8199  003DA8  5037               	movf	salvar_dado@col^0,w,c
  8200  003DAA  2439               	addwf	salvar_dado@aux^0,w,c
  8201  003DAC  EC4B  F01E         	call	_EEPROM_write
  8202  003DB0  0012               	return		;funcret
  8203  003DB2                     __end_of_salvar_dado:
  8204                           	callstack 0
  8205                           
  8206 ;; *************** function _salva_atuadores_init *****************
  8207 ;; Defined at:
  8208 ;;		line 117 in file "fifo.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;		None
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  condi_init      4    3[COMRAM] unsigned char [4]
  8213 ;;  pt              2    7[COMRAM] PTR unsigned char 
  8214 ;;		 -> salva_atuadores_init@condi_init(4), 
  8215 ;;  mask            1   10[COMRAM] unsigned char 
  8216 ;;  dado            1    9[COMRAM] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      unsigned char 
  8219 ;; Registers used:
  8220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8226 ;;      Params:         0       0       0       0       0       0       0       0       0
  8227 ;;      Locals:         8       0       0       0       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8229 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8230 ;;Total ram usage:        8 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    3
  8233 ;; This function calls:
  8234 ;;		_ler_atuador
  8235 ;; This function is called by:
  8236 ;;		_main
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text15
  8241  003366                     __ptext15:
  8242                           	callstack 0
  8243  003366                     _salva_atuadores_init:
  8244                           	callstack 27
  8245  003366                     
  8246                           ;fifo.c: 119:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  8247  003366  0E00               	movlw	0
  8248  003368  6E34               	movwf	salva_atuadores_init@condi_init^0,c
  8249  00336A  0E00               	movlw	0
  8250  00336C  6E35               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  8251  00336E  0E00               	movlw	0
  8252  003370  6E36               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  8253  003372  0E00               	movlw	0
  8254  003374  6E37               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  8255  003376  0E41               	movlw	65
  8256  003378  EC85  F018         	call	_ler_atuador
  8257  00337C  6E34               	movwf	salva_atuadores_init@condi_init^0,c
  8258  00337E  0E42               	movlw	66
  8259  003380  EC85  F018         	call	_ler_atuador
  8260  003384  6E35               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  8261  003386  0E43               	movlw	67
  8262  003388  EC85  F018         	call	_ler_atuador
  8263  00338C  6E36               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  8264  00338E  0E44               	movlw	68
  8265  003390  EC85  F018         	call	_ler_atuador
  8266  003394  6E37               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  8267  003396                     
  8268                           ;fifo.c: 121:     char *pt = condi_init;
  8269  003396  0E34               	movlw	low salva_atuadores_init@condi_init
  8270  003398  6E38               	movwf	salva_atuadores_init@pt^0,c
  8271  00339A  0E00               	movlw	high salva_atuadores_init@condi_init
  8272  00339C  6E39               	movwf	(salva_atuadores_init@pt+1)^0,c
  8273  00339E                     
  8274                           ;fifo.c: 122:     char dado = 0;
  8275  00339E  0E00               	movlw	0
  8276  0033A0  6E3A               	movwf	salva_atuadores_init@dado^0,c
  8277  0033A2                     
  8278                           ;fifo.c: 123:     char mask = 0x08;
  8279  0033A2  0E08               	movlw	8
  8280  0033A4  6E3B               	movwf	salva_atuadores_init@mask^0,c
  8281                           
  8282                           ;fifo.c: 125:     while( mask )
  8283  0033A6  EFE8  F019         	goto	l5823
  8284  0033AA                     l5815:
  8285                           
  8286                           ;fifo.c: 126:     {;fifo.c: 127:         if( *pt )
  8287  0033AA  C038  FFD9         	movff	salva_atuadores_init@pt,fsr2l
  8288  0033AE  C039  FFDA         	movff	salva_atuadores_init@pt+1,fsr2h
  8289  0033B2  50DF               	movf	indf2,w,c
  8290  0033B4  B4D8               	btfsc	status,2,c
  8291  0033B6  EFDF  F019         	goto	u3941
  8292  0033BA  EFE1  F019         	goto	u3940
  8293  0033BE                     u3941:
  8294  0033BE  EFE4  F019         	goto	l5819
  8295  0033C2                     u3940:
  8296  0033C2                     
  8297                           ;fifo.c: 128:         {;fifo.c: 129:             dado = dado | mask;
  8298  0033C2  503A               	movf	salva_atuadores_init@dado^0,w,c
  8299  0033C4  103B               	iorwf	salva_atuadores_init@mask^0,w,c
  8300  0033C6  6E3A               	movwf	salva_atuadores_init@dado^0,c
  8301  0033C8                     l5819:
  8302                           
  8303                           ;fifo.c: 131:         pt++;
  8304  0033C8  4A38               	infsnz	salva_atuadores_init@pt^0,f,c
  8305  0033CA  2A39               	incf	(salva_atuadores_init@pt+1)^0,f,c
  8306  0033CC                     
  8307                           ;fifo.c: 132:         mask >>= 1;
  8308  0033CC  90D8               	bcf	status,0,c
  8309  0033CE  323B               	rrcf	salva_atuadores_init@mask^0,f,c
  8310  0033D0                     l5823:
  8311                           
  8312                           ;fifo.c: 125:     while( mask )
  8313  0033D0  503B               	movf	salva_atuadores_init@mask^0,w,c
  8314  0033D2  A4D8               	btfss	status,2,c
  8315  0033D4  EFEE  F019         	goto	u3951
  8316  0033D8  EFF0  F019         	goto	u3950
  8317  0033DC                     u3951:
  8318  0033DC  EFD5  F019         	goto	l5815
  8319  0033E0                     u3950:
  8320  0033E0                     
  8321                           ;fifo.c: 134:     return(dado);
  8322  0033E0  503A               	movf	salva_atuadores_init@dado^0,w,c
  8323  0033E2  0012               	return		;funcret
  8324  0033E4                     __end_of_salva_atuadores_init:
  8325                           	callstack 0
  8326                           
  8327 ;; *************** function _ler_atuador *****************
  8328 ;; Defined at:
  8329 ;;		line 80 in file "fifo.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  tecla           1    wreg     unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  tecla           1    2[COMRAM] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      unsigned char 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8343 ;;      Params:         0       0       0       0       0       0       0       0       0
  8344 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8345 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8346 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8347 ;;Total ram usage:        3 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    2
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_salva_atuadores_init
  8354 ;;		_main
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text16
  8359  00310A                     __ptext16:
  8360                           	callstack 0
  8361  00310A                     _ler_atuador:
  8362                           	callstack 27
  8363                           
  8364                           ;incstack = 0
  8365                           ;ler_atuador@tecla stored from wreg
  8366  00310A  6E33               	movwf	ler_atuador@tecla^0,c
  8367  00310C                     
  8368                           ;fifo.c: 80: char ler_atuador(char tecla);fifo.c: 81: {;fifo.c: 82:     switch(tecla)
  8369  00310C  EFB7  F018         	goto	l5345
  8370  003110                     l251:
  8371  003110  B01E               	btfsc	_atuador^0,0,c
  8372  003112  EF8D  F018         	goto	u3461
  8373  003116  EF90  F018         	goto	u3460
  8374  00311A                     u3461:
  8375  00311A  0E01               	movlw	1
  8376  00311C  EF91  F018         	goto	u3466
  8377  003120                     u3460:
  8378  003120  0E00               	movlw	0
  8379  003122                     u3466:
  8380  003122  EFD4  F018         	goto	l252
  8381  003126                     l254:
  8382  003126  B21E               	btfsc	_atuador^0,1,c
  8383  003128  EF98  F018         	goto	u3471
  8384  00312C  EF9B  F018         	goto	u3470
  8385  003130                     u3471:
  8386  003130  0E01               	movlw	1
  8387  003132  EF9C  F018         	goto	u3476
  8388  003136                     u3470:
  8389  003136  0E00               	movlw	0
  8390  003138                     u3476:
  8391  003138  EFD4  F018         	goto	l252
  8392  00313C                     l255:
  8393  00313C  B41E               	btfsc	_atuador^0,2,c
  8394  00313E  EFA3  F018         	goto	u3481
  8395  003142  EFA6  F018         	goto	u3480
  8396  003146                     u3481:
  8397  003146  0E01               	movlw	1
  8398  003148  EFA7  F018         	goto	u3486
  8399  00314C                     u3480:
  8400  00314C  0E00               	movlw	0
  8401  00314E                     u3486:
  8402  00314E  EFD4  F018         	goto	l252
  8403  003152                     l256:
  8404  003152  B61E               	btfsc	_atuador^0,3,c
  8405  003154  EFAE  F018         	goto	u3491
  8406  003158  EFB1  F018         	goto	u3490
  8407  00315C                     u3491:
  8408  00315C  0E01               	movlw	1
  8409  00315E  EFB2  F018         	goto	u3496
  8410  003162                     u3490:
  8411  003162  0E00               	movlw	0
  8412  003164                     u3496:
  8413  003164  EFD4  F018         	goto	l252
  8414  003168                     l5337:
  8415  003168  0E00               	movlw	0
  8416  00316A  EFD4  F018         	goto	l252
  8417  00316E                     l5345:
  8418  00316E  5033               	movf	ler_atuador@tecla^0,w,c
  8419  003170  6E31               	movwf	??_ler_atuador^0,c
  8420  003172  6A32               	clrf	(??_ler_atuador+1)^0,c
  8421                           
  8422                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8423                           ; Switch size 1, requested type "simple"
  8424                           ; Number of cases is 1, Range of values is 0 to 0
  8425                           ; switch strategies available:
  8426                           ; Name         Instructions Cycles
  8427                           ; simple_byte            4     3 (average)
  8428                           ;	Chosen strategy is simple_byte
  8429  003174  5032               	movf	(??_ler_atuador+1)^0,w,c
  8430  003176  0A00               	xorlw	0	; case 0
  8431  003178  B4D8               	btfsc	status,2,c
  8432  00317A  EFC1  F018         	goto	l8013
  8433  00317E  EFB4  F018         	goto	l5337
  8434  003182                     l8013:
  8435                           
  8436                           ; Switch size 1, requested type "simple"
  8437                           ; Number of cases is 4, Range of values is 65 to 68
  8438                           ; switch strategies available:
  8439                           ; Name         Instructions Cycles
  8440                           ; simple_byte           13     7 (average)
  8441                           ;	Chosen strategy is simple_byte
  8442  003182  5031               	movf	??_ler_atuador^0,w,c
  8443  003184  0A41               	xorlw	65	; case 65
  8444  003186  B4D8               	btfsc	status,2,c
  8445  003188  EF88  F018         	goto	l251
  8446  00318C  0A03               	xorlw	3	; case 66
  8447  00318E  B4D8               	btfsc	status,2,c
  8448  003190  EF93  F018         	goto	l254
  8449  003194  0A01               	xorlw	1	; case 67
  8450  003196  B4D8               	btfsc	status,2,c
  8451  003198  EF9E  F018         	goto	l255
  8452  00319C  0A07               	xorlw	7	; case 68
  8453  00319E  B4D8               	btfsc	status,2,c
  8454  0031A0  EFA9  F018         	goto	l256
  8455  0031A4  EFB4  F018         	goto	l5337
  8456  0031A8                     l252:
  8457  0031A8  0012               	return		;funcret
  8458  0031AA                     __end_of_ler_atuador:
  8459                           	callstack 0
  8460                           
  8461 ;; *************** function _resetIndicePassos *****************
  8462 ;; Defined at:
  8463 ;;		line 36 in file "fifo.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8480 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8481 ;;Total ram usage:        0 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    2
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_main
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text17
  8492  003F6E                     __ptext17:
  8493                           	callstack 0
  8494  003F6E                     _resetIndicePassos:
  8495                           	callstack 28
  8496  003F6E                     
  8497                           ;fifo.c: 38:     indice_passos = 2;
  8498  003F6E  0E02               	movlw	2
  8499  003F70  6E5B               	movwf	_indice_passos^0,c
  8500  003F72  0012               	return		;funcret
  8501  003F74                     __end_of_resetIndicePassos:
  8502                           	callstack 0
  8503                           
  8504 ;; *************** function _resetContCiclos *****************
  8505 ;; Defined at:
  8506 ;;		line 54 in file "fifo.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;		None
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;		None
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  1    wreg      void 
  8513 ;; Registers used:
  8514 ;;		wreg, status,2
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0
  8521 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8523 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8524 ;;Total ram usage:        0 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    2
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_main
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text18
  8535  003F26                     __ptext18:
  8536                           	callstack 0
  8537  003F26                     _resetContCiclos:
  8538                           	callstack 28
  8539  003F26                     
  8540                           ;fifo.c: 56:     cont_ciclos = 0;
  8541  003F26  0E00               	movlw	0
  8542  003F28  6E18               	movwf	(_cont_ciclos+1)^0,c
  8543  003F2A  0E00               	movlw	0
  8544  003F2C  6E17               	movwf	_cont_ciclos^0,c
  8545  003F2E  0012               	return		;funcret
  8546  003F30                     __end_of_resetContCiclos:
  8547                           	callstack 0
  8548                           
  8549 ;; *************** function _printExec *****************
  8550 ;; Defined at:
  8551 ;;		line 520 in file "fifo.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  col             1    wreg     unsigned char 
  8554 ;;  ind             1   25[COMRAM] unsigned char 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  col             1   28[COMRAM] unsigned char 
  8557 ;;  passo           1   29[COMRAM] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  1    wreg      void 
  8560 ;; Registers used:
  8561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8567 ;;      Params:         1       0       0       0       0       0       0       0       0
  8568 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8570 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8571 ;;Total ram usage:        5 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    5
  8574 ;; This function calls:
  8575 ;;		_decodifica
  8576 ;;		_dignum_tam
  8577 ;;		_dispLCD_dataReg
  8578 ;;		_dispLCD_lincol
  8579 ;;		_dispLCD_num
  8580 ;;		_posAtual
  8581 ;; This function is called by:
  8582 ;;		_main
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           	psect	text19
  8587  002176                     __ptext19:
  8588                           	callstack 0
  8589  002176                     _printExec:
  8590                           	callstack 25
  8591                           
  8592                           ;incstack = 0
  8593                           ;printExec@col stored from wreg
  8594  002176  6E4D               	movwf	printExec@col^0,c
  8595  002178                     
  8596                           ;fifo.c: 520: void printExec (char col, char ind);fifo.c: 521: {;fifo.c: 522:     char p
      +                          asso = posAtual( ind );
  8597  002178  504A               	movf	printExec@ind^0,w,c
  8598  00217A  EC6D  F01F         	call	_posAtual
  8599  00217E  6E4E               	movwf	printExec@passo^0,c
  8600  002180                     
  8601                           ;fifo.c: 524:     if(passo > 0 && passo <= 0x64)
  8602  002180  504E               	movf	printExec@passo^0,w,c
  8603  002182  B4D8               	btfsc	status,2,c
  8604  002184  EFC6  F010         	goto	u4281
  8605  002188  EFC8  F010         	goto	u4280
  8606  00218C                     u4281:
  8607  00218C  EFF1  F010         	goto	l6083
  8608  002190                     u4280:
  8609  002190  0E65               	movlw	101
  8610  002192  604E               	cpfslt	printExec@passo^0,c
  8611  002194  EFCE  F010         	goto	u4291
  8612  002198  EFD0  F010         	goto	u4290
  8613  00219C                     u4291:
  8614  00219C  EFF1  F010         	goto	l6083
  8615  0021A0                     u4290:
  8616  0021A0                     
  8617                           ;fifo.c: 525:     {;fifo.c: 526:         if( dignum_tam( (int) passo ) == 3 )
  8618  0021A0  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8619  0021A4  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8620  0021A6  EC44  F01D         	call	_dignum_tam	;wreg free
  8621  0021AA  0A03               	xorlw	3
  8622  0021AC  A4D8               	btfss	status,2,c
  8623  0021AE  EFDB  F010         	goto	u4301
  8624  0021B2  EFDD  F010         	goto	u4300
  8625  0021B6                     u4301:
  8626  0021B6  EFDE  F010         	goto	l6079
  8627  0021BA                     u4300:
  8628  0021BA                     
  8629                           ;fifo.c: 527:             col-=1;
  8630  0021BA  064D               	decf	printExec@col^0,f,c
  8631  0021BC                     l6079:
  8632                           
  8633                           ;fifo.c: 528:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8634  0021BC  C04D  F03C         	movff	printExec@col,dispLCD_num@col
  8635  0021C0  C04E  F03D         	movff	printExec@passo,dispLCD_num@num
  8636  0021C4  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  8637  0021C6  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8638  0021CA  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8639  0021CC  EC44  F01D         	call	_dignum_tam	;wreg free
  8640  0021D0  6E3F               	movwf	dispLCD_num@tam^0,c
  8641  0021D2  0E00               	movlw	0
  8642  0021D4  EC80  F011         	call	_dispLCD_num
  8643  0021D8                     
  8644                           ;fifo.c: 529:         dispLCD_dataReg('%');
  8645  0021D8  0E25               	movlw	37
  8646  0021DA  EC2B  F01C         	call	_dispLCD_dataReg
  8647                           
  8648                           ;fifo.c: 530:     }
  8649  0021DE  EF7F  F011         	goto	l459
  8650  0021E2                     l6083:
  8651  0021E2  0E64               	movlw	100
  8652  0021E4  644E               	cpfsgt	printExec@passo^0,c
  8653  0021E6  EFF7  F010         	goto	u4311
  8654  0021EA  EFF9  F010         	goto	u4310
  8655  0021EE                     u4311:
  8656  0021EE  EF28  F011         	goto	l6097
  8657  0021F2                     u4310:
  8658  0021F2  0EDD               	movlw	221
  8659  0021F4  604E               	cpfslt	printExec@passo^0,c
  8660  0021F6  EFFF  F010         	goto	u4321
  8661  0021FA  EF01  F011         	goto	u4320
  8662  0021FE                     u4321:
  8663  0021FE  EF28  F011         	goto	l6097
  8664  002202                     u4320:
  8665  002202                     
  8666                           ;fifo.c: 532:     {;fifo.c: 533:         decodifica(&passo);
  8667  002202  0E4E               	movlw	low printExec@passo
  8668  002204  6E31               	movwf	decodifica@d^0,c
  8669  002206  0E00               	movlw	high printExec@passo
  8670  002208  6E32               	movwf	(decodifica@d+1)^0,c
  8671  00220A  ECE7  F012         	call	_decodifica	;wreg free
  8672  00220E                     
  8673                           ;fifo.c: 534:         if( dignum_tam( (int) passo ) == 3 )
  8674  00220E  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8675  002212  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8676  002214  EC44  F01D         	call	_dignum_tam	;wreg free
  8677  002218  0A03               	xorlw	3
  8678  00221A  A4D8               	btfss	status,2,c
  8679  00221C  EF12  F011         	goto	u4331
  8680  002220  EF14  F011         	goto	u4330
  8681  002224                     u4331:
  8682  002224  EF15  F011         	goto	l6093
  8683  002228                     u4330:
  8684  002228                     
  8685                           ;fifo.c: 535:             col-=1;
  8686  002228  064D               	decf	printExec@col^0,f,c
  8687  00222A                     l6093:
  8688                           
  8689                           ;fifo.c: 536:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8690  00222A  C04D  F03C         	movff	printExec@col,dispLCD_num@col
  8691  00222E  C04E  F03D         	movff	printExec@passo,dispLCD_num@num
  8692  002232  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  8693  002234  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8694  002238  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8695  00223A  EC44  F01D         	call	_dignum_tam	;wreg free
  8696  00223E  6E3F               	movwf	dispLCD_num@tam^0,c
  8697  002240  0E00               	movlw	0
  8698  002242  EC80  F011         	call	_dispLCD_num
  8699  002246                     
  8700                           ;fifo.c: 537:         dispLCD_dataReg('s');
  8701  002246  0E73               	movlw	115
  8702  002248  EC2B  F01C         	call	_dispLCD_dataReg
  8703                           
  8704                           ;fifo.c: 538:     }
  8705  00224C  EF7F  F011         	goto	l459
  8706  002250                     l6097:
  8707  002250  0EDC               	movlw	220
  8708  002252  644E               	cpfsgt	printExec@passo^0,c
  8709  002254  EF2E  F011         	goto	u4341
  8710  002258  EF30  F011         	goto	u4340
  8711  00225C                     u4341:
  8712  00225C  EF5D  F011         	goto	l6115
  8713  002260                     u4340:
  8714  002260  0EFE               	movlw	254
  8715  002262  604E               	cpfslt	printExec@passo^0,c
  8716  002264  EF36  F011         	goto	u4351
  8717  002268  EF38  F011         	goto	u4350
  8718  00226C                     u4351:
  8719  00226C  EF5D  F011         	goto	l6115
  8720  002270                     u4350:
  8721  002270                     
  8722                           ;fifo.c: 540:     {;fifo.c: 541:         decodifica(&passo);
  8723  002270  0E4E               	movlw	low printExec@passo
  8724  002272  6E31               	movwf	decodifica@d^0,c
  8725  002274  0E00               	movlw	high printExec@passo
  8726  002276  6E32               	movwf	(decodifica@d+1)^0,c
  8727  002278  ECE7  F012         	call	_decodifica	;wreg free
  8728  00227C                     
  8729                           ;fifo.c: 542:         dispLCD_lincol(0, col);
  8730  00227C  C04D  F033         	movff	printExec@col,dispLCD_lincol@col
  8731  002280  0E00               	movlw	0
  8732  002282  EC98  F01A         	call	_dispLCD_lincol
  8733  002286                     
  8734                           ;fifo.c: 543:         dispLCD_dataReg( passo & ~0x20 );
  8735  002286  504E               	movf	printExec@passo^0,w,c
  8736  002288  0BDF               	andlw	223
  8737  00228A  EC2B  F01C         	call	_dispLCD_dataReg
  8738  00228E                     
  8739                           ;fifo.c: 544:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  8740  00228E  BA4E               	btfsc	printExec@passo^0,5,c
  8741  002290  EF4C  F011         	goto	u4361
  8742  002294  EF4E  F011         	goto	u4360
  8743  002298                     u4361:
  8744  002298  EF54  F011         	goto	l6111
  8745  00229C                     u4360:
  8746  00229C  0E00               	movlw	0
  8747  00229E  6E4C               	movwf	(_printExec$498+1)^0,c
  8748  0022A0  0E2B               	movlw	43
  8749  0022A2  6E4B               	movwf	_printExec$498^0,c
  8750  0022A4  EF58  F011         	goto	l6113
  8751  0022A8                     l6111:
  8752  0022A8  0E00               	movlw	0
  8753  0022AA  6E4C               	movwf	(_printExec$498+1)^0,c
  8754  0022AC  0E2D               	movlw	45
  8755  0022AE  6E4B               	movwf	_printExec$498^0,c
  8756  0022B0                     l6113:
  8757  0022B0  504B               	movf	_printExec$498^0,w,c
  8758  0022B2  EC2B  F01C         	call	_dispLCD_dataReg
  8759                           
  8760                           ;fifo.c: 545:     }
  8761  0022B6  EF7F  F011         	goto	l459
  8762  0022BA                     l6115:
  8763  0022BA  0EFE               	movlw	254
  8764  0022BC  184E               	xorwf	printExec@passo^0,w,c
  8765  0022BE  A4D8               	btfss	status,2,c
  8766  0022C0  EF64  F011         	goto	u4371
  8767  0022C4  EF66  F011         	goto	u4370
  8768  0022C8                     u4371:
  8769  0022C8  EF7F  F011         	goto	l451
  8770  0022CC                     u4370:
  8771  0022CC                     
  8772                           ;fifo.c: 547:     {;fifo.c: 548:         decodifica(&passo);
  8773  0022CC  0E4E               	movlw	low printExec@passo
  8774  0022CE  6E31               	movwf	decodifica@d^0,c
  8775  0022D0  0E00               	movlw	high printExec@passo
  8776  0022D2  6E32               	movwf	(decodifica@d+1)^0,c
  8777  0022D4  ECE7  F012         	call	_decodifica	;wreg free
  8778  0022D8                     
  8779                           ;fifo.c: 549:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8780  0022D8  C04D  F03C         	movff	printExec@col,dispLCD_num@col
  8781  0022DC  C04E  F03D         	movff	printExec@passo,dispLCD_num@num
  8782  0022E0  6A3E               	clrf	(dispLCD_num@num+1)^0,c
  8783  0022E2  C04E  F039         	movff	printExec@passo,dignum_tam@num
  8784  0022E6  6A3A               	clrf	(dignum_tam@num+1)^0,c
  8785  0022E8  EC44  F01D         	call	_dignum_tam	;wreg free
  8786  0022EC  6E3F               	movwf	dispLCD_num@tam^0,c
  8787  0022EE  0E00               	movlw	0
  8788  0022F0  EC80  F011         	call	_dispLCD_num
  8789  0022F4                     
  8790                           ;fifo.c: 550:         dispLCD_dataReg('%');
  8791  0022F4  0E25               	movlw	37
  8792  0022F6  EC2B  F01C         	call	_dispLCD_dataReg
  8793  0022FA  EF7F  F011         	goto	l459
  8794  0022FE                     l451:
  8795  0022FE                     l459:
  8796  0022FE  0012               	return		;funcret
  8797  002300                     __end_of_printExec:
  8798                           	callstack 0
  8799                           
  8800 ;; *************** function _posAtual *****************
  8801 ;; Defined at:
  8802 ;;		line 512 in file "fifo.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  ind             1    wreg     unsigned char 
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  ind             1    1[COMRAM] unsigned char 
  8807 ;;  passo           1    2[COMRAM] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      unsigned char 
  8810 ;; Registers used:
  8811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0
  8818 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8820 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8821 ;;Total ram usage:        2 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    3
  8824 ;; This function calls:
  8825 ;;		_fifo_lerPos
  8826 ;;		_getIndicePassos
  8827 ;; This function is called by:
  8828 ;;		_printExec
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           	psect	text20
  8833  003EDA                     __ptext20:
  8834                           	callstack 0
  8835  003EDA                     _posAtual:
  8836                           	callstack 26
  8837                           
  8838                           ;incstack = 0
  8839                           ;posAtual@ind stored from wreg
  8840  003EDA  6E32               	movwf	posAtual@ind^0,c
  8841  003EDC                     
  8842                           ;fifo.c: 516:     passo = fifo_lerPos( getIndicePassos() + ind );
  8843  003EDC  ECBD  F01F         	call	_getIndicePassos	;wreg free
  8844  003EE0  2432               	addwf	posAtual@ind^0,w,c
  8845  003EE2  EC76  F01F         	call	_fifo_lerPos
  8846  003EE6  6E33               	movwf	posAtual@passo^0,c
  8847  003EE8                     
  8848                           ;fifo.c: 517:     return(passo);
  8849  003EE8  5033               	movf	posAtual@passo^0,w,c
  8850  003EEA  0012               	return		;funcret
  8851  003EEC                     __end_of_posAtual:
  8852                           	callstack 0
  8853                           
  8854 ;; *************** function _getIndicePassos *****************
  8855 ;; Defined at:
  8856 ;;		line 31 in file "fifo.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;		None
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;		None
  8861 ;; Return value:  Size  Location     Type
  8862 ;;                  1    wreg      unsigned char 
  8863 ;; Registers used:
  8864 ;;		wreg, status,2
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8870 ;;      Params:         0       0       0       0       0       0       0       0       0
  8871 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8873 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8874 ;;Total ram usage:        0 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    2
  8877 ;; This function calls:
  8878 ;;		Nothing
  8879 ;; This function is called by:
  8880 ;;		_posAtual
  8881 ;;		_main
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text21
  8886  003F7A                     __ptext21:
  8887                           	callstack 0
  8888  003F7A                     _getIndicePassos:
  8889                           	callstack 26
  8890  003F7A                     
  8891                           ;fifo.c: 33:     return(indice_passos);
  8892  003F7A  505B               	movf	_indice_passos^0,w,c
  8893  003F7C  0012               	return		;funcret
  8894  003F7E                     __end_of_getIndicePassos:
  8895                           	callstack 0
  8896                           
  8897 ;; *************** function _fifo_lerPos *****************
  8898 ;; Defined at:
  8899 ;;		line 168 in file "fifo.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;  i               1    wreg     unsigned char 
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;  i               1    0[COMRAM] unsigned char 
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      unsigned char 
  8906 ;; Registers used:
  8907 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8913 ;;      Params:         0       0       0       0       0       0       0       0       0
  8914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8916 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8917 ;;Total ram usage:        1 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    2
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_posAtual
  8924 ;;		_main
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text22
  8929  003EEC                     __ptext22:
  8930                           	callstack 0
  8931  003EEC                     _fifo_lerPos:
  8932                           	callstack 26
  8933                           
  8934                           ;incstack = 0
  8935                           ;fifo_lerPos@i stored from wreg
  8936  003EEC  6E31               	movwf	fifo_lerPos@i^0,c
  8937  003EEE                     
  8938                           ;fifo.c: 168: char fifo_lerPos(char i);fifo.c: 169: {;fifo.c: 170:     return ( fila[i] 
      +                          );
  8939  003EEE  0E1F               	movlw	low _fila
  8940  003EF0  2431               	addwf	fifo_lerPos@i^0,w,c
  8941  003EF2  6ED9               	movwf	fsr2l,c
  8942  003EF4  6ADA               	clrf	fsr2h,c
  8943  003EF6  0E00               	movlw	high _fila
  8944  003EF8  22DA               	addwfc	fsr2h,f,c
  8945  003EFA  50DF               	movf	indf2,w,c
  8946  003EFC  0012               	return		;funcret
  8947  003EFE                     __end_of_fifo_lerPos:
  8948                           	callstack 0
  8949                           
  8950 ;; *************** function _dispLCD_num *****************
  8951 ;; Defined at:
  8952 ;;		line 201 in file "dispLCD4vias.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  lin             1    wreg     unsigned char 
  8955 ;;  col             1   11[COMRAM] unsigned char 
  8956 ;;  num             2   12[COMRAM] int 
  8957 ;;  tam             1   14[COMRAM] unsigned char 
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;  lin             1   20[COMRAM] unsigned char 
  8960 ;;  div             2   23[COMRAM] int 
  8961 ;;  sinal           1   22[COMRAM] unsigned char 
  8962 ;;  size            1   21[COMRAM] unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      void 
  8965 ;; Registers used:
  8966 ;;		wreg, status,2, status,0, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8972 ;;      Params:         4       0       0       0       0       0       0       0       0
  8973 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8974 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8975 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8976 ;;Total ram usage:       14 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    4
  8979 ;; This function calls:
  8980 ;;		___awdiv
  8981 ;;		___awmod
  8982 ;;		_dispLCD_dataReg
  8983 ;;		_dispLCD_lincol
  8984 ;; This function is called by:
  8985 ;;		_printExec
  8986 ;;		_main
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text23
  8991  002300                     __ptext23:
  8992                           	callstack 0
  8993  002300                     _dispLCD_num:
  8994                           	callstack 25
  8995                           
  8996                           ;incstack = 0
  8997                           ;dispLCD_num@lin stored from wreg
  8998  002300  6E45               	movwf	dispLCD_num@lin^0,c
  8999  002302                     
  9000                           ;dispLCD4vias.c: 201: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 202:                     int num, unsigned char tam );dispLCD4vias.c: 203: {;dispL
      +                          CD4vias.c: 204:     int div;;dispLCD4vias.c: 205:     unsigned char size;;dispLCD4vias.c
      +                          : 206:     char sinal;;dispLCD4vias.c: 208:     sinal = num < 0;
  9001  002302  BE3E               	btfsc	(dispLCD_num@num+1)^0,7,c
  9002  002304  EF86  F011         	goto	u3361
  9003  002308  EF89  F011         	goto	u3360
  9004  00230C                     u3361:
  9005  00230C  0E01               	movlw	1
  9006  00230E  EF8A  F011         	goto	u3370
  9007  002312                     u3360:
  9008  002312  0E00               	movlw	0
  9009  002314                     u3370:
  9010  002314  6E47               	movwf	dispLCD_num@sinal^0,c
  9011  002316                     
  9012                           ;dispLCD4vias.c: 209:     if( sinal )
  9013  002316  5047               	movf	dispLCD_num@sinal^0,w,c
  9014  002318  B4D8               	btfsc	status,2,c
  9015  00231A  EF91  F011         	goto	u3381
  9016  00231E  EF93  F011         	goto	u3380
  9017  002322                     u3381:
  9018  002322  EF97  F011         	goto	l5269
  9019  002326                     u3380:
  9020  002326                     
  9021                           ;dispLCD4vias.c: 210:         num = (~num) + 1;
  9022  002326  6C3D               	negf	dispLCD_num@num^0,c
  9023  002328  1E3E               	comf	(dispLCD_num@num+1)^0,f,c
  9024  00232A  B0D8               	btfsc	status,0,c
  9025  00232C  2A3E               	incf	(dispLCD_num@num+1)^0,f,c
  9026  00232E                     l5269:
  9027                           
  9028                           ;dispLCD4vias.c: 212:     dispLCD_lincol(lin, col);
  9029  00232E  C03C  F033         	movff	dispLCD_num@col,dispLCD_lincol@col
  9030  002332  5045               	movf	dispLCD_num@lin^0,w,c
  9031  002334  EC98  F01A         	call	_dispLCD_lincol
  9032  002338                     
  9033                           ;dispLCD4vias.c: 214:     div=10000;
  9034  002338  0E27               	movlw	39
  9035  00233A  6E49               	movwf	(dispLCD_num@div+1)^0,c
  9036  00233C  0E10               	movlw	16
  9037  00233E  6E48               	movwf	dispLCD_num@div^0,c
  9038  002340                     
  9039                           ;dispLCD4vias.c: 215:     size = 5;
  9040  002340  0E05               	movlw	5
  9041  002342  6E46               	movwf	dispLCD_num@size^0,c
  9042                           
  9043                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  9044  002344  EFC6  F011         	goto	l5281
  9045  002348                     l5275:
  9046                           
  9047                           ;dispLCD4vias.c: 217:     {;dispLCD4vias.c: 218:         if( num/div == 0 )
  9048  002348  C03D  F031         	movff	dispLCD_num@num,___awdiv@dividend
  9049  00234C  C03E  F032         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  9050  002350  C048  F033         	movff	dispLCD_num@div,___awdiv@divisor
  9051  002354  C049  F034         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  9052  002358  EC7A  F016         	call	___awdiv	;wreg free
  9053  00235C  5031               	movf	?___awdiv^0,w,c
  9054  00235E  1032               	iorwf	(?___awdiv+1)^0,w,c
  9055  002360  A4D8               	btfss	status,2,c
  9056  002362  EFB5  F011         	goto	u3391
  9057  002366  EFB7  F011         	goto	u3390
  9058  00236A                     u3391:
  9059  00236A  EFD9  F011         	goto	l5287
  9060  00236E                     u3390:
  9061  00236E                     
  9062                           ;dispLCD4vias.c: 219:             --size;
  9063  00236E  0646               	decf	dispLCD_num@size^0,f,c
  9064  002370                     
  9065                           ;dispLCD4vias.c: 222:         div/=10;
  9066  002370  C048  F031         	movff	dispLCD_num@div,___awdiv@dividend
  9067  002374  C049  F032         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  9068  002378  0E00               	movlw	0
  9069  00237A  6E34               	movwf	(___awdiv@divisor+1)^0,c
  9070  00237C  0E0A               	movlw	10
  9071  00237E  6E33               	movwf	___awdiv@divisor^0,c
  9072  002380  EC7A  F016         	call	___awdiv	;wreg free
  9073  002384  C031  F048         	movff	?___awdiv,dispLCD_num@div
  9074  002388  C032  F049         	movff	?___awdiv+1,dispLCD_num@div+1
  9075  00238C                     l5281:
  9076                           
  9077                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  9078  00238C  BE49               	btfsc	(dispLCD_num@div+1)^0,7,c
  9079  00238E  EFD3  F011         	goto	u3400
  9080  002392  5049               	movf	(dispLCD_num@div+1)^0,w,c
  9081  002394  E106               	bnz	u3401
  9082  002396  0448               	decf	dispLCD_num@div^0,w,c
  9083  002398  B0D8               	btfsc	status,0,c
  9084  00239A  EFD1  F011         	goto	u3401
  9085  00239E  EFD3  F011         	goto	u3400
  9086  0023A2                     u3401:
  9087  0023A2  EFA4  F011         	goto	l5275
  9088  0023A6                     u3400:
  9089  0023A6  EFD9  F011         	goto	l5287
  9090  0023AA                     l5283:
  9091                           
  9092                           ;dispLCD4vias.c: 226:     {;dispLCD4vias.c: 227:         dispLCD_dataReg(' ');
  9093  0023AA  0E20               	movlw	32
  9094  0023AC  EC2B  F01C         	call	_dispLCD_dataReg
  9095  0023B0                     
  9096                           ;dispLCD4vias.c: 228:         --tam;
  9097  0023B0  063F               	decf	dispLCD_num@tam^0,f,c
  9098  0023B2                     l5287:
  9099                           
  9100                           ;dispLCD4vias.c: 225:     while( tam > (size+sinal) && tam > 1 )
  9101  0023B2  503F               	movf	dispLCD_num@tam^0,w,c
  9102  0023B4  6E40               	movwf	??_dispLCD_num^0,c
  9103  0023B6  6A41               	clrf	(??_dispLCD_num+1)^0,c
  9104  0023B8  5047               	movf	dispLCD_num@sinal^0,w,c
  9105  0023BA  C046  F042         	movff	dispLCD_num@size,??_dispLCD_num+2
  9106  0023BE  6A43               	clrf	(??_dispLCD_num+3)^0,c
  9107  0023C0  2642               	addwf	(??_dispLCD_num+2)^0,f,c
  9108  0023C2  0E00               	movlw	0
  9109  0023C4  2243               	addwfc	(??_dispLCD_num+3)^0,f,c
  9110  0023C6  5040               	movf	??_dispLCD_num^0,w,c
  9111  0023C8  5C42               	subwf	(??_dispLCD_num+2)^0,w,c
  9112  0023CA  5043               	movf	(??_dispLCD_num+3)^0,w,c
  9113  0023CC  0A80               	xorlw	128
  9114  0023CE  6E44               	movwf	(??_dispLCD_num+4)^0,c
  9115  0023D0  5041               	movf	(??_dispLCD_num+1)^0,w,c
  9116  0023D2  0A80               	xorlw	128
  9117  0023D4  5844               	subwfb	(??_dispLCD_num+4)^0,w,c
  9118  0023D6  B0D8               	btfsc	status,0,c
  9119  0023D8  EFF0  F011         	goto	u3411
  9120  0023DC  EFF2  F011         	goto	u3410
  9121  0023E0                     u3411:
  9122  0023E0  EFFA  F011         	goto	l5291
  9123  0023E4                     u3410:
  9124  0023E4  0E02               	movlw	2
  9125  0023E6  603F               	cpfslt	dispLCD_num@tam^0,c
  9126  0023E8  EFF8  F011         	goto	u3421
  9127  0023EC  EFFA  F011         	goto	u3420
  9128  0023F0                     u3421:
  9129  0023F0  EFD5  F011         	goto	l5283
  9130  0023F4                     u3420:
  9131  0023F4                     l5291:
  9132                           
  9133                           ;dispLCD4vias.c: 231:     if( sinal )
  9134  0023F4  5047               	movf	dispLCD_num@sinal^0,w,c
  9135  0023F6  B4D8               	btfsc	status,2,c
  9136  0023F8  EF00  F012         	goto	u3431
  9137  0023FC  EF02  F012         	goto	u3430
  9138  002400                     u3431:
  9139  002400  EF05  F012         	goto	l114
  9140  002404                     u3430:
  9141  002404                     
  9142                           ;dispLCD4vias.c: 232:         dispLCD_dataReg('-');
  9143  002404  0E2D               	movlw	45
  9144  002406  EC2B  F01C         	call	_dispLCD_dataReg
  9145  00240A                     l114:
  9146                           
  9147                           ;dispLCD4vias.c: 235:     {;dispLCD4vias.c: 236:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  9148  00240A  C03D  F031         	movff	dispLCD_num@num,___awdiv@dividend
  9149  00240E  C03E  F032         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  9150  002412  C048  F033         	movff	dispLCD_num@div,___awdiv@divisor
  9151  002416  C049  F034         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  9152  00241A  EC7A  F016         	call	___awdiv	;wreg free
  9153  00241E  5031               	movf	?___awdiv^0,w,c
  9154  002420  0F30               	addlw	48
  9155  002422  EC2B  F01C         	call	_dispLCD_dataReg
  9156                           
  9157                           ;dispLCD4vias.c: 237:         num = num % div;
  9158  002426  C03D  F031         	movff	dispLCD_num@num,___awmod@dividend
  9159  00242A  C03E  F032         	movff	dispLCD_num@num+1,___awmod@dividend+1
  9160  00242E  C048  F033         	movff	dispLCD_num@div,___awmod@divisor
  9161  002432  C049  F034         	movff	dispLCD_num@div+1,___awmod@divisor+1
  9162  002436  ECDC  F016         	call	___awmod	;wreg free
  9163  00243A  C031  F03D         	movff	?___awmod,dispLCD_num@num
  9164  00243E  C032  F03E         	movff	?___awmod+1,dispLCD_num@num+1
  9165                           
  9166                           ;dispLCD4vias.c: 238:         div/=10;
  9167  002442  C048  F031         	movff	dispLCD_num@div,___awdiv@dividend
  9168  002446  C049  F032         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  9169  00244A  0E00               	movlw	0
  9170  00244C  6E34               	movwf	(___awdiv@divisor+1)^0,c
  9171  00244E  0E0A               	movlw	10
  9172  002450  6E33               	movwf	___awdiv@divisor^0,c
  9173  002452  EC7A  F016         	call	___awdiv	;wreg free
  9174  002456  C031  F048         	movff	?___awdiv,dispLCD_num@div
  9175  00245A  C032  F049         	movff	?___awdiv+1,dispLCD_num@div+1
  9176  00245E                     
  9177                           ;dispLCD4vias.c: 239:     }
  9178  00245E  BE49               	btfsc	(dispLCD_num@div+1)^0,7,c
  9179  002460  EF3C  F012         	goto	u3440
  9180  002464  5049               	movf	(dispLCD_num@div+1)^0,w,c
  9181  002466  E106               	bnz	u3441
  9182  002468  0448               	decf	dispLCD_num@div^0,w,c
  9183  00246A  B0D8               	btfsc	status,0,c
  9184  00246C  EF3A  F012         	goto	u3441
  9185  002470  EF3C  F012         	goto	u3440
  9186  002474                     u3441:
  9187  002474  EF05  F012         	goto	l114
  9188  002478                     u3440:
  9189  002478  0012               	return		;funcret
  9190  00247A                     __end_of_dispLCD_num:
  9191                           	callstack 0
  9192                           
  9193 ;; *************** function _manipula_atuadores_init *****************
  9194 ;; Defined at:
  9195 ;;		line 137 in file "fifo.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  aux             1    wreg     unsigned char 
  9198 ;; Auto vars:     Size  Location     Type
  9199 ;;  aux             1    4[COMRAM] unsigned char 
  9200 ;;  mask            1    5[COMRAM] unsigned char 
  9201 ;;  atuador         1    3[COMRAM] unsigned char 
  9202 ;; Return value:  Size  Location     Type
  9203 ;;                  1    wreg      void 
  9204 ;; Registers used:
  9205 ;;		wreg, status,2, status,0, cstack
  9206 ;; Tracked objects:
  9207 ;;		On entry : 0/0
  9208 ;;		On exit  : 0/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9211 ;;      Params:         0       0       0       0       0       0       0       0       0
  9212 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9214 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9215 ;;Total ram usage:        3 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    3
  9218 ;; This function calls:
  9219 ;;		_alt_atuador
  9220 ;; This function is called by:
  9221 ;;		_main
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           	psect	text24
  9226  003806                     __ptext24:
  9227                           	callstack 0
  9228  003806                     _manipula_atuadores_init:
  9229                           	callstack 27
  9230                           
  9231                           ;incstack = 0
  9232                           ;manipula_atuadores_init@aux stored from wreg
  9233  003806  6E35               	movwf	manipula_atuadores_init@aux^0,c
  9234  003808                     
  9235                           ;fifo.c: 137: void manipula_atuadores_init(char aux);fifo.c: 138: {;fifo.c: 139:     cha
      +                          r mask = 0x08;
  9236  003808  0E08               	movlw	8
  9237  00380A  6E36               	movwf	manipula_atuadores_init@mask^0,c
  9238                           
  9239                           ;fifo.c: 140:     char atuador = 0x41;
  9240  00380C  0E41               	movlw	65
  9241  00380E  6E34               	movwf	manipula_atuadores_init@atuador^0,c
  9242  003810                     
  9243                           ;fifo.c: 142:     if(aux ==0xFF)
  9244  003810  2835               	incf	manipula_atuadores_init@aux^0,w,c
  9245  003812  A4D8               	btfss	status,2,c
  9246  003814  EF0E  F01C         	goto	u3961
  9247  003818  EF10  F01C         	goto	u3960
  9248  00381C                     u3961:
  9249  00381C  EF22  F01C         	goto	l5843
  9250  003820                     u3960:
  9251  003820  EF2A  F01C         	goto	l287
  9252  003824                     l5835:
  9253                           
  9254                           ;fifo.c: 148:         {;fifo.c: 150:             if(aux & mask)
  9255  003824  5035               	movf	manipula_atuadores_init@aux^0,w,c
  9256  003826  1436               	andwf	manipula_atuadores_init@mask^0,w,c
  9257  003828  0900               	iorlw	0
  9258  00382A  B4D8               	btfsc	status,2,c
  9259  00382C  EF1A  F01C         	goto	u3971
  9260  003830  EF1C  F01C         	goto	u3970
  9261  003834                     u3971:
  9262  003834  EF1F  F01C         	goto	l5839
  9263  003838                     u3970:
  9264  003838                     
  9265                           ;fifo.c: 151:             {;fifo.c: 152:                 alt_atuador(atuador);
  9266  003838  5034               	movf	manipula_atuadores_init@atuador^0,w,c
  9267  00383A  ECD5  F018         	call	_alt_atuador
  9268  00383E                     l5839:
  9269                           
  9270                           ;fifo.c: 154:             atuador++;
  9271  00383E  2A34               	incf	manipula_atuadores_init@atuador^0,f,c
  9272  003840                     
  9273                           ;fifo.c: 155:             mask >>= 1;
  9274  003840  90D8               	bcf	status,0,c
  9275  003842  3236               	rrcf	manipula_atuadores_init@mask^0,f,c
  9276  003844                     l5843:
  9277                           
  9278                           ;fifo.c: 147:         while(mask)
  9279  003844  5036               	movf	manipula_atuadores_init@mask^0,w,c
  9280  003846  A4D8               	btfss	status,2,c
  9281  003848  EF28  F01C         	goto	u3981
  9282  00384C  EF2A  F01C         	goto	u3980
  9283  003850                     u3981:
  9284  003850  EF12  F01C         	goto	l5835
  9285  003854                     u3980:
  9286  003854                     l287:
  9287  003854  0012               	return		;funcret
  9288  003856                     __end_of_manipula_atuadores_init:
  9289                           	callstack 0
  9290                           
  9291 ;; *************** function _ler_sensor *****************
  9292 ;; Defined at:
  9293 ;;		line 68 in file "atuadores.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  passo           1    wreg     unsigned char 
  9296 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  9297 ;;		 -> main@vetorIn(1), 
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  passo           1    4[COMRAM] unsigned char 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      unsigned char 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9309 ;;      Params:         2       0       0       0       0       0       0       0       0
  9310 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9311 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9312 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9313 ;;Total ram usage:        5 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    2
  9316 ;; This function calls:
  9317 ;;		Nothing
  9318 ;; This function is called by:
  9319 ;;		_main
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text25
  9324  002A42                     __ptext25:
  9325                           	callstack 0
  9326  002A42                     _ler_sensor:
  9327                           	callstack 28
  9328                           
  9329                           ;incstack = 0
  9330                           ;ler_sensor@passo stored from wreg
  9331  002A42  6E35               	movwf	ler_sensor@passo^0,c
  9332  002A44                     
  9333                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  9334  002A44  EF67  F015         	goto	l5681
  9335  002A48                     l5625:
  9336  002A48  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9337  002A4C  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9338  002A50  50DF               	movf	indf2,w,c
  9339  002A52  0B02               	andlw	2
  9340  002A54  EF94  F015         	goto	l40
  9341  002A58                     l5631:
  9342  002A58  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9343  002A5C  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9344  002A60  50DF               	movf	indf2,w,c
  9345  002A62  0B01               	andlw	1
  9346  002A64  EF94  F015         	goto	l40
  9347  002A68                     l5637:
  9348  002A68  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9349  002A6C  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9350  002A70  50DF               	movf	indf2,w,c
  9351  002A72  0B08               	andlw	8
  9352  002A74  EF94  F015         	goto	l40
  9353  002A78                     l5643:
  9354  002A78  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9355  002A7C  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9356  002A80  50DF               	movf	indf2,w,c
  9357  002A82  0B04               	andlw	4
  9358  002A84  EF94  F015         	goto	l40
  9359  002A88                     l5649:
  9360  002A88  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9361  002A8C  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9362  002A90  50DF               	movf	indf2,w,c
  9363  002A92  0B20               	andlw	32
  9364  002A94  EF94  F015         	goto	l40
  9365  002A98                     l5655:
  9366  002A98  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9367  002A9C  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9368  002AA0  50DF               	movf	indf2,w,c
  9369  002AA2  0B10               	andlw	16
  9370  002AA4  EF94  F015         	goto	l40
  9371  002AA8                     l5661:
  9372  002AA8  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9373  002AAC  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9374  002AB0  50DF               	movf	indf2,w,c
  9375  002AB2  0B80               	andlw	128
  9376  002AB4  EF94  F015         	goto	l40
  9377  002AB8                     l5667:
  9378  002AB8  C031  FFD9         	movff	ler_sensor@ptr,fsr2l
  9379  002ABC  C032  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9380  002AC0  50DF               	movf	indf2,w,c
  9381  002AC2  0B40               	andlw	64
  9382  002AC4  EF94  F015         	goto	l40
  9383  002AC8                     l5673:
  9384  002AC8  0E00               	movlw	0
  9385  002ACA  EF94  F015         	goto	l40
  9386  002ACE                     l5681:
  9387  002ACE  5035               	movf	ler_sensor@passo^0,w,c
  9388  002AD0  6E33               	movwf	??_ler_sensor^0,c
  9389  002AD2  6A34               	clrf	(??_ler_sensor+1)^0,c
  9390                           
  9391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9392                           ; Switch size 1, requested type "simple"
  9393                           ; Number of cases is 1, Range of values is 0 to 0
  9394                           ; switch strategies available:
  9395                           ; Name         Instructions Cycles
  9396                           ; simple_byte            4     3 (average)
  9397                           ;	Chosen strategy is simple_byte
  9398  002AD4  5034               	movf	(??_ler_sensor+1)^0,w,c
  9399  002AD6  0A00               	xorlw	0	; case 0
  9400  002AD8  B4D8               	btfsc	status,2,c
  9401  002ADA  EF71  F015         	goto	l8015
  9402  002ADE  EF64  F015         	goto	l5673
  9403  002AE2                     l8015:
  9404                           
  9405                           ; Switch size 1, requested type "simple"
  9406                           ; Number of cases is 8, Range of values is 65 to 100
  9407                           ; switch strategies available:
  9408                           ; Name         Instructions Cycles
  9409                           ; simple_byte           25    13 (average)
  9410                           ;	Chosen strategy is simple_byte
  9411  002AE2  5033               	movf	??_ler_sensor^0,w,c
  9412  002AE4  0A41               	xorlw	65	; case 65
  9413  002AE6  B4D8               	btfsc	status,2,c
  9414  002AE8  EF24  F015         	goto	l5625
  9415  002AEC  0A03               	xorlw	3	; case 66
  9416  002AEE  B4D8               	btfsc	status,2,c
  9417  002AF0  EF34  F015         	goto	l5637
  9418  002AF4  0A01               	xorlw	1	; case 67
  9419  002AF6  B4D8               	btfsc	status,2,c
  9420  002AF8  EF44  F015         	goto	l5649
  9421  002AFC  0A07               	xorlw	7	; case 68
  9422  002AFE  B4D8               	btfsc	status,2,c
  9423  002B00  EF54  F015         	goto	l5661
  9424  002B04  0A25               	xorlw	37	; case 97
  9425  002B06  B4D8               	btfsc	status,2,c
  9426  002B08  EF2C  F015         	goto	l5631
  9427  002B0C  0A03               	xorlw	3	; case 98
  9428  002B0E  B4D8               	btfsc	status,2,c
  9429  002B10  EF3C  F015         	goto	l5643
  9430  002B14  0A01               	xorlw	1	; case 99
  9431  002B16  B4D8               	btfsc	status,2,c
  9432  002B18  EF4C  F015         	goto	l5655
  9433  002B1C  0A07               	xorlw	7	; case 100
  9434  002B1E  B4D8               	btfsc	status,2,c
  9435  002B20  EF5C  F015         	goto	l5667
  9436  002B24  EF64  F015         	goto	l5673
  9437  002B28                     l40:
  9438  002B28  0012               	return		;funcret
  9439  002B2A                     __end_of_ler_sensor:
  9440                           	callstack 0
  9441                           
  9442 ;; *************** function _init_atuadores *****************
  9443 ;; Defined at:
  9444 ;;		line 103 in file "fifo.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;		None
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  1    wreg      void 
  9451 ;; Registers used:
  9452 ;;		None
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9458 ;;      Params:         0       0       0       0       0       0       0       0       0
  9459 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9461 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9462 ;;Total ram usage:        0 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    2
  9465 ;; This function calls:
  9466 ;;		Nothing
  9467 ;; This function is called by:
  9468 ;;		_main
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           	psect	text26
  9473  003F30                     __ptext26:
  9474                           	callstack 0
  9475  003F30                     _init_atuadores:
  9476                           	callstack 28
  9477  003F30                     
  9478                           ;fifo.c: 105:     atuador.A = 0;
  9479  003F30  901E               	bcf	_atuador^0,0,c
  9480                           
  9481                           ;fifo.c: 106:     atuador.B = 0;
  9482  003F32  921E               	bcf	_atuador^0,1,c
  9483                           
  9484                           ;fifo.c: 107:     atuador.C = 0;
  9485  003F34  941E               	bcf	_atuador^0,2,c
  9486                           
  9487                           ;fifo.c: 108:     atuador.D = 0;
  9488  003F36  961E               	bcf	_atuador^0,3,c
  9489  003F38  0012               	return		;funcret
  9490  003F3A                     __end_of_init_atuadores:
  9491                           	callstack 0
  9492                           
  9493 ;; *************** function _initSerialIO *****************
  9494 ;; Defined at:
  9495 ;;		line 89 in file "serialIO.c"
  9496 ;; Parameters:    Size  Location     Type
  9497 ;;  ptrIn           2    0[COMRAM] PTR unsigned char 
  9498 ;;		 -> main@vetorIn(1), 
  9499 ;;  ptrOut          2    2[COMRAM] PTR unsigned char 
  9500 ;;		 -> main@vetorOut(1), 
  9501 ;;  length          1    4[COMRAM] unsigned char 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;		None
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9513 ;;      Params:         5       0       0       0       0       0       0       0       0
  9514 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9516 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9517 ;;Total ram usage:        5 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    2
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_main
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           	psect	text27
  9528  003C3A                     __ptext27:
  9529                           	callstack 0
  9530  003C3A                     _initSerialIO:
  9531                           	callstack 28
  9532  003C3A                     
  9533                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ADCON1 = 0xFF;
  9534  003C3A  68C1               	setf	193,c	;volatile
  9535  003C3C                     
  9536                           ;serialIO.c: 93:     ptrSerialIn = ptrIn;
  9537  003C3C  C031  F015         	movff	initSerialIO@ptrIn,_ptrSerialIn
  9538  003C40  C032  F016         	movff	initSerialIO@ptrIn+1,_ptrSerialIn+1
  9539                           
  9540                           ;serialIO.c: 94:     ptrSerialOut = ptrOut;
  9541  003C44  C033  F013         	movff	initSerialIO@ptrOut,_ptrSerialOut
  9542  003C48  C034  F014         	movff	initSerialIO@ptrOut+1,_ptrSerialOut+1
  9543  003C4C                     
  9544                           ;serialIO.c: 95:     lenSerialIO = length;
  9545  003C4C  C035  F01C         	movff	initSerialIO@length,_lenSerialIO
  9546  003C50                     
  9547                           ;serialIO.c: 97:     PORTAbits.RA3 = 0;
  9548  003C50  9680               	bcf	128,3,c	;volatile
  9549  003C52                     
  9550                           ;serialIO.c: 99:     TRISAbits.TRISA3 = 0;
  9551  003C52  9692               	bcf	146,3,c	;volatile
  9552  003C54                     
  9553                           ;serialIO.c: 102:     PORTAbits.RA2 = 0;
  9554  003C54  9480               	bcf	128,2,c	;volatile
  9555  003C56                     
  9556                           ;serialIO.c: 104:     TRISAbits.TRISA2 = 0;
  9557  003C56  9492               	bcf	146,2,c	;volatile
  9558  003C58                     
  9559                           ;serialIO.c: 107:     PORTAbits.RA0 = 0;
  9560  003C58  9080               	bcf	128,0,c	;volatile
  9561  003C5A                     
  9562                           ;serialIO.c: 109:     TRISAbits.TRISA0 = 0;
  9563  003C5A  9092               	bcf	146,0,c	;volatile
  9564  003C5C                     
  9565                           ;serialIO.c: 112:     PORTAbits.RA1 = 0;
  9566  003C5C  9280               	bcf	128,1,c	;volatile
  9567  003C5E                     
  9568                           ;serialIO.c: 114:     TRISAbits.TRISA1 = 1;
  9569  003C5E  8292               	bsf	146,1,c	;volatile
  9570  003C60                     
  9571                           ;serialIO.c: 117:     SERIALIO.CLK = 0;
  9572  003C60  9480               	bcf	128,2,c	;volatile
  9573  003C62                     
  9574                           ;serialIO.c: 118:     SERIALIO.OUT = 0;
  9575  003C62  9080               	bcf	128,0,c	;volatile
  9576  003C64                     
  9577                           ;serialIO.c: 119:     SERIALIO.SHLD = 1;
  9578  003C64  8680               	bsf	128,3,c	;volatile
  9579  003C66  0012               	return		;funcret
  9580  003C68                     __end_of_initSerialIO:
  9581                           	callstack 0
  9582                           
  9583 ;; *************** function _getContCiclos *****************
  9584 ;; Defined at:
  9585 ;;		line 49 in file "fifo.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;		None
  9588 ;; Auto vars:     Size  Location     Type
  9589 ;;		None
  9590 ;; Return value:  Size  Location     Type
  9591 ;;                  2    0[COMRAM] unsigned int 
  9592 ;; Registers used:
  9593 ;;		None
  9594 ;; Tracked objects:
  9595 ;;		On entry : 0/0
  9596 ;;		On exit  : 0/0
  9597 ;;		Unchanged: 0/0
  9598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9599 ;;      Params:         2       0       0       0       0       0       0       0       0
  9600 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9602 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9603 ;;Total ram usage:        2 bytes
  9604 ;; Hardware stack levels used:    1
  9605 ;; Hardware stack levels required when called:    2
  9606 ;; This function calls:
  9607 ;;		Nothing
  9608 ;; This function is called by:
  9609 ;;		_main
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           	psect	text28
  9614  003F3A                     __ptext28:
  9615                           	callstack 0
  9616  003F3A                     _getContCiclos:
  9617                           	callstack 28
  9618  003F3A                     
  9619                           ;fifo.c: 51:     return(cont_ciclos);
  9620  003F3A  C017  F031         	movff	_cont_ciclos,?_getContCiclos
  9621  003F3E  C018  F032         	movff	_cont_ciclos+1,?_getContCiclos+1
  9622  003F42  0012               	return		;funcret
  9623  003F44                     __end_of_getContCiclos:
  9624                           	callstack 0
  9625                           
  9626 ;; *************** function _getCiclos *****************
  9627 ;; Defined at:
  9628 ;;		line 41 in file "fifo.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;		None
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;  aux             2    2[COMRAM] int 
  9633 ;; Return value:  Size  Location     Type
  9634 ;;                  2    0[COMRAM] unsigned int 
  9635 ;; Registers used:
  9636 ;;		wreg, status,2, status,0
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9642 ;;      Params:         2       0       0       0       0       0       0       0       0
  9643 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9644 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9645 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9646 ;;Total ram usage:        4 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    2
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_main
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           	psect	text29
  9657  003DD4                     __ptext29:
  9658                           	callstack 0
  9659  003DD4                     _getCiclos:
  9660                           	callstack 28
  9661  003DD4                     
  9662                           ;fifo.c: 43:     int aux = fila[1];
  9663  003DD4  C020  F033         	movff	_fila+1,getCiclos@aux
  9664  003DD8  6A34               	clrf	(getCiclos@aux+1)^0,c
  9665  003DDA                     
  9666                           ;fifo.c: 44:     aux <<= 8;
  9667  003DDA  5033               	movf	getCiclos@aux^0,w,c
  9668  003DDC  6E34               	movwf	(getCiclos@aux+1)^0,c
  9669  003DDE  6A33               	clrf	getCiclos@aux^0,c
  9670  003DE0                     
  9671                           ;fifo.c: 45:     aux +=fila[0];
  9672  003DE0  501F               	movf	_fila^0,w,c
  9673  003DE2  2633               	addwf	getCiclos@aux^0,f,c
  9674  003DE4  0E00               	movlw	0
  9675  003DE6  2234               	addwfc	(getCiclos@aux+1)^0,f,c
  9676  003DE8                     
  9677                           ;fifo.c: 46:     return(aux);
  9678  003DE8  C033  F031         	movff	getCiclos@aux,?_getCiclos
  9679  003DEC  C034  F032         	movff	getCiclos@aux+1,?_getCiclos+1
  9680  003DF0  0012               	return		;funcret
  9681  003DF2                     __end_of_getCiclos:
  9682                           	callstack 0
  9683                           
  9684 ;; *************** function _formatar_receitas *****************
  9685 ;; Defined at:
  9686 ;;		line 100 in file "eeprom.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  i               1    2[COMRAM] unsigned char 
  9691 ;; Return value:  Size  Location     Type
  9692 ;;                  1    wreg      void 
  9693 ;; Registers used:
  9694 ;;		wreg, status,2, status,0, cstack
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0
  9701 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9703 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9704 ;;Total ram usage:        1 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    3
  9707 ;; This function calls:
  9708 ;;		_EEPROM_write
  9709 ;; This function is called by:
  9710 ;;		_main
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           	psect	text30
  9715  003E0C                     __ptext30:
  9716                           	callstack 0
  9717  003E0C                     _formatar_receitas:
  9718                           	callstack 27
  9719  003E0C                     
  9720                           ;eeprom.c: 102:     for( char i = 0;i<256;i++)
  9721  003E0C  0E00               	movlw	0
  9722  003E0E  6E33               	movwf	formatar_receitas@i^0,c
  9723  003E10                     l5771:
  9724                           
  9725                           ;eeprom.c: 103:            EEPROM_write(i,0);
  9726  003E10  0E00               	movlw	0
  9727  003E12  6E31               	movwf	EEPROM_write@data^0,c
  9728  003E14  5033               	movf	formatar_receitas@i^0,w,c
  9729  003E16  EC4B  F01E         	call	_EEPROM_write
  9730  003E1A  2A33               	incf	formatar_receitas@i^0,f,c
  9731  003E1C  EF08  F01F         	goto	l5771
  9732  003E20  0012               	return		;funcret
  9733  003E22                     __end_of_formatar_receitas:
  9734                           	callstack 0
  9735                           
  9736 ;; *************** function _fifo_tam *****************
  9737 ;; Defined at:
  9738 ;;		line 317 in file "fifo.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;		None
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;		None
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  1    wreg      unsigned char 
  9745 ;; Registers used:
  9746 ;;		wreg
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0
  9753 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9755 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9756 ;;Total ram usage:        0 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    2
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_main
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           	psect	text31
  9767  003F7E                     __ptext31:
  9768                           	callstack 0
  9769  003F7E                     _fifo_tam:
  9770                           	callstack 28
  9771  003F7E                     
  9772                           ;fifo.c: 319:     return( 18 );
  9773  003F7E  0E12               	movlw	18
  9774  003F80  0012               	return		;funcret
  9775  003F82                     __end_of_fifo_tam:
  9776                           	callstack 0
  9777                           
  9778 ;; *************** function _fifo_print *****************
  9779 ;; Defined at:
  9780 ;;		line 342 in file "fifo.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  comando         1   16[COMRAM] unsigned char 
  9785 ;;  atraso          1   15[COMRAM] unsigned char 
  9786 ;;  i               1   14[COMRAM] unsigned char 
  9787 ;;  indPrint        1   13[COMRAM] unsigned char 
  9788 ;;  completar       1   12[COMRAM] unsigned char 
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      void 
  9791 ;; Registers used:
  9792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0
  9799 ;;      Locals:         7       0       0       0       0       0       0       0       0
  9800 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9801 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9802 ;;Total ram usage:        9 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    4
  9805 ;; This function calls:
  9806 ;;		___awdiv
  9807 ;;		___awmod
  9808 ;;		_decodifica
  9809 ;;		_dispLCD_dataReg
  9810 ;;		_dispLCD_lincol
  9811 ;; This function is called by:
  9812 ;;		_main
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           	psect	text32
  9817  001E92                     __ptext32:
  9818                           	callstack 0
  9819  001E92                     _fifo_print:
  9820                           	callstack 26
  9821  001E92                     
  9822                           ;fifo.c: 344:     char completar = 0;
  9823  001E92  0E00               	movlw	0
  9824  001E94  6E3D               	movwf	fifo_print@completar^0,c
  9825                           
  9826                           ;fifo.c: 346:     char atraso = 0;
  9827  001E96  0E00               	movlw	0
  9828  001E98  6E40               	movwf	fifo_print@atraso^0,c
  9829                           
  9830                           ;fifo.c: 347:     char i = 0;
  9831  001E9A  0E00               	movlw	0
  9832  001E9C  6E3F               	movwf	fifo_print@i^0,c
  9833  001E9E                     
  9834                           ;fifo.c: 348:     char indPrint = ind_print;
  9835  001E9E  C05C  F03E         	movff	_ind_print,fifo_print@indPrint
  9836  001EA2                     
  9837                           ;fifo.c: 350:     dispLCD_lincol(0, 0);
  9838  001EA2  0E00               	movlw	0
  9839  001EA4  6E33               	movwf	dispLCD_lincol@col^0,c
  9840  001EA6  0E00               	movlw	0
  9841  001EA8  EC98  F01A         	call	_dispLCD_lincol
  9842  001EAC                     l5939:
  9843                           
  9844                           ;fifo.c: 352:     {;fifo.c: 353:         if( completar )
  9845  001EAC  503D               	movf	fifo_print@completar^0,w,c
  9846  001EAE  B4D8               	btfsc	status,2,c
  9847  001EB0  EF5C  F00F         	goto	u4121
  9848  001EB4  EF5E  F00F         	goto	u4120
  9849  001EB8                     u4121:
  9850  001EB8  EF64  F00F         	goto	l5945
  9851  001EBC                     u4120:
  9852  001EBC                     
  9853                           ;fifo.c: 354:         {;fifo.c: 355:             dispLCD_dataReg(' ');
  9854  001EBC  0E20               	movlw	32
  9855  001EBE  EC2B  F01C         	call	_dispLCD_dataReg
  9856  001EC2                     l5943:
  9857                           
  9858                           ;fifo.c: 356:             ++i;
  9859  001EC2  2A3F               	incf	fifo_print@i^0,f,c
  9860                           
  9861                           ;fifo.c: 357:         }
  9862  001EC4  EFB2  F010         	goto	l6059
  9863  001EC8                     l5945:
  9864                           
  9865                           ;fifo.c: 359:         {;fifo.c: 360:             comando = fila[indPrint++];
  9866  001EC8  0E1F               	movlw	low _fila
  9867  001ECA  243E               	addwf	fifo_print@indPrint^0,w,c
  9868  001ECC  6ED9               	movwf	fsr2l,c
  9869  001ECE  6ADA               	clrf	fsr2h,c
  9870  001ED0  0E00               	movlw	high _fila
  9871  001ED2  22DA               	addwfc	fsr2h,f,c
  9872  001ED4  50DF               	movf	indf2,w,c
  9873  001ED6  6E41               	movwf	fifo_print@comando^0,c
  9874  001ED8  2A3E               	incf	fifo_print@indPrint^0,f,c
  9875  001EDA                     
  9876                           ;fifo.c: 362:             if( comando == 0 )
  9877  001EDA  5041               	movf	fifo_print@comando^0,w,c
  9878  001EDC  A4D8               	btfss	status,2,c
  9879  001EDE  EF73  F00F         	goto	u4131
  9880  001EE2  EF75  F00F         	goto	u4130
  9881  001EE6                     u4131:
  9882  001EE6  EF79  F00F         	goto	l5953
  9883  001EEA                     u4130:
  9884  001EEA                     
  9885                           ;fifo.c: 363:                 completar = 1;
  9886  001EEA  0E01               	movlw	1
  9887  001EEC  6E3D               	movwf	fifo_print@completar^0,c
  9888  001EEE  EFB2  F010         	goto	l6059
  9889  001EF2                     l5953:
  9890  001EF2  0E65               	movlw	101
  9891  001EF4  6041               	cpfslt	fifo_print@comando^0,c
  9892  001EF6  EF7F  F00F         	goto	u4141
  9893  001EFA  EF81  F00F         	goto	u4140
  9894  001EFE                     u4141:
  9895  001EFE  EFD1  F00F         	goto	l5985
  9896  001F02                     u4140:
  9897  001F02                     
  9898                           ;fifo.c: 365:             {;fifo.c: 366:                 atraso = comando;
  9899  001F02  C041  F040         	movff	fifo_print@comando,fifo_print@atraso
  9900  001F06                     
  9901                           ;fifo.c: 367:                 if( atraso >= 100 )
  9902  001F06  0E63               	movlw	99
  9903  001F08  6440               	cpfsgt	fifo_print@atraso^0,c
  9904  001F0A  EF89  F00F         	goto	u4151
  9905  001F0E  EF8B  F00F         	goto	u4150
  9906  001F12                     u4151:
  9907  001F12  EFA6  F00F         	goto	l5971
  9908  001F16                     u4150:
  9909  001F16                     
  9910                           ;fifo.c: 368:                 {;fifo.c: 369:                     dispLCD_dataReg('1');
  9911  001F16  0E31               	movlw	49
  9912  001F18  EC2B  F01C         	call	_dispLCD_dataReg
  9913  001F1C                     
  9914                           ;fifo.c: 370:                     ++i;
  9915  001F1C  2A3F               	incf	fifo_print@i^0,f,c
  9916  001F1E                     
  9917                           ;fifo.c: 371:                     atraso %= 100;
  9918  001F1E  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
  9919  001F22  6A32               	clrf	(___awmod@dividend+1)^0,c
  9920  001F24  0E00               	movlw	0
  9921  001F26  6E34               	movwf	(___awmod@divisor+1)^0,c
  9922  001F28  0E64               	movlw	100
  9923  001F2A  6E33               	movwf	___awmod@divisor^0,c
  9924  001F2C  ECDC  F016         	call	___awmod	;wreg free
  9925  001F30  5031               	movf	?___awmod^0,w,c
  9926  001F32  6E40               	movwf	fifo_print@atraso^0,c
  9927  001F34                     
  9928                           ;fifo.c: 372:                     if(atraso < 10)
  9929  001F34  0E0A               	movlw	10
  9930  001F36  6040               	cpfslt	fifo_print@atraso^0,c
  9931  001F38  EFA0  F00F         	goto	u4161
  9932  001F3C  EFA2  F00F         	goto	u4160
  9933  001F40                     u4161:
  9934  001F40  EFA6  F00F         	goto	l5971
  9935  001F44                     u4160:
  9936  001F44                     
  9937                           ;fifo.c: 373:                     {;fifo.c: 374:                         dispLCD_dataReg
      +                          ('0');
  9938  001F44  0E30               	movlw	48
  9939  001F46  EC2B  F01C         	call	_dispLCD_dataReg
  9940  001F4A                     
  9941                           ;fifo.c: 375:                         ++i;
  9942  001F4A  2A3F               	incf	fifo_print@i^0,f,c
  9943  001F4C                     l5971:
  9944                           
  9945                           ;fifo.c: 378:                 if( atraso >= 10 )
  9946  001F4C  0E09               	movlw	9
  9947  001F4E  6440               	cpfsgt	fifo_print@atraso^0,c
  9948  001F50  EFAC  F00F         	goto	u4171
  9949  001F54  EFAE  F00F         	goto	u4170
  9950  001F58                     u4171:
  9951  001F58  EFC7  F00F         	goto	l5979
  9952  001F5C                     u4170:
  9953  001F5C                     
  9954                           ;fifo.c: 379:                 {;fifo.c: 380:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  9955  001F5C  C040  F031         	movff	fifo_print@atraso,___awdiv@dividend
  9956  001F60  6A32               	clrf	(___awdiv@dividend+1)^0,c
  9957  001F62  0E00               	movlw	0
  9958  001F64  6E34               	movwf	(___awdiv@divisor+1)^0,c
  9959  001F66  0E0A               	movlw	10
  9960  001F68  6E33               	movwf	___awdiv@divisor^0,c
  9961  001F6A  EC7A  F016         	call	___awdiv	;wreg free
  9962  001F6E  5031               	movf	?___awdiv^0,w,c
  9963  001F70  0F30               	addlw	48
  9964  001F72  EC2B  F01C         	call	_dispLCD_dataReg
  9965  001F76                     
  9966                           ;fifo.c: 381:                     ++i;
  9967  001F76  2A3F               	incf	fifo_print@i^0,f,c
  9968  001F78                     
  9969                           ;fifo.c: 382:                     atraso %= 10;
  9970  001F78  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
  9971  001F7C  6A32               	clrf	(___awmod@dividend+1)^0,c
  9972  001F7E  0E00               	movlw	0
  9973  001F80  6E34               	movwf	(___awmod@divisor+1)^0,c
  9974  001F82  0E0A               	movlw	10
  9975  001F84  6E33               	movwf	___awmod@divisor^0,c
  9976  001F86  ECDC  F016         	call	___awmod	;wreg free
  9977  001F8A  5031               	movf	?___awmod^0,w,c
  9978  001F8C  6E40               	movwf	fifo_print@atraso^0,c
  9979  001F8E                     l5979:
  9980                           
  9981                           ;fifo.c: 385:                 dispLCD_dataReg(atraso + '0');
  9982  001F8E  5040               	movf	fifo_print@atraso^0,w,c
  9983  001F90  0F30               	addlw	48
  9984  001F92  EC2B  F01C         	call	_dispLCD_dataReg
  9985  001F96                     
  9986                           ;fifo.c: 386:                 ++i;
  9987  001F96  2A3F               	incf	fifo_print@i^0,f,c
  9988                           
  9989                           ;fifo.c: 388:                 dispLCD_dataReg('%');
  9990  001F98  0E25               	movlw	37
  9991  001F9A  EC2B  F01C         	call	_dispLCD_dataReg
  9992  001F9E  EF61  F00F         	goto	l5943
  9993  001FA2                     l5985:
  9994  001FA2  0E64               	movlw	100
  9995  001FA4  6441               	cpfsgt	fifo_print@comando^0,c
  9996  001FA6  EFD7  F00F         	goto	u4181
  9997  001FAA  EFD9  F00F         	goto	u4180
  9998  001FAE                     u4181:
  9999  001FAE  EF37  F010         	goto	l6021
 10000  001FB2                     u4180:
 10001  001FB2  0EDD               	movlw	221
 10002  001FB4  6041               	cpfslt	fifo_print@comando^0,c
 10003  001FB6  EFDF  F00F         	goto	u4191
 10004  001FBA  EFE1  F00F         	goto	u4190
 10005  001FBE                     u4191:
 10006  001FBE  EF37  F010         	goto	l6021
 10007  001FC2                     u4190:
 10008  001FC2                     
 10009                           ;fifo.c: 393:             {;fifo.c: 394:                 decodifica(&comando);
 10010  001FC2  0E41               	movlw	low fifo_print@comando
 10011  001FC4  6E31               	movwf	decodifica@d^0,c
 10012  001FC6  0E00               	movlw	high fifo_print@comando
 10013  001FC8  6E32               	movwf	(decodifica@d+1)^0,c
 10014  001FCA  ECE7  F012         	call	_decodifica	;wreg free
 10015  001FCE                     
 10016                           ;fifo.c: 395:                 atraso = comando;
 10017  001FCE  C041  F040         	movff	fifo_print@comando,fifo_print@atraso
 10018  001FD2                     
 10019                           ;fifo.c: 397:                 if( atraso >= 100 )
 10020  001FD2  0E63               	movlw	99
 10021  001FD4  6440               	cpfsgt	fifo_print@atraso^0,c
 10022  001FD6  EFEF  F00F         	goto	u4201
 10023  001FDA  EFF1  F00F         	goto	u4200
 10024  001FDE                     u4201:
 10025  001FDE  EF0C  F010         	goto	l6007
 10026  001FE2                     u4200:
 10027  001FE2                     
 10028                           ;fifo.c: 398:                 {;fifo.c: 399:                     dispLCD_dataReg('1');
 10029  001FE2  0E31               	movlw	49
 10030  001FE4  EC2B  F01C         	call	_dispLCD_dataReg
 10031  001FE8                     
 10032                           ;fifo.c: 400:                     ++i;
 10033  001FE8  2A3F               	incf	fifo_print@i^0,f,c
 10034  001FEA                     
 10035                           ;fifo.c: 401:                     atraso %= 100;
 10036  001FEA  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
 10037  001FEE  6A32               	clrf	(___awmod@dividend+1)^0,c
 10038  001FF0  0E00               	movlw	0
 10039  001FF2  6E34               	movwf	(___awmod@divisor+1)^0,c
 10040  001FF4  0E64               	movlw	100
 10041  001FF6  6E33               	movwf	___awmod@divisor^0,c
 10042  001FF8  ECDC  F016         	call	___awmod	;wreg free
 10043  001FFC  5031               	movf	?___awmod^0,w,c
 10044  001FFE  6E40               	movwf	fifo_print@atraso^0,c
 10045  002000                     
 10046                           ;fifo.c: 402:                     if(atraso < 10)
 10047  002000  0E0A               	movlw	10
 10048  002002  6040               	cpfslt	fifo_print@atraso^0,c
 10049  002004  EF06  F010         	goto	u4211
 10050  002008  EF08  F010         	goto	u4210
 10051  00200C                     u4211:
 10052  00200C  EF0C  F010         	goto	l6007
 10053  002010                     u4210:
 10054  002010                     
 10055                           ;fifo.c: 403:                     {;fifo.c: 404:                         dispLCD_dataReg
      +                          ('0');
 10056  002010  0E30               	movlw	48
 10057  002012  EC2B  F01C         	call	_dispLCD_dataReg
 10058  002016                     
 10059                           ;fifo.c: 405:                         ++i;
 10060  002016  2A3F               	incf	fifo_print@i^0,f,c
 10061  002018                     l6007:
 10062                           
 10063                           ;fifo.c: 408:                 if( atraso >= 10 )
 10064  002018  0E09               	movlw	9
 10065  00201A  6440               	cpfsgt	fifo_print@atraso^0,c
 10066  00201C  EF12  F010         	goto	u4221
 10067  002020  EF14  F010         	goto	u4220
 10068  002024                     u4221:
 10069  002024  EF2D  F010         	goto	l6015
 10070  002028                     u4220:
 10071  002028                     
 10072                           ;fifo.c: 409:                 {;fifo.c: 410:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
 10073  002028  C040  F031         	movff	fifo_print@atraso,___awdiv@dividend
 10074  00202C  6A32               	clrf	(___awdiv@dividend+1)^0,c
 10075  00202E  0E00               	movlw	0
 10076  002030  6E34               	movwf	(___awdiv@divisor+1)^0,c
 10077  002032  0E0A               	movlw	10
 10078  002034  6E33               	movwf	___awdiv@divisor^0,c
 10079  002036  EC7A  F016         	call	___awdiv	;wreg free
 10080  00203A  5031               	movf	?___awdiv^0,w,c
 10081  00203C  0F30               	addlw	48
 10082  00203E  EC2B  F01C         	call	_dispLCD_dataReg
 10083  002042                     
 10084                           ;fifo.c: 411:                     ++i;
 10085  002042  2A3F               	incf	fifo_print@i^0,f,c
 10086  002044                     
 10087                           ;fifo.c: 412:                     atraso %= 10;
 10088  002044  C040  F031         	movff	fifo_print@atraso,___awmod@dividend
 10089  002048  6A32               	clrf	(___awmod@dividend+1)^0,c
 10090  00204A  0E00               	movlw	0
 10091  00204C  6E34               	movwf	(___awmod@divisor+1)^0,c
 10092  00204E  0E0A               	movlw	10
 10093  002050  6E33               	movwf	___awmod@divisor^0,c
 10094  002052  ECDC  F016         	call	___awmod	;wreg free
 10095  002056  5031               	movf	?___awmod^0,w,c
 10096  002058  6E40               	movwf	fifo_print@atraso^0,c
 10097  00205A                     l6015:
 10098                           
 10099                           ;fifo.c: 415:                 dispLCD_dataReg(atraso + '0');
 10100  00205A  5040               	movf	fifo_print@atraso^0,w,c
 10101  00205C  0F30               	addlw	48
 10102  00205E  EC2B  F01C         	call	_dispLCD_dataReg
 10103  002062                     
 10104                           ;fifo.c: 416:                 ++i;
 10105  002062  2A3F               	incf	fifo_print@i^0,f,c
 10106                           
 10107                           ;fifo.c: 418:                 dispLCD_dataReg('s');
 10108  002064  0E73               	movlw	115
 10109  002066  EC2B  F01C         	call	_dispLCD_dataReg
 10110  00206A  EF61  F00F         	goto	l5943
 10111  00206E                     l6021:
 10112  00206E  0EDC               	movlw	220
 10113  002070  6441               	cpfsgt	fifo_print@comando^0,c
 10114  002072  EF3D  F010         	goto	u4231
 10115  002076  EF3F  F010         	goto	u4230
 10116  00207A                     u4231:
 10117  00207A  EF97  F010         	goto	l6045
 10118  00207E                     u4230:
 10119  00207E  0EFE               	movlw	254
 10120  002080  6041               	cpfslt	fifo_print@comando^0,c
 10121  002082  EF45  F010         	goto	u4241
 10122  002086  EF47  F010         	goto	u4240
 10123  00208A                     u4241:
 10124  00208A  EF97  F010         	goto	l6045
 10125  00208E                     u4240:
 10126  00208E                     
 10127                           ;fifo.c: 422:             {;fifo.c: 423:                 decodifica(&comando);
 10128  00208E  0E41               	movlw	low fifo_print@comando
 10129  002090  6E31               	movwf	decodifica@d^0,c
 10130  002092  0E00               	movlw	high fifo_print@comando
 10131  002094  6E32               	movwf	(decodifica@d+1)^0,c
 10132  002096  ECE7  F012         	call	_decodifica	;wreg free
 10133                           
 10134                           ;fifo.c: 424:                 switch( comando )
 10135  00209A  EF6A  F010         	goto	l6043
 10136  00209E                     l404:
 10137  00209E                     l6027:
 10138                           
 10139                           ;fifo.c: 434:                                 dispLCD_dataReg( comando & ~0x20 );
 10140  00209E  5041               	movf	fifo_print@comando^0,w,c
 10141  0020A0  0BDF               	andlw	223
 10142  0020A2  EC2B  F01C         	call	_dispLCD_dataReg
 10143  0020A6                     
 10144                           ;fifo.c: 435:                                 ++i;
 10145  0020A6  2A3F               	incf	fifo_print@i^0,f,c
 10146  0020A8                     
 10147                           ;fifo.c: 436:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
 10148  0020A8  BA41               	btfsc	fifo_print@comando^0,5,c
 10149  0020AA  EF59  F010         	goto	u4251
 10150  0020AE  EF5B  F010         	goto	u4250
 10151  0020B2                     u4251:
 10152  0020B2  EF61  F010         	goto	l6035
 10153  0020B6                     u4250:
 10154  0020B6  0E00               	movlw	0
 10155  0020B8  6E3C               	movwf	(_fifo_print$473+1)^0,c
 10156  0020BA  0E2B               	movlw	43
 10157  0020BC  6E3B               	movwf	_fifo_print$473^0,c
 10158  0020BE  EF65  F010         	goto	l6037
 10159  0020C2                     l6035:
 10160  0020C2  0E00               	movlw	0
 10161  0020C4  6E3C               	movwf	(_fifo_print$473+1)^0,c
 10162  0020C6  0E2D               	movlw	45
 10163  0020C8  6E3B               	movwf	_fifo_print$473^0,c
 10164  0020CA                     l6037:
 10165  0020CA  503B               	movf	_fifo_print$473^0,w,c
 10166  0020CC  EC2B  F01C         	call	_dispLCD_dataReg
 10167  0020D0  EF61  F00F         	goto	l5943
 10168  0020D4                     l6043:
 10169  0020D4  5041               	movf	fifo_print@comando^0,w,c
 10170  0020D6  6E39               	movwf	??_fifo_print^0,c
 10171  0020D8  6A3A               	clrf	(??_fifo_print+1)^0,c
 10172                           
 10173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10174                           ; Switch size 1, requested type "simple"
 10175                           ; Number of cases is 1, Range of values is 0 to 0
 10176                           ; switch strategies available:
 10177                           ; Name         Instructions Cycles
 10178                           ; simple_byte            4     3 (average)
 10179                           ;	Chosen strategy is simple_byte
 10180  0020DA  503A               	movf	(??_fifo_print+1)^0,w,c
 10181  0020DC  0A00               	xorlw	0	; case 0
 10182  0020DE  B4D8               	btfsc	status,2,c
 10183  0020E0  EF74  F010         	goto	l8017
 10184  0020E4  EFB2  F010         	goto	l393
 10185  0020E8                     l8017:
 10186                           
 10187                           ; Switch size 1, requested type "simple"
 10188                           ; Number of cases is 8, Range of values is 65 to 100
 10189                           ; switch strategies available:
 10190                           ; Name         Instructions Cycles
 10191                           ; simple_byte           25    13 (average)
 10192                           ;	Chosen strategy is simple_byte
 10193  0020E8  5039               	movf	??_fifo_print^0,w,c
 10194  0020EA  0A41               	xorlw	65	; case 65
 10195  0020EC  B4D8               	btfsc	status,2,c
 10196  0020EE  EF4F  F010         	goto	l404
 10197  0020F2  0A03               	xorlw	3	; case 66
 10198  0020F4  B4D8               	btfsc	status,2,c
 10199  0020F6  EF4F  F010         	goto	l6027
 10200  0020FA  0A01               	xorlw	1	; case 67
 10201  0020FC  B4D8               	btfsc	status,2,c
 10202  0020FE  EF4F  F010         	goto	l6027
 10203  002102  0A07               	xorlw	7	; case 68
 10204  002104  B4D8               	btfsc	status,2,c
 10205  002106  EF4F  F010         	goto	l6027
 10206  00210A  0A25               	xorlw	37	; case 97
 10207  00210C  B4D8               	btfsc	status,2,c
 10208  00210E  EF4F  F010         	goto	l6027
 10209  002112  0A03               	xorlw	3	; case 98
 10210  002114  B4D8               	btfsc	status,2,c
 10211  002116  EF4F  F010         	goto	l6027
 10212  00211A  0A01               	xorlw	1	; case 99
 10213  00211C  B4D8               	btfsc	status,2,c
 10214  00211E  EF4F  F010         	goto	l6027
 10215  002122  0A07               	xorlw	7	; case 100
 10216  002124  B4D8               	btfsc	status,2,c
 10217  002126  EF4F  F010         	goto	l6027
 10218  00212A  EFB2  F010         	goto	l393
 10219  00212E                     l6045:
 10220                           
 10221                           ;fifo.c: 442:             {;fifo.c: 443:                 if(comando == 0xFE)
 10222  00212E  0EFE               	movlw	254
 10223  002130  1841               	xorwf	fifo_print@comando^0,w,c
 10224  002132  A4D8               	btfss	status,2,c
 10225  002134  EF9E  F010         	goto	u4261
 10226  002138  EFA0  F010         	goto	u4260
 10227  00213C                     u4261:
 10228  00213C  EFB2  F010         	goto	l393
 10229  002140                     u4260:
 10230  002140                     
 10231                           ;fifo.c: 444:                 {;fifo.c: 445:                     decodifica(&comando);
 10232  002140  0E41               	movlw	low fifo_print@comando
 10233  002142  6E31               	movwf	decodifica@d^0,c
 10234  002144  0E00               	movlw	high fifo_print@comando
 10235  002146  6E32               	movwf	(decodifica@d+1)^0,c
 10236  002148  ECE7  F012         	call	_decodifica	;wreg free
 10237  00214C                     
 10238                           ;fifo.c: 446:                     atraso = comando;
 10239  00214C  C041  F040         	movff	fifo_print@comando,fifo_print@atraso
 10240  002150                     
 10241                           ;fifo.c: 448:                     dispLCD_dataReg(atraso + '0');
 10242  002150  5040               	movf	fifo_print@atraso^0,w,c
 10243  002152  0F30               	addlw	48
 10244  002154  EC2B  F01C         	call	_dispLCD_dataReg
 10245  002158                     
 10246                           ;fifo.c: 449:                     ++i;
 10247  002158  2A3F               	incf	fifo_print@i^0,f,c
 10248  00215A                     
 10249                           ;fifo.c: 451:                     dispLCD_dataReg('%');
 10250  00215A  0E25               	movlw	37
 10251  00215C  EC2B  F01C         	call	_dispLCD_dataReg
 10252  002160  EF61  F00F         	goto	l5943
 10253  002164                     l393:
 10254  002164                     l6059:
 10255                           
 10256                           ;fifo.c: 456:     }
 10257  002164  0E14               	movlw	20
 10258  002166  643F               	cpfsgt	fifo_print@i^0,c
 10259  002168  EFB8  F010         	goto	u4271
 10260  00216C  EFBA  F010         	goto	u4270
 10261  002170                     u4271:
 10262  002170  EF56  F00F         	goto	l5939
 10263  002174                     u4270:
 10264  002174  0012               	return		;funcret
 10265  002176                     __end_of_fifo_print:
 10266                           	callstack 0
 10267                           
 10268 ;; *************** function ___awmod *****************
 10269 ;; Defined at:
 10270 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awmod.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  dividend        2    0[COMRAM] int 
 10273 ;;  divisor         2    2[COMRAM] int 
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;  sign            1    5[COMRAM] unsigned char 
 10276 ;;  counter         1    4[COMRAM] unsigned char 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  2    0[COMRAM] int 
 10279 ;; Registers used:
 10280 ;;		wreg, status,2, status,0
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10286 ;;      Params:         4       0       0       0       0       0       0       0       0
 10287 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10289 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10290 ;;Total ram usage:        6 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:    2
 10293 ;; This function calls:
 10294 ;;		Nothing
 10295 ;; This function is called by:
 10296 ;;		_dispLCD_num
 10297 ;;		_fifo_print
 10298 ;;		_main
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           	psect	text33
 10303  002DB8                     __ptext33:
 10304                           	callstack 0
 10305  002DB8                     ___awmod:
 10306                           	callstack 26
 10307  002DB8  0E00               	movlw	0
 10308  002DBA  6E36               	movwf	___awmod@sign^0,c
 10309  002DBC  BE32               	btfsc	(___awmod@dividend+1)^0,7,c
 10310  002DBE  EFE5  F016         	goto	u3280
 10311  002DC2  EFE3  F016         	goto	u3281
 10312  002DC6                     u3281:
 10313  002DC6  EFEB  F016         	goto	l5209
 10314  002DCA                     u3280:
 10315  002DCA  6C31               	negf	___awmod@dividend^0,c
 10316  002DCC  1E32               	comf	(___awmod@dividend+1)^0,f,c
 10317  002DCE  B0D8               	btfsc	status,0,c
 10318  002DD0  2A32               	incf	(___awmod@dividend+1)^0,f,c
 10319  002DD2  0E01               	movlw	1
 10320  002DD4  6E36               	movwf	___awmod@sign^0,c
 10321  002DD6                     l5209:
 10322  002DD6  BE34               	btfsc	(___awmod@divisor+1)^0,7,c
 10323  002DD8  EFF2  F016         	goto	u3290
 10324  002DDC  EFF0  F016         	goto	u3291
 10325  002DE0                     u3291:
 10326  002DE0  EFF6  F016         	goto	l5213
 10327  002DE4                     u3290:
 10328  002DE4  6C33               	negf	___awmod@divisor^0,c
 10329  002DE6  1E34               	comf	(___awmod@divisor+1)^0,f,c
 10330  002DE8  B0D8               	btfsc	status,0,c
 10331  002DEA  2A34               	incf	(___awmod@divisor+1)^0,f,c
 10332  002DEC                     l5213:
 10333  002DEC  5033               	movf	___awmod@divisor^0,w,c
 10334  002DEE  1034               	iorwf	(___awmod@divisor+1)^0,w,c
 10335  002DF0  B4D8               	btfsc	status,2,c
 10336  002DF2  EFFD  F016         	goto	u3301
 10337  002DF6  EFFF  F016         	goto	u3300
 10338  002DFA                     u3301:
 10339  002DFA  EF23  F017         	goto	l5229
 10340  002DFE                     u3300:
 10341  002DFE  0E01               	movlw	1
 10342  002E00  6E35               	movwf	___awmod@counter^0,c
 10343  002E02  EF07  F017         	goto	l5219
 10344  002E06                     l5217:
 10345  002E06  90D8               	bcf	status,0,c
 10346  002E08  3633               	rlcf	___awmod@divisor^0,f,c
 10347  002E0A  3634               	rlcf	(___awmod@divisor+1)^0,f,c
 10348  002E0C  2A35               	incf	___awmod@counter^0,f,c
 10349  002E0E                     l5219:
 10350  002E0E  AE34               	btfss	(___awmod@divisor+1)^0,7,c
 10351  002E10  EF0C  F017         	goto	u3311
 10352  002E14  EF0E  F017         	goto	u3310
 10353  002E18                     u3311:
 10354  002E18  EF03  F017         	goto	l5217
 10355  002E1C                     u3310:
 10356  002E1C                     l5221:
 10357  002E1C  5033               	movf	___awmod@divisor^0,w,c
 10358  002E1E  5C31               	subwf	___awmod@dividend^0,w,c
 10359  002E20  5034               	movf	(___awmod@divisor+1)^0,w,c
 10360  002E22  5832               	subwfb	(___awmod@dividend+1)^0,w,c
 10361  002E24  A0D8               	btfss	status,0,c
 10362  002E26  EF17  F017         	goto	u3321
 10363  002E2A  EF19  F017         	goto	u3320
 10364  002E2E                     u3321:
 10365  002E2E  EF1D  F017         	goto	l5225
 10366  002E32                     u3320:
 10367  002E32  5033               	movf	___awmod@divisor^0,w,c
 10368  002E34  5E31               	subwf	___awmod@dividend^0,f,c
 10369  002E36  5034               	movf	(___awmod@divisor+1)^0,w,c
 10370  002E38  5A32               	subwfb	(___awmod@dividend+1)^0,f,c
 10371  002E3A                     l5225:
 10372  002E3A  90D8               	bcf	status,0,c
 10373  002E3C  3234               	rrcf	(___awmod@divisor+1)^0,f,c
 10374  002E3E  3233               	rrcf	___awmod@divisor^0,f,c
 10375  002E40  2E35               	decfsz	___awmod@counter^0,f,c
 10376  002E42  EF0E  F017         	goto	l5221
 10377  002E46                     l5229:
 10378  002E46  5036               	movf	___awmod@sign^0,w,c
 10379  002E48  B4D8               	btfsc	status,2,c
 10380  002E4A  EF29  F017         	goto	u3331
 10381  002E4E  EF2B  F017         	goto	u3330
 10382  002E52                     u3331:
 10383  002E52  EF2F  F017         	goto	l5233
 10384  002E56                     u3330:
 10385  002E56  6C31               	negf	___awmod@dividend^0,c
 10386  002E58  1E32               	comf	(___awmod@dividend+1)^0,f,c
 10387  002E5A  B0D8               	btfsc	status,0,c
 10388  002E5C  2A32               	incf	(___awmod@dividend+1)^0,f,c
 10389  002E5E                     l5233:
 10390  002E5E  C031  F031         	movff	___awmod@dividend,?___awmod
 10391  002E62  C032  F032         	movff	___awmod@dividend+1,?___awmod+1
 10392  002E66  0012               	return		;funcret
 10393  002E68                     __end_of___awmod:
 10394                           	callstack 0
 10395                           
 10396 ;; *************** function _fifo_indicePrint_inc *****************
 10397 ;; Defined at:
 10398 ;;		line 322 in file "fifo.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;		None
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;		None
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  1    wreg      void 
 10405 ;; Registers used:
 10406 ;;		wreg, status,2, status,0
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10412 ;;      Params:         0       0       0       0       0       0       0       0       0
 10413 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10414 ;;      Temps:          7       0       0       0       0       0       0       0       0
 10415 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10416 ;;Total ram usage:        7 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    2
 10419 ;; This function calls:
 10420 ;;		Nothing
 10421 ;; This function is called by:
 10422 ;;		_main
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text34
 10427  003592                     __ptext34:
 10428                           	callstack 0
 10429  003592                     _fifo_indicePrint_inc:
 10430                           	callstack 28
 10431  003592                     
 10432                           ;fifo.c: 324:     if( ind_print < 18 -1 )
 10433  003592  0E11               	movlw	17
 10434  003594  605C               	cpfslt	_ind_print^0,c
 10435  003596  EFCF  F01A         	goto	u4091
 10436  00359A  EFD1  F01A         	goto	u4090
 10437  00359E                     u4091:
 10438  00359E  EFF5  F01A         	goto	l5927
 10439  0035A2                     u4090:
 10440  0035A2                     
 10441                           ;fifo.c: 325:     {;fifo.c: 326:         if( ind_print < ind_fila-1 )
 10442  0035A2  0EFF               	movlw	255
 10443  0035A4  6E31               	movwf	??_fifo_indicePrint_inc^0,c
 10444  0035A6  0EFF               	movlw	255
 10445  0035A8  6E32               	movwf	(??_fifo_indicePrint_inc+1)^0,c
 10446  0035AA  505D               	movf	_ind_fila^0,w,c
 10447  0035AC  6E33               	movwf	(??_fifo_indicePrint_inc+2)^0,c
 10448  0035AE  6A34               	clrf	(??_fifo_indicePrint_inc+3)^0,c
 10449  0035B0  5031               	movf	??_fifo_indicePrint_inc^0,w,c
 10450  0035B2  2633               	addwf	(??_fifo_indicePrint_inc+2)^0,f,c
 10451  0035B4  5032               	movf	(??_fifo_indicePrint_inc+1)^0,w,c
 10452  0035B6  2234               	addwfc	(??_fifo_indicePrint_inc+3)^0,f,c
 10453  0035B8  505C               	movf	_ind_print^0,w,c
 10454  0035BA  6E35               	movwf	(??_fifo_indicePrint_inc+4)^0,c
 10455  0035BC  6A36               	clrf	(??_fifo_indicePrint_inc+5)^0,c
 10456  0035BE  5033               	movf	(??_fifo_indicePrint_inc+2)^0,w,c
 10457  0035C0  5C35               	subwf	(??_fifo_indicePrint_inc+4)^0,w,c
 10458  0035C2  5036               	movf	(??_fifo_indicePrint_inc+5)^0,w,c
 10459  0035C4  0A80               	xorlw	128
 10460  0035C6  6E37               	movwf	(??_fifo_indicePrint_inc+6)^0,c
 10461  0035C8  5034               	movf	(??_fifo_indicePrint_inc+3)^0,w,c
 10462  0035CA  0A80               	xorlw	128
 10463  0035CC  5837               	subwfb	(??_fifo_indicePrint_inc+6)^0,w,c
 10464  0035CE  B0D8               	btfsc	status,0,c
 10465  0035D0  EFEC  F01A         	goto	u4101
 10466  0035D4  EFEE  F01A         	goto	u4100
 10467  0035D8                     u4101:
 10468  0035D8  EFF1  F01A         	goto	l5925
 10469  0035DC                     u4100:
 10470  0035DC                     
 10471                           ;fifo.c: 327:             ind_print++;
 10472  0035DC  2A5C               	incf	_ind_print^0,f,c
 10473  0035DE  EFF7  F01A         	goto	l377
 10474  0035E2                     l5925:
 10475                           
 10476                           ;fifo.c: 329:             ind_print = ind_fila-1;
 10477  0035E2  045D               	decf	_ind_fila^0,w,c
 10478  0035E4  6E5C               	movwf	_ind_print^0,c
 10479  0035E6  EFF7  F01A         	goto	l377
 10480  0035EA                     l5927:
 10481                           
 10482                           ;fifo.c: 332:         ind_print = 18 -1;
 10483  0035EA  0E11               	movlw	17
 10484  0035EC  6E5C               	movwf	_ind_print^0,c
 10485  0035EE                     l377:
 10486  0035EE  0012               	return		;funcret
 10487  0035F0                     __end_of_fifo_indicePrint_inc:
 10488                           	callstack 0
 10489                           
 10490 ;; *************** function _fifo_indicePrint_dec *****************
 10491 ;; Defined at:
 10492 ;;		line 334 in file "fifo.c"
 10493 ;; Parameters:    Size  Location     Type
 10494 ;;		None
 10495 ;; Auto vars:     Size  Location     Type
 10496 ;;		None
 10497 ;; Return value:  Size  Location     Type
 10498 ;;                  1    wreg      void 
 10499 ;; Registers used:
 10500 ;;		wreg, status,2, status,0
 10501 ;; Tracked objects:
 10502 ;;		On entry : 0/0
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10506 ;;      Params:         0       0       0       0       0       0       0       0       0
 10507 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10508 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10509 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10510 ;;Total ram usage:        0 bytes
 10511 ;; Hardware stack levels used:    1
 10512 ;; Hardware stack levels required when called:    2
 10513 ;; This function calls:
 10514 ;;		Nothing
 10515 ;; This function is called by:
 10516 ;;		_main
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           	psect	text35
 10521  003E78                     __ptext35:
 10522                           	callstack 0
 10523  003E78                     _fifo_indicePrint_dec:
 10524                           	callstack 28
 10525  003E78                     
 10526                           ;fifo.c: 336:     if( ind_print > 2 )
 10527  003E78  0E02               	movlw	2
 10528  003E7A  645C               	cpfsgt	_ind_print^0,c
 10529  003E7C  EF42  F01F         	goto	u4111
 10530  003E80  EF44  F01F         	goto	u4110
 10531  003E84                     u4111:
 10532  003E84  EF45  F01F         	goto	l381
 10533  003E88                     u4110:
 10534  003E88                     
 10535                           ;fifo.c: 337:         ind_print--;
 10536  003E88  065C               	decf	_ind_print^0,f,c
 10537  003E8A                     l381:
 10538  003E8A  0012               	return		;funcret
 10539  003E8C                     __end_of_fifo_indicePrint_dec:
 10540                           	callstack 0
 10541                           
 10542 ;; *************** function _fifo_indice *****************
 10543 ;; Defined at:
 10544 ;;		line 307 in file "fifo.c"
 10545 ;; Parameters:    Size  Location     Type
 10546 ;;		None
 10547 ;; Auto vars:     Size  Location     Type
 10548 ;;		None
 10549 ;; Return value:  Size  Location     Type
 10550 ;;                  1    wreg      unsigned char 
 10551 ;; Registers used:
 10552 ;;		wreg, status,2
 10553 ;; Tracked objects:
 10554 ;;		On entry : 0/0
 10555 ;;		On exit  : 0/0
 10556 ;;		Unchanged: 0/0
 10557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10558 ;;      Params:         0       0       0       0       0       0       0       0       0
 10559 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10560 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10561 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10562 ;;Total ram usage:        0 bytes
 10563 ;; Hardware stack levels used:    1
 10564 ;; Hardware stack levels required when called:    2
 10565 ;; This function calls:
 10566 ;;		Nothing
 10567 ;; This function is called by:
 10568 ;;		_main
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           	psect	text36
 10573  003F82                     __ptext36:
 10574                           	callstack 0
 10575  003F82                     _fifo_indice:
 10576                           	callstack 28
 10577  003F82                     
 10578                           ;fifo.c: 309:     return ( ind_fila );
 10579  003F82  505D               	movf	_ind_fila^0,w,c
 10580  003F84  0012               	return		;funcret
 10581  003F86                     __end_of_fifo_indice:
 10582                           	callstack 0
 10583                           
 10584 ;; *************** function _fifo_disponivel *****************
 10585 ;; Defined at:
 10586 ;;		line 312 in file "fifo.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  1    wreg      unsigned char 
 10593 ;; Registers used:
 10594 ;;		wreg, status,2, status,0
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    2
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_main
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text37
 10615  003E22                     __ptext37:
 10616                           	callstack 0
 10617  003E22                     _fifo_disponivel:
 10618                           	callstack 28
 10619  003E22                     
 10620                           ;fifo.c: 314:     return( ind_fila < 18 );
 10621  003E22  0E11               	movlw	17
 10622  003E24  645D               	cpfsgt	_ind_fila^0,c
 10623  003E26  EF17  F01F         	goto	u4071
 10624  003E2A  EF1A  F01F         	goto	u4070
 10625  003E2E                     u4071:
 10626  003E2E  0E01               	movlw	1
 10627  003E30  EF1B  F01F         	goto	u4080
 10628  003E34                     u4070:
 10629  003E34  0E00               	movlw	0
 10630  003E36                     u4080:
 10631  003E36  0012               	return		;funcret
 10632  003E38                     __end_of_fifo_disponivel:
 10633                           	callstack 0
 10634                           
 10635 ;; *************** function _fifo_delete *****************
 10636 ;; Defined at:
 10637 ;;		line 183 in file "fifo.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0
 10652 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10653 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10654 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10655 ;;Total ram usage:        2 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    5
 10658 ;; This function calls:
 10659 ;;		_alt_atuador
 10660 ;;		_codifica
 10661 ;;		_decodifica
 10662 ;;		_fifo_alinharPrint
 10663 ;; This function is called by:
 10664 ;;		_main
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text38
 10669  003244                     __ptext38:
 10670                           	callstack 0
 10671  003244                     _fifo_delete:
 10672                           	callstack 25
 10673  003244                     
 10674                           ;fifo.c: 185:     if(ind_fila)
 10675  003244  505D               	movf	_ind_fila^0,w,c
 10676  003246  B4D8               	btfsc	status,2,c
 10677  003248  EF28  F019         	goto	u3991
 10678  00324C  EF2A  F019         	goto	u3990
 10679  003250                     u3991:
 10680  003250  EF6B  F019         	goto	l5861
 10681  003254                     u3990:
 10682  003254                     
 10683                           ;fifo.c: 186:     {;fifo.c: 187:         if(ind_fila > 2)
 10684  003254  0E02               	movlw	2
 10685  003256  645D               	cpfsgt	_ind_fila^0,c
 10686  003258  EF30  F019         	goto	u4001
 10687  00325C  EF32  F019         	goto	u4000
 10688  003260                     u4001:
 10689  003260  EF33  F019         	goto	l5855
 10690  003264                     u4000:
 10691  003264                     
 10692                           ;fifo.c: 188:             ind_fila--;
 10693  003264  065D               	decf	_ind_fila^0,f,c
 10694  003266                     l5855:
 10695                           
 10696                           ;fifo.c: 189:         if(fila[ind_fila] > 0xDC)
 10697  003266  0E1F               	movlw	low _fila
 10698  003268  245D               	addwf	_ind_fila^0,w,c
 10699  00326A  6ED9               	movwf	fsr2l,c
 10700  00326C  6ADA               	clrf	fsr2h,c
 10701  00326E  0E00               	movlw	high _fila
 10702  003270  22DA               	addwfc	fsr2h,f,c
 10703  003272  0EDC               	movlw	220
 10704  003274  64DF               	cpfsgt	indf2,c
 10705  003276  EF3F  F019         	goto	u4011
 10706  00327A  EF41  F019         	goto	u4010
 10707  00327E                     u4011:
 10708  00327E  EF63  F019         	goto	l5859
 10709  003282                     u4010:
 10710  003282                     
 10711                           ;fifo.c: 190:         {;fifo.c: 191:             decodifica(&fila[ind_fila]);
 10712  003282  0E1F               	movlw	low _fila
 10713  003284  245D               	addwf	_ind_fila^0,w,c
 10714  003286  6E31               	movwf	decodifica@d^0,c
 10715  003288  6A32               	clrf	(decodifica@d+1)^0,c
 10716  00328A  0E00               	movlw	high _fila
 10717  00328C  2232               	addwfc	(decodifica@d+1)^0,f,c
 10718  00328E  ECE7  F012         	call	_decodifica	;wreg free
 10719                           
 10720                           ;fifo.c: 192:             alt_atuador(fila[ind_fila] & ~0x20);
 10721  003292  0E1F               	movlw	low _fila
 10722  003294  245D               	addwf	_ind_fila^0,w,c
 10723  003296  6ED9               	movwf	fsr2l,c
 10724  003298  6ADA               	clrf	fsr2h,c
 10725  00329A  0E00               	movlw	high _fila
 10726  00329C  22DA               	addwfc	fsr2h,f,c
 10727  00329E  50DF               	movf	indf2,w,c
 10728  0032A0  0BDF               	andlw	223
 10729  0032A2  ECD5  F018         	call	_alt_atuador
 10730                           
 10731                           ;fifo.c: 193:             codifica('a',fila[ind_fila]);
 10732  0032A6  0E1F               	movlw	low _fila
 10733  0032A8  245D               	addwf	_ind_fila^0,w,c
 10734  0032AA  6ED9               	movwf	fsr2l,c
 10735  0032AC  6ADA               	clrf	fsr2h,c
 10736  0032AE  0E00               	movlw	high _fila
 10737  0032B0  22DA               	addwfc	fsr2h,f,c
 10738  0032B2  50DF               	movf	indf2,w,c
 10739  0032B4  6E40               	movwf	??_fifo_delete^0,c
 10740  0032B6  6A41               	clrf	(??_fifo_delete+1)^0,c
 10741  0032B8  C040  F031         	movff	??_fifo_delete,codifica@dado
 10742  0032BC  C041  F032         	movff	??_fifo_delete+1,codifica@dado+1
 10743  0032C0  0E61               	movlw	97
 10744  0032C2  EC3D  F012         	call	_codifica
 10745  0032C6                     l5859:
 10746                           
 10747                           ;fifo.c: 195:         fila[ind_fila] = 0;
 10748  0032C6  0E1F               	movlw	low _fila
 10749  0032C8  245D               	addwf	_ind_fila^0,w,c
 10750  0032CA  6ED9               	movwf	fsr2l,c
 10751  0032CC  6ADA               	clrf	fsr2h,c
 10752  0032CE  0E00               	movlw	high _fila
 10753  0032D0  22DA               	addwfc	fsr2h,f,c
 10754  0032D2  0E00               	movlw	0
 10755  0032D4  6EDF               	movwf	indf2,c
 10756  0032D6                     l5861:
 10757                           
 10758                           ;fifo.c: 197:     fifo_alinharPrint();
 10759  0032D6  EC95  F015         	call	_fifo_alinharPrint	;wreg free
 10760  0032DA  0012               	return		;funcret
 10761  0032DC                     __end_of_fifo_delete:
 10762                           	callstack 0
 10763                           
 10764 ;; *************** function _decodifica *****************
 10765 ;; Defined at:
 10766 ;;		line 228 in file "fifo.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  d               2    0[COMRAM] PTR unsigned char 
 10769 ;;		 -> main@vetor_aux(16), main@auxPasso(1), printExec@passo(1), fifo_print@comando(1), 
 10770 ;;		 -> fila(18), 
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;		None
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  1    wreg      void 
 10775 ;; Registers used:
 10776 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10782 ;;      Params:         2       0       0       0       0       0       0       0       0
 10783 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10784 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10785 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10786 ;;Total ram usage:        4 bytes
 10787 ;; Hardware stack levels used:    1
 10788 ;; Hardware stack levels required when called:    2
 10789 ;; This function calls:
 10790 ;;		Nothing
 10791 ;; This function is called by:
 10792 ;;		_fifo_delete
 10793 ;;		_fifo_print
 10794 ;;		_printExec
 10795 ;;		_main
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text39
 10800  0025CE                     __ptext39:
 10801                           	callstack 0
 10802  0025CE                     _decodifica:
 10803                           	callstack 27
 10804  0025CE                     
 10805                           ;fifo.c: 228: void decodifica( unsigned char *d );fifo.c: 229: {;fifo.c: 230:     if( *d
      +                           <= 100 )
 10806  0025CE  C031  FFD9         	movff	decodifica@d,fsr2l
 10807  0025D2  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10808  0025D6  0E65               	movlw	101
 10809  0025D8  60DF               	cpfslt	indf2,c
 10810  0025DA  EFF1  F012         	goto	u3581
 10811  0025DE  EFF3  F012         	goto	u3580
 10812  0025E2                     u3581:
 10813  0025E2  EFF5  F012         	goto	l5365
 10814  0025E6                     u3580:
 10815  0025E6  EF86  F013         	goto	l344
 10816  0025EA                     l5365:
 10817  0025EA  C031  FFD9         	movff	decodifica@d,fsr2l
 10818  0025EE  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10819  0025F2  0EDD               	movlw	221
 10820  0025F4  60DF               	cpfslt	indf2,c
 10821  0025F6  EFFF  F012         	goto	u3591
 10822  0025FA  EF01  F013         	goto	u3590
 10823  0025FE                     u3591:
 10824  0025FE  EF51  F013         	goto	l5389
 10825  002602                     u3590:
 10826  002602                     
 10827                           ;fifo.c: 235:     {;fifo.c: 236:         *d -= 0x64;
 10828  002602  C031  FFD9         	movff	decodifica@d,fsr2l
 10829  002606  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10830  00260A  0E64               	movlw	100
 10831  00260C  5EDF               	subwf	indf2,f,c
 10832                           
 10833                           ;fifo.c: 237:     } else
 10834  00260E  EF86  F013         	goto	l344
 10835  002612                     l5369:
 10836  002612  C031  FFD9         	movff	decodifica@d,fsr2l
 10837  002616  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10838  00261A  0E41               	movlw	65
 10839  00261C  6EDF               	movwf	indf2,c
 10840  00261E  EF86  F013         	goto	l344
 10841  002622                     l5371:
 10842  002622  C031  FFD9         	movff	decodifica@d,fsr2l
 10843  002626  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10844  00262A  0E61               	movlw	97
 10845  00262C  6EDF               	movwf	indf2,c
 10846  00262E  EF86  F013         	goto	l344
 10847  002632                     l5373:
 10848  002632  C031  FFD9         	movff	decodifica@d,fsr2l
 10849  002636  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10850  00263A  0E42               	movlw	66
 10851  00263C  6EDF               	movwf	indf2,c
 10852  00263E  EF86  F013         	goto	l344
 10853  002642                     l5375:
 10854  002642  C031  FFD9         	movff	decodifica@d,fsr2l
 10855  002646  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10856  00264A  0E62               	movlw	98
 10857  00264C  6EDF               	movwf	indf2,c
 10858  00264E  EF86  F013         	goto	l344
 10859  002652                     l5377:
 10860  002652  C031  FFD9         	movff	decodifica@d,fsr2l
 10861  002656  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10862  00265A  0E43               	movlw	67
 10863  00265C  6EDF               	movwf	indf2,c
 10864  00265E  EF86  F013         	goto	l344
 10865  002662                     l5379:
 10866  002662  C031  FFD9         	movff	decodifica@d,fsr2l
 10867  002666  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10868  00266A  0E63               	movlw	99
 10869  00266C  6EDF               	movwf	indf2,c
 10870  00266E  EF86  F013         	goto	l344
 10871  002672                     l5381:
 10872  002672  C031  FFD9         	movff	decodifica@d,fsr2l
 10873  002676  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10874  00267A  0E44               	movlw	68
 10875  00267C  6EDF               	movwf	indf2,c
 10876  00267E  EF86  F013         	goto	l344
 10877  002682                     l5383:
 10878  002682  C031  FFD9         	movff	decodifica@d,fsr2l
 10879  002686  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10880  00268A  0E64               	movlw	100
 10881  00268C  6EDF               	movwf	indf2,c
 10882  00268E  EF86  F013         	goto	l344
 10883  002692                     l5385:
 10884  002692  C031  FFD9         	movff	decodifica@d,fsr2l
 10885  002696  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10886  00269A  0E00               	movlw	0
 10887  00269C  6EDF               	movwf	indf2,c
 10888  00269E  EF86  F013         	goto	l344
 10889  0026A2                     l5389:
 10890  0026A2  C031  FFD9         	movff	decodifica@d,fsr2l
 10891  0026A6  C032  FFDA         	movff	decodifica@d+1,fsr2h
 10892  0026AA  50DF               	movf	indf2,w,c
 10893  0026AC  6E33               	movwf	??_decodifica^0,c
 10894  0026AE  6A34               	clrf	(??_decodifica+1)^0,c
 10895                           
 10896                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10897                           ; Switch size 1, requested type "simple"
 10898                           ; Number of cases is 1, Range of values is 0 to 0
 10899                           ; switch strategies available:
 10900                           ; Name         Instructions Cycles
 10901                           ; simple_byte            4     3 (average)
 10902                           ;	Chosen strategy is simple_byte
 10903  0026B0  5034               	movf	(??_decodifica+1)^0,w,c
 10904  0026B2  0A00               	xorlw	0	; case 0
 10905  0026B4  B4D8               	btfsc	status,2,c
 10906  0026B6  EF5F  F013         	goto	l8019
 10907  0026BA  EF86  F013         	goto	l344
 10908  0026BE                     l8019:
 10909                           
 10910                           ; Switch size 1, requested type "simple"
 10911                           ; Number of cases is 9, Range of values is 221 to 254
 10912                           ; switch strategies available:
 10913                           ; Name         Instructions Cycles
 10914                           ; simple_byte           28    15 (average)
 10915                           ;	Chosen strategy is simple_byte
 10916  0026BE  5033               	movf	??_decodifica^0,w,c
 10917  0026C0  0ADD               	xorlw	221	; case 221
 10918  0026C2  B4D8               	btfsc	status,2,c
 10919  0026C4  EF09  F013         	goto	l5369
 10920  0026C8  0A03               	xorlw	3	; case 222
 10921  0026CA  B4D8               	btfsc	status,2,c
 10922  0026CC  EF11  F013         	goto	l5371
 10923  0026D0  0A01               	xorlw	1	; case 223
 10924  0026D2  B4D8               	btfsc	status,2,c
 10925  0026D4  EF19  F013         	goto	l5373
 10926  0026D8  0A3F               	xorlw	63	; case 224
 10927  0026DA  B4D8               	btfsc	status,2,c
 10928  0026DC  EF21  F013         	goto	l5375
 10929  0026E0  0A01               	xorlw	1	; case 225
 10930  0026E2  B4D8               	btfsc	status,2,c
 10931  0026E4  EF29  F013         	goto	l5377
 10932  0026E8  0A03               	xorlw	3	; case 226
 10933  0026EA  B4D8               	btfsc	status,2,c
 10934  0026EC  EF31  F013         	goto	l5379
 10935  0026F0  0A01               	xorlw	1	; case 227
 10936  0026F2  B4D8               	btfsc	status,2,c
 10937  0026F4  EF39  F013         	goto	l5381
 10938  0026F8  0A07               	xorlw	7	; case 228
 10939  0026FA  B4D8               	btfsc	status,2,c
 10940  0026FC  EF41  F013         	goto	l5383
 10941  002700  0A1A               	xorlw	26	; case 254
 10942  002702  B4D8               	btfsc	status,2,c
 10943  002704  EF49  F013         	goto	l5385
 10944  002708  EF86  F013         	goto	l344
 10945  00270C                     l344:
 10946  00270C  0012               	return		;funcret
 10947  00270E                     __end_of_decodifica:
 10948                           	callstack 0
 10949                           
 10950 ;; *************** function _alt_atuador *****************
 10951 ;; Defined at:
 10952 ;;		line 92 in file "fifo.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  tecla           1    wreg     unsigned char 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  tecla           1    2[COMRAM] unsigned char 
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, status,2, status,0
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10966 ;;      Params:         0       0       0       0       0       0       0       0       0
 10967 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10968 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10969 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10970 ;;Total ram usage:        3 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    2
 10973 ;; This function calls:
 10974 ;;		Nothing
 10975 ;; This function is called by:
 10976 ;;		_manipula_atuadores_init
 10977 ;;		_fifo_delete
 10978 ;;		_main
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text40
 10983  0031AA                     __ptext40:
 10984                           	callstack 0
 10985  0031AA                     _alt_atuador:
 10986                           	callstack 27
 10987                           
 10988                           ;incstack = 0
 10989                           ;alt_atuador@tecla stored from wreg
 10990  0031AA  6E33               	movwf	alt_atuador@tecla^0,c
 10991  0031AC                     
 10992                           ;fifo.c: 92: void alt_atuador( char tecla );fifo.c: 93: {;fifo.c: 94:     switch(tecla)
 10993  0031AC  EF04  F019         	goto	l5355
 10994  0031B0                     l261:
 10995  0031B0  A01E               	btfss	_atuador^0,0,c
 10996  0031B2  EFDD  F018         	goto	u3501
 10997  0031B6  EFE0  F018         	goto	u3500
 10998  0031BA                     u3501:
 10999  0031BA  801E               	bsf	_atuador^0,0,c
 11000  0031BC  EFE1  F018         	goto	u3515
 11001  0031C0                     u3500:
 11002  0031C0  901E               	bcf	_atuador^0,0,c
 11003  0031C2                     u3515:
 11004  0031C2  EF21  F019         	goto	l266
 11005  0031C6                     l263:
 11006  0031C6  A21E               	btfss	_atuador^0,1,c
 11007  0031C8  EFE8  F018         	goto	u3521
 11008  0031CC  EFEB  F018         	goto	u3520
 11009  0031D0                     u3521:
 11010  0031D0  821E               	bsf	_atuador^0,1,c
 11011  0031D2  EFEC  F018         	goto	u3535
 11012  0031D6                     u3520:
 11013  0031D6  921E               	bcf	_atuador^0,1,c
 11014  0031D8                     u3535:
 11015  0031D8  EF21  F019         	goto	l266
 11016  0031DC                     l264:
 11017  0031DC  A41E               	btfss	_atuador^0,2,c
 11018  0031DE  EFF3  F018         	goto	u3541
 11019  0031E2  EFF6  F018         	goto	u3540
 11020  0031E6                     u3541:
 11021  0031E6  841E               	bsf	_atuador^0,2,c
 11022  0031E8  EFF7  F018         	goto	u3555
 11023  0031EC                     u3540:
 11024  0031EC  941E               	bcf	_atuador^0,2,c
 11025  0031EE                     u3555:
 11026  0031EE  EF21  F019         	goto	l266
 11027  0031F2                     l265:
 11028  0031F2  A61E               	btfss	_atuador^0,3,c
 11029  0031F4  EFFE  F018         	goto	u3561
 11030  0031F8  EF01  F019         	goto	u3560
 11031  0031FC                     u3561:
 11032  0031FC  861E               	bsf	_atuador^0,3,c
 11033  0031FE  EF02  F019         	goto	u3575
 11034  003202                     u3560:
 11035  003202  961E               	bcf	_atuador^0,3,c
 11036  003204                     u3575:
 11037  003204  EF21  F019         	goto	l266
 11038  003208                     l5355:
 11039  003208  5033               	movf	alt_atuador@tecla^0,w,c
 11040  00320A  6E31               	movwf	??_alt_atuador^0,c
 11041  00320C  6A32               	clrf	(??_alt_atuador+1)^0,c
 11042                           
 11043                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11044                           ; Switch size 1, requested type "simple"
 11045                           ; Number of cases is 1, Range of values is 0 to 0
 11046                           ; switch strategies available:
 11047                           ; Name         Instructions Cycles
 11048                           ; simple_byte            4     3 (average)
 11049                           ;	Chosen strategy is simple_byte
 11050  00320E  5032               	movf	(??_alt_atuador+1)^0,w,c
 11051  003210  0A00               	xorlw	0	; case 0
 11052  003212  B4D8               	btfsc	status,2,c
 11053  003214  EF0E  F019         	goto	l8021
 11054  003218  EF21  F019         	goto	l266
 11055  00321C                     l8021:
 11056                           
 11057                           ; Switch size 1, requested type "simple"
 11058                           ; Number of cases is 4, Range of values is 65 to 68
 11059                           ; switch strategies available:
 11060                           ; Name         Instructions Cycles
 11061                           ; simple_byte           13     7 (average)
 11062                           ;	Chosen strategy is simple_byte
 11063  00321C  5031               	movf	??_alt_atuador^0,w,c
 11064  00321E  0A41               	xorlw	65	; case 65
 11065  003220  B4D8               	btfsc	status,2,c
 11066  003222  EFD8  F018         	goto	l261
 11067  003226  0A03               	xorlw	3	; case 66
 11068  003228  B4D8               	btfsc	status,2,c
 11069  00322A  EFE3  F018         	goto	l263
 11070  00322E  0A01               	xorlw	1	; case 67
 11071  003230  B4D8               	btfsc	status,2,c
 11072  003232  EFEE  F018         	goto	l264
 11073  003236  0A07               	xorlw	7	; case 68
 11074  003238  B4D8               	btfsc	status,2,c
 11075  00323A  EFF9  F018         	goto	l265
 11076  00323E  EF21  F019         	goto	l266
 11077  003242                     l266:
 11078  003242  0012               	return		;funcret
 11079  003244                     __end_of_alt_atuador:
 11080                           	callstack 0
 11081                           
 11082 ;; *************** function _fifo_adrs *****************
 11083 ;; Defined at:
 11084 ;;		line 178 in file "fifo.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;		None
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;		None
 11089 ;; Return value:  Size  Location     Type
 11090 ;;                  2    0[COMRAM] PTR unsigned char 
 11091 ;; Registers used:
 11092 ;;		wreg, status,2, status,0
 11093 ;; Tracked objects:
 11094 ;;		On entry : 0/0
 11095 ;;		On exit  : 0/0
 11096 ;;		Unchanged: 0/0
 11097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11098 ;;      Params:         2       0       0       0       0       0       0       0       0
 11099 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11100 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11101 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11102 ;;Total ram usage:        2 bytes
 11103 ;; Hardware stack levels used:    1
 11104 ;; Hardware stack levels required when called:    2
 11105 ;; This function calls:
 11106 ;;		Nothing
 11107 ;; This function is called by:
 11108 ;;		_main
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           	psect	text41
 11113  003F44                     __ptext41:
 11114                           	callstack 0
 11115  003F44                     _fifo_adrs:
 11116                           	callstack 28
 11117  003F44                     
 11118                           ;fifo.c: 180:     return fila;
 11119  003F44  0E1F               	movlw	low _fila
 11120  003F46  6E31               	movwf	?_fifo_adrs^0,c
 11121  003F48  0E00               	movlw	high _fila
 11122  003F4A  6E32               	movwf	(?_fifo_adrs+1)^0,c
 11123  003F4C  0012               	return		;funcret
 11124  003F4E                     __end_of_fifo_adrs:
 11125                           	callstack 0
 11126                           
 11127 ;; *************** function _fifo_add_tempo *****************
 11128 ;; Defined at:
 11129 ;;		line 269 in file "fifo.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  t               1    wreg     const unsigned char 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  t               1   15[COMRAM] const unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0
 11144 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11146 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11147 ;;Total ram usage:        1 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    5
 11150 ;; This function calls:
 11151 ;;		_codifica
 11152 ;;		_fifo_alinharPrint
 11153 ;; This function is called by:
 11154 ;;		_main
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           	psect	text42
 11159  003700                     __ptext42:
 11160                           	callstack 0
 11161  003700                     _fifo_add_tempo:
 11162                           	callstack 25
 11163                           
 11164                           ;incstack = 0
 11165                           ;fifo_add_tempo@t stored from wreg
 11166  003700  6E40               	movwf	fifo_add_tempo@t^0,c
 11167  003702                     
 11168                           ;fifo.c: 269: void fifo_add_tempo(const char t);fifo.c: 270: {;fifo.c: 271:     if(ind_f
      +                          ila < 18)
 11169  003702  0E12               	movlw	18
 11170  003704  605D               	cpfslt	_ind_fila^0,c
 11171  003706  EF87  F01B         	goto	u4041
 11172  00370A  EF89  F01B         	goto	u4040
 11173  00370E                     u4041:
 11174  00370E  EFA9  F01B         	goto	l5889
 11175  003712                     u4040:
 11176  003712                     
 11177                           ;fifo.c: 272:     {;fifo.c: 273:         if(t)
 11178  003712  5040               	movf	fifo_add_tempo@t^0,w,c
 11179  003714  B4D8               	btfsc	status,2,c
 11180  003716  EF8F  F01B         	goto	u4051
 11181  00371A  EF91  F01B         	goto	u4050
 11182  00371E                     u4051:
 11183  00371E  EFA9  F01B         	goto	l5889
 11184  003722                     u4050:
 11185  003722                     
 11186                           ;fifo.c: 274:         {;fifo.c: 275:             codifica('t', &t);
 11187  003722  0E40               	movlw	low fifo_add_tempo@t
 11188  003724  6E31               	movwf	codifica@dado^0,c
 11189  003726  0E00               	movlw	high fifo_add_tempo@t
 11190  003728  6E32               	movwf	(codifica@dado+1)^0,c
 11191  00372A  0E74               	movlw	116
 11192  00372C  EC3D  F012         	call	_codifica
 11193  003730                     
 11194                           ;fifo.c: 276:             fila[ind_fila] = t;
 11195  003730  0E1F               	movlw	low _fila
 11196  003732  245D               	addwf	_ind_fila^0,w,c
 11197  003734  6ED9               	movwf	fsr2l,c
 11198  003736  6ADA               	clrf	fsr2h,c
 11199  003738  0E00               	movlw	high _fila
 11200  00373A  22DA               	addwfc	fsr2h,f,c
 11201  00373C  C040  FFDF         	movff	fifo_add_tempo@t,indf2
 11202  003740                     
 11203                           ;fifo.c: 277:             ind_fila++;
 11204  003740  2A5D               	incf	_ind_fila^0,f,c
 11205  003742                     
 11206                           ;fifo.c: 278:             fila[ind_fila] = 0;
 11207  003742  0E1F               	movlw	low _fila
 11208  003744  245D               	addwf	_ind_fila^0,w,c
 11209  003746  6ED9               	movwf	fsr2l,c
 11210  003748  6ADA               	clrf	fsr2h,c
 11211  00374A  0E00               	movlw	high _fila
 11212  00374C  22DA               	addwfc	fsr2h,f,c
 11213  00374E  0E00               	movlw	0
 11214  003750  6EDF               	movwf	indf2,c
 11215  003752                     l5889:
 11216                           
 11217                           ;fifo.c: 281:     fifo_alinharPrint();
 11218  003752  EC95  F015         	call	_fifo_alinharPrint	;wreg free
 11219  003756  0012               	return		;funcret
 11220  003758                     __end_of_fifo_add_tempo:
 11221                           	callstack 0
 11222                           
 11223 ;; *************** function _fifo_add_control *****************
 11224 ;; Defined at:
 11225 ;;		line 284 in file "fifo.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;  c               1    wreg     const unsigned char 
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;  c               1   15[COMRAM] const unsigned char 
 11230 ;; Return value:  Size  Location     Type
 11231 ;;                  1    wreg      void 
 11232 ;; Registers used:
 11233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11239 ;;      Params:         0       0       0       0       0       0       0       0       0
 11240 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11242 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11243 ;;Total ram usage:        1 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    5
 11246 ;; This function calls:
 11247 ;;		_codifica
 11248 ;;		_fifo_alinharPrint
 11249 ;; This function is called by:
 11250 ;;		_main
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           	psect	text43
 11255  0038A4                     __ptext43:
 11256                           	callstack 0
 11257  0038A4                     _fifo_add_control:
 11258                           	callstack 25
 11259                           
 11260                           ;incstack = 0
 11261                           ;fifo_add_control@c stored from wreg
 11262  0038A4  6E40               	movwf	fifo_add_control@c^0,c
 11263  0038A6                     
 11264                           ;fifo.c: 284: void fifo_add_control(const char c);fifo.c: 285: {;fifo.c: 286:     if(ind
      +                          _fila < 18)
 11265  0038A6  0E12               	movlw	18
 11266  0038A8  605D               	cpfslt	_ind_fila^0,c
 11267  0038AA  EF59  F01C         	goto	u4061
 11268  0038AE  EF5B  F01C         	goto	u4060
 11269  0038B2                     u4061:
 11270  0038B2  EF73  F01C         	goto	l5901
 11271  0038B6                     u4060:
 11272  0038B6                     
 11273                           ;fifo.c: 287:     {;fifo.c: 290:             codifica('p', &c);
 11274  0038B6  0E40               	movlw	low fifo_add_control@c
 11275  0038B8  6E31               	movwf	codifica@dado^0,c
 11276  0038BA  0E00               	movlw	high fifo_add_control@c
 11277  0038BC  6E32               	movwf	(codifica@dado+1)^0,c
 11278  0038BE  0E70               	movlw	112
 11279  0038C0  EC3D  F012         	call	_codifica
 11280  0038C4                     
 11281                           ;fifo.c: 291:             fila[ind_fila] = c;
 11282  0038C4  0E1F               	movlw	low _fila
 11283  0038C6  245D               	addwf	_ind_fila^0,w,c
 11284  0038C8  6ED9               	movwf	fsr2l,c
 11285  0038CA  6ADA               	clrf	fsr2h,c
 11286  0038CC  0E00               	movlw	high _fila
 11287  0038CE  22DA               	addwfc	fsr2h,f,c
 11288  0038D0  C040  FFDF         	movff	fifo_add_control@c,indf2
 11289  0038D4                     
 11290                           ;fifo.c: 292:             ind_fila++;
 11291  0038D4  2A5D               	incf	_ind_fila^0,f,c
 11292  0038D6                     
 11293                           ;fifo.c: 293:             fila[ind_fila] = 0;
 11294  0038D6  0E1F               	movlw	low _fila
 11295  0038D8  245D               	addwf	_ind_fila^0,w,c
 11296  0038DA  6ED9               	movwf	fsr2l,c
 11297  0038DC  6ADA               	clrf	fsr2h,c
 11298  0038DE  0E00               	movlw	high _fila
 11299  0038E0  22DA               	addwfc	fsr2h,f,c
 11300  0038E2  0E00               	movlw	0
 11301  0038E4  6EDF               	movwf	indf2,c
 11302  0038E6                     l5901:
 11303                           
 11304                           ;fifo.c: 296:     fifo_alinharPrint();
 11305  0038E6  EC95  F015         	call	_fifo_alinharPrint	;wreg free
 11306  0038EA  0012               	return		;funcret
 11307  0038EC                     __end_of_fifo_add_control:
 11308                           	callstack 0
 11309                           
 11310 ;; *************** function _fifo_add_ciclo *****************
 11311 ;; Defined at:
 11312 ;;		line 299 in file "fifo.c"
 11313 ;; Parameters:    Size  Location     Type
 11314 ;;  ciclos          2    0[COMRAM] unsigned int 
 11315 ;; Auto vars:     Size  Location     Type
 11316 ;;		None
 11317 ;; Return value:  Size  Location     Type
 11318 ;;                  1    wreg      void 
 11319 ;; Registers used:
 11320 ;;		wreg, status,2
 11321 ;; Tracked objects:
 11322 ;;		On entry : 0/0
 11323 ;;		On exit  : 0/0
 11324 ;;		Unchanged: 0/0
 11325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11326 ;;      Params:         2       0       0       0       0       0       0       0       0
 11327 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11328 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11329 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11330 ;;Total ram usage:        2 bytes
 11331 ;; Hardware stack levels used:    1
 11332 ;; Hardware stack levels required when called:    2
 11333 ;; This function calls:
 11334 ;;		Nothing
 11335 ;; This function is called by:
 11336 ;;		_main
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           	psect	text44
 11341  003F4E                     __ptext44:
 11342                           	callstack 0
 11343  003F4E                     _fifo_add_ciclo:
 11344                           	callstack 28
 11345  003F4E                     
 11346                           ;fifo.c: 299: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 300: {;fifo.c: 301:     f
      +                          ila[0] = ciclos & 0x00ff;
 11347  003F4E  C031  F01F         	movff	fifo_add_ciclo@ciclos,_fila
 11348  003F52                     
 11349                           ;fifo.c: 302:     fila[1] = ciclos >> 8;
 11350  003F52  5032               	movf	(fifo_add_ciclo@ciclos+1)^0,w,c
 11351  003F54  6E20               	movwf	(_fila+1)^0,c
 11352  003F56  0012               	return		;funcret
 11353  003F58                     __end_of_fifo_add_ciclo:
 11354                           	callstack 0
 11355                           
 11356 ;; *************** function _fifo_add *****************
 11357 ;; Defined at:
 11358 ;;		line 254 in file "fifo.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;  passo           1    wreg     const unsigned char 
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;  passo           1   15[COMRAM] const unsigned char 
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0
 11373 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11375 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11376 ;;Total ram usage:        1 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    5
 11379 ;; This function calls:
 11380 ;;		_codifica
 11381 ;;		_fifo_alinharPrint
 11382 ;; This function is called by:
 11383 ;;		_main
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           	psect	text45
 11388  003758                     __ptext45:
 11389                           	callstack 0
 11390  003758                     _fifo_add:
 11391                           	callstack 25
 11392                           
 11393                           ;incstack = 0
 11394                           ;fifo_add@passo stored from wreg
 11395  003758  6E40               	movwf	fifo_add@passo^0,c
 11396  00375A                     
 11397                           ;fifo.c: 254: void fifo_add(const char passo);fifo.c: 255: {;fifo.c: 256:     if(ind_fil
      +                          a < 18)
 11398  00375A  0E12               	movlw	18
 11399  00375C  605D               	cpfslt	_ind_fila^0,c
 11400  00375E  EFB3  F01B         	goto	u4021
 11401  003762  EFB5  F01B         	goto	u4020
 11402  003766                     u4021:
 11403  003766  EFD5  F01B         	goto	l5875
 11404  00376A                     u4020:
 11405  00376A                     
 11406                           ;fifo.c: 257:     {;fifo.c: 258:         if(passo)
 11407  00376A  5040               	movf	fifo_add@passo^0,w,c
 11408  00376C  B4D8               	btfsc	status,2,c
 11409  00376E  EFBB  F01B         	goto	u4031
 11410  003772  EFBD  F01B         	goto	u4030
 11411  003776                     u4031:
 11412  003776  EFD5  F01B         	goto	l5875
 11413  00377A                     u4030:
 11414  00377A                     
 11415                           ;fifo.c: 259:         {;fifo.c: 260:             codifica('a', &passo);
 11416  00377A  0E40               	movlw	low fifo_add@passo
 11417  00377C  6E31               	movwf	codifica@dado^0,c
 11418  00377E  0E00               	movlw	high fifo_add@passo
 11419  003780  6E32               	movwf	(codifica@dado+1)^0,c
 11420  003782  0E61               	movlw	97
 11421  003784  EC3D  F012         	call	_codifica
 11422  003788                     
 11423                           ;fifo.c: 261:             fila[ind_fila] = passo;
 11424  003788  0E1F               	movlw	low _fila
 11425  00378A  245D               	addwf	_ind_fila^0,w,c
 11426  00378C  6ED9               	movwf	fsr2l,c
 11427  00378E  6ADA               	clrf	fsr2h,c
 11428  003790  0E00               	movlw	high _fila
 11429  003792  22DA               	addwfc	fsr2h,f,c
 11430  003794  C040  FFDF         	movff	fifo_add@passo,indf2
 11431  003798                     
 11432                           ;fifo.c: 262:             ind_fila++;
 11433  003798  2A5D               	incf	_ind_fila^0,f,c
 11434  00379A                     
 11435                           ;fifo.c: 263:             fila[ind_fila] = 0;
 11436  00379A  0E1F               	movlw	low _fila
 11437  00379C  245D               	addwf	_ind_fila^0,w,c
 11438  00379E  6ED9               	movwf	fsr2l,c
 11439  0037A0  6ADA               	clrf	fsr2h,c
 11440  0037A2  0E00               	movlw	high _fila
 11441  0037A4  22DA               	addwfc	fsr2h,f,c
 11442  0037A6  0E00               	movlw	0
 11443  0037A8  6EDF               	movwf	indf2,c
 11444  0037AA                     l5875:
 11445                           
 11446                           ;fifo.c: 266:      fifo_alinharPrint();
 11447  0037AA  EC95  F015         	call	_fifo_alinharPrint	;wreg free
 11448  0037AE  0012               	return		;funcret
 11449  0037B0                     __end_of_fifo_add:
 11450                           	callstack 0
 11451                           
 11452 ;; *************** function _fifo_alinharPrint *****************
 11453 ;; Defined at:
 11454 ;;		line 482 in file "fifo.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  aux             1   14[COMRAM] unsigned char 
 11459 ;;  i               1   13[COMRAM] unsigned char 
 11460 ;;  cont            1   12[COMRAM] unsigned char 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  1    wreg      void 
 11463 ;; Registers used:
 11464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11470 ;;      Params:         0       0       0       0       0       0       0       0       0
 11471 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11472 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11473 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11474 ;;Total ram usage:        4 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    4
 11477 ;; This function calls:
 11478 ;;		_dignum_tam
 11479 ;; This function is called by:
 11480 ;;		_fifo_delete
 11481 ;;		_fifo_add
 11482 ;;		_fifo_add_tempo
 11483 ;;		_fifo_add_control
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text46
 11488  002B2A                     __ptext46:
 11489                           	callstack 0
 11490  002B2A                     _fifo_alinharPrint:
 11491                           	callstack 25
 11492  002B2A                     
 11493                           ;fifo.c: 484:     unsigned char i;;fifo.c: 485:     unsigned char aux;;fifo.c: 486:     
      +                          unsigned char cont = 0;
 11494  002B2A  0E00               	movlw	0
 11495  002B2C  6E3D               	movwf	fifo_alinharPrint@cont^0,c
 11496  002B2E                     
 11497                           ;fifo.c: 488:     for( i=ind_fila-1; i>=2; i-- )
 11498  002B2E  045D               	decf	_ind_fila^0,w,c
 11499  002B30  6E3E               	movwf	fifo_alinharPrint@i^0,c
 11500  002B32                     l5439:
 11501  002B32  0E02               	movlw	2
 11502  002B34  603E               	cpfslt	fifo_alinharPrint@i^0,c
 11503  002B36  EF9F  F015         	goto	u3611
 11504  002B3A  EFA1  F015         	goto	u3610
 11505  002B3E                     u3611:
 11506  002B3E  EFA3  F015         	goto	l5443
 11507  002B42                     u3610:
 11508  002B42  EF08  F016         	goto	l440
 11509  002B46                     l5443:
 11510                           
 11511                           ;fifo.c: 489:     {;fifo.c: 490:         aux = fila[i];
 11512  002B46  0E1F               	movlw	low _fila
 11513  002B48  243E               	addwf	fifo_alinharPrint@i^0,w,c
 11514  002B4A  6ED9               	movwf	fsr2l,c
 11515  002B4C  6ADA               	clrf	fsr2h,c
 11516  002B4E  0E00               	movlw	high _fila
 11517  002B50  22DA               	addwfc	fsr2h,f,c
 11518  002B52  50DF               	movf	indf2,w,c
 11519  002B54  6E3F               	movwf	fifo_alinharPrint@aux^0,c
 11520  002B56                     
 11521                           ;fifo.c: 491:         if( aux <= 0x64 )
 11522  002B56  0E65               	movlw	101
 11523  002B58  603F               	cpfslt	fifo_alinharPrint@aux^0,c
 11524  002B5A  EFB1  F015         	goto	u3621
 11525  002B5E  EFB3  F015         	goto	u3620
 11526  002B62                     u3621:
 11527  002B62  EFBB  F015         	goto	l5449
 11528  002B66                     u3620:
 11529  002B66                     
 11530                           ;fifo.c: 492:             cont += dignum_tam( aux )+1;
 11531  002B66  C03F  F039         	movff	fifo_alinharPrint@aux,dignum_tam@num
 11532  002B6A  6A3A               	clrf	(dignum_tam@num+1)^0,c
 11533  002B6C  EC44  F01D         	call	_dignum_tam	;wreg free
 11534  002B70  6E3C               	movwf	??_fifo_alinharPrint^0,c
 11535  002B72  283C               	incf	??_fifo_alinharPrint^0,w,c
 11536  002B74  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11537  002B76                     l5449:
 11538                           
 11539                           ;fifo.c: 494:         if( aux > 0x64 && aux <= 0xDC )
 11540  002B76  0E64               	movlw	100
 11541  002B78  643F               	cpfsgt	fifo_alinharPrint@aux^0,c
 11542  002B7A  EFC1  F015         	goto	u3631
 11543  002B7E  EFC3  F015         	goto	u3630
 11544  002B82                     u3631:
 11545  002B82  EFD6  F015         	goto	l5455
 11546  002B86                     u3630:
 11547  002B86  0EDD               	movlw	221
 11548  002B88  603F               	cpfslt	fifo_alinharPrint@aux^0,c
 11549  002B8A  EFC9  F015         	goto	u3641
 11550  002B8E  EFCB  F015         	goto	u3640
 11551  002B92                     u3641:
 11552  002B92  EFD6  F015         	goto	l5455
 11553  002B96                     u3640:
 11554  002B96                     
 11555                           ;fifo.c: 495:             cont += dignum_tam( aux - 0x64 )+1;
 11556  002B96  0E9C               	movlw	156
 11557  002B98  243F               	addwf	fifo_alinharPrint@aux^0,w,c
 11558  002B9A  6E39               	movwf	dignum_tam@num^0,c
 11559  002B9C  6A3A               	clrf	(dignum_tam@num+1)^0,c
 11560  002B9E  0EFF               	movlw	255
 11561  002BA0  223A               	addwfc	(dignum_tam@num+1)^0,f,c
 11562  002BA2  EC44  F01D         	call	_dignum_tam	;wreg free
 11563  002BA6  6E3C               	movwf	??_fifo_alinharPrint^0,c
 11564  002BA8  283C               	incf	??_fifo_alinharPrint^0,w,c
 11565  002BAA  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11566  002BAC                     l5455:
 11567                           
 11568                           ;fifo.c: 497:         if( aux > 0xDC && aux < 0xFE )
 11569  002BAC  0EDC               	movlw	220
 11570  002BAE  643F               	cpfsgt	fifo_alinharPrint@aux^0,c
 11571  002BB0  EFDC  F015         	goto	u3651
 11572  002BB4  EFDE  F015         	goto	u3650
 11573  002BB8                     u3651:
 11574  002BB8  EFE8  F015         	goto	l436
 11575  002BBC                     u3650:
 11576  002BBC  0EFE               	movlw	254
 11577  002BBE  603F               	cpfslt	fifo_alinharPrint@aux^0,c
 11578  002BC0  EFE4  F015         	goto	u3661
 11579  002BC4  EFE6  F015         	goto	u3660
 11580  002BC8                     u3661:
 11581  002BC8  EFE8  F015         	goto	l436
 11582  002BCC                     u3660:
 11583  002BCC                     
 11584                           ;fifo.c: 498:             cont += 2;
 11585  002BCC  0E02               	movlw	2
 11586  002BCE  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11587  002BD0                     l436:
 11588                           
 11589                           ;fifo.c: 500:         if( aux == 0xFE )
 11590  002BD0  0EFE               	movlw	254
 11591  002BD2  183F               	xorwf	fifo_alinharPrint@aux^0,w,c
 11592  002BD4  A4D8               	btfss	status,2,c
 11593  002BD6  EFEF  F015         	goto	u3671
 11594  002BDA  EFF1  F015         	goto	u3670
 11595  002BDE                     u3671:
 11596  002BDE  EFF9  F015         	goto	l5463
 11597  002BE2                     u3670:
 11598  002BE2                     
 11599                           ;fifo.c: 501:             cont += dignum_tam( aux )+1;
 11600  002BE2  C03F  F039         	movff	fifo_alinharPrint@aux,dignum_tam@num
 11601  002BE6  6A3A               	clrf	(dignum_tam@num+1)^0,c
 11602  002BE8  EC44  F01D         	call	_dignum_tam	;wreg free
 11603  002BEC  6E3C               	movwf	??_fifo_alinharPrint^0,c
 11604  002BEE  283C               	incf	??_fifo_alinharPrint^0,w,c
 11605  002BF0  263D               	addwf	fifo_alinharPrint@cont^0,f,c
 11606  002BF2                     l5463:
 11607                           
 11608                           ;fifo.c: 503:         if( cont > 20 )
 11609  002BF2  0E14               	movlw	20
 11610  002BF4  643D               	cpfsgt	fifo_alinharPrint@cont^0,c
 11611  002BF6  EFFF  F015         	goto	u3681
 11612  002BFA  EF01  F016         	goto	u3680
 11613  002BFE                     u3681:
 11614  002BFE  EF03  F016         	goto	l438
 11615  002C02                     u3680:
 11616  002C02  EF08  F016         	goto	l440
 11617  002C06                     l438:
 11618                           
 11619                           ;fifo.c: 508:             ind_print = i;
 11620  002C06  C03E  F05C         	movff	fifo_alinharPrint@i,_ind_print
 11621  002C0A                     
 11622                           ;fifo.c: 509:     }
 11623  002C0A  063E               	decf	fifo_alinharPrint@i^0,f,c
 11624  002C0C  EF99  F015         	goto	l5439
 11625  002C10                     l440:
 11626  002C10  0012               	return		;funcret
 11627  002C12                     __end_of_fifo_alinharPrint:
 11628                           	callstack 0
 11629                           
 11630 ;; *************** function _dignum_tam *****************
 11631 ;; Defined at:
 11632 ;;		line 470 in file "fifo.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  num             2    8[COMRAM] int 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  tam             1   10[COMRAM] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      unsigned char 
 11639 ;; Registers used:
 11640 ;;		wreg, status,2, status,0, cstack
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11646 ;;      Params:         2       0       0       0       0       0       0       0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11649 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11650 ;;Total ram usage:        3 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    3
 11653 ;; This function calls:
 11654 ;;		___awdiv
 11655 ;; This function is called by:
 11656 ;;		_fifo_alinharPrint
 11657 ;;		_printExec
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text47
 11662  003A88                     __ptext47:
 11663                           	callstack 0
 11664  003A88                     _dignum_tam:
 11665                           	callstack 26
 11666  003A88                     
 11667                           ;fifo.c: 470: unsigned char dignum_tam(int num);fifo.c: 471: {;fifo.c: 472:     unsigned
      +                           char tam = 0;
 11668  003A88  0E00               	movlw	0
 11669  003A8A  6E3B               	movwf	dignum_tam@tam^0,c
 11670                           
 11671                           ;fifo.c: 474:     while(num != 0)
 11672  003A8C  EF57  F01D         	goto	l5167
 11673  003A90                     l5163:
 11674                           
 11675                           ;fifo.c: 475:     {;fifo.c: 476:         num /= 10;
 11676  003A90  C039  F031         	movff	dignum_tam@num,___awdiv@dividend
 11677  003A94  C03A  F032         	movff	dignum_tam@num+1,___awdiv@dividend+1
 11678  003A98  0E00               	movlw	0
 11679  003A9A  6E34               	movwf	(___awdiv@divisor+1)^0,c
 11680  003A9C  0E0A               	movlw	10
 11681  003A9E  6E33               	movwf	___awdiv@divisor^0,c
 11682  003AA0  EC7A  F016         	call	___awdiv	;wreg free
 11683  003AA4  C031  F039         	movff	?___awdiv,dignum_tam@num
 11684  003AA8  C032  F03A         	movff	?___awdiv+1,dignum_tam@num+1
 11685  003AAC                     
 11686                           ;fifo.c: 477:         tam++;
 11687  003AAC  2A3B               	incf	dignum_tam@tam^0,f,c
 11688  003AAE                     l5167:
 11689                           
 11690                           ;fifo.c: 474:     while(num != 0)
 11691  003AAE  5039               	movf	dignum_tam@num^0,w,c
 11692  003AB0  103A               	iorwf	(dignum_tam@num+1)^0,w,c
 11693  003AB2  A4D8               	btfss	status,2,c
 11694  003AB4  EF5E  F01D         	goto	u3221
 11695  003AB8  EF60  F01D         	goto	u3220
 11696  003ABC                     u3221:
 11697  003ABC  EF48  F01D         	goto	l5163
 11698  003AC0                     u3220:
 11699  003AC0                     
 11700                           ;fifo.c: 479:     return ( tam );
 11701  003AC0  503B               	movf	dignum_tam@tam^0,w,c
 11702  003AC2  0012               	return		;funcret
 11703  003AC4                     __end_of_dignum_tam:
 11704                           	callstack 0
 11705                           
 11706 ;; *************** function ___awdiv *****************
 11707 ;; Defined at:
 11708 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;  dividend        2    0[COMRAM] int 
 11711 ;;  divisor         2    2[COMRAM] int 
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;  quotient        2    6[COMRAM] int 
 11714 ;;  sign            1    5[COMRAM] unsigned char 
 11715 ;;  counter         1    4[COMRAM] unsigned char 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  2    0[COMRAM] int 
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11725 ;;      Params:         4       0       0       0       0       0       0       0       0
 11726 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11727 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11728 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11729 ;;Total ram usage:        8 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    2
 11732 ;; This function calls:
 11733 ;;		Nothing
 11734 ;; This function is called by:
 11735 ;;		_dispLCD_num
 11736 ;;		_fifo_print
 11737 ;;		_dignum_tam
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           	psect	text48
 11742  002CF4                     __ptext48:
 11743                           	callstack 0
 11744  002CF4                     ___awdiv:
 11745                           	callstack 26
 11746  002CF4  0E00               	movlw	0
 11747  002CF6  6E36               	movwf	___awdiv@sign^0,c
 11748  002CF8  BE34               	btfsc	(___awdiv@divisor+1)^0,7,c
 11749  002CFA  EF83  F016         	goto	u3120
 11750  002CFE  EF81  F016         	goto	u3121
 11751  002D02                     u3121:
 11752  002D02  EF89  F016         	goto	l5069
 11753  002D06                     u3120:
 11754  002D06  6C33               	negf	___awdiv@divisor^0,c
 11755  002D08  1E34               	comf	(___awdiv@divisor+1)^0,f,c
 11756  002D0A  B0D8               	btfsc	status,0,c
 11757  002D0C  2A34               	incf	(___awdiv@divisor+1)^0,f,c
 11758  002D0E  0E01               	movlw	1
 11759  002D10  6E36               	movwf	___awdiv@sign^0,c
 11760  002D12                     l5069:
 11761  002D12  BE32               	btfsc	(___awdiv@dividend+1)^0,7,c
 11762  002D14  EF90  F016         	goto	u3130
 11763  002D18  EF8E  F016         	goto	u3131
 11764  002D1C                     u3131:
 11765  002D1C  EF96  F016         	goto	l5075
 11766  002D20                     u3130:
 11767  002D20  6C31               	negf	___awdiv@dividend^0,c
 11768  002D22  1E32               	comf	(___awdiv@dividend+1)^0,f,c
 11769  002D24  B0D8               	btfsc	status,0,c
 11770  002D26  2A32               	incf	(___awdiv@dividend+1)^0,f,c
 11771  002D28  0E01               	movlw	1
 11772  002D2A  1A36               	xorwf	___awdiv@sign^0,f,c
 11773  002D2C                     l5075:
 11774  002D2C  0E00               	movlw	0
 11775  002D2E  6E38               	movwf	(___awdiv@quotient+1)^0,c
 11776  002D30  0E00               	movlw	0
 11777  002D32  6E37               	movwf	___awdiv@quotient^0,c
 11778  002D34  5033               	movf	___awdiv@divisor^0,w,c
 11779  002D36  1034               	iorwf	(___awdiv@divisor+1)^0,w,c
 11780  002D38  B4D8               	btfsc	status,2,c
 11781  002D3A  EFA1  F016         	goto	u3141
 11782  002D3E  EFA3  F016         	goto	u3140
 11783  002D42                     u3141:
 11784  002D42  EFCB  F016         	goto	l5097
 11785  002D46                     u3140:
 11786  002D46  0E01               	movlw	1
 11787  002D48  6E35               	movwf	___awdiv@counter^0,c
 11788  002D4A  EFAB  F016         	goto	l5083
 11789  002D4E                     l5081:
 11790  002D4E  90D8               	bcf	status,0,c
 11791  002D50  3633               	rlcf	___awdiv@divisor^0,f,c
 11792  002D52  3634               	rlcf	(___awdiv@divisor+1)^0,f,c
 11793  002D54  2A35               	incf	___awdiv@counter^0,f,c
 11794  002D56                     l5083:
 11795  002D56  AE34               	btfss	(___awdiv@divisor+1)^0,7,c
 11796  002D58  EFB0  F016         	goto	u3151
 11797  002D5C  EFB2  F016         	goto	u3150
 11798  002D60                     u3151:
 11799  002D60  EFA7  F016         	goto	l5081
 11800  002D64                     u3150:
 11801  002D64                     l5085:
 11802  002D64  90D8               	bcf	status,0,c
 11803  002D66  3637               	rlcf	___awdiv@quotient^0,f,c
 11804  002D68  3638               	rlcf	(___awdiv@quotient+1)^0,f,c
 11805  002D6A  5033               	movf	___awdiv@divisor^0,w,c
 11806  002D6C  5C31               	subwf	___awdiv@dividend^0,w,c
 11807  002D6E  5034               	movf	(___awdiv@divisor+1)^0,w,c
 11808  002D70  5832               	subwfb	(___awdiv@dividend+1)^0,w,c
 11809  002D72  A0D8               	btfss	status,0,c
 11810  002D74  EFBE  F016         	goto	u3161
 11811  002D78  EFC0  F016         	goto	u3160
 11812  002D7C                     u3161:
 11813  002D7C  EFC5  F016         	goto	l5093
 11814  002D80                     u3160:
 11815  002D80  5033               	movf	___awdiv@divisor^0,w,c
 11816  002D82  5E31               	subwf	___awdiv@dividend^0,f,c
 11817  002D84  5034               	movf	(___awdiv@divisor+1)^0,w,c
 11818  002D86  5A32               	subwfb	(___awdiv@dividend+1)^0,f,c
 11819  002D88  8037               	bsf	___awdiv@quotient^0,0,c
 11820  002D8A                     l5093:
 11821  002D8A  90D8               	bcf	status,0,c
 11822  002D8C  3234               	rrcf	(___awdiv@divisor+1)^0,f,c
 11823  002D8E  3233               	rrcf	___awdiv@divisor^0,f,c
 11824  002D90  2E35               	decfsz	___awdiv@counter^0,f,c
 11825  002D92  EFB2  F016         	goto	l5085
 11826  002D96                     l5097:
 11827  002D96  5036               	movf	___awdiv@sign^0,w,c
 11828  002D98  B4D8               	btfsc	status,2,c
 11829  002D9A  EFD1  F016         	goto	u3171
 11830  002D9E  EFD3  F016         	goto	u3170
 11831  002DA2                     u3171:
 11832  002DA2  EFD7  F016         	goto	l5101
 11833  002DA6                     u3170:
 11834  002DA6  6C37               	negf	___awdiv@quotient^0,c
 11835  002DA8  1E38               	comf	(___awdiv@quotient+1)^0,f,c
 11836  002DAA  B0D8               	btfsc	status,0,c
 11837  002DAC  2A38               	incf	(___awdiv@quotient+1)^0,f,c
 11838  002DAE                     l5101:
 11839  002DAE  C037  F031         	movff	___awdiv@quotient,?___awdiv
 11840  002DB2  C038  F032         	movff	___awdiv@quotient+1,?___awdiv+1
 11841  002DB6  0012               	return		;funcret
 11842  002DB8                     __end_of___awdiv:
 11843                           	callstack 0
 11844                           
 11845 ;; *************** function _codifica *****************
 11846 ;; Defined at:
 11847 ;;		line 200 in file "fifo.c"
 11848 ;; Parameters:    Size  Location     Type
 11849 ;;  tipo            1    wreg     unsigned char 
 11850 ;;  dado            2    0[COMRAM] PTR unsigned char 
 11851 ;;		 -> fifo_add_control@c(1), fifo_add_tempo@t(1), fifo_add@passo(1), RAM(2047), 
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;  tipo            1    4[COMRAM] unsigned char 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11863 ;;      Params:         2       0       0       0       0       0       0       0       0
 11864 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11865 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11866 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11867 ;;Total ram usage:        5 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    2
 11870 ;; This function calls:
 11871 ;;		Nothing
 11872 ;; This function is called by:
 11873 ;;		_fifo_delete
 11874 ;;		_fifo_add
 11875 ;;		_fifo_add_tempo
 11876 ;;		_fifo_add_control
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           	psect	text49
 11881  00247A                     __ptext49:
 11882                           	callstack 0
 11883  00247A                     _codifica:
 11884                           	callstack 27
 11885                           
 11886                           ;incstack = 0
 11887                           ;codifica@tipo stored from wreg
 11888  00247A  6E35               	movwf	codifica@tipo^0,c
 11889  00247C                     
 11890                           ;fifo.c: 200: void codifica( unsigned char tipo, unsigned char *dado );fifo.c: 201: {;fi
      +                          fo.c: 202:     switch( tipo )
 11891  00247C  EFCD  F012         	goto	l5425
 11892  002480                     l5397:
 11893  002480  C031  FFD9         	movff	codifica@dado,fsr2l
 11894  002484  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11895  002488  50DF               	movf	indf2,w,c
 11896  00248A  A4D8               	btfss	status,2,c
 11897  00248C  EF4A  F012         	goto	u3601
 11898  002490  EF4C  F012         	goto	u3600
 11899  002494                     u3601:
 11900  002494  EFE6  F012         	goto	l326
 11901  002498                     u3600:
 11902  002498                     
 11903                           ;fifo.c: 205:                        *dado = 254;
 11904  002498  C031  FFD9         	movff	codifica@dado,fsr2l
 11905  00249C  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11906  0024A0  0EFE               	movlw	254
 11907  0024A2  6EDF               	movwf	indf2,c
 11908  0024A4  EFE6  F012         	goto	l326
 11909  0024A8                     l5401:
 11910  0024A8  C031  FFD9         	movff	codifica@dado,fsr2l
 11911  0024AC  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11912  0024B0  0E64               	movlw	100
 11913  0024B2  26DF               	addwf	indf2,f,c
 11914  0024B4  EFE6  F012         	goto	l326
 11915  0024B8                     l5403:
 11916  0024B8  C031  FFD9         	movff	codifica@dado,fsr2l
 11917  0024BC  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11918  0024C0  0EDD               	movlw	221
 11919  0024C2  6EDF               	movwf	indf2,c
 11920  0024C4  EFE6  F012         	goto	l326
 11921  0024C8                     l5405:
 11922  0024C8  C031  FFD9         	movff	codifica@dado,fsr2l
 11923  0024CC  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11924  0024D0  0EDE               	movlw	222
 11925  0024D2  6EDF               	movwf	indf2,c
 11926  0024D4  EFE6  F012         	goto	l326
 11927  0024D8                     l5407:
 11928  0024D8  C031  FFD9         	movff	codifica@dado,fsr2l
 11929  0024DC  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11930  0024E0  0EDF               	movlw	223
 11931  0024E2  6EDF               	movwf	indf2,c
 11932  0024E4  EFE6  F012         	goto	l326
 11933  0024E8                     l5409:
 11934  0024E8  C031  FFD9         	movff	codifica@dado,fsr2l
 11935  0024EC  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11936  0024F0  0EE0               	movlw	224
 11937  0024F2  6EDF               	movwf	indf2,c
 11938  0024F4  EFE6  F012         	goto	l326
 11939  0024F8                     l5411:
 11940  0024F8  C031  FFD9         	movff	codifica@dado,fsr2l
 11941  0024FC  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11942  002500  0EE1               	movlw	225
 11943  002502  6EDF               	movwf	indf2,c
 11944  002504  EFE6  F012         	goto	l326
 11945  002508                     l5413:
 11946  002508  C031  FFD9         	movff	codifica@dado,fsr2l
 11947  00250C  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11948  002510  0EE2               	movlw	226
 11949  002512  6EDF               	movwf	indf2,c
 11950  002514  EFE6  F012         	goto	l326
 11951  002518                     l5415:
 11952  002518  C031  FFD9         	movff	codifica@dado,fsr2l
 11953  00251C  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11954  002520  0EE3               	movlw	227
 11955  002522  6EDF               	movwf	indf2,c
 11956  002524  EFE6  F012         	goto	l326
 11957  002528                     l5417:
 11958  002528  C031  FFD9         	movff	codifica@dado,fsr2l
 11959  00252C  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11960  002530  0EE4               	movlw	228
 11961  002532  6EDF               	movwf	indf2,c
 11962  002534  EFE6  F012         	goto	l326
 11963  002538                     l5421:
 11964  002538  C031  FFD9         	movff	codifica@dado,fsr2l
 11965  00253C  C032  FFDA         	movff	codifica@dado+1,fsr2h
 11966  002540  50DF               	movf	indf2,w,c
 11967  002542  6E33               	movwf	??_codifica^0,c
 11968  002544  6A34               	clrf	(??_codifica+1)^0,c
 11969                           
 11970                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11971                           ; Switch size 1, requested type "simple"
 11972                           ; Number of cases is 1, Range of values is 0 to 0
 11973                           ; switch strategies available:
 11974                           ; Name         Instructions Cycles
 11975                           ; simple_byte            4     3 (average)
 11976                           ;	Chosen strategy is simple_byte
 11977  002546  5034               	movf	(??_codifica+1)^0,w,c
 11978  002548  0A00               	xorlw	0	; case 0
 11979  00254A  B4D8               	btfsc	status,2,c
 11980  00254C  EFAA  F012         	goto	l8023
 11981  002550  EFE6  F012         	goto	l326
 11982  002554                     l8023:
 11983                           
 11984                           ; Switch size 1, requested type "simple"
 11985                           ; Number of cases is 8, Range of values is 65 to 100
 11986                           ; switch strategies available:
 11987                           ; Name         Instructions Cycles
 11988                           ; simple_byte           25    13 (average)
 11989                           ;	Chosen strategy is simple_byte
 11990  002554  5033               	movf	??_codifica^0,w,c
 11991  002556  0A41               	xorlw	65	; case 65
 11992  002558  B4D8               	btfsc	status,2,c
 11993  00255A  EF5C  F012         	goto	l5403
 11994  00255E  0A03               	xorlw	3	; case 66
 11995  002560  B4D8               	btfsc	status,2,c
 11996  002562  EF6C  F012         	goto	l5407
 11997  002566  0A01               	xorlw	1	; case 67
 11998  002568  B4D8               	btfsc	status,2,c
 11999  00256A  EF7C  F012         	goto	l5411
 12000  00256E  0A07               	xorlw	7	; case 68
 12001  002570  B4D8               	btfsc	status,2,c
 12002  002572  EF8C  F012         	goto	l5415
 12003  002576  0A25               	xorlw	37	; case 97
 12004  002578  B4D8               	btfsc	status,2,c
 12005  00257A  EF64  F012         	goto	l5405
 12006  00257E  0A03               	xorlw	3	; case 98
 12007  002580  B4D8               	btfsc	status,2,c
 12008  002582  EF74  F012         	goto	l5409
 12009  002586  0A01               	xorlw	1	; case 99
 12010  002588  B4D8               	btfsc	status,2,c
 12011  00258A  EF84  F012         	goto	l5413
 12012  00258E  0A07               	xorlw	7	; case 100
 12013  002590  B4D8               	btfsc	status,2,c
 12014  002592  EF94  F012         	goto	l5417
 12015  002596  EFE6  F012         	goto	l326
 12016  00259A                     l5425:
 12017  00259A  5035               	movf	codifica@tipo^0,w,c
 12018  00259C  6E33               	movwf	??_codifica^0,c
 12019  00259E  6A34               	clrf	(??_codifica+1)^0,c
 12020                           
 12021                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12022                           ; Switch size 1, requested type "simple"
 12023                           ; Number of cases is 1, Range of values is 0 to 0
 12024                           ; switch strategies available:
 12025                           ; Name         Instructions Cycles
 12026                           ; simple_byte            4     3 (average)
 12027                           ;	Chosen strategy is simple_byte
 12028  0025A0  5034               	movf	(??_codifica+1)^0,w,c
 12029  0025A2  0A00               	xorlw	0	; case 0
 12030  0025A4  B4D8               	btfsc	status,2,c
 12031  0025A6  EFD7  F012         	goto	l8025
 12032  0025AA  EFE6  F012         	goto	l326
 12033  0025AE                     l8025:
 12034                           
 12035                           ; Switch size 1, requested type "simple"
 12036                           ; Number of cases is 3, Range of values is 97 to 116
 12037                           ; switch strategies available:
 12038                           ; Name         Instructions Cycles
 12039                           ; simple_byte           10     6 (average)
 12040                           ;	Chosen strategy is simple_byte
 12041  0025AE  5033               	movf	??_codifica^0,w,c
 12042  0025B0  0A61               	xorlw	97	; case 97
 12043  0025B2  B4D8               	btfsc	status,2,c
 12044  0025B4  EF9C  F012         	goto	l5421
 12045  0025B8  0A11               	xorlw	17	; case 112
 12046  0025BA  B4D8               	btfsc	status,2,c
 12047  0025BC  EF40  F012         	goto	l5397
 12048  0025C0  0A04               	xorlw	4	; case 116
 12049  0025C2  B4D8               	btfsc	status,2,c
 12050  0025C4  EF54  F012         	goto	l5401
 12051  0025C8  EFE6  F012         	goto	l326
 12052  0025CC                     l326:
 12053  0025CC  0012               	return		;funcret
 12054  0025CE                     __end_of_codifica:
 12055                           	callstack 0
 12056                           
 12057 ;; *************** function _dispLCD_str *****************
 12058 ;; Defined at:
 12059 ;;		line 250 in file "dispLCD4vias.c"
 12060 ;; Parameters:    Size  Location     Type
 12061 ;;  str             2    7[COMRAM] PTR const unsigned char 
 12062 ;;		 -> STR_29(78), STR_28(62), STR_17(81), STR_6(83), 
 12063 ;; Auto vars:     Size  Location     Type
 12064 ;;  c               1   10[COMRAM] unsigned char 
 12065 ;;  lin             1    9[COMRAM] unsigned char 
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  1    wreg      void 
 12068 ;; Registers used:
 12069 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12075 ;;      Params:         2       0       0       0       0       0       0       0       0
 12076 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12078 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12079 ;;Total ram usage:        4 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:    4
 12082 ;; This function calls:
 12083 ;;		_dispLCD_dataReg
 12084 ;;		_dispLCD_lincol
 12085 ;; This function is called by:
 12086 ;;		_main
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           	psect	text50
 12091  0035F0                     __ptext50:
 12092                           	callstack 0
 12093  0035F0                     _dispLCD_str:
 12094                           	callstack 26
 12095  0035F0                     
 12096                           ;dispLCD4vias.c: 250: void dispLCD_str( const char * str );dispLCD4vias.c: 251: {;dispLC
      +                          D4vias.c: 252:     char lin = 0;
 12097  0035F0  0E00               	movlw	0
 12098  0035F2  6E3A               	movwf	dispLCD_str@lin^0,c
 12099  0035F4                     
 12100                           ;dispLCD4vias.c: 253:     char c;;dispLCD4vias.c: 254:     dispLCD_lincol(0,0);
 12101  0035F4  0E00               	movlw	0
 12102  0035F6  6E33               	movwf	dispLCD_lincol@col^0,c
 12103  0035F8  0E00               	movlw	0
 12104  0035FA  EC98  F01A         	call	_dispLCD_lincol
 12105                           
 12106                           ;dispLCD4vias.c: 256:     while( c = *str )
 12107  0035FE  EF17  F01B         	goto	l5717
 12108  003602                     l5709:
 12109                           
 12110                           ;dispLCD4vias.c: 257:     {;dispLCD4vias.c: 258:         if( c != '\n' )
 12111  003602  0E0A               	movlw	10
 12112  003604  183B               	xorwf	dispLCD_str@c^0,w,c
 12113  003606  B4D8               	btfsc	status,2,c
 12114  003608  EF08  F01B         	goto	u3881
 12115  00360C  EF0A  F01B         	goto	u3880
 12116  003610                     u3881:
 12117  003610  EF0F  F01B         	goto	l5713
 12118  003614                     u3880:
 12119  003614                     
 12120                           ;dispLCD4vias.c: 259:             dispLCD_dataReg( c );
 12121  003614  503B               	movf	dispLCD_str@c^0,w,c
 12122  003616  EC2B  F01C         	call	_dispLCD_dataReg
 12123  00361A  EF15  F01B         	goto	l5715
 12124  00361E                     l5713:
 12125                           
 12126                           ;dispLCD4vias.c: 261:             dispLCD_lincol(++lin,0);
 12127  00361E  0E00               	movlw	0
 12128  003620  6E33               	movwf	dispLCD_lincol@col^0,c
 12129  003622  2A3A               	incf	dispLCD_str@lin^0,f,c
 12130  003624  503A               	movf	dispLCD_str@lin^0,w,c
 12131  003626  EC98  F01A         	call	_dispLCD_lincol
 12132  00362A                     l5715:
 12133                           
 12134                           ;dispLCD4vias.c: 262:         ++str;
 12135  00362A  4A38               	infsnz	dispLCD_str@str^0,f,c
 12136  00362C  2A39               	incf	(dispLCD_str@str+1)^0,f,c
 12137  00362E                     l5717:
 12138                           
 12139                           ;dispLCD4vias.c: 256:     while( c = *str )
 12140  00362E  C038  FFF6         	movff	dispLCD_str@str,tblptrl
 12141  003632  C039  FFF7         	movff	dispLCD_str@str+1,tblptrh
 12142  003636                     	if	0	;tblptru may be non-zero
 12143  003636                     	endif
 12144  003636                     	if	0	;tblptru may be non-zero
 12145  003636                     	endif
 12146  003636  0008               	tblrd		*
 12147  003638  CFF5 F03B          	movff	tablat,dispLCD_str@c
 12148  00363C  503B               	movf	dispLCD_str@c^0,w,c
 12149  00363E  A4D8               	btfss	status,2,c
 12150  003640  EF24  F01B         	goto	u3891
 12151  003644  EF26  F01B         	goto	u3890
 12152  003648                     u3891:
 12153  003648  EF01  F01B         	goto	l5709
 12154  00364C                     u3890:
 12155  00364C  0012               	return		;funcret
 12156  00364E                     __end_of_dispLCD_str:
 12157                           	callstack 0
 12158                           
 12159 ;; *************** function _dispLCD_init *****************
 12160 ;; Defined at:
 12161 ;;		line 165 in file "dispLCD4vias.c"
 12162 ;; Parameters:    Size  Location     Type
 12163 ;;		None
 12164 ;; Auto vars:     Size  Location     Type
 12165 ;;		None
 12166 ;; Return value:  Size  Location     Type
 12167 ;;                  1    wreg      void 
 12168 ;; Registers used:
 12169 ;;		wreg, status,2, status,0, cstack
 12170 ;; Tracked objects:
 12171 ;;		On entry : 0/0
 12172 ;;		On exit  : 0/0
 12173 ;;		Unchanged: 0/0
 12174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12175 ;;      Params:         0       0       0       0       0       0       0       0       0
 12176 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12177 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12178 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12179 ;;Total ram usage:        0 bytes
 12180 ;; Hardware stack levels used:    1
 12181 ;; Hardware stack levels required when called:    3
 12182 ;; This function calls:
 12183 ;;		_delay
 12184 ;;		_dispLCD_instReg
 12185 ;; This function is called by:
 12186 ;;		_main
 12187 ;; This function uses a non-reentrant model
 12188 ;;
 12189                           
 12190                           	psect	text51
 12191  003BA4                     __ptext51:
 12192                           	callstack 0
 12193  003BA4                     _dispLCD_init:
 12194                           	callstack 27
 12195  003BA4                     
 12196                           ;dispLCD4vias.c: 167:     ADCON1 = 0xFF;
 12197  003BA4  68C1               	setf	193,c	;volatile
 12198                           
 12199                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB2 = 0;
 12200  003BA6  9493               	bcf	147,2,c	;volatile
 12201                           
 12202                           ;dispLCD4vias.c: 171:     TRISBbits.TRISB3 = 0;
 12203  003BA8  9693               	bcf	147,3,c	;volatile
 12204                           
 12205                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB4 = 0;
 12206  003BAA  9893               	bcf	147,4,c	;volatile
 12207                           
 12208                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB5 = 0;
 12209  003BAC  9A93               	bcf	147,5,c	;volatile
 12210                           
 12211                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB6 = 0;
 12212  003BAE  9C93               	bcf	147,6,c	;volatile
 12213                           
 12214                           ;dispLCD4vias.c: 176:     TRISBbits.TRISB7 = 0;
 12215  003BB0  9E93               	bcf	147,7,c	;volatile
 12216                           
 12217                           ;dispLCD4vias.c: 178:     LCDbits.EN = 1;
 12218  003BB2  8E8A               	bsf	138,7,c	;volatile
 12219  003BB4                     
 12220                           ;dispLCD4vias.c: 179:     delay(5);
 12221  003BB4  0E00               	movlw	0
 12222  003BB6  6E32               	movwf	(delay@t+1)^0,c
 12223  003BB8  0E05               	movlw	5
 12224  003BBA  6E31               	movwf	delay@t^0,c
 12225  003BBC  EC62  F01E         	call	_delay	;wreg free
 12226                           
 12227                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x20|0x00|0x08);
 12228  003BC0  0E28               	movlw	40
 12229  003BC2  ECA9  F014         	call	_dispLCD_instReg
 12230                           
 12231                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
 12232  003BC6  0E0C               	movlw	12
 12233  003BC8  ECA9  F014         	call	_dispLCD_instReg
 12234                           
 12235                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x01 );
 12236  003BCC  0E01               	movlw	1
 12237  003BCE  ECA9  F014         	call	_dispLCD_instReg
 12238                           
 12239                           ;dispLCD4vias.c: 183:     dispLCD_instReg( 0x02 );
 12240  003BD2  0E02               	movlw	2
 12241  003BD4  ECA9  F014         	call	_dispLCD_instReg
 12242  003BD8  0012               	return		;funcret
 12243  003BDA                     __end_of_dispLCD_init:
 12244                           	callstack 0
 12245                           
 12246 ;; *************** function _dispLCD_clr *****************
 12247 ;; Defined at:
 12248 ;;		line 244 in file "dispLCD4vias.c"
 12249 ;; Parameters:    Size  Location     Type
 12250 ;;		None
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;		None
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  1    wreg      void 
 12255 ;; Registers used:
 12256 ;;		wreg, status,2, status,0, cstack
 12257 ;; Tracked objects:
 12258 ;;		On entry : 0/0
 12259 ;;		On exit  : 0/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12262 ;;      Params:         0       0       0       0       0       0       0       0       0
 12263 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12264 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12265 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12266 ;;Total ram usage:        0 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; Hardware stack levels required when called:    3
 12269 ;; This function calls:
 12270 ;;		_dispLCD_instReg
 12271 ;; This function is called by:
 12272 ;;		_main
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text52
 12277  003F58                     __ptext52:
 12278                           	callstack 0
 12279  003F58                     _dispLCD_clr:
 12280                           	callstack 27
 12281  003F58                     
 12282                           ;dispLCD4vias.c: 246:     dispLCD_instReg(0x01);
 12283  003F58  0E01               	movlw	1
 12284  003F5A  ECA9  F014         	call	_dispLCD_instReg
 12285  003F5E  0012               	return		;funcret
 12286  003F60                     __end_of_dispLCD_clr:
 12287                           	callstack 0
 12288                           
 12289 ;; *************** function _dispLCD *****************
 12290 ;; Defined at:
 12291 ;;		line 187 in file "dispLCD4vias.c"
 12292 ;; Parameters:    Size  Location     Type
 12293 ;;  lin             1    wreg     unsigned char 
 12294 ;;  col             1    7[COMRAM] unsigned char 
 12295 ;;  str             2    8[COMRAM] PTR const unsigned char 
 12296 ;;		 -> STR_34(21), STR_33(21), STR_32(21), STR_31(2), 
 12297 ;;		 -> STR_30(2), STR_27(21), STR_26(21), STR_25(21), 
 12298 ;;		 -> STR_24(21), STR_23(21), STR_22(8), STR_21(21), 
 12299 ;;		 -> STR_20(21), STR_19(21), STR_18(21), STR_16(21), 
 12300 ;;		 -> STR_15(21), STR_14(2), STR_13(2), STR_12(21), 
 12301 ;;		 -> STR_11(21), STR_10(21), STR_9(21), STR_8(21), 
 12302 ;;		 -> STR_7(21), STR_5(21), STR_4(2), STR_3(2), 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  lin             1   11[COMRAM] unsigned char 
 12305 ;;  pos             1   10[COMRAM] unsigned char 
 12306 ;; Return value:  Size  Location     Type
 12307 ;;                  1    wreg      void 
 12308 ;; Registers used:
 12309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12310 ;; Tracked objects:
 12311 ;;		On entry : 0/0
 12312 ;;		On exit  : 0/0
 12313 ;;		Unchanged: 0/0
 12314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12315 ;;      Params:         3       0       0       0       0       0       0       0       0
 12316 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12317 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12318 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12319 ;;Total ram usage:        5 bytes
 12320 ;; Hardware stack levels used:    1
 12321 ;; Hardware stack levels required when called:    4
 12322 ;; This function calls:
 12323 ;;		_dispLCD_dataReg
 12324 ;;		_dispLCD_lincol
 12325 ;; This function is called by:
 12326 ;;		_main
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           	psect	text53
 12331  0038EC                     __ptext53:
 12332                           	callstack 0
 12333  0038EC                     _dispLCD:
 12334                           	callstack 26
 12335                           
 12336                           ;incstack = 0
 12337                           ;dispLCD@lin stored from wreg
 12338  0038EC  6E3C               	movwf	dispLCD@lin^0,c
 12339  0038EE                     
 12340                           ;dispLCD4vias.c: 187: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 188: {;dispLCD4vias.c: 189:     char pos = col;
 12341  0038EE  C038  F03B         	movff	dispLCD@col,dispLCD@pos
 12342  0038F2                     
 12343                           ;dispLCD4vias.c: 190:     dispLCD_lincol( lin, col );
 12344  0038F2  C038  F033         	movff	dispLCD@col,dispLCD_lincol@col
 12345  0038F6  503C               	movf	dispLCD@lin^0,w,c
 12346  0038F8  EC98  F01A         	call	_dispLCD_lincol
 12347                           
 12348                           ;dispLCD4vias.c: 192:     while( *str )
 12349  0038FC  EF8B  F01C         	goto	l5701
 12350  003900                     l5695:
 12351                           
 12352                           ;dispLCD4vias.c: 193:     {;dispLCD4vias.c: 194:         dispLCD_dataReg( *str );
 12353  003900  C039  FFF6         	movff	dispLCD@str,tblptrl
 12354  003904  C03A  FFF7         	movff	dispLCD@str+1,tblptrh
 12355  003908                     	if	0	;tblptru may be non-zero
 12356  003908                     	endif
 12357  003908                     	if	0	;tblptru may be non-zero
 12358  003908                     	endif
 12359  003908  0008               	tblrd		*
 12360  00390A  50F5               	movf	tablat,w,c
 12361  00390C  EC2B  F01C         	call	_dispLCD_dataReg
 12362  003910                     
 12363                           ;dispLCD4vias.c: 195:         ++str;
 12364  003910  4A39               	infsnz	dispLCD@str^0,f,c
 12365  003912  2A3A               	incf	(dispLCD@str+1)^0,f,c
 12366  003914                     
 12367                           ;dispLCD4vias.c: 196:         ++pos;
 12368  003914  2A3B               	incf	dispLCD@pos^0,f,c
 12369  003916                     l5701:
 12370                           
 12371                           ;dispLCD4vias.c: 192:     while( *str )
 12372  003916  C039  FFF6         	movff	dispLCD@str,tblptrl
 12373  00391A  C03A  FFF7         	movff	dispLCD@str+1,tblptrh
 12374  00391E                     	if	0	;tblptru may be non-zero
 12375  00391E                     	endif
 12376  00391E                     	if	0	;tblptru may be non-zero
 12377  00391E                     	endif
 12378  00391E  0008               	tblrd		*
 12379  003920  50F5               	movf	tablat,w,c
 12380  003922  0900               	iorlw	0
 12381  003924  A4D8               	btfss	status,2,c
 12382  003926  EF97  F01C         	goto	u3871
 12383  00392A  EF99  F01C         	goto	u3870
 12384  00392E                     u3871:
 12385  00392E  EF80  F01C         	goto	l5695
 12386  003932                     u3870:
 12387  003932  0012               	return		;funcret
 12388  003934                     __end_of_dispLCD:
 12389                           	callstack 0
 12390                           
 12391 ;; *************** function _dispLCD_lincol *****************
 12392 ;; Defined at:
 12393 ;;		line 150 in file "dispLCD4vias.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;  lin             1    wreg     unsigned char 
 12396 ;;  col             1    2[COMRAM] unsigned char 
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  lin             1    5[COMRAM] unsigned char 
 12399 ;;  aux             1    6[COMRAM] unsigned char 
 12400 ;; Return value:  Size  Location     Type
 12401 ;;                  1    wreg      void 
 12402 ;; Registers used:
 12403 ;;		wreg, status,2, status,0, cstack
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12409 ;;      Params:         1       0       0       0       0       0       0       0       0
 12410 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12411 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12412 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12413 ;;Total ram usage:        5 bytes
 12414 ;; Hardware stack levels used:    1
 12415 ;; Hardware stack levels required when called:    3
 12416 ;; This function calls:
 12417 ;;		_dispLCD_instReg
 12418 ;; This function is called by:
 12419 ;;		_dispLCD
 12420 ;;		_dispLCD_num
 12421 ;;		_dispLCD_str
 12422 ;;		_fifo_print
 12423 ;;		_printExec
 12424 ;;		_main
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           	psect	text54
 12429  003530                     __ptext54:
 12430                           	callstack 0
 12431  003530                     _dispLCD_lincol:
 12432                           	callstack 25
 12433                           
 12434                           ;incstack = 0
 12435                           ;dispLCD_lincol@lin stored from wreg
 12436  003530  6E36               	movwf	dispLCD_lincol@lin^0,c
 12437  003532                     
 12438                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
 12439  003532  0E00               	movlw	0
 12440  003534  6E37               	movwf	dispLCD_lincol@aux^0,c
 12441                           
 12442                           ;dispLCD4vias.c: 154:     switch(lin)
 12443  003536  EFA9  F01A         	goto	l5145
 12444  00353A                     l5137:
 12445  00353A  0E40               	movlw	64
 12446  00353C  6E37               	movwf	dispLCD_lincol@aux^0,c
 12447  00353E  EFC2  F01A         	goto	l5147
 12448  003542                     l5139:
 12449  003542  0E14               	movlw	20
 12450  003544  6E37               	movwf	dispLCD_lincol@aux^0,c
 12451  003546  EFC2  F01A         	goto	l5147
 12452  00354A                     l5141:
 12453  00354A  0E54               	movlw	84
 12454  00354C  6E37               	movwf	dispLCD_lincol@aux^0,c
 12455  00354E  EFC2  F01A         	goto	l5147
 12456  003552                     l5145:
 12457  003552  5036               	movf	dispLCD_lincol@lin^0,w,c
 12458  003554  6E34               	movwf	??_dispLCD_lincol^0,c
 12459  003556  6A35               	clrf	(??_dispLCD_lincol+1)^0,c
 12460                           
 12461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12462                           ; Switch size 1, requested type "simple"
 12463                           ; Number of cases is 1, Range of values is 0 to 0
 12464                           ; switch strategies available:
 12465                           ; Name         Instructions Cycles
 12466                           ; simple_byte            4     3 (average)
 12467                           ;	Chosen strategy is simple_byte
 12468  003558  5035               	movf	(??_dispLCD_lincol+1)^0,w,c
 12469  00355A  0A00               	xorlw	0	; case 0
 12470  00355C  B4D8               	btfsc	status,2,c
 12471  00355E  EFB3  F01A         	goto	l8027
 12472  003562  EFC2  F01A         	goto	l5147
 12473  003566                     l8027:
 12474                           
 12475                           ; Switch size 1, requested type "simple"
 12476                           ; Number of cases is 3, Range of values is 1 to 3
 12477                           ; switch strategies available:
 12478                           ; Name         Instructions Cycles
 12479                           ; simple_byte           10     6 (average)
 12480                           ;	Chosen strategy is simple_byte
 12481  003566  5034               	movf	??_dispLCD_lincol^0,w,c
 12482  003568  0A01               	xorlw	1	; case 1
 12483  00356A  B4D8               	btfsc	status,2,c
 12484  00356C  EF9D  F01A         	goto	l5137
 12485  003570  0A03               	xorlw	3	; case 2
 12486  003572  B4D8               	btfsc	status,2,c
 12487  003574  EFA1  F01A         	goto	l5139
 12488  003578  0A01               	xorlw	1	; case 3
 12489  00357A  B4D8               	btfsc	status,2,c
 12490  00357C  EFA5  F01A         	goto	l5141
 12491  003580  EFC2  F01A         	goto	l5147
 12492  003584                     l5147:
 12493                           
 12494                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
 12495  003584  5037               	movf	dispLCD_lincol@aux^0,w,c
 12496  003586  2433               	addwf	dispLCD_lincol@col^0,w,c
 12497  003588  0B7F               	andlw	127
 12498  00358A  0F80               	addlw	128
 12499  00358C  ECA9  F014         	call	_dispLCD_instReg
 12500  003590  0012               	return		;funcret
 12501  003592                     __end_of_dispLCD_lincol:
 12502                           	callstack 0
 12503                           
 12504 ;; *************** function _dispLCD_instReg *****************
 12505 ;; Defined at:
 12506 ;;		line 101 in file "dispLCD4vias.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  i               1    wreg     unsigned char 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  i               1    1[COMRAM] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  1    wreg      void 
 12513 ;; Registers used:
 12514 ;;		wreg, status,2, status,0
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12520 ;;      Params:         0       0       0       0       0       0       0       0       0
 12521 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12522 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12523 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12524 ;;Total ram usage:        2 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    2
 12527 ;; This function calls:
 12528 ;;		Nothing
 12529 ;; This function is called by:
 12530 ;;		_dispLCD_lincol
 12531 ;;		_dispLCD_init
 12532 ;;		_dispLCD_clr
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           	psect	text55
 12537  002952                     __ptext55:
 12538                           	callstack 0
 12539  002952                     _dispLCD_instReg:
 12540                           	callstack 25
 12541                           
 12542                           ;incstack = 0
 12543                           ;dispLCD_instReg@i stored from wreg
 12544  002952  6E32               	movwf	dispLCD_instReg@i^0,c
 12545  002954                     
 12546                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
 12547  002954  9C8A               	bcf	138,6,c	;volatile
 12548  002956                     
 12549                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
 12550  002956  C032  F031         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12551  00295A  3A31               	swapf	??_dispLCD_instReg^0,f,c
 12552  00295C  0E0F               	movlw	15
 12553  00295E  1631               	andwf	??_dispLCD_instReg^0,f,c
 12554  002960  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12555  002962  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12556  002964  508A               	movf	138,w,c	;volatile
 12557  002966  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12558  002968  0BC3               	andlw	-61
 12559  00296A  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12560  00296C  6E8A               	movwf	138,c	;volatile
 12561  00296E                     
 12562                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
 12563  00296E  9E8A               	bcf	138,7,c	;volatile
 12564                           
 12565                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
 12566  002970  0432               	decf	dispLCD_instReg@i^0,w,c
 12567  002972  B4D8               	btfsc	status,2,c
 12568  002974  EFBE  F014         	goto	u3071
 12569  002978  EFC0  F014         	goto	u3070
 12570  00297C                     u3071:
 12571  00297C  EFC9  F014         	goto	l5027
 12572  002980                     u3070:
 12573  002980  0E02               	movlw	2
 12574  002982  1832               	xorwf	dispLCD_instReg@i^0,w,c
 12575  002984  A4D8               	btfss	status,2,c
 12576  002986  EFC7  F014         	goto	u3081
 12577  00298A  EFC9  F014         	goto	u3080
 12578  00298E                     u3081:
 12579  00298E  EFD2  F014         	goto	l5029
 12580  002992                     u3080:
 12581  002992                     l5027:
 12582                           
 12583                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
 12584  002992  0E0D               	movlw	13
 12585  002994  6E31               	movwf	??_dispLCD_instReg^0,c
 12586  002996  0EFC               	movlw	252
 12587  002998                     u5957:
 12588  002998  2EE8               	decfsz	wreg,f,c
 12589  00299A  D7FE               	bra	u5957
 12590  00299C  2E31               	decfsz	??_dispLCD_instReg^0,f,c
 12591  00299E  D7FC               	bra	u5957
 12592  0029A0  EFD6  F014         	goto	l5031
 12593  0029A4                     l5029:
 12594                           
 12595                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12596  0029A4  0E42               	movlw	66
 12597  0029A6                     u5967:
 12598  0029A6  2EE8               	decfsz	wreg,f,c
 12599  0029A8  D7FE               	bra	u5967
 12600  0029AA  D000               	nop2	
 12601  0029AC                     l5031:
 12602                           
 12603                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
 12604  0029AC  8E8A               	bsf	138,7,c	;volatile
 12605  0029AE                     
 12606                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
 12607  0029AE  5032               	movf	dispLCD_instReg@i^0,w,c
 12608  0029B0  0BF0               	andlw	240
 12609  0029B2  0A20               	xorlw	32
 12610  0029B4  A4D8               	btfss	status,2,c
 12611  0029B6  EFDF  F014         	goto	u3091
 12612  0029BA  EFE1  F014         	goto	u3090
 12613  0029BE                     u3091:
 12614  0029BE  EFF4  F014         	goto	l5045
 12615  0029C2                     u3090:
 12616  0029C2                     
 12617                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
 12618  0029C2  9C8A               	bcf	138,6,c	;volatile
 12619  0029C4                     
 12620                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
 12621  0029C4  C032  F031         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12622  0029C8  3A31               	swapf	??_dispLCD_instReg^0,f,c
 12623  0029CA  0E0F               	movlw	15
 12624  0029CC  1631               	andwf	??_dispLCD_instReg^0,f,c
 12625  0029CE  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12626  0029D0  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12627  0029D2  508A               	movf	138,w,c	;volatile
 12628  0029D4  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12629  0029D6  0BC3               	andlw	-61
 12630  0029D8  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12631  0029DA  6E8A               	movwf	138,c	;volatile
 12632  0029DC                     
 12633                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
 12634  0029DC  9E8A               	bcf	138,7,c	;volatile
 12635  0029DE                     
 12636                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12637  0029DE  0E42               	movlw	66
 12638  0029E0                     u5977:
 12639  0029E0  2EE8               	decfsz	wreg,f,c
 12640  0029E2  D7FE               	bra	u5977
 12641  0029E4  D000               	nop2	
 12642  0029E6                     
 12643                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
 12644  0029E6  8E8A               	bsf	138,7,c	;volatile
 12645  0029E8                     l5045:
 12646                           
 12647                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
 12648  0029E8  9C8A               	bcf	138,6,c	;volatile
 12649  0029EA                     
 12650                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
 12651  0029EA  C032  F031         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12652  0029EE  0E0F               	movlw	15
 12653  0029F0  1631               	andwf	??_dispLCD_instReg^0,f,c
 12654  0029F2  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12655  0029F4  4631               	rlncf	??_dispLCD_instReg^0,f,c
 12656  0029F6  508A               	movf	138,w,c	;volatile
 12657  0029F8  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12658  0029FA  0BC3               	andlw	-61
 12659  0029FC  1831               	xorwf	??_dispLCD_instReg^0,w,c
 12660  0029FE  6E8A               	movwf	138,c	;volatile
 12661  002A00                     
 12662                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
 12663  002A00  9E8A               	bcf	138,7,c	;volatile
 12664  002A02                     
 12665                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
 12666  002A02  0432               	decf	dispLCD_instReg@i^0,w,c
 12667  002A04  B4D8               	btfsc	status,2,c
 12668  002A06  EF07  F015         	goto	u3101
 12669  002A0A  EF09  F015         	goto	u3100
 12670  002A0E                     u3101:
 12671  002A0E  EF12  F015         	goto	l5055
 12672  002A12                     u3100:
 12673  002A12  0E02               	movlw	2
 12674  002A14  1832               	xorwf	dispLCD_instReg@i^0,w,c
 12675  002A16  A4D8               	btfss	status,2,c
 12676  002A18  EF10  F015         	goto	u3111
 12677  002A1C  EF12  F015         	goto	u3110
 12678  002A20                     u3111:
 12679  002A20  EF1B  F015         	goto	l5057
 12680  002A24                     u3110:
 12681  002A24                     l5055:
 12682                           
 12683                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
 12684  002A24  0E0D               	movlw	13
 12685  002A26  6E31               	movwf	??_dispLCD_instReg^0,c
 12686  002A28  0EFC               	movlw	252
 12687  002A2A                     u5987:
 12688  002A2A  2EE8               	decfsz	wreg,f,c
 12689  002A2C  D7FE               	bra	u5987
 12690  002A2E  2E31               	decfsz	??_dispLCD_instReg^0,f,c
 12691  002A30  D7FC               	bra	u5987
 12692  002A32  EF1F  F015         	goto	l5059
 12693  002A36                     l5057:
 12694                           
 12695                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12696  002A36  0E42               	movlw	66
 12697  002A38                     u5997:
 12698  002A38  2EE8               	decfsz	wreg,f,c
 12699  002A3A  D7FE               	bra	u5997
 12700  002A3C  D000               	nop2	
 12701  002A3E                     l5059:
 12702                           
 12703                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
 12704  002A3E  8E8A               	bsf	138,7,c	;volatile
 12705  002A40  0012               	return		;funcret
 12706  002A42                     __end_of_dispLCD_instReg:
 12707                           	callstack 0
 12708                           
 12709 ;; *************** function _dispLCD_dataReg *****************
 12710 ;; Defined at:
 12711 ;;		line 134 in file "dispLCD4vias.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  d               1    wreg     unsigned char 
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;  d               1    1[COMRAM] unsigned char 
 12716 ;; Return value:  Size  Location     Type
 12717 ;;                  1    wreg      void 
 12718 ;; Registers used:
 12719 ;;		wreg, status,2, status,0
 12720 ;; Tracked objects:
 12721 ;;		On entry : 0/0
 12722 ;;		On exit  : 0/0
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12725 ;;      Params:         0       0       0       0       0       0       0       0       0
 12726 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12727 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12728 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12729 ;;Total ram usage:        2 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    2
 12732 ;; This function calls:
 12733 ;;		Nothing
 12734 ;; This function is called by:
 12735 ;;		_dispLCD
 12736 ;;		_dispLCD_num
 12737 ;;		_dispLCD_str
 12738 ;;		_fifo_print
 12739 ;;		_printExec
 12740 ;;		_main
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           	psect	text56
 12745  003856                     __ptext56:
 12746                           	callstack 0
 12747  003856                     _dispLCD_dataReg:
 12748                           	callstack 26
 12749                           
 12750                           ;incstack = 0
 12751                           ;dispLCD_dataReg@d stored from wreg
 12752  003856  6E32               	movwf	dispLCD_dataReg@d^0,c
 12753  003858                     
 12754                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
 12755  003858  8C8A               	bsf	138,6,c	;volatile
 12756  00385A                     
 12757                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
 12758  00385A  C032  F031         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 12759  00385E  3A31               	swapf	??_dispLCD_dataReg^0,f,c
 12760  003860  0E0F               	movlw	15
 12761  003862  1631               	andwf	??_dispLCD_dataReg^0,f,c
 12762  003864  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12763  003866  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12764  003868  508A               	movf	138,w,c	;volatile
 12765  00386A  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12766  00386C  0BC3               	andlw	-61
 12767  00386E  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12768  003870  6E8A               	movwf	138,c	;volatile
 12769  003872                     
 12770                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
 12771  003872  9E8A               	bcf	138,7,c	;volatile
 12772  003874                     
 12773                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12774  003874  0E42               	movlw	66
 12775  003876                     u6007:
 12776  003876  2EE8               	decfsz	wreg,f,c
 12777  003878  D7FE               	bra	u6007
 12778  00387A  D000               	nop2	
 12779  00387C                     
 12780                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
 12781  00387C  8E8A               	bsf	138,7,c	;volatile
 12782  00387E                     
 12783                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
 12784  00387E  8C8A               	bsf	138,6,c	;volatile
 12785  003880                     
 12786                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
 12787  003880  C032  F031         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 12788  003884  0E0F               	movlw	15
 12789  003886  1631               	andwf	??_dispLCD_dataReg^0,f,c
 12790  003888  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12791  00388A  4631               	rlncf	??_dispLCD_dataReg^0,f,c
 12792  00388C  508A               	movf	138,w,c	;volatile
 12793  00388E  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12794  003890  0BC3               	andlw	-61
 12795  003892  1831               	xorwf	??_dispLCD_dataReg^0,w,c
 12796  003894  6E8A               	movwf	138,c	;volatile
 12797  003896                     
 12798                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
 12799  003896  9E8A               	bcf	138,7,c	;volatile
 12800                           
 12801                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12802  003898  0E42               	movlw	66
 12803  00389A                     u6017:
 12804  00389A  2EE8               	decfsz	wreg,f,c
 12805  00389C  D7FE               	bra	u6017
 12806  00389E  D000               	nop2	
 12807  0038A0                     
 12808                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
 12809  0038A0  8E8A               	bsf	138,7,c	;volatile
 12810  0038A2  0012               	return		;funcret
 12811  0038A4                     __end_of_dispLCD_dataReg:
 12812                           	callstack 0
 12813                           
 12814 ;; *************** function _dignum_conc *****************
 12815 ;; Defined at:
 12816 ;;		line 460 in file "fifo.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;  dig             1    wreg     unsigned char 
 12819 ;;  ptrNum          2    6[COMRAM] PTR unsigned int 
 12820 ;;		 -> main@ciclos(2), main@num(2), 
 12821 ;; Auto vars:     Size  Location     Type
 12822 ;;  dig             1   10[COMRAM] unsigned char 
 12823 ;; Return value:  Size  Location     Type
 12824 ;;                  1    wreg      void 
 12825 ;; Registers used:
 12826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12827 ;; Tracked objects:
 12828 ;;		On entry : 0/0
 12829 ;;		On exit  : 0/0
 12830 ;;		Unchanged: 0/0
 12831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12832 ;;      Params:         2       0       0       0       0       0       0       0       0
 12833 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12834 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12835 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12836 ;;Total ram usage:        5 bytes
 12837 ;; Hardware stack levels used:    1
 12838 ;; Hardware stack levels required when called:    3
 12839 ;; This function calls:
 12840 ;;		___wmul
 12841 ;; This function is called by:
 12842 ;;		_main
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           	psect	text57
 12847  003934                     __ptext57:
 12848                           	callstack 0
 12849  003934                     _dignum_conc:
 12850                           	callstack 27
 12851                           
 12852                           ;incstack = 0
 12853                           ;dignum_conc@dig stored from wreg
 12854  003934  6E3B               	movwf	dignum_conc@dig^0,c
 12855  003936                     
 12856                           ;fifo.c: 460: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 461: {;fifo.c: 
      +                          462:     *ptrNum = (*ptrNum * 10) + (dig - '0');
 12857  003936  0ED0               	movlw	208
 12858  003938  6E39               	movwf	??_dignum_conc^0,c
 12859  00393A  0EFF               	movlw	255
 12860  00393C  6E3A               	movwf	(??_dignum_conc+1)^0,c
 12861  00393E  C037  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12862  003942  C038  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12863  003946  CFDE F031          	movff	postinc2,___wmul@multiplier
 12864  00394A  CFDD F032          	movff	postdec2,___wmul@multiplier+1
 12865  00394E  0E00               	movlw	0
 12866  003950  6E34               	movwf	(___wmul@multiplicand+1)^0,c
 12867  003952  0E0A               	movlw	10
 12868  003954  6E33               	movwf	___wmul@multiplicand^0,c
 12869  003956  ECA3  F01E         	call	___wmul	;wreg free
 12870  00395A  503B               	movf	dignum_conc@dig^0,w,c
 12871  00395C  2631               	addwf	?___wmul^0,f,c
 12872  00395E  0E00               	movlw	0
 12873  003960  2232               	addwfc	(?___wmul+1)^0,f,c
 12874  003962  5039               	movf	??_dignum_conc^0,w,c
 12875  003964  2631               	addwf	?___wmul^0,f,c
 12876  003966  503A               	movf	(??_dignum_conc+1)^0,w,c
 12877  003968  2232               	addwfc	(?___wmul+1)^0,f,c
 12878  00396A  C037  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12879  00396E  C038  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12880  003972  C031  FFDE         	movff	?___wmul,postinc2
 12881  003976  C032  FFDD         	movff	?___wmul+1,postdec2
 12882  00397A  0012               	return		;funcret
 12883  00397C                     __end_of_dignum_conc:
 12884                           	callstack 0
 12885                           
 12886 ;; *************** function ___wmul *****************
 12887 ;; Defined at:
 12888 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;  multiplier      2    0[COMRAM] unsigned int 
 12891 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;  product         2    4[COMRAM] unsigned int 
 12894 ;; Return value:  Size  Location     Type
 12895 ;;                  2    0[COMRAM] unsigned int 
 12896 ;; Registers used:
 12897 ;;		wreg, status,2, status,0, prodl, prodh
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12903 ;;      Params:         4       0       0       0       0       0       0       0       0
 12904 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12906 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12907 ;;Total ram usage:        6 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    2
 12910 ;; This function calls:
 12911 ;;		Nothing
 12912 ;; This function is called by:
 12913 ;;		_dignum_conc
 12914 ;;		_main
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           	psect	text58
 12919  003D46                     __ptext58:
 12920                           	callstack 0
 12921  003D46                     ___wmul:
 12922                           	callstack 27
 12923  003D46  5031               	movf	___wmul@multiplier^0,w,c
 12924  003D48  0233               	mulwf	___wmul@multiplicand^0,c
 12925  003D4A  CFF3 F035          	movff	prodl,___wmul@product
 12926  003D4E  CFF4 F036          	movff	prodh,___wmul@product+1
 12927  003D52  5031               	movf	___wmul@multiplier^0,w,c
 12928  003D54  0234               	mulwf	(___wmul@multiplicand+1)^0,c
 12929  003D56  50F3               	movf	243,w,c
 12930  003D58  2636               	addwf	(___wmul@product+1)^0,f,c
 12931  003D5A  5032               	movf	(___wmul@multiplier+1)^0,w,c
 12932  003D5C  0233               	mulwf	___wmul@multiplicand^0,c
 12933  003D5E  50F3               	movf	243,w,c
 12934  003D60  2636               	addwf	(___wmul@product+1)^0,f,c
 12935  003D62  C035  F031         	movff	___wmul@product,?___wmul
 12936  003D66  C036  F032         	movff	___wmul@product+1,?___wmul+1
 12937  003D6A  0012               	return		;funcret
 12938  003D6C                     __end_of___wmul:
 12939                           	callstack 0
 12940                           
 12941 ;; *************** function _dignum_apagar *****************
 12942 ;; Defined at:
 12943 ;;		line 465 in file "fifo.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;  ptrNum          2    7[COMRAM] PTR unsigned int 
 12946 ;;		 -> main@ciclos(2), main@num(2), 
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;		None
 12949 ;; Return value:  Size  Location     Type
 12950 ;;                  1    wreg      void 
 12951 ;; Registers used:
 12952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : 0/0
 12955 ;;		On exit  : 0/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12958 ;;      Params:         2       0       0       0       0       0       0       0       0
 12959 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12961 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12962 ;;Total ram usage:        2 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    3
 12965 ;; This function calls:
 12966 ;;		___lwdiv
 12967 ;; This function is called by:
 12968 ;;		_main
 12969 ;; This function uses a non-reentrant model
 12970 ;;
 12971                           
 12972                           	psect	text59
 12973  003C68                     __ptext59:
 12974                           	callstack 0
 12975  003C68                     _dignum_apagar:
 12976                           	callstack 27
 12977  003C68                     
 12978                           ;fifo.c: 465: void dignum_apagar(unsigned int * ptrNum );fifo.c: 466: {;fifo.c: 467:    
      +                           *ptrNum /= 10;
 12979  003C68  C038  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 12980  003C6C  C039  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 12981  003C70  CFDE F031          	movff	postinc2,___lwdiv@dividend
 12982  003C74  CFDD F032          	movff	postdec2,___lwdiv@dividend+1
 12983  003C78  0E00               	movlw	0
 12984  003C7A  6E34               	movwf	(___lwdiv@divisor+1)^0,c
 12985  003C7C  0E0A               	movlw	10
 12986  003C7E  6E33               	movwf	___lwdiv@divisor^0,c
 12987  003C80  ECF2  F019         	call	___lwdiv	;wreg free
 12988  003C84  C038  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 12989  003C88  C039  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 12990  003C8C  C031  FFDE         	movff	?___lwdiv,postinc2
 12991  003C90  C032  FFDD         	movff	?___lwdiv+1,postdec2
 12992  003C94  0012               	return		;funcret
 12993  003C96                     __end_of_dignum_apagar:
 12994                           	callstack 0
 12995                           
 12996 ;; *************** function ___lwdiv *****************
 12997 ;; Defined at:
 12998 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  dividend        2    0[COMRAM] unsigned int 
 13001 ;;  divisor         2    2[COMRAM] unsigned int 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  quotient        2    4[COMRAM] unsigned int 
 13004 ;;  counter         1    6[COMRAM] unsigned char 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  2    0[COMRAM] unsigned int 
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13014 ;;      Params:         4       0       0       0       0       0       0       0       0
 13015 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13017 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13018 ;;Total ram usage:        7 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    2
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		_dignum_apagar
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           	psect	text60
 13029  0033E4                     __ptext60:
 13030                           	callstack 0
 13031  0033E4                     ___lwdiv:
 13032                           	callstack 27
 13033  0033E4  0E00               	movlw	0
 13034  0033E6  6E36               	movwf	(___lwdiv@quotient+1)^0,c
 13035  0033E8  0E00               	movlw	0
 13036  0033EA  6E35               	movwf	___lwdiv@quotient^0,c
 13037  0033EC  5033               	movf	___lwdiv@divisor^0,w,c
 13038  0033EE  1034               	iorwf	(___lwdiv@divisor+1)^0,w,c
 13039  0033F0  B4D8               	btfsc	status,2,c
 13040  0033F2  EFFD  F019         	goto	u3841
 13041  0033F6  EFFF  F019         	goto	u3840
 13042  0033FA                     u3841:
 13043  0033FA  EF27  F01A         	goto	l1741
 13044  0033FE                     u3840:
 13045  0033FE  0E01               	movlw	1
 13046  003400  6E37               	movwf	___lwdiv@counter^0,c
 13047  003402  EF07  F01A         	goto	l5577
 13048  003406                     l5575:
 13049  003406  90D8               	bcf	status,0,c
 13050  003408  3633               	rlcf	___lwdiv@divisor^0,f,c
 13051  00340A  3634               	rlcf	(___lwdiv@divisor+1)^0,f,c
 13052  00340C  2A37               	incf	___lwdiv@counter^0,f,c
 13053  00340E                     l5577:
 13054  00340E  AE34               	btfss	(___lwdiv@divisor+1)^0,7,c
 13055  003410  EF0C  F01A         	goto	u3851
 13056  003414  EF0E  F01A         	goto	u3850
 13057  003418                     u3851:
 13058  003418  EF03  F01A         	goto	l5575
 13059  00341C                     u3850:
 13060  00341C                     l5579:
 13061  00341C  90D8               	bcf	status,0,c
 13062  00341E  3635               	rlcf	___lwdiv@quotient^0,f,c
 13063  003420  3636               	rlcf	(___lwdiv@quotient+1)^0,f,c
 13064  003422  5033               	movf	___lwdiv@divisor^0,w,c
 13065  003424  5C31               	subwf	___lwdiv@dividend^0,w,c
 13066  003426  5034               	movf	(___lwdiv@divisor+1)^0,w,c
 13067  003428  5832               	subwfb	(___lwdiv@dividend+1)^0,w,c
 13068  00342A  A0D8               	btfss	status,0,c
 13069  00342C  EF1A  F01A         	goto	u3861
 13070  003430  EF1C  F01A         	goto	u3860
 13071  003434                     u3861:
 13072  003434  EF21  F01A         	goto	l5587
 13073  003438                     u3860:
 13074  003438  5033               	movf	___lwdiv@divisor^0,w,c
 13075  00343A  5E31               	subwf	___lwdiv@dividend^0,f,c
 13076  00343C  5034               	movf	(___lwdiv@divisor+1)^0,w,c
 13077  00343E  5A32               	subwfb	(___lwdiv@dividend+1)^0,f,c
 13078  003440  8035               	bsf	___lwdiv@quotient^0,0,c
 13079  003442                     l5587:
 13080  003442  90D8               	bcf	status,0,c
 13081  003444  3234               	rrcf	(___lwdiv@divisor+1)^0,f,c
 13082  003446  3233               	rrcf	___lwdiv@divisor^0,f,c
 13083  003448  2E37               	decfsz	___lwdiv@counter^0,f,c
 13084  00344A  EF0E  F01A         	goto	l5579
 13085  00344E                     l1741:
 13086  00344E  C035  F031         	movff	___lwdiv@quotient,?___lwdiv
 13087  003452  C036  F032         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13088  003456  0012               	return		;funcret
 13089  003458                     __end_of___lwdiv:
 13090                           	callstack 0
 13091                           
 13092 ;; *************** function _deletar_receita *****************
 13093 ;; Defined at:
 13094 ;;		line 77 in file "eeprom.c"
 13095 ;; Parameters:    Size  Location     Type
 13096 ;;  receita         1    wreg     unsigned char 
 13097 ;; Auto vars:     Size  Location     Type
 13098 ;;  receita         1    6[COMRAM] unsigned char 
 13099 ;;  i               1    7[COMRAM] unsigned char 
 13100 ;;  aux             2    4[COMRAM] int 
 13101 ;; Return value:  Size  Location     Type
 13102 ;;                  1    wreg      void 
 13103 ;; Registers used:
 13104 ;;		wreg, status,2, status,0, cstack
 13105 ;; Tracked objects:
 13106 ;;		On entry : 0/0
 13107 ;;		On exit  : 0/0
 13108 ;;		Unchanged: 0/0
 13109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13110 ;;      Params:         0       0       0       0       0       0       0       0       0
 13111 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13112 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13113 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13114 ;;Total ram usage:        4 bytes
 13115 ;; Hardware stack levels used:    1
 13116 ;; Hardware stack levels required when called:    3
 13117 ;; This function calls:
 13118 ;;		_EEPROM_write
 13119 ;;		_end_receita
 13120 ;; This function is called by:
 13121 ;;		_main
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           	psect	text61
 13126  003B36                     __ptext61:
 13127                           	callstack 0
 13128  003B36                     _deletar_receita:
 13129                           	callstack 27
 13130                           
 13131                           ;incstack = 0
 13132                           ;deletar_receita@receita stored from wreg
 13133  003B36  6E37               	movwf	deletar_receita@receita^0,c
 13134  003B38                     
 13135                           ;eeprom.c: 77: void deletar_receita (char receita);eeprom.c: 78: {;eeprom.c: 79:    int 
      +                          aux;;eeprom.c: 80:    aux = end_receita(receita);
 13136  003B38  C037  F031         	movff	deletar_receita@receita,end_receita@x
 13137  003B3C  6A32               	clrf	(end_receita@x+1)^0,c
 13138  003B3E  ECB6  F01E         	call	_end_receita	;wreg free
 13139  003B42  C031  F035         	movff	?_end_receita,deletar_receita@aux
 13140  003B46  C032  F036         	movff	?_end_receita+1,deletar_receita@aux+1
 13141  003B4A                     
 13142                           ;eeprom.c: 81:    for( char i=0 ; i<16; i++)
 13143  003B4A  0E00               	movlw	0
 13144  003B4C  6E38               	movwf	deletar_receita@i^0,c
 13145  003B4E                     l5761:
 13146                           
 13147                           ;eeprom.c: 82:         EEPROM_write((aux+i),0);
 13148  003B4E  0E00               	movlw	0
 13149  003B50  6E31               	movwf	EEPROM_write@data^0,c
 13150  003B52  5038               	movf	deletar_receita@i^0,w,c
 13151  003B54  2435               	addwf	deletar_receita@aux^0,w,c
 13152  003B56  EC4B  F01E         	call	_EEPROM_write
 13153  003B5A  2A38               	incf	deletar_receita@i^0,f,c
 13154  003B5C  0E0F               	movlw	15
 13155  003B5E  6438               	cpfsgt	deletar_receita@i^0,c
 13156  003B60  EFB4  F01D         	goto	u3921
 13157  003B64  EFB6  F01D         	goto	u3920
 13158  003B68                     u3921:
 13159  003B68  EFA7  F01D         	goto	l5761
 13160  003B6C                     u3920:
 13161  003B6C  0012               	return		;funcret
 13162  003B6E                     __end_of_deletar_receita:
 13163                           	callstack 0
 13164                           
 13165 ;; *************** function _EEPROM_write *****************
 13166 ;; Defined at:
 13167 ;;		line 24 in file "eeprom.c"
 13168 ;; Parameters:    Size  Location     Type
 13169 ;;  addr            1    wreg     unsigned char 
 13170 ;;  data            1    0[COMRAM] unsigned char 
 13171 ;; Auto vars:     Size  Location     Type
 13172 ;;  addr            1    1[COMRAM] unsigned char 
 13173 ;; Return value:  Size  Location     Type
 13174 ;;                  1    wreg      void 
 13175 ;; Registers used:
 13176 ;;		wreg, status,2
 13177 ;; Tracked objects:
 13178 ;;		On entry : 0/0
 13179 ;;		On exit  : 0/0
 13180 ;;		Unchanged: 0/0
 13181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13182 ;;      Params:         1       0       0       0       0       0       0       0       0
 13183 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13184 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13185 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13186 ;;Total ram usage:        2 bytes
 13187 ;; Hardware stack levels used:    1
 13188 ;; Hardware stack levels required when called:    2
 13189 ;; This function calls:
 13190 ;;		Nothing
 13191 ;; This function is called by:
 13192 ;;		_salvar_receita
 13193 ;;		_salvar_dado
 13194 ;;		_deletar_receita
 13195 ;;		_formatar_receitas
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199                           	psect	text62
 13200  003C96                     __ptext62:
 13201                           	callstack 0
 13202  003C96                     _EEPROM_write:
 13203                           	callstack 27
 13204                           
 13205                           ;incstack = 0
 13206                           ;EEPROM_write@addr stored from wreg
 13207  003C96  6E32               	movwf	EEPROM_write@addr^0,c
 13208  003C98                     
 13209                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
 13210  003C98  9EF2               	bcf	242,7,c	;volatile
 13211  003C9A                     
 13212                           ;eeprom.c: 27:     EEADR = addr;
 13213  003C9A  C032  FFA9         	movff	EEPROM_write@addr,4009	;volatile
 13214  003C9E                     
 13215                           ;eeprom.c: 28:     EEDATA = data;
 13216  003C9E  C031  FFA8         	movff	EEPROM_write@data,4008	;volatile
 13217  003CA2                     
 13218                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
 13219  003CA2  9EA6               	bcf	166,7,c	;volsfr
 13220  003CA4                     
 13221                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
 13222  003CA4  84A6               	bsf	166,2,c	;volsfr
 13223  003CA6                     
 13224                           ;eeprom.c: 31:     EECON2 = 0x55;
 13225  003CA6  0E55               	movlw	85
 13226  003CA8  6EA7               	movwf	167,c	;volsfr
 13227  003CAA                     
 13228                           ;eeprom.c: 32:     EECON2 = 0xAA;
 13229  003CAA  0EAA               	movlw	170
 13230  003CAC  6EA7               	movwf	167,c	;volsfr
 13231  003CAE                     
 13232                           ;eeprom.c: 33:     EECON1bits.WR = 1;
 13233  003CAE  82A6               	bsf	166,1,c	;volsfr
 13234  003CB0                     l155:
 13235  003CB0  B2A6               	btfsc	166,1,c	;volsfr
 13236  003CB2  EF5D  F01E         	goto	u3451
 13237  003CB6  EF5F  F01E         	goto	u3450
 13238  003CBA                     u3451:
 13239  003CBA  EF58  F01E         	goto	l155
 13240  003CBE                     u3450:
 13241  003CBE                     
 13242                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
 13243  003CBE  94A6               	bcf	166,2,c	;volsfr
 13244                           
 13245                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
 13246  003CC0  8EF2               	bsf	242,7,c	;volatile
 13247  003CC2  0012               	return		;funcret
 13248  003CC4                     __end_of_EEPROM_write:
 13249                           	callstack 0
 13250                           
 13251 ;; *************** function _buscar_receita *****************
 13252 ;; Defined at:
 13253 ;;		line 55 in file "eeprom.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  adrs            1    wreg     unsigned char 
 13256 ;;  data            2    6[COMRAM] PTR unsigned char 
 13257 ;;		 -> main@vetor_aux(16), 
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;  adrs            1   10[COMRAM] unsigned char 
 13260 ;;  i               1   11[COMRAM] unsigned char 
 13261 ;;  aux             2    8[COMRAM] int 
 13262 ;; Return value:  Size  Location     Type
 13263 ;;                  1    wreg      void 
 13264 ;; Registers used:
 13265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13271 ;;      Params:         2       0       0       0       0       0       0       0       0
 13272 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13273 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13274 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13275 ;;Total ram usage:        6 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:    3
 13278 ;; This function calls:
 13279 ;;		_EEPROM_read
 13280 ;;		_end_receita
 13281 ;; This function is called by:
 13282 ;;		_main
 13283 ;; This function uses a non-reentrant model
 13284 ;;
 13285                           
 13286                           	psect	text63
 13287  003A08                     __ptext63:
 13288                           	callstack 0
 13289  003A08                     _buscar_receita:
 13290                           	callstack 27
 13291                           
 13292                           ;incstack = 0
 13293                           ;buscar_receita@adrs stored from wreg
 13294  003A08  6E3B               	movwf	buscar_receita@adrs^0,c
 13295  003A0A                     
 13296                           ;eeprom.c: 55: void buscar_receita (char adrs, unsigned char * data );eeprom.c: 56: {;ee
      +                          prom.c: 57:     int aux;;eeprom.c: 58:     aux = end_receita(adrs);
 13297  003A0A  C03B  F031         	movff	buscar_receita@adrs,end_receita@x
 13298  003A0E  6A32               	clrf	(end_receita@x+1)^0,c
 13299  003A10  ECB6  F01E         	call	_end_receita	;wreg free
 13300  003A14  C031  F039         	movff	?_end_receita,buscar_receita@aux
 13301  003A18  C032  F03A         	movff	?_end_receita+1,buscar_receita@aux+1
 13302  003A1C                     
 13303                           ;eeprom.c: 59:     for( char i=0; i<16; i++ )
 13304  003A1C  0E00               	movlw	0
 13305  003A1E  6E3C               	movwf	buscar_receita@i^0,c
 13306  003A20                     l5741:
 13307                           
 13308                           ;eeprom.c: 60:        *(data+i) = EEPROM_read(aux+i);
 13309  003A20  503C               	movf	buscar_receita@i^0,w,c
 13310  003A22  2437               	addwf	buscar_receita@data^0,w,c
 13311  003A24  6ED9               	movwf	fsr2l,c
 13312  003A26  0E00               	movlw	0
 13313  003A28  2038               	addwfc	(buscar_receita@data+1)^0,w,c
 13314  003A2A  6EDA               	movwf	fsr2h,c
 13315  003A2C  503C               	movf	buscar_receita@i^0,w,c
 13316  003A2E  2439               	addwf	buscar_receita@aux^0,w,c
 13317  003A30  EC87  F01F         	call	_EEPROM_read
 13318  003A34  6EDF               	movwf	indf2,c
 13319  003A36  2A3C               	incf	buscar_receita@i^0,f,c
 13320  003A38  0E0F               	movlw	15
 13321  003A3A  643C               	cpfsgt	buscar_receita@i^0,c
 13322  003A3C  EF22  F01D         	goto	u3911
 13323  003A40  EF24  F01D         	goto	u3910
 13324  003A44                     u3911:
 13325  003A44  EF10  F01D         	goto	l5741
 13326  003A48                     u3910:
 13327  003A48  0012               	return		;funcret
 13328  003A4A                     __end_of_buscar_receita:
 13329                           	callstack 0
 13330                           
 13331 ;; *************** function _buscar_dado *****************
 13332 ;; Defined at:
 13333 ;;		line 70 in file "eeprom.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;  adrs            1    wreg     unsigned char 
 13336 ;;  col             1    6[COMRAM] unsigned char 
 13337 ;;  data            2    7[COMRAM] PTR unsigned char 
 13338 ;;		 -> main@init_cond(1), 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  adrs            1   11[COMRAM] unsigned char 
 13341 ;;  aux             2    9[COMRAM] int 
 13342 ;; Return value:  Size  Location     Type
 13343 ;;                  1    wreg      void 
 13344 ;; Registers used:
 13345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13346 ;; Tracked objects:
 13347 ;;		On entry : 0/0
 13348 ;;		On exit  : 0/0
 13349 ;;		Unchanged: 0/0
 13350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13351 ;;      Params:         3       0       0       0       0       0       0       0       0
 13352 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13353 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13354 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13355 ;;Total ram usage:        6 bytes
 13356 ;; Hardware stack levels used:    1
 13357 ;; Hardware stack levels required when called:    3
 13358 ;; This function calls:
 13359 ;;		_EEPROM_read
 13360 ;;		_end_receita
 13361 ;; This function is called by:
 13362 ;;		_main
 13363 ;; This function uses a non-reentrant model
 13364 ;;
 13365                           
 13366                           	psect	text64
 13367  003D1E                     __ptext64:
 13368                           	callstack 0
 13369  003D1E                     _buscar_dado:
 13370                           	callstack 27
 13371                           
 13372                           ;incstack = 0
 13373                           ;buscar_dado@adrs stored from wreg
 13374  003D1E  6E3C               	movwf	buscar_dado@adrs^0,c
 13375  003D20                     
 13376                           ;eeprom.c: 70: void buscar_dado (char adrs, char col, unsigned char *data);eeprom.c: 71:
      +                           {;eeprom.c: 72:     int aux;;eeprom.c: 73:     aux = end_receita(adrs);
 13377  003D20  C03C  F031         	movff	buscar_dado@adrs,end_receita@x
 13378  003D24  6A32               	clrf	(end_receita@x+1)^0,c
 13379  003D26  ECB6  F01E         	call	_end_receita	;wreg free
 13380  003D2A  C031  F03A         	movff	?_end_receita,buscar_dado@aux
 13381  003D2E  C032  F03B         	movff	?_end_receita+1,buscar_dado@aux+1
 13382  003D32                     
 13383                           ;eeprom.c: 74:     *data = EEPROM_read((aux+col));
 13384  003D32  5037               	movf	buscar_dado@col^0,w,c
 13385  003D34  243A               	addwf	buscar_dado@aux^0,w,c
 13386  003D36  EC87  F01F         	call	_EEPROM_read
 13387  003D3A  C038  FFD9         	movff	buscar_dado@data,fsr2l
 13388  003D3E  C039  FFDA         	movff	buscar_dado@data+1,fsr2h
 13389  003D42  6EDF               	movwf	indf2,c
 13390  003D44  0012               	return		;funcret
 13391  003D46                     __end_of_buscar_dado:
 13392                           	callstack 0
 13393                           
 13394 ;; *************** function _end_receita *****************
 13395 ;; Defined at:
 13396 ;;		line 41 in file "eeprom.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;  x               2    0[COMRAM] int 
 13399 ;; Auto vars:     Size  Location     Type
 13400 ;;		None
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  2    0[COMRAM] int 
 13403 ;; Registers used:
 13404 ;;		wreg, status,2, status,0
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13410 ;;      Params:         2       0       0       0       0       0       0       0       0
 13411 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13412 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13413 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13414 ;;Total ram usage:        4 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    2
 13417 ;; This function calls:
 13418 ;;		Nothing
 13419 ;; This function is called by:
 13420 ;;		_salvar_receita
 13421 ;;		_buscar_receita
 13422 ;;		_salvar_dado
 13423 ;;		_buscar_dado
 13424 ;;		_deletar_receita
 13425 ;;		_receita_livre
 13426 ;; This function uses a non-reentrant model
 13427 ;;
 13428                           
 13429                           	psect	text65
 13430  003D6C                     __ptext65:
 13431                           	callstack 0
 13432  003D6C                     _end_receita:
 13433                           	callstack 27
 13434  003D6C                     
 13435                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
 13436  003D6C  C031  F033         	movff	end_receita@x,??_end_receita
 13437  003D70  C032  F034         	movff	end_receita@x+1,??_end_receita+1
 13438  003D74  3A33               	swapf	??_end_receita^0,f,c
 13439  003D76  3A34               	swapf	(??_end_receita+1)^0,f,c
 13440  003D78  0EF0               	movlw	240
 13441  003D7A  1634               	andwf	(??_end_receita+1)^0,f,c
 13442  003D7C  5033               	movf	??_end_receita^0,w,c
 13443  003D7E  0B0F               	andlw	15
 13444  003D80  1234               	iorwf	(??_end_receita+1)^0,f,c
 13445  003D82  0EF0               	movlw	240
 13446  003D84  1633               	andwf	??_end_receita^0,f,c
 13447  003D86  C033  F031         	movff	??_end_receita,?_end_receita
 13448  003D8A  C034  F032         	movff	??_end_receita+1,?_end_receita+1
 13449  003D8E  0012               	return		;funcret
 13450  003D90                     __end_of_end_receita:
 13451                           	callstack 0
 13452                           
 13453 ;; *************** function _EEPROM_read *****************
 13454 ;; Defined at:
 13455 ;;		line 14 in file "eeprom.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;  addr            1    wreg     unsigned char 
 13458 ;; Auto vars:     Size  Location     Type
 13459 ;;  addr            1    0[COMRAM] unsigned char 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  1    wreg      unsigned char 
 13462 ;; Registers used:
 13463 ;;		wreg, status,2
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13469 ;;      Params:         0       0       0       0       0       0       0       0       0
 13470 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13471 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13472 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13473 ;;Total ram usage:        1 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:    2
 13476 ;; This function calls:
 13477 ;;		Nothing
 13478 ;; This function is called by:
 13479 ;;		_buscar_receita
 13480 ;;		_buscar_dado
 13481 ;;		_receita_livre
 13482 ;; This function uses a non-reentrant model
 13483 ;;
 13484                           
 13485                           	psect	text66
 13486  003F0E                     __ptext66:
 13487                           	callstack 0
 13488  003F0E                     _EEPROM_read:
 13489                           	callstack 27
 13490                           
 13491                           ;incstack = 0
 13492                           ;EEPROM_read@addr stored from wreg
 13493  003F0E  6E31               	movwf	EEPROM_read@addr^0,c
 13494  003F10                     
 13495                           ;eeprom.c: 14: char EEPROM_read( unsigned char addr );eeprom.c: 15: {;eeprom.c: 17:     
      +                          EEADR = addr;
 13496  003F10  C031  FFA9         	movff	EEPROM_read@addr,4009	;volatile
 13497  003F14                     
 13498                           ;eeprom.c: 18:     EECON1bits.EEPGD = 0;
 13499  003F14  9EA6               	bcf	166,7,c	;volsfr
 13500  003F16                     
 13501                           ;eeprom.c: 19:     EECON1bits.RD = 1;
 13502  003F16  80A6               	bsf	166,0,c	;volsfr
 13503  003F18                     
 13504                           ;eeprom.c: 20:     return( EEDATA );
 13505  003F18  50A8               	movf	168,w,c	;volatile
 13506  003F1A  0012               	return		;funcret
 13507  003F1C                     __end_of_EEPROM_read:
 13508                           	callstack 0
 13509                           
 13510 ;; *************** function _addIndicePassos *****************
 13511 ;; Defined at:
 13512 ;;		line 19 in file "fifo.c"
 13513 ;; Parameters:    Size  Location     Type
 13514 ;;		None
 13515 ;; Auto vars:     Size  Location     Type
 13516 ;;		None
 13517 ;; Return value:  Size  Location     Type
 13518 ;;                  1    wreg      void 
 13519 ;; Registers used:
 13520 ;;		wreg, status,2, status,0
 13521 ;; Tracked objects:
 13522 ;;		On entry : 0/0
 13523 ;;		On exit  : 0/0
 13524 ;;		Unchanged: 0/0
 13525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13526 ;;      Params:         0       0       0       0       0       0       0       0       0
 13527 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13528 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13529 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13530 ;;Total ram usage:        0 bytes
 13531 ;; Hardware stack levels used:    1
 13532 ;; Hardware stack levels required when called:    2
 13533 ;; This function calls:
 13534 ;;		Nothing
 13535 ;; This function is called by:
 13536 ;;		_main
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           	psect	text67
 13541  003E38                     __ptext67:
 13542                           	callstack 0
 13543  003E38                     _addIndicePassos:
 13544                           	callstack 28
 13545  003E38                     
 13546                           ;fifo.c: 21:     if(indice_passos < ind_fila)
 13547  003E38  505D               	movf	_ind_fila^0,w,c
 13548  003E3A  5C5B               	subwf	_indice_passos^0,w,c
 13549  003E3C  B0D8               	btfsc	status,0,c
 13550  003E3E  EF23  F01F         	goto	u3931
 13551  003E42  EF25  F01F         	goto	u3930
 13552  003E46                     u3931:
 13553  003E46  EF26  F01F         	goto	l223
 13554  003E4A                     u3930:
 13555  003E4A                     
 13556                           ;fifo.c: 22:         indice_passos++;
 13557  003E4A  2A5B               	incf	_indice_passos^0,f,c
 13558  003E4C                     l223:
 13559  003E4C  0012               	return		;funcret
 13560  003E4E                     __end_of_addIndicePassos:
 13561                           	callstack 0
 13562                           
 13563 ;; *************** function _addContCiclos *****************
 13564 ;; Defined at:
 13565 ;;		line 59 in file "fifo.c"
 13566 ;; Parameters:    Size  Location     Type
 13567 ;;		None
 13568 ;; Auto vars:     Size  Location     Type
 13569 ;;		None
 13570 ;; Return value:  Size  Location     Type
 13571 ;;                  1    wreg      void 
 13572 ;; Registers used:
 13573 ;;		status,2, status,0
 13574 ;; Tracked objects:
 13575 ;;		On entry : 0/0
 13576 ;;		On exit  : 0/0
 13577 ;;		Unchanged: 0/0
 13578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13579 ;;      Params:         0       0       0       0       0       0       0       0       0
 13580 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13581 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13582 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13583 ;;Total ram usage:        0 bytes
 13584 ;; Hardware stack levels used:    1
 13585 ;; Hardware stack levels required when called:    2
 13586 ;; This function calls:
 13587 ;;		Nothing
 13588 ;; This function is called by:
 13589 ;;		_main
 13590 ;; This function uses a non-reentrant model
 13591 ;;
 13592                           
 13593                           	psect	text68
 13594  003F74                     __ptext68:
 13595                           	callstack 0
 13596  003F74                     _addContCiclos:
 13597                           	callstack 28
 13598  003F74                     
 13599                           ;fifo.c: 61:     cont_ciclos++;
 13600  003F74  4A17               	infsnz	_cont_ciclos^0,f,c
 13601  003F76  2A18               	incf	(_cont_ciclos+1)^0,f,c
 13602  003F78  0012               	return		;funcret
 13603  003F7A                     __end_of_addContCiclos:
 13604                           	callstack 0
 13605                           
 13606 ;; *************** function ___lmul *****************
 13607 ;; Defined at:
 13608 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul32.c"
 13609 ;; Parameters:    Size  Location     Type
 13610 ;;  multiplier      4    0[COMRAM] unsigned long 
 13611 ;;  multiplicand    4    4[COMRAM] unsigned long 
 13612 ;; Auto vars:     Size  Location     Type
 13613 ;;  product         4    8[COMRAM] unsigned long 
 13614 ;; Return value:  Size  Location     Type
 13615 ;;                  4    0[COMRAM] unsigned long 
 13616 ;; Registers used:
 13617 ;;		wreg, status,2, status,0
 13618 ;; Tracked objects:
 13619 ;;		On entry : 0/0
 13620 ;;		On exit  : 0/0
 13621 ;;		Unchanged: 0/0
 13622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13623 ;;      Params:         8       0       0       0       0       0       0       0       0
 13624 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13625 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13626 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13627 ;;Total ram usage:       12 bytes
 13628 ;; Hardware stack levels used:    1
 13629 ;; Hardware stack levels required when called:    2
 13630 ;; This function calls:
 13631 ;;		Nothing
 13632 ;; This function is called by:
 13633 ;;		_main
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           	psect	text69
 13638  0034C6                     __ptext69:
 13639                           	callstack 0
 13640  0034C6                     ___lmul:
 13641                           	callstack 28
 13642  0034C6  0E00               	movlw	0
 13643  0034C8  6E39               	movwf	___lmul@product^0,c
 13644  0034CA  0E00               	movlw	0
 13645  0034CC  6E3A               	movwf	(___lmul@product+1)^0,c
 13646  0034CE  0E00               	movlw	0
 13647  0034D0  6E3B               	movwf	(___lmul@product+2)^0,c
 13648  0034D2  0E00               	movlw	0
 13649  0034D4  6E3C               	movwf	(___lmul@product+3)^0,c
 13650  0034D6                     l6281:
 13651  0034D6  A031               	btfss	___lmul@multiplier^0,0,c
 13652  0034D8  EF70  F01A         	goto	u4491
 13653  0034DC  EF72  F01A         	goto	u4490
 13654  0034E0                     u4491:
 13655  0034E0  EF7A  F01A         	goto	l6285
 13656  0034E4                     u4490:
 13657  0034E4  5035               	movf	___lmul@multiplicand^0,w,c
 13658  0034E6  2639               	addwf	___lmul@product^0,f,c
 13659  0034E8  5036               	movf	(___lmul@multiplicand+1)^0,w,c
 13660  0034EA  223A               	addwfc	(___lmul@product+1)^0,f,c
 13661  0034EC  5037               	movf	(___lmul@multiplicand+2)^0,w,c
 13662  0034EE  223B               	addwfc	(___lmul@product+2)^0,f,c
 13663  0034F0  5038               	movf	(___lmul@multiplicand+3)^0,w,c
 13664  0034F2  223C               	addwfc	(___lmul@product+3)^0,f,c
 13665  0034F4                     l6285:
 13666  0034F4  90D8               	bcf	status,0,c
 13667  0034F6  3635               	rlcf	___lmul@multiplicand^0,f,c
 13668  0034F8  3636               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13669  0034FA  3637               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13670  0034FC  3638               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13671  0034FE  90D8               	bcf	status,0,c
 13672  003500  3234               	rrcf	(___lmul@multiplier+3)^0,f,c
 13673  003502  3233               	rrcf	(___lmul@multiplier+2)^0,f,c
 13674  003504  3232               	rrcf	(___lmul@multiplier+1)^0,f,c
 13675  003506  3231               	rrcf	___lmul@multiplier^0,f,c
 13676  003508  5031               	movf	___lmul@multiplier^0,w,c
 13677  00350A  1032               	iorwf	(___lmul@multiplier+1)^0,w,c
 13678  00350C  1033               	iorwf	(___lmul@multiplier+2)^0,w,c
 13679  00350E  1034               	iorwf	(___lmul@multiplier+3)^0,w,c
 13680  003510  A4D8               	btfss	status,2,c
 13681  003512  EF8D  F01A         	goto	u4501
 13682  003516  EF8F  F01A         	goto	u4500
 13683  00351A                     u4501:
 13684  00351A  EF6B  F01A         	goto	l6281
 13685  00351E                     u4500:
 13686  00351E  C039  F031         	movff	___lmul@product,?___lmul
 13687  003522  C03A  F032         	movff	___lmul@product+1,?___lmul+1
 13688  003526  C03B  F033         	movff	___lmul@product+2,?___lmul+2
 13689  00352A  C03C  F034         	movff	___lmul@product+3,?___lmul+3
 13690  00352E  0012               	return		;funcret
 13691  003530                     __end_of___lmul:
 13692                           	callstack 0
 13693                           
 13694 ;; *************** function ___aldiv *****************
 13695 ;; Defined at:
 13696 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aldiv.c"
 13697 ;; Parameters:    Size  Location     Type
 13698 ;;  dividend        4   12[COMRAM] long 
 13699 ;;  divisor         4   16[COMRAM] long 
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;  quotient        4   22[COMRAM] long 
 13702 ;;  sign            1   21[COMRAM] unsigned char 
 13703 ;;  counter         1   20[COMRAM] unsigned char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  4   12[COMRAM] long 
 13706 ;; Registers used:
 13707 ;;		wreg, status,2, status,0
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13713 ;;      Params:         8       0       0       0       0       0       0       0       0
 13714 ;;      Locals:         6       0       0       0       0       0       0       0       0
 13715 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13716 ;;      Totals:        14       0       0       0       0       0       0       0       0
 13717 ;;Total ram usage:       14 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    2
 13720 ;; This function calls:
 13721 ;;		Nothing
 13722 ;; This function is called by:
 13723 ;;		_main
 13724 ;; This function uses a non-reentrant model
 13725 ;;
 13726                           
 13727                           	psect	text70
 13728  002846                     __ptext70:
 13729                           	callstack 0
 13730  002846                     ___aldiv:
 13731                           	callstack 28
 13732  002846  0E00               	movlw	0
 13733  002848  6E46               	movwf	___aldiv@sign^0,c
 13734  00284A  BE44               	btfsc	(___aldiv@divisor+3)^0,7,c
 13735  00284C  EF2C  F014         	goto	u4510
 13736  002850  EF2A  F014         	goto	u4511
 13737  002854                     u4511:
 13738  002854  EF36  F014         	goto	l6297
 13739  002858                     u4510:
 13740  002858  1E44               	comf	(___aldiv@divisor+3)^0,f,c
 13741  00285A  1E43               	comf	(___aldiv@divisor+2)^0,f,c
 13742  00285C  1E42               	comf	(___aldiv@divisor+1)^0,f,c
 13743  00285E  6C41               	negf	___aldiv@divisor^0,c
 13744  002860  0E00               	movlw	0
 13745  002862  2242               	addwfc	(___aldiv@divisor+1)^0,f,c
 13746  002864  2243               	addwfc	(___aldiv@divisor+2)^0,f,c
 13747  002866  2244               	addwfc	(___aldiv@divisor+3)^0,f,c
 13748  002868  0E01               	movlw	1
 13749  00286A  6E46               	movwf	___aldiv@sign^0,c
 13750  00286C                     l6297:
 13751  00286C  BE40               	btfsc	(___aldiv@dividend+3)^0,7,c
 13752  00286E  EF3D  F014         	goto	u4520
 13753  002872  EF3B  F014         	goto	u4521
 13754  002876                     u4521:
 13755  002876  EF47  F014         	goto	l6303
 13756  00287A                     u4520:
 13757  00287A  1E40               	comf	(___aldiv@dividend+3)^0,f,c
 13758  00287C  1E3F               	comf	(___aldiv@dividend+2)^0,f,c
 13759  00287E  1E3E               	comf	(___aldiv@dividend+1)^0,f,c
 13760  002880  6C3D               	negf	___aldiv@dividend^0,c
 13761  002882  0E00               	movlw	0
 13762  002884  223E               	addwfc	(___aldiv@dividend+1)^0,f,c
 13763  002886  223F               	addwfc	(___aldiv@dividend+2)^0,f,c
 13764  002888  2240               	addwfc	(___aldiv@dividend+3)^0,f,c
 13765  00288A  0E01               	movlw	1
 13766  00288C  1A46               	xorwf	___aldiv@sign^0,f,c
 13767  00288E                     l6303:
 13768  00288E  0E00               	movlw	0
 13769  002890  6E47               	movwf	___aldiv@quotient^0,c
 13770  002892  0E00               	movlw	0
 13771  002894  6E48               	movwf	(___aldiv@quotient+1)^0,c
 13772  002896  0E00               	movlw	0
 13773  002898  6E49               	movwf	(___aldiv@quotient+2)^0,c
 13774  00289A  0E00               	movlw	0
 13775  00289C  6E4A               	movwf	(___aldiv@quotient+3)^0,c
 13776  00289E  5041               	movf	___aldiv@divisor^0,w,c
 13777  0028A0  1042               	iorwf	(___aldiv@divisor+1)^0,w,c
 13778  0028A2  1043               	iorwf	(___aldiv@divisor+2)^0,w,c
 13779  0028A4  1044               	iorwf	(___aldiv@divisor+3)^0,w,c
 13780  0028A6  B4D8               	btfsc	status,2,c
 13781  0028A8  EF58  F014         	goto	u4531
 13782  0028AC  EF5A  F014         	goto	u4530
 13783  0028B0                     u4531:
 13784  0028B0  EF90  F014         	goto	l6325
 13785  0028B4                     u4530:
 13786  0028B4  0E01               	movlw	1
 13787  0028B6  6E45               	movwf	___aldiv@counter^0,c
 13788  0028B8  EF64  F014         	goto	l6311
 13789  0028BC                     l6309:
 13790  0028BC  90D8               	bcf	status,0,c
 13791  0028BE  3641               	rlcf	___aldiv@divisor^0,f,c
 13792  0028C0  3642               	rlcf	(___aldiv@divisor+1)^0,f,c
 13793  0028C2  3643               	rlcf	(___aldiv@divisor+2)^0,f,c
 13794  0028C4  3644               	rlcf	(___aldiv@divisor+3)^0,f,c
 13795  0028C6  2A45               	incf	___aldiv@counter^0,f,c
 13796  0028C8                     l6311:
 13797  0028C8  AE44               	btfss	(___aldiv@divisor+3)^0,7,c
 13798  0028CA  EF69  F014         	goto	u4541
 13799  0028CE  EF6B  F014         	goto	u4540
 13800  0028D2                     u4541:
 13801  0028D2  EF5E  F014         	goto	l6309
 13802  0028D6                     u4540:
 13803  0028D6                     l6313:
 13804  0028D6  90D8               	bcf	status,0,c
 13805  0028D8  3647               	rlcf	___aldiv@quotient^0,f,c
 13806  0028DA  3648               	rlcf	(___aldiv@quotient+1)^0,f,c
 13807  0028DC  3649               	rlcf	(___aldiv@quotient+2)^0,f,c
 13808  0028DE  364A               	rlcf	(___aldiv@quotient+3)^0,f,c
 13809  0028E0  5041               	movf	___aldiv@divisor^0,w,c
 13810  0028E2  5C3D               	subwf	___aldiv@dividend^0,w,c
 13811  0028E4  5042               	movf	(___aldiv@divisor+1)^0,w,c
 13812  0028E6  583E               	subwfb	(___aldiv@dividend+1)^0,w,c
 13813  0028E8  5043               	movf	(___aldiv@divisor+2)^0,w,c
 13814  0028EA  583F               	subwfb	(___aldiv@dividend+2)^0,w,c
 13815  0028EC  5044               	movf	(___aldiv@divisor+3)^0,w,c
 13816  0028EE  5840               	subwfb	(___aldiv@dividend+3)^0,w,c
 13817  0028F0  A0D8               	btfss	status,0,c
 13818  0028F2  EF7D  F014         	goto	u4551
 13819  0028F6  EF7F  F014         	goto	u4550
 13820  0028FA                     u4551:
 13821  0028FA  EF88  F014         	goto	l6321
 13822  0028FE                     u4550:
 13823  0028FE  5041               	movf	___aldiv@divisor^0,w,c
 13824  002900  5E3D               	subwf	___aldiv@dividend^0,f,c
 13825  002902  5042               	movf	(___aldiv@divisor+1)^0,w,c
 13826  002904  5A3E               	subwfb	(___aldiv@dividend+1)^0,f,c
 13827  002906  5043               	movf	(___aldiv@divisor+2)^0,w,c
 13828  002908  5A3F               	subwfb	(___aldiv@dividend+2)^0,f,c
 13829  00290A  5044               	movf	(___aldiv@divisor+3)^0,w,c
 13830  00290C  5A40               	subwfb	(___aldiv@dividend+3)^0,f,c
 13831  00290E  8047               	bsf	___aldiv@quotient^0,0,c
 13832  002910                     l6321:
 13833  002910  90D8               	bcf	status,0,c
 13834  002912  3244               	rrcf	(___aldiv@divisor+3)^0,f,c
 13835  002914  3243               	rrcf	(___aldiv@divisor+2)^0,f,c
 13836  002916  3242               	rrcf	(___aldiv@divisor+1)^0,f,c
 13837  002918  3241               	rrcf	___aldiv@divisor^0,f,c
 13838  00291A  2E45               	decfsz	___aldiv@counter^0,f,c
 13839  00291C  EF6B  F014         	goto	l6313
 13840  002920                     l6325:
 13841  002920  5046               	movf	___aldiv@sign^0,w,c
 13842  002922  B4D8               	btfsc	status,2,c
 13843  002924  EF96  F014         	goto	u4561
 13844  002928  EF98  F014         	goto	u4560
 13845  00292C                     u4561:
 13846  00292C  EFA0  F014         	goto	l6329
 13847  002930                     u4560:
 13848  002930  1E4A               	comf	(___aldiv@quotient+3)^0,f,c
 13849  002932  1E49               	comf	(___aldiv@quotient+2)^0,f,c
 13850  002934  1E48               	comf	(___aldiv@quotient+1)^0,f,c
 13851  002936  6C47               	negf	___aldiv@quotient^0,c
 13852  002938  0E00               	movlw	0
 13853  00293A  2248               	addwfc	(___aldiv@quotient+1)^0,f,c
 13854  00293C  2249               	addwfc	(___aldiv@quotient+2)^0,f,c
 13855  00293E  224A               	addwfc	(___aldiv@quotient+3)^0,f,c
 13856  002940                     l6329:
 13857  002940  C047  F03D         	movff	___aldiv@quotient,?___aldiv
 13858  002944  C048  F03E         	movff	___aldiv@quotient+1,?___aldiv+1
 13859  002948  C049  F03F         	movff	___aldiv@quotient+2,?___aldiv+2
 13860  00294C  C04A  F040         	movff	___aldiv@quotient+3,?___aldiv+3
 13861  002950  0012               	return		;funcret
 13862  002952                     __end_of___aldiv:
 13863                           	callstack 0
 13864                           
 13865 ;; *************** function _Wifi_mode *****************
 13866 ;; Defined at:
 13867 ;;		line 47 in file "wifi.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  d               1    wreg     unsigned char 
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;  d               1    3[COMRAM] unsigned char 
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  1    wreg      void 
 13874 ;; Registers used:
 13875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13881 ;;      Params:         0       0       0       0       0       0       0       0       0
 13882 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13883 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13884 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13885 ;;Total ram usage:        1 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; Hardware stack levels required when called:    4
 13888 ;; This function calls:
 13889 ;;		_delay
 13890 ;;		_wifi_send
 13891 ;; This function is called by:
 13892 ;;		_main
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text71
 13897  002E68                     __ptext71:
 13898                           	callstack 0
 13899  002E68                     _Wifi_mode:
 13900                           	callstack 26
 13901                           
 13902                           ;incstack = 0
 13903                           ;Wifi_mode@d stored from wreg
 13904  002E68  6E34               	movwf	Wifi_mode@d^0,c
 13905  002E6A                     
 13906                           ;wifi.c: 47: void Wifi_mode(unsigned char d );wifi.c: 48: {;wifi.c: 49:     if(d == 1)
 13907  002E6A  0434               	decf	Wifi_mode@d^0,w,c
 13908  002E6C  A4D8               	btfss	status,2,c
 13909  002E6E  EF3B  F017         	goto	u4431
 13910  002E72  EF3D  F017         	goto	u4430
 13911  002E76                     u4431:
 13912  002E76  EF55  F017         	goto	l6223
 13913  002E7A                     u4430:
 13914  002E7A                     
 13915                           ;wifi.c: 50:     {;wifi.c: 51:         wifi_send("AT+CWMODE=1\r\n");
 13916  002E7A  0E8A               	movlw	low STR_35
 13917  002E7C  6E32               	movwf	wifi_send@msg^0,c
 13918  002E7E  0E7F               	movlw	high STR_35
 13919  002E80  6E33               	movwf	(wifi_send@msg+1)^0,c
 13920  002E82  ECE0  F017         	call	_wifi_send	;wreg free
 13921                           
 13922                           ;wifi.c: 53:         wifi_send("AT+CIPSERVER=0\r\n");
 13923  002E86  0E4D               	movlw	low STR_36
 13924  002E88  6E32               	movwf	wifi_send@msg^0,c
 13925  002E8A  0E7F               	movlw	high STR_36
 13926  002E8C  6E33               	movwf	(wifi_send@msg+1)^0,c
 13927  002E8E  ECE0  F017         	call	_wifi_send	;wreg free
 13928                           
 13929                           ;wifi.c: 54:         wifi_send("AT+CIPMUX=0\r\n");
 13930  002E92  0E7C               	movlw	low STR_37
 13931  002E94  6E32               	movwf	wifi_send@msg^0,c
 13932  002E96  0E7F               	movlw	high STR_37
 13933  002E98  6E33               	movwf	(wifi_send@msg+1)^0,c
 13934  002E9A  ECE0  F017         	call	_wifi_send	;wreg free
 13935                           
 13936                           ;wifi.c: 55:         wifi_send("AT+CIPMODE=1\r\n");
 13937  002E9E  0E6D               	movlw	low STR_38
 13938  002EA0  6E32               	movwf	wifi_send@msg^0,c
 13939  002EA2  0E7F               	movlw	high STR_38
 13940  002EA4  6E33               	movwf	(wifi_send@msg+1)^0,c
 13941  002EA6  ECE0  F017         	call	_wifi_send	;wreg free
 13942  002EAA                     l6223:
 13943                           
 13944                           ;wifi.c: 58:     if(d == 2)
 13945  002EAA  0E02               	movlw	2
 13946  002EAC  1834               	xorwf	Wifi_mode@d^0,w,c
 13947  002EAE  A4D8               	btfss	status,2,c
 13948  002EB0  EF5C  F017         	goto	u4441
 13949  002EB4  EF5E  F017         	goto	u4440
 13950  002EB8                     u4441:
 13951  002EB8  EF76  F017         	goto	l6231
 13952  002EBC                     u4440:
 13953  002EBC                     
 13954                           ;wifi.c: 59:     {;wifi.c: 60:         wifi_send("AT+CWMODE=2\r\n");
 13955  002EBC  0EA6               	movlw	low STR_39
 13956  002EBE  6E32               	movwf	wifi_send@msg^0,c
 13957  002EC0  0E7F               	movlw	high STR_39
 13958  002EC2  6E33               	movwf	(wifi_send@msg+1)^0,c
 13959  002EC4  ECE0  F017         	call	_wifi_send	;wreg free
 13960  002EC8                     
 13961                           ;wifi.c: 61:         delay(1000);
 13962  002EC8  0E03               	movlw	3
 13963  002ECA  6E32               	movwf	(delay@t+1)^0,c
 13964  002ECC  0EE8               	movlw	232
 13965  002ECE  6E31               	movwf	delay@t^0,c
 13966  002ED0  EC62  F01E         	call	_delay	;wreg free
 13967  002ED4                     
 13968                           ;wifi.c: 62:         wifi_send("AT+CWSAP=\"TCC\",\"87654321\",1,2,4,0\r\n");
 13969  002ED4  0E5E               	movlw	low STR_40
 13970  002ED6  6E32               	movwf	wifi_send@msg^0,c
 13971  002ED8  0E7D               	movlw	high STR_40
 13972  002EDA  6E33               	movwf	(wifi_send@msg+1)^0,c
 13973  002EDC  ECE0  F017         	call	_wifi_send	;wreg free
 13974                           
 13975                           ;wifi.c: 63:         delay(1000);
 13976  002EE0  0E03               	movlw	3
 13977  002EE2  6E32               	movwf	(delay@t+1)^0,c
 13978  002EE4  0EE8               	movlw	232
 13979  002EE6  6E31               	movwf	delay@t^0,c
 13980  002EE8  EC62  F01E         	call	_delay	;wreg free
 13981  002EEC                     l6231:
 13982                           
 13983                           ;wifi.c: 65:     if(d == 3)
 13984  002EEC  0E03               	movlw	3
 13985  002EEE  1834               	xorwf	Wifi_mode@d^0,w,c
 13986  002EF0  A4D8               	btfss	status,2,c
 13987  002EF2  EF7D  F017         	goto	u4451
 13988  002EF6  EF7F  F017         	goto	u4450
 13989  002EFA                     u4451:
 13990  002EFA  EF8B  F017         	goto	l1206
 13991  002EFE                     u4450:
 13992  002EFE                     
 13993                           ;wifi.c: 66:     {;wifi.c: 67:         wifi_send("AT+CWMODE=3\r\n");
 13994  002EFE  0EB4               	movlw	low STR_41
 13995  002F00  6E32               	movwf	wifi_send@msg^0,c
 13996  002F02  0E7F               	movlw	high STR_41
 13997  002F04  6E33               	movwf	(wifi_send@msg+1)^0,c
 13998  002F06  ECE0  F017         	call	_wifi_send	;wreg free
 13999                           
 14000                           ;wifi.c: 68:         wifi_send("AT+CWSAP=\"Wireless\",\"********\",1,2,4,0\r\n");
 14001  002F0A  0E0D               	movlw	low STR_42
 14002  002F0C  6E32               	movwf	wifi_send@msg^0,c
 14003  002F0E  0E7D               	movlw	high STR_42
 14004  002F10  6E33               	movwf	(wifi_send@msg+1)^0,c
 14005  002F12  ECE0  F017         	call	_wifi_send	;wreg free
 14006  002F16                     l1206:
 14007  002F16  0012               	return		;funcret
 14008  002F18                     __end_of_Wifi_mode:
 14009                           	callstack 0
 14010                           
 14011 ;; *************** function _Wifi_connect *****************
 14012 ;; Defined at:
 14013 ;;		line 76 in file "wifi.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  ssid            2    3[COMRAM] PTR const unsigned char 
 14016 ;;		 -> STR_1(6), 
 14017 ;;  pass            2    5[COMRAM] PTR const unsigned char 
 14018 ;;		 -> STR_2(9), 
 14019 ;; Auto vars:     Size  Location     Type
 14020 ;;  str            30    9[COMRAM] unsigned char [30]
 14021 ;;  i               1   39[COMRAM] unsigned char 
 14022 ;; Return value:  Size  Location     Type
 14023 ;;                  1    wreg      void 
 14024 ;; Registers used:
 14025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 14026 ;; Tracked objects:
 14027 ;;		On entry : 0/0
 14028 ;;		On exit  : 0/0
 14029 ;;		Unchanged: 0/0
 14030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14031 ;;      Params:         4       0       0       0       0       0       0       0       0
 14032 ;;      Locals:        31       0       0       0       0       0       0       0       0
 14033 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14034 ;;      Totals:        37       0       0       0       0       0       0       0       0
 14035 ;;Total ram usage:       37 bytes
 14036 ;; Hardware stack levels used:    1
 14037 ;; Hardware stack levels required when called:    4
 14038 ;; This function calls:
 14039 ;;		_wifi_send
 14040 ;; This function is called by:
 14041 ;;		_main
 14042 ;; This function uses a non-reentrant model
 14043 ;;
 14044                           
 14045                           	psect	text72
 14046  00270E                     __ptext72:
 14047                           	callstack 0
 14048  00270E                     _Wifi_connect:
 14049                           	callstack 26
 14050  00270E                     
 14051                           ;wifi.c: 76: void Wifi_connect( const char * ssid, const char * pass );wifi.c: 77: {;wif
      +                          i.c: 78:     unsigned char i = 10;
 14052  00270E  0E0A               	movlw	10
 14053  002710  6E58               	movwf	Wifi_connect@i^0,c
 14054  002712                     
 14055                           ;wifi.c: 79:     unsigned char str[30] = "AT+CWJAP=\"";
 14056  002712  EE21  F000         	lfsr	2,Wifi_connect@F3287
 14057  002716  EE10  F03A         	lfsr	1,Wifi_connect@str
 14058  00271A  0E1D               	movlw	29
 14059  00271C                     u4461:
 14060  00271C  CFDB FFE3          	movff	plusw2,plusw1
 14061  002720  06E8               	decf	wreg,f,c
 14062  002722  E2FC               	bc	u4461
 14063                           
 14064                           ;wifi.c: 80:     while( *ssid )
 14065  002724  EFA4  F013         	goto	l6245
 14066  002728                     l6239:
 14067                           
 14068                           ;wifi.c: 81:     {;wifi.c: 82:         str[i] = *ssid;
 14069  002728  C034  FFF6         	movff	Wifi_connect@ssid,tblptrl
 14070  00272C  C035  FFF7         	movff	Wifi_connect@ssid+1,tblptrh
 14071  002730                     	if	0	;tblptru may be non-zero
 14072  002730                     	endif
 14073  002730                     	if	0	;tblptru may be non-zero
 14074  002730                     	endif
 14075  002730  0E3A               	movlw	low Wifi_connect@str
 14076  002732  2458               	addwf	Wifi_connect@i^0,w,c
 14077  002734  6ED9               	movwf	fsr2l,c
 14078  002736  6ADA               	clrf	fsr2h,c
 14079  002738  0E00               	movlw	high Wifi_connect@str
 14080  00273A  22DA               	addwfc	fsr2h,f,c
 14081  00273C  0008               	tblrd		*
 14082  00273E  CFF5 FFDF          	movff	tablat,indf2
 14083  002742                     
 14084                           ;wifi.c: 83:         *ssid++;
 14085  002742  4A34               	infsnz	Wifi_connect@ssid^0,f,c
 14086  002744  2A35               	incf	(Wifi_connect@ssid+1)^0,f,c
 14087  002746                     
 14088                           ;wifi.c: 84:         i++;
 14089  002746  2A58               	incf	Wifi_connect@i^0,f,c
 14090  002748                     l6245:
 14091                           
 14092                           ;wifi.c: 80:     while( *ssid )
 14093  002748  C034  FFF6         	movff	Wifi_connect@ssid,tblptrl
 14094  00274C  C035  FFF7         	movff	Wifi_connect@ssid+1,tblptrh
 14095  002750                     	if	0	;tblptru may be non-zero
 14096  002750                     	endif
 14097  002750                     	if	0	;tblptru may be non-zero
 14098  002750                     	endif
 14099  002750  0008               	tblrd		*
 14100  002752  50F5               	movf	tablat,w,c
 14101  002754  0900               	iorlw	0
 14102  002756  A4D8               	btfss	status,2,c
 14103  002758  EFB0  F013         	goto	u4471
 14104  00275C  EFB2  F013         	goto	u4470
 14105  002760                     u4471:
 14106  002760  EF94  F013         	goto	l6239
 14107  002764                     u4470:
 14108  002764                     
 14109                           ;wifi.c: 86:     str[i] = '"'; i++;
 14110  002764  0E3A               	movlw	low Wifi_connect@str
 14111  002766  2458               	addwf	Wifi_connect@i^0,w,c
 14112  002768  6ED9               	movwf	fsr2l,c
 14113  00276A  6ADA               	clrf	fsr2h,c
 14114  00276C  0E00               	movlw	high Wifi_connect@str
 14115  00276E  22DA               	addwfc	fsr2h,f,c
 14116  002770  0E22               	movlw	34
 14117  002772  6EDF               	movwf	indf2,c
 14118  002774  2A58               	incf	Wifi_connect@i^0,f,c
 14119  002776                     
 14120                           ;wifi.c: 87:     str[i] = ','; i++;
 14121  002776  0E3A               	movlw	low Wifi_connect@str
 14122  002778  2458               	addwf	Wifi_connect@i^0,w,c
 14123  00277A  6ED9               	movwf	fsr2l,c
 14124  00277C  6ADA               	clrf	fsr2h,c
 14125  00277E  0E00               	movlw	high Wifi_connect@str
 14126  002780  22DA               	addwfc	fsr2h,f,c
 14127  002782  0E2C               	movlw	44
 14128  002784  6EDF               	movwf	indf2,c
 14129  002786  2A58               	incf	Wifi_connect@i^0,f,c
 14130  002788                     
 14131                           ;wifi.c: 88:     str[i] = '"'; i++;
 14132  002788  0E3A               	movlw	low Wifi_connect@str
 14133  00278A  2458               	addwf	Wifi_connect@i^0,w,c
 14134  00278C  6ED9               	movwf	fsr2l,c
 14135  00278E  6ADA               	clrf	fsr2h,c
 14136  002790  0E00               	movlw	high Wifi_connect@str
 14137  002792  22DA               	addwfc	fsr2h,f,c
 14138  002794  0E22               	movlw	34
 14139  002796  6EDF               	movwf	indf2,c
 14140  002798  2A58               	incf	Wifi_connect@i^0,f,c
 14141  00279A                     
 14142                           ;wifi.c: 90:     *aux = *ssid;
 14143  00279A  C034  FFF6         	movff	Wifi_connect@ssid,tblptrl
 14144  00279E  C035  FFF7         	movff	Wifi_connect@ssid+1,tblptrh
 14145  0027A2                     	if	0	;tblptru may be non-zero
 14146  0027A2                     	endif
 14147  0027A2                     	if	0	;tblptru may be non-zero
 14148  0027A2                     	endif
 14149  0027A2  0008               	tblrd		*
 14150  0027A4  50F5               	movf	tablat,w,c
 14151  0027A6  6E38               	movwf	??_Wifi_connect^0,c
 14152  0027A8  6A39               	clrf	(??_Wifi_connect+1)^0,c
 14153  0027AA  C038  F156         	movff	??_Wifi_connect,_aux
 14154  0027AE  C039  F157         	movff	??_Wifi_connect+1,_aux+1
 14155                           
 14156                           ;wifi.c: 92:     while( *pass )
 14157  0027B2  EFEB  F013         	goto	l6265
 14158  0027B6                     l6259:
 14159                           
 14160                           ;wifi.c: 93:     {;wifi.c: 94:         str[i] = *pass;
 14161  0027B6  C036  FFF6         	movff	Wifi_connect@pass,tblptrl
 14162  0027BA  C037  FFF7         	movff	Wifi_connect@pass+1,tblptrh
 14163  0027BE                     	if	0	;tblptru may be non-zero
 14164  0027BE                     	endif
 14165  0027BE                     	if	0	;tblptru may be non-zero
 14166  0027BE                     	endif
 14167  0027BE  0E3A               	movlw	low Wifi_connect@str
 14168  0027C0  2458               	addwf	Wifi_connect@i^0,w,c
 14169  0027C2  6ED9               	movwf	fsr2l,c
 14170  0027C4  6ADA               	clrf	fsr2h,c
 14171  0027C6  0E00               	movlw	high Wifi_connect@str
 14172  0027C8  22DA               	addwfc	fsr2h,f,c
 14173  0027CA  0008               	tblrd		*
 14174  0027CC  CFF5 FFDF          	movff	tablat,indf2
 14175  0027D0                     
 14176                           ;wifi.c: 95:         *pass++;
 14177  0027D0  4A36               	infsnz	Wifi_connect@pass^0,f,c
 14178  0027D2  2A37               	incf	(Wifi_connect@pass+1)^0,f,c
 14179  0027D4                     
 14180                           ;wifi.c: 96:         i++;
 14181  0027D4  2A58               	incf	Wifi_connect@i^0,f,c
 14182  0027D6                     l6265:
 14183                           
 14184                           ;wifi.c: 92:     while( *pass )
 14185  0027D6  C036  FFF6         	movff	Wifi_connect@pass,tblptrl
 14186  0027DA  C037  FFF7         	movff	Wifi_connect@pass+1,tblptrh
 14187  0027DE                     	if	0	;tblptru may be non-zero
 14188  0027DE                     	endif
 14189  0027DE                     	if	0	;tblptru may be non-zero
 14190  0027DE                     	endif
 14191  0027DE  0008               	tblrd		*
 14192  0027E0  50F5               	movf	tablat,w,c
 14193  0027E2  0900               	iorlw	0
 14194  0027E4  A4D8               	btfss	status,2,c
 14195  0027E6  EFF7  F013         	goto	u4481
 14196  0027EA  EFF9  F013         	goto	u4480
 14197  0027EE                     u4481:
 14198  0027EE  EFDB  F013         	goto	l6259
 14199  0027F2                     u4480:
 14200  0027F2                     
 14201                           ;wifi.c: 98:     str[i] = '"'; i++;
 14202  0027F2  0E3A               	movlw	low Wifi_connect@str
 14203  0027F4  2458               	addwf	Wifi_connect@i^0,w,c
 14204  0027F6  6ED9               	movwf	fsr2l,c
 14205  0027F8  6ADA               	clrf	fsr2h,c
 14206  0027FA  0E00               	movlw	high Wifi_connect@str
 14207  0027FC  22DA               	addwfc	fsr2h,f,c
 14208  0027FE  0E22               	movlw	34
 14209  002800  6EDF               	movwf	indf2,c
 14210  002802  2A58               	incf	Wifi_connect@i^0,f,c
 14211  002804                     
 14212                           ;wifi.c: 99:     str[i] = '\r'; i++;
 14213  002804  0E3A               	movlw	low Wifi_connect@str
 14214  002806  2458               	addwf	Wifi_connect@i^0,w,c
 14215  002808  6ED9               	movwf	fsr2l,c
 14216  00280A  6ADA               	clrf	fsr2h,c
 14217  00280C  0E00               	movlw	high Wifi_connect@str
 14218  00280E  22DA               	addwfc	fsr2h,f,c
 14219  002810  0E0D               	movlw	13
 14220  002812  6EDF               	movwf	indf2,c
 14221  002814  2A58               	incf	Wifi_connect@i^0,f,c
 14222  002816                     
 14223                           ;wifi.c: 100:     str[i] = '\n'; i++;
 14224  002816  0E3A               	movlw	low Wifi_connect@str
 14225  002818  2458               	addwf	Wifi_connect@i^0,w,c
 14226  00281A  6ED9               	movwf	fsr2l,c
 14227  00281C  6ADA               	clrf	fsr2h,c
 14228  00281E  0E00               	movlw	high Wifi_connect@str
 14229  002820  22DA               	addwfc	fsr2h,f,c
 14230  002822  0E0A               	movlw	10
 14231  002824  6EDF               	movwf	indf2,c
 14232  002826  2A58               	incf	Wifi_connect@i^0,f,c
 14233                           
 14234                           ;wifi.c: 101:     str[i] = 0;
 14235  002828  0E3A               	movlw	low Wifi_connect@str
 14236  00282A  2458               	addwf	Wifi_connect@i^0,w,c
 14237  00282C  6ED9               	movwf	fsr2l,c
 14238  00282E  6ADA               	clrf	fsr2h,c
 14239  002830  0E00               	movlw	high Wifi_connect@str
 14240  002832  22DA               	addwfc	fsr2h,f,c
 14241  002834  0E00               	movlw	0
 14242  002836  6EDF               	movwf	indf2,c
 14243  002838                     
 14244                           ;wifi.c: 102:     wifi_send( str );
 14245  002838  0E3A               	movlw	low Wifi_connect@str
 14246  00283A  6E32               	movwf	wifi_send@msg^0,c
 14247  00283C  0E00               	movlw	high Wifi_connect@str
 14248  00283E  6E33               	movwf	(wifi_send@msg+1)^0,c
 14249  002840  ECE0  F017         	call	_wifi_send	;wreg free
 14250  002844  0012               	return		;funcret
 14251  002846                     __end_of_Wifi_connect:
 14252                           	callstack 0
 14253                           
 14254 ;; *************** function _wifi_send *****************
 14255 ;; Defined at:
 14256 ;;		line 18 in file "wifi.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  msg             2    1[COMRAM] PTR const unsigned char 
 14259 ;;		 -> STR_53(14), STR_52(40), Wifi_cipsend@vtr(10), Wifi_cipsend@str(20), 
 14260 ;;		 -> STR_51(15), STR_50(14), STR_49(17), STR_48(15), 
 14261 ;;		 -> STR_47(21), STR_46(14), STR_45(18), STR_44(11), 
 14262 ;;		 -> STR_43(11), Wifi_connect@str(30), STR_42(41), STR_41(14), 
 14263 ;;		 -> STR_40(36), STR_39(14), STR_38(15), STR_37(14), 
 14264 ;;		 -> STR_36(17), STR_35(14), 
 14265 ;; Auto vars:     Size  Location     Type
 14266 ;;		None
 14267 ;; Return value:  Size  Location     Type
 14268 ;;                  1    wreg      void 
 14269 ;; Registers used:
 14270 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 14271 ;; Tracked objects:
 14272 ;;		On entry : 0/0
 14273 ;;		On exit  : 0/0
 14274 ;;		Unchanged: 0/0
 14275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14276 ;;      Params:         2       0       0       0       0       0       0       0       0
 14277 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14278 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14279 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14280 ;;Total ram usage:        2 bytes
 14281 ;; Hardware stack levels used:    1
 14282 ;; Hardware stack levels required when called:    3
 14283 ;; This function calls:
 14284 ;;		_txEUSART
 14285 ;;		_txStatusEUSART
 14286 ;; This function is called by:
 14287 ;;		_Wifi_mode
 14288 ;;		_Wifi_connect
 14289 ;;		_Wifi_scan
 14290 ;;		_Wifi_ip
 14291 ;;		_Wifi_autoconnect
 14292 ;;		_Wifi_config_servidor
 14293 ;;		_Wifi_config_cliente
 14294 ;;		_Wifi_cipsend
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           	psect	text73
 14299  002FC0                     __ptext73:
 14300                           	callstack 0
 14301  002FC0                     _wifi_send:
 14302                           	callstack 26
 14303  002FC0                     
 14304                           ;wifi.c: 18: void wifi_send( const char * msg );wifi.c: 19: {;wifi.c: 20:     while( *ms
      +                          g )
 14305  002FC0  EF1A  F018         	goto	l5561
 14306  002FC4                     l5555:
 14307  002FC4  EE20  F0DB         	lfsr	2,_eusart+10
 14308  002FC8  D802               	call	u3788
 14309  002FCA  EFF1  F017         	goto	u3789
 14310  002FCE                     u3788:
 14311  002FCE  0005               	push	
 14312  002FD0  6EFA               	movwf	pclath,c
 14313  002FD2  50DE               	movf	postinc2,w,c
 14314  002FD4  6EFD               	movwf	tosl,c
 14315  002FD6  50DE               	movf	postinc2,w,c
 14316  002FD8  6EFE               	movwf	tosh,c
 14317  002FDA  50F8               	movf	tblptru,w,c
 14318  002FDC  6EFF               	movwf	tosu,c
 14319  002FDE  50FA               	movf	pclath,w,c
 14320  002FE0  0012               	return		;indir
 14321  002FE2                     u3789:
 14322  002FE2  0900               	iorlw	0
 14323  002FE4  A4D8               	btfss	status,2,c
 14324  002FE6  EFF7  F017         	goto	u3791
 14325  002FEA  EFF9  F017         	goto	u3790
 14326  002FEE                     u3791:
 14327  002FEE  EFE2  F017         	goto	l5555
 14328  002FF2                     u3790:
 14329  002FF2                     
 14330                           ;wifi.c: 23:         eusart.tx( *msg );
 14331  002FF2  EE20  F0D9         	lfsr	2,_eusart+8
 14332  002FF6  D802               	call	u3808
 14333  002FF8  EF18  F018         	goto	u3809
 14334  002FFC                     u3808:
 14335  002FFC  0005               	push	
 14336  002FFE  6EFA               	movwf	pclath,c
 14337  003000  50DE               	movf	postinc2,w,c
 14338  003002  6EFD               	movwf	tosl,c
 14339  003004  50DE               	movf	postinc2,w,c
 14340  003006  6EFE               	movwf	tosh,c
 14341  003008  50F8               	movf	tblptru,w,c
 14342  00300A  6EFF               	movwf	tosu,c
 14343  00300C  50FA               	movf	pclath,w,c
 14344  00300E  C032  FFF6         	movff	wifi_send@msg,tblptrl
 14345  003012  C033  FFF7         	movff	wifi_send@msg+1,tblptrh
 14346  003016  6AF8               	clrf	tblptru,c
 14347  003018  0E07               	movlw	(high __ramtop+-1)
 14348  00301A  64F7               	cpfsgt	tblptrh,c
 14349  00301C  D003               	bra	u3817
 14350  00301E  0008               	tblrd		*
 14351  003020  50F5               	movf	tablat,w,c
 14352  003022  D005               	bra	u3810
 14353  003024                     u3817:
 14354  003024  CFF6 FFE1          	movff	tblptrl,fsr1l
 14355  003028  CFF7 FFE2          	movff	tblptrh,fsr1h
 14356  00302C  50E7               	movf	indf1,w,c
 14357  00302E                     u3810:
 14358  00302E  0012               	return		;indir
 14359  003030                     u3809:
 14360  003030                     
 14361                           ;wifi.c: 24:         ++msg;
 14362  003030  4A32               	infsnz	wifi_send@msg^0,f,c
 14363  003032  2A33               	incf	(wifi_send@msg+1)^0,f,c
 14364  003034                     l5561:
 14365                           
 14366                           ;wifi.c: 20:     while( *msg )
 14367  003034  C032  FFF6         	movff	wifi_send@msg,tblptrl
 14368  003038  C033  FFF7         	movff	wifi_send@msg+1,tblptrh
 14369  00303C  6AF8               	clrf	tblptru,c
 14370  00303E  0E07               	movlw	(high __ramtop+-1)
 14371  003040  64F7               	cpfsgt	tblptrh,c
 14372  003042  D003               	bra	u3827
 14373  003044  0008               	tblrd		*
 14374  003046  50F5               	movf	tablat,w,c
 14375  003048  D005               	bra	u3820
 14376  00304A                     u3827:
 14377  00304A  CFF6 FFE1          	movff	tblptrl,fsr1l
 14378  00304E  CFF7 FFE2          	movff	tblptrh,fsr1h
 14379  003052  50E7               	movf	indf1,w,c
 14380  003054                     u3820:
 14381  003054  0900               	iorlw	0
 14382  003056  A4D8               	btfss	status,2,c
 14383  003058  EF30  F018         	goto	u3831
 14384  00305C  EF32  F018         	goto	u3830
 14385  003060                     u3831:
 14386  003060  EFE2  F017         	goto	l5555
 14387  003064                     u3830:
 14388  003064  0012               	return		;funcret
 14389  003066                     __end_of_wifi_send:
 14390                           	callstack 0
 14391                           
 14392 ;; *************** function _txStatusEUSART *****************
 14393 ;; Defined at:
 14394 ;;		line 126 in file "eusart.c"
 14395 ;; Parameters:    Size  Location     Type
 14396 ;;		None
 14397 ;; Auto vars:     Size  Location     Type
 14398 ;;		None
 14399 ;; Return value:  Size  Location     Type
 14400 ;;                  1    wreg      unsigned char 
 14401 ;; Registers used:
 14402 ;;		wreg
 14403 ;; Tracked objects:
 14404 ;;		On entry : 0/0
 14405 ;;		On exit  : 0/0
 14406 ;;		Unchanged: 0/0
 14407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14408 ;;      Params:         0       0       0       0       0       0       0       0       0
 14409 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14410 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14411 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14412 ;;Total ram usage:        0 bytes
 14413 ;; Hardware stack levels used:    1
 14414 ;; Hardware stack levels required when called:    2
 14415 ;; This function calls:
 14416 ;;		Nothing
 14417 ;; This function is called by:
 14418 ;;		_wifi_send
 14419 ;; This function uses a non-reentrant model
 14420 ;;
 14421                           
 14422                           	psect	text74
 14423  003E8C                     __ptext74:
 14424                           	callstack 0
 14425  003E8C                     _txStatusEUSART:
 14426                           	callstack 26
 14427  003E8C                     
 14428                           ;eusart.c: 128:     return( !TXSTAbits.TRMT );
 14429  003E8C  A2AC               	btfss	172,1,c	;volatile
 14430  003E8E  EF4B  F01F         	goto	u3231
 14431  003E92  EF4E  F01F         	goto	u3230
 14432  003E96                     u3231:
 14433  003E96  0E01               	movlw	1
 14434  003E98  EF4F  F01F         	goto	u3240
 14435  003E9C                     u3230:
 14436  003E9C  0E00               	movlw	0
 14437  003E9E                     u3240:
 14438  003E9E  0012               	return		;funcret
 14439  003EA0                     __end_of_txStatusEUSART:
 14440                           	callstack 0
 14441                           
 14442 ;; *************** function _txEUSART *****************
 14443 ;; Defined at:
 14444 ;;		line 115 in file "eusart.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;  d               1    wreg     unsigned char 
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;  d               1    0[COMRAM] unsigned char 
 14449 ;; Return value:  Size  Location     Type
 14450 ;;                  1    wreg      void 
 14451 ;; Registers used:
 14452 ;;		wreg
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14458 ;;      Params:         0       0       0       0       0       0       0       0       0
 14459 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14460 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14461 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14462 ;;Total ram usage:        1 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; Hardware stack levels required when called:    2
 14465 ;; This function calls:
 14466 ;;		Nothing
 14467 ;; This function is called by:
 14468 ;;		_wifi_send
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           	psect	text75
 14473  003F60                     __ptext75:
 14474                           	callstack 0
 14475  003F60                     _txEUSART:
 14476                           	callstack 26
 14477                           
 14478                           ;incstack = 0
 14479                           ;txEUSART@d stored from wreg
 14480  003F60  6E31               	movwf	txEUSART@d^0,c
 14481  003F62                     
 14482                           ;eusart.c: 115: void txEUSART( unsigned char d );eusart.c: 116: {;eusart.c: 117:     TXR
      +                          EG = d;
 14483  003F62  C031  FFAD         	movff	txEUSART@d,4013	;volatile
 14484  003F66  0012               	return		;funcret
 14485  003F68                     __end_of_txEUSART:
 14486                           	callstack 0
 14487                           
 14488 ;; *************** function _MCP4725 *****************
 14489 ;; Defined at:
 14490 ;;		line 35 in file "MCP4725.c"
 14491 ;; Parameters:    Size  Location     Type
 14492 ;;  Vout            2   26[COMRAM] unsigned int 
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;		None
 14495 ;; Return value:  Size  Location     Type
 14496 ;;                  1    wreg      void 
 14497 ;; Registers used:
 14498 ;;		wreg, status,2, status,0, cstack
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14504 ;;      Params:         2       0       0       0       0       0       0       0       0
 14505 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14506 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14507 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14508 ;;Total ram usage:        2 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    4
 14511 ;; This function calls:
 14512 ;;		_I2C_stop
 14513 ;;		_dac_init
 14514 ;;		_dac_write
 14515 ;;		_delay
 14516 ;; This function is called by:
 14517 ;;		_main
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           	psect	text76
 14522  003DB2                     __ptext76:
 14523                           	callstack 0
 14524  003DB2                     _MCP4725:
 14525                           	callstack 26
 14526  003DB2                     
 14527                           ;MCP4725.c: 35: void MCP4725 (unsigned int Vout);MCP4725.c: 36: {;MCP4725.c: 37:     dac
      +                          _init();
 14528  003DB2  EC25  F01D         	call	_dac_init
 14529                           
 14530                           ;MCP4725.c: 38:     dac_write(Vout);
 14531  003DB6  C04B  F034         	movff	MCP4725@Vout,dac_write@code
 14532  003DBA  C04C  F035         	movff	MCP4725@Vout+1,dac_write@code+1
 14533  003DBE  ECBE  F01C         	call	_dac_write	;wreg free
 14534  003DC2                     
 14535                           ;MCP4725.c: 39:     I2C_stop();
 14536  003DC2  EC5A  F01F         	call	_I2C_stop	;wreg free
 14537  003DC6                     
 14538                           ;MCP4725.c: 40:     delay(1);
 14539  003DC6  0E00               	movlw	0
 14540  003DC8  6E32               	movwf	(delay@t+1)^0,c
 14541  003DCA  0E01               	movlw	1
 14542  003DCC  6E31               	movwf	delay@t^0,c
 14543  003DCE  EC62  F01E         	call	_delay	;wreg free
 14544  003DD2  0012               	return		;funcret
 14545  003DD4                     __end_of_MCP4725:
 14546                           	callstack 0
 14547                           
 14548 ;; *************** function _dac_write *****************
 14549 ;; Defined at:
 14550 ;;		line 25 in file "MCP4725.c"
 14551 ;; Parameters:    Size  Location     Type
 14552 ;;  code            2    3[COMRAM] unsigned int 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;		None
 14555 ;; Return value:  Size  Location     Type
 14556 ;;                  1    wreg      void 
 14557 ;; Registers used:
 14558 ;;		wreg, status,2, status,0, cstack
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14564 ;;      Params:         2       0       0       0       0       0       0       0       0
 14565 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14566 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14567 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14568 ;;Total ram usage:        5 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    3
 14571 ;; This function calls:
 14572 ;;		_I2C_ack_receive
 14573 ;;		_I2C_tx
 14574 ;;		_delay
 14575 ;; This function is called by:
 14576 ;;		_MCP4725
 14577 ;;		_MCP4725X
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           	psect	text77
 14582  00397C                     __ptext77:
 14583                           	callstack 0
 14584  00397C                     _dac_write:
 14585                           	callstack 26
 14586  00397C                     
 14587                           ;MCP4725.c: 25: void dac_write ( unsigned int code );MCP4725.c: 26: {;MCP4725.c: 27:    
      +                           I2C_tx( code >> 4 );
 14588  00397C  C034  F036         	movff	dac_write@code,??_dac_write
 14589  003980  C035  F037         	movff	dac_write@code+1,??_dac_write+1
 14590  003984  0E04               	movlw	4
 14591  003986  6E38               	movwf	(??_dac_write+2)^0,c
 14592  003988                     u3345:
 14593  003988  90D8               	bcf	status,0,c
 14594  00398A  3237               	rrcf	(??_dac_write+1)^0,f,c
 14595  00398C  3236               	rrcf	??_dac_write^0,f,c
 14596  00398E  2E38               	decfsz	(??_dac_write+2)^0,f,c
 14597  003990  EFC4  F01C         	goto	u3345
 14598  003994  5036               	movf	??_dac_write^0,w,c
 14599  003996  EC27  F01F         	call	_I2C_tx
 14600  00399A                     
 14601                           ;MCP4725.c: 28:     I2C_ack_receive();
 14602  00399A  EC7F  F01F         	call	_I2C_ack_receive	;wreg free
 14603  00399E                     
 14604                           ;MCP4725.c: 29:     delay(1);
 14605  00399E  0E00               	movlw	0
 14606  0039A0  6E32               	movwf	(delay@t+1)^0,c
 14607  0039A2  0E01               	movlw	1
 14608  0039A4  6E31               	movwf	delay@t^0,c
 14609  0039A6  EC62  F01E         	call	_delay	;wreg free
 14610  0039AA                     
 14611                           ;MCP4725.c: 30:     I2C_tx( code << 4);
 14612  0039AA  3834               	swapf	dac_write@code^0,w,c
 14613  0039AC  0BF0               	andlw	240
 14614  0039AE  EC27  F01F         	call	_I2C_tx
 14615  0039B2                     
 14616                           ;MCP4725.c: 31:     I2C_ack_receive();
 14617  0039B2  EC7F  F01F         	call	_I2C_ack_receive	;wreg free
 14618                           
 14619                           ;MCP4725.c: 32:     delay(1);
 14620  0039B6  0E00               	movlw	0
 14621  0039B8  6E32               	movwf	(delay@t+1)^0,c
 14622  0039BA  0E01               	movlw	1
 14623  0039BC  6E31               	movwf	delay@t^0,c
 14624  0039BE  EC62  F01E         	call	_delay	;wreg free
 14625  0039C2  0012               	return		;funcret
 14626  0039C4                     __end_of_dac_write:
 14627                           	callstack 0
 14628                           
 14629 ;; *************** function _dac_init *****************
 14630 ;; Defined at:
 14631 ;;		line 13 in file "MCP4725.c"
 14632 ;; Parameters:    Size  Location     Type
 14633 ;;		None
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;		None
 14636 ;; Return value:  Size  Location     Type
 14637 ;;                  1    wreg      void 
 14638 ;; Registers used:
 14639 ;;		wreg, status,2, status,0, cstack
 14640 ;; Tracked objects:
 14641 ;;		On entry : 0/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14645 ;;      Params:         0       0       0       0       0       0       0       0       0
 14646 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14648 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14649 ;;Total ram usage:        0 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; Hardware stack levels required when called:    3
 14652 ;; This function calls:
 14653 ;;		_I2C_ack_receive
 14654 ;;		_I2C_start
 14655 ;;		_I2C_tx
 14656 ;;		_delay
 14657 ;; This function is called by:
 14658 ;;		_MCP4725
 14659 ;;		_MCP4725X
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           	psect	text78
 14664  003A4A                     __ptext78:
 14665                           	callstack 0
 14666  003A4A                     _dac_init:
 14667                           	callstack 26
 14668  003A4A                     
 14669                           ;MCP4725.c: 15:     I2C_start();
 14670  003A4A  EC50  F01F         	call	_I2C_start	;wreg free
 14671  003A4E                     
 14672                           ;MCP4725.c: 16:     delay(1);
 14673  003A4E  0E00               	movlw	0
 14674  003A50  6E32               	movwf	(delay@t+1)^0,c
 14675  003A52  0E01               	movlw	1
 14676  003A54  6E31               	movwf	delay@t^0,c
 14677  003A56  EC62  F01E         	call	_delay	;wreg free
 14678  003A5A                     
 14679                           ;MCP4725.c: 17:     I2C_tx( 0b11000000 );
 14680  003A5A  0EC0               	movlw	192
 14681  003A5C  EC27  F01F         	call	_I2C_tx
 14682  003A60                     
 14683                           ;MCP4725.c: 18:     I2C_ack_receive();
 14684  003A60  EC7F  F01F         	call	_I2C_ack_receive	;wreg free
 14685  003A64                     
 14686                           ;MCP4725.c: 19:     delay(1);
 14687  003A64  0E00               	movlw	0
 14688  003A66  6E32               	movwf	(delay@t+1)^0,c
 14689  003A68  0E01               	movlw	1
 14690  003A6A  6E31               	movwf	delay@t^0,c
 14691  003A6C  EC62  F01E         	call	_delay	;wreg free
 14692                           
 14693                           ;MCP4725.c: 20:     I2C_tx( 0b01100000 );
 14694  003A70  0E60               	movlw	96
 14695  003A72  EC27  F01F         	call	_I2C_tx
 14696  003A76                     
 14697                           ;MCP4725.c: 21:     I2C_ack_receive();
 14698  003A76  EC7F  F01F         	call	_I2C_ack_receive	;wreg free
 14699  003A7A                     
 14700                           ;MCP4725.c: 22:     delay(1);
 14701  003A7A  0E00               	movlw	0
 14702  003A7C  6E32               	movwf	(delay@t+1)^0,c
 14703  003A7E  0E01               	movlw	1
 14704  003A80  6E31               	movwf	delay@t^0,c
 14705  003A82  EC62  F01E         	call	_delay	;wreg free
 14706  003A86  0012               	return		;funcret
 14707  003A88                     __end_of_dac_init:
 14708                           	callstack 0
 14709                           
 14710 ;; *************** function _delay *****************
 14711 ;; Defined at:
 14712 ;;		line 10 in file "delay.c"
 14713 ;; Parameters:    Size  Location     Type
 14714 ;;  t               2    0[COMRAM] unsigned int 
 14715 ;; Auto vars:     Size  Location     Type
 14716 ;;		None
 14717 ;; Return value:  Size  Location     Type
 14718 ;;                  1    wreg      void 
 14719 ;; Registers used:
 14720 ;;		wreg, status,2, status,0
 14721 ;; Tracked objects:
 14722 ;;		On entry : 0/0
 14723 ;;		On exit  : 0/0
 14724 ;;		Unchanged: 0/0
 14725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14726 ;;      Params:         2       0       0       0       0       0       0       0       0
 14727 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14728 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14729 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14730 ;;Total ram usage:        3 bytes
 14731 ;; Hardware stack levels used:    1
 14732 ;; Hardware stack levels required when called:    2
 14733 ;; This function calls:
 14734 ;;		Nothing
 14735 ;; This function is called by:
 14736 ;;		_dac_init
 14737 ;;		_dac_write
 14738 ;;		_MCP4725
 14739 ;;		_dispLCD_init
 14740 ;;		_main
 14741 ;;		_Wifi_mode
 14742 ;;		_MCP4725X
 14743 ;;		_Wifi_config_servidor
 14744 ;; This function uses a non-reentrant model
 14745 ;;
 14746                           
 14747                           	psect	text79
 14748  003CC4                     __ptext79:
 14749                           	callstack 0
 14750  003CC4                     _delay:
 14751                           	callstack 27
 14752  003CC4                     
 14753                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
 14754  003CC4  EF6F  F01E         	goto	l54
 14755  003CC8                     l5109:
 14756                           
 14757                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
 14758  003CC8  0E07               	movlw	7
 14759  003CCA  6E33               	movwf	??_delay^0,c
 14760  003CCC  0E7D               	movlw	125
 14761  003CCE                     u6027:
 14762  003CCE  2EE8               	decfsz	wreg,f,c
 14763  003CD0  D7FE               	bra	u6027
 14764  003CD2  2E33               	decfsz	??_delay^0,f,c
 14765  003CD4  D7FC               	bra	u6027
 14766  003CD6  F000               	nop	
 14767  003CD8                     
 14768                           ;delay.c: 15:         --t;
 14769  003CD8  0631               	decf	delay@t^0,f,c
 14770  003CDA  A0D8               	btfss	status,0,c
 14771  003CDC  0632               	decf	(delay@t+1)^0,f,c
 14772  003CDE                     l54:
 14773                           
 14774                           ;delay.c: 12:     while( t )
 14775  003CDE  5031               	movf	delay@t^0,w,c
 14776  003CE0  1032               	iorwf	(delay@t+1)^0,w,c
 14777  003CE2  A4D8               	btfss	status,2,c
 14778  003CE4  EF76  F01E         	goto	u3191
 14779  003CE8  EF78  F01E         	goto	u3190
 14780  003CEC                     u3191:
 14781  003CEC  EF64  F01E         	goto	l5109
 14782  003CF0                     u3190:
 14783  003CF0  0012               	return		;funcret
 14784  003CF2                     __end_of_delay:
 14785                           	callstack 0
 14786                           
 14787 ;; *************** function _I2C_tx *****************
 14788 ;; Defined at:
 14789 ;;		line 36 in file "spi_i2c.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;  b               1    wreg     unsigned char 
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;  b               1    0[COMRAM] unsigned char 
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  1    wreg      void 
 14796 ;; Registers used:
 14797 ;;		wreg
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14803 ;;      Params:         0       0       0       0       0       0       0       0       0
 14804 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14805 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14806 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14807 ;;Total ram usage:        1 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    2
 14810 ;; This function calls:
 14811 ;;		Nothing
 14812 ;; This function is called by:
 14813 ;;		_dac_init
 14814 ;;		_dac_write
 14815 ;; This function uses a non-reentrant model
 14816 ;;
 14817                           
 14818                           	psect	text80
 14819  003E4E                     __ptext80:
 14820                           	callstack 0
 14821  003E4E                     _I2C_tx:
 14822                           	callstack 26
 14823                           
 14824                           ;incstack = 0
 14825                           ;I2C_tx@b stored from wreg
 14826  003E4E  6E31               	movwf	I2C_tx@b^0,c
 14827  003E50                     
 14828                           ;spi_i2c.c: 36: void I2C_tx( unsigned char b );spi_i2c.c: 37: {;spi_i2c.c: 38:     SSPBU
      +                          F = b;
 14829  003E50  C031  FFC9         	movff	I2C_tx@b,4041	;volatile
 14830  003E54                     l975:
 14831  003E54  B0C7               	btfsc	199,0,c	;volatile
 14832  003E56  EF2F  F01F         	goto	u3201
 14833  003E5A  EF31  F01F         	goto	u3200
 14834  003E5E                     u3201:
 14835  003E5E  EF2A  F01F         	goto	l975
 14836  003E62                     u3200:
 14837  003E62  0012               	return		;funcret
 14838  003E64                     __end_of_I2C_tx:
 14839                           	callstack 0
 14840                           
 14841 ;; *************** function _I2C_start *****************
 14842 ;; Defined at:
 14843 ;;		line 22 in file "spi_i2c.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;		None
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;		None
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  1    wreg      void 
 14850 ;; Registers used:
 14851 ;;		None
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14857 ;;      Params:         0       0       0       0       0       0       0       0       0
 14858 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14860 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14861 ;;Total ram usage:        0 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    2
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_dac_init
 14868 ;; This function uses a non-reentrant model
 14869 ;;
 14870                           
 14871                           	psect	text81
 14872  003EA0                     __ptext81:
 14873                           	callstack 0
 14874  003EA0                     _I2C_start:
 14875                           	callstack 26
 14876  003EA0                     
 14877                           ;spi_i2c.c: 24:     SSPCON2bits.SEN = 1;
 14878  003EA0  80C5               	bsf	197,0,c	;volatile
 14879  003EA2                     l960:
 14880  003EA2  A69E               	btfss	158,3,c	;volatile
 14881  003EA4  EF56  F01F         	goto	u3181
 14882  003EA8  EF58  F01F         	goto	u3180
 14883  003EAC                     u3181:
 14884  003EAC  EF51  F01F         	goto	l960
 14885  003EB0                     u3180:
 14886  003EB0                     
 14887                           ;spi_i2c.c: 26:     PIR1bits.SSPIF = 0;
 14888  003EB0  969E               	bcf	158,3,c	;volatile
 14889  003EB2  0012               	return		;funcret
 14890  003EB4                     __end_of_I2C_start:
 14891                           	callstack 0
 14892                           
 14893 ;; *************** function _I2C_ack_receive *****************
 14894 ;; Defined at:
 14895 ;;		line 56 in file "spi_i2c.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;		None
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;		None
 14900 ;; Return value:  Size  Location     Type
 14901 ;;                  1    wreg      void 
 14902 ;; Registers used:
 14903 ;;		None
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14909 ;;      Params:         0       0       0       0       0       0       0       0       0
 14910 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14911 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14912 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14913 ;;Total ram usage:        0 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    2
 14916 ;; This function calls:
 14917 ;;		Nothing
 14918 ;; This function is called by:
 14919 ;;		_dac_init
 14920 ;;		_dac_write
 14921 ;; This function uses a non-reentrant model
 14922 ;;
 14923                           
 14924                           	psect	text82
 14925  003EFE                     __ptext82:
 14926                           	callstack 0
 14927  003EFE                     _I2C_ack_receive:
 14928                           	callstack 26
 14929  003EFE                     l996:
 14930  003EFE  BCC5               	btfsc	197,6,c	;volatile
 14931  003F00  EF84  F01F         	goto	u3211
 14932  003F04  EF86  F01F         	goto	u3210
 14933  003F08                     u3211:
 14934  003F08  EF7F  F01F         	goto	l996
 14935  003F0C                     u3210:
 14936  003F0C  0012               	return		;funcret
 14937  003F0E                     __end_of_I2C_ack_receive:
 14938                           	callstack 0
 14939                           
 14940 ;; *************** function _I2C_stop *****************
 14941 ;; Defined at:
 14942 ;;		line 41 in file "spi_i2c.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;		None
 14945 ;; Auto vars:     Size  Location     Type
 14946 ;;		None
 14947 ;; Return value:  Size  Location     Type
 14948 ;;                  1    wreg      void 
 14949 ;; Registers used:
 14950 ;;		None
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14956 ;;      Params:         0       0       0       0       0       0       0       0       0
 14957 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14958 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14959 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14960 ;;Total ram usage:        0 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    2
 14963 ;; This function calls:
 14964 ;;		Nothing
 14965 ;; This function is called by:
 14966 ;;		_MCP4725
 14967 ;;		_MCP4725X
 14968 ;; This function uses a non-reentrant model
 14969 ;;
 14970                           
 14971                           	psect	text83
 14972  003EB4                     __ptext83:
 14973                           	callstack 0
 14974  003EB4                     _I2C_stop:
 14975                           	callstack 27
 14976  003EB4                     
 14977                           ;spi_i2c.c: 43:     SSPCON2bits.PEN = 1;
 14978  003EB4  84C5               	bsf	197,2,c	;volatile
 14979  003EB6                     l981:
 14980  003EB6  A69E               	btfss	158,3,c	;volatile
 14981  003EB8  EF60  F01F         	goto	u3351
 14982  003EBC  EF62  F01F         	goto	u3350
 14983  003EC0                     u3351:
 14984  003EC0  EF5B  F01F         	goto	l981
 14985  003EC4                     u3350:
 14986  003EC4                     
 14987                           ;spi_i2c.c: 45:     PIR1bits.SSPIF = 0;
 14988  003EC4  969E               	bcf	158,3,c	;volatile
 14989  003EC6  0012               	return		;funcret
 14990  003EC8                     __end_of_I2C_stop:
 14991                           	callstack 0
 14992                           
 14993 ;; *************** function _I2C_init *****************
 14994 ;; Defined at:
 14995 ;;		line 12 in file "spi_i2c.c"
 14996 ;; Parameters:    Size  Location     Type
 14997 ;;  freq            4   13[COMRAM] unsigned long 
 14998 ;; Auto vars:     Size  Location     Type
 14999 ;;		None
 15000 ;; Return value:  Size  Location     Type
 15001 ;;                  1    wreg      void 
 15002 ;; Registers used:
 15003 ;;		wreg, status,2, status,0, cstack
 15004 ;; Tracked objects:
 15005 ;;		On entry : 0/0
 15006 ;;		On exit  : 0/0
 15007 ;;		Unchanged: 0/0
 15008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15009 ;;      Params:         4       0       0       0       0       0       0       0       0
 15010 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15011 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15012 ;;      Totals:         4       0       0       0       0       0       0       0       0
 15013 ;;Total ram usage:        4 bytes
 15014 ;; Hardware stack levels used:    1
 15015 ;; Hardware stack levels required when called:    3
 15016 ;; This function calls:
 15017 ;;		___lldiv
 15018 ;; This function is called by:
 15019 ;;		_main
 15020 ;; This function uses a non-reentrant model
 15021 ;;
 15022                           
 15023                           	psect	text84
 15024  003AC4                     __ptext84:
 15025                           	callstack 0
 15026  003AC4                     _I2C_init:
 15027                           	callstack 27
 15028  003AC4                     
 15029                           ;spi_i2c.c: 12: void I2C_init( unsigned long freq );spi_i2c.c: 13: {;spi_i2c.c: 14:     
      +                          TRISBbits.TRISB0 = 1;
 15030  003AC4  8093               	bsf	147,0,c	;volatile
 15031                           
 15032                           ;spi_i2c.c: 15:     TRISBbits.TRISB1 = 1;
 15033  003AC6  8293               	bsf	147,1,c	;volatile
 15034  003AC8                     
 15035                           ;spi_i2c.c: 16:     SSPCON1bits.SSPM = 0x8;
 15036  003AC8  50C6               	movf	198,w,c	;volatile
 15037  003ACA  0BF0               	andlw	-16
 15038  003ACC  0908               	iorlw	8
 15039  003ACE  6EC6               	movwf	198,c	;volatile
 15040  003AD0                     
 15041                           ;spi_i2c.c: 17:     SSPADD = ((20000000>>2) / (freq))-1;
 15042  003AD0  0E40               	movlw	64
 15043  003AD2  6E31               	movwf	___lldiv@dividend^0,c
 15044  003AD4  0E4B               	movlw	75
 15045  003AD6  6E32               	movwf	(___lldiv@dividend+1)^0,c
 15046  003AD8  0E4C               	movlw	76
 15047  003ADA  6E33               	movwf	(___lldiv@dividend+2)^0,c
 15048  003ADC  0E00               	movlw	0
 15049  003ADE  6E34               	movwf	(___lldiv@dividend+3)^0,c
 15050  003AE0  C03E  F035         	movff	I2C_init@freq,___lldiv@divisor
 15051  003AE4  C03F  F036         	movff	I2C_init@freq+1,___lldiv@divisor+1
 15052  003AE8  C040  F037         	movff	I2C_init@freq+2,___lldiv@divisor+2
 15053  003AEC  C041  F038         	movff	I2C_init@freq+3,___lldiv@divisor+3
 15054  003AF0  EC33  F018         	call	___lldiv	;wreg free
 15055  003AF4  0431               	decf	?___lldiv^0,w,c
 15056  003AF6  6EC8               	movwf	200,c	;volatile
 15057  003AF8                     
 15058                           ;spi_i2c.c: 18:     SSPSTATbits.SMP = 1;
 15059  003AF8  8EC7               	bsf	199,7,c	;volatile
 15060  003AFA                     
 15061                           ;spi_i2c.c: 19:     SSPCON1bits.SSPEN = 1;
 15062  003AFA  8AC6               	bsf	198,5,c	;volatile
 15063  003AFC  0012               	return		;funcret
 15064  003AFE                     __end_of_I2C_init:
 15065                           	callstack 0
 15066                           
 15067 ;; *************** function ___lldiv *****************
 15068 ;; Defined at:
 15069 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\__lldiv.c"
 15070 ;; Parameters:    Size  Location     Type
 15071 ;;  dividend        4    0[COMRAM] unsigned long 
 15072 ;;  divisor         4    4[COMRAM] unsigned long 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  quotient        4    8[COMRAM] unsigned long 
 15075 ;;  counter         1   12[COMRAM] unsigned char 
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  4    0[COMRAM] unsigned long 
 15078 ;; Registers used:
 15079 ;;		wreg, status,2, status,0
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15085 ;;      Params:         8       0       0       0       0       0       0       0       0
 15086 ;;      Locals:         5       0       0       0       0       0       0       0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15088 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15089 ;;Total ram usage:       13 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    2
 15092 ;; This function calls:
 15093 ;;		Nothing
 15094 ;; This function is called by:
 15095 ;;		_I2C_init
 15096 ;;		_initEUSART
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           	psect	text85
 15101  003066                     __ptext85:
 15102                           	callstack 0
 15103  003066                     ___lldiv:
 15104                           	callstack 26
 15105  003066  0E00               	movlw	0
 15106  003068  6E39               	movwf	___lldiv@quotient^0,c
 15107  00306A  0E00               	movlw	0
 15108  00306C  6E3A               	movwf	(___lldiv@quotient+1)^0,c
 15109  00306E  0E00               	movlw	0
 15110  003070  6E3B               	movwf	(___lldiv@quotient+2)^0,c
 15111  003072  0E00               	movlw	0
 15112  003074  6E3C               	movwf	(___lldiv@quotient+3)^0,c
 15113  003076  5035               	movf	___lldiv@divisor^0,w,c
 15114  003078  1036               	iorwf	(___lldiv@divisor+1)^0,w,c
 15115  00307A  1037               	iorwf	(___lldiv@divisor+2)^0,w,c
 15116  00307C  1038               	iorwf	(___lldiv@divisor+3)^0,w,c
 15117  00307E  B4D8               	btfsc	status,2,c
 15118  003080  EF44  F018         	goto	u3251
 15119  003084  EF46  F018         	goto	u3250
 15120  003088                     u3251:
 15121  003088  EF7C  F018         	goto	l1277
 15122  00308C                     u3250:
 15123  00308C  0E01               	movlw	1
 15124  00308E  6E3D               	movwf	___lldiv@counter^0,c
 15125  003090  EF50  F018         	goto	l5187
 15126  003094                     l5185:
 15127  003094  90D8               	bcf	status,0,c
 15128  003096  3635               	rlcf	___lldiv@divisor^0,f,c
 15129  003098  3636               	rlcf	(___lldiv@divisor+1)^0,f,c
 15130  00309A  3637               	rlcf	(___lldiv@divisor+2)^0,f,c
 15131  00309C  3638               	rlcf	(___lldiv@divisor+3)^0,f,c
 15132  00309E  2A3D               	incf	___lldiv@counter^0,f,c
 15133  0030A0                     l5187:
 15134  0030A0  AE38               	btfss	(___lldiv@divisor+3)^0,7,c
 15135  0030A2  EF55  F018         	goto	u3261
 15136  0030A6  EF57  F018         	goto	u3260
 15137  0030AA                     u3261:
 15138  0030AA  EF4A  F018         	goto	l5185
 15139  0030AE                     u3260:
 15140  0030AE                     l5189:
 15141  0030AE  90D8               	bcf	status,0,c
 15142  0030B0  3639               	rlcf	___lldiv@quotient^0,f,c
 15143  0030B2  363A               	rlcf	(___lldiv@quotient+1)^0,f,c
 15144  0030B4  363B               	rlcf	(___lldiv@quotient+2)^0,f,c
 15145  0030B6  363C               	rlcf	(___lldiv@quotient+3)^0,f,c
 15146  0030B8  5035               	movf	___lldiv@divisor^0,w,c
 15147  0030BA  5C31               	subwf	___lldiv@dividend^0,w,c
 15148  0030BC  5036               	movf	(___lldiv@divisor+1)^0,w,c
 15149  0030BE  5832               	subwfb	(___lldiv@dividend+1)^0,w,c
 15150  0030C0  5037               	movf	(___lldiv@divisor+2)^0,w,c
 15151  0030C2  5833               	subwfb	(___lldiv@dividend+2)^0,w,c
 15152  0030C4  5038               	movf	(___lldiv@divisor+3)^0,w,c
 15153  0030C6  5834               	subwfb	(___lldiv@dividend+3)^0,w,c
 15154  0030C8  A0D8               	btfss	status,0,c
 15155  0030CA  EF69  F018         	goto	u3271
 15156  0030CE  EF6B  F018         	goto	u3270
 15157  0030D2                     u3271:
 15158  0030D2  EF74  F018         	goto	l5197
 15159  0030D6                     u3270:
 15160  0030D6  5035               	movf	___lldiv@divisor^0,w,c
 15161  0030D8  5E31               	subwf	___lldiv@dividend^0,f,c
 15162  0030DA  5036               	movf	(___lldiv@divisor+1)^0,w,c
 15163  0030DC  5A32               	subwfb	(___lldiv@dividend+1)^0,f,c
 15164  0030DE  5037               	movf	(___lldiv@divisor+2)^0,w,c
 15165  0030E0  5A33               	subwfb	(___lldiv@dividend+2)^0,f,c
 15166  0030E2  5038               	movf	(___lldiv@divisor+3)^0,w,c
 15167  0030E4  5A34               	subwfb	(___lldiv@dividend+3)^0,f,c
 15168  0030E6  8039               	bsf	___lldiv@quotient^0,0,c
 15169  0030E8                     l5197:
 15170  0030E8  90D8               	bcf	status,0,c
 15171  0030EA  3238               	rrcf	(___lldiv@divisor+3)^0,f,c
 15172  0030EC  3237               	rrcf	(___lldiv@divisor+2)^0,f,c
 15173  0030EE  3236               	rrcf	(___lldiv@divisor+1)^0,f,c
 15174  0030F0  3235               	rrcf	___lldiv@divisor^0,f,c
 15175  0030F2  2E3D               	decfsz	___lldiv@counter^0,f,c
 15176  0030F4  EF57  F018         	goto	l5189
 15177  0030F8                     l1277:
 15178  0030F8  C039  F031         	movff	___lldiv@quotient,?___lldiv
 15179  0030FC  C03A  F032         	movff	___lldiv@quotient+1,?___lldiv+1
 15180  003100  C03B  F033         	movff	___lldiv@quotient+2,?___lldiv+2
 15181  003104  C03C  F034         	movff	___lldiv@quotient+3,?___lldiv+3
 15182  003108  0012               	return		;funcret
 15183  00310A                     __end_of___lldiv:
 15184                           	callstack 0
 15185                           
 15186 ;; *************** function _irq *****************
 15187 ;; Defined at:
 15188 ;;		line 58 in file "main.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;		None
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;		None
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  1    wreg      void 
 15195 ;; Registers used:
 15196 ;;		wreg, status,2, status,0, cstack
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15202 ;;      Params:         0       0       0       0       0       0       0       0       0
 15203 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15205 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15206 ;;Total ram usage:        0 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    1
 15209 ;; This function calls:
 15210 ;;		_intt1_1ms
 15211 ;; This function is called by:
 15212 ;;		Interrupt level 2
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           	psect	intcode
 15217  000008                     __pintcode:
 15218                           	callstack 0
 15219  000008                     _irq:
 15220                           	callstack 25
 15221                           
 15222                           ;incstack = 0
 15223  000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 15224  00000A  ED79  F01E         	call	int_func,f	;refresh shadow registers
 15225                           
 15226                           	psect	intcode_body
 15227  003CF2                     __pintcode_body:
 15228                           	callstack 25
 15229  003CF2                     int_func:
 15230                           	callstack 25
 15231  003CF2  0006               	pop		; remove dummy address from shadow register refresh
 15232  003CF4                     
 15233                           ;main.c: 60:     INTCONbits.GIE = 0;
 15234  003CF4  9EF2               	bcf	242,7,c	;volatile
 15235                           
 15236                           ;main.c: 61:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 15237  003CF6  A09E               	btfss	158,0,c	;volatile
 15238  003CF8  EF80  F01E         	goto	i2u155_41
 15239  003CFC  EF82  F01E         	goto	i2u155_40
 15240  003D00                     i2u155_41:
 15241  003D00  EF8C  F01E         	goto	i2l3301
 15242  003D04                     i2u155_40:
 15243  003D04  A09D               	btfss	157,0,c	;volatile
 15244  003D06  EF87  F01E         	goto	i2u156_41
 15245  003D0A  EF89  F01E         	goto	i2u156_40
 15246  003D0E                     i2u156_41:
 15247  003D0E  EF8C  F01E         	goto	i2l3301
 15248  003D12                     i2u156_40:
 15249  003D12                     
 15250                           ;main.c: 62:     {;main.c: 63:         PIR1bits.TMR1IF = 0;
 15251  003D12  909E               	bcf	158,0,c	;volatile
 15252  003D14                     
 15253                           ;main.c: 65:         intt1_1ms();
 15254  003D14  EC05  F01E         	call	_intt1_1ms	;wreg free
 15255  003D18                     i2l3301:
 15256                           
 15257                           ;main.c: 67:     INTCONbits.GIE = 1;
 15258  003D18  8EF2               	bsf	242,7,c	;volatile
 15259  003D1A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 15260  003D1C  0011               	retfie		f
 15261  003D1E                     __end_of_irq:
 15262                           	callstack 0
 15263                           
 15264 ;; *************** function _intt1_1ms *****************
 15265 ;; Defined at:
 15266 ;;		line 5 in file "timer1.c"
 15267 ;; Parameters:    Size  Location     Type
 15268 ;;		None
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;		None
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  1    wreg      void 
 15273 ;; Registers used:
 15274 ;;		wreg, status,2, status,0
 15275 ;; Tracked objects:
 15276 ;;		On entry : 0/0
 15277 ;;		On exit  : 0/0
 15278 ;;		Unchanged: 0/0
 15279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15280 ;;      Params:         0       0       0       0       0       0       0       0       0
 15281 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15282 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15283 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15284 ;;Total ram usage:        0 bytes
 15285 ;; Hardware stack levels used:    1
 15286 ;; This function calls:
 15287 ;;		Nothing
 15288 ;; This function is called by:
 15289 ;;		_irq
 15290 ;; This function uses a non-reentrant model
 15291 ;;
 15292                           
 15293                           	psect	text87
 15294  003C0A                     __ptext87:
 15295                           	callstack 0
 15296  003C0A                     _intt1_1ms:
 15297                           	callstack 25
 15298  003C0A                     
 15299                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 15300  003C0A  0EFD               	movlw	253
 15301  003C0C  6ECF               	movwf	207,c	;volatile
 15302                           
 15303                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 15304  003C0E  0E8F               	movlw	143
 15305  003C10  6ECE               	movwf	206,c	;volatile
 15306  003C12                     
 15307                           ;timer1.c: 10:     if(t1cont)
 15308  003C12  500B               	movf	_t1cont^0,w,c
 15309  003C14  100C               	iorwf	(_t1cont+1)^0,w,c
 15310  003C16  100D               	iorwf	(_t1cont+2)^0,w,c
 15311  003C18  100E               	iorwf	(_t1cont+3)^0,w,c
 15312  003C1A  B4D8               	btfsc	status,2,c
 15313  003C1C  EF12  F01E         	goto	i2u132_41
 15314  003C20  EF14  F01E         	goto	i2u132_40
 15315  003C24                     i2u132_41:
 15316  003C24  EF1B  F01E         	goto	i2l1061
 15317  003C28                     i2u132_40:
 15318  003C28                     
 15319                           ;timer1.c: 11:         --t1cont;
 15320  003C28  060B               	decf	_t1cont^0,f,c
 15321  003C2A  0E00               	movlw	0
 15322  003C2C  5A0C               	subwfb	(_t1cont+1)^0,f,c
 15323  003C2E  5A0D               	subwfb	(_t1cont+2)^0,f,c
 15324  003C30  5A0E               	subwfb	(_t1cont+3)^0,f,c
 15325  003C32  EF1C  F01E         	goto	i2l1063
 15326  003C36                     i2l1061:
 15327                           
 15328                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 15329  003C36  90CD               	bcf	205,0,c	;volatile
 15330  003C38                     i2l1063:
 15331  003C38  0012               	return		;funcret
 15332  003C3A                     __end_of_intt1_1ms:
 15333                           	callstack 0
 15334                           
 15335                           	psect	text88
 15336  000000                     __ptext88:
 15337                           	callstack 0
 15338  000000                     
 15339                           	psect	rparam
 15340  0000                     
 15341                           	psect	temp
 15342  00005E                     btemp:
 15343                           	callstack 0
 15344  00005E                     	ds	1
 15345  0000                     int$flags	set	btemp
 15346  0000                     wtemp8	set	btemp+1
 15347  0000                     ttemp5	set	btemp+1
 15348  0000                     ttemp6	set	btemp+4
 15349  0000                     ttemp7	set	btemp+8
 15350                           
 15351                           	psect	idloc
 15352                           
 15353                           ;Config register IDLOC0 @ 0x200000
 15354                           ;	unspecified, using default values
 15355  200000                     	org	2097152
 15356  200000  FF                 	db	255
 15357                           
 15358                           ;Config register IDLOC1 @ 0x200001
 15359                           ;	unspecified, using default values
 15360  200001                     	org	2097153
 15361  200001  FF                 	db	255
 15362                           
 15363                           ;Config register IDLOC2 @ 0x200002
 15364                           ;	unspecified, using default values
 15365  200002                     	org	2097154
 15366  200002  FF                 	db	255
 15367                           
 15368                           ;Config register IDLOC3 @ 0x200003
 15369                           ;	unspecified, using default values
 15370  200003                     	org	2097155
 15371  200003  FF                 	db	255
 15372                           
 15373                           ;Config register IDLOC4 @ 0x200004
 15374                           ;	unspecified, using default values
 15375  200004                     	org	2097156
 15376  200004  FF                 	db	255
 15377                           
 15378                           ;Config register IDLOC5 @ 0x200005
 15379                           ;	unspecified, using default values
 15380  200005                     	org	2097157
 15381  200005  FF                 	db	255
 15382                           
 15383                           ;Config register IDLOC6 @ 0x200006
 15384                           ;	unspecified, using default values
 15385  200006                     	org	2097158
 15386  200006  FF                 	db	255
 15387                           
 15388                           ;Config register IDLOC7 @ 0x200007
 15389                           ;	unspecified, using default values
 15390  200007                     	org	2097159
 15391  200007  FF                 	db	255
 15392                           
 15393                           	psect	config
 15394                           
 15395                           ;Config register CONFIG1L @ 0x300000
 15396                           ;	PLL Prescaler Selection bits
 15397                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
 15398                           ;	System Clock Postscaler Selection bits
 15399                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 15400                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 15401                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 15402  300000                     	org	3145728
 15403  300000  04                 	db	4
 15404                           
 15405                           ;Config register CONFIG1H @ 0x300001
 15406                           ;	Oscillator Selection bits
 15407                           ;	FOSC = HS, HS oscillator (HS)
 15408                           ;	Fail-Safe Clock Monitor Enable bit
 15409                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 15410                           ;	Internal/External Oscillator Switchover bit
 15411                           ;	IESO = OFF, Oscillator Switchover mode disabled
 15412  300001                     	org	3145729
 15413  300001  0C                 	db	12
 15414                           
 15415                           ;Config register CONFIG2L @ 0x300002
 15416                           ;	Power-up Timer Enable bit
 15417                           ;	PWRT = ON, PWRT enabled
 15418                           ;	Brown-out Reset Enable bits
 15419                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 15420                           ;	Brown-out Reset Voltage bits
 15421                           ;	BORV = 3, Minimum setting 2.05V
 15422                           ;	USB Voltage Regulator Enable bit
 15423                           ;	VREGEN = OFF, USB voltage regulator disabled
 15424  300002                     	org	3145730
 15425  300002  18                 	db	24
 15426                           
 15427                           ;Config register CONFIG2H @ 0x300003
 15428                           ;	Watchdog Timer Enable bit
 15429                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 15430                           ;	Watchdog Timer Postscale Select bits
 15431                           ;	WDTPS = 32768, 1:32768
 15432  300003                     	org	3145731
 15433  300003  1E                 	db	30
 15434                           
 15435                           ; Padding undefined space
 15436  300004                     	org	3145732
 15437  300004  FF                 	db	255
 15438                           
 15439                           ;Config register CONFIG3H @ 0x300005
 15440                           ;	CCP2 MUX bit
 15441                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 15442                           ;	PORTB A/D Enable bit
 15443                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 15444                           ;	Low-Power Timer 1 Oscillator Enable bit
 15445                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 15446                           ;	MCLR Pin Enable bit
 15447                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
 15448  300005                     	org	3145733
 15449  300005  01                 	db	1
 15450                           
 15451                           ;Config register CONFIG4L @ 0x300006
 15452                           ;	Stack Full/Underflow Reset Enable bit
 15453                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
 15454                           ;	Single-Supply ICSP Enable bit
 15455                           ;	LVP = OFF, Single-Supply ICSP disabled
 15456                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 15457                           ;	ICPRT = OFF, ICPORT disabled
 15458                           ;	Extended Instruction Set Enable bit
 15459                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 15460                           ;	Background Debugger Enable bit
 15461                           ;	DEBUG = 0x1, unprogrammed default
 15462  300006                     	org	3145734
 15463  300006  80                 	db	128
 15464                           
 15465                           ; Padding undefined space
 15466  300007                     	org	3145735
 15467  300007  FF                 	db	255
 15468                           
 15469                           ;Config register CONFIG5L @ 0x300008
 15470                           ;	Code Protection bit
 15471                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 15472                           ;	Code Protection bit
 15473                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 15474                           ;	Code Protection bit
 15475                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 15476                           ;	Code Protection bit
 15477                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 15478  300008                     	org	3145736
 15479  300008  0F                 	db	15
 15480                           
 15481                           ;Config register CONFIG5H @ 0x300009
 15482                           ;	Boot Block Code Protection bit
 15483                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 15484                           ;	Data EEPROM Code Protection bit
 15485                           ;	CPD = OFF, Data EEPROM is not code-protected
 15486  300009                     	org	3145737
 15487  300009  C0                 	db	192
 15488                           
 15489                           ;Config register CONFIG6L @ 0x30000A
 15490                           ;	Write Protection bit
 15491                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 15492                           ;	Write Protection bit
 15493                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 15494                           ;	Write Protection bit
 15495                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 15496                           ;	Write Protection bit
 15497                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 15498  30000A                     	org	3145738
 15499  30000A  0F                 	db	15
 15500                           
 15501                           ;Config register CONFIG6H @ 0x30000B
 15502                           ;	Configuration Register Write Protection bit
 15503                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 15504                           ;	Boot Block Write Protection bit
 15505                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 15506                           ;	Data EEPROM Write Protection bit
 15507                           ;	WRTD = OFF, Data EEPROM is not write-protected
 15508  30000B                     	org	3145739
 15509  30000B  E0                 	db	224
 15510                           
 15511                           ;Config register CONFIG7L @ 0x30000C
 15512                           ;	Table Read Protection bit
 15513                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15514                           ;	Table Read Protection bit
 15515                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15516                           ;	Table Read Protection bit
 15517                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15518                           ;	Table Read Protection bit
 15519                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15520  30000C                     	org	3145740
 15521  30000C  0F                 	db	15
 15522                           
 15523                           ;Config register CONFIG7H @ 0x30000D
 15524                           ;	Boot Block Table Read Protection bit
 15525                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 15526  30000D                     	org	3145741
 15527  30000D  40                 	db	64
 15528                           tosu	equ	0xFFF
 15529                           tosh	equ	0xFFE
 15530                           tosl	equ	0xFFD
 15531                           stkptr	equ	0xFFC
 15532                           pclatu	equ	0xFFB
 15533                           pclath	equ	0xFFA
 15534                           pcl	equ	0xFF9
 15535                           tblptru	equ	0xFF8
 15536                           tblptrh	equ	0xFF7
 15537                           tblptrl	equ	0xFF6
 15538                           tablat	equ	0xFF5
 15539                           prodh	equ	0xFF4
 15540                           prodl	equ	0xFF3
 15541                           indf0	equ	0xFEF
 15542                           postinc0	equ	0xFEE
 15543                           postdec0	equ	0xFED
 15544                           preinc0	equ	0xFEC
 15545                           plusw0	equ	0xFEB
 15546                           fsr0h	equ	0xFEA
 15547                           fsr0l	equ	0xFE9
 15548                           wreg	equ	0xFE8
 15549                           indf1	equ	0xFE7
 15550                           postinc1	equ	0xFE6
 15551                           postdec1	equ	0xFE5
 15552                           preinc1	equ	0xFE4
 15553                           plusw1	equ	0xFE3
 15554                           fsr1h	equ	0xFE2
 15555                           fsr1l	equ	0xFE1
 15556                           bsr	equ	0xFE0
 15557                           indf2	equ	0xFDF
 15558                           postinc2	equ	0xFDE
 15559                           postdec2	equ	0xFDD
 15560                           preinc2	equ	0xFDC
 15561                           plusw2	equ	0xFDB
 15562                           fsr2h	equ	0xFDA
 15563                           fsr2l	equ	0xFD9
 15564                           status	equ	0xFD8

Data Sizes:
    Strings     1058
    Constant    0
    Data        145
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      93
    BANK0           160     93     151
    BANK1           256      0     106
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    S174$3$0	PTR unsigned char  size(2) Largest target is 0

    S576$2$0	PTR unsigned char  size(2) Largest target is 0

    S576$9$1	PTR unsigned char  size(2) Largest target is 0

    S576$9$0	PTR unsigned char  size(2) Largest target is 0

    S1543$7$1	PTR const unsigned char  size(2) Largest target is 0

    S1543$7$0	PTR const unsigned char  size(2) Largest target is 0

    S576$1$0	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_53(CODE[14]), STR_52(CODE[40]), Wifi_cipsend@vtr(COMRAM[10]), Wifi_cipsend@str(COMRAM[20]), 
		 -> STR_51(CODE[15]), STR_50(CODE[14]), STR_49(CODE[17]), STR_48(CODE[15]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[18]), STR_44(CODE[11]), 
		 -> STR_43(CODE[11]), Wifi_connect@str(COMRAM[30]), STR_42(CODE[41]), STR_41(CODE[14]), 
		 -> STR_40(CODE[36]), STR_39(CODE[14]), STR_38(CODE[15]), STR_37(CODE[14]), 
		 -> STR_36(CODE[17]), STR_35(CODE[14]), 

    S174$0$1	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S174$1$1	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    S504$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_29(CODE[78]), STR_28(CODE[62]), STR_17(CODE[81]), STR_6(CODE[83]), 

    S504$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_34(CODE[21]), STR_33(CODE[21]), STR_32(CODE[21]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_27(CODE[21]), STR_26(CODE[21]), STR_25(CODE[21]), 
		 -> STR_24(CODE[21]), STR_23(CODE[21]), STR_22(CODE[8]), STR_21(CODE[21]), 
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[21]), STR_16(CODE[21]), 
		 -> STR_15(CODE[21]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[21]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_5(CODE[21]), STR_4(CODE[2]), STR_3(CODE[2]), 

    S576$4$1	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    S576$4$0	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    Wifi_connect@pass	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    aux	PTR unsigned char [10] size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    Wifi_connect@ssid	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    wifi_send@msg	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_53(CODE[14]), STR_52(CODE[40]), Wifi_cipsend@vtr(COMRAM[10]), Wifi_cipsend@str(COMRAM[20]), 
		 -> STR_51(CODE[15]), STR_50(CODE[14]), STR_49(CODE[17]), STR_48(CODE[15]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[18]), STR_44(CODE[11]), 
		 -> STR_43(CODE[11]), Wifi_connect@str(COMRAM[30]), STR_42(CODE[41]), STR_41(CODE[14]), 
		 -> STR_40(CODE[36]), STR_39(CODE[14]), STR_38(CODE[15]), STR_37(CODE[14]), 
		 -> STR_36(CODE[17]), STR_35(CODE[14]), 

    S1543eusartT$search_string	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)int  size(2) Largest target is 2
		 -> search(), 

    eusart.search_string	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)int  size(2) Largest target is 2
		 -> search(), 

    S1543eusartT$init	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> initEUSART(), 

    eusart.init	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> initEUSART(), 

    S1543eusartT$txSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> txStatusEUSART(), 

    eusart.txSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> txStatusEUSART(), 

    S1543eusartT$tx	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> txEUSART(), 

    eusart.tx	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> txEUSART(), 

    S1543eusartT$rxResetERROR	PTR FTN()void  size(2) Largest target is 1
		 -> rxResetErrorEUSART(), 

    eusart.rxResetERROR	PTR FTN()void  size(2) Largest target is 1
		 -> rxResetErrorEUSART(), 

    S1543eusartT$rxERROR	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxErrorEUSART(), 

    eusart.rxERROR	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxErrorEUSART(), 

    S1543eusartT$rxSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxStatusEUSART(), 

    eusart.rxSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxStatusEUSART(), 

    S1543eusartT$rx	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxEUSART(), 

    eusart.rx	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxEUSART(), 

    initSerialIO@ptrOut	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK0[1]), 

    main@ptr_940	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr_915	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@pt	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr	PTR unsigned char  size(2) Largest target is 20
		 -> main@lema(BANK0[20]), 

    S576$cipsend	PTR FTN(PTR unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_cipsend(), 

    wifi.cipsend	PTR FTN(PTR unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_cipsend(), 

    S576$config_servidor	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_config_servidor(), 

    wifi.config_servidor	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_config_servidor(), 

    S576$scan	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_scan(), 

    wifi.scan	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_scan(), 

    S576$autoconnect	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_autoconnect(), 

    wifi.autoconnect	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_autoconnect(), 

    S576$ip	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_ip(), 

    wifi.ip	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_ip(), 

    S576$connect	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_connect(), 

    wifi.connect	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_connect(), 

    S576$mode	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_mode(), 

    wifi.mode	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_mode(), 

    S576$receive	PTR FTN(PTR unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> wifi_receive(), 

    wifi.receive	PTR FTN(PTR unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> wifi_receive(), 

    S576$send	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> wifi_send(), 

    wifi.send	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> wifi_send(), 

    S576$init	PTR FTN(long ,)void  size(2) Largest target is 1
		 -> wifi_init(), 

    wifi.init	PTR FTN(long ,)void  size(2) Largest target is 1
		 -> wifi_init(), 

    S504$clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    S504$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    S504$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    S504$print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    S504$init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    dignum_apagar@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    decodifica@d	PTR unsigned char  size(2) Largest target is 18
		 -> main@vetor_aux(BANK0[16]), main@auxPasso(BANK0[1]), printExec@passo(COMRAM[1]), fifo_print@comando(COMRAM[1]), 
		 -> fila(COMRAM[18]), 

    codifica@dado	PTR unsigned char  size(2) Largest target is 2047
		 -> fifo_add_control@c(COMRAM[1]), fifo_add_tempo@t(COMRAM[1]), fifo_add@passo(COMRAM[1]), RAM(DATA[2047]), 

    sp__fifo_adrs	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    salva_atuadores_init@pt	PTR unsigned char  size(2) Largest target is 4
		 -> salva_atuadores_init@condi_init(COMRAM[4]), 

    buscar_dado@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@init_cond(BANK0[1]), 

    buscar_receita@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    salvar_receita@data	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S174$formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    S174$livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    S174$deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    S174$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    S174$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_29(CODE[78]), STR_28(CODE[62]), STR_17(CODE[81]), STR_6(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_34(CODE[21]), STR_33(CODE[21]), STR_32(CODE[21]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_27(CODE[21]), STR_26(CODE[21]), STR_25(CODE[21]), 
		 -> STR_24(CODE[21]), STR_23(CODE[21]), STR_22(CODE[8]), STR_21(CODE[21]), 
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_18(CODE[21]), STR_16(CODE[21]), 
		 -> STR_15(CODE[21]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[21]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_5(CODE[21]), STR_4(CODE[2]), STR_3(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    set_passo@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 


Critical Paths under _main in COMRAM

    _main->_Wifi_connect
    _wifi_init->_initEUSART
    _initEUSART->___lldiv
    _teclado_borda->_teclado_scan
    _setT1->___wmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _manipula_atuadores_init->_alt_atuador
    _formatar_receitas->_EEPROM_write
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    _deletar_receita->_end_receita
    _buscar_receita->___awmod
    _buscar_dado->___awmod
    ___aldiv->___lmul
    _Wifi_mode->_delay
    _Wifi_mode->_wifi_send
    _Wifi_connect->_wifi_send
    _wifi_send->_txEUSART
    _MCP4725->___aldiv
    _dac_write->_delay
    _dac_init->_delay
    _I2C_init->___lldiv

Critical Paths under _irq in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _irq in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _irq in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _irq in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _irq in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                96    96      0   83793
                                             40 COMRAM     2     2      0
                                              0 BANK0     93    93      0
                           _I2C_init
                            _MCP4725
                       _Wifi_connect *
                          _Wifi_mode *
                            ___aldiv
                            ___awmod
                             ___lmul
                             ___wmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                        _buscar_dado
                     _buscar_receita *
                         _decodifica
                              _delay
                    _deletar_receita *
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                  _formatar_receitas *
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
            _manipula_atuadores_init
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
                          _wifi_init *
 ---------------------------------------------------------------------------------
 (1) _wifi_init                                            4     0      4     616
                                             21 COMRAM     4     0      4
                         _initEUSART *
 ---------------------------------------------------------------------------------
 (2) _initEUSART                                           8     4      4     541
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        2     2      0     296
                                              5 COMRAM     2     2      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         5     5      0     204
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     478
                                              6 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         4     4      0     205
                                              3 COMRAM     4     4      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    3     3      0     114
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       6     4      2    1089
                                              6 COMRAM     6     4      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          5     3      2    1219
                                              6 COMRAM     5     3      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     235
                                              3 COMRAM     8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                            5     4      1   12960
                                             25 COMRAM     5     4      1
                         _decodifica
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         14    10      4    7167
                                             11 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _manipula_atuadores_init                              3     3      0     136
                                              3 COMRAM     3     3      0
                        _alt_atuador
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         5     0      5     294
                                              0 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _formatar_receitas                                    1     1      0     372
                                              2 COMRAM     1     1      0
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                           9     9      0    7013
                                              8 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                         _decodifica
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 7     7      0       0
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          2     2      0    4395
                                             15 COMRAM     2     2      0
                        _alt_atuador
                           _codifica
                         _decodifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _decodifica                                           4     2      2    1426
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     1     1      0    3013
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       2     0      2     120
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    4     4      0    2357
                                             11 COMRAM     4     4      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           3     1      2    2041
                                              8 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _codifica                                             5     3      2     590
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          4     2      2    1733
                                              7 COMRAM     4     2      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0    2023
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     176
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              5     2      3    4971
                                              7 COMRAM     5     2      3
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1386
                                              2 COMRAM     5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      2     2      0     176
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          5     3      2     757
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        2     0      2     540
                                              7 COMRAM     2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _deletar_receita                                      4     4      0     939
                                              4 COMRAM     4     4      0
                       _EEPROM_write
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     348
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _buscar_receita                                       6     4      2     763
                                              6 COMRAM     6     4      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _buscar_dado                                          6     3      3     893
                                              6 COMRAM     6     3      3
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     478
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wifi_mode                                            1     1      0    3629
                                              3 COMRAM     1     1      0
                              _delay
                          _wifi_send
 ---------------------------------------------------------------------------------
 (1) _Wifi_connect                                        37    33      4    2382
                                              3 COMRAM    37    33      4
                          _wifi_send
 ---------------------------------------------------------------------------------
 (2) _wifi_send                                            2     0      2    1716
                                              1 COMRAM     2     0      2
                           _txEUSART *
                     _txStatusEUSART *
 ---------------------------------------------------------------------------------
 (3) _txStatusEUSART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _txEUSART                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MCP4725                                              2     0      2    6031
                                             26 COMRAM     2     0      2
                           _I2C_stop
                            ___aldiv (ARG)
                             ___lmul (ARG)
                           _dac_init
                          _dac_write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_write                                            5     3      2    2141
                                              3 COMRAM     5     3      2
                    _I2C_ack_receive
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_init                                             0     0      0    1869
                    _I2C_ack_receive
                          _I2C_start
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     1      2    1847
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _I2C_tx                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ack_receive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             4     0      4     564
                                             13 COMRAM     4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  0     0      0       0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     ___lldiv
   _MCP4725
     _I2C_stop
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
     _dac_init (ARG)
       _I2C_ack_receive
       _I2C_start
       _I2C_tx
       _delay
     _dac_write (ARG)
       _I2C_ack_receive
       _I2C_tx
       _delay
     _delay (ARG)
   _Wifi_connect *
     _wifi_send
       _txEUSART *
       _txStatusEUSART *
   _Wifi_mode *
     _delay
     _wifi_send
       _txEUSART *
       _txStatusEUSART *
   ___aldiv *
     ___lmul (ARG)
   ___awmod *
   ___lmul *
   ___wmul *
   _addContCiclos *
   _addIndicePassos *
   _alt_atuador *
   _buscar_dado *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _buscar_receita *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _decodifica *
   _delay *
   _deletar_receita *
     _EEPROM_write
     _end_receita
   _dignum_apagar *
     ___lwdiv
   _dignum_conc *
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _codifica
     _decodifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _decodifica
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _formatar_receitas *
     _EEPROM_write
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _manipula_atuadores_init *
     _alt_atuador
   _printExec *
     _decodifica
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___wmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *
   _wifi_init *
     _initEUSART *
       ___lldiv

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      6A       7       41.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5D      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      5D       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      20        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed Nov 24 21:03:50 2021

              ??_fifo_add_control 0040                     dac_write@code 0034  
                ??_fifo_add_tempo 0040     __size_of_fifo_indicePrint_dec 0014  
   __size_of_fifo_indicePrint_inc 005E                                 _d 001D  
                     fp__txEUSART 0000                       _SSPSTATbits 000FC7  
                              l13 3A86                                l16 39C2  
                              l40 2B28                                l19 3DD2  
                              l35 2CF2                                l54 3CDE  
                              l57 3CF0                                l82 38A2  
                              l90 3590                                l93 3BD8  
                              l79 2A40                                l99 3932  
                    ___awdiv@sign 0036           __end_of_dispLCD_dataReg 38A4  
             ___wmul@multiplicand 0033                      printExec@col 004D  
                    printExec@ind 004A                    salvar_dado@col 0037  
                  salvar_dado@aux 0039                __size_of_I2C_start 0014  
                             l114 240A                               l116 2478  
                             l301 3F4C                               l230 3F7C  
                             l223 3E4C                               l119 3F5E  
                             l127 364C                               l152 3F1A  
                             l161 3D8E                               l233 3F72  
                             l242 3F2E                               l171 3A48  
                             l155 3CB0                               l307 32DA  
                             l251 3110                               l420 397A  
                             l404 209E                               l236 3DF0  
                             l252 31A8                               l245 3F78  
                             l157 3CBE                               l261 31B0  
                             l158 3CC2                               l182 3B6C  
                             l326 25CC                               l254 3126  
                             l174 3DB0                               l166 3A06  
                             l423 3C94                               l263 31C6  
                             l239 3F42                               l255 313C  
                             l440 2C10                               l264 31DC  
                             l344 270C                               l256 3152  
                             l177 3D44                               l361 3F56  
                             l265 31F2                               l417 2174  
                             l354 3756                               l266 3242  
                             l370 3F80                               l443 3EEA  
                             l451 22FE                               l436 2BD0  
                             l364 3F84                               l429 3AC2  
                             l349 37AE                               l381 3E8A  
                             l269 3F38                               l621 1A8E  
                             l438 2C06                               l358 38EA  
                             l278 33E2                               l367 3E36  
                             l287 3854                               l295 3EFC  
                             l377 35EE                               l393 2164  
                             l706 08FC                               l459 22FE  
                             l726 0A76                               l664 051E  
                             l825 14B4                               l930 36A2  
                             l922 3F6C                               l818 138E  
                             l931 36A6                               l940 3C66  
                             l829 14BE                               l926 365C  
                             l846 16D2                               l927 3678  
                             l791 0FC2                               l960 3EA2  
                             l928 367A                               l937 36FE  
                             l962 3EB0                               l963 3EB2  
                             l787 0F78                               l957 3AFC  
                             l981 3EB6                               l869 1A2C  
                             l894 1D94                               l983 3EC4  
                             l975 3E54                               l984 3EC6  
                             l978 3E62                               l996 3EFE  
                             l999 3F0C                               _IHM 00E1  
              deletar_receita@aux 0035                               _aux 0156  
                             _irq 0008           __size_of_buscar_receita 0042  
               fp__buscar_receita 0000           __end_of_dispLCD_instReg 2A42  
                    ___awmod@sign 0036                               tosl 000FFD  
                             wreg 000FE8                   __end_of_MCP4725 3DD4  
                 salvar_dado@data 0038                   salvar_dado@adrs 003B  
                alt_atuador@tecla 0033                      ?_buscar_dado 0037  
                            l1030 3BA2                              l1014 3F24  
                            l1024 2FBE                              l1133 3F66  
                            l1029 3B9C                              l1206 2F16  
                            l1136 3E9E                              l1072 3ED8  
                            l1250 3D6A                              l1066 3E0A  
                            l1219 2844                              l1139 34C4  
                            l1261 351E                              l1069 3E76  
                            l1262 352E                              l1329 2950  
                            l1179 3C08                              l1284 3108  
                            l1188 3064                              l1277 30F8  
                            l1481 2DB6                              l1741 344E  
                            l5021 2956                              l5101 2DAE  
                            l1494 2E66                              l5111 3CD8  
                            l5031 29AC                              l5023 296E  
                            l5105 3EA0                              l5113 3E50  
                            l5121 3872                              l5041 29DE  
                            l5033 29AE                              l5025 2980  
                            l5201 2DB8                              l6001 2000  
                            l5115 3EFE                              l5107 3CC4  
                            l5131 3896                              l5123 3874  
                            l5051 2A02                              l5043 29E6  
                            l5035 29C2                              l5027 2992  
                            l5019 2954                              l5211 2DE4  
                            l5203 2DBC                              l6011 2042  
                            l6003 2010                              l1748 3456  
                            l5109 3CC8                              l5301 3F16  
                            l5133 38A0                              l5125 387C  
                            l5117 3858                              l5053 2A12  
                            l5037 29C4                              l5045 29E8  
                            l5029 29A4                              l5141 354A  
                            l5061 2CF4                              l5221 2E1C  
                            l5213 2DEC                              l5205 2DCA  
                            l6013 2044                              l6005 2016  
                            l6021 206E                              l6101 2270  
                            l5303 3F18                              l5311 3C9E  
                            l5127 387E                              l5119 385A  
                            l5055 2A24                              l5047 29EA  
                            l5039 29DC                              l5135 3532  
                            l5071 2D20                              l5063 2CF8  
                            l5231 2E56                              l5223 2E32  
                            l5215 2DFE                              l5207 2DD2  
                            l6031 20A8                              l6023 207E  
                            l6015 205A                              l6007 2018  
                            l6111 22A8                              l6103 227C  
                            l5241 3A5A                              l5321 3CAE  
                            l5313 3CA2                              l5129 3880  
                            l5057 2A36                              l5049 2A00  
                            l5137 353A                              l5145 3552  
                            l5401 24A8                              l5081 2D4E  
                            l5073 2D28                              l5065 2D06  
                            l5161 3A88                              l5233 2E5E  
                            l5225 2E3A                              l5217 2E06  
                            l5209 2DD6                              l6033 20B6  
                            l6025 208E                              l6017 2062  
                            l6009 2028                              l5153 3F7A  
                            l6121 22F4                              l6113 22B0  
                            l6105 2286                              l6201 36B8  
                            l7001 1610                              l5243 3A60  
                            l5251 397C                              l5323 3D6C  
                            l5315 3CA4                              l5307 3C98  
                            l5059 2A3E                              l5139 3542  
                            l5147 3584                              l5411 24F8  
                            l5403 24B8                              l5091 2D88  
                            l5083 2D56                              l5075 2D2C  
                            l5067 2D0E                              l5163 3A90  
                            l5227 2E40                              l5219 2E0E  
                            l6051 2150                              l6035 20C2  
                            l6027 209E                              l6043 20D4  
                            l6107 228E                              l6115 22BA  
                            l6203 36E6                              l6123 3F1C  
                            l6131 3E02                              l7003 1636  
                            l5181 3076                              l6141 3AC8  
                            l5261 3EB4                              l5245 3A64  
                            l5237 3A4A                              l5253 399A  
                            l5173 3F62                              l6221 2E7A  
                            l6301 288A                              l5317 3CA6  
                            l5309 3C9A                              l5421 2538  
                            l5413 2508                              l5405 24C8  
                            l5093 2D8A                              l5085 2D64  
                            l5077 2D34                              l5069 2D12  
                            l5165 3AAC                              l5229 2E46  
                            l6053 2158                              l6037 20CA  
                            l6029 20A6                              l6045 212E  
                            l5157 3EEE                              l6117 22CC  
                            l6109 229C                              l6205 36E8  
                            l5501 2F20                              l6133 3E04  
                            l6125 3DF2                              l7101 19CC  
                            l7021 16C6                              l7005 1642  
                            l7013 1652                              l5191 30B8  
                            l5183 308C                              l6143 3AD0  
                            l5247 3A76                              l5239 3A4E  
                            l5255 399E                              l5175 3E8C  
                            l6231 2EEC                              l6223 2EAA  
                            l6311 28C8                              l6303 288E  
                            l5319 3CAA                              l5415 2518  
                            l5407 24D8                              l5095 2D90  
                            l5087 2D6A                              l5079 2D46  
                            l5167 3AAE                              l5351 31AC  
                            l6055 215A                              l6047 2140  
                            l6151 3C3C                              l5271 2338  
                            l5263 2302                              l6119 22D8  
                            l6071 2180                              l5327 310C  
                            l6207 36FA                              l6135 3E06  
                            l6127 3DF4                              l7111 1A0C  
                            l7103 19D6                              l7023 16D2  
                            l7015 167C                              l7007 164A  
                            l5193 30D6                              l5185 3094  
                            l6145 3AF8                              l5249 3A7A  
                            l5257 39AA                              l6241 2742  
                            l6233 2EFE                              l6225 2EBC  
                            l6321 2910                              l6313 28D6  
                            l6305 289E                              l6065 3936  
                            l5417 2528                              l5409 24E8  
                            l5425 259A                              l5089 2D80  
                            l5097 2D96                              l5169 3AC0  
                            l5361 25CE                              l6049 214C  
                            l6161 3C56                              l6153 3C4C  
                            l5281 238C                              l5273 2340  
                            l5265 2316                              l6081 21D8  
                            l6073 2190                              l5337 3168  
                            l5345 316E                              l5601 2C28  
                            l5521 2FB6                              l5513 2F54  
                            l5505 2F34                              l6137 3E08  
                            l6129 3DF8                              l6217 3BDA  
                            l7201 1DCC                              l7121 1A54  
                            l7113 1A24                              l7105 19DE  
                            l7041 17F4                              l7025 16F2  
                            l7017 169A                              l8001 14EE  
                            l6401 0116                              l5195 30E6  
                            l5187 30A0                              l5179 3066  
                            l6147 3AFA                              l6139 3AC4  
                            l5259 39B2                              l6251 2776  
                            l6243 2746                              l6235 270E  
                            l6227 2EC8                              l6219 2E6A  
                            l6323 291A                              l6315 28E0  
                            l6307 28B4                              l6067 3C68  
                            l5099 2DA6                              l5451 2B86  
                            l5443 2B46                              l5435 2B2A  
                            l5355 3208                              l5371 2622  
                            l6059 2164                              l6171 3C60  
                            l6163 3C58                              l6155 3C50  
                            l5291 23F4                              l5283 23AA  
                            l5275 2348                              l5267 2326  
                            l6091 2228                              l6075 21A0  
                            l6083 21E2                              l8011 2CAC  
                            l5611 2C78                              l5603 2C38  
                            l5515 2F80                              l5507 2F50  
                            l5531 345E                              l7203 1DDC  
                            l7211 1E20                              l7131 1A78  
                            l7123 1A66                              l7107 19EE  
                            l7115 1A30                              l7051 1820  
                            l7027 1732                              l7035 175E  
                            l7019 16C0                              l8003 1666  
                            l6411 013E                              l6403 011E  
                            l5197 30E8                              l5189 30AE  
                            l6261 27D0                              l6253 2788  
                            l6245 2748                              l6237 2712  
                            l6229 2ED4                              l6317 28FE  
                            l6309 28BC                              l6325 2920  
                            l5701 3916                              l5461 2BE2  
                            l5453 2B96                              l5445 2B56  
                            l5437 2B2E                              l8021 321C  
                            l5381 2672                              l5373 2632  
                            l5365 25EA                              l6173 3C62  
                            l6165 3C5A                              l6157 3C52  
                            l6149 3C3A                              l5293 2404  
                            l5285 23B0                              l5277 236E  
                            l5269 232E                              l6093 222A  
                            l6085 21F2                              l6077 21BA  
                            l6069 2178                              l8013 3182  
                            l5613 2C88                              l5605 2C48  
                            l5517 2FA4                              l5525 2FBC  
                            l6181 3B6E                              l5541 34B8  
                            l5533 34B0                              l7205 1E02  
                            l7133 1A84                              l7125 1A6E  
                            l7117 1A42                              l7109 19FE  
                            l7053 184C                              l7045 1808  
                            l7037 17D0                              l8005 1772  
                            l7029 173C                              l6501 037C  
                            l7141 1BDA                              l6421 018E  
                            l6413 0142                              l6405 0126  
                            l5199 30F2                              l6271 2804  
                            l6263 27D4                              l6255 2798  
                            l6247 2764                              l6239 2728  
                            l6327 2930                              l6319 290E  
                            l5703 3F58                              l5711 3614  
                            l8023 2554                              l5463 2BF2  
                            l5455 2BAC                              l5447 2B66  
                            l5439 2B32                              l5383 2682  
                            l5375 2642                              l5367 2602  
                            l6175 3C64                              l6167 3C5C  
                            l6159 3C54                              l8015 2AE2  
                            l5631 2A58                              l5623 2A44  
                            l5295 245E                              l5279 2370  
                            l5287 23B2                              l6095 2246  
                            l6087 2202                              l6079 21BC  
                            l5607 2C58                              l5519 2FA6  
                            l6191 3BA0                              l6183 3B72  
                            l5551 34C2                              l5543 34BA  
                            l5535 34B2                              l7207 1E18  
                            l7151 1C10                              l7143 1BE2  
                            l7215 1E2A                              l8007 1AA4  
                            l7119 1A4E                              l7071 1882  
                            l7055 1858                              l7047 180C  
                            l7063 1866                              l7039 17EE  
                            l6511 03DA                              l6503 0384  
                            l6431 01A0                              l6407 012A  
                            l5561 3034                              l5553 2FC0  
                            l6273 2816                              l6265 27D6  
                            l6257 279A                              l6249 2774  
                            l6329 2940                              l6281 34D6  
                            l5297 3F10                              l5713 361E  
                            l5705 35F0                              l8025 25AE  
                            l5457 2BBC                              l5449 2B76  
                            l5385 2692                              l5377 2652  
                            l5369 2612                              l8017 20E8  
                            l6169 3C5E                              l5625 2A48  
                            l5289 23E4                              l5473 3EDC  
                            l6089 220E                              l6097 2250  
                            l5801 3376                              l5721 39D8  
                            l5481 3F68                              l6177 3E64  
                            l5609 2C68                              l5617 2C98  
                            l6185 3B78                              l5545 34BC  
                            l5537 34B4                              l5529 3458  
                            l8009 1E40                              l7161 1C5C  
                            l7153 1C22                              l7145 1BEA  
                            l7065 186A                              l6601 0740  
                            l6521 045E                              l6513 03E2  
                            l6441 01CC                              l6425 0196  
                            l6417 0156                              l5555 2FC4  
                            l6275 2826                              l6267 27F2  
                            l6259 27B6                              l6291 284A  
                            l6283 34E4                              l5299 3F14  
                            l5571 33EC                              l5563 3D46  
                            l8027 3566                              l5715 362A  
                            l5707 35F4                              l5395 247C  
                            l5459 2BCC                              l8019 26BE  
                            l5379 2662                              l5643 2A78  
                            l5475 3EDC                              l6099 2260  
                            l5811 339E                              l5803 337E  
                            l5731 39F6                              l5491 368C  
                            l5483 3650                              l6195 36A8  
                            l6179 3EC8                              l6187 3B88  
                            l5547 34BE                              l5539 34B6  
                            l7171 1CE2                              l7163 1C68  
                            l7155 1C32                              l7147 1BF4  
                            l7091 1948                              l7083 18D6  
                            l7075 1896                              l7059 1860  
                            l6603 076A                              l6531 04C0  
                            l6523 0464                              l6515 040A  
                            l6507 038E                              l6443 01F8  
                            l6435 01B4                              l6419 0182  
                            l7139 1A8E                              l6371 006A  
                            l6363 0012                              l5557 2FF2  
                            l6277 2838                              l6269 2802  
                            l6293 2858                              l6285 34F4  
                            l5741 3A20                              l5733 3A0A  
                            l5581 3422                              l5573 33FE  
                            l5565 3D62                              l5709 3602  
                            l5717 362E                              l5397 2480  
                            l5469 2C0A                              l5901 38E6  
                            l5389 26A2                              l5661 2AA8  
                            l5637 2A68                              l5477 3EE8  
                            l5821 33CC                              l5813 33A2  
                            l5805 3386                              l5485 365E  
                            l5493 3692                              l6197 36AC  
                            l6189 3B98                              l5549 34C0  
                            l7181 1D3E                              l7173 1CE6  
                            l7165 1CB8                              l7157 1C3A  
                            l7149 1C00                              l7093 1952  
                            l7077 18C2                              l7069 187E  
                            l6701 0A66                              l6621 07D0  
                            l6613 07A6                              l6605 0788  
                            l6533 04D8                              l6525 0470  
                            l6517 0414                              l6509 03C8  
                            l6461 025E                              l6445 0204  
                            l6437 01B8                              l6453 0212  
                            l6429 019C                              l6381 00D6  
                            l6373 0076                              l6365 0016  
                            l5591 3DB2                              l5559 3030  
                            l6295 2868                              l6287 34FE  
                            l6279 34C6                              l5751 3D32  
                            l5743 3A36                              l5735 3A1C  
                            l5583 3438                              l5575 3406  
                            l5399 2498                              l5903 3F4E  
                            l5911 3E22                              l5655 2A98  
                            l5831 3810                              l5815 33AA  
                            l5823 33D0                              l5807 338E  
                            l5727 39DC                              l5719 39C6  
                            l5495 36A4                              l5487 3672  
                            l6199 36B0                              l7191 1D90  
                            l7175 1D0E                              l7167 1CC2  
                            l7159 1C4A                              l7079 18CE  
                            l7087 18DC                              l6711 0B14  
                            l6703 0A76                              l6623 07DC  
                            l6615 07AA                              l6631 07EA  
                            l6607 078C                              l6551 05EE  
                            l6543 052E                              l6535 04F0  
                            l6527 0488                              l6519 042C  
                            l6471 0292                              l6463 026A  
                            l6455 021A                              l6391 00EA  
                            l6383 00DA                              l6375 0096  
                            l6367 001A                              l5593 3DC2  
                            l6297 286C                              l6289 2846  
                            l5745 3A38                              l5761 3B4E  
                            l5753 3B38                              l5585 3440  
                            l5577 340E                              l5569 33E4  
                            l5905 3F52                              l5921 35A2  
                            l5673 2AC8                              l5649 2A88  
                            l5681 2ACE                              l5841 3840  
                            l5825 33E0                              l5817 33C2  
                            l5809 3396                              l5729 39F4  
                            l5489 3688                              l7193 1D9C  
                            l7185 1D5C                              l7169 1CD2  
                            l7177 1D18                              l7097 1970  
                            l7089 1934                              l6801 0E24  
                            l6713 0B32                              l6721 0B56  
                            l6633 07EE                              l6609 0792  
                            l6561 061A                              l6545 0590  
                            l6537 050E                              l6553 05F4  
                            l6529 04A2                              l6481 02E8  
                            l6465 0274                              l6473 0298  
                            l6457 0246                              l6449 020C  
                            l6393 0102                              l6385 00DE  
                            l6377 00A2                              l6369 003E  
                            ?_irq 0031                              l5595 3DC6  
                            l6299 287A                              l5763 3B5A  
                            l5755 3B4A                              l5587 3442  
                            l5579 341C                              l5691 38EE  
                            l5851 3254                              l5907 3F82  
                            l5931 3E88                              l5923 35DC  
                            l5915 3F7E                              l5771 3E10  
                            l5667 2AB8                              l5835 3824  
                            l5843 3844                              l5819 33C8  
                            l5747 3D92                              l5499 2F18  
                            l7179 1D34                              l7099 199C  
                            l6811 0E76                              l6803 0E2E  
                            l6715 0B46                              l6707 0A86  
                            l6731 0B72                              l6651 0840  
                            l6643 081A                              l6627 07E4  
                            l6619 07BE                              l6571 0660  
                            l6563 0624                              l6555 05F8  
                            l6547 05BC                              l6539 051E  
                            l6491 033A                              l6483 02F2  
                            l6475 02B0                              l6467 0282  
                            l6459 0258                              l6395 0106  
                            l6387 00E2                              l6379 00D0  
                            l5749 3D20                              l5765 3B5C  
                            l5589 3448                              l5693 38F2  
                            l5845 3F44                              l5853 3264  
                            l5861 32D6                              l5925 35E2  
                            l5941 1EBC                              l5933 1E92  
                            l5773 3E1A                              l5781 3DD4  
                            l5837 3838                              l5829 3808  
                            l5597 2C14                              l7197 1DBE  
                            l7189 1D7E                              l6901 11E0  
                            l6813 0E9C                              l6805 0E54  
                            l6741 0C64                              l6733 0BE4  
                            l6709 0AE8                              l6717 0B4C  
                            l6661 0888                              l6645 082C  
                            l6637 0802                              l6581 06A2  
                            l6573 066A                              l6565 0628  
                            l6549 05DA                              l6557 05FE  
                            l6493 0354                              l6485 02F6  
                            l6477 02C4                              l6469 0286  
                            l6397 010A                              l6389 00E6  
                            l5775 3E38                              l5695 3900  
                            l5687 3BA4                              l5871 3798  
                            l5863 375A                              l5855 3266  
                            l5927 35EA                              l5919 3592  
                            l5951 1EEA                              l5943 1EC2  
                            l5935 1E9E                              l5767 3E0C  
                            l5783 3DDA                              l5791 3F3A  
                            l5839 383E                              l5599 2C18  
                            l7199 1DC2                              l6911 12A2  
                            l6903 121A                              l6831 0F36  
                            l6815 0EAA                              l6807 0E62  
                            l6751 0CC8                              l6743 0C90  
                            l6735 0C02                              l6719 0B50  
                            l6671 08F0                              l6647 0838  
                            l6639 0806                              l6655 0846  
                            l6591 0724                              l6575 0684  
                            l6567 063A                              l6559 0616  
                            l6495 035E                              l6487 031C  
                            l6479 02CE                              l6399 010E  
                            l5777 3E4A                              l5697 3910  
                            l5689 3BB4                              l5873 379A  
                            l5865 376A                              l5881 3722  
                            l5857 3282                              l5849 3244  
                            l5929 3E78                              l5961 1F1C  
                            l5953 1EF2                              l5945 1EC8  
                            l5937 1EA2                              l5785 3DE0  
                            l5793 3F26                              l6921 12E4  
                            l6913 12C0                              l6905 1254  
                            l6841 0FAC                              l6833 0F62  
                            l6817 0EB4                              l6809 0E6C  
                            l6825 0EC6                              l6761 0D06  
                            l6753 0CCE                              l6745 0C9A  
                            l6737 0C2E                              l6681 096C  
                            l6673 08FC                              l6665 08A6  
                            l6657 086A                              l6593 0730  
                            l6577 068E                              l6569 064C  
                            l6497 036A                              l6489 0330  
                            l5795 3F74                              l5699 3914  
                            l5867 377A                              l5875 37AA  
                            l5891 38A6                              l5883 3730  
                            l5859 32C6                              l5963 1F1E  
                            l5971 1F4C                              l5955 1F02  
                            l5947 1ED8                              l5939 1EAC  
                            l5787 3DE8                              l5779 3F6E  
                            l6931 1340                              l6923 12F6  
                            l6915 12CC                              l6907 128C  
                            l6851 0FDC                              l6843 0FCA  
                            l6835 0F6C                              l6827 0F10  
                            l6819 0EBE                              l6771 0D44  
                            l6763 0D0C                              l6755 0CD8  
                            l6747 0CB0                              l6739 0C5A  
                            l6691 09E0                              l6683 0984  
                            l6675 0920                              l6667 08C4  
                            l6659 087E                              l6595 0738  
                            l6579 069A                              l6587 06AA  
                            l6499 0374                              l5869 3788  
                            l5893 38B6                              l5885 3740  
                            l5877 3702                              l5981 1F96  
                            l5973 1F5C                              l5965 1F34  
                            l5957 1F06                              l5949 1EDA  
                            l5797 3F30                              l6933 1350  
                            l6941 1392                              l6917 12D4  
                            l6909 129E                              l6837 0F78  
                            l6829 0F18                              l6781 0D82  
                            l6773 0D4A                              l6765 0D16  
                            l6757 0CEE                              l6749 0CBE  
                            l6693 09FA                              l6685 09B6  
                            l6677 0928                              l6669 08EA  
                            l6589 06DC                              l5895 38C4  
                            l5887 3742                              l5879 3712  
                            l5991 1FCE                              l5975 1F76  
                            l5967 1F44                              l5959 1F16  
                            l5799 3366                              l6951 13D0  
                            l6943 13A4                              l6935 1360  
                            l6919 12DC                              l6927 12FE  
                            l6863 1004                              l6855 0FE4  
                            l6847 0FD4                              l6839 0F8C  
                            l6871 101E                              l6791 0DD2  
                            l6783 0D88                              l6775 0D54  
                            l6767 0D2C                              l6759 0CFC  
                            l6695 0A18                              l6687 09BC  
                            l6679 0962                              l5897 38D4  
                            l5889 3752                              l5993 1FD2  
                            l5977 1F78                              l5969 1F4A  
                            l5985 1FA2                              l6953 13FC  
                            l6945 13B0                              l6937 136E  
                            l6929 1338                              l6881 10F6  
                            l6873 1088                              l6865 100E  
                            l6793 0DDC                              l6785 0D92  
                            l6777 0D6A                              l6769 0D3A  
                            l6697 0A30                              l6689 09C8  
                            l5899 38D6                              l5995 1FE2  
                            l5987 1FB2                              l5979 1F8E  
                            l6971 1494                              l6963 145E  
                            l6955 142C                              l6947 13B6  
                            l6939 1386                              l6891 116A  
                            l6883 1130                              l6867 1016  
                            l6859 0FFC                              l6795 0DE6  
                            l6787 0D9E                              l6779 0D78  
                            l6699 0A48                              l5997 1FE8  
                            l5989 1FC2                              l6981 14CA  
                            l6973 14AC                              l6965 1466  
                            l6957 1436                              l6949 13C8  
                            l6893 1196                              l6885 113A  
                            l6877 1090                              l6797 0E0C  
                            l6789 0DC4                              l5999 1FEA  
                            l6991 1542                              l6967 1476  
                            l6959 143C                              l6895 11A0  
                            l6887 1146                              l6879 10BC  
                            l6799 0E1A                              l6993 156E  
                            l6969 1486                              l6897 11AA  
                            l6889 1158                              l6995 15CA  
                            l6979 14C2                              l6987 14DA  
                            l6899 11B4                              l6997 15D4  
                            l6989 1524                              l6999 15E2  
                            l7991 0AA2                              l7983 03A2  
         __end_of_getIndicePassos 3F7E                              l7993 0B86  
                            l7985 054A                              l7995 0EDA  
                            l7987 06BE                              l7997 1032  
                            l7989 0754                              l7999 1312  
                            STR_1 7FF7                              STR_2 7FE6  
                            STR_3 7FFD                              STR_4 7DAA  
                            STR_5 7DD6                              STR_6 7BDD  
                            STR_7 7F11                              STR_8 7E93  
                            STR_9 7EE7                              u3100 2A12  
                            u3101 2A0E                              u3110 2A24  
                            u3111 2A20                              u3200 3E62  
                            u3120 2D06                              u4000 3264  
                            u3201 3E5E                              u3121 2D02  
                            u4001 3260                              u3210 3F0C  
                            u3130 2D20                              u4010 3282  
                            u3211 3F08                              u3131 2D1C  
                            u4011 327E                              u3140 2D46  
                            u3220 3AC0                              u4020 376A  
                            u4100 35DC                              u3300 2DFE  
                            u3141 2D42                              u3221 3ABC  
                            u4021 3766                              u4101 35D8  
                            u3301 2DFA                              u3230 3E9C  
                            u3070 2980                              u3150 2D64  
                            u4030 377A                              u4110 3E88  
                            u3310 2E1C                              u3231 3E96  
                            u3071 297C                              u3151 2D60  
                            u4031 3776                              u4111 3E84  
                            u3311 2E18                              u3240 3E9E  
                            u3080 2992                              u3160 2D80  
                            u4040 3712                              u3320 2E32  
                            u4200 1FE2                              u4120 1EBC  
                            u3400 23A6                              u3081 298E  
                            u3161 2D7C                              u4041 370E  
                            u3321 2E2E                              u4201 1FDE  
                            u4121 1EB8                              u3401 23A2  
                            u3250 308C                              u3090 29C2  
                            u3170 2DA6                              u4050 3722  
                            u3330 2E56                              u4210 2010  
                            u4130 1EEA                              u3410 23E4  
                            u3251 3088                              u3091 29BE  
                            u3171 2DA2                              u4051 371E  
                            u3331 2E52                              u4211 200C  
                            u4131 1EE6                              u3411 23E0  
                            u3260 30AE                              u3180 3EB0  
                            u4060 38B6                              u3500 31C0  
                            u4220 2028                              u4140 1F02  
                            u3420 23F4                              u4300 21BA  
                            u5100 0E54                              u3261 30AA  
                            u3181 3EAC                              u4061 38B2  
                            u3501 31BA                              u4221 2024  
                            u4141 1EFE                              u3421 23F0  
                            u4301 21B6                              u5101 0E50  
                            u3270 30D6                              u3350 3EC4  
                            u3190 3CF0                              u4070 3E34  
                            u4230 207E                              u4150 1F16  
                            u3430 2404                              u4310 21F2  
                            u5110 0E9C                              u3271 30D2  
                            u3351 3EC0                              u3191 3CEC  
                            u4071 3E2E                              u4231 207A  
                            u4151 1F12                              u3431 2400  
                            u4311 21EE                              u5111 0E98  
                            u3600 2498                              u3520 31D6  
                            u4080 3E36                              u3280 2DCA  
                            u4240 208E                              u4160 1F44  
                            u3440 2478                              u3360 2312  
                            u4320 2202                              u4400 36FA  
                            u5200 1158                              u5040 0CB0  
                            u5008 0BEE                              u3345 3988  
                            u3601 2494                              u3521 31D0  
                            u3281 2DC6                              u4241 208A  
                            u4161 1F40                              u3441 2474  
                            u3361 230C                              u4321 21FE  
                            u4401 36F6                              u5201 1154  
                            u5041 0CAC                              u5009 0C02  
                            u3450 3CBE                              u3610 2B42  
                            u4090 35A2                              u3290 2DE4  
                            u4250 20B6                              u4170 1F5C  
                            u3370 2314                              u4330 2228  
                            u5210 116A                              u5050 0CEE  
                            u5018 0C0C                              u3451 3CBA  
                            u3611 2B3E                              u3515 31C2  
                            u4091 359E                              u3291 2DE0  
                            u4251 20B2                              u4171 1F58  
                            u4331 2224                              u5211 1166  
                            u5051 0CEA                              u5019 0C2E  
                            u4500 351E                              u3620 2B66  
                            u3540 31EC                              u4260 2140  
                            u4180 1FB2                              u3380 2326  
                            u4340 2260                              u3460 3120  
                            u3700 3688                              u5300 1350  
                            u5140 0F8C                              u5060 0D2C  
                            u5028 0C38                              u4501 351A  
                            u3621 2B62                              u3541 31E6  
                            u4261 213C                              u4181 1FAE  
                            u3381 2322                              u4341 225C  
                            u3461 311A                              u3701 3684  
                            u5301 134C                              u5141 0F88  
                            u5061 0D28                              u5029 0C5A  
                            u4430 2E7A                              u4510 2858  
                            u3630 2B86                              u4270 2174  
                            u4190 1FC2                              u3390 236E  
                            u4350 2270                              u3470 3136  
                            u3710 36A2                              u5310 1360  
                            u5150 0FAC                              u5070 0D6A  
                            u5038 0C6E                              u4431 2E76  
                            u4511 2854                              u6007 3876  
                            u3631 2B82                              u3535 31D8  
                            u4271 2170                              u4191 1FBE  
                            u3391 236A                              u4351 226C  
                            u3471 3130                              u3711 369E  
                            u5311 135C                              u5151 0FA8  
                            u5071 0D66                              u5039 0C90  
                            u4440 2EBC                              u4520 287A  
                            u3640 2B96                              u3560 3202  
                            u4360 229C                              u4280 2190  
                            u3480 314C                              u3720 2F30  
                            u5400 14AC                              u5320 1386  
                            u5160 0FF8                              u5128 0F22  
                            u5080 0DC4                              u4441 2EB8  
                            u4521 2876                              u6017 389A  
                            u3641 2B92                              u3561 31FC  
                            u4361 2298                              u4281 218C  
                            u3481 3146                              u3721 2F2C  
                            u5401 14A8                              u5321 1382  
                            u5161 0FF4                              u5129 0F36  
                            u5081 0DC0                              u3810 302E  
                            u4450 2EFE                              u4530 28B4  
                            u3650 2BBC                              u4370 22CC  
                            u4290 21A0                              u3490 3162  
                            u3466 3122                              u5330 13A4  
                            u5138 0F40                              u5090 0E0C  
                            u4610 013A                              u6027 3CCE  
                            u4451 2EFA                              u4531 28B0  
                            u3651 2BB8                              u3555 31EE  
                            u4371 22C8                              u4291 219C  
                            u3491 315C                              u5331 13A0  
                            u5139 0F62                              u5091 0E08  
                            u4611 0136                              u3820 3054  
                            u4540 28D6                              u3660 2BCC  
                            u3580 25E6                              u3476 3138  
                            u3900 3A06                              u4380 3B88  
                            u4428 3BF4                              u5340 13C8  
                            u5228 1174                              u4700 02E8  
                            u4620 0152                              u4461 271C  
                            u4541 28D2                              u3661 2BC8  
                            u3581 25E2                              u3901 3A02  
                            u4381 3B84                              u4429 3C08  
                            u5341 13C4                              u5229 1196  
                            u4701 02E4                              u4621 014E  
                            u3830 3064                              u4470 2764  
                            u4550 28FE                              u3910 3A48  
                            u3670 2BE2                              u3590 2602  
                            u3486 314E                              u3750 2F80  
                            u3734 2F46                              u4390 3B98  
                            u5270 129E                              u5238 11BE  
                            u3831 3060                              u4471 2760  
                            u4551 28FA                              u3911 3A44  
                            u3671 2BDE                              u3575 3204  
                            u3591 25FE                              u3751 2F7C  
                            u3735 2F42                              u4391 3B94  
                            u5271 129A                              u5239 11E0  
                            u3808 2FFC                              u4480 27F2  
                            u4560 2930                              u3920 3B6C  
                            u3840 33FE                              u3680 2C02  
                            u3496 3164                              u3760 2FB6  
                            u3744 2F66                              u5600 196C  
                            u5520 1804                              u5248 11EA  
                            u4800 05BC                              u4720 0354  
                            u4640 01B0                              u4608 00BC  
                            u3817 3024                              u3809 3030  
                            u4481 27EE                              u4561 292C  
                            u3921 3B68                              u3841 33FA  
                            u3681 2BFE                              u3761 2FB2  
                            u3745 2F62                              u5601 1968  
                            u5521 1800                              u5249 121A  
                            u4801 05B8                              u4721 0350  
                            u4641 01AC                              u4609 00D0  
                            u4490 34E4                              u3930 3E4A  
                            u3850 341C                              u3690 3672  
                            u5530 181C                              u5418 152E  
                            u5290 12F6                              u5258 1224  
                            u5178 109A                              u4810 0616  
                            u4650 01C8                              u3827 304A  
                            u4491 34E0                              u3931 3E46  
                            u3851 3418                              u3691 366E  
                            u5531 1818                              u5419 1542  
                            u5291 12F2                              u5259 1254  
                            u5179 10BC                              u4811 0612  
                            u4651 01C4                              u3860 3438  
                            u3940 33C2                              u5700 1C32  
                            u5508 1746                              u5428 154C  
                            u5380 1476                              u5268 125E  
                            u5188 10C6                              u4820 0684  
                            u4740 042C                              u3861 3434  
                            u3941 33BE                              u5701 1C2E  
                            u5509 175A                              u5429 156E  
                            u5381 1472                              u5269 128C  
                            u5189 10F6                              u4821 0680  
                            u4741 0428                              u3790 2FF2  
                            u3870 3932                              u3950 33E0  
                            u5710 1C4A                              u5630 19EE  
                            u5550 187A                              u5518 17DA  
                            u5438 1578                              u5390 1486  
                            u5358 13DA                              u5198 1100  
                            u4718 0308                              u4638 0160  
                            u3791 2FEE                              u3871 392E  
                            u3951 33DC                              u3775 3480  
                            u5711 1C46                              u5631 19EA  
                            u5551 1876                              u5519 17EE  
                            u5439 159E                              u5391 1482  
                            u5359 13FC                              u5199 1130  
                            u4719 031C                              u4639 0182  
                            u3880 3614                              u3960 3820  
                            u5800 1E02                              u5720 1C5C  
                            u5640 19FE                              u5560 1892  
                            u5448 15A8                              u5368 1406  
                            u5288 12AC                              u4920 0984  
                            u4840 07A2                              u4760 0488  
                            u3881 3610                              u3961 381C  
                            u5801 1DFE                              u5721 1C58  
                            u5641 19FA                              u5561 188E  
                            u5449 15CA                              u5369 142C  
                            u5289 12C0                              u4921 0980  
                            u4841 079E                              u4761 0484  
                            u4681 0250                              u3890 364C  
                            u3970 3838                              u5810 1E18  
                            u5730 1CD2                              u5650 1A24  
                            u5618 197A                              u5458 15E8  
                            u5378 1446                              u4850 07BA  
                            u4770 04A2                              u4738 03EC  
                            u4690 02B0                              u3891 3648  
                            u3971 3834                              u5811 1E14  
                            u5731 1CCE                              u5651 1A20  
                            u5619 199C                              u5459 1610  
                            u5379 145A                              u4851 07B6  
                            u4771 049E                              u4739 040A  
                            u4691 02AC                              u3788 2FCE  
                            u3980 3854                              u5740 1CE2  
                            u5660 1A42                              u5628 19A6  
                            u5548 182A                              u5468 1622  
                            u4940 09E0                              u4908 08D6  
                            u4860 07FE                              u4780 04D8  
                            u4668 01D6                              u4588 0054  
                            u3789 2FE2                              u3981 3850  
                            u5741 1CDE                              u5661 1A3E  
                            u5629 19CC                              u5549 184C  
                            u5469 1636                              u4941 09DC  
                            u4909 08EA                              u4861 07FA  
                            u4781 04D4                              u4669 01F8  
                            u4589 006A                              u3990 3254  
                            u5750 1D58                              u5670 1A66  
                            u5478 1686                              u4950 09FA  
                            u4918 0932                              u4870 0816  
                            u4838 0774                              u4790 04F0  
                            u4758 0436                              u4678 0224  
                            u4598 0080                              u3991 3250  
                            u5751 1D54                              u5671 1A62  
                            u5479 169A                              u4951 09F6  
                            u4919 0962                              u4871 0812  
                            u4839 0788                              u4791 04EC  
                            u4759 045E                              u4679 0246  
                            u4599 0096                              u5760 1D7A  
                            u5680 1C10                              u5488 16AC  
                            u4960 0A30                              u4880 08A2  
                            u5761 1D76                              u5681 1C0C  
                            u5489 16C0                              u4961 0A2C  
                            u4881 089E                              u5770 1D90  
                            u5690 1C22                              u5578 18A0  
                            u5498 16F8                              u4970 0A48  
                            u4938 098E                              u5771 1D8C  
                            u5691 1C1E                              u5579 18C2  
                            u5499 1732                              u4971 0A44  
                            u4939 09B6                              u5780 1DBA  
                            u5588 18E6                              u4980 0B14  
                            u5781 1DB6                              u5589 1908  
                            u4981 0B10                              u5790 1DDC  
                            u5598 1912                              u4990 0B6E  
                            u5791 1DD8                              u5599 1934  
                            u4991 0B6A                              u4898 08B0  
                            u4899 08C4                              u5957 2998  
                            u5967 29A6                              u5977 29E0  
                            u5987 2A2A                              u5997 2A38  
                     main@ptr_915 00B6                       main@ptr_940 00B8  
                            _fila 001F                              _main 0012  
                    fp__wifi_init 0000                      fp__wifi_send 0000  
                            _wifi 00BD                              fsr1h 000FE2  
                            fsr2h 000FDA                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 005E  
                  ?_addContCiclos 0031                  __end_of_I2C_init 3AFE  
                            prodh 000FF4                              prodl 000FF3  
                     main@vetorIn 00AD                              start 000E  
         __size_of_salvar_receita 0044                 fp__salvar_receita 0000  
                __end_of_I2C_stop 3EC8                 _formatar_receitas 3E0C  
                    ___param_bank 000000                      ?_ler_atuador 0031  
                  printExec@passo 004E                ?_formatar_receitas 0031  
    __end_of_salva_atuadores_init 33E4                             ??_irq 0031  
                 _addIndicePassos 3E38              __end_of_EEPROM_write 3CC4  
                    main@auxPasso 00BA                   __end_of___aldiv 2952  
                           ?_main 0031                   __end_of___awdiv 2DB8  
                           _EEADR 000FA9                      wifi_send@msg 0032  
                           STR_10 7E7E                             STR_11 7E2A  
                           STR_12 7CF8                             STR_20 7E69  
                           STR_13 7FFD                             STR_21 7EBD  
                           STR_30 7FFD                             STR_14 7DAA  
                           STR_22 7FEF                             STR_31 7DAA  
                           STR_15 7E00                             STR_23 7DEB  
                           STR_32 7E3F                             STR_16 7E15  
                           STR_24 7DAC                             STR_40 7D5E  
                           STR_41 7FB4                             STR_25 7F26  
                           STR_33 7DC1                             STR_17 7C30  
                           STR_34 7EFC                             STR_18 7EA8  
                           STR_26 7D97                             STR_42 7D0D  
                           STR_43 7FD0                             STR_35 7F8A  
                           STR_27 7ED2                             STR_19 7E54  
                           STR_44 7FDB                             STR_36 7F4D  
                           STR_52 7D36                             STR_28 7CCF  
                 __end_of___awmod 2E68                             STR_53 7FC2  
                           STR_37 7F7C                             STR_45 7F3B  
                           STR_29 7C81                             STR_46 7F98  
                           STR_38 7F6D                             STR_39 7FA6  
                           STR_47 7D82                             STR_48 7F5E  
                 __end_of___lldiv 310A                   ___awdiv@divisor 0033  
             ??_formatar_receitas 0033                   __end_of___lwdiv 3458  
                           i2l611 3D1A                   ___awdiv@counter 0035  
                           _RCREG 000FAE                             _TMR1H 000FCF  
                           _TMR1L 000FCE                             _PORTD 000F83  
                           _TRISD 000F95                             _TXREG 000FAD  
__size_of_manipula_atuadores_init 0050               ___lmul@multiplicand 0035  
                 __end_of_dispLCD 3934                    _txStatusEUSART 3E8C  
               ??_fifo_disponivel 0031             __end_of_teclado_borda 3BA4  
                           _delay 3CC4                             _setT1 3E64  
                 salvar_receita@i 003C                             main@i 00A1  
                           main@j 00A2                             pclath 000FFA  
                           tablat 000FF5                   _I2C_ack_receive 3EFE  
                           plusw1 000FE3                             plusw2 000FDB  
                    main@vetorOut 00AE                             ttemp5 005F  
                           ttemp6 0062                             ttemp7 0066  
                           status 000FD8                 __end_of_I2C_start 3EB4  
                           wtemp8 005F         __end_of_formatar_receitas 3E22  
                 EEPROM_read@addr 0031                     _indice_passos 005B  
            __end_of_dispLCD_init 3BDA              __size_of_EEPROM_read 000E  
                 __initialization 32DC                      __end_of_main 1E92  
                ?_dispLCD_dataReg 0031                            ??_main 0059  
                       ??_MCP4725 004D                     __activetblptr 000002  
                   ?_initSerialIO 0031              __size_of_dispLCD_clr 0008  
          __end_of_txStatusEUSART 3EA0              __size_of_dispLCD_num 017A  
            __size_of_dispLCD_str 005E              __size_of_alt_atuador 009A  
                ?_dispLCD_instReg 0031                            ?_delay 0031  
                    ?_salvar_dado 0037                            _ADCON1 000FC1  
                          ?_setT1 0037                            _EEDATA 000FA8  
                          _EECON2 000FA7                  ___awdiv@dividend 0031  
                          _I2C_tx 3E4E              __size_of_dignum_conc 0048  
                          _EEPROM 00EB                  ?_getIndicePassos 0031  
                          i2l1061 3C36                            i2l1063 3C38  
                          i2l3031 3C28                            i2l3027 3C0A  
                          i2l3029 3C12                            i2l3301 3D18  
                          i2l3293 3CF4                            i2l3295 3D04  
                          i2l3297 3D12                            i2l3299 3D14  
            __size_of_fifo_delete 0098                  __end_of_dac_init 3A88  
                 ??_addContCiclos 0031              __size_of_end_receita 0024  
            __size_of_fifo_indice 0004              __size_of_fifo_lerPos 0012  
                          _SSPADD 000FC8                            _SSPBUF 000FC9  
                   main@init_cond 00B2                   ler_sensor@passo 0035  
                __end_of_codifica 25CE                  __end_of_fifo_add 37B0  
                __end_of_fifo_tam 3F82           __end_of_addIndicePassos 3E4E  
                _Wifi_autoconnect 000000                            _t1cont 000B  
                          ___lmul 34C6                         ??___aldiv 0045  
                          ___wmul 3D46                         ??___awdiv 0035  
                       ??___awmod 0035                            _ciclos 0019  
                       ??___lldiv 0039                 _fifo_alinharPrint 2B2A  
                    ?_timer1_init 0031                         ??___lwdiv 0035  
                          _eusart 00D1                            delay@t 0031  
                          clear_0 3340                            clear_1 3352  
                __end_of_txEUSART 3F68                            _search 000000  
                ___awdiv@quotient 0037                            _teclas 0146  
                 ___awmod@divisor 0033                ?_fifo_alinharPrint 0031  
                       ??_dispLCD 003B                   ___awmod@counter 0035  
                  ??_initSerialIO 0036                            main@pt 009D  
                  _buscar_receita 3A08                  __end_of_posAtual 3EEC  
                 ?_txStatusEUSART 0031                            setT1@c 0037  
                    __pdataCOMRAM 005B                        Wifi_mode@d 0034  
              __size_of_Wifi_mode 00B0                   Wifi_connect@str 003A  
                    __mediumconst 7BDC                         ?_I2C_init 003E  
                          tblptrh 000FF7                            tblptrl 000FF6  
             ??_fifo_alinharPrint 003C                            tblptru 000FF8  
                       ?_I2C_stop 0031           __end_of_I2C_ack_receive 3F0E  
           __end_of_getContCiclos 3F44              _Wifi_config_servidor 000000  
                   main@vetor_aux 0076                  __end_of_statusT1 3EDA  
          salva_atuadores_init@pt 0038              _salva_atuadores_init 3366  
                      __accesstop 0060           __end_of__initialization 3358  
            __size_of_buscar_dado 0028          __size_of_deletar_receita 0038  
              fp__deletar_receita 0000                 _serialIObyteShift 364E  
                  _salvar_receita 39C4        __size_of_formatar_receitas 0016  
         __size_of_dispLCD_lincol 0062                     ___rparam_used 000001  
              ?_serialIObyteShift 0031                __size_of_dac_write 0048  
       __end_of_fifo_alinharPrint 2C12                    __pcstackCOMRAM 0031  
           __size_of_EEPROM_write 002E          __size_of_resetContCiclos 000A  
                    __pidataBANK0 3AFE                      __pidataBANK1 37B0  
                   __end_of_delay 3CF2                     __end_of_setT1 3E78  
               fifo_add_control@c 0040              __size_of_ler_atuador 00A0  
             ??_serialIObyteShift 0031            __end_of_buscar_receita 3A4A  
              __size_of_getCiclos 001E           _manipula_atuadores_init 3806  
       __size_of_fifo_add_control 0048                 initSerialIO@ptrIn 0031  
              __size_of_fifo_adrs 000A                           I2C_tx@b 0031  
                      ??_I2C_init 0042      __end_of_fifo_indicePrint_dec 3E8C  
                      ??_I2C_stop 0031      __end_of_fifo_indicePrint_inc 35F0  
                         ??_delay 0033                           ??_setT1 003B  
              teclado_borda@tecla 0037                           ?_I2C_tx 0031  
           ?_salva_atuadores_init 0031                        __pbssBANK0 00F5  
                      __pbssBANK1 0156             __size_of_dispLCD_init 0036  
       __end_of_serialIObyteShift 36A8            __end_of_salvar_receita 3A08  
                      _decodifica 25CE                     ?_teclado_init 0031  
                   ?_teclado_scan 0031                __size_of_intt1_1ms 0030  
                    _EEPROM_write 3C96                  teclado_borda@aux 0036  
           __end_of_dignum_apagar 3C96                 __end_of_Wifi_mode 2F18  
                ?_addIndicePassos 0031                   fp__Wifi_connect 0000  
                  main@contPassos 0074                           ?___lmul 0031  
                         ?___wmul 0031                   _fifo_disponivel 3E22  
                  ___lmul@product 0039           serialIObyteShift@dataIn 0031  
                 ?_buscar_receita 0037                        _dignum_tam 3A88  
              __size_of_set_passo 00E2                           _MCP4725 3DB2  
                       ?_dac_init 0031                        _fifo_print 1E92  
              __size_of_printExec 018A                           _LCDbits 000F8A  
                    _dispLCD_init 3BA4                __size_of_wifi_init 0030  
              __size_of_wifi_send 00A6                  ?_I2C_ack_receive 0031  
               __end_of_dac_write 39C4                         ?_codifica 0031  
                       ?_fifo_add 0031                         ?_fifo_tam 0031  
                 __size_of_I2C_tx 0016              __size_of_salvar_dado 0022  
                  ??_teclado_init 0031                    ??_teclado_scan 0031  
                 ?_salvar_receita 0037                     ?_serialIOload 0031  
                   ?_serialIOscan 0031                        _initEUSART 3458  
               __end_of_getCiclos 3DF2                         ?_txEUSART 0031  
            __end_of_initSerialIO 3C68                       posAtual@ind 0032  
                EEPROM_write@addr 0032                  EEPROM_write@data 0031  
                         __Hparam 0000                 __end_of_fifo_adrs 3F4E  
                       ?_posAtual 0031                           __Lparam 0000  
                       _I2C_start 3EA0        __size_of_fifo_alinharPrint 00E8  
                         _Wifi_ip 000000                 ??_deletar_receita 0035  
                         ___aldiv 2846                           ___awdiv 2CF4  
                 __size_of___lmul 006A                           ___awmod 2DB8  
                      _ler_sensor 2A42                           ___lldiv 3066  
                 __size_of___wmul 0026           __size_of_init_atuadores 000A  
                         ___lwdiv 33E4                         ?_statusT1 0031  
          deletar_receita@receita 0037         ??_manipula_atuadores_init 0034  
                         __pcinit 32DC                     ?_Wifi_connect 0034  
                         __ramtop 0800                           _dispLCD 38EC  
            __size_of_timer1_init 001A                           __ptext0 0012  
                         __ptext1 3BDA                           __ptext2 3458  
                         __ptext3 3DF2                           __ptext4 3F1C  
                         __ptext5 3B6E                           __ptext6 2F18  
                         __ptext7 3EC8                           __ptext8 2C12  
                         __ptext9 3E64                     teclado_scan@c 0035  
                   teclado_scan@l 0034                        ??_dac_init 0034  
               __end_of_intt1_1ms 3C3A                 ??_resetContCiclos 0031  
                         _atuador 001E           __size_of_fifo_add_ciclo 000A  
                       _T1CONbits 000FCD                      __size_of_irq 3D16  
         __size_of_fifo_add_tempo 0058                  ___awmod@dividend 0031  
               salvar_receita@aux 0039                  ___aldiv@dividend 003D  
                   _receita_livre 000000                        ??_codifica 0033  
          ??_salva_atuadores_init 0034                        ??_fifo_add 0040  
                      ??_fifo_tam 0031                           main@aux 0075  
                         main@num 00B4                           main@ptr 009F  
                  __pintcode_body 3CF2              end_of_initialization 3358  
                  ??_serialIOload 0031                    ??_serialIOscan 0034  
      __size_of_serialIObyteShift 005A                       ?_decodifica 0031  
                   __Lmediumconst 7BDC                           int_func 3CF2  
                  dispLCD_num@col 003C                    dispLCD_num@div 0048  
                  dispLCD_num@lin 0045                    dispLCD_num@tam 003F  
                      ??_txEUSART 0031                    dispLCD_num@num 003D  
                  _dispLCD_lincol 3530                     ??_EEPROM_read 0031  
               __end_of_set_passo 2CF4                  Wifi_connect@pass 0036  
                  dispLCD_str@lin 003A                  Wifi_connect@ssid 0034  
                  dispLCD_str@str 0038                        dispLCD@col 0038  
                 ___lldiv@divisor 0035                        dispLCD@lin 003C  
                      dispLCD@pos 003B                        dispLCD@str 0039  
         __end_of_fifo_disponivel 3E38                 __end_of_printExec 2300  
                 ___lldiv@counter 003D                        ??_posAtual 0032  
                      ?_I2C_start 0031                 __end_of_wifi_init 3C0A  
               __end_of_wifi_send 3066                      I2C_init@freq 003E  
                       _RCSTAbits 000FAB              _fifo_indicePrint_dec 3E78  
                ___aldiv@quotient 0047              _fifo_indicePrint_inc 3592  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
          __size_of_teclado_borda 0036                  ??_txStatusEUSART 0031  
              fifo_alinharPrint@i 003E                        ??_statusT1 0035  
                   ??_dispLCD_clr 0033                    ??_Wifi_connect 0038  
                   ??_dispLCD_num 0040                     ??_dispLCD_str 003A  
                   ??_alt_atuador 0031                       ?_dignum_tam 0039  
                       _PORTAbits 000F80                  _fifo_add_control 38A4  
            fp__formatar_receitas 0000                       ?_fifo_print 0031  
                      fp__dispLCD 0000                     ??_dignum_conc 0039  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94          __size_of_dispLCD_dataReg 004E  
                   ??_fifo_delete 0040                     ??_end_receita 0033  
                   ??_fifo_indice 0031                     ??_fifo_lerPos 0031  
               __size_of_I2C_init 003A                 __size_of_I2C_stop 0014  
                   _teclaAnterior 001B   __end_of_manipula_atuadores_init 3856  
          __end_of_dispLCD_lincol 3592                    __end_of_I2C_tx 3E64  
  manipula_atuadores_init@atuador 0034          __size_of_dispLCD_instReg 00F0  
                      main@ciclos 00B0                       ?_initEUSART 003E  
                       _TXSTAbits 000FAC               dignum_apagar@ptrNum 0038  
                      main@estado 00BB             __end_of_addContCiclos 3F7A  
        __size_of_getIndicePassos 0004             ?_fifo_indicePrint_dec 0031  
           ?_fifo_indicePrint_inc 0031                       wifi_init@br 0046  
             __end_of_EEPROM_read 3F1C                       ?_ler_sensor 0031  
                  __end_of___lmul 3530                    __end_of___wmul 3D6C  
                     _BAUDCONbits 000FB8                     __pidataCOMRAM 3F86  
                  set_passo@passo 0035              __end_of_teclado_init 3F26  
            __end_of_teclado_scan 2FC0               __size_of_decodifica 0140  
             start_initialization 32DC               __end_of_dispLCD_clr 3F60  
                   posAtual@passo 0033               __end_of_dispLCD_num 247A  
             __end_of_dispLCD_str 364E               __end_of_alt_atuador 3244  
                     __end_of_irq 3D1E                     _teclado_borda 3B6E  
                   ??_buscar_dado 003A                          ??_I2C_tx 0031  
           __size_of_initSerialIO 002E                   fifo_add_tempo@t 0040  
                 ?_dispLCD_lincol 0033               __end_of_dignum_conc 397C  
              initSerialIO@length 0035               __size_of_dignum_tam 003C  
             __end_of_fifo_delete 32DC                initSerialIO@ptrOut 0033  
             __end_of_end_receita 3D90               __end_of_fifo_indice 3F86  
             __end_of_fifo_lerPos 3EFE               __size_of_fifo_print 02E4  
                ?_fifo_disponivel 0031                 dispLCD_lincol@col 0033  
               dispLCD_lincol@aux 0037                 dispLCD_lincol@lin 0036  
                     ??_I2C_start 0031                   main@meAtuadores 00AF  
                   ??_ler_atuador 0031                  ??_buscar_receita 0039  
                        ??___lmul 0039                          ??___wmul 0035  
                  _init_atuadores 3F30            __size_of_getContCiclos 000A  
                     __pdataBANK0 00BD                       __pdataBANK1 0100  
                       _Wifi_mode 2E68                         _Wifi_scan 000000  
            __end_of_serialIOload 3F6E              __end_of_serialIOscan 3700  
                        ?_MCP4725 004B                    _fifo_add_ciclo 3F4E  
                ler_atuador@tecla 0033                      _initSerialIO 3C3A  
             __size_of_initEUSART 006E                    _fifo_add_tempo 3700  
                     __pbssCOMRAM 0001                 __size_of_dac_init 003E  
                   __pcstackBANK0 0060                  ??_salvar_receita 0039  
                  ?_teclado_borda 0031               __size_of_ler_sensor 00E8  
               __size_of_codifica 0154                 __size_of_fifo_add 0058  
                       _dac_write 397C                 __size_of_fifo_tam 0004  
                 _deletar_receita 3B36              __end_of_Wifi_connect 2846  
               ??_dispLCD_dataReg 0031                       _EEPROM_read 3F0E  
             __end_of_buscar_dado 3D46            ??_fifo_indicePrint_dec 0031  
          ??_fifo_indicePrint_inc 0031                 __size_of_txEUSART 0008  
                ___lwdiv@dividend 0031            __end_of_init_atuadores 3F3A  
                 _resetContCiclos 3F26                         _getCiclos 3DD4  
               ??_dispLCD_instReg 0031                         __pintcode 0008  
                   __pmediumconst 7BDC                          ?___aldiv 003D  
                        ?___awdiv 0031                 __size_of_posAtual 0012  
                        ?___awmod 0031                          ?___lldiv 0031  
                        ?___lwdiv 0031                         _fifo_adrs 3F44  
                   serialIOscan@i 0037                     serialIOscan@j 0036  
                      ?_Wifi_mode 0031            __end_of_fifo_add_ciclo 3F58  
                     _dispLCD_clr 3F58                       _dispLCD_num 2300  
                     _dispLCD_str 35F0                 ??_getIndicePassos 0031  
          __end_of_fifo_add_tempo 3758                          ?_dispLCD 0038  
                     _alt_atuador 31AA               __end_of_ler_atuador 31AA  
               __size_of_statusT1 0012          __size_of_addIndicePassos 0016  
                       _ind_print 005C                     _rxErrorEUSART 000000  
                        _I2C_init 3AC4          serialIObyteShift@dataBit 0033  
                        _I2C_stop 3EB4            __size_of_dignum_apagar 002E  
                     _dignum_conc 3934          serialIObyteShift@dataOut 0032  
                       _intt1_1ms 3C0A                     ??_salvar_dado 0039  
                ___lwdiv@quotient 0035                     _getContCiclos 3F3A  
                  __size_of_delay 002E                       _fifo_delete 3244  
                  __size_of_setT1 0014                       _end_receita 3D6C  
                     _fifo_indice 3F82                       _fifo_lerPos 3EEC  
                      ?_dac_write 0034                      ??_decodifica 0033  
               teclado_scan@tecla 0033                    _fifo_print$473 003B  
                 ___aldiv@divisor 0041                   ___aldiv@counter 0045  
                  ___wmul@product 0035          __size_of_I2C_ack_receive 0010  
        __end_of_fifo_add_control 38EC                          _PIE1bits 000F9D  
                        i2u132_40 3C28                          i2u132_41 3C24  
                        i2u155_40 3D04                          i2u155_41 3D00  
                        i2u156_40 3D12                          i2u156_41 3D0E  
                        _PIR1bits 000F9E                   ?_init_atuadores 0031  
                        _SERIALIO 000F80                        ?_getCiclos 0031  
                       _set_passo 2C12             __size_of_teclado_init 000A  
           __size_of_teclado_scan 00A8                         main@F3513 0132  
                       main@F3487 00F6                         main@F3489 00F5  
                  dignum_conc@dig 003B                     ??_timer1_init 0031  
                      ?_fifo_adrs 0031                         _printExec 2176  
                dispLCD_dataReg@d 0032                          _SPBRbits 000FAF  
                 ?_fifo_add_ciclo 0031                         _wifi_init 3BDA  
                       _wifi_send 2FC0                      ??_dignum_tam 003B  
                     _cont_ciclos 0017                   ?_fifo_add_tempo 0031  
                       main@i_903 00A3                         main@i_930 00A5  
                       main@i_933 00A7                         main@i_909 009C  
               ___wmul@multiplier 0031                         main@i_975 00A9  
                       main@j_904 00A4                         main@i_978 00AB  
                       main@j_931 00A6                         main@j_934 00A8  
              initEUSART@baudRate 003E                         main@j_976 00AA  
                       main@j_979 00AC               fifo_print@completar 003D  
                deletar_receita@i 0038                      ??_fifo_print 0039  
              __end_of_decodifica 270E                  __size_of_MCP4725 0022  
                       main@botao 00B3                       _lenSerialIO 001C  
                 ??_teclado_borda 0036                         main@tecla 00BC  
         __end_of_deletar_receita 3B6E                        ?_intt1_1ms 0031  
                  ?_getContCiclos 0031                 _resetIndicePassos 3F6E  
               Wifi_cipsend@F3301 0001                 Wifi_cipsend@F3299 011E  
               ___lmul@multiplier 0031                         copy_data0 32F0  
                       copy_data1 3310                       _buscar_dado 3D1E  
   __size_of_salva_atuadores_init 007E                ?_resetIndicePassos 0031  
         __end_of_resetContCiclos 3F30                      ??_initEUSART 0042  
                    _teclado_init 3F1C               __end_of_salvar_dado 3DB2  
                    _teclado_scan 2F18                        _EECON1bits 000FA6  
              __end_of_dignum_tam 3AC4               ??_resetIndicePassos 0031  
                        __Hrparam 0000                     _dignum_apagar 3C68  
                   ler_sensor@ptr 0031                __end_of_fifo_print 2176  
                        __Lrparam 0000          ?_manipula_atuadores_init 0031  
                      ?_set_passo 0031             __size_of_serialIOload 0006  
           __size_of_serialIOscan 0058                      getCiclos@aux 0033  
                dispLCD_instReg@i 0032                       _ler_atuador 310A  
                    ??_ler_sensor 0033                     Wifi_connect@i 0058  
                       txEUSART@d 0031                        ?_printExec 004A  
                __size_of___aldiv 010C                       ??_Wifi_mode 0034  
                __size_of___awdiv 00C4                  __size_of___awmod 00B0  
                __size_of___lldiv 00A4                        ?_wifi_init 0046  
                      ?_wifi_send 0032                  __size_of___lwdiv 0074  
                 fp__dispLCD_init 0000                buscar_receita@data 0037  
              buscar_receita@adrs 003B                  dispLCD_num@sinal 0047  
           fifo_alinharPrint@cont 003D       manipula_atuadores_init@mask 0036  
                        _dac_init 3A4A                  __size_of_dispLCD 0048  
             __end_of_timer1_init 3E0C                    _rxStatusEUSART 000000  
              __end_of_initEUSART 34C6         __end_of_resetIndicePassos 3F74  
                     decodifica@d 0031                          _main$941 0088  
                        _main$950 0094                          _main$951 0096  
                        _main$919 0086                          _main$952 0098  
                        _main$945 008A                          _main$946 008C  
                        _main$947 008E                          _main$956 009A  
                        _main$948 0090                          _main$949 0092  
                ??_dispLCD_lincol 0034                   ___lwdiv@divisor 0033  
           __size_of_Wifi_connect 0138                   ___lwdiv@counter 0037  
                        _codifica 247A                          __ptext10 36A8  
                        __ptext11 3F68                          __ptext20 3EDA  
                        __ptext12 364E                          __ptext21 3F7A  
                        __ptext13 39C4                          __ptext30 3E0C  
                        __ptext22 3EEC                          __ptext14 3D90  
                        __ptext31 3F7E                          __ptext23 2300  
                        __ptext15 3366                          __ptext40 31AA  
                        __ptext32 1E92                          __ptext24 3806  
                        __ptext16 310A                          __ptext41 3F44  
                        __ptext33 2DB8                          __ptext25 2A42  
                        __ptext17 3F6E                          __ptext50 35F0  
                        __ptext42 3700                          __ptext34 3592  
                        __ptext26 3F30                          __ptext18 3F26  
                        __ptext51 3BA4                          __ptext43 38A4  
                        __ptext35 3E78                          __ptext27 3C3A  
                        __ptext19 2176                          __ptext60 33E4  
                        __ptext52 3F58                          __ptext44 3F4E  
                        __ptext36 3F82                          __ptext28 3F3A  
                        __ptext61 3B36                          __ptext53 38EC  
                        __ptext45 3758                          __ptext37 3E22  
                        __ptext29 3DD4                          __ptext70 2846  
                        __ptext62 3C96                          __ptext54 3530  
                        __ptext46 2B2A                          __ptext38 3244  
                        __ptext71 2E68                          __ptext63 3A08  
                        __ptext55 2952                          __ptext47 3A88  
                        __ptext39 25CE                          __ptext80 3E4E  
                        __ptext72 270E                          __ptext64 3D1E  
                        __ptext56 3856                          __ptext48 2CF4  
                        __ptext81 3EA0                          __ptext73 2FC0  
                        __ptext65 3D6C                          __ptext57 3934  
                        __ptext49 247A                          __ptext82 3EFE  
                        __ptext74 3E8C                          __ptext66 3F0E  
                        __ptext58 3D46                          __ptext83 3EB4  
                        __ptext75 3F60                          __ptext67 3E38  
                        __ptext59 3C68                          __ptext84 3AC4  
                        __ptext76 3DB2                          __ptext68 3F74  
                        __ptext85 3066                          __ptext77 397C  
                        __ptext69 34C6                          __ptext78 3A4A  
                        __ptext87 3C0A                          __ptext79 3CC4  
                        __ptext88 0000                          _fifo_add 3758  
               ??_addIndicePassos 0031                          _fifo_tam 3F7E  
                        _ind_fila 005D                       ??_dac_write 0036  
              __end_of_ler_sensor 2B2A                          _rxEUSART 000000  
                   ?_EEPROM_write 0031                      _serialIOload 3F68  
                    _serialIOscan 36A8                _rxResetErrorEUSART 000000  
                   __size_of_main 1E80                          _txEUSART 3F60  
              salvar_receita@data 0037                salvar_receita@adrs 003B  
                  ?_dignum_apagar 0038                          _posAtual 3EDA  
                    dispLCD_str@c 003B                       ??_getCiclos 0033  
                   _printExec$498 004B                 ??_I2C_ack_receive 0031  
                        int$flags 005E                       ??_fifo_adrs 0033  
              fifo_print@indPrint 003E                     fifo_add@passo 0040  
                        _statusT1 3EC8                       MCP4725@Vout 004B  
                   dignum_tam@tam 003B                     dignum_tam@num 0039  
                        main@lema 0060                      _Wifi_cipsend 000000  
                    _Wifi_connect 270E                      set_passo@ptr 0031  
  salva_atuadores_init@condi_init 0034                   ??_getContCiclos 0033  
                      _INTCONbits 000FF2                 Wifi_connect@F3287 0100  
                   ?_dispLCD_init 0031            __size_of_addContCiclos 0006  
                    codifica@dado 0031                   _dispLCD_dataReg 3856  
                    codifica@tipo 0035                       ??_intt1_1ms 0031  
                ?_deletar_receita 0031           __size_of_txStatusEUSART 0014  
               fp__txStatusEUSART 0000                formatar_receitas@i 0033  
                 buscar_dado@data 0038                   buscar_dado@adrs 003C  
                     _salvar_dado 3D90                    fp__dispLCD_clr 0000  
                  fp__dispLCD_num 0000                    fp__dispLCD_str 0000  
               buscar_receita@aux 0039                   dispLCD_num@size 0046  
            fifo_alinharPrint@aux 003F        manipula_atuadores_init@aux 0035  
                 _dispLCD_instReg 2952                          intlevel2 0000  
                  ??_EEPROM_write 0032                      fp__Wifi_mode 0000  
                ?_resetContCiclos 0031                  ___lldiv@dividend 0031  
                    ?_EEPROM_read 0031                   _getIndicePassos 3F7A  
               dignum_conc@ptrNum 0037                       ??_set_passo 0033  
               fifo_print@comando 0041                       ??_printExec 004B  
        salva_atuadores_init@F108 000F                       _timer1_init 3DF2  
                     ??_wifi_init 004A                      _ptrSerialOut 0013  
                     ??_wifi_send 0034                      ?_dispLCD_clr 0031  
                    ?_dispLCD_num 003C                      ?_dispLCD_str 0038  
        __size_of_fifo_disponivel 0016                      ?_alt_atuador 0031  
        salva_atuadores_init@dado 003A                    buscar_dado@col 0037  
                  buscar_dado@aux 003A              fifo_add_ciclo@ciclos 0031  
        salva_atuadores_init@mask 003B                    ??_dispLCD_init 0034  
                ___lldiv@quotient 0039        __size_of_resetIndicePassos 0006  
                    ___aldiv@sign 0046                      ?_dignum_conc 0037  
                     _SSPCON1bits 000FC6                      end_receita@x 0031  
                     _SSPCON2bits 000FC5                  fifo_print@atraso 0040  
                    ?_fifo_delete 0031                       _ptrSerialIn 0015  
                    fifo_lerPos@i 0031                      ?_end_receita 0031  
                    _wifi_receive 000000                      ?_fifo_indice 0031  
                    ?_fifo_lerPos 0031                   buscar_receita@i 003C  
                ??_init_atuadores 0031                   ??_dignum_apagar 003A  
               ?_fifo_add_control 0031                     _addContCiclos 3F74  
                ??_fifo_add_ciclo 0033                       fifo_print@i 003F  
                   fp__initEUSART 0000  
