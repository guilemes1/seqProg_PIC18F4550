

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed Nov 17 22:31:09 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   104                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   111                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   112  0000                     
   113                           ; Version 2.20
   114                           ; Generated 12/02/2020 GMT
   115                           ; 
   116                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   117                           ; All rights reserved.
   118                           ; 
   119                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   120                           ; 
   121                           ; Redistribution and use in source and binary forms, with or without modification, are
   122                           ; permitted provided that the following conditions are met:
   123                           ; 
   124                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   125                           ;        conditions and the following disclaimer.
   126                           ; 
   127                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   128                           ;        of conditions and the following disclaimer in the documentation and/or other
   129                           ;        materials provided with the distribution.
   130                           ; 
   131                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   132                           ;        software without specific prior written permission.
   133                           ; 
   134                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   135                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   136                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   137                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   138                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   139                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   140                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   141                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   142                           ; 
   143                           ; 
   144                           ; Code-generator required, PIC18F4550 Definitions
   145                           ; 
   146                           ; SFR Addresses
   147  0000                     
   148 ;; Function _receita_livre is unused but had its address taken
   149  0000                     
   150 ;; Function _rxEUSART is unused but had its address taken
   151  0000                     
   152 ;; Function _rxStatusEUSART is unused but had its address taken
   153  0000                     
   154 ;; Function _rxErrorEUSART is unused but had its address taken
   155  0000                     
   156 ;; Function _rxResetErrorEUSART is unused but had its address taken
   157  0000                     
   158 ;; Function _search is unused but had its address taken
   159  0000                     
   160 ;; Function _wifi_receive is unused but had its address taken
   161  0000                     
   162 ;; Function _Wifi_connect is unused but had its address taken
   163  0000                     
   164 ;; Function _Wifi_scan is unused but had its address taken
   165  0000                     
   166 ;; Function _Wifi_ip is unused but had its address taken
   167  0000                     
   168 ;; Function _Wifi_autoconnect is unused but had its address taken
   169  0000                     
   170 ;; Function _Wifi_config_servidor is unused but had its address taken
   171  0000                     
   172 ;; Function _Wifi_cipsend is unused but had its address taken
   173  0000                     
   174                           	psect	idataCOMRAM
   175  003D24                     __pidataCOMRAM:
   176                           	callstack 0
   177                           
   178                           ;initializer for _eusart
   179  003D24  00                 	db	0
   180  003D25  00                 	db	0
   181  003D26  00                 	db	0
   182  003D27  00                 	db	0
   183  003D28  00                 	db	0
   184  003D29  00                 	db	0
   185  003D2A  00                 	db	0
   186  003D2B  00                 	db	0
   187  003D2C  D0                 	db	low _txEUSART
   188  003D2D  3D                 	db	high _txEUSART
   189  003D2E  E8                 	db	low _txStatusEUSART
   190  003D2F  3C                 	db	high _txStatusEUSART
   191  003D30  B0                 	db	low _initEUSART
   192  003D31  32                 	db	high _initEUSART
   193  003D32  00                 	db	0
   194  003D33  00                 	db	0
   195                           
   196                           ;initializer for _indice_passos
   197  003D34  02                 	db	2
   198                           
   199                           ;initializer for _ind_print
   200  003D35  02                 	db	2
   201                           
   202                           ;initializer for _ind_fila
   203  003D36  02                 	db	2
   204                           
   205                           	psect	idataBANK0
   206  00395A                     __pidataBANK0:
   207                           	callstack 0
   208                           
   209                           ;initializer for _wifi
   210  00395A  36                 	db	low _wifi_init
   211  00395B  3A                 	db	high _wifi_init
   212  00395C  92                 	db	low _wifi_send
   213  00395D  2D                 	db	high _wifi_send
   214  00395E  00                 	db	0
   215  00395F  00                 	db	0
   216  003960  3A                 	db	low _Wifi_mode
   217  003961  31                 	db	high _Wifi_mode
   218  003962  00                 	db	0
   219  003963  00                 	db	0
   220  003964  00                 	db	0
   221  003965  00                 	db	0
   222  003966  00                 	db	0
   223  003967  00                 	db	0
   224  003968  00                 	db	0
   225  003969  00                 	db	0
   226  00396A  00                 	db	0
   227  00396B  00                 	db	0
   228  00396C  00                 	db	0
   229  00396D  00                 	db	0
   230                           
   231                           ;initializer for _teclas
   232  00396E  31                 	db	49
   233  00396F  32                 	db	50
   234  003970  33                 	db	51
   235  003971  41                 	db	65
   236  003972  34                 	db	52
   237  003973  35                 	db	53
   238  003974  36                 	db	54
   239  003975  42                 	db	66
   240  003976  37                 	db	55
   241  003977  38                 	db	56
   242  003978  39                 	db	57
   243  003979  43                 	db	67
   244  00397A  2A                 	db	42
   245  00397B  30                 	db	48
   246  00397C  23                 	db	35
   247  00397D  44                 	db	68
   248                           
   249                           ;initializer for _EEPROM
   250  00397E  20                 	db	low _salvar_receita
   251  00397F  38                 	db	high _salvar_receita
   252  003980  64                 	db	low _buscar_receita
   253  003981  38                 	db	high _buscar_receita
   254  003982  92                 	db	low _deletar_receita
   255  003983  39                 	db	high _deletar_receita
   256  003984  00                 	db	0
   257  003985  00                 	db	0
   258  003986  68                 	db	low _formatar_receitas
   259  003987  3C                 	db	high _formatar_receitas
   260                           
   261                           ;initializer for _IHM
   262  003988  00                 	db	low _dispLCD_init
   263  003989  3A                 	db	high _dispLCD_init
   264  00398A  48                 	db	low _dispLCD_str
   265  00398B  34                 	db	high _dispLCD_str
   266  00398C  48                 	db	low _dispLCD
   267  00398D  37                 	db	high _dispLCD
   268  00398E  BA                 	db	low _dispLCD_num
   269  00398F  22                 	db	high _dispLCD_num
   270  003990  C8                 	db	low _dispLCD_clr
   271  003991  3D                 	db	high _dispLCD_clr
   272                           
   273                           	psect	idataBANK1
   274  0034A6                     __pidataBANK1:
   275                           	callstack 0
   276                           
   277                           ;initializer for Wifi_connect@F3284
   278  0034A6  41                 	db	65
   279  0034A7  54                 	db	84
   280  0034A8  2B                 	db	43
   281  0034A9  43                 	db	67
   282  0034AA  57                 	db	87
   283  0034AB  4A                 	db	74
   284  0034AC  41                 	db	65
   285  0034AD  50                 	db	80
   286  0034AE  3D                 	db	61
   287  0034AF  22                 	db	34
   288  0034B0  00                 	db	0
   289  0034B1  00                 	db	0
   290  0034B2  00                 	db	0
   291  0034B3  00                 	db	0
   292  0034B4  00                 	db	0
   293  0034B5  00                 	db	0
   294  0034B6  00                 	db	0
   295  0034B7  00                 	db	0
   296  0034B8  00                 	db	0
   297  0034B9  00                 	db	0
   298  0034BA  00                 	db	0
   299  0034BB  00                 	db	0
   300  0034BC  00                 	db	0
   301  0034BD  00                 	db	0
   302  0034BE  00                 	db	0
   303  0034BF  00                 	db	0
   304  0034C0  00                 	db	0
   305  0034C1  00                 	db	0
   306  0034C2  00                 	db	0
   307  0034C3  00                 	db	0
   308  0034C4  00                 	db	0
   309  0034C5  00                 	db	0
   310  0034C6  00                 	db	0
   311  0034C7  00                 	db	0
   312  0034C8  00                 	db	0
   313  0034C9  00                 	db	0
   314  0034CA  00                 	db	0
   315  0034CB  00                 	db	0
   316  0034CC  00                 	db	0
   317  0034CD  00                 	db	0
   318                           
   319                           ;initializer for Wifi_cipsend@F3294
   320  0034CE  41                 	db	65
   321  0034CF  54                 	db	84
   322  0034D0  2B                 	db	43
   323  0034D1  43                 	db	67
   324  0034D2  49                 	db	73
   325  0034D3  50                 	db	80
   326  0034D4  53                 	db	83
   327  0034D5  45                 	db	69
   328  0034D6  4E                 	db	78
   329  0034D7  44                 	db	68
   330  0034D8  3D                 	db	61
   331  0034D9  22                 	db	34
   332  0034DA  00                 	db	0
   333  0034DB  00                 	db	0
   334  0034DC  00                 	db	0
   335  0034DD  00                 	db	0
   336  0034DE  00                 	db	0
   337  0034DF  00                 	db	0
   338  0034E0  00                 	db	0
   339  0034E1  00                 	db	0
   340  0034E2  00                 	db	0
   341  0034E3  00                 	db	0
   342  0034E4  00                 	db	0
   343  0034E5  00                 	db	0
   344  0034E6  00                 	db	0
   345  0034E7  00                 	db	0
   346  0034E8  00                 	db	0
   347  0034E9  00                 	db	0
   348  0034EA  00                 	db	0
   349  0034EB  00                 	db	0
   350                           
   351                           ;initializer for main@F3510
   352  0034EC  4D                 	db	77
   353  0034ED  75                 	db	117
   354  0034EE  6E                 	db	110
   355  0034EF  64                 	db	100
   356  0034F0  6F                 	db	111
   357  0034F1  20                 	db	32
   358  0034F2  61                 	db	97
   359  0034F3  6F                 	db	111
   360  0034F4  20                 	db	32
   361  0034F5  73                 	db	115
   362  0034F6  65                 	db	101
   363  0034F7  75                 	db	117
   364  0034F8  20                 	db	32
   365  0034F9  63                 	db	99
   366  0034FA  6F                 	db	111
   367  0034FB  6D                 	db	109
   368  0034FC  61                 	db	97
   369  0034FD  6E                 	db	110
   370  0034FE  64                 	db	100
   371  0034FF  6F                 	db	111
   372  0000                     _SPBRbits	set	4015
   373  0000                     _BAUDCONbits	set	4024
   374  0000                     _TRISCbits	set	3988
   375  0000                     _TXSTAbits	set	4012
   376  0000                     _TXREG	set	4013
   377  0000                     _RCSTAbits	set	4011
   378  0000                     _RCREG	set	4014
   379  0000                     _T1CONbits	set	4045
   380  0000                     _TMR1L	set	4046
   381  0000                     _TMR1H	set	4047
   382  0000                     _TRISD	set	3989
   383  0000                     _PORTD	set	3971
   384  0000                     _SSPBUF	set	4041
   385  0000                     _SSPCON2bits	set	4037
   386  0000                     _SSPSTATbits	set	4039
   387  0000                     _SSPADD	set	4040
   388  0000                     _SSPCON1bits	set	4038
   389  0000                     _TRISAbits	set	3986
   390  0000                     _PORTAbits	set	3968
   391  0000                     _EECON2	set	4007
   392  0000                     _EEDATA	set	4008
   393  0000                     _EECON1bits	set	4006
   394  0000                     _EEADR	set	4009
   395  0000                     _TRISBbits	set	3987
   396  0000                     _ADCON1	set	4033
   397  0000                     _PIE1bits	set	3997
   398  0000                     _PIR1bits	set	3998
   399  0000                     _INTCONbits	set	4082
   400                           
   401                           	psect	mediumconst
   402  007C2E                     __pmediumconst:
   403                           	callstack 0
   404  007C2E  00                 	db	0
   405  007C2F                     STR_4:
   406  007C2F  31                 	db	49	;'1'
   407  007C30  3A                 	db	58	;':'
   408  007C31  20                 	db	32
   409  007C32  49                 	db	73	;'I'
   410  007C33  4E                 	db	78	;'N'
   411  007C34  53                 	db	83	;'S'
   412  007C35  45                 	db	69	;'E'
   413  007C36  52                 	db	82	;'R'
   414  007C37  49                 	db	73	;'I'
   415  007C38  52                 	db	82	;'R'
   416  007C39  20                 	db	32
   417  007C3A  53                 	db	83	;'S'
   418  007C3B  45                 	db	69	;'E'
   419  007C3C  51                 	db	81	;'Q'
   420  007C3D  55                 	db	85	;'U'
   421  007C3E  45                 	db	69	;'E'
   422  007C3F  4E                 	db	78	;'N'
   423  007C40  43                 	db	67	;'C'
   424  007C41  49                 	db	73	;'I'
   425  007C42  41                 	db	65	;'A'
   426  007C43  0A                 	db	10
   427  007C44  32                 	db	50	;'2'
   428  007C45  3A                 	db	58	;':'
   429  007C46  20                 	db	32
   430  007C47  42                 	db	66	;'B'
   431  007C48  55                 	db	85	;'U'
   432  007C49  53                 	db	83	;'S'
   433  007C4A  43                 	db	67	;'C'
   434  007C4B  41                 	db	65	;'A'
   435  007C4C  52                 	db	82	;'R'
   436  007C4D  20                 	db	32
   437  007C4E  53                 	db	83	;'S'
   438  007C4F  45                 	db	69	;'E'
   439  007C50  51                 	db	81	;'Q'
   440  007C51  55                 	db	85	;'U'
   441  007C52  45                 	db	69	;'E'
   442  007C53  4E                 	db	78	;'N'
   443  007C54  43                 	db	67	;'C'
   444  007C55  49                 	db	73	;'I'
   445  007C56  41                 	db	65	;'A'
   446  007C57  0A                 	db	10
   447  007C58  33                 	db	51	;'3'
   448  007C59  3A                 	db	58	;':'
   449  007C5A  20                 	db	32
   450  007C5B  52                 	db	82	;'R'
   451  007C5C  45                 	db	69	;'E'
   452  007C5D  50                 	db	80	;'P'
   453  007C5E  45                 	db	69	;'E'
   454  007C5F  54                 	db	84	;'T'
   455  007C60  49                 	db	73	;'I'
   456  007C61  52                 	db	82	;'R'
   457  007C62  20                 	db	32
   458  007C63  55                 	db	85	;'U'
   459  007C64  4C                 	db	76	;'L'
   460  007C65  54                 	db	84	;'T'
   461  007C66  2E                 	db	46
   462  007C67  20                 	db	32
   463  007C68  53                 	db	83	;'S'
   464  007C69  45                 	db	69	;'E'
   465  007C6A  51                 	db	81	;'Q'
   466  007C6B  55                 	db	85	;'U'
   467  007C6C  0A                 	db	10
   468  007C6D  34                 	db	52	;'4'
   469  007C6E  3A                 	db	58	;':'
   470  007C6F  20                 	db	32
   471  007C70  43                 	db	67	;'C'
   472  007C71  4F                 	db	79	;'O'
   473  007C72  4E                 	db	78	;'N'
   474  007C73  46                 	db	70	;'F'
   475  007C74  49                 	db	73	;'I'
   476  007C75  47                 	db	71	;'G'
   477  007C76  55                 	db	85	;'U'
   478  007C77  52                 	db	82	;'R'
   479  007C78  41                 	db	65	;'A'
   480  007C79  43                 	db	67	;'C'
   481  007C7A  4F                 	db	79	;'O'
   482  007C7B  45                 	db	69	;'E'
   483  007C7C  53                 	db	83	;'S'
   484  007C7D  20                 	db	32
   485  007C7E  20                 	db	32
   486  007C7F  20                 	db	32
   487  007C80  20                 	db	32
   488  007C81  00                 	db	0
   489  007C82                     STR_15:
   490  007C82  20                 	db	32
   491  007C83  45                 	db	69	;'E'
   492  007C84  53                 	db	83	;'S'
   493  007C85  43                 	db	67	;'C'
   494  007C86  4F                 	db	79	;'O'
   495  007C87  4C                 	db	76	;'L'
   496  007C88  48                 	db	72	;'H'
   497  007C89  41                 	db	65	;'A'
   498  007C8A  20                 	db	32
   499  007C8B  41                 	db	65	;'A'
   500  007C8C  20                 	db	32
   501  007C8D  4D                 	db	77	;'M'
   502  007C8E  45                 	db	69	;'E'
   503  007C8F  4D                 	db	77	;'M'
   504  007C90  4F                 	db	79	;'O'
   505  007C91  52                 	db	82	;'R'
   506  007C92  49                 	db	73	;'I'
   507  007C93  41                 	db	65	;'A'
   508  007C94  20                 	db	32
   509  007C95  0A                 	db	10
   510  007C96  51                 	db	81	;'Q'
   511  007C97  55                 	db	85	;'U'
   512  007C98  45                 	db	69	;'E'
   513  007C99  20                 	db	32
   514  007C9A  44                 	db	68	;'D'
   515  007C9B  45                 	db	69	;'E'
   516  007C9C  53                 	db	83	;'S'
   517  007C9D  45                 	db	69	;'E'
   518  007C9E  4A                 	db	74	;'J'
   519  007C9F  41                 	db	65	;'A'
   520  007CA0  20                 	db	32
   521  007CA1  45                 	db	69	;'E'
   522  007CA2  58                 	db	88	;'X'
   523  007CA3  45                 	db	69	;'E'
   524  007CA4  43                 	db	67	;'C'
   525  007CA5  55                 	db	85	;'U'
   526  007CA6  54                 	db	84	;'T'
   527  007CA7  41                 	db	65	;'A'
   528  007CA8  52                 	db	82	;'R'
   529  007CA9  0A                 	db	10
   530  007CAA  20                 	db	32
   531  007CAB  30                 	db	48	;'0'
   532  007CAC  20                 	db	32
   533  007CAD  20                 	db	32
   534  007CAE  20                 	db	32
   535  007CAF  31                 	db	49	;'1'
   536  007CB0  20                 	db	32
   537  007CB1  20                 	db	32
   538  007CB2  20                 	db	32
   539  007CB3  32                 	db	50	;'2'
   540  007CB4  20                 	db	32
   541  007CB5  20                 	db	32
   542  007CB6  20                 	db	32
   543  007CB7  33                 	db	51	;'3'
   544  007CB8  20                 	db	32
   545  007CB9  20                 	db	32
   546  007CBA  20                 	db	32
   547  007CBB  34                 	db	52	;'4'
   548  007CBC  20                 	db	32
   549  007CBD  0A                 	db	10
   550  007CBE  20                 	db	32
   551  007CBF  35                 	db	53	;'5'
   552  007CC0  20                 	db	32
   553  007CC1  20                 	db	32
   554  007CC2  20                 	db	32
   555  007CC3  36                 	db	54	;'6'
   556  007CC4  20                 	db	32
   557  007CC5  20                 	db	32
   558  007CC6  20                 	db	32
   559  007CC7  37                 	db	55	;'7'
   560  007CC8  20                 	db	32
   561  007CC9  20                 	db	32
   562  007CCA  20                 	db	32
   563  007CCB  38                 	db	56	;'8'
   564  007CCC  20                 	db	32
   565  007CCD  20                 	db	32
   566  007CCE  20                 	db	32
   567  007CCF  39                 	db	57	;'9'
   568  007CD0  20                 	db	32
   569  007CD1  0A                 	db	10
   570  007CD2  00                 	db	0
   571  007CD3                     STR_27:
   572  007CD3  20                 	db	32
   573  007CD4  45                 	db	69	;'E'
   574  007CD5  53                 	db	83	;'S'
   575  007CD6  43                 	db	67	;'C'
   576  007CD7  4F                 	db	79	;'O'
   577  007CD8  4C                 	db	76	;'L'
   578  007CD9  48                 	db	72	;'H'
   579  007CDA  41                 	db	65	;'A'
   580  007CDB  20                 	db	32
   581  007CDC  41                 	db	65	;'A'
   582  007CDD  20                 	db	32
   583  007CDE  4D                 	db	77	;'M'
   584  007CDF  45                 	db	69	;'E'
   585  007CE0  4D                 	db	77	;'M'
   586  007CE1  4F                 	db	79	;'O'
   587  007CE2  52                 	db	82	;'R'
   588  007CE3  49                 	db	73	;'I'
   589  007CE4  41                 	db	65	;'A'
   590  007CE5  0A                 	db	10
   591  007CE6  20                 	db	32
   592  007CE7  51                 	db	81	;'Q'
   593  007CE8  55                 	db	85	;'U'
   594  007CE9  45                 	db	69	;'E'
   595  007CEA  20                 	db	32
   596  007CEB  44                 	db	68	;'D'
   597  007CEC  45                 	db	69	;'E'
   598  007CED  53                 	db	83	;'S'
   599  007CEE  45                 	db	69	;'E'
   600  007CEF  4A                 	db	74	;'J'
   601  007CF0  41                 	db	65	;'A'
   602  007CF1  20                 	db	32
   603  007CF2  53                 	db	83	;'S'
   604  007CF3  41                 	db	65	;'A'
   605  007CF4  4C                 	db	76	;'L'
   606  007CF5  56                 	db	86	;'V'
   607  007CF6  41                 	db	65	;'A'
   608  007CF7  52                 	db	82	;'R'
   609  007CF8  0A                 	db	10
   610  007CF9  20                 	db	32
   611  007CFA  30                 	db	48	;'0'
   612  007CFB  20                 	db	32
   613  007CFC  20                 	db	32
   614  007CFD  20                 	db	32
   615  007CFE  31                 	db	49	;'1'
   616  007CFF  20                 	db	32
   617  007D00  20                 	db	32
   618  007D01  20                 	db	32
   619  007D02  32                 	db	50	;'2'
   620  007D03  20                 	db	32
   621  007D04  20                 	db	32
   622  007D05  20                 	db	32
   623  007D06  33                 	db	51	;'3'
   624  007D07  20                 	db	32
   625  007D08  20                 	db	32
   626  007D09  20                 	db	32
   627  007D0A  34                 	db	52	;'4'
   628  007D0B  0A                 	db	10
   629  007D0C  20                 	db	32
   630  007D0D  35                 	db	53	;'5'
   631  007D0E  20                 	db	32
   632  007D0F  20                 	db	32
   633  007D10  20                 	db	32
   634  007D11  36                 	db	54	;'6'
   635  007D12  20                 	db	32
   636  007D13  20                 	db	32
   637  007D14  20                 	db	32
   638  007D15  37                 	db	55	;'7'
   639  007D16  20                 	db	32
   640  007D17  20                 	db	32
   641  007D18  20                 	db	32
   642  007D19  38                 	db	56	;'8'
   643  007D1A  20                 	db	32
   644  007D1B  20                 	db	32
   645  007D1C  20                 	db	32
   646  007D1D  39                 	db	57	;'9'
   647  007D1E  20                 	db	32
   648  007D1F  20                 	db	32
   649  007D20  00                 	db	0
   650  007D21                     STR_26:
   651  007D21  20                 	db	32
   652  007D22  20                 	db	32
   653  007D23  20                 	db	32
   654  007D24  20                 	db	32
   655  007D25  44                 	db	68	;'D'
   656  007D26  45                 	db	69	;'E'
   657  007D27  53                 	db	83	;'S'
   658  007D28  45                 	db	69	;'E'
   659  007D29  4A                 	db	74	;'J'
   660  007D2A  41                 	db	65	;'A'
   661  007D2B  20                 	db	32
   662  007D2C  53                 	db	83	;'S'
   663  007D2D  41                 	db	65	;'A'
   664  007D2E  4C                 	db	76	;'L'
   665  007D2F  56                 	db	86	;'V'
   666  007D30  41                 	db	65	;'A'
   667  007D31  52                 	db	82	;'R'
   668  007D32  20                 	db	32
   669  007D33  20                 	db	32
   670  007D34  20                 	db	32
   671  007D35  0A                 	db	10
   672  007D36  20                 	db	32
   673  007D37  20                 	db	32
   674  007D38  20                 	db	32
   675  007D39  20                 	db	32
   676  007D3A  20                 	db	32
   677  007D3B  53                 	db	83	;'S'
   678  007D3C  45                 	db	69	;'E'
   679  007D3D  51                 	db	81	;'Q'
   680  007D3E  55                 	db	85	;'U'
   681  007D3F  45                 	db	69	;'E'
   682  007D40  4E                 	db	78	;'N'
   683  007D41  43                 	db	67	;'C'
   684  007D42  49                 	db	73	;'I'
   685  007D43  41                 	db	65	;'A'
   686  007D44  20                 	db	32
   687  007D45  3F                 	db	63	;'?'
   688  007D46  20                 	db	32
   689  007D47  20                 	db	32
   690  007D48  0A                 	db	10
   691  007D49  0A                 	db	10
   692  007D4A  23                 	db	35
   693  007D4B  20                 	db	32
   694  007D4C  2D                 	db	45
   695  007D4D  20                 	db	32
   696  007D4E  53                 	db	83	;'S'
   697  007D4F  49                 	db	73	;'I'
   698  007D50  4D                 	db	77	;'M'
   699  007D51  20                 	db	32
   700  007D52  20                 	db	32
   701  007D53  20                 	db	32
   702  007D54  20                 	db	32
   703  007D55  20                 	db	32
   704  007D56  20                 	db	32
   705  007D57  2A                 	db	42
   706  007D58  20                 	db	32
   707  007D59  2D                 	db	45
   708  007D5A  20                 	db	32
   709  007D5B  4E                 	db	78	;'N'
   710  007D5C  41                 	db	65	;'A'
   711  007D5D  4F                 	db	79	;'O'
   712  007D5E  00                 	db	0
   713  007D5F                     STR_35:
   714  007D5F  41                 	db	65	;'A'
   715  007D60  54                 	db	84	;'T'
   716  007D61  2B                 	db	43
   717  007D62  43                 	db	67	;'C'
   718  007D63  57                 	db	87	;'W'
   719  007D64  53                 	db	83	;'S'
   720  007D65  41                 	db	65	;'A'
   721  007D66  50                 	db	80	;'P'
   722  007D67  3D                 	db	61	;'='
   723  007D68  22                 	db	34
   724  007D69  57                 	db	87	;'W'
   725  007D6A  69                 	db	105	;'i'
   726  007D6B  72                 	db	114	;'r'
   727  007D6C  65                 	db	101	;'e'
   728  007D6D  6C                 	db	108	;'l'
   729  007D6E  65                 	db	101	;'e'
   730  007D6F  73                 	db	115	;'s'
   731  007D70  73                 	db	115	;'s'
   732  007D71  22                 	db	34
   733  007D72  2C                 	db	44
   734  007D73  22                 	db	34
   735  007D74  2A                 	db	42
   736  007D75  2A                 	db	42
   737  007D76  2A                 	db	42
   738  007D77  2A                 	db	42
   739  007D78  2A                 	db	42
   740  007D79  2A                 	db	42
   741  007D7A  2A                 	db	42
   742  007D7B  2A                 	db	42
   743  007D7C  22                 	db	34
   744  007D7D  2C                 	db	44
   745  007D7E  31                 	db	49	;'1'
   746  007D7F  2C                 	db	44
   747  007D80  32                 	db	50	;'2'
   748  007D81  2C                 	db	44
   749  007D82  34                 	db	52	;'4'
   750  007D83  2C                 	db	44
   751  007D84  30                 	db	48	;'0'
   752  007D85  0D                 	db	13
   753  007D86  0A                 	db	10
   754  007D87  00                 	db	0
   755  007D88  41                 	db	65	;'A'
   756  007D89  54                 	db	84	;'T'
   757  007D8A  2B                 	db	43
   758  007D8B  43                 	db	67	;'C'
   759  007D8C  49                 	db	73	;'I'
   760  007D8D  50                 	db	80	;'P'
   761  007D8E  53                 	db	83	;'S'
   762  007D8F  54                 	db	84	;'T'
   763  007D90  41                 	db	65	;'A'
   764  007D91  52                 	db	82	;'R'
   765  007D92  54                 	db	84	;'T'
   766  007D93  3D                 	db	61	;'='
   767  007D94  22                 	db	34
   768  007D95  54                 	db	84	;'T'
   769  007D96  43                 	db	67	;'C'
   770  007D97  50                 	db	80	;'P'
   771  007D98  22                 	db	34
   772  007D99  2C                 	db	44
   773  007D9A  22                 	db	34
   774  007D9B  31                 	db	49	;'1'
   775  007D9C  39                 	db	57	;'9'
   776  007D9D  32                 	db	50	;'2'
   777  007D9E  2E                 	db	46
   778  007D9F  31                 	db	49	;'1'
   779  007DA0  36                 	db	54	;'6'
   780  007DA1  38                 	db	56	;'8'
   781  007DA2  2E                 	db	46
   782  007DA3  34                 	db	52	;'4'
   783  007DA4  2E                 	db	46
   784  007DA5  31                 	db	49	;'1'
   785  007DA6  22                 	db	34
   786  007DA7  2C                 	db	44
   787  007DA8  22                 	db	34
   788  007DA9  33                 	db	51	;'3'
   789  007DAA  33                 	db	51	;'3'
   790  007DAB  33                 	db	51	;'3'
   791  007DAC  22                 	db	34
   792  007DAD  0D                 	db	13
   793  007DAE  0A                 	db	10
   794  007DAF  00                 	db	0
   795  007DB0  41                 	db	65	;'A'
   796  007DB1  54                 	db	84	;'T'
   797  007DB2  2B                 	db	43
   798  007DB3  43                 	db	67	;'C'
   799  007DB4  49                 	db	73	;'I'
   800  007DB5  50                 	db	80	;'P'
   801  007DB6  53                 	db	83	;'S'
   802  007DB7  45                 	db	69	;'E'
   803  007DB8  52                 	db	82	;'R'
   804  007DB9  56                 	db	86	;'V'
   805  007DBA  45                 	db	69	;'E'
   806  007DBB  52                 	db	82	;'R'
   807  007DBC  3D                 	db	61	;'='
   808  007DBD  31                 	db	49	;'1'
   809  007DBE  2C                 	db	44
   810  007DBF  33                 	db	51	;'3'
   811  007DC0  33                 	db	51	;'3'
   812  007DC1  33                 	db	51	;'3'
   813  007DC2  0D                 	db	13
   814  007DC3  0A                 	db	10
   815  007DC4  00                 	db	0
   816  007DC5                     STR_24:
   817  007DC5  43                 	db	67	;'C'
   818  007DC6  69                 	db	105	;'i'
   819  007DC7  63                 	db	99	;'c'
   820  007DC8  6C                 	db	108	;'l'
   821  007DC9  6F                 	db	111	;'o'
   822  007DCA  73                 	db	115	;'s'
   823  007DCB  3A                 	db	58	;':'
   824  007DCC  20                 	db	32
   825  007DCD  20                 	db	32
   826  007DCE  20                 	db	32
   827  007DCF  20                 	db	32
   828  007DD0  20                 	db	32
   829  007DD1  20                 	db	32
   830  007DD2  20                 	db	32
   831  007DD3  20                 	db	32
   832  007DD4  20                 	db	32
   833  007DD5  20                 	db	32
   834  007DD6  20                 	db	32
   835  007DD7  20                 	db	32
   836  007DD8  20                 	db	32
   837  007DD9  00                 	db	0
   838  007DDA                     STR_22:
   839  007DDA  3C                 	db	60	;'<'
   840  007DDB  20                 	db	32
   841  007DDC  20                 	db	32
   842  007DDD  2F                 	db	47
   843  007DDE  20                 	db	32
   844  007DDF  20                 	db	32
   845  007DE0  3E                 	db	62	;'>'
   846  007DE1  20                 	db	32
   847  007DE2  63                 	db	99	;'c'
   848  007DE3  3A                 	db	58	;':'
   849  007DE4  20                 	db	32
   850  007DE5  20                 	db	32
   851  007DE6  20                 	db	32
   852  007DE7  20                 	db	32
   853  007DE8  20                 	db	32
   854  007DE9  20                 	db	32
   855  007DEA  20                 	db	32
   856  007DEB  20                 	db	32
   857  007DEC  20                 	db	32
   858  007DED  20                 	db	32
   859  007DEE  00                 	db	0
   860  007DEF                     STR_31:
   861  007DEF  20                 	db	32
   862  007DF0  20                 	db	32
   863  007DF1  20                 	db	32
   864  007DF2  20                 	db	32
   865  007DF3  20                 	db	32
   866  007DF4  20                 	db	32
   867  007DF5  20                 	db	32
   868  007DF6  20                 	db	32
   869  007DF7  53                 	db	83	;'S'
   870  007DF8  41                 	db	65	;'A'
   871  007DF9  4C                 	db	76	;'L'
   872  007DFA  56                 	db	86	;'V'
   873  007DFB  41                 	db	65	;'A'
   874  007DFC  20                 	db	32
   875  007DFD  20                 	db	32
   876  007DFE  20                 	db	32
   877  007DFF  20                 	db	32
   878  007E00  20                 	db	32
   879  007E01  20                 	db	32
   880  007E02  20                 	db	32
   881  007E03  00                 	db	0
   882  007E04                     STR_3:
   883  007E04  20                 	db	32
   884  007E05  20                 	db	32
   885  007E06  20                 	db	32
   886  007E07  20                 	db	32
   887  007E08  20                 	db	32
   888  007E09  20                 	db	32
   889  007E0A  53                 	db	83	;'S'
   890  007E0B  45                 	db	69	;'E'
   891  007E0C  47                 	db	71	;'G'
   892  007E0D  47                 	db	71	;'G'
   893  007E0E  55                 	db	85	;'U'
   894  007E0F  49                 	db	73	;'I'
   895  007E10  54                 	db	84	;'T'
   896  007E11  20                 	db	32
   897  007E12  20                 	db	32
   898  007E13  20                 	db	32
   899  007E14  20                 	db	32
   900  007E15  20                 	db	32
   901  007E16  20                 	db	32
   902  007E17  20                 	db	32
   903  007E18  00                 	db	0
   904  007E19                     STR_21:
   905  007E19  20                 	db	32
   906  007E1A  20                 	db	32
   907  007E1B  20                 	db	32
   908  007E1C  20                 	db	32
   909  007E1D  20                 	db	32
   910  007E1E  20                 	db	32
   911  007E1F  20                 	db	32
   912  007E20  5B                 	db	91	;'['
   913  007E21  20                 	db	32
   914  007E22  20                 	db	32
   915  007E23  20                 	db	32
   916  007E24  20                 	db	32
   917  007E25  5D                 	db	93	;']'
   918  007E26  20                 	db	32
   919  007E27  20                 	db	32
   920  007E28  20                 	db	32
   921  007E29  20                 	db	32
   922  007E2A  20                 	db	32
   923  007E2B  20                 	db	32
   924  007E2C  20                 	db	32
   925  007E2D  00                 	db	0
   926  007E2E                     STR_13:
   927  007E2E  20                 	db	32
   928  007E2F  20                 	db	32
   929  007E30  20                 	db	32
   930  007E31  20                 	db	32
   931  007E32  20                 	db	32
   932  007E33  20                 	db	32
   933  007E34  20                 	db	32
   934  007E35  44                 	db	68	;'D'
   935  007E36  45                 	db	69	;'E'
   936  007E37  4C                 	db	76	;'L'
   937  007E38  45                 	db	69	;'E'
   938  007E39  54                 	db	84	;'T'
   939  007E3A  45                 	db	69	;'E'
   940  007E3B  44                 	db	68	;'D'
   941  007E3C  20                 	db	32
   942  007E3D  20                 	db	32
   943  007E3E  20                 	db	32
   944  007E3F  20                 	db	32
   945  007E40  20                 	db	32
   946  007E41  20                 	db	32
   947  007E42  00                 	db	0
   948  007E43                     STR_14:
   949  007E43  20                 	db	32
   950  007E44  20                 	db	32
   951  007E45  20                 	db	32
   952  007E46  20                 	db	32
   953  007E47  20                 	db	32
   954  007E48  20                 	db	32
   955  007E49  20                 	db	32
   956  007E4A  20                 	db	32
   957  007E4B  4D                 	db	77	;'M'
   958  007E4C  45                 	db	69	;'E'
   959  007E4D  4D                 	db	77	;'M'
   960  007E4E  4F                 	db	79	;'O'
   961  007E4F  52                 	db	82	;'R'
   962  007E50  59                 	db	89	;'Y'
   963  007E51  20                 	db	32
   964  007E52  20                 	db	32
   965  007E53  20                 	db	32
   966  007E54  20                 	db	32
   967  007E55  20                 	db	32
   968  007E56  20                 	db	32
   969  007E57  00                 	db	0
   970  007E58                     STR_9:
   971  007E58  20                 	db	32
   972  007E59  20                 	db	32
   973  007E5A  20                 	db	32
   974  007E5B  20                 	db	32
   975  007E5C  20                 	db	32
   976  007E5D  20                 	db	32
   977  007E5E  4D                 	db	77	;'M'
   978  007E5F  45                 	db	69	;'E'
   979  007E60  4D                 	db	77	;'M'
   980  007E61  4F                 	db	79	;'O'
   981  007E62  52                 	db	82	;'R'
   982  007E63  49                 	db	73	;'I'
   983  007E64  41                 	db	65	;'A'
   984  007E65  20                 	db	32
   985  007E66  3F                 	db	63	;'?'
   986  007E67  20                 	db	32
   987  007E68  20                 	db	32
   988  007E69  20                 	db	32
   989  007E6A  20                 	db	32
   990  007E6B  20                 	db	32
   991  007E6C  00                 	db	0
   992  007E6D                     STR_30:
   993  007E6D  20                 	db	32
   994  007E6E  20                 	db	32
   995  007E6F  20                 	db	32
   996  007E70  20                 	db	32
   997  007E71  20                 	db	32
   998  007E72  20                 	db	32
   999  007E73  53                 	db	83	;'S'
  1000  007E74  45                 	db	69	;'E'
  1001  007E75  51                 	db	81	;'Q'
  1002  007E76  55                 	db	85	;'U'
  1003  007E77  45                 	db	69	;'E'
  1004  007E78  4E                 	db	78	;'N'
  1005  007E79  43                 	db	67	;'C'
  1006  007E7A  49                 	db	73	;'I'
  1007  007E7B  41                 	db	65	;'A'
  1008  007E7C  20                 	db	32
  1009  007E7D  20                 	db	32
  1010  007E7E  20                 	db	32
  1011  007E7F  20                 	db	32
  1012  007E80  20                 	db	32
  1013  007E81  00                 	db	0
  1014  007E82                     STR_17:
  1015  007E82  20                 	db	32
  1016  007E83  20                 	db	32
  1017  007E84  20                 	db	32
  1018  007E85  20                 	db	32
  1019  007E86  20                 	db	32
  1020  007E87  44                 	db	68	;'D'
  1021  007E88  4F                 	db	79	;'O'
  1022  007E89  20                 	db	32
  1023  007E8A  53                 	db	83	;'S'
  1024  007E8B  49                 	db	73	;'I'
  1025  007E8C  53                 	db	83	;'S'
  1026  007E8D  54                 	db	84	;'T'
  1027  007E8E  45                 	db	69	;'E'
  1028  007E8F  4D                 	db	77	;'M'
  1029  007E90  41                 	db	65	;'A'
  1030  007E91  20                 	db	32
  1031  007E92  20                 	db	32
  1032  007E93  20                 	db	32
  1033  007E94  20                 	db	32
  1034  007E95  20                 	db	32
  1035  007E96  00                 	db	0
  1036  007E97                     STR_18:
  1037  007E97  20                 	db	32
  1038  007E98  20                 	db	32
  1039  007E99  20                 	db	32
  1040  007E9A  41                 	db	65	;'A'
  1041  007E9B  20                 	db	32
  1042  007E9C  20                 	db	32
  1043  007E9D  20                 	db	32
  1044  007E9E  42                 	db	66	;'B'
  1045  007E9F  20                 	db	32
  1046  007EA0  20                 	db	32
  1047  007EA1  20                 	db	32
  1048  007EA2  43                 	db	67	;'C'
  1049  007EA3  20                 	db	32
  1050  007EA4  20                 	db	32
  1051  007EA5  20                 	db	32
  1052  007EA6  44                 	db	68	;'D'
  1053  007EA7  20                 	db	32
  1054  007EA8  20                 	db	32
  1055  007EA9  20                 	db	32
  1056  007EAA  20                 	db	32
  1057  007EAB  00                 	db	0
  1058  007EAC                     STR_8:
  1059  007EAC  20                 	db	32
  1060  007EAD  20                 	db	32
  1061  007EAE  20                 	db	32
  1062  007EAF  44                 	db	68	;'D'
  1063  007EB0  45                 	db	69	;'E'
  1064  007EB1  4C                 	db	76	;'L'
  1065  007EB2  45                 	db	69	;'E'
  1066  007EB3  54                 	db	84	;'T'
  1067  007EB4  41                 	db	65	;'A'
  1068  007EB5  52                 	db	82	;'R'
  1069  007EB6  20                 	db	32
  1070  007EB7  54                 	db	84	;'T'
  1071  007EB8  4F                 	db	79	;'O'
  1072  007EB9  44                 	db	68	;'D'
  1073  007EBA  41                 	db	65	;'A'
  1074  007EBB  20                 	db	32
  1075  007EBC  41                 	db	65	;'A'
  1076  007EBD  20                 	db	32
  1077  007EBE  20                 	db	32
  1078  007EBF  20                 	db	32
  1079  007EC0  00                 	db	0
  1080  007EC1                     STR_6:
  1081  007EC1  32                 	db	50	;'2'
  1082  007EC2  3A                 	db	58	;':'
  1083  007EC3  20                 	db	32
  1084  007EC4  4C                 	db	76	;'L'
  1085  007EC5  49                 	db	73	;'I'
  1086  007EC6  4D                 	db	77	;'M'
  1087  007EC7  50                 	db	80	;'P'
  1088  007EC8  41                 	db	65	;'A'
  1089  007EC9  52                 	db	82	;'R'
  1090  007ECA  20                 	db	32
  1091  007ECB  4D                 	db	77	;'M'
  1092  007ECC  45                 	db	69	;'E'
  1093  007ECD  4D                 	db	77	;'M'
  1094  007ECE  4F                 	db	79	;'O'
  1095  007ECF  52                 	db	82	;'R'
  1096  007ED0  49                 	db	73	;'I'
  1097  007ED1  41                 	db	65	;'A'
  1098  007ED2  20                 	db	32
  1099  007ED3  20                 	db	32
  1100  007ED4  20                 	db	32
  1101  007ED5  00                 	db	0
  1102  007ED6                     STR_16:
  1103  007ED6  20                 	db	32
  1104  007ED7  20                 	db	32
  1105  007ED8  20                 	db	32
  1106  007ED9  41                 	db	65	;'A'
  1107  007EDA  4A                 	db	74	;'J'
  1108  007EDB  55                 	db	85	;'U'
  1109  007EDC  53                 	db	83	;'S'
  1110  007EDD  54                 	db	84	;'T'
  1111  007EDE  45                 	db	69	;'E'
  1112  007EDF  20                 	db	32
  1113  007EE0  4F                 	db	79	;'O'
  1114  007EE1  20                 	db	32
  1115  007EE2  49                 	db	73	;'I'
  1116  007EE3  4E                 	db	78	;'N'
  1117  007EE4  49                 	db	73	;'I'
  1118  007EE5  43                 	db	67	;'C'
  1119  007EE6  49                 	db	73	;'I'
  1120  007EE7  4F                 	db	79	;'O'
  1121  007EE8  20                 	db	32
  1122  007EE9  20                 	db	32
  1123  007EEA  00                 	db	0
  1124  007EEB                     STR_19:
  1125  007EEB  20                 	db	32
  1126  007EEC  20                 	db	32
  1127  007EED  49                 	db	73	;'I'
  1128  007EEE  4E                 	db	78	;'N'
  1129  007EEF  53                 	db	83	;'S'
  1130  007EF0  49                 	db	73	;'I'
  1131  007EF1  52                 	db	82	;'R'
  1132  007EF2  41                 	db	65	;'A'
  1133  007EF3  20                 	db	32
  1134  007EF4  4F                 	db	79	;'O'
  1135  007EF5  53                 	db	83	;'S'
  1136  007EF6  20                 	db	32
  1137  007EF7  50                 	db	80	;'P'
  1138  007EF8  41                 	db	65	;'A'
  1139  007EF9  53                 	db	83	;'S'
  1140  007EFA  53                 	db	83	;'S'
  1141  007EFB  4F                 	db	79	;'O'
  1142  007EFC  53                 	db	83	;'S'
  1143  007EFD  20                 	db	32
  1144  007EFE  20                 	db	32
  1145  007EFF  00                 	db	0
  1146  007F00                     STR_25:
  1147  007F00  30                 	db	48	;'0'
  1148  007F01  20                 	db	32
  1149  007F02  2D                 	db	45
  1150  007F03  20                 	db	32
  1151  007F04  43                 	db	67	;'C'
  1152  007F05  69                 	db	105	;'i'
  1153  007F06  63                 	db	99	;'c'
  1154  007F07  6C                 	db	108	;'l'
  1155  007F08  6F                 	db	111	;'o'
  1156  007F09  20                 	db	32
  1157  007F0A  63                 	db	99	;'c'
  1158  007F0B  6F                 	db	111	;'o'
  1159  007F0C  6E                 	db	110	;'n'
  1160  007F0D  74                 	db	116	;'t'
  1161  007F0E  69                 	db	105	;'i'
  1162  007F0F  6E                 	db	110	;'n'
  1163  007F10  75                 	db	117	;'u'
  1164  007F11  6F                 	db	111	;'o'
  1165  007F12  20                 	db	32
  1166  007F13  20                 	db	32
  1167  007F14  00                 	db	0
  1168  007F15                     STR_7:
  1169  007F15  20                 	db	32
  1170  007F16  43                 	db	67	;'C'
  1171  007F17  45                 	db	69	;'E'
  1172  007F18  52                 	db	82	;'R'
  1173  007F19  54                 	db	84	;'T'
  1174  007F1A  45                 	db	69	;'E'
  1175  007F1B  5A                 	db	90	;'Z'
  1176  007F1C  41                 	db	65	;'A'
  1177  007F1D  20                 	db	32
  1178  007F1E  51                 	db	81	;'Q'
  1179  007F1F  55                 	db	85	;'U'
  1180  007F20  45                 	db	69	;'E'
  1181  007F21  20                 	db	32
  1182  007F22  44                 	db	68	;'D'
  1183  007F23  45                 	db	69	;'E'
  1184  007F24  53                 	db	83	;'S'
  1185  007F25  45                 	db	69	;'E'
  1186  007F26  4A                 	db	74	;'J'
  1187  007F27  41                 	db	65	;'A'
  1188  007F28  20                 	db	32
  1189  007F29  00                 	db	0
  1190  007F2A                     STR_32:
  1191  007F2A  63                 	db	99	;'c'
  1192  007F2B  6F                 	db	111	;'o'
  1193  007F2C  6E                 	db	110	;'n'
  1194  007F2D  66                 	db	102	;'f'
  1195  007F2E  69                 	db	105	;'i'
  1196  007F2F  67                 	db	103	;'g'
  1197  007F30  20                 	db	32
  1198  007F31  63                 	db	99	;'c'
  1199  007F32  6F                 	db	111	;'o'
  1200  007F33  6E                 	db	110	;'n'
  1201  007F34  74                 	db	116	;'t'
  1202  007F35  72                 	db	114	;'r'
  1203  007F36  6C                 	db	108	;'l'
  1204  007F37  3A                 	db	58	;':'
  1205  007F38  20                 	db	32
  1206  007F39  20                 	db	32
  1207  007F3A  20                 	db	32
  1208  007F3B  20                 	db	32
  1209  007F3C  20                 	db	32
  1210  007F3D  25                 	db	37
  1211  007F3E  00                 	db	0
  1212  007F3F                     STR_5:
  1213  007F3F  31                 	db	49	;'1'
  1214  007F40  3A                 	db	58	;':'
  1215  007F41  20                 	db	32
  1216  007F42  56                 	db	86	;'V'
  1217  007F43  45                 	db	69	;'E'
  1218  007F44  52                 	db	82	;'R'
  1219  007F45  49                 	db	73	;'I'
  1220  007F46  46                 	db	70	;'F'
  1221  007F47  49                 	db	73	;'I'
  1222  007F48  43                 	db	67	;'C'
  1223  007F49  41                 	db	65	;'A'
  1224  007F4A  52                 	db	82	;'R'
  1225  007F4B  20                 	db	32
  1226  007F4C  4D                 	db	77	;'M'
  1227  007F4D  45                 	db	69	;'E'
  1228  007F4E  4D                 	db	77	;'M'
  1229  007F4F  4F                 	db	79	;'O'
  1230  007F50  52                 	db	82	;'R'
  1231  007F51  49                 	db	73	;'I'
  1232  007F52  41                 	db	65	;'A'
  1233  007F53  00                 	db	0
  1234  007F54                     STR_23:
  1235  007F54  63                 	db	99	;'c'
  1236  007F55  6F                 	db	111	;'o'
  1237  007F56  6E                 	db	110	;'n'
  1238  007F57  66                 	db	102	;'f'
  1239  007F58  69                 	db	105	;'i'
  1240  007F59  67                 	db	103	;'g'
  1241  007F5A  20                 	db	32
  1242  007F5B  74                 	db	116	;'t'
  1243  007F5C  65                 	db	101	;'e'
  1244  007F5D  6D                 	db	109	;'m'
  1245  007F5E  70                 	db	112	;'p'
  1246  007F5F  6F                 	db	111	;'o'
  1247  007F60  3A                 	db	58	;':'
  1248  007F61  20                 	db	32
  1249  007F62  20                 	db	32
  1250  007F63  20                 	db	32
  1251  007F64  20                 	db	32
  1252  007F65  20                 	db	32
  1253  007F66  20                 	db	32
  1254  007F67  73                 	db	115	;'s'
  1255  007F68  00                 	db	0
  1256  007F69  41                 	db	65	;'A'
  1257  007F6A  54                 	db	84	;'T'
  1258  007F6B  2B                 	db	43
  1259  007F6C  43                 	db	67	;'C'
  1260  007F6D  57                 	db	87	;'W'
  1261  007F6E  41                 	db	65	;'A'
  1262  007F6F  55                 	db	85	;'U'
  1263  007F70  54                 	db	84	;'T'
  1264  007F71  4F                 	db	79	;'O'
  1265  007F72  43                 	db	67	;'C'
  1266  007F73  4F                 	db	79	;'O'
  1267  007F74  4E                 	db	78	;'N'
  1268  007F75  4E                 	db	78	;'N'
  1269  007F76  3D                 	db	61	;'='
  1270  007F77  30                 	db	48	;'0'
  1271  007F78  0D                 	db	13
  1272  007F79  0A                 	db	10
  1273  007F7A  00                 	db	0
  1274  007F7B  41                 	db	65	;'A'
  1275  007F7C  54                 	db	84	;'T'
  1276  007F7D  2B                 	db	43
  1277  007F7E  43                 	db	67	;'C'
  1278  007F7F  49                 	db	73	;'I'
  1279  007F80  50                 	db	80	;'P'
  1280  007F81  4D                 	db	77	;'M'
  1281  007F82  4F                 	db	79	;'O'
  1282  007F83  44                 	db	68	;'D'
  1283  007F84  45                 	db	69	;'E'
  1284  007F85  3D                 	db	61	;'='
  1285  007F86  30                 	db	48	;'0'
  1286  007F87  0D                 	db	13
  1287  007F88  0A                 	db	10
  1288  007F89  00                 	db	0
  1289  007F8A                     STR_38:
  1290  007F8A  41                 	db	65	;'A'
  1291  007F8B  54                 	db	84	;'T'
  1292  007F8C  2B                 	db	43
  1293  007F8D  43                 	db	67	;'C'
  1294  007F8E  57                 	db	87	;'W'
  1295  007F8F  4D                 	db	77	;'M'
  1296  007F90  4F                 	db	79	;'O'
  1297  007F91  44                 	db	68	;'D'
  1298  007F92  45                 	db	69	;'E'
  1299  007F93  3D                 	db	61	;'='
  1300  007F94  30                 	db	48	;'0'
  1301  007F95  0D                 	db	13
  1302  007F96  0A                 	db	10
  1303  007F97  00                 	db	0
  1304  007F98                     STR_33:
  1305  007F98  41                 	db	65	;'A'
  1306  007F99  54                 	db	84	;'T'
  1307  007F9A  2B                 	db	43
  1308  007F9B  43                 	db	67	;'C'
  1309  007F9C  57                 	db	87	;'W'
  1310  007F9D  4D                 	db	77	;'M'
  1311  007F9E  4F                 	db	79	;'O'
  1312  007F9F  44                 	db	68	;'D'
  1313  007FA0  45                 	db	69	;'E'
  1314  007FA1  3D                 	db	61	;'='
  1315  007FA2  31                 	db	49	;'1'
  1316  007FA3  0D                 	db	13
  1317  007FA4  0A                 	db	10
  1318  007FA5  00                 	db	0
  1319  007FA6  41                 	db	65	;'A'
  1320  007FA7  54                 	db	84	;'T'
  1321  007FA8  2B                 	db	43
  1322  007FA9  43                 	db	67	;'C'
  1323  007FAA  49                 	db	73	;'I'
  1324  007FAB  50                 	db	80	;'P'
  1325  007FAC  4D                 	db	77	;'M'
  1326  007FAD  55                 	db	85	;'U'
  1327  007FAE  58                 	db	88	;'X'
  1328  007FAF  3D                 	db	61	;'='
  1329  007FB0  31                 	db	49	;'1'
  1330  007FB1  0D                 	db	13
  1331  007FB2  0A                 	db	10
  1332  007FB3  00                 	db	0
  1333  007FB4                     STR_34:
  1334  007FB4  41                 	db	65	;'A'
  1335  007FB5  54                 	db	84	;'T'
  1336  007FB6  2B                 	db	43
  1337  007FB7  43                 	db	67	;'C'
  1338  007FB8  57                 	db	87	;'W'
  1339  007FB9  4D                 	db	77	;'M'
  1340  007FBA  4F                 	db	79	;'O'
  1341  007FBB  44                 	db	68	;'D'
  1342  007FBC  45                 	db	69	;'E'
  1343  007FBD  3D                 	db	61	;'='
  1344  007FBE  32                 	db	50	;'2'
  1345  007FBF  0D                 	db	13
  1346  007FC0  0A                 	db	10
  1347  007FC1  00                 	db	0
  1348  007FC2                     STR_36:
  1349  007FC2  41                 	db	65	;'A'
  1350  007FC3  54                 	db	84	;'T'
  1351  007FC4  2B                 	db	43
  1352  007FC5  43                 	db	67	;'C'
  1353  007FC6  57                 	db	87	;'W'
  1354  007FC7  4D                 	db	77	;'M'
  1355  007FC8  4F                 	db	79	;'O'
  1356  007FC9  44                 	db	68	;'D'
  1357  007FCA  45                 	db	69	;'E'
  1358  007FCB  3D                 	db	61	;'='
  1359  007FCC  33                 	db	51	;'3'
  1360  007FCD  0D                 	db	13
  1361  007FCE  0A                 	db	10
  1362  007FCF  00                 	db	0
  1363  007FD0  41                 	db	65	;'A'
  1364  007FD1  54                 	db	84	;'T'
  1365  007FD2  2B                 	db	43
  1366  007FD3  43                 	db	67	;'C'
  1367  007FD4  49                 	db	73	;'I'
  1368  007FD5  50                 	db	80	;'P'
  1369  007FD6  43                 	db	67	;'C'
  1370  007FD7  4C                 	db	76	;'L'
  1371  007FD8  4F                 	db	79	;'O'
  1372  007FD9  53                 	db	83	;'S'
  1373  007FDA  45                 	db	69	;'E'
  1374  007FDB  0D                 	db	13
  1375  007FDC  0A                 	db	10
  1376  007FDD  00                 	db	0
  1377  007FDE  41                 	db	65	;'A'
  1378  007FDF  54                 	db	84	;'T'
  1379  007FE0  2B                 	db	43
  1380  007FE1  43                 	db	67	;'C'
  1381  007FE2  57                 	db	87	;'W'
  1382  007FE3  4C                 	db	76	;'L'
  1383  007FE4  41                 	db	65	;'A'
  1384  007FE5  50                 	db	80	;'P'
  1385  007FE6  0D                 	db	13
  1386  007FE7  0A                 	db	10
  1387  007FE8  00                 	db	0
  1388  007FE9  41                 	db	65	;'A'
  1389  007FEA  54                 	db	84	;'T'
  1390  007FEB  2B                 	db	43
  1391  007FEC  43                 	db	67	;'C'
  1392  007FED  49                 	db	73	;'I'
  1393  007FEE  46                 	db	70	;'F'
  1394  007FEF  53                 	db	83	;'S'
  1395  007FF0  52                 	db	82	;'R'
  1396  007FF1  0D                 	db	13
  1397  007FF2  0A                 	db	10
  1398  007FF3  00                 	db	0
  1399  007FF4                     STR_20:
  1400  007FF4  3C                 	db	60	;'<'
  1401  007FF5  20                 	db	32
  1402  007FF6  20                 	db	32
  1403  007FF7  2F                 	db	47
  1404  007FF8  20                 	db	32
  1405  007FF9  20                 	db	32
  1406  007FFA  3E                 	db	62	;'>'
  1407  007FFB  00                 	db	0
  1408  007FFC                     STR_1:
  1409  007FFC  FF                 	db	-1
  1410  007FFD  00                 	db	0
  1411  007FFE  00                 	db	0	; dummy byte at the end
  1412  0000                     
  1413                           ; #config settings
  1414                           
  1415                           	psect	cinit
  1416  0030AE                     __pcinit:
  1417                           	callstack 0
  1418  0030AE                     start_initialization:
  1419                           	callstack 0
  1420  0030AE                     __initialization:
  1421                           	callstack 0
  1422                           
  1423                           ; Initialize objects allocated to BANK1 (90 bytes)
  1424                           ; load TBLPTR registers with __pidataBANK1
  1425  0030AE  0EA6               	movlw	low __pidataBANK1
  1426  0030B0  6EF6               	movwf	tblptrl,c
  1427  0030B2  0E34               	movlw	high __pidataBANK1
  1428  0030B4  6EF7               	movwf	tblptrh,c
  1429  0030B6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1430  0030B8  6EF8               	movwf	tblptru,c
  1431  0030BA  EE01  F000         	lfsr	0,__pdataBANK1
  1432  0030BE  EE10 F05A          	lfsr	1,90
  1433  0030C2                     copy_data0:
  1434  0030C2  0009               	tblrd		*+
  1435  0030C4  CFF5 FFEE          	movff	tablat,postinc0
  1436  0030C8  50E5               	movf	postdec1,w,c
  1437  0030CA  50E1               	movf	fsr1l,w,c
  1438  0030CC  E1FA               	bnz	copy_data0
  1439                           
  1440                           ; Initialize objects allocated to BANK0 (56 bytes)
  1441                           ; load TBLPTR registers with __pidataBANK0
  1442  0030CE  0E5A               	movlw	low __pidataBANK0
  1443  0030D0  6EF6               	movwf	tblptrl,c
  1444  0030D2  0E39               	movlw	high __pidataBANK0
  1445  0030D4  6EF7               	movwf	tblptrh,c
  1446  0030D6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1447  0030D8  6EF8               	movwf	tblptru,c
  1448  0030DA  EE00  F0BD         	lfsr	0,__pdataBANK0
  1449  0030DE  EE10 F038          	lfsr	1,56
  1450  0030E2                     copy_data1:
  1451  0030E2  0009               	tblrd		*+
  1452  0030E4  CFF5 FFEE          	movff	tablat,postinc0
  1453  0030E8  50E5               	movf	postdec1,w,c
  1454  0030EA  50E1               	movf	fsr1l,w,c
  1455  0030EC  E1FA               	bnz	copy_data1
  1456                           
  1457                           ; Initialize objects allocated to COMRAM (19 bytes)
  1458                           ; load TBLPTR registers with __pidataCOMRAM
  1459  0030EE  0E24               	movlw	low __pidataCOMRAM
  1460  0030F0  6EF6               	movwf	tblptrl,c
  1461  0030F2  0E3D               	movlw	high __pidataCOMRAM
  1462  0030F4  6EF7               	movwf	tblptrh,c
  1463  0030F6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1464  0030F8  6EF8               	movwf	tblptru,c
  1465  0030FA  EE00  F047         	lfsr	0,__pdataCOMRAM
  1466  0030FE  EE10 F013          	lfsr	1,19
  1467  003102                     copy_data2:
  1468  003102  0009               	tblrd		*+
  1469  003104  CFF5 FFEE          	movff	tablat,postinc0
  1470  003108  50E5               	movf	postdec1,w,c
  1471  00310A  50E1               	movf	fsr1l,w,c
  1472  00310C  E1FA               	bnz	copy_data2
  1473                           
  1474                           ; Clear objects allocated to BANK1 (30 bytes)
  1475  00310E  EE01  F05A         	lfsr	0,__pbssBANK1
  1476  003112  0E1E               	movlw	30
  1477  003114                     clear_0:
  1478  003114  6AEE               	clrf	postinc0,c
  1479  003116  06E8               	decf	wreg,f,c
  1480  003118  E1FD               	bnz	clear_0
  1481                           
  1482                           ; Clear objects allocated to BANK0 (2 bytes)
  1483  00311A  0100               	movlb	0
  1484  00311C  6BF6               	clrf	(__pbssBANK0+1)& (0+255),b
  1485  00311E  6BF5               	clrf	__pbssBANK0& (0+255),b
  1486                           
  1487                           ; Clear objects allocated to COMRAM (38 bytes)
  1488  003120  EE00  F001         	lfsr	0,__pbssCOMRAM
  1489  003124  0E26               	movlw	38
  1490  003126                     clear_1:
  1491  003126  6AEE               	clrf	postinc0,c
  1492  003128  06E8               	decf	wreg,f,c
  1493  00312A  E1FD               	bnz	clear_1
  1494  00312C                     end_of_initialization:
  1495                           	callstack 0
  1496  00312C                     __end_of__initialization:
  1497                           	callstack 0
  1498  00312C  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1499  00312E  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1500  003130  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1501  003132  6EF8               	movwf	tblptru,c
  1502  003134  0100               	movlb	0
  1503  003136  EF09  F000         	goto	_main	;jump to C main() function
  1504                           
  1505                           	psect	bssCOMRAM
  1506  000001                     __pbssCOMRAM:
  1507                           	callstack 0
  1508  000001                     _t1cont:
  1509                           	callstack 0
  1510  000001                     	ds	4
  1511  000005                     	ds	4
  1512  000009                     _ptrSerialOut:
  1513                           	callstack 0
  1514  000009                     	ds	2
  1515  00000B                     _ptrSerialIn:
  1516                           	callstack 0
  1517  00000B                     	ds	2
  1518  00000D                     _cont_ciclos:
  1519                           	callstack 0
  1520  00000D                     	ds	2
  1521  00000F                     _ciclos:
  1522                           	callstack 0
  1523  00000F                     	ds	2
  1524  000011                     _teclaAnterior:
  1525                           	callstack 0
  1526  000011                     	ds	1
  1527  000012                     _lenSerialIO:
  1528                           	callstack 0
  1529  000012                     	ds	1
  1530  000013                     _atuador:
  1531                           	callstack 0
  1532  000013                     	ds	1
  1533  000014                     _d:
  1534                           	callstack 0
  1535  000014                     	ds	1
  1536  000015                     _fila:
  1537                           	callstack 0
  1538  000015                     	ds	18
  1539                           
  1540                           	psect	dataCOMRAM
  1541  000047                     __pdataCOMRAM:
  1542                           	callstack 0
  1543  000047                     _eusart:
  1544                           	callstack 0
  1545  000047                     	ds	16
  1546  000057                     _indice_passos:
  1547                           	callstack 0
  1548  000057                     	ds	1
  1549  000058                     _ind_print:
  1550                           	callstack 0
  1551  000058                     	ds	1
  1552  000059                     _ind_fila:
  1553                           	callstack 0
  1554  000059                     	ds	1
  1555                           
  1556                           	psect	bssBANK0
  1557  0000F5                     __pbssBANK0:
  1558                           	callstack 0
  1559  0000F5                     	ds	1
  1560  0000F6                     	ds	1
  1561                           
  1562                           	psect	dataBANK0
  1563  0000BD                     __pdataBANK0:
  1564                           	callstack 0
  1565  0000BD                     _wifi:
  1566                           	callstack 0
  1567  0000BD                     	ds	20
  1568  0000D1                     _teclas:
  1569                           	callstack 0
  1570  0000D1                     	ds	16
  1571  0000E1                     _EEPROM:
  1572                           	callstack 0
  1573  0000E1                     	ds	10
  1574  0000EB                     _IHM:
  1575                           	callstack 0
  1576  0000EB                     	ds	10
  1577                           
  1578                           	psect	bssBANK1
  1579  00015A                     __pbssBANK1:
  1580                           	callstack 0
  1581  00015A                     	ds	30
  1582                           
  1583                           	psect	dataBANK1
  1584  000100                     __pdataBANK1:
  1585                           	callstack 0
  1586  000100                     Wifi_connect@F3284:
  1587                           	callstack 0
  1588  000100                     	ds	40
  1589  000128                     Wifi_cipsend@F3294:
  1590                           	callstack 0
  1591  000128                     	ds	30
  1592  000146                     main@F3510:
  1593                           	callstack 0
  1594  000146                     	ds	20
  1595                           
  1596                           	psect	cstackBANK0
  1597  000060                     __pcstackBANK0:
  1598                           	callstack 0
  1599  000060                     main@lema:
  1600                           	callstack 0
  1601                           
  1602                           ; 20 bytes @ 0x0
  1603  000060                     	ds	20
  1604  000074                     main@contPassos:
  1605                           	callstack 0
  1606                           
  1607                           ; 1 bytes @ 0x14
  1608  000074                     	ds	1
  1609  000075                     main@aux:
  1610                           	callstack 0
  1611                           
  1612                           ; 1 bytes @ 0x15
  1613  000075                     	ds	1
  1614  000076                     main@vetor_aux:
  1615                           	callstack 0
  1616                           
  1617                           ; 16 bytes @ 0x16
  1618  000076                     	ds	16
  1619  000086                     _main$653:
  1620                           	callstack 0
  1621                           
  1622                           ; 2 bytes @ 0x26
  1623  000086                     	ds	2
  1624  000088                     _main$672:
  1625                           	callstack 0
  1626                           
  1627                           ; 2 bytes @ 0x28
  1628  000088                     	ds	2
  1629  00008A                     _main$676:
  1630                           	callstack 0
  1631                           
  1632                           ; 2 bytes @ 0x2A
  1633  00008A                     	ds	2
  1634  00008C                     _main$677:
  1635                           	callstack 0
  1636                           
  1637                           ; 2 bytes @ 0x2C
  1638  00008C                     	ds	2
  1639  00008E                     _main$678:
  1640                           	callstack 0
  1641                           
  1642                           ; 2 bytes @ 0x2E
  1643  00008E                     	ds	2
  1644  000090                     _main$679:
  1645                           	callstack 0
  1646                           
  1647                           ; 2 bytes @ 0x30
  1648  000090                     	ds	2
  1649  000092                     _main$680:
  1650                           	callstack 0
  1651                           
  1652                           ; 2 bytes @ 0x32
  1653  000092                     	ds	2
  1654  000094                     _main$681:
  1655                           	callstack 0
  1656                           
  1657                           ; 2 bytes @ 0x34
  1658  000094                     	ds	2
  1659  000096                     _main$682:
  1660                           	callstack 0
  1661                           
  1662                           ; 2 bytes @ 0x36
  1663  000096                     	ds	2
  1664  000098                     _main$683:
  1665                           	callstack 0
  1666                           
  1667                           ; 2 bytes @ 0x38
  1668  000098                     	ds	2
  1669  00009A                     _main$685:
  1670                           	callstack 0
  1671                           
  1672                           ; 2 bytes @ 0x3A
  1673  00009A                     	ds	2
  1674  00009C                     main@i_649:
  1675                           	callstack 0
  1676                           
  1677                           ; 1 bytes @ 0x3C
  1678  00009C                     	ds	1
  1679  00009D                     main@pt:
  1680                           	callstack 0
  1681                           
  1682                           ; 2 bytes @ 0x3D
  1683  00009D                     	ds	2
  1684  00009F                     main@ptr:
  1685                           	callstack 0
  1686                           
  1687                           ; 2 bytes @ 0x3F
  1688  00009F                     	ds	2
  1689  0000A1                     main@i:
  1690                           	callstack 0
  1691                           
  1692                           ; 1 bytes @ 0x41
  1693  0000A1                     	ds	1
  1694  0000A2                     main@j:
  1695                           	callstack 0
  1696                           
  1697                           ; 1 bytes @ 0x42
  1698  0000A2                     	ds	1
  1699  0000A3                     main@i_643:
  1700                           	callstack 0
  1701                           
  1702                           ; 1 bytes @ 0x43
  1703  0000A3                     	ds	1
  1704  0000A4                     main@j_644:
  1705                           	callstack 0
  1706                           
  1707                           ; 1 bytes @ 0x44
  1708  0000A4                     	ds	1
  1709  0000A5                     main@i_661:
  1710                           	callstack 0
  1711                           
  1712                           ; 1 bytes @ 0x45
  1713  0000A5                     	ds	1
  1714  0000A6                     main@j_662:
  1715                           	callstack 0
  1716                           
  1717                           ; 1 bytes @ 0x46
  1718  0000A6                     	ds	1
  1719  0000A7                     main@i_664:
  1720                           	callstack 0
  1721                           
  1722                           ; 1 bytes @ 0x47
  1723  0000A7                     	ds	1
  1724  0000A8                     main@j_665:
  1725                           	callstack 0
  1726                           
  1727                           ; 1 bytes @ 0x48
  1728  0000A8                     	ds	1
  1729  0000A9                     main@i_694:
  1730                           	callstack 0
  1731                           
  1732                           ; 1 bytes @ 0x49
  1733  0000A9                     	ds	1
  1734  0000AA                     main@j_695:
  1735                           	callstack 0
  1736                           
  1737                           ; 1 bytes @ 0x4A
  1738  0000AA                     	ds	1
  1739  0000AB                     main@i_697:
  1740                           	callstack 0
  1741                           
  1742                           ; 1 bytes @ 0x4B
  1743  0000AB                     	ds	1
  1744  0000AC                     main@j_698:
  1745                           	callstack 0
  1746                           
  1747                           ; 1 bytes @ 0x4C
  1748  0000AC                     	ds	1
  1749  0000AD                     main@vetorIn:
  1750                           	callstack 0
  1751                           
  1752                           ; 1 bytes @ 0x4D
  1753  0000AD                     	ds	1
  1754  0000AE                     main@vetorOut:
  1755                           	callstack 0
  1756                           
  1757                           ; 1 bytes @ 0x4E
  1758  0000AE                     	ds	1
  1759  0000AF                     main@meAtuadores:
  1760                           	callstack 0
  1761                           
  1762                           ; 1 bytes @ 0x4F
  1763  0000AF                     	ds	1
  1764  0000B0                     main@ciclos:
  1765                           	callstack 0
  1766                           
  1767                           ; 2 bytes @ 0x50
  1768  0000B0                     	ds	2
  1769  0000B2                     main@init_cond:
  1770                           	callstack 0
  1771                           
  1772                           ; 1 bytes @ 0x52
  1773  0000B2                     	ds	1
  1774  0000B3                     main@botao:
  1775                           	callstack 0
  1776                           
  1777                           ; 1 bytes @ 0x53
  1778  0000B3                     	ds	1
  1779  0000B4                     main@num:
  1780                           	callstack 0
  1781                           
  1782                           ; 2 bytes @ 0x54
  1783  0000B4                     	ds	2
  1784  0000B6                     main@ptr_652:
  1785                           	callstack 0
  1786                           
  1787                           ; 2 bytes @ 0x56
  1788  0000B6                     	ds	2
  1789  0000B8                     main@ptr_671:
  1790                           	callstack 0
  1791                           
  1792                           ; 2 bytes @ 0x58
  1793  0000B8                     	ds	2
  1794  0000BA                     main@auxPasso:
  1795                           	callstack 0
  1796                           
  1797                           ; 1 bytes @ 0x5A
  1798  0000BA                     	ds	1
  1799  0000BB                     main@estado:
  1800                           	callstack 0
  1801                           
  1802                           ; 1 bytes @ 0x5B
  1803  0000BB                     	ds	1
  1804  0000BC                     main@tecla:
  1805                           	callstack 0
  1806                           
  1807                           ; 1 bytes @ 0x5C
  1808  0000BC                     	ds	1
  1809                           
  1810                           	psect	cstackCOMRAM
  1811  000027                     __pcstackCOMRAM:
  1812                           	callstack 0
  1813  000027                     ??_dispLCD_dataReg:
  1814  000027                     ??_alt_atuador:
  1815  000027                     ??_ler_atuador:
  1816  000027                     ??_fifo_indicePrint_inc:
  1817  000027                     ??_dispLCD_instReg:
  1818  000027                     ??_teclado_scan:
  1819  000027                     ?_getContCiclos:
  1820                           	callstack 0
  1821  000027                     ?_fifo_adrs:
  1822                           	callstack 0
  1823  000027                     ?_getCiclos:
  1824                           	callstack 0
  1825  000027                     ?_end_receita:
  1826                           	callstack 0
  1827  000027                     ?___wmul:
  1828                           	callstack 0
  1829  000027                     ?___awdiv:
  1830                           	callstack 0
  1831  000027                     ?___awmod:
  1832                           	callstack 0
  1833  000027                     ?___lwdiv:
  1834                           	callstack 0
  1835  000027                     ?_statusT1:
  1836                           	callstack 0
  1837  000027                     ?___lmul:
  1838                           	callstack 0
  1839  000027                     ?___lldiv:
  1840                           	callstack 0
  1841  000027                     EEPROM_read@addr:
  1842                           	callstack 0
  1843  000027                     EEPROM_write@data:
  1844                           	callstack 0
  1845  000027                     fifo_lerPos@i:
  1846                           	callstack 0
  1847  000027                     serialIObyteShift@dataIn:
  1848                           	callstack 0
  1849  000027                     I2C_tx@b:
  1850                           	callstack 0
  1851  000027                     txEUSART@d:
  1852                           	callstack 0
  1853  000027                     set_passo@ptr:
  1854                           	callstack 0
  1855  000027                     ler_sensor@ptr:
  1856                           	callstack 0
  1857  000027                     delay@t:
  1858                           	callstack 0
  1859  000027                     end_receita@x:
  1860                           	callstack 0
  1861  000027                     codifica@dado:
  1862                           	callstack 0
  1863  000027                     decodifica@d:
  1864                           	callstack 0
  1865  000027                     fifo_add_ciclo@ciclos:
  1866                           	callstack 0
  1867  000027                     initSerialIO@ptrIn:
  1868                           	callstack 0
  1869  000027                     ___wmul@multiplier:
  1870                           	callstack 0
  1871  000027                     ___awdiv@dividend:
  1872                           	callstack 0
  1873  000027                     ___awmod@dividend:
  1874                           	callstack 0
  1875  000027                     ___lwdiv@dividend:
  1876                           	callstack 0
  1877  000027                     ___lmul@multiplier:
  1878                           	callstack 0
  1879  000027                     ___lldiv@dividend:
  1880                           	callstack 0
  1881                           
  1882                           ; 4 bytes @ 0x0
  1883  000027                     	ds	1
  1884  000028                     dispLCD_instReg@i:
  1885                           	callstack 0
  1886  000028                     dispLCD_dataReg@d:
  1887                           	callstack 0
  1888  000028                     EEPROM_write@addr:
  1889                           	callstack 0
  1890  000028                     posAtual@ind:
  1891                           	callstack 0
  1892  000028                     serialIObyteShift@dataOut:
  1893                           	callstack 0
  1894  000028                     wifi_send@msg:
  1895                           	callstack 0
  1896                           
  1897                           ; 2 bytes @ 0x1
  1898  000028                     	ds	1
  1899  000029                     ??_delay:
  1900  000029                     ??_decodifica:
  1901  000029                     ??_set_passo:
  1902  000029                     ??_ler_sensor:
  1903  000029                     ??_codifica:
  1904  000029                     ??_end_receita:
  1905  000029                     dispLCD_lincol@col:
  1906                           	callstack 0
  1907  000029                     formatar_receitas@i:
  1908                           	callstack 0
  1909  000029                     ler_atuador@tecla:
  1910                           	callstack 0
  1911  000029                     alt_atuador@tecla:
  1912                           	callstack 0
  1913  000029                     posAtual@passo:
  1914                           	callstack 0
  1915  000029                     serialIObyteShift@dataBit:
  1916                           	callstack 0
  1917  000029                     teclado_scan@tecla:
  1918                           	callstack 0
  1919  000029                     getCiclos@aux:
  1920                           	callstack 0
  1921  000029                     initSerialIO@ptrOut:
  1922                           	callstack 0
  1923  000029                     ___wmul@multiplicand:
  1924                           	callstack 0
  1925  000029                     ___awdiv@divisor:
  1926                           	callstack 0
  1927  000029                     ___awmod@divisor:
  1928                           	callstack 0
  1929  000029                     ___lwdiv@divisor:
  1930                           	callstack 0
  1931                           
  1932                           ; 2 bytes @ 0x2
  1933  000029                     	ds	1
  1934  00002A                     ??_dispLCD_lincol:
  1935  00002A                     ??_serialIOscan:
  1936  00002A                     manipula_atuadores_init@atuador:
  1937                           	callstack 0
  1938  00002A                     teclado_scan@l:
  1939                           	callstack 0
  1940  00002A                     Wifi_mode@d:
  1941                           	callstack 0
  1942  00002A                     dac_write@code:
  1943                           	callstack 0
  1944  00002A                     salva_atuadores_init@condi_init:
  1945                           	callstack 0
  1946                           
  1947                           ; 4 bytes @ 0x3
  1948  00002A                     	ds	1
  1949  00002B                     set_passo@passo:
  1950                           	callstack 0
  1951  00002B                     ler_sensor@passo:
  1952                           	callstack 0
  1953  00002B                     manipula_atuadores_init@aux:
  1954                           	callstack 0
  1955  00002B                     codifica@tipo:
  1956                           	callstack 0
  1957  00002B                     initSerialIO@length:
  1958                           	callstack 0
  1959  00002B                     teclado_scan@c:
  1960                           	callstack 0
  1961  00002B                     ___awdiv@counter:
  1962                           	callstack 0
  1963  00002B                     ___awmod@counter:
  1964                           	callstack 0
  1965  00002B                     deletar_receita@aux:
  1966                           	callstack 0
  1967  00002B                     ___wmul@product:
  1968                           	callstack 0
  1969  00002B                     ___lwdiv@quotient:
  1970                           	callstack 0
  1971  00002B                     ___lmul@multiplicand:
  1972                           	callstack 0
  1973  00002B                     ___lldiv@divisor:
  1974                           	callstack 0
  1975                           
  1976                           ; 4 bytes @ 0x4
  1977  00002B                     	ds	1
  1978  00002C                     ??_dac_write:
  1979  00002C                     dispLCD_lincol@lin:
  1980                           	callstack 0
  1981  00002C                     manipula_atuadores_init@mask:
  1982                           	callstack 0
  1983  00002C                     serialIOscan@j:
  1984                           	callstack 0
  1985  00002C                     teclado_borda@aux:
  1986                           	callstack 0
  1987  00002C                     ___awdiv@sign:
  1988                           	callstack 0
  1989  00002C                     ___awmod@sign:
  1990                           	callstack 0
  1991                           
  1992                           ; 1 bytes @ 0x5
  1993  00002C                     	ds	1
  1994  00002D                     dispLCD_lincol@aux:
  1995                           	callstack 0
  1996  00002D                     salvar_dado@col:
  1997                           	callstack 0
  1998  00002D                     buscar_dado@col:
  1999                           	callstack 0
  2000  00002D                     deletar_receita@receita:
  2001                           	callstack 0
  2002  00002D                     serialIOscan@i:
  2003                           	callstack 0
  2004  00002D                     teclado_borda@tecla:
  2005                           	callstack 0
  2006  00002D                     ___lwdiv@counter:
  2007                           	callstack 0
  2008  00002D                     salvar_receita@data:
  2009                           	callstack 0
  2010  00002D                     buscar_receita@data:
  2011                           	callstack 0
  2012  00002D                     dignum_conc@ptrNum:
  2013                           	callstack 0
  2014  00002D                     ___awdiv@quotient:
  2015                           	callstack 0
  2016  00002D                     setT1@c:
  2017                           	callstack 0
  2018                           
  2019                           ; 4 bytes @ 0x6
  2020  00002D                     	ds	1
  2021  00002E                     dispLCD@col:
  2022                           	callstack 0
  2023  00002E                     salvar_dado@data:
  2024                           	callstack 0
  2025  00002E                     deletar_receita@i:
  2026                           	callstack 0
  2027  00002E                     dispLCD_str@str:
  2028                           	callstack 0
  2029  00002E                     buscar_dado@data:
  2030                           	callstack 0
  2031  00002E                     salva_atuadores_init@pt:
  2032                           	callstack 0
  2033  00002E                     dignum_apagar@ptrNum:
  2034                           	callstack 0
  2035                           
  2036                           ; 2 bytes @ 0x7
  2037  00002E                     	ds	1
  2038  00002F                     ??_fifo_print:
  2039  00002F                     ??_dignum_conc:
  2040  00002F                     dispLCD@str:
  2041                           	callstack 0
  2042  00002F                     salvar_receita@aux:
  2043                           	callstack 0
  2044  00002F                     buscar_receita@aux:
  2045                           	callstack 0
  2046  00002F                     salvar_dado@aux:
  2047                           	callstack 0
  2048  00002F                     dignum_tam@num:
  2049                           	callstack 0
  2050  00002F                     ___lmul@product:
  2051                           	callstack 0
  2052  00002F                     ___lldiv@quotient:
  2053                           	callstack 0
  2054                           
  2055                           ; 4 bytes @ 0x8
  2056  00002F                     	ds	1
  2057  000030                     dispLCD_str@lin:
  2058                           	callstack 0
  2059  000030                     salva_atuadores_init@dado:
  2060                           	callstack 0
  2061  000030                     buscar_dado@aux:
  2062                           	callstack 0
  2063                           
  2064                           ; 2 bytes @ 0x9
  2065  000030                     	ds	1
  2066  000031                     dispLCD@pos:
  2067                           	callstack 0
  2068  000031                     dispLCD_str@c:
  2069                           	callstack 0
  2070  000031                     salvar_receita@adrs:
  2071                           	callstack 0
  2072  000031                     buscar_receita@adrs:
  2073                           	callstack 0
  2074  000031                     salvar_dado@adrs:
  2075                           	callstack 0
  2076  000031                     salva_atuadores_init@mask:
  2077                           	callstack 0
  2078  000031                     dignum_conc@dig:
  2079                           	callstack 0
  2080  000031                     dignum_tam@tam:
  2081                           	callstack 0
  2082  000031                     _fifo_print$1053:
  2083                           	callstack 0
  2084                           
  2085                           ; 2 bytes @ 0xA
  2086  000031                     	ds	1
  2087  000032                     ??_fifo_alinharPrint:
  2088  000032                     dispLCD@lin:
  2089                           	callstack 0
  2090  000032                     dispLCD_num@col:
  2091                           	callstack 0
  2092  000032                     salvar_receita@i:
  2093                           	callstack 0
  2094  000032                     buscar_receita@i:
  2095                           	callstack 0
  2096  000032                     buscar_dado@adrs:
  2097                           	callstack 0
  2098                           
  2099                           ; 1 bytes @ 0xB
  2100  000032                     	ds	1
  2101  000033                     ?___aldiv:
  2102                           	callstack 0
  2103  000033                     fifo_print@completar:
  2104                           	callstack 0
  2105  000033                     fifo_alinharPrint@cont:
  2106                           	callstack 0
  2107  000033                     ___lldiv@counter:
  2108                           	callstack 0
  2109  000033                     dispLCD_num@num:
  2110                           	callstack 0
  2111  000033                     ___aldiv@dividend:
  2112                           	callstack 0
  2113                           
  2114                           ; 4 bytes @ 0xC
  2115  000033                     	ds	1
  2116  000034                     fifo_print@indPrint:
  2117                           	callstack 0
  2118  000034                     fifo_alinharPrint@i:
  2119                           	callstack 0
  2120  000034                     I2C_init@freq:
  2121                           	callstack 0
  2122  000034                     initEUSART@baudRate:
  2123                           	callstack 0
  2124                           
  2125                           ; 4 bytes @ 0xD
  2126  000034                     	ds	1
  2127  000035                     dispLCD_num@tam:
  2128                           	callstack 0
  2129  000035                     fifo_print@i:
  2130                           	callstack 0
  2131  000035                     fifo_alinharPrint@aux:
  2132                           	callstack 0
  2133                           
  2134                           ; 1 bytes @ 0xE
  2135  000035                     	ds	1
  2136  000036                     ??_dispLCD_num:
  2137  000036                     ??_fifo_delete:
  2138  000036                     fifo_add@passo:
  2139                           	callstack 0
  2140  000036                     fifo_add_tempo@t:
  2141                           	callstack 0
  2142  000036                     fifo_add_control@c:
  2143                           	callstack 0
  2144  000036                     fifo_print@atraso:
  2145                           	callstack 0
  2146                           
  2147                           ; 1 bytes @ 0xF
  2148  000036                     	ds	1
  2149  000037                     fifo_print@comando:
  2150                           	callstack 0
  2151  000037                     ___aldiv@divisor:
  2152                           	callstack 0
  2153                           
  2154                           ; 4 bytes @ 0x10
  2155  000037                     	ds	1
  2156  000038                     ??_initEUSART:
  2157                           
  2158                           ; 1 bytes @ 0x11
  2159  000038                     	ds	3
  2160  00003B                     dispLCD_num@lin:
  2161                           	callstack 0
  2162  00003B                     ___aldiv@counter:
  2163                           	callstack 0
  2164                           
  2165                           ; 1 bytes @ 0x14
  2166  00003B                     	ds	1
  2167  00003C                     dispLCD_num@size:
  2168                           	callstack 0
  2169  00003C                     ___aldiv@sign:
  2170                           	callstack 0
  2171  00003C                     wifi_init@br:
  2172                           	callstack 0
  2173                           
  2174                           ; 4 bytes @ 0x15
  2175  00003C                     	ds	1
  2176  00003D                     dispLCD_num@sinal:
  2177                           	callstack 0
  2178  00003D                     ___aldiv@quotient:
  2179                           	callstack 0
  2180                           
  2181                           ; 4 bytes @ 0x16
  2182  00003D                     	ds	1
  2183  00003E                     dispLCD_num@div:
  2184                           	callstack 0
  2185                           
  2186                           ; 2 bytes @ 0x17
  2187  00003E                     	ds	2
  2188  000040                     printExec@ind:
  2189                           	callstack 0
  2190                           
  2191                           ; 1 bytes @ 0x19
  2192  000040                     	ds	1
  2193  000041                     _printExec$1075:
  2194                           	callstack 0
  2195  000041                     MCP4725@Vout:
  2196                           	callstack 0
  2197                           
  2198                           ; 2 bytes @ 0x1A
  2199  000041                     	ds	2
  2200  000043                     printExec@col:
  2201                           	callstack 0
  2202                           
  2203                           ; 1 bytes @ 0x1C
  2204  000043                     	ds	1
  2205  000044                     printExec@passo:
  2206                           	callstack 0
  2207                           
  2208                           ; 1 bytes @ 0x1D
  2209  000044                     	ds	1
  2210  000045                     ??_main:
  2211                           
  2212                           ; 1 bytes @ 0x1E
  2213  000045                     	ds	2
  2214                           
  2215 ;;
  2216 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2217 ;;
  2218 ;; *************** function _main *****************
  2219 ;; Defined at:
  2220 ;;		line 71 in file "main.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  j               1   76[BANK0 ] unsigned char 
  2225 ;;  j               1   74[BANK0 ] unsigned char 
  2226 ;;  j               1   72[BANK0 ] unsigned char 
  2227 ;;  j               1   70[BANK0 ] unsigned char 
  2228 ;;  j               1   68[BANK0 ] unsigned char 
  2229 ;;  j               1   66[BANK0 ] unsigned char 
  2230 ;;  ptr             2   88[BANK0 ] PTR unsigned char 
  2231 ;;		 -> main@vetor_aux(16), 
  2232 ;;  i               1   75[BANK0 ] unsigned char 
  2233 ;;  i               1   73[BANK0 ] unsigned char 
  2234 ;;  i               1   71[BANK0 ] unsigned char 
  2235 ;;  i               1   69[BANK0 ] unsigned char 
  2236 ;;  ptr             2   86[BANK0 ] PTR unsigned char 
  2237 ;;		 -> main@vetor_aux(16), 
  2238 ;;  i               1   67[BANK0 ] unsigned char 
  2239 ;;  i               1   65[BANK0 ] unsigned char 
  2240 ;;  lema           20    0[BANK0 ] unsigned char [20]
  2241 ;;  ptr             2   63[BANK0 ] PTR unsigned char 
  2242 ;;		 -> main@lema(20), 
  2243 ;;  i               1   60[BANK0 ] unsigned char 
  2244 ;;  vetor_aux      16   22[BANK0 ] unsigned char [16]
  2245 ;;  num             2   84[BANK0 ] unsigned int 
  2246 ;;  ciclos          2   80[BANK0 ] unsigned int 
  2247 ;;  pt              2   61[BANK0 ] PTR unsigned char 
  2248 ;;		 -> main@vetor_aux(16), 
  2249 ;;  tecla           1   92[BANK0 ] unsigned char 
  2250 ;;  estado          1   91[BANK0 ] unsigned char 
  2251 ;;  auxPasso        1   90[BANK0 ] unsigned char 
  2252 ;;  botao           1   83[BANK0 ] unsigned char 
  2253 ;;  init_cond       1   82[BANK0 ] unsigned char 
  2254 ;;  meAtuadores     1   79[BANK0 ] unsigned char 
  2255 ;;  vetorOut        1   78[BANK0 ] unsigned char [1]
  2256 ;;  vetorIn         1   77[BANK0 ] unsigned char [1]
  2257 ;;  aux             1   21[BANK0 ] unsigned char 
  2258 ;;  contPassos      1   20[BANK0 ] unsigned char 
  2259 ;;  atuador         1    0        unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0
  2270 ;;      Locals:         0      93       0       0       0       0       0       0       0
  2271 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2272 ;;      Totals:         2      93       0       0       0       0       0       0       0
  2273 ;;Total ram usage:       95 bytes
  2274 ;; Hardware stack levels required when called:    6
  2275 ;; This function calls:
  2276 ;;		_I2C_init
  2277 ;;		_MCP4725
  2278 ;;		_Wifi_mode
  2279 ;;		___aldiv
  2280 ;;		___awmod
  2281 ;;		___lmul
  2282 ;;		___wmul
  2283 ;;		_addContCiclos
  2284 ;;		_addIndicePassos
  2285 ;;		_alt_atuador
  2286 ;;		_buscar_dado
  2287 ;;		_buscar_receita
  2288 ;;		_decodifica
  2289 ;;		_delay
  2290 ;;		_deletar_receita
  2291 ;;		_dignum_apagar
  2292 ;;		_dignum_conc
  2293 ;;		_dispLCD
  2294 ;;		_dispLCD_clr
  2295 ;;		_dispLCD_dataReg
  2296 ;;		_dispLCD_init
  2297 ;;		_dispLCD_lincol
  2298 ;;		_dispLCD_num
  2299 ;;		_dispLCD_str
  2300 ;;		_fifo_add
  2301 ;;		_fifo_add_ciclo
  2302 ;;		_fifo_add_control
  2303 ;;		_fifo_add_tempo
  2304 ;;		_fifo_adrs
  2305 ;;		_fifo_delete
  2306 ;;		_fifo_disponivel
  2307 ;;		_fifo_indice
  2308 ;;		_fifo_indicePrint_dec
  2309 ;;		_fifo_indicePrint_inc
  2310 ;;		_fifo_lerPos
  2311 ;;		_fifo_print
  2312 ;;		_fifo_tam
  2313 ;;		_formatar_receitas
  2314 ;;		_getCiclos
  2315 ;;		_getContCiclos
  2316 ;;		_getIndicePassos
  2317 ;;		_initSerialIO
  2318 ;;		_init_atuadores
  2319 ;;		_ler_atuador
  2320 ;;		_ler_sensor
  2321 ;;		_manipula_atuadores_init
  2322 ;;		_printExec
  2323 ;;		_resetContCiclos
  2324 ;;		_resetIndicePassos
  2325 ;;		_salva_atuadores_init
  2326 ;;		_salvar_dado
  2327 ;;		_salvar_receita
  2328 ;;		_serialIOscan
  2329 ;;		_setT1
  2330 ;;		_set_passo
  2331 ;;		_statusT1
  2332 ;;		_teclado_borda
  2333 ;;		_teclado_init
  2334 ;;		_timer1_init
  2335 ;;		_wifi_init
  2336 ;; This function is called by:
  2337 ;;		Startup code after reset
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           	psect	text0
  2342  000012                     __ptext0:
  2343                           	callstack 0
  2344  000012                     _main:
  2345                           	callstack 25
  2346  000012                     
  2347                           ;main.c: 73:     dispLCD_init();
  2348  000012  EC00  F01D         	call	_dispLCD_init	;wreg free
  2349  000016                     
  2350                           ;main.c: 74:     teclado_init();
  2351  000016  ECC6  F01E         	call	_teclado_init	;wreg free
  2352  00001A                     
  2353                           ;main.c: 75:     timer1_init();
  2354  00001A  EC27  F01E         	call	_timer1_init	;wreg free
  2355                           
  2356                           ;main.c: 76:     I2C_init(20000000);
  2357  00001E  0E00               	movlw	0
  2358  000020  6E34               	movwf	I2C_init@freq^0,c
  2359  000022  0E2D               	movlw	45
  2360  000024  6E35               	movwf	(I2C_init@freq+1)^0,c
  2361  000026  0E31               	movlw	49
  2362  000028  6E36               	movwf	(I2C_init@freq+2)^0,c
  2363  00002A  0E01               	movlw	1
  2364  00002C  6E37               	movwf	(I2C_init@freq+3)^0,c
  2365  00002E  EC90  F01C         	call	_I2C_init	;wreg free
  2366                           
  2367                           ;main.c: 77:     MCP4725(0);
  2368  000032  0E00               	movlw	0
  2369  000034  6E42               	movwf	(MCP4725@Vout+1)^0,c
  2370  000036  0E00               	movlw	0
  2371  000038  6E41               	movwf	MCP4725@Vout^0,c
  2372  00003A  EC07  F01E         	call	_MCP4725	;wreg free
  2373  00003E                     
  2374                           ;main.c: 78:     wifi.init(115200);
  2375  00003E  0E00               	movlw	0
  2376  000040  6E3C               	movwf	wifi_init@br^0,c
  2377  000042  0EC2               	movlw	194
  2378  000044  6E3D               	movwf	(wifi_init@br+1)^0,c
  2379  000046  0E01               	movlw	1
  2380  000048  6E3E               	movwf	(wifi_init@br+2)^0,c
  2381  00004A  0E00               	movlw	0
  2382  00004C  6E3F               	movwf	(wifi_init@br+3)^0,c
  2383  00004E  D802               	call	u4518
  2384  000050  EF35  F000         	goto	u4519
  2385  000054                     u4518:
  2386  000054  0005               	push	
  2387  000056  0100               	movlb	0	; () banked
  2388  000058  6EFA               	movwf	pclath,c
  2389  00005A  51BD               	movf	_wifi& (0+255),w,b
  2390  00005C  6EFD               	movwf	tosl,c
  2391  00005E  51BE               	movf	(_wifi+1)& (0+255),w,b
  2392  000060  6EFE               	movwf	tosh,c
  2393  000062  50F8               	movf	tblptru,w,c
  2394  000064  6EFF               	movwf	tosu,c
  2395  000066  50FA               	movf	pclath,w,c
  2396  000068  0012               	return		;indir
  2397  00006A                     u4519:
  2398  00006A                     
  2399                           ;main.c: 79:     wifi.mode(1);
  2400  00006A  EE20  F0C3         	lfsr	2,_wifi+6
  2401  00006E  D802               	call	u4528
  2402  000070  EF45  F000         	goto	u4529
  2403  000074                     u4528:
  2404  000074  0005               	push	
  2405  000076  6EFA               	movwf	pclath,c
  2406  000078  50DE               	movf	postinc2,w,c
  2407  00007A  6EFD               	movwf	tosl,c
  2408  00007C  50DE               	movf	postinc2,w,c
  2409  00007E  6EFE               	movwf	tosh,c
  2410  000080  50F8               	movf	tblptru,w,c
  2411  000082  6EFF               	movwf	tosu,c
  2412  000084  50FA               	movf	pclath,w,c
  2413  000086  0E01               	movlw	1
  2414  000088  0012               	return		;indir
  2415  00008A                     u4529:
  2416  00008A                     
  2417                           ;main.c: 81:     char tecla = 0;
  2418  00008A  0E00               	movlw	0
  2419  00008C  0100               	movlb	0	; () banked
  2420  00008E  6FBC               	movwf	main@tecla& (0+255),b
  2421  000090                     
  2422                           ; BSR set to: 0
  2423                           ;main.c: 82:     char estado = 0;
  2424  000090  0E00               	movlw	0
  2425  000092  6FBB               	movwf	main@estado& (0+255),b
  2426  000094                     
  2427                           ; BSR set to: 0
  2428                           ;main.c: 83:     char atuador;;main.c: 84:     char vetor_aux[16];;main.c: 85:     char 
      +                          init_cond = 0;
  2429  000094  0E00               	movlw	0
  2430  000096  6FB2               	movwf	main@init_cond& (0+255),b
  2431  000098                     
  2432                           ; BSR set to: 0
  2433                           ;main.c: 86:     char *pt;;main.c: 88:     char contPassos = 0;
  2434  000098  0E00               	movlw	0
  2435  00009A  6F74               	movwf	main@contPassos& (0+255),b
  2436  00009C                     
  2437                           ; BSR set to: 0
  2438                           ;main.c: 89:     char vetorIn[1] = { 0 };
  2439  00009C  0E00               	movlw	0
  2440  00009E  6FAD               	movwf	main@vetorIn& (0+255),b
  2441  0000A0                     
  2442                           ; BSR set to: 0
  2443                           ;main.c: 90:     char vetorOut[1] = { 0 };
  2444  0000A0  0E00               	movlw	0
  2445  0000A2  6FAE               	movwf	main@vetorOut& (0+255),b
  2446  0000A4                     
  2447                           ; BSR set to: 0
  2448                           ;main.c: 91:     initSerialIO( vetorIn, vetorOut, 1 );
  2449  0000A4  0EAD               	movlw	low main@vetorIn
  2450  0000A6  6E27               	movwf	initSerialIO@ptrIn^0,c
  2451  0000A8  0E00               	movlw	high main@vetorIn
  2452  0000AA  6E28               	movwf	(initSerialIO@ptrIn+1)^0,c
  2453  0000AC  0EAE               	movlw	low main@vetorOut
  2454  0000AE  6E29               	movwf	initSerialIO@ptrOut^0,c
  2455  0000B0  0E00               	movlw	high main@vetorOut
  2456  0000B2  6E2A               	movwf	(initSerialIO@ptrOut+1)^0,c
  2457  0000B4  0E01               	movlw	1
  2458  0000B6  6E2B               	movwf	initSerialIO@length^0,c
  2459  0000B8  EC4B  F01D         	call	_initSerialIO
  2460  0000BC                     
  2461                           ;main.c: 92:     char meAtuadores = -1;
  2462  0000BC  0100               	movlb	0	; () banked
  2463  0000BE  69AF               	setf	main@meAtuadores& (0+255),b
  2464  0000C0                     
  2465                           ; BSR set to: 0
  2466                           ;main.c: 93:     char auxPasso = 0;
  2467  0000C0  0E00               	movlw	0
  2468  0000C2  6FBA               	movwf	main@auxPasso& (0+255),b
  2469  0000C4                     
  2470                           ; BSR set to: 0
  2471                           ;main.c: 94:     char aux = 2;
  2472  0000C4  0E02               	movlw	2
  2473  0000C6  6F75               	movwf	main@aux& (0+255),b
  2474  0000C8                     
  2475                           ; BSR set to: 0
  2476                           ;main.c: 95:     unsigned int num = 0;
  2477  0000C8  0E00               	movlw	0
  2478  0000CA  6FB5               	movwf	(main@num+1)& (0+255),b
  2479  0000CC  0E00               	movlw	0
  2480  0000CE  6FB4               	movwf	main@num& (0+255),b
  2481  0000D0                     
  2482                           ; BSR set to: 0
  2483                           ;main.c: 96:     unsigned int ciclos = 0;
  2484  0000D0  0E00               	movlw	0
  2485  0000D2  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  2486  0000D4  0E00               	movlw	0
  2487  0000D6  6FB0               	movwf	main@ciclos& (0+255),b
  2488  0000D8                     
  2489                           ; BSR set to: 0
  2490                           ;main.c: 97:     char botao = 0;
  2491  0000D8  0E00               	movlw	0
  2492  0000DA  6FB3               	movwf	main@botao& (0+255),b
  2493  0000DC  EF24  F00D         	goto	l7025
  2494  0000E0                     l6291:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;main.c: 115:                             for(char i = 0; i <= 3; i++)
  2498  0000E0  0E00               	movlw	0
  2499  0000E2  6FA1               	movwf	main@i& (0+255),b
  2500  0000E4                     l6293:
  2501                           
  2502                           ; BSR set to: 0
  2503  0000E4  0E03               	movlw	3
  2504  0000E6  65A1               	cpfsgt	main@i& (0+255),b
  2505  0000E8  EF78  F000         	goto	u4531
  2506  0000EC  EF7A  F000         	goto	u4530
  2507  0000F0                     u4531:
  2508  0000F0  EF7C  F000         	goto	l6297
  2509  0000F4                     u4530:
  2510  0000F4  EFAB  F000         	goto	l6315
  2511  0000F8                     l6297:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 116:                             {;main.c: 117:                                
      +                           for(char j = 0; j <= 19; j++)
  2515  0000F8  0E00               	movlw	0
  2516  0000FA  6FA2               	movwf	main@j& (0+255),b
  2517  0000FC                     l6299:
  2518                           
  2519                           ; BSR set to: 0
  2520  0000FC  0E13               	movlw	19
  2521  0000FE  65A2               	cpfsgt	main@j& (0+255),b
  2522  000100  EF84  F000         	goto	u4541
  2523  000104  EF86  F000         	goto	u4540
  2524  000108                     u4541:
  2525  000108  EF88  F000         	goto	l6303
  2526  00010C                     u4540:
  2527  00010C  EFA8  F000         	goto	l6311
  2528  000110                     l6303:
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 118:                                 {;main.c: 119:                            
      +                                   IHM.printpos(i, j, "\377");
  2532  000110  EE20  F0EF         	lfsr	2,_IHM+4
  2533  000114  D802               	call	u4558
  2534  000116  EF9E  F000         	goto	u4559
  2535  00011A                     u4558:
  2536  00011A  0005               	push	
  2537  00011C  6EFA               	movwf	pclath,c
  2538  00011E  50DE               	movf	postinc2,w,c
  2539  000120  6EFD               	movwf	tosl,c
  2540  000122  50DE               	movf	postinc2,w,c
  2541  000124  6EFE               	movwf	tosh,c
  2542  000126  50F8               	movf	tblptru,w,c
  2543  000128  6EFF               	movwf	tosu,c
  2544  00012A  50FA               	movf	pclath,w,c
  2545  00012C  C0A2  F02E         	movff	main@j,dispLCD@col
  2546  000130  0EFC               	movlw	low STR_1
  2547  000132  6E2F               	movwf	dispLCD@str^0,c
  2548  000134  0E7F               	movlw	high STR_1
  2549  000136  6E30               	movwf	(dispLCD@str+1)^0,c
  2550  000138  51A1               	movf	main@i& (0+255),w,b
  2551  00013A  0012               	return		;indir
  2552  00013C                     u4559:
  2553  00013C                     
  2554                           ;main.c: 120:                                     delay(10);
  2555  00013C  0E00               	movlw	0
  2556  00013E  6E28               	movwf	(delay@t+1)^0,c
  2557  000140  0E0A               	movlw	10
  2558  000142  6E27               	movwf	delay@t^0,c
  2559  000144  EC90  F01D         	call	_delay
  2560  000148                     
  2561                           ;main.c: 121:                                 }
  2562  000148  0100               	movlb	0	; () banked
  2563  00014A  2BA2               	incf	main@j& (0+255),f,b
  2564  00014C  EF7E  F000         	goto	l6299
  2565  000150                     l6311:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 122:                             }
  2569  000150  2BA1               	incf	main@i& (0+255),f,b
  2570  000152  EF72  F000         	goto	l6293
  2571  000156                     l6315:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 124:                             for(char i = 0; i <= 3; i++)
  2575  000156  0E00               	movlw	0
  2576  000158  6FA3               	movwf	main@i_643& (0+255),b
  2577  00015A                     l6317:
  2578                           
  2579                           ; BSR set to: 0
  2580  00015A  0E03               	movlw	3
  2581  00015C  65A3               	cpfsgt	main@i_643& (0+255),b
  2582  00015E  EFB3  F000         	goto	u4561
  2583  000162  EFB5  F000         	goto	u4560
  2584  000166                     u4561:
  2585  000166  EFB7  F000         	goto	l6321
  2586  00016A                     u4560:
  2587  00016A  EFE6  F000         	goto	l6339
  2588  00016E                     l6321:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 125:                             {;main.c: 126:                                
      +                           for(char j = 0; j <= 19; j++)
  2592  00016E  0E00               	movlw	0
  2593  000170  6FA4               	movwf	main@j_644& (0+255),b
  2594  000172                     l6323:
  2595                           
  2596                           ; BSR set to: 0
  2597  000172  0E13               	movlw	19
  2598  000174  65A4               	cpfsgt	main@j_644& (0+255),b
  2599  000176  EFBF  F000         	goto	u4571
  2600  00017A  EFC1  F000         	goto	u4570
  2601  00017E                     u4571:
  2602  00017E  EFC3  F000         	goto	l6327
  2603  000182                     u4570:
  2604  000182  EFE3  F000         	goto	l6335
  2605  000186                     l6327:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 127:                                 {;main.c: 128:                            
      +                                   IHM.printpos(i, j, " ");
  2609  000186  EE20  F0EF         	lfsr	2,_IHM+4
  2610  00018A  D802               	call	u4588
  2611  00018C  EFD9  F000         	goto	u4589
  2612  000190                     u4588:
  2613  000190  0005               	push	
  2614  000192  6EFA               	movwf	pclath,c
  2615  000194  50DE               	movf	postinc2,w,c
  2616  000196  6EFD               	movwf	tosl,c
  2617  000198  50DE               	movf	postinc2,w,c
  2618  00019A  6EFE               	movwf	tosh,c
  2619  00019C  50F8               	movf	tblptru,w,c
  2620  00019E  6EFF               	movwf	tosu,c
  2621  0001A0  50FA               	movf	pclath,w,c
  2622  0001A2  C0A4  F02E         	movff	main@j_644,dispLCD@col
  2623  0001A6  0ED8               	movlw	low (STR_24+19)
  2624  0001A8  6E2F               	movwf	dispLCD@str^0,c
  2625  0001AA  0E7D               	movlw	high (STR_24+19)
  2626  0001AC  6E30               	movwf	(dispLCD@str+1)^0,c
  2627  0001AE  51A3               	movf	main@i_643& (0+255),w,b
  2628  0001B0  0012               	return		;indir
  2629  0001B2                     u4589:
  2630  0001B2                     
  2631                           ;main.c: 129:                                     delay(10);
  2632  0001B2  0E00               	movlw	0
  2633  0001B4  6E28               	movwf	(delay@t+1)^0,c
  2634  0001B6  0E0A               	movlw	10
  2635  0001B8  6E27               	movwf	delay@t^0,c
  2636  0001BA  EC90  F01D         	call	_delay
  2637  0001BE                     
  2638                           ;main.c: 130:                                 }
  2639  0001BE  0100               	movlb	0	; () banked
  2640  0001C0  2BA4               	incf	main@j_644& (0+255),f,b
  2641  0001C2  EFB9  F000         	goto	l6323
  2642  0001C6                     l6335:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;main.c: 131:                             }
  2646  0001C6  2BA3               	incf	main@i_643& (0+255),f,b
  2647  0001C8  EFAD  F000         	goto	l6317
  2648  0001CC                     l6339:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 132:                             estado = 1;
  2652  0001CC  0E01               	movlw	1
  2653  0001CE  6FBB               	movwf	main@estado& (0+255),b
  2654                           
  2655                           ;main.c: 133:                             break;
  2656  0001D0  EFCA  F00D         	goto	l7027
  2657  0001D4                     l6341:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;main.c: 136:                             IHM.printpos(1, 0, "      SEGGUIT       ");
  2661  0001D4  EE20  F0EF         	lfsr	2,_IHM+4
  2662  0001D8  D802               	call	u4598
  2663  0001DA  EF00  F001         	goto	u4599
  2664  0001DE                     u4598:
  2665  0001DE  0005               	push	
  2666  0001E0  6EFA               	movwf	pclath,c
  2667  0001E2  50DE               	movf	postinc2,w,c
  2668  0001E4  6EFD               	movwf	tosl,c
  2669  0001E6  50DE               	movf	postinc2,w,c
  2670  0001E8  6EFE               	movwf	tosh,c
  2671  0001EA  50F8               	movf	tblptru,w,c
  2672  0001EC  6EFF               	movwf	tosu,c
  2673  0001EE  50FA               	movf	pclath,w,c
  2674  0001F0  0E00               	movlw	0
  2675  0001F2  6E2E               	movwf	dispLCD@col^0,c
  2676  0001F4  0E04               	movlw	low STR_3
  2677  0001F6  6E2F               	movwf	dispLCD@str^0,c
  2678  0001F8  0E7E               	movlw	high STR_3
  2679  0001FA  6E30               	movwf	(dispLCD@str+1)^0,c
  2680  0001FC  0E01               	movlw	1
  2681  0001FE  0012               	return		;indir
  2682  000200                     u4599:
  2683  000200                     
  2684                           ;main.c: 138:                             char lema[20] = "Mundo ao seu comando";
  2685  000200  EE21  F046         	lfsr	2,main@F3510
  2686  000204  EE10  F060         	lfsr	1,main@lema
  2687  000208  0E13               	movlw	19
  2688  00020A                     u4601:
  2689  00020A  CFDB FFE3          	movff	plusw2,plusw1
  2690  00020E  06E8               	decf	wreg,f,c
  2691  000210  E2FC               	bc	u4601
  2692  000212                     
  2693                           ;main.c: 139:                             char i = 0;
  2694  000212  0E00               	movlw	0
  2695  000214  0100               	movlb	0	; () banked
  2696  000216  6F9C               	movwf	main@i_649& (0+255),b
  2697  000218                     
  2698                           ; BSR set to: 0
  2699                           ;main.c: 140:                             char *ptr;;main.c: 142:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  2700  000218  0E60               	movlw	low main@lema
  2701  00021A  6F9F               	movwf	main@ptr& (0+255),b
  2702  00021C  0E00               	movlw	high main@lema
  2703  00021E  6FA0               	movwf	(main@ptr+1)& (0+255),b
  2704  000220  EF29  F001         	goto	l6359
  2705  000224                     l6349:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 143:                             {;main.c: 144:                                
      +                           dispLCD_lincol( 2, i );
  2709  000224  C09C  F029         	movff	main@i_649,dispLCD_lincol@col
  2710  000228  0E02               	movlw	2
  2711  00022A  ECC4  F019         	call	_dispLCD_lincol
  2712  00022E                     
  2713                           ;main.c: 145:                                 dispLCD_dataReg( *ptr );
  2714  00022E  C09F  FFD9         	movff	main@ptr,fsr2l
  2715  000232  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2716  000236  50DF               	movf	indf2,w,c
  2717  000238  EC59  F01B         	call	_dispLCD_dataReg
  2718  00023C                     
  2719                           ;main.c: 146:                                 i++;
  2720  00023C  0100               	movlb	0	; () banked
  2721  00023E  2B9C               	incf	main@i_649& (0+255),f,b
  2722  000240                     
  2723                           ; BSR set to: 0
  2724                           ;main.c: 147:                                 delay(50);
  2725  000240  0E00               	movlw	0
  2726  000242  6E28               	movwf	(delay@t+1)^0,c
  2727  000244  0E32               	movlw	50
  2728  000246  6E27               	movwf	delay@t^0,c
  2729  000248  EC90  F01D         	call	_delay	;wreg free
  2730  00024C                     
  2731                           ;main.c: 148:                             }
  2732  00024C  0100               	movlb	0	; () banked
  2733  00024E  4B9F               	infsnz	main@ptr& (0+255),f,b
  2734  000250  2BA0               	incf	(main@ptr+1)& (0+255),f,b
  2735  000252                     l6359:
  2736                           
  2737                           ; BSR set to: 0
  2738  000252  C09F  FFD9         	movff	main@ptr,fsr2l
  2739  000256  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2740  00025A  50DF               	movf	indf2,w,c
  2741  00025C  A4D8               	btfss	status,2,c
  2742  00025E  EF33  F001         	goto	u4611
  2743  000262  EF35  F001         	goto	u4610
  2744  000266                     u4611:
  2745  000266  EF12  F001         	goto	l6349
  2746  00026A                     u4610:
  2747  00026A                     
  2748                           ; BSR set to: 0
  2749                           ;main.c: 150:                             setT1(1500);
  2750  00026A  0EDC               	movlw	220
  2751  00026C  6E2D               	movwf	setT1@c^0,c
  2752  00026E  0E05               	movlw	5
  2753  000270  6E2E               	movwf	(setT1@c+1)^0,c
  2754  000272  0E00               	movlw	0
  2755  000274  6E2F               	movwf	(setT1@c+2)^0,c
  2756  000276  0E00               	movlw	0
  2757  000278  6E30               	movwf	(setT1@c+3)^0,c
  2758  00027A  EC60  F01E         	call	_setT1	;wreg free
  2759  00027E                     
  2760                           ;main.c: 151:                             estado = 2;
  2761  00027E  0E02               	movlw	2
  2762  000280  0100               	movlb	0	; () banked
  2763  000282  6FBB               	movwf	main@estado& (0+255),b
  2764                           
  2765                           ;main.c: 152:                             break;
  2766  000284  EFCA  F00D         	goto	l7027
  2767  000288                     l6365:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 155:                             if(!statusT1())
  2771  000288  EC9C  F01E         	call	_statusT1	;wreg free
  2772  00028C  5027               	movf	?_statusT1^0,w,c
  2773  00028E  1028               	iorwf	(?_statusT1+1)^0,w,c
  2774  000290  1029               	iorwf	(?_statusT1+2)^0,w,c
  2775  000292  102A               	iorwf	(?_statusT1+3)^0,w,c
  2776  000294  A4D8               	btfss	status,2,c
  2777  000296  EF4F  F001         	goto	u4621
  2778  00029A  EF51  F001         	goto	u4620
  2779  00029E                     u4621:
  2780  00029E  EFCA  F00D         	goto	l7027
  2781  0002A2                     u4620:
  2782  0002A2                     l6367:
  2783                           
  2784                           ;main.c: 156:                                 estado = 8;
  2785  0002A2  0E08               	movlw	8
  2786  0002A4  0100               	movlb	0	; () banked
  2787  0002A6  6FBB               	movwf	main@estado& (0+255),b
  2788  0002A8  EFCA  F00D         	goto	l7027
  2789  0002AC                     l6369:
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 175:                             init_atuadores();
  2793  0002AC  ECD0  F01E         	call	_init_atuadores	;wreg free
  2794  0002B0                     
  2795                           ;main.c: 176:                             IHM.print("1: INSERIR SEQUENCIA\n"
  2796  0002B0  0E2F               	movlw	low STR_4
  2797  0002B2  6E2E               	movwf	dispLCD_str@str^0,c
  2798  0002B4  0E7C               	movlw	high STR_4
  2799  0002B6  6E2F               	movwf	(dispLCD_str@str+1)^0,c
  2800  0002B8  EE20  F0ED         	lfsr	2,_IHM+2
  2801  0002BC  D802               	call	u4638
  2802  0002BE  EF6B  F001         	goto	u4639
  2803  0002C2                     u4638:
  2804  0002C2  0005               	push	
  2805  0002C4  6EFA               	movwf	pclath,c
  2806  0002C6  50DE               	movf	postinc2,w,c
  2807  0002C8  6EFD               	movwf	tosl,c
  2808  0002CA  50DE               	movf	postinc2,w,c
  2809  0002CC  6EFE               	movwf	tosh,c
  2810  0002CE  50F8               	movf	tblptru,w,c
  2811  0002D0  6EFF               	movwf	tosu,c
  2812  0002D2  50FA               	movf	pclath,w,c
  2813  0002D4  0012               	return		;indir
  2814  0002D6                     u4639:
  2815  0002D6                     
  2816                           ;main.c: 180:                             setT1(1000);
  2817  0002D6  0EE8               	movlw	232
  2818  0002D8  6E2D               	movwf	setT1@c^0,c
  2819  0002DA  0E03               	movlw	3
  2820  0002DC  6E2E               	movwf	(setT1@c+1)^0,c
  2821  0002DE  0E00               	movlw	0
  2822  0002E0  6E2F               	movwf	(setT1@c+2)^0,c
  2823  0002E2  0E00               	movlw	0
  2824  0002E4  6E30               	movwf	(setT1@c+3)^0,c
  2825  0002E6  EC60  F01E         	call	_setT1	;wreg free
  2826  0002EA                     
  2827                           ;main.c: 181:                             estado = 9;
  2828  0002EA  0E09               	movlw	9
  2829  0002EC  0100               	movlb	0	; () banked
  2830  0002EE  6FBB               	movwf	main@estado& (0+255),b
  2831                           
  2832                           ;main.c: 182:                             break;
  2833  0002F0  EFCA  F00D         	goto	l7027
  2834  0002F4                     l6377:
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 185:                             if(!statusT1())
  2838  0002F4  EC9C  F01E         	call	_statusT1	;wreg free
  2839  0002F8  5027               	movf	?_statusT1^0,w,c
  2840  0002FA  1028               	iorwf	(?_statusT1+1)^0,w,c
  2841  0002FC  1029               	iorwf	(?_statusT1+2)^0,w,c
  2842  0002FE  102A               	iorwf	(?_statusT1+3)^0,w,c
  2843  000300  A4D8               	btfss	status,2,c
  2844  000302  EF85  F001         	goto	u4641
  2845  000306  EF87  F001         	goto	u4640
  2846  00030A                     u4641:
  2847  00030A  EFCA  F00D         	goto	l7027
  2848  00030E                     u4640:
  2849  00030E                     
  2850                           ;main.c: 186:                                 estado = 71;
  2851  00030E  0E47               	movlw	71
  2852  000310  0100               	movlb	0	; () banked
  2853  000312  6FBB               	movwf	main@estado& (0+255),b
  2854  000314  EFCA  F00D         	goto	l7027
  2855  000318                     l6381:
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 190:                             tecla = teclado_borda();
  2859  000318  ECE5  F01C         	call	_teclado_borda	;wreg free
  2860  00031C  0100               	movlb	0	; () banked
  2861  00031E  6FBC               	movwf	main@tecla& (0+255),b
  2862                           
  2863                           ;main.c: 191:                             switch(tecla)
  2864  000320  EFA4  F001         	goto	l6393
  2865  000324                     l6383:
  2866  000324  0E03               	movlw	3
  2867  000326  0100               	movlb	0	; () banked
  2868  000328  6FBB               	movwf	main@estado& (0+255),b
  2869  00032A  EFCA  F00D         	goto	l7027
  2870  00032E                     l6385:
  2871                           
  2872                           ; BSR set to: 0
  2873  00032E  0E48               	movlw	72
  2874  000330  6FBB               	movwf	main@estado& (0+255),b
  2875  000332  EFCA  F00D         	goto	l7027
  2876  000336                     l6387:
  2877                           
  2878                           ; BSR set to: 0
  2879  000336  0E64               	movlw	100
  2880  000338  6FBB               	movwf	main@estado& (0+255),b
  2881  00033A  EFCA  F00D         	goto	l7027
  2882  00033E                     l6389:
  2883  00033E  0E50               	movlw	80
  2884  000340  0100               	movlb	0	; () banked
  2885  000342  6FBB               	movwf	main@estado& (0+255),b
  2886  000344  EFCA  F00D         	goto	l7027
  2887  000348                     l6393:
  2888                           
  2889                           ; BSR set to: 0
  2890  000348  51BC               	movf	main@tecla& (0+255),w,b
  2891  00034A  6E45               	movwf	??_main^0,c
  2892  00034C  6A46               	clrf	(??_main+1)^0,c
  2893                           
  2894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2895                           ; Switch size 1, requested type "simple"
  2896                           ; Number of cases is 1, Range of values is 0 to 0
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte            4     3 (average)
  2900                           ;	Chosen strategy is simple_byte
  2901  00034E  5046               	movf	(??_main+1)^0,w,c
  2902  000350  0A00               	xorlw	0	; case 0
  2903  000352  B4D8               	btfsc	status,2,c
  2904  000354  EFAE  F001         	goto	l7915
  2905  000358  EFCA  F00D         	goto	l7027
  2906  00035C                     l7915:
  2907                           
  2908                           ; BSR set to: 0
  2909                           ; Switch size 1, requested type "simple"
  2910                           ; Number of cases is 4, Range of values is 49 to 52
  2911                           ; switch strategies available:
  2912                           ; Name         Instructions Cycles
  2913                           ; simple_byte           13     7 (average)
  2914                           ;	Chosen strategy is simple_byte
  2915  00035C  5045               	movf	??_main^0,w,c
  2916  00035E  0A31               	xorlw	49	; case 49
  2917  000360  B4D8               	btfsc	status,2,c
  2918  000362  EF92  F001         	goto	l6383
  2919  000366  0A03               	xorlw	3	; case 50
  2920  000368  B4D8               	btfsc	status,2,c
  2921  00036A  EF97  F001         	goto	l6385
  2922  00036E  0A01               	xorlw	1	; case 51
  2923  000370  B4D8               	btfsc	status,2,c
  2924  000372  EF9B  F001         	goto	l6387
  2925  000376  0A07               	xorlw	7	; case 52
  2926  000378  B4D8               	btfsc	status,2,c
  2927  00037A  EF9F  F001         	goto	l6389
  2928  00037E  EFCA  F00D         	goto	l7027
  2929  000382                     l6395:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 202:                             buscar_dado(10, 10, &init_cond);
  2933  000382  0E0A               	movlw	10
  2934  000384  6E2D               	movwf	buscar_dado@col^0,c
  2935  000386  0EB2               	movlw	low main@init_cond
  2936  000388  6E2E               	movwf	buscar_dado@data^0,c
  2937  00038A  0E00               	movlw	high main@init_cond
  2938  00038C  6E2F               	movwf	(buscar_dado@data+1)^0,c
  2939  00038E  0E0A               	movlw	10
  2940  000390  ECBD  F01D         	call	_buscar_dado
  2941  000394                     
  2942                           ;main.c: 203:                             manipula_atuadores_init(init_cond);
  2943  000394  0100               	movlb	0	; () banked
  2944  000396  51B2               	movf	main@init_cond& (0+255),w,b
  2945  000398  EC31  F01B         	call	_manipula_atuadores_init
  2946  00039C                     
  2947                           ;main.c: 205:                             EEPROM.buscar(11, vetor_aux);
  2948  00039C  EE20  F0E3         	lfsr	2,_EEPROM+2
  2949  0003A0  D802               	call	u4658
  2950  0003A2  EFE2  F001         	goto	u4659
  2951  0003A6                     u4658:
  2952  0003A6  0005               	push	
  2953  0003A8  6EFA               	movwf	pclath,c
  2954  0003AA  50DE               	movf	postinc2,w,c
  2955  0003AC  6EFD               	movwf	tosl,c
  2956  0003AE  50DE               	movf	postinc2,w,c
  2957  0003B0  6EFE               	movwf	tosh,c
  2958  0003B2  50F8               	movf	tblptru,w,c
  2959  0003B4  6EFF               	movwf	tosu,c
  2960  0003B6  50FA               	movf	pclath,w,c
  2961  0003B8  0E76               	movlw	low main@vetor_aux
  2962  0003BA  6E2D               	movwf	buscar_receita@data^0,c
  2963  0003BC  0E00               	movlw	high main@vetor_aux
  2964  0003BE  6E2E               	movwf	(buscar_receita@data+1)^0,c
  2965  0003C0  0E0B               	movlw	11
  2966  0003C2  0012               	return		;indir
  2967  0003C4                     u4659:
  2968  0003C4                     
  2969                           ;main.c: 206:                             pt = vetor_aux;
  2970  0003C4  0E76               	movlw	low main@vetor_aux
  2971  0003C6  0100               	movlb	0	; () banked
  2972  0003C8  6F9D               	movwf	main@pt& (0+255),b
  2973  0003CA  0E00               	movlw	high main@vetor_aux
  2974  0003CC  6F9E               	movwf	(main@pt+1)& (0+255),b
  2975  0003CE                     
  2976                           ; BSR set to: 0
  2977                           ;main.c: 208:                             if(*pt == 0xFF)
  2978  0003CE  C09D  FFD9         	movff	main@pt,fsr2l
  2979  0003D2  C09E  FFDA         	movff	main@pt+1,fsr2h
  2980  0003D6  28DE               	incf	postinc2,w,c
  2981  0003D8  A4D8               	btfss	status,2,c
  2982  0003DA  EFF1  F001         	goto	u4661
  2983  0003DE  EFF3  F001         	goto	u4660
  2984  0003E2                     u4661:
  2985  0003E2  EF0F  F002         	goto	l6409
  2986  0003E6                     u4660:
  2987  0003E6                     
  2988                           ; BSR set to: 0
  2989                           ;main.c: 209:                             {;main.c: 210:                                
      +                           EEPROM.deletar(tecla % 0x30);
  2990  0003E6  EE20  F0E5         	lfsr	2,_EEPROM+4
  2991  0003EA  D802               	call	u4678
  2992  0003EC  EF0C  F002         	goto	u4679
  2993  0003F0                     u4678:
  2994  0003F0  0005               	push	
  2995  0003F2  6EFA               	movwf	pclath,c
  2996  0003F4  50DE               	movf	postinc2,w,c
  2997  0003F6  6EFD               	movwf	tosl,c
  2998  0003F8  50DE               	movf	postinc2,w,c
  2999  0003FA  6EFE               	movwf	tosh,c
  3000  0003FC  50F8               	movf	tblptru,w,c
  3001  0003FE  6EFF               	movwf	tosu,c
  3002  000400  50FA               	movf	pclath,w,c
  3003  000402  C0BC  F027         	movff	main@tecla,___awmod@dividend
  3004  000406  6A28               	clrf	(___awmod@dividend+1)^0,c
  3005  000408  0E00               	movlw	0
  3006  00040A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  3007  00040C  0E30               	movlw	48
  3008  00040E  6E29               	movwf	___awmod@divisor^0,c
  3009  000410  EC1D  F016         	call	___awmod
  3010  000414  5027               	movf	?___awmod^0,w,c
  3011  000416  0012               	return		;indir
  3012  000418                     u4679:
  3013  000418                     
  3014                           ;main.c: 211:                                 vetor_aux[0] = 0;
  3015  000418  0E00               	movlw	0
  3016  00041A  0100               	movlb	0	; () banked
  3017  00041C  6F76               	movwf	main@vetor_aux& (0+255),b
  3018  00041E                     l6409:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;main.c: 215:                             for(char *ptr = vetor_aux; *ptr != 0; ptr++)
  3022  00041E  0E76               	movlw	low main@vetor_aux
  3023  000420  6FB6               	movwf	main@ptr_652& (0+255),b
  3024  000422  0E00               	movlw	high main@vetor_aux
  3025  000424  6FB7               	movwf	(main@ptr_652+1)& (0+255),b
  3026  000426  EFDC  F002         	goto	l6443
  3027  00042A                     l6411:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 216:                             {;main.c: 217:                                
      +                           if(*ptr <= 0x64 || *ptr == 0xFE)
  3031  00042A  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3032  00042E  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3033  000432  0E64               	movlw	100
  3034  000434  64DF               	cpfsgt	indf2,c
  3035  000436  EF1F  F002         	goto	u4681
  3036  00043A  EF21  F002         	goto	u4680
  3037  00043E                     u4681:
  3038  00043E  EF2E  F002         	goto	l6415
  3039  000442                     u4680:
  3040  000442                     
  3041                           ; BSR set to: 0
  3042  000442  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3043  000446  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3044  00044A  0EFE               	movlw	254
  3045  00044C  18DE               	xorwf	postinc2,w,c
  3046  00044E  A4D8               	btfss	status,2,c
  3047  000450  EF2C  F002         	goto	u4691
  3048  000454  EF2E  F002         	goto	u4690
  3049  000458                     u4691:
  3050  000458  EF3D  F002         	goto	l6417
  3051  00045C                     u4690:
  3052  00045C                     l6415:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;main.c: 218:                                 {;main.c: 219:                            
      +                                   decodifica(&*ptr);
  3056  00045C  C0B6  F027         	movff	main@ptr_652,decodifica@d
  3057  000460  C0B7  F028         	movff	main@ptr_652+1,decodifica@d+1
  3058  000464  ECC4  F012         	call	_decodifica
  3059                           
  3060                           ;main.c: 220:                                     fifo_add_control(*ptr);
  3061  000468  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3062  00046C  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3063  000470  50DF               	movf	indf2,w,c
  3064  000472  EC80  F01B         	call	_fifo_add_control
  3065                           
  3066                           ;main.c: 221:                                 }
  3067  000476  EFD7  F002         	goto	l6439
  3068  00047A                     l6417:
  3069                           
  3070                           ; BSR set to: 0
  3071  00047A  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3072  00047E  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3073  000482  0E64               	movlw	100
  3074  000484  64DF               	cpfsgt	indf2,c
  3075  000486  EF47  F002         	goto	u4701
  3076  00048A  EF49  F002         	goto	u4700
  3077  00048E                     u4701:
  3078  00048E  EF64  F002         	goto	l6423
  3079  000492                     u4700:
  3080  000492                     
  3081                           ; BSR set to: 0
  3082  000492  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3083  000496  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3084  00049A  0EDD               	movlw	221
  3085  00049C  60DF               	cpfslt	indf2,c
  3086  00049E  EF53  F002         	goto	u4711
  3087  0004A2  EF55  F002         	goto	u4710
  3088  0004A6                     u4711:
  3089  0004A6  EF64  F002         	goto	l6423
  3090  0004AA                     u4710:
  3091  0004AA                     
  3092                           ; BSR set to: 0
  3093                           ;main.c: 223:                                 {;main.c: 224:                            
      +                                   decodifica(&*ptr);
  3094  0004AA  C0B6  F027         	movff	main@ptr_652,decodifica@d
  3095  0004AE  C0B7  F028         	movff	main@ptr_652+1,decodifica@d+1
  3096  0004B2  ECC4  F012         	call	_decodifica	;wreg free
  3097                           
  3098                           ;main.c: 225:                                     fifo_add_tempo(*ptr);
  3099  0004B6  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3100  0004BA  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3101  0004BE  50DF               	movf	indf2,w,c
  3102  0004C0  ECD9  F01A         	call	_fifo_add_tempo
  3103                           
  3104                           ;main.c: 226:                                 }
  3105  0004C4  EFD7  F002         	goto	l6439
  3106  0004C8                     l6423:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 228:                                 {;main.c: 229:                            
      +                                   decodifica(&*ptr);
  3110  0004C8  C0B6  F027         	movff	main@ptr_652,decodifica@d
  3111  0004CC  C0B7  F028         	movff	main@ptr_652+1,decodifica@d+1
  3112  0004D0  ECC4  F012         	call	_decodifica	;wreg free
  3113                           
  3114                           ;main.c: 230:                                     switch( *ptr )
  3115  0004D4  EF74  F002         	goto	l6429
  3116  0004D8                     l205:
  3117  0004D8                     l6425:
  3118                           
  3119                           ;main.c: 240:                                                 *ptr &= ~0x20;
  3120  0004D8  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3121  0004DC  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3122  0004E0  0EDF               	movlw	223
  3123  0004E2  16DF               	andwf	indf2,f,c
  3124                           
  3125                           ;main.c: 241:                                                 break;
  3126  0004E4  EFA5  F002         	goto	l6431
  3127  0004E8                     l6429:
  3128  0004E8  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3129  0004EC  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3130  0004F0  50DF               	movf	indf2,w,c
  3131  0004F2  6E45               	movwf	??_main^0,c
  3132  0004F4  6A46               	clrf	(??_main+1)^0,c
  3133                           
  3134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3135                           ; Switch size 1, requested type "simple"
  3136                           ; Number of cases is 1, Range of values is 0 to 0
  3137                           ; switch strategies available:
  3138                           ; Name         Instructions Cycles
  3139                           ; simple_byte            4     3 (average)
  3140                           ;	Chosen strategy is simple_byte
  3141  0004F6  5046               	movf	(??_main+1)^0,w,c
  3142  0004F8  0A00               	xorlw	0	; case 0
  3143  0004FA  B4D8               	btfsc	status,2,c
  3144  0004FC  EF82  F002         	goto	l7917
  3145  000500  EFA5  F002         	goto	l6431
  3146  000504                     l7917:
  3147                           
  3148                           ; Switch size 1, requested type "simple"
  3149                           ; Number of cases is 8, Range of values is 65 to 100
  3150                           ; switch strategies available:
  3151                           ; Name         Instructions Cycles
  3152                           ; simple_byte           25    13 (average)
  3153                           ;	Chosen strategy is simple_byte
  3154  000504  5045               	movf	??_main^0,w,c
  3155  000506  0A41               	xorlw	65	; case 65
  3156  000508  B4D8               	btfsc	status,2,c
  3157  00050A  EF6C  F002         	goto	l205
  3158  00050E  0A03               	xorlw	3	; case 66
  3159  000510  B4D8               	btfsc	status,2,c
  3160  000512  EF6C  F002         	goto	l6425
  3161  000516  0A01               	xorlw	1	; case 67
  3162  000518  B4D8               	btfsc	status,2,c
  3163  00051A  EF6C  F002         	goto	l6425
  3164  00051E  0A07               	xorlw	7	; case 68
  3165  000520  B4D8               	btfsc	status,2,c
  3166  000522  EF6C  F002         	goto	l6425
  3167  000526  0A25               	xorlw	37	; case 97
  3168  000528  B4D8               	btfsc	status,2,c
  3169  00052A  EF6C  F002         	goto	l6425
  3170  00052E  0A03               	xorlw	3	; case 98
  3171  000530  B4D8               	btfsc	status,2,c
  3172  000532  EF6C  F002         	goto	l6425
  3173  000536  0A01               	xorlw	1	; case 99
  3174  000538  B4D8               	btfsc	status,2,c
  3175  00053A  EF6C  F002         	goto	l6425
  3176  00053E  0A07               	xorlw	7	; case 100
  3177  000540  B4D8               	btfsc	status,2,c
  3178  000542  EF6C  F002         	goto	l6425
  3179  000546  EFA5  F002         	goto	l6431
  3180  00054A                     l6431:
  3181                           
  3182                           ;main.c: 243:                                         alt_atuador(*ptr);
  3183  00054A  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3184  00054E  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3185  000552  50DF               	movf	indf2,w,c
  3186  000554  ECBE  F017         	call	_alt_atuador
  3187                           
  3188                           ;main.c: 244:                                         fifo_add( ler_atuador(*ptr) ? *ptr
      +                           : *ptr|0x20 );
  3189  000558  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3190  00055C  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3191  000560  50DF               	movf	indf2,w,c
  3192  000562  EC6E  F017         	call	_ler_atuador
  3193  000566  0900               	iorlw	0
  3194  000568  A4D8               	btfss	status,2,c
  3195  00056A  EFB9  F002         	goto	u4721
  3196  00056E  EFBB  F002         	goto	u4720
  3197  000572                     u4721:
  3198  000572  EFCA  F002         	goto	l6435
  3199  000576                     u4720:
  3200  000576  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3201  00057A  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3202  00057E  50DF               	movf	indf2,w,c
  3203  000580  6E45               	movwf	??_main^0,c
  3204  000582  6A46               	clrf	(??_main+1)^0,c
  3205  000584  0E20               	movlw	32
  3206  000586  1045               	iorwf	??_main^0,w,c
  3207  000588  0100               	movlb	0	; () banked
  3208  00058A  6F86               	movwf	_main$653& (0+255),b
  3209  00058C  5046               	movf	(??_main+1)^0,w,c
  3210  00058E  6F87               	movwf	(_main$653+1)& (0+255),b
  3211  000590  EFD4  F002         	goto	l6437
  3212  000594                     l6435:
  3213  000594  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3214  000598  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3215  00059C  50DF               	movf	indf2,w,c
  3216  00059E  6E45               	movwf	??_main^0,c
  3217  0005A0  5045               	movf	??_main^0,w,c
  3218  0005A2  0100               	movlb	0	; () banked
  3219  0005A4  6F86               	movwf	_main$653& (0+255),b
  3220  0005A6  6B87               	clrf	(_main$653+1)& (0+255),b
  3221  0005A8                     l6437:
  3222                           
  3223                           ; BSR set to: 0
  3224  0005A8  5186               	movf	_main$653& (0+255),w,b
  3225  0005AA  EC05  F01B         	call	_fifo_add
  3226  0005AE                     l6439:
  3227                           
  3228                           ;main.c: 246:                                 fifo_print();
  3229  0005AE  EC26  F00F         	call	_fifo_print	;wreg free
  3230  0005B2                     
  3231                           ;main.c: 247:                             }
  3232  0005B2  0100               	movlb	0	; () banked
  3233  0005B4  4BB6               	infsnz	main@ptr_652& (0+255),f,b
  3234  0005B6  2BB7               	incf	(main@ptr_652+1)& (0+255),f,b
  3235  0005B8                     l6443:
  3236                           
  3237                           ; BSR set to: 0
  3238  0005B8  C0B6  FFD9         	movff	main@ptr_652,fsr2l
  3239  0005BC  C0B7  FFDA         	movff	main@ptr_652+1,fsr2h
  3240  0005C0  50DF               	movf	indf2,w,c
  3241  0005C2  A4D8               	btfss	status,2,c
  3242  0005C4  EFE6  F002         	goto	u4731
  3243  0005C8  EFE8  F002         	goto	u4730
  3244  0005CC                     u4731:
  3245  0005CC  EF15  F002         	goto	l6411
  3246  0005D0                     u4730:
  3247  0005D0                     l6445:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 249:                             dispLCD_clr();
  3251  0005D0  ECE4  F01E         	call	_dispLCD_clr	;wreg free
  3252  0005D4                     l6447:
  3253                           
  3254                           ;main.c: 250:                             estado = 16;
  3255  0005D4  0E10               	movlw	16
  3256  0005D6  0100               	movlb	0	; () banked
  3257  0005D8  6FBB               	movwf	main@estado& (0+255),b
  3258                           
  3259                           ;main.c: 251:                             break;
  3260  0005DA  EFCA  F00D         	goto	l7027
  3261  0005DE                     l6449:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 254:                             dispLCD_clr();
  3265  0005DE  ECE4  F01E         	call	_dispLCD_clr	;wreg free
  3266  0005E2                     
  3267                           ;main.c: 255:                             dispLCD(0,0,"1: VERIFICAR MEMORIA");
  3268  0005E2  0E00               	movlw	0
  3269  0005E4  6E2E               	movwf	dispLCD@col^0,c
  3270  0005E6  0E3F               	movlw	low STR_5
  3271  0005E8  6E2F               	movwf	dispLCD@str^0,c
  3272  0005EA  0E7F               	movlw	high STR_5
  3273  0005EC  6E30               	movwf	(dispLCD@str+1)^0,c
  3274  0005EE  0E00               	movlw	0
  3275  0005F0  ECA4  F01B         	call	_dispLCD
  3276  0005F4                     
  3277                           ;main.c: 256:                             dispLCD(1,0,"2: LIMPAR MEMORIA   ");
  3278  0005F4  0E00               	movlw	0
  3279  0005F6  6E2E               	movwf	dispLCD@col^0,c
  3280  0005F8  0EC1               	movlw	low STR_6
  3281  0005FA  6E2F               	movwf	dispLCD@str^0,c
  3282  0005FC  0E7E               	movlw	high STR_6
  3283  0005FE  6E30               	movwf	(dispLCD@str+1)^0,c
  3284  000600  0E01               	movlw	1
  3285  000602  ECA4  F01B         	call	_dispLCD
  3286  000606                     
  3287                           ;main.c: 258:                             setT1(1000);
  3288  000606  0EE8               	movlw	232
  3289  000608  6E2D               	movwf	setT1@c^0,c
  3290  00060A  0E03               	movlw	3
  3291  00060C  6E2E               	movwf	(setT1@c+1)^0,c
  3292  00060E  0E00               	movlw	0
  3293  000610  6E2F               	movwf	(setT1@c+2)^0,c
  3294  000612  0E00               	movlw	0
  3295  000614  6E30               	movwf	(setT1@c+3)^0,c
  3296  000616  EC60  F01E         	call	_setT1	;wreg free
  3297  00061A                     
  3298                           ;main.c: 259:                             estado = 81;
  3299  00061A  0E51               	movlw	81
  3300  00061C  0100               	movlb	0	; () banked
  3301  00061E  6FBB               	movwf	main@estado& (0+255),b
  3302                           
  3303                           ;main.c: 260:                             break;
  3304  000620  EFCA  F00D         	goto	l7027
  3305  000624                     l6459:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;main.c: 263:                             if(!statusT1())
  3309  000624  EC9C  F01E         	call	_statusT1	;wreg free
  3310  000628  5027               	movf	?_statusT1^0,w,c
  3311  00062A  1028               	iorwf	(?_statusT1+1)^0,w,c
  3312  00062C  1029               	iorwf	(?_statusT1+2)^0,w,c
  3313  00062E  102A               	iorwf	(?_statusT1+3)^0,w,c
  3314  000630  A4D8               	btfss	status,2,c
  3315  000632  EF1D  F003         	goto	u4741
  3316  000636  EF1F  F003         	goto	u4740
  3317  00063A                     u4741:
  3318  00063A  EFCA  F00D         	goto	l7027
  3319  00063E                     u4740:
  3320  00063E                     
  3321                           ;main.c: 264:                                 estado = 82;
  3322  00063E  0E52               	movlw	82
  3323  000640  0100               	movlb	0	; () banked
  3324  000642  6FBB               	movwf	main@estado& (0+255),b
  3325  000644  EFCA  F00D         	goto	l7027
  3326  000648                     l6463:
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;main.c: 268:                             tecla = teclado_borda();
  3330  000648  ECE5  F01C         	call	_teclado_borda	;wreg free
  3331  00064C  0100               	movlb	0	; () banked
  3332  00064E  6FBC               	movwf	main@tecla& (0+255),b
  3333                           
  3334                           ;main.c: 269:                             switch(tecla)
  3335  000650  EF32  F003         	goto	l6473
  3336  000654                     l6465:
  3337                           
  3338                           ; BSR set to: 0
  3339  000654  0E53               	movlw	83
  3340  000656  6FBB               	movwf	main@estado& (0+255),b
  3341  000658  EFCA  F00D         	goto	l7027
  3342  00065C                     l6467:
  3343                           
  3344                           ; BSR set to: 0
  3345  00065C  0E54               	movlw	84
  3346  00065E  6FBB               	movwf	main@estado& (0+255),b
  3347  000660  EFCA  F00D         	goto	l7027
  3348  000664                     l6473:
  3349                           
  3350                           ; BSR set to: 0
  3351  000664  51BC               	movf	main@tecla& (0+255),w,b
  3352  000666  6E45               	movwf	??_main^0,c
  3353  000668  6A46               	clrf	(??_main+1)^0,c
  3354                           
  3355                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3356                           ; Switch size 1, requested type "simple"
  3357                           ; Number of cases is 1, Range of values is 0 to 0
  3358                           ; switch strategies available:
  3359                           ; Name         Instructions Cycles
  3360                           ; simple_byte            4     3 (average)
  3361                           ;	Chosen strategy is simple_byte
  3362  00066A  5046               	movf	(??_main+1)^0,w,c
  3363  00066C  0A00               	xorlw	0	; case 0
  3364  00066E  B4D8               	btfsc	status,2,c
  3365  000670  EF3C  F003         	goto	l7919
  3366  000674  EFCA  F00D         	goto	l7027
  3367  000678                     l7919:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ; Switch size 1, requested type "simple"
  3371                           ; Number of cases is 3, Range of values is 42 to 50
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           10     6 (average)
  3375                           ;	Chosen strategy is simple_byte
  3376  000678  5045               	movf	??_main^0,w,c
  3377  00067A  0A2A               	xorlw	42	; case 42
  3378  00067C  B4D8               	btfsc	status,2,c
  3379  00067E  EF51  F001         	goto	l6367
  3380  000682  0A1B               	xorlw	27	; case 49
  3381  000684  B4D8               	btfsc	status,2,c
  3382  000686  EF2A  F003         	goto	l6465
  3383  00068A  0A03               	xorlw	3	; case 50
  3384  00068C  B4D8               	btfsc	status,2,c
  3385  00068E  EF2E  F003         	goto	l6467
  3386  000692  EFCA  F00D         	goto	l7027
  3387  000696                     l6475:
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;main.c: 278:                             dispLCD(0, 0, " CERTEZA QUE DESEJA ");
  3391  000696  0E00               	movlw	0
  3392  000698  6E2E               	movwf	dispLCD@col^0,c
  3393  00069A  0E15               	movlw	low STR_7
  3394  00069C  6E2F               	movwf	dispLCD@str^0,c
  3395  00069E  0E7F               	movlw	high STR_7
  3396  0006A0  6E30               	movwf	(dispLCD@str+1)^0,c
  3397  0006A2  0E00               	movlw	0
  3398  0006A4  ECA4  F01B         	call	_dispLCD
  3399                           
  3400                           ;main.c: 279:                             dispLCD(1, 0, "   DELETAR TODA A   ");
  3401  0006A8  0E00               	movlw	0
  3402  0006AA  6E2E               	movwf	dispLCD@col^0,c
  3403  0006AC  0EAC               	movlw	low STR_8
  3404  0006AE  6E2F               	movwf	dispLCD@str^0,c
  3405  0006B0  0E7E               	movlw	high STR_8
  3406  0006B2  6E30               	movwf	(dispLCD@str+1)^0,c
  3407  0006B4  0E01               	movlw	1
  3408  0006B6  ECA4  F01B         	call	_dispLCD
  3409                           
  3410                           ;main.c: 280:                             dispLCD(2, 0, "      MEMORIA ?     ");
  3411  0006BA  0E00               	movlw	0
  3412  0006BC  6E2E               	movwf	dispLCD@col^0,c
  3413  0006BE  0E58               	movlw	low STR_9
  3414  0006C0  6E2F               	movwf	dispLCD@str^0,c
  3415  0006C2  0E7E               	movlw	high STR_9
  3416  0006C4  6E30               	movwf	(dispLCD@str+1)^0,c
  3417  0006C6  0E02               	movlw	2
  3418  0006C8  ECA4  F01B         	call	_dispLCD
  3419                           
  3420                           ;main.c: 281:                             dispLCD(3, 0, "# - SIM      * - NAO");
  3421  0006CC  0E00               	movlw	0
  3422  0006CE  6E2E               	movwf	dispLCD@col^0,c
  3423  0006D0  0E4A               	movlw	low (STR_26+41)
  3424  0006D2  6E2F               	movwf	dispLCD@str^0,c
  3425  0006D4  0E7D               	movlw	high (STR_26+41)
  3426  0006D6  6E30               	movwf	(dispLCD@str+1)^0,c
  3427  0006D8  0E03               	movlw	3
  3428  0006DA  ECA4  F01B         	call	_dispLCD
  3429  0006DE                     
  3430                           ;main.c: 283:                             tecla = teclado_borda();
  3431  0006DE  ECE5  F01C         	call	_teclado_borda	;wreg free
  3432  0006E2  0100               	movlb	0	; () banked
  3433  0006E4  6FBC               	movwf	main@tecla& (0+255),b
  3434                           
  3435                           ;main.c: 284:                             switch(tecla)
  3436  0006E6  EF7D  F003         	goto	l6487
  3437  0006EA                     l6479:
  3438                           
  3439                           ; BSR set to: 0
  3440  0006EA  0E55               	movlw	85
  3441  0006EC  6FBB               	movwf	main@estado& (0+255),b
  3442  0006EE  EFCA  F00D         	goto	l7027
  3443  0006F2                     l6481:
  3444                           
  3445                           ; BSR set to: 0
  3446  0006F2  ECE4  F01E         	call	_dispLCD_clr	;wreg free
  3447  0006F6  EF9F  F001         	goto	l6389
  3448  0006FA                     l6487:
  3449                           
  3450                           ; BSR set to: 0
  3451  0006FA  51BC               	movf	main@tecla& (0+255),w,b
  3452  0006FC  6E45               	movwf	??_main^0,c
  3453  0006FE  6A46               	clrf	(??_main+1)^0,c
  3454                           
  3455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3456                           ; Switch size 1, requested type "simple"
  3457                           ; Number of cases is 1, Range of values is 0 to 0
  3458                           ; switch strategies available:
  3459                           ; Name         Instructions Cycles
  3460                           ; simple_byte            4     3 (average)
  3461                           ;	Chosen strategy is simple_byte
  3462  000700  5046               	movf	(??_main+1)^0,w,c
  3463  000702  0A00               	xorlw	0	; case 0
  3464  000704  B4D8               	btfsc	status,2,c
  3465  000706  EF87  F003         	goto	l7921
  3466  00070A  EFCA  F00D         	goto	l7027
  3467  00070E                     l7921:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ; Switch size 1, requested type "simple"
  3471                           ; Number of cases is 2, Range of values is 35 to 42
  3472                           ; switch strategies available:
  3473                           ; Name         Instructions Cycles
  3474                           ; simple_byte            7     4 (average)
  3475                           ;	Chosen strategy is simple_byte
  3476  00070E  5045               	movf	??_main^0,w,c
  3477  000710  0A23               	xorlw	35	; case 35
  3478  000712  B4D8               	btfsc	status,2,c
  3479  000714  EF75  F003         	goto	l6479
  3480  000718  0A09               	xorlw	9	; case 42
  3481  00071A  B4D8               	btfsc	status,2,c
  3482  00071C  EF79  F003         	goto	l6481
  3483  000720  EFCA  F00D         	goto	l7027
  3484  000724                     l6489:
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;main.c: 293:                             EEPROM.formatar();
  3488  000724  EE20  F0E9         	lfsr	2,_EEPROM+8
  3489  000728  D802               	call	u4758
  3490  00072A  EFA1  F003         	goto	u4759
  3491  00072E                     u4758:
  3492  00072E  0005               	push	
  3493  000730  6EFA               	movwf	pclath,c
  3494  000732  50DE               	movf	postinc2,w,c
  3495  000734  6EFD               	movwf	tosl,c
  3496  000736  50DE               	movf	postinc2,w,c
  3497  000738  6EFE               	movwf	tosh,c
  3498  00073A  50F8               	movf	tblptru,w,c
  3499  00073C  6EFF               	movwf	tosu,c
  3500  00073E  50FA               	movf	pclath,w,c
  3501  000740  0012               	return		;indir
  3502  000742                     u4759:
  3503  000742                     
  3504                           ;main.c: 294:                             dispLCD_clr();
  3505  000742  ECE4  F01E         	call	_dispLCD_clr	;wreg free
  3506  000746                     
  3507                           ;main.c: 295:                             for(char i = 0; i <= 3; i++)
  3508  000746  0E00               	movlw	0
  3509  000748  0100               	movlb	0	; () banked
  3510  00074A  6FA5               	movwf	main@i_661& (0+255),b
  3511  00074C                     l6495:
  3512                           
  3513                           ; BSR set to: 0
  3514  00074C  0E03               	movlw	3
  3515  00074E  65A5               	cpfsgt	main@i_661& (0+255),b
  3516  000750  EFAC  F003         	goto	u4761
  3517  000754  EFAE  F003         	goto	u4760
  3518  000758                     u4761:
  3519  000758  EFB0  F003         	goto	l6499
  3520  00075C                     u4760:
  3521  00075C  EFD2  F003         	goto	l6517
  3522  000760                     l6499:
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;main.c: 296:                             {;main.c: 297:                                
      +                           for(char j = 0; j <= 19; j++)
  3526  000760  0E00               	movlw	0
  3527  000762  6FA6               	movwf	main@j_662& (0+255),b
  3528  000764                     l6501:
  3529                           
  3530                           ; BSR set to: 0
  3531  000764  0E13               	movlw	19
  3532  000766  65A6               	cpfsgt	main@j_662& (0+255),b
  3533  000768  EFB8  F003         	goto	u4771
  3534  00076C  EFBA  F003         	goto	u4770
  3535  000770                     u4771:
  3536  000770  EFBC  F003         	goto	l6505
  3537  000774                     u4770:
  3538  000774  EFCF  F003         	goto	l6513
  3539  000778                     l6505:
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;main.c: 298:                                 {;main.c: 299:                            
      +                                   dispLCD(i, j, "\377");
  3543  000778  C0A6  F02E         	movff	main@j_662,dispLCD@col
  3544  00077C  0EFC               	movlw	low STR_1
  3545  00077E  6E2F               	movwf	dispLCD@str^0,c
  3546  000780  0E7F               	movlw	high STR_1
  3547  000782  6E30               	movwf	(dispLCD@str+1)^0,c
  3548  000784  51A5               	movf	main@i_661& (0+255),w,b
  3549  000786  ECA4  F01B         	call	_dispLCD
  3550  00078A                     
  3551                           ;main.c: 300:                                     delay(10);
  3552  00078A  0E00               	movlw	0
  3553  00078C  6E28               	movwf	(delay@t+1)^0,c
  3554  00078E  0E0A               	movlw	10
  3555  000790  6E27               	movwf	delay@t^0,c
  3556  000792  EC90  F01D         	call	_delay	;wreg free
  3557  000796                     
  3558                           ;main.c: 301:                                 }
  3559  000796  0100               	movlb	0	; () banked
  3560  000798  2BA6               	incf	main@j_662& (0+255),f,b
  3561  00079A  EFB2  F003         	goto	l6501
  3562  00079E                     l6513:
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;main.c: 302:                             }
  3566  00079E  2BA5               	incf	main@i_661& (0+255),f,b
  3567  0007A0  EFA6  F003         	goto	l6495
  3568  0007A4                     l6517:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;main.c: 304:                             for(char i = 0; i <= 3; i++)
  3572  0007A4  0E00               	movlw	0
  3573  0007A6  6FA7               	movwf	main@i_664& (0+255),b
  3574  0007A8                     l6519:
  3575                           
  3576                           ; BSR set to: 0
  3577  0007A8  0E03               	movlw	3
  3578  0007AA  65A7               	cpfsgt	main@i_664& (0+255),b
  3579  0007AC  EFDA  F003         	goto	u4781
  3580  0007B0  EFDC  F003         	goto	u4780
  3581  0007B4                     u4781:
  3582  0007B4  EFDE  F003         	goto	l6523
  3583  0007B8                     u4780:
  3584  0007B8  EF00  F004         	goto	l6541
  3585  0007BC                     l6523:
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;main.c: 305:                             {;main.c: 306:                                
      +                           for(char j = 0; j <= 19; j++)
  3589  0007BC  0E00               	movlw	0
  3590  0007BE  6FA8               	movwf	main@j_665& (0+255),b
  3591  0007C0                     l6525:
  3592                           
  3593                           ; BSR set to: 0
  3594  0007C0  0E13               	movlw	19
  3595  0007C2  65A8               	cpfsgt	main@j_665& (0+255),b
  3596  0007C4  EFE6  F003         	goto	u4791
  3597  0007C8  EFE8  F003         	goto	u4790
  3598  0007CC                     u4791:
  3599  0007CC  EFEA  F003         	goto	l6529
  3600  0007D0                     u4790:
  3601  0007D0  EFFD  F003         	goto	l6537
  3602  0007D4                     l6529:
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;main.c: 307:                                 {;main.c: 308:                            
      +                                   dispLCD(i, j, " ");
  3606  0007D4  C0A8  F02E         	movff	main@j_665,dispLCD@col
  3607  0007D8  0ED8               	movlw	low (STR_24+19)
  3608  0007DA  6E2F               	movwf	dispLCD@str^0,c
  3609  0007DC  0E7D               	movlw	high (STR_24+19)
  3610  0007DE  6E30               	movwf	(dispLCD@str+1)^0,c
  3611  0007E0  51A7               	movf	main@i_664& (0+255),w,b
  3612  0007E2  ECA4  F01B         	call	_dispLCD
  3613  0007E6                     
  3614                           ;main.c: 309:                                     delay(10);
  3615  0007E6  0E00               	movlw	0
  3616  0007E8  6E28               	movwf	(delay@t+1)^0,c
  3617  0007EA  0E0A               	movlw	10
  3618  0007EC  6E27               	movwf	delay@t^0,c
  3619  0007EE  EC90  F01D         	call	_delay	;wreg free
  3620  0007F2                     
  3621                           ;main.c: 310:                                 }
  3622  0007F2  0100               	movlb	0	; () banked
  3623  0007F4  2BA8               	incf	main@j_665& (0+255),f,b
  3624  0007F6  EFE0  F003         	goto	l6525
  3625  0007FA                     l6537:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;main.c: 311:                             }
  3629  0007FA  2BA7               	incf	main@i_664& (0+255),f,b
  3630  0007FC  EFD4  F003         	goto	l6519
  3631  000800                     l6541:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;main.c: 312:                             dispLCD(1, 0, "       DELETED      ");
  3635  000800  0E00               	movlw	0
  3636  000802  6E2E               	movwf	dispLCD@col^0,c
  3637  000804  0E2E               	movlw	low STR_13
  3638  000806  6E2F               	movwf	dispLCD@str^0,c
  3639  000808  0E7E               	movlw	high STR_13
  3640  00080A  6E30               	movwf	(dispLCD@str+1)^0,c
  3641  00080C  0E01               	movlw	1
  3642  00080E  ECA4  F01B         	call	_dispLCD
  3643                           
  3644                           ;main.c: 313:                             dispLCD(2, 0, "        MEMORY      ");
  3645  000812  0E00               	movlw	0
  3646  000814  6E2E               	movwf	dispLCD@col^0,c
  3647  000816  0E43               	movlw	low STR_14
  3648  000818  6E2F               	movwf	dispLCD@str^0,c
  3649  00081A  0E7E               	movlw	high STR_14
  3650  00081C  6E30               	movwf	(dispLCD@str+1)^0,c
  3651  00081E  0E02               	movlw	2
  3652  000820  ECA4  F01B         	call	_dispLCD
  3653  000824                     
  3654                           ;main.c: 315:                             setT1(1000);
  3655  000824  0EE8               	movlw	232
  3656  000826  6E2D               	movwf	setT1@c^0,c
  3657  000828  0E03               	movlw	3
  3658  00082A  6E2E               	movwf	(setT1@c+1)^0,c
  3659  00082C  0E00               	movlw	0
  3660  00082E  6E2F               	movwf	(setT1@c+2)^0,c
  3661  000830  0E00               	movlw	0
  3662  000832  6E30               	movwf	(setT1@c+3)^0,c
  3663  000834  EC60  F01E         	call	_setT1	;wreg free
  3664  000838                     
  3665                           ;main.c: 316:                             estado = 86;
  3666  000838  0E56               	movlw	86
  3667  00083A  0100               	movlb	0	; () banked
  3668  00083C  6FBB               	movwf	main@estado& (0+255),b
  3669                           
  3670                           ;main.c: 317:                             break;
  3671  00083E  EFCA  F00D         	goto	l7027
  3672  000842                     l6547:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;main.c: 320:                             if(!statusT1())
  3676  000842  EC9C  F01E         	call	_statusT1	;wreg free
  3677  000846  5027               	movf	?_statusT1^0,w,c
  3678  000848  1028               	iorwf	(?_statusT1+1)^0,w,c
  3679  00084A  1029               	iorwf	(?_statusT1+2)^0,w,c
  3680  00084C  102A               	iorwf	(?_statusT1+3)^0,w,c
  3681  00084E  A4D8               	btfss	status,2,c
  3682  000850  EF2C  F004         	goto	u4801
  3683  000854  EF2E  F004         	goto	u4800
  3684  000858                     u4801:
  3685  000858  EFCA  F00D         	goto	l7027
  3686  00085C                     u4800:
  3687  00085C  EF9F  F001         	goto	l6389
  3688  000860                     l6551:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;main.c: 325:                             IHM.clr();
  3692  000860  EE20  F0F3         	lfsr	2,_IHM+8
  3693  000864  D802               	call	u4818
  3694  000866  EF3F  F004         	goto	u4819
  3695  00086A                     u4818:
  3696  00086A  0005               	push	
  3697  00086C  6EFA               	movwf	pclath,c
  3698  00086E  50DE               	movf	postinc2,w,c
  3699  000870  6EFD               	movwf	tosl,c
  3700  000872  50DE               	movf	postinc2,w,c
  3701  000874  6EFE               	movwf	tosh,c
  3702  000876  50F8               	movf	tblptru,w,c
  3703  000878  6EFF               	movwf	tosu,c
  3704  00087A  50FA               	movf	pclath,w,c
  3705  00087C  0012               	return		;indir
  3706  00087E                     u4819:
  3707  00087E                     
  3708                           ;main.c: 326:                             IHM.print(" ESCOLHA A MEMORIA \n"
  3709  00087E  0E82               	movlw	low STR_15
  3710  000880  6E2E               	movwf	dispLCD_str@str^0,c
  3711  000882  0E7C               	movlw	high STR_15
  3712  000884  6E2F               	movwf	(dispLCD_str@str+1)^0,c
  3713  000886  EE20  F0ED         	lfsr	2,_IHM+2
  3714  00088A  D802               	call	u4828
  3715  00088C  EF52  F004         	goto	u4829
  3716  000890                     u4828:
  3717  000890  0005               	push	
  3718  000892  6EFA               	movwf	pclath,c
  3719  000894  50DE               	movf	postinc2,w,c
  3720  000896  6EFD               	movwf	tosl,c
  3721  000898  50DE               	movf	postinc2,w,c
  3722  00089A  6EFE               	movwf	tosh,c
  3723  00089C  50F8               	movf	tblptru,w,c
  3724  00089E  6EFF               	movwf	tosu,c
  3725  0008A0  50FA               	movf	pclath,w,c
  3726  0008A2  0012               	return		;indir
  3727  0008A4                     u4829:
  3728  0008A4                     
  3729                           ;main.c: 330:                             estado = 73;
  3730  0008A4  0E49               	movlw	73
  3731  0008A6  0100               	movlb	0	; () banked
  3732  0008A8  6FBB               	movwf	main@estado& (0+255),b
  3733  0008AA                     l6557:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;main.c: 333:                             tecla = teclado_borda();
  3737  0008AA  ECE5  F01C         	call	_teclado_borda	;wreg free
  3738  0008AE  0100               	movlb	0	; () banked
  3739  0008B0  6FBC               	movwf	main@tecla& (0+255),b
  3740                           
  3741                           ;main.c: 334:                             switch(tecla)
  3742  0008B2  EF96  F005         	goto	l6617
  3743  0008B6                     l247:
  3744  0008B6                     l6559:
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;main.c: 346:                                            buscar_dado(10, tecla % 0x30, &
      +                          init_cond);
  3748  0008B6  C0BC  F027         	movff	main@tecla,___awmod@dividend
  3749  0008BA  6A28               	clrf	(___awmod@dividend+1)^0,c
  3750  0008BC  0E00               	movlw	0
  3751  0008BE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  3752  0008C0  0E30               	movlw	48
  3753  0008C2  6E29               	movwf	___awmod@divisor^0,c
  3754  0008C4  EC1D  F016         	call	___awmod	;wreg free
  3755  0008C8  5027               	movf	?___awmod^0,w,c
  3756  0008CA  6E2D               	movwf	buscar_dado@col^0,c
  3757  0008CC  0EB2               	movlw	low main@init_cond
  3758  0008CE  6E2E               	movwf	buscar_dado@data^0,c
  3759  0008D0  0E00               	movlw	high main@init_cond
  3760  0008D2  6E2F               	movwf	(buscar_dado@data+1)^0,c
  3761  0008D4  0E0A               	movlw	10
  3762  0008D6  ECBD  F01D         	call	_buscar_dado
  3763  0008DA                     
  3764                           ;main.c: 347:                                            manipula_atuadores_init(init_co
      +                          nd);
  3765  0008DA  0100               	movlb	0	; () banked
  3766  0008DC  51B2               	movf	main@init_cond& (0+255),w,b
  3767  0008DE  EC31  F01B         	call	_manipula_atuadores_init
  3768  0008E2                     
  3769                           ;main.c: 349:                                            EEPROM.buscar(tecla % 0x30, vet
      +                          or_aux);
  3770  0008E2  EE20  F0E3         	lfsr	2,_EEPROM+2
  3771  0008E6  D802               	call	u4838
  3772  0008E8  EF8E  F004         	goto	u4839
  3773  0008EC                     u4838:
  3774  0008EC  0005               	push	
  3775  0008EE  6EFA               	movwf	pclath,c
  3776  0008F0  50DE               	movf	postinc2,w,c
  3777  0008F2  6EFD               	movwf	tosl,c
  3778  0008F4  50DE               	movf	postinc2,w,c
  3779  0008F6  6EFE               	movwf	tosh,c
  3780  0008F8  50F8               	movf	tblptru,w,c
  3781  0008FA  6EFF               	movwf	tosu,c
  3782  0008FC  50FA               	movf	pclath,w,c
  3783  0008FE  0E76               	movlw	low main@vetor_aux
  3784  000900  6E2D               	movwf	buscar_receita@data^0,c
  3785  000902  0E00               	movlw	high main@vetor_aux
  3786  000904  6E2E               	movwf	(buscar_receita@data+1)^0,c
  3787  000906  C0BC  F027         	movff	main@tecla,___awmod@dividend
  3788  00090A  6A28               	clrf	(___awmod@dividend+1)^0,c
  3789  00090C  0E00               	movlw	0
  3790  00090E  6E2A               	movwf	(___awmod@divisor+1)^0,c
  3791  000910  0E30               	movlw	48
  3792  000912  6E29               	movwf	___awmod@divisor^0,c
  3793  000914  EC1D  F016         	call	___awmod	;wreg free
  3794  000918  5027               	movf	?___awmod^0,w,c
  3795  00091A  0012               	return		;indir
  3796  00091C                     u4839:
  3797  00091C                     
  3798                           ;main.c: 350:                                            pt = vetor_aux;
  3799  00091C  0E76               	movlw	low main@vetor_aux
  3800  00091E  0100               	movlb	0	; () banked
  3801  000920  6F9D               	movwf	main@pt& (0+255),b
  3802  000922  0E00               	movlw	high main@vetor_aux
  3803  000924  6F9E               	movwf	(main@pt+1)& (0+255),b
  3804  000926                     
  3805                           ; BSR set to: 0
  3806                           ;main.c: 352:                                            if(*pt == 0xFF)
  3807  000926  C09D  FFD9         	movff	main@pt,fsr2l
  3808  00092A  C09E  FFDA         	movff	main@pt+1,fsr2h
  3809  00092E  28DE               	incf	postinc2,w,c
  3810  000930  A4D8               	btfss	status,2,c
  3811  000932  EF9D  F004         	goto	u4841
  3812  000936  EF9F  F004         	goto	u4840
  3813  00093A                     u4841:
  3814  00093A  EFBB  F004         	goto	l6573
  3815  00093E                     u4840:
  3816  00093E                     
  3817                           ; BSR set to: 0
  3818                           ;main.c: 353:                                            {;main.c: 354:                 
      +                                                         EEPROM.deletar(tecla % 0x30);
  3819  00093E  EE20  F0E5         	lfsr	2,_EEPROM+4
  3820  000942  D802               	call	u4858
  3821  000944  EFB8  F004         	goto	u4859
  3822  000948                     u4858:
  3823  000948  0005               	push	
  3824  00094A  6EFA               	movwf	pclath,c
  3825  00094C  50DE               	movf	postinc2,w,c
  3826  00094E  6EFD               	movwf	tosl,c
  3827  000950  50DE               	movf	postinc2,w,c
  3828  000952  6EFE               	movwf	tosh,c
  3829  000954  50F8               	movf	tblptru,w,c
  3830  000956  6EFF               	movwf	tosu,c
  3831  000958  50FA               	movf	pclath,w,c
  3832  00095A  C0BC  F027         	movff	main@tecla,___awmod@dividend
  3833  00095E  6A28               	clrf	(___awmod@dividend+1)^0,c
  3834  000960  0E00               	movlw	0
  3835  000962  6E2A               	movwf	(___awmod@divisor+1)^0,c
  3836  000964  0E30               	movlw	48
  3837  000966  6E29               	movwf	___awmod@divisor^0,c
  3838  000968  EC1D  F016         	call	___awmod
  3839  00096C  5027               	movf	?___awmod^0,w,c
  3840  00096E  0012               	return		;indir
  3841  000970                     u4859:
  3842  000970                     
  3843                           ;main.c: 355:                                                vetor_aux[0] = 0;
  3844  000970  0E00               	movlw	0
  3845  000972  0100               	movlb	0	; () banked
  3846  000974  6F76               	movwf	main@vetor_aux& (0+255),b
  3847  000976                     l6573:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;main.c: 359:                                            for(char *ptr = vetor_aux; *ptr
      +                           != 0; ptr++)
  3851  000976  0E76               	movlw	low main@vetor_aux
  3852  000978  6FB8               	movwf	main@ptr_671& (0+255),b
  3853  00097A  0E00               	movlw	high main@vetor_aux
  3854  00097C  6FB9               	movwf	(main@ptr_671+1)& (0+255),b
  3855  00097E  EF88  F005         	goto	l6607
  3856  000982                     l6575:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;main.c: 360:                                            {;main.c: 361:                 
      +                                                          if(*ptr <= 0x64 || *ptr == 0xFE)
  3860  000982  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3861  000986  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3862  00098A  0E64               	movlw	100
  3863  00098C  64DF               	cpfsgt	indf2,c
  3864  00098E  EFCB  F004         	goto	u4861
  3865  000992  EFCD  F004         	goto	u4860
  3866  000996                     u4861:
  3867  000996  EFDA  F004         	goto	l6579
  3868  00099A                     u4860:
  3869  00099A                     
  3870                           ; BSR set to: 0
  3871  00099A  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3872  00099E  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3873  0009A2  0EFE               	movlw	254
  3874  0009A4  18DE               	xorwf	postinc2,w,c
  3875  0009A6  A4D8               	btfss	status,2,c
  3876  0009A8  EFD8  F004         	goto	u4871
  3877  0009AC  EFDA  F004         	goto	u4870
  3878  0009B0                     u4871:
  3879  0009B0  EFE9  F004         	goto	l6581
  3880  0009B4                     u4870:
  3881  0009B4                     l6579:
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;main.c: 362:                                                 {;main.c: 363:            
      +                                                                   decodifica(&*ptr);
  3885  0009B4  C0B8  F027         	movff	main@ptr_671,decodifica@d
  3886  0009B8  C0B9  F028         	movff	main@ptr_671+1,decodifica@d+1
  3887  0009BC  ECC4  F012         	call	_decodifica
  3888                           
  3889                           ;main.c: 364:                                                     fifo_add_control(*ptr)
      +                          ;
  3890  0009C0  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3891  0009C4  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3892  0009C8  50DF               	movf	indf2,w,c
  3893  0009CA  EC80  F01B         	call	_fifo_add_control
  3894                           
  3895                           ;main.c: 365:                                                 }
  3896  0009CE  EF83  F005         	goto	l6603
  3897  0009D2                     l6581:
  3898                           
  3899                           ; BSR set to: 0
  3900  0009D2  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3901  0009D6  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3902  0009DA  0E64               	movlw	100
  3903  0009DC  64DF               	cpfsgt	indf2,c
  3904  0009DE  EFF3  F004         	goto	u4881
  3905  0009E2  EFF5  F004         	goto	u4880
  3906  0009E6                     u4881:
  3907  0009E6  EF10  F005         	goto	l6587
  3908  0009EA                     u4880:
  3909  0009EA                     
  3910                           ; BSR set to: 0
  3911  0009EA  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3912  0009EE  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3913  0009F2  0EDD               	movlw	221
  3914  0009F4  60DF               	cpfslt	indf2,c
  3915  0009F6  EFFF  F004         	goto	u4891
  3916  0009FA  EF01  F005         	goto	u4890
  3917  0009FE                     u4891:
  3918  0009FE  EF10  F005         	goto	l6587
  3919  000A02                     u4890:
  3920  000A02                     
  3921                           ; BSR set to: 0
  3922                           ;main.c: 367:                                                 {;main.c: 368:            
      +                                                                   decodifica(&*ptr);
  3923  000A02  C0B8  F027         	movff	main@ptr_671,decodifica@d
  3924  000A06  C0B9  F028         	movff	main@ptr_671+1,decodifica@d+1
  3925  000A0A  ECC4  F012         	call	_decodifica	;wreg free
  3926                           
  3927                           ;main.c: 369:                                                     fifo_add_tempo(*ptr);
  3928  000A0E  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3929  000A12  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3930  000A16  50DF               	movf	indf2,w,c
  3931  000A18  ECD9  F01A         	call	_fifo_add_tempo
  3932                           
  3933                           ;main.c: 370:                                                 }
  3934  000A1C  EF83  F005         	goto	l6603
  3935  000A20                     l6587:
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;main.c: 372:                                                 {;main.c: 373:            
      +                                                                   decodifica(&*ptr);
  3939  000A20  C0B8  F027         	movff	main@ptr_671,decodifica@d
  3940  000A24  C0B9  F028         	movff	main@ptr_671+1,decodifica@d+1
  3941  000A28  ECC4  F012         	call	_decodifica	;wreg free
  3942                           
  3943                           ;main.c: 374:                                                     switch( *ptr )
  3944  000A2C  EF20  F005         	goto	l6593
  3945  000A30                     l267:
  3946  000A30                     l6589:
  3947                           
  3948                           ;main.c: 384:                                                                 *ptr &= ~0
      +                          x20;
  3949  000A30  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3950  000A34  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3951  000A38  0EDF               	movlw	223
  3952  000A3A  16DF               	andwf	indf2,f,c
  3953                           
  3954                           ;main.c: 385:                                                                 break;
  3955  000A3C  EF51  F005         	goto	l6595
  3956  000A40                     l6593:
  3957  000A40  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  3958  000A44  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  3959  000A48  50DF               	movf	indf2,w,c
  3960  000A4A  6E45               	movwf	??_main^0,c
  3961  000A4C  6A46               	clrf	(??_main+1)^0,c
  3962                           
  3963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3964                           ; Switch size 1, requested type "simple"
  3965                           ; Number of cases is 1, Range of values is 0 to 0
  3966                           ; switch strategies available:
  3967                           ; Name         Instructions Cycles
  3968                           ; simple_byte            4     3 (average)
  3969                           ;	Chosen strategy is simple_byte
  3970  000A4E  5046               	movf	(??_main+1)^0,w,c
  3971  000A50  0A00               	xorlw	0	; case 0
  3972  000A52  B4D8               	btfsc	status,2,c
  3973  000A54  EF2E  F005         	goto	l7923
  3974  000A58  EF51  F005         	goto	l6595
  3975  000A5C                     l7923:
  3976                           
  3977                           ; Switch size 1, requested type "simple"
  3978                           ; Number of cases is 8, Range of values is 65 to 100
  3979                           ; switch strategies available:
  3980                           ; Name         Instructions Cycles
  3981                           ; simple_byte           25    13 (average)
  3982                           ;	Chosen strategy is simple_byte
  3983  000A5C  5045               	movf	??_main^0,w,c
  3984  000A5E  0A41               	xorlw	65	; case 65
  3985  000A60  B4D8               	btfsc	status,2,c
  3986  000A62  EF18  F005         	goto	l267
  3987  000A66  0A03               	xorlw	3	; case 66
  3988  000A68  B4D8               	btfsc	status,2,c
  3989  000A6A  EF18  F005         	goto	l6589
  3990  000A6E  0A01               	xorlw	1	; case 67
  3991  000A70  B4D8               	btfsc	status,2,c
  3992  000A72  EF18  F005         	goto	l6589
  3993  000A76  0A07               	xorlw	7	; case 68
  3994  000A78  B4D8               	btfsc	status,2,c
  3995  000A7A  EF18  F005         	goto	l6589
  3996  000A7E  0A25               	xorlw	37	; case 97
  3997  000A80  B4D8               	btfsc	status,2,c
  3998  000A82  EF18  F005         	goto	l6589
  3999  000A86  0A03               	xorlw	3	; case 98
  4000  000A88  B4D8               	btfsc	status,2,c
  4001  000A8A  EF18  F005         	goto	l6589
  4002  000A8E  0A01               	xorlw	1	; case 99
  4003  000A90  B4D8               	btfsc	status,2,c
  4004  000A92  EF18  F005         	goto	l6589
  4005  000A96  0A07               	xorlw	7	; case 100
  4006  000A98  B4D8               	btfsc	status,2,c
  4007  000A9A  EF18  F005         	goto	l6589
  4008  000A9E  EF51  F005         	goto	l6595
  4009  000AA2                     l6595:
  4010                           
  4011                           ;main.c: 387:                                                     alt_atuador(*ptr);
  4012  000AA2  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  4013  000AA6  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  4014  000AAA  50DF               	movf	indf2,w,c
  4015  000AAC  ECBE  F017         	call	_alt_atuador
  4016                           
  4017                           ;main.c: 388:                                                     fifo_add( ler_atuador(
      +                          *ptr) ? *ptr : *ptr|0x20 );
  4018  000AB0  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  4019  000AB4  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  4020  000AB8  50DF               	movf	indf2,w,c
  4021  000ABA  EC6E  F017         	call	_ler_atuador
  4022  000ABE  0900               	iorlw	0
  4023  000AC0  A4D8               	btfss	status,2,c
  4024  000AC2  EF65  F005         	goto	u4901
  4025  000AC6  EF67  F005         	goto	u4900
  4026  000ACA                     u4901:
  4027  000ACA  EF76  F005         	goto	l6599
  4028  000ACE                     u4900:
  4029  000ACE  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  4030  000AD2  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  4031  000AD6  50DF               	movf	indf2,w,c
  4032  000AD8  6E45               	movwf	??_main^0,c
  4033  000ADA  6A46               	clrf	(??_main+1)^0,c
  4034  000ADC  0E20               	movlw	32
  4035  000ADE  1045               	iorwf	??_main^0,w,c
  4036  000AE0  0100               	movlb	0	; () banked
  4037  000AE2  6F88               	movwf	_main$672& (0+255),b
  4038  000AE4  5046               	movf	(??_main+1)^0,w,c
  4039  000AE6  6F89               	movwf	(_main$672+1)& (0+255),b
  4040  000AE8  EF80  F005         	goto	l6601
  4041  000AEC                     l6599:
  4042  000AEC  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  4043  000AF0  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  4044  000AF4  50DF               	movf	indf2,w,c
  4045  000AF6  6E45               	movwf	??_main^0,c
  4046  000AF8  5045               	movf	??_main^0,w,c
  4047  000AFA  0100               	movlb	0	; () banked
  4048  000AFC  6F88               	movwf	_main$672& (0+255),b
  4049  000AFE  6B89               	clrf	(_main$672+1)& (0+255),b
  4050  000B00                     l6601:
  4051                           
  4052                           ; BSR set to: 0
  4053  000B00  5188               	movf	_main$672& (0+255),w,b
  4054  000B02  EC05  F01B         	call	_fifo_add
  4055  000B06                     l6603:
  4056                           
  4057                           ;main.c: 390:                                                 fifo_print();
  4058  000B06  EC26  F00F         	call	_fifo_print	;wreg free
  4059  000B0A                     
  4060                           ;main.c: 391:                                            }
  4061  000B0A  0100               	movlb	0	; () banked
  4062  000B0C  4BB8               	infsnz	main@ptr_671& (0+255),f,b
  4063  000B0E  2BB9               	incf	(main@ptr_671+1)& (0+255),f,b
  4064  000B10                     l6607:
  4065                           
  4066                           ; BSR set to: 0
  4067  000B10  C0B8  FFD9         	movff	main@ptr_671,fsr2l
  4068  000B14  C0B9  FFDA         	movff	main@ptr_671+1,fsr2h
  4069  000B18  50DF               	movf	indf2,w,c
  4070  000B1A  A4D8               	btfss	status,2,c
  4071  000B1C  EF92  F005         	goto	u4911
  4072  000B20  EF94  F005         	goto	u4910
  4073  000B24                     u4911:
  4074  000B24  EFC1  F004         	goto	l6575
  4075  000B28                     u4910:
  4076  000B28  EFE8  F002         	goto	l6445
  4077  000B2C                     l6617:
  4078                           
  4079                           ; BSR set to: 0
  4080  000B2C  51BC               	movf	main@tecla& (0+255),w,b
  4081  000B2E  6E45               	movwf	??_main^0,c
  4082  000B30  6A46               	clrf	(??_main+1)^0,c
  4083                           
  4084                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4085                           ; Switch size 1, requested type "simple"
  4086                           ; Number of cases is 1, Range of values is 0 to 0
  4087                           ; switch strategies available:
  4088                           ; Name         Instructions Cycles
  4089                           ; simple_byte            4     3 (average)
  4090                           ;	Chosen strategy is simple_byte
  4091  000B32  5046               	movf	(??_main+1)^0,w,c
  4092  000B34  0A00               	xorlw	0	; case 0
  4093  000B36  B4D8               	btfsc	status,2,c
  4094  000B38  EFA0  F005         	goto	l7925
  4095  000B3C  EFCA  F00D         	goto	l7027
  4096  000B40                     l7925:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ; Switch size 1, requested type "simple"
  4100                           ; Number of cases is 11, Range of values is 42 to 57
  4101                           ; switch strategies available:
  4102                           ; Name         Instructions Cycles
  4103                           ; simple_byte           34    18 (average)
  4104                           ;	Chosen strategy is simple_byte
  4105  000B40  5045               	movf	??_main^0,w,c
  4106  000B42  0A2A               	xorlw	42	; case 42
  4107  000B44  B4D8               	btfsc	status,2,c
  4108  000B46  EF51  F001         	goto	l6367
  4109  000B4A  0A1A               	xorlw	26	; case 48
  4110  000B4C  B4D8               	btfsc	status,2,c
  4111  000B4E  EF5B  F004         	goto	l247
  4112  000B52  0A01               	xorlw	1	; case 49
  4113  000B54  B4D8               	btfsc	status,2,c
  4114  000B56  EF5B  F004         	goto	l247
  4115  000B5A  0A03               	xorlw	3	; case 50
  4116  000B5C  B4D8               	btfsc	status,2,c
  4117  000B5E  EF5B  F004         	goto	l6559
  4118  000B62  0A01               	xorlw	1	; case 51
  4119  000B64  B4D8               	btfsc	status,2,c
  4120  000B66  EF5B  F004         	goto	l6559
  4121  000B6A  0A07               	xorlw	7	; case 52
  4122  000B6C  B4D8               	btfsc	status,2,c
  4123  000B6E  EF5B  F004         	goto	l6559
  4124  000B72  0A01               	xorlw	1	; case 53
  4125  000B74  B4D8               	btfsc	status,2,c
  4126  000B76  EF5B  F004         	goto	l6559
  4127  000B7A  0A03               	xorlw	3	; case 54
  4128  000B7C  B4D8               	btfsc	status,2,c
  4129  000B7E  EF5B  F004         	goto	l6559
  4130  000B82  0A01               	xorlw	1	; case 55
  4131  000B84  B4D8               	btfsc	status,2,c
  4132  000B86  EF5B  F004         	goto	l6559
  4133  000B8A  0A0F               	xorlw	15	; case 56
  4134  000B8C  B4D8               	btfsc	status,2,c
  4135  000B8E  EF5B  F004         	goto	l6559
  4136  000B92  0A01               	xorlw	1	; case 57
  4137  000B94  B4D8               	btfsc	status,2,c
  4138  000B96  EF5B  F004         	goto	l6559
  4139  000B9A  EFCA  F00D         	goto	l7027
  4140  000B9E                     l6619:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 402:                             IHM.clr();
  4144  000B9E  EE20  F0F3         	lfsr	2,_IHM+8
  4145  000BA2  D802               	call	u4928
  4146  000BA4  EFDE  F005         	goto	u4929
  4147  000BA8                     u4928:
  4148  000BA8  0005               	push	
  4149  000BAA  6EFA               	movwf	pclath,c
  4150  000BAC  50DE               	movf	postinc2,w,c
  4151  000BAE  6EFD               	movwf	tosl,c
  4152  000BB0  50DE               	movf	postinc2,w,c
  4153  000BB2  6EFE               	movwf	tosh,c
  4154  000BB4  50F8               	movf	tblptru,w,c
  4155  000BB6  6EFF               	movwf	tosu,c
  4156  000BB8  50FA               	movf	pclath,w,c
  4157  000BBA  0012               	return		;indir
  4158  000BBC                     u4929:
  4159  000BBC                     
  4160                           ;main.c: 403:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
  4161  000BBC  EE20  F0EF         	lfsr	2,_IHM+4
  4162  000BC0  D802               	call	u4938
  4163  000BC2  EFF4  F005         	goto	u4939
  4164  000BC6                     u4938:
  4165  000BC6  0005               	push	
  4166  000BC8  6EFA               	movwf	pclath,c
  4167  000BCA  50DE               	movf	postinc2,w,c
  4168  000BCC  6EFD               	movwf	tosl,c
  4169  000BCE  50DE               	movf	postinc2,w,c
  4170  000BD0  6EFE               	movwf	tosh,c
  4171  000BD2  50F8               	movf	tblptru,w,c
  4172  000BD4  6EFF               	movwf	tosu,c
  4173  000BD6  50FA               	movf	pclath,w,c
  4174  000BD8  0E00               	movlw	0
  4175  000BDA  6E2E               	movwf	dispLCD@col^0,c
  4176  000BDC  0ED6               	movlw	low STR_16
  4177  000BDE  6E2F               	movwf	dispLCD@str^0,c
  4178  000BE0  0E7E               	movlw	high STR_16
  4179  000BE2  6E30               	movwf	(dispLCD@str+1)^0,c
  4180  000BE4  0E00               	movlw	0
  4181  000BE6  0012               	return		;indir
  4182  000BE8                     u4939:
  4183  000BE8                     
  4184                           ;main.c: 404:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
  4185  000BE8  EE20  F0EF         	lfsr	2,_IHM+4
  4186  000BEC  D802               	call	u4948
  4187  000BEE  EF0A  F006         	goto	u4949
  4188  000BF2                     u4948:
  4189  000BF2  0005               	push	
  4190  000BF4  6EFA               	movwf	pclath,c
  4191  000BF6  50DE               	movf	postinc2,w,c
  4192  000BF8  6EFD               	movwf	tosl,c
  4193  000BFA  50DE               	movf	postinc2,w,c
  4194  000BFC  6EFE               	movwf	tosh,c
  4195  000BFE  50F8               	movf	tblptru,w,c
  4196  000C00  6EFF               	movwf	tosu,c
  4197  000C02  50FA               	movf	pclath,w,c
  4198  000C04  0E00               	movlw	0
  4199  000C06  6E2E               	movwf	dispLCD@col^0,c
  4200  000C08  0E82               	movlw	low STR_17
  4201  000C0A  6E2F               	movwf	dispLCD@str^0,c
  4202  000C0C  0E7E               	movlw	high STR_17
  4203  000C0E  6E30               	movwf	(dispLCD@str+1)^0,c
  4204  000C10  0E01               	movlw	1
  4205  000C12  0012               	return		;indir
  4206  000C14                     u4949:
  4207  000C14                     
  4208                           ;main.c: 405:                             estado = 6;
  4209  000C14  0E06               	movlw	6
  4210  000C16  0100               	movlb	0	; () banked
  4211  000C18  6FBB               	movwf	main@estado& (0+255),b
  4212                           
  4213                           ;main.c: 406:                             break;
  4214  000C1A  EFCA  F00D         	goto	l7027
  4215  000C1E                     l6627:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;main.c: 409:                             IHM.printpos(3,0,"   A   B   C   D    ");
  4219  000C1E  EE20  F0EF         	lfsr	2,_IHM+4
  4220  000C22  D802               	call	u4958
  4221  000C24  EF25  F006         	goto	u4959
  4222  000C28                     u4958:
  4223  000C28  0005               	push	
  4224  000C2A  6EFA               	movwf	pclath,c
  4225  000C2C  50DE               	movf	postinc2,w,c
  4226  000C2E  6EFD               	movwf	tosl,c
  4227  000C30  50DE               	movf	postinc2,w,c
  4228  000C32  6EFE               	movwf	tosh,c
  4229  000C34  50F8               	movf	tblptru,w,c
  4230  000C36  6EFF               	movwf	tosu,c
  4231  000C38  50FA               	movf	pclath,w,c
  4232  000C3A  0E00               	movlw	0
  4233  000C3C  6E2E               	movwf	dispLCD@col^0,c
  4234  000C3E  0E97               	movlw	low STR_18
  4235  000C40  6E2F               	movwf	dispLCD@str^0,c
  4236  000C42  0E7E               	movlw	high STR_18
  4237  000C44  6E30               	movwf	(dispLCD@str+1)^0,c
  4238  000C46  0E03               	movlw	3
  4239  000C48  0012               	return		;indir
  4240  000C4A                     u4959:
  4241  000C4A                     
  4242                           ;main.c: 410:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
  4243  000C4A  0E04               	movlw	4
  4244  000C4C  6E29               	movwf	dispLCD_lincol@col^0,c
  4245  000C4E  0E03               	movlw	3
  4246  000C50  ECC4  F019         	call	_dispLCD_lincol
  4247  000C54  0E41               	movlw	65
  4248  000C56  EC6E  F017         	call	_ler_atuador
  4249  000C5A  0900               	iorlw	0
  4250  000C5C  A4D8               	btfss	status,2,c
  4251  000C5E  EF33  F006         	goto	u4961
  4252  000C62  EF35  F006         	goto	u4960
  4253  000C66                     u4961:
  4254  000C66  EF3C  F006         	goto	l6635
  4255  000C6A                     u4960:
  4256  000C6A  0E00               	movlw	0
  4257  000C6C  0100               	movlb	0	; () banked
  4258  000C6E  6F8B               	movwf	(_main$676+1)& (0+255),b
  4259  000C70  0E2D               	movlw	45
  4260  000C72  6F8A               	movwf	_main$676& (0+255),b
  4261  000C74  EF41  F006         	goto	l6637
  4262  000C78                     l6635:
  4263  000C78  0E00               	movlw	0
  4264  000C7A  0100               	movlb	0	; () banked
  4265  000C7C  6F8B               	movwf	(_main$676+1)& (0+255),b
  4266  000C7E  0E2B               	movlw	43
  4267  000C80  6F8A               	movwf	_main$676& (0+255),b
  4268  000C82                     l6637:
  4269                           
  4270                           ; BSR set to: 0
  4271  000C82  518A               	movf	_main$676& (0+255),w,b
  4272  000C84  EC59  F01B         	call	_dispLCD_dataReg
  4273  000C88                     
  4274                           ;main.c: 411:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
  4275  000C88  0E08               	movlw	8
  4276  000C8A  6E29               	movwf	dispLCD_lincol@col^0,c
  4277  000C8C  0E03               	movlw	3
  4278  000C8E  ECC4  F019         	call	_dispLCD_lincol
  4279  000C92  0E42               	movlw	66
  4280  000C94  EC6E  F017         	call	_ler_atuador
  4281  000C98  0900               	iorlw	0
  4282  000C9A  A4D8               	btfss	status,2,c
  4283  000C9C  EF52  F006         	goto	u4971
  4284  000CA0  EF54  F006         	goto	u4970
  4285  000CA4                     u4971:
  4286  000CA4  EF5B  F006         	goto	l6645
  4287  000CA8                     u4970:
  4288  000CA8  0E00               	movlw	0
  4289  000CAA  0100               	movlb	0	; () banked
  4290  000CAC  6F8D               	movwf	(_main$677+1)& (0+255),b
  4291  000CAE  0E2D               	movlw	45
  4292  000CB0  6F8C               	movwf	_main$677& (0+255),b
  4293  000CB2  EF60  F006         	goto	l6647
  4294  000CB6                     l6645:
  4295  000CB6  0E00               	movlw	0
  4296  000CB8  0100               	movlb	0	; () banked
  4297  000CBA  6F8D               	movwf	(_main$677+1)& (0+255),b
  4298  000CBC  0E2B               	movlw	43
  4299  000CBE  6F8C               	movwf	_main$677& (0+255),b
  4300  000CC0                     l6647:
  4301                           
  4302                           ; BSR set to: 0
  4303  000CC0  518C               	movf	_main$677& (0+255),w,b
  4304  000CC2  EC59  F01B         	call	_dispLCD_dataReg
  4305  000CC6                     
  4306                           ;main.c: 412:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
  4307  000CC6  0E0C               	movlw	12
  4308  000CC8  6E29               	movwf	dispLCD_lincol@col^0,c
  4309  000CCA  0E03               	movlw	3
  4310  000CCC  ECC4  F019         	call	_dispLCD_lincol
  4311  000CD0  0E43               	movlw	67
  4312  000CD2  EC6E  F017         	call	_ler_atuador
  4313  000CD6  0900               	iorlw	0
  4314  000CD8  A4D8               	btfss	status,2,c
  4315  000CDA  EF71  F006         	goto	u4981
  4316  000CDE  EF73  F006         	goto	u4980
  4317  000CE2                     u4981:
  4318  000CE2  EF7A  F006         	goto	l6655
  4319  000CE6                     u4980:
  4320  000CE6  0E00               	movlw	0
  4321  000CE8  0100               	movlb	0	; () banked
  4322  000CEA  6F8F               	movwf	(_main$678+1)& (0+255),b
  4323  000CEC  0E2D               	movlw	45
  4324  000CEE  6F8E               	movwf	_main$678& (0+255),b
  4325  000CF0  EF7F  F006         	goto	l6657
  4326  000CF4                     l6655:
  4327  000CF4  0E00               	movlw	0
  4328  000CF6  0100               	movlb	0	; () banked
  4329  000CF8  6F8F               	movwf	(_main$678+1)& (0+255),b
  4330  000CFA  0E2B               	movlw	43
  4331  000CFC  6F8E               	movwf	_main$678& (0+255),b
  4332  000CFE                     l6657:
  4333                           
  4334                           ; BSR set to: 0
  4335  000CFE  518E               	movf	_main$678& (0+255),w,b
  4336  000D00  EC59  F01B         	call	_dispLCD_dataReg
  4337  000D04                     
  4338                           ;main.c: 413:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
  4339  000D04  0E10               	movlw	16
  4340  000D06  6E29               	movwf	dispLCD_lincol@col^0,c
  4341  000D08  0E03               	movlw	3
  4342  000D0A  ECC4  F019         	call	_dispLCD_lincol
  4343  000D0E  0E44               	movlw	68
  4344  000D10  EC6E  F017         	call	_ler_atuador
  4345  000D14  0900               	iorlw	0
  4346  000D16  A4D8               	btfss	status,2,c
  4347  000D18  EF90  F006         	goto	u4991
  4348  000D1C  EF92  F006         	goto	u4990
  4349  000D20                     u4991:
  4350  000D20  EF99  F006         	goto	l6665
  4351  000D24                     u4990:
  4352  000D24  0E00               	movlw	0
  4353  000D26  0100               	movlb	0	; () banked
  4354  000D28  6F91               	movwf	(_main$679+1)& (0+255),b
  4355  000D2A  0E2D               	movlw	45
  4356  000D2C  6F90               	movwf	_main$679& (0+255),b
  4357  000D2E  EF9E  F006         	goto	l6667
  4358  000D32                     l6665:
  4359  000D32  0E00               	movlw	0
  4360  000D34  0100               	movlb	0	; () banked
  4361  000D36  6F91               	movwf	(_main$679+1)& (0+255),b
  4362  000D38  0E2B               	movlw	43
  4363  000D3A  6F90               	movwf	_main$679& (0+255),b
  4364  000D3C                     l6667:
  4365                           
  4366                           ; BSR set to: 0
  4367  000D3C  5190               	movf	_main$679& (0+255),w,b
  4368  000D3E  EC59  F01B         	call	_dispLCD_dataReg
  4369  000D42                     
  4370                           ;main.c: 414:                             estado = 7;
  4371  000D42  0E07               	movlw	7
  4372  000D44  0100               	movlb	0	; () banked
  4373  000D46  6FBB               	movwf	main@estado& (0+255),b
  4374                           
  4375                           ;main.c: 415:                             break;
  4376  000D48  EFCA  F00D         	goto	l7027
  4377  000D4C                     l6671:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 418:                             tecla = teclado_borda();
  4381  000D4C  ECE5  F01C         	call	_teclado_borda	;wreg free
  4382  000D50  0100               	movlb	0	; () banked
  4383  000D52  6FBC               	movwf	main@tecla& (0+255),b
  4384                           
  4385                           ;main.c: 419:                             switch(tecla)
  4386  000D54  EF40  F007         	goto	l6711
  4387  000D58                     l6673:
  4388                           
  4389                           ; BSR set to: 0
  4390  000D58  51BC               	movf	main@tecla& (0+255),w,b
  4391  000D5A  ECBE  F017         	call	_alt_atuador
  4392  000D5E  0E04               	movlw	4
  4393  000D60  6E29               	movwf	dispLCD_lincol@col^0,c
  4394  000D62  0E03               	movlw	3
  4395  000D64  ECC4  F019         	call	_dispLCD_lincol
  4396  000D68  0E41               	movlw	65
  4397  000D6A  EC6E  F017         	call	_ler_atuador
  4398  000D6E  0900               	iorlw	0
  4399  000D70  A4D8               	btfss	status,2,c
  4400  000D72  EFBD  F006         	goto	u5001
  4401  000D76  EFBF  F006         	goto	u5000
  4402  000D7A                     u5001:
  4403  000D7A  EFC6  F006         	goto	l6677
  4404  000D7E                     u5000:
  4405  000D7E  0E00               	movlw	0
  4406  000D80  0100               	movlb	0	; () banked
  4407  000D82  6F93               	movwf	(_main$680+1)& (0+255),b
  4408  000D84  0E2D               	movlw	45
  4409  000D86  6F92               	movwf	_main$680& (0+255),b
  4410  000D88  EFCB  F006         	goto	l6679
  4411  000D8C                     l6677:
  4412  000D8C  0E00               	movlw	0
  4413  000D8E  0100               	movlb	0	; () banked
  4414  000D90  6F93               	movwf	(_main$680+1)& (0+255),b
  4415  000D92  0E2B               	movlw	43
  4416  000D94  6F92               	movwf	_main$680& (0+255),b
  4417  000D96                     l6679:
  4418                           
  4419                           ; BSR set to: 0
  4420  000D96  5192               	movf	_main$680& (0+255),w,b
  4421  000D98  EC59  F01B         	call	_dispLCD_dataReg
  4422  000D9C  EFCA  F00D         	goto	l7027
  4423  000DA0                     l6681:
  4424                           
  4425                           ; BSR set to: 0
  4426  000DA0  51BC               	movf	main@tecla& (0+255),w,b
  4427  000DA2  ECBE  F017         	call	_alt_atuador
  4428  000DA6  0E08               	movlw	8
  4429  000DA8  6E29               	movwf	dispLCD_lincol@col^0,c
  4430  000DAA  0E03               	movlw	3
  4431  000DAC  ECC4  F019         	call	_dispLCD_lincol
  4432  000DB0  0E42               	movlw	66
  4433  000DB2  EC6E  F017         	call	_ler_atuador
  4434  000DB6  0900               	iorlw	0
  4435  000DB8  A4D8               	btfss	status,2,c
  4436  000DBA  EFE1  F006         	goto	u5011
  4437  000DBE  EFE3  F006         	goto	u5010
  4438  000DC2                     u5011:
  4439  000DC2  EFEA  F006         	goto	l6685
  4440  000DC6                     u5010:
  4441  000DC6  0E00               	movlw	0
  4442  000DC8  0100               	movlb	0	; () banked
  4443  000DCA  6F95               	movwf	(_main$681+1)& (0+255),b
  4444  000DCC  0E2D               	movlw	45
  4445  000DCE  6F94               	movwf	_main$681& (0+255),b
  4446  000DD0  EFEF  F006         	goto	l6687
  4447  000DD4                     l6685:
  4448  000DD4  0E00               	movlw	0
  4449  000DD6  0100               	movlb	0	; () banked
  4450  000DD8  6F95               	movwf	(_main$681+1)& (0+255),b
  4451  000DDA  0E2B               	movlw	43
  4452  000DDC  6F94               	movwf	_main$681& (0+255),b
  4453  000DDE                     l6687:
  4454                           
  4455                           ; BSR set to: 0
  4456  000DDE  5194               	movf	_main$681& (0+255),w,b
  4457  000DE0  EC59  F01B         	call	_dispLCD_dataReg
  4458  000DE4  EFCA  F00D         	goto	l7027
  4459  000DE8                     l6689:
  4460                           
  4461                           ; BSR set to: 0
  4462  000DE8  51BC               	movf	main@tecla& (0+255),w,b
  4463  000DEA  ECBE  F017         	call	_alt_atuador
  4464  000DEE  0E0C               	movlw	12
  4465  000DF0  6E29               	movwf	dispLCD_lincol@col^0,c
  4466  000DF2  0E03               	movlw	3
  4467  000DF4  ECC4  F019         	call	_dispLCD_lincol
  4468  000DF8  0E43               	movlw	67
  4469  000DFA  EC6E  F017         	call	_ler_atuador
  4470  000DFE  0900               	iorlw	0
  4471  000E00  A4D8               	btfss	status,2,c
  4472  000E02  EF05  F007         	goto	u5021
  4473  000E06  EF07  F007         	goto	u5020
  4474  000E0A                     u5021:
  4475  000E0A  EF0E  F007         	goto	l6693
  4476  000E0E                     u5020:
  4477  000E0E  0E00               	movlw	0
  4478  000E10  0100               	movlb	0	; () banked
  4479  000E12  6F97               	movwf	(_main$682+1)& (0+255),b
  4480  000E14  0E2D               	movlw	45
  4481  000E16  6F96               	movwf	_main$682& (0+255),b
  4482  000E18  EF13  F007         	goto	l6695
  4483  000E1C                     l6693:
  4484  000E1C  0E00               	movlw	0
  4485  000E1E  0100               	movlb	0	; () banked
  4486  000E20  6F97               	movwf	(_main$682+1)& (0+255),b
  4487  000E22  0E2B               	movlw	43
  4488  000E24  6F96               	movwf	_main$682& (0+255),b
  4489  000E26                     l6695:
  4490                           
  4491                           ; BSR set to: 0
  4492  000E26  5196               	movf	_main$682& (0+255),w,b
  4493  000E28  EC59  F01B         	call	_dispLCD_dataReg
  4494  000E2C  EFCA  F00D         	goto	l7027
  4495  000E30                     l6697:
  4496                           
  4497                           ; BSR set to: 0
  4498  000E30  51BC               	movf	main@tecla& (0+255),w,b
  4499  000E32  ECBE  F017         	call	_alt_atuador
  4500  000E36  0E10               	movlw	16
  4501  000E38  6E29               	movwf	dispLCD_lincol@col^0,c
  4502  000E3A  0E03               	movlw	3
  4503  000E3C  ECC4  F019         	call	_dispLCD_lincol
  4504  000E40  0E44               	movlw	68
  4505  000E42  EC6E  F017         	call	_ler_atuador
  4506  000E46  0900               	iorlw	0
  4507  000E48  A4D8               	btfss	status,2,c
  4508  000E4A  EF29  F007         	goto	u5031
  4509  000E4E  EF2B  F007         	goto	u5030
  4510  000E52                     u5031:
  4511  000E52  EF32  F007         	goto	l6701
  4512  000E56                     u5030:
  4513  000E56  0E00               	movlw	0
  4514  000E58  0100               	movlb	0	; () banked
  4515  000E5A  6F99               	movwf	(_main$683+1)& (0+255),b
  4516  000E5C  0E2D               	movlw	45
  4517  000E5E  6F98               	movwf	_main$683& (0+255),b
  4518  000E60  EF37  F007         	goto	l6703
  4519  000E64                     l6701:
  4520  000E64  0E00               	movlw	0
  4521  000E66  0100               	movlb	0	; () banked
  4522  000E68  6F99               	movwf	(_main$683+1)& (0+255),b
  4523  000E6A  0E2B               	movlw	43
  4524  000E6C  6F98               	movwf	_main$683& (0+255),b
  4525  000E6E                     l6703:
  4526                           
  4527                           ; BSR set to: 0
  4528  000E6E  5198               	movf	_main$683& (0+255),w,b
  4529  000E70  EC59  F01B         	call	_dispLCD_dataReg
  4530  000E74  EFCA  F00D         	goto	l7027
  4531  000E78                     l6705:
  4532                           
  4533                           ; BSR set to: 0
  4534  000E78  0E0A               	movlw	10
  4535  000E7A  6FBB               	movwf	main@estado& (0+255),b
  4536  000E7C  EFCA  F00D         	goto	l7027
  4537  000E80                     l6711:
  4538                           
  4539                           ; BSR set to: 0
  4540  000E80  51BC               	movf	main@tecla& (0+255),w,b
  4541  000E82  6E45               	movwf	??_main^0,c
  4542  000E84  6A46               	clrf	(??_main+1)^0,c
  4543                           
  4544                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4545                           ; Switch size 1, requested type "simple"
  4546                           ; Number of cases is 1, Range of values is 0 to 0
  4547                           ; switch strategies available:
  4548                           ; Name         Instructions Cycles
  4549                           ; simple_byte            4     3 (average)
  4550                           ;	Chosen strategy is simple_byte
  4551  000E86  5046               	movf	(??_main+1)^0,w,c
  4552  000E88  0A00               	xorlw	0	; case 0
  4553  000E8A  B4D8               	btfsc	status,2,c
  4554  000E8C  EF4A  F007         	goto	l7927
  4555  000E90  EFCA  F00D         	goto	l7027
  4556  000E94                     l7927:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ; Switch size 1, requested type "simple"
  4560                           ; Number of cases is 6, Range of values is 35 to 68
  4561                           ; switch strategies available:
  4562                           ; Name         Instructions Cycles
  4563                           ; simple_byte           19    10 (average)
  4564                           ;	Chosen strategy is simple_byte
  4565  000E94  5045               	movf	??_main^0,w,c
  4566  000E96  0A23               	xorlw	35	; case 35
  4567  000E98  B4D8               	btfsc	status,2,c
  4568  000E9A  EF3C  F007         	goto	l6705
  4569  000E9E  0A09               	xorlw	9	; case 42
  4570  000EA0  B4D8               	btfsc	status,2,c
  4571  000EA2  EF51  F001         	goto	l6367
  4572  000EA6  0A6B               	xorlw	107	; case 65
  4573  000EA8  B4D8               	btfsc	status,2,c
  4574  000EAA  EFAC  F006         	goto	l6673
  4575  000EAE  0A03               	xorlw	3	; case 66
  4576  000EB0  B4D8               	btfsc	status,2,c
  4577  000EB2  EFD0  F006         	goto	l6681
  4578  000EB6  0A01               	xorlw	1	; case 67
  4579  000EB8  B4D8               	btfsc	status,2,c
  4580  000EBA  EFF4  F006         	goto	l6689
  4581  000EBE  0A07               	xorlw	7	; case 68
  4582  000EC0  B4D8               	btfsc	status,2,c
  4583  000EC2  EF18  F007         	goto	l6697
  4584  000EC6  EFCA  F00D         	goto	l7027
  4585  000ECA                     l6713:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;main.c: 433:                             init_cond = salva_atuadores_init();
  4589  000ECA  ECDF  F018         	call	_salva_atuadores_init	;wreg free
  4590  000ECE  0100               	movlb	0	; () banked
  4591  000ED0  6FB2               	movwf	main@init_cond& (0+255),b
  4592  000ED2                     
  4593                           ; BSR set to: 0
  4594                           ;main.c: 434:                             IHM.clr();
  4595  000ED2  EE20  F0F3         	lfsr	2,_IHM+8
  4596  000ED6  D802               	call	u5048
  4597  000ED8  EF78  F007         	goto	u5049
  4598  000EDC                     u5048:
  4599  000EDC  0005               	push	
  4600  000EDE  6EFA               	movwf	pclath,c
  4601  000EE0  50DE               	movf	postinc2,w,c
  4602  000EE2  6EFD               	movwf	tosl,c
  4603  000EE4  50DE               	movf	postinc2,w,c
  4604  000EE6  6EFE               	movwf	tosh,c
  4605  000EE8  50F8               	movf	tblptru,w,c
  4606  000EEA  6EFF               	movwf	tosu,c
  4607  000EEC  50FA               	movf	pclath,w,c
  4608  000EEE  0012               	return		;indir
  4609  000EF0                     u5049:
  4610  000EF0                     
  4611                           ;main.c: 435:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
  4612  000EF0  EE20  F0EF         	lfsr	2,_IHM+4
  4613  000EF4  D802               	call	u5058
  4614  000EF6  EF8E  F007         	goto	u5059
  4615  000EFA                     u5058:
  4616  000EFA  0005               	push	
  4617  000EFC  6EFA               	movwf	pclath,c
  4618  000EFE  50DE               	movf	postinc2,w,c
  4619  000F00  6EFD               	movwf	tosl,c
  4620  000F02  50DE               	movf	postinc2,w,c
  4621  000F04  6EFE               	movwf	tosh,c
  4622  000F06  50F8               	movf	tblptru,w,c
  4623  000F08  6EFF               	movwf	tosu,c
  4624  000F0A  50FA               	movf	pclath,w,c
  4625  000F0C  0E00               	movlw	0
  4626  000F0E  6E2E               	movwf	dispLCD@col^0,c
  4627  000F10  0EEB               	movlw	low STR_19
  4628  000F12  6E2F               	movwf	dispLCD@str^0,c
  4629  000F14  0E7E               	movlw	high STR_19
  4630  000F16  6E30               	movwf	(dispLCD@str+1)^0,c
  4631  000F18  0E00               	movlw	0
  4632  000F1A  0012               	return		;indir
  4633  000F1C                     u5059:
  4634  000F1C                     l6719:
  4635                           
  4636                           ;main.c: 436:                             estado = 14;
  4637  000F1C  0E0E               	movlw	14
  4638  000F1E  0100               	movlb	0	; () banked
  4639  000F20  6FBB               	movwf	main@estado& (0+255),b
  4640                           
  4641                           ;main.c: 437:                             break;
  4642  000F22  EFCA  F00D         	goto	l7027
  4643  000F26                     l6721:
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;main.c: 440:                             tecla = teclado_borda();
  4647  000F26  ECE5  F01C         	call	_teclado_borda
  4648  000F2A  0100               	movlb	0	; () banked
  4649  000F2C  6FBC               	movwf	main@tecla& (0+255),b
  4650                           
  4651                           ;main.c: 441:                             switch( tecla )
  4652  000F2E  EFEC  F007         	goto	l6757
  4653  000F32                     l328:
  4654  000F32                     l6723:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;main.c: 447:                                             if( fifo_disponivel() )
  4658  000F32  EC3F  F01E         	call	_fifo_disponivel	;wreg free
  4659  000F36  0900               	iorlw	0
  4660  000F38  B4D8               	btfsc	status,2,c
  4661  000F3A  EFA1  F007         	goto	u5061
  4662  000F3E  EFA3  F007         	goto	u5060
  4663  000F42                     u5061:
  4664  000F42  EFCA  F00D         	goto	l7027
  4665  000F46                     u5060:
  4666  000F46                     
  4667                           ;main.c: 448:                                             {;main.c: 449:                
      +                                                           alt_atuador(tecla);
  4668  000F46  0100               	movlb	0	; () banked
  4669  000F48  51BC               	movf	main@tecla& (0+255),w,b
  4670  000F4A  ECBE  F017         	call	_alt_atuador
  4671                           
  4672                           ;main.c: 450:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
  4673  000F4E  0100               	movlb	0	; () banked
  4674  000F50  51BC               	movf	main@tecla& (0+255),w,b
  4675  000F52  EC6E  F017         	call	_ler_atuador
  4676  000F56  0900               	iorlw	0
  4677  000F58  A4D8               	btfss	status,2,c
  4678  000F5A  EFB1  F007         	goto	u5071
  4679  000F5E  EFB3  F007         	goto	u5070
  4680  000F62                     u5071:
  4681  000F62  EFBE  F007         	goto	l332
  4682  000F66                     u5070:
  4683  000F66  0E20               	movlw	32
  4684  000F68  C0BC  F045         	movff	main@tecla,??_main
  4685  000F6C  6A46               	clrf	(??_main+1)^0,c
  4686  000F6E  1045               	iorwf	??_main^0,w,c
  4687  000F70  0100               	movlb	0	; () banked
  4688  000F72  6F9A               	movwf	_main$685& (0+255),b
  4689  000F74  5046               	movf	(??_main+1)^0,w,c
  4690  000F76  6F9B               	movwf	(_main$685+1)& (0+255),b
  4691  000F78  EFC2  F007         	goto	l6729
  4692  000F7C                     l332:
  4693  000F7C  C0BC  F09A         	movff	main@tecla,_main$685
  4694  000F80  0100               	movlb	0	; () banked
  4695  000F82  6B9B               	clrf	(_main$685+1)& (0+255),b
  4696  000F84                     l6729:
  4697                           
  4698                           ; BSR set to: 0
  4699  000F84  519A               	movf	_main$685& (0+255),w,b
  4700  000F86  EC05  F01B         	call	_fifo_add
  4701  000F8A  EFEA  F002         	goto	l6447
  4702  000F8E                     l6733:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;main.c: 455:                                             fifo_indicePrint_inc();
  4706  000F8E  ECF5  F019         	call	_fifo_indicePrint_inc	;wreg free
  4707  000F92  EFEA  F002         	goto	l6447
  4708  000F96                     l6737:
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;main.c: 459:                                             fifo_indicePrint_dec();
  4712  000F96  EC6A  F01E         	call	_fifo_indicePrint_dec	;wreg free
  4713  000F9A  EFEA  F002         	goto	l6447
  4714  000F9E                     l6741:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;main.c: 464:                                             if(fifo_indice() == 2 )
  4718  000F9E  ECF9  F01E         	call	_fifo_indice	;wreg free
  4719  000FA2  0A02               	xorlw	2
  4720  000FA4  A4D8               	btfss	status,2,c
  4721  000FA6  EFD7  F007         	goto	u5081
  4722  000FAA  EFD9  F007         	goto	u5080
  4723  000FAE                     u5081:
  4724  000FAE  EFDB  F007         	goto	l6745
  4725  000FB2                     u5080:
  4726  000FB2  EF92  F001         	goto	l6383
  4727  000FB6                     l6745:
  4728                           
  4729                           ;main.c: 467:                                             {;main.c: 468:                
      +                                                           fifo_delete();
  4730  000FB6  EC0B  F018         	call	_fifo_delete	;wreg free
  4731  000FBA  EFEA  F002         	goto	l6447
  4732  000FBE                     l6749:
  4733  000FBE  0E4A               	movlw	74
  4734  000FC0  0100               	movlb	0	; () banked
  4735  000FC2  6FBB               	movwf	main@estado& (0+255),b
  4736  000FC4  EFCA  F00D         	goto	l7027
  4737  000FC8                     l6751:
  4738                           
  4739                           ; BSR set to: 0
  4740  000FC8  0E29               	movlw	41
  4741  000FCA  6FBB               	movwf	main@estado& (0+255),b
  4742  000FCC  EFCA  F00D         	goto	l7027
  4743  000FD0                     l6753:
  4744                           
  4745                           ; BSR set to: 0
  4746  000FD0  0E5A               	movlw	90
  4747  000FD2  6FBB               	movwf	main@estado& (0+255),b
  4748  000FD4  EFCA  F00D         	goto	l7027
  4749  000FD8                     l6757:
  4750                           
  4751                           ; BSR set to: 0
  4752  000FD8  51BC               	movf	main@tecla& (0+255),w,b
  4753  000FDA  6E45               	movwf	??_main^0,c
  4754  000FDC  6A46               	clrf	(??_main+1)^0,c
  4755                           
  4756                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4757                           ; Switch size 1, requested type "simple"
  4758                           ; Number of cases is 1, Range of values is 0 to 0
  4759                           ; switch strategies available:
  4760                           ; Name         Instructions Cycles
  4761                           ; simple_byte            4     3 (average)
  4762                           ;	Chosen strategy is simple_byte
  4763  000FDE  5046               	movf	(??_main+1)^0,w,c
  4764  000FE0  0A00               	xorlw	0	; case 0
  4765  000FE2  B4D8               	btfsc	status,2,c
  4766  000FE4  EFF6  F007         	goto	l7929
  4767  000FE8  EFCA  F00D         	goto	l7027
  4768  000FEC                     l7929:
  4769                           
  4770                           ; BSR set to: 0
  4771                           ; Switch size 1, requested type "simple"
  4772                           ; Number of cases is 10, Range of values is 35 to 68
  4773                           ; switch strategies available:
  4774                           ; Name         Instructions Cycles
  4775                           ; simple_byte           31    16 (average)
  4776                           ;	Chosen strategy is simple_byte
  4777  000FEC  5045               	movf	??_main^0,w,c
  4778  000FEE  0A23               	xorlw	35	; case 35
  4779  000FF0  B4D8               	btfsc	status,2,c
  4780  000FF2  EFDF  F007         	goto	l6749
  4781  000FF6  0A09               	xorlw	9	; case 42
  4782  000FF8  B4D8               	btfsc	status,2,c
  4783  000FFA  EFCF  F007         	goto	l6741
  4784  000FFE  0A1A               	xorlw	26	; case 48
  4785  001000  B4D8               	btfsc	status,2,c
  4786  001002  EFE4  F007         	goto	l6751
  4787  001006  0A04               	xorlw	4	; case 52
  4788  001008  B4D8               	btfsc	status,2,c
  4789  00100A  EFCB  F007         	goto	l6737
  4790  00100E  0A02               	xorlw	2	; case 54
  4791  001010  B4D8               	btfsc	status,2,c
  4792  001012  EFC7  F007         	goto	l6733
  4793  001016  0A0F               	xorlw	15	; case 57
  4794  001018  B4D8               	btfsc	status,2,c
  4795  00101A  EFE8  F007         	goto	l6753
  4796  00101E  0A78               	xorlw	120	; case 65
  4797  001020  B4D8               	btfsc	status,2,c
  4798  001022  EF99  F007         	goto	l328
  4799  001026  0A03               	xorlw	3	; case 66
  4800  001028  B4D8               	btfsc	status,2,c
  4801  00102A  EF99  F007         	goto	l6723
  4802  00102E  0A01               	xorlw	1	; case 67
  4803  001030  B4D8               	btfsc	status,2,c
  4804  001032  EF99  F007         	goto	l6723
  4805  001036  0A07               	xorlw	7	; case 68
  4806  001038  B4D8               	btfsc	status,2,c
  4807  00103A  EF99  F007         	goto	l6723
  4808  00103E  EFCA  F00D         	goto	l7027
  4809  001042                     l6759:
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;main.c: 482:                             fifo_print();
  4813  001042  EC26  F00F         	call	_fifo_print	;wreg free
  4814  001046  EF8E  F007         	goto	l6719
  4815  00104A                     l6763:
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;main.c: 487:                             IHM.printpos(3,0,"<  /  >");
  4819  00104A  EE20  F0EF         	lfsr	2,_IHM+4
  4820  00104E  D802               	call	u5098
  4821  001050  EF3B  F008         	goto	u5099
  4822  001054                     u5098:
  4823  001054  0005               	push	
  4824  001056  6EFA               	movwf	pclath,c
  4825  001058  50DE               	movf	postinc2,w,c
  4826  00105A  6EFD               	movwf	tosl,c
  4827  00105C  50DE               	movf	postinc2,w,c
  4828  00105E  6EFE               	movwf	tosh,c
  4829  001060  50F8               	movf	tblptru,w,c
  4830  001062  6EFF               	movwf	tosu,c
  4831  001064  50FA               	movf	pclath,w,c
  4832  001066  0E00               	movlw	0
  4833  001068  6E2E               	movwf	dispLCD@col^0,c
  4834  00106A  0EF4               	movlw	low STR_20
  4835  00106C  6E2F               	movwf	dispLCD@str^0,c
  4836  00106E  0E7F               	movlw	high STR_20
  4837  001070  6E30               	movwf	(dispLCD@str+1)^0,c
  4838  001072  0E03               	movlw	3
  4839  001074  0012               	return		;indir
  4840  001076                     u5099:
  4841  001076                     
  4842                           ;main.c: 488:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
  4843  001076  EE20  F0F1         	lfsr	2,_IHM+6
  4844  00107A  D802               	call	u5108
  4845  00107C  EF58  F008         	goto	u5109
  4846  001080                     u5108:
  4847  001080  0005               	push	
  4848  001082  6EFA               	movwf	pclath,c
  4849  001084  50DE               	movf	postinc2,w,c
  4850  001086  6EFD               	movwf	tosl,c
  4851  001088  50DE               	movf	postinc2,w,c
  4852  00108A  6EFE               	movwf	tosh,c
  4853  00108C  50F8               	movf	tblptru,w,c
  4854  00108E  6EFF               	movwf	tosu,c
  4855  001090  50FA               	movf	pclath,w,c
  4856  001092  0E01               	movlw	1
  4857  001094  6E32               	movwf	dispLCD_num@col^0,c
  4858  001096  ECF9  F01E         	call	_fifo_indice
  4859  00109A  6E45               	movwf	??_main^0,c
  4860  00109C  0EFE               	movlw	254
  4861  00109E  2445               	addwf	??_main^0,w,c
  4862  0010A0  6E33               	movwf	dispLCD_num@num^0,c
  4863  0010A2  6A34               	clrf	(dispLCD_num@num+1)^0,c
  4864  0010A4  0EFF               	movlw	255
  4865  0010A6  2234               	addwfc	(dispLCD_num@num+1)^0,f,c
  4866  0010A8  0E02               	movlw	2
  4867  0010AA  6E35               	movwf	dispLCD_num@tam^0,c
  4868  0010AC  0E03               	movlw	3
  4869  0010AE  0012               	return		;indir
  4870  0010B0                     u5109:
  4871  0010B0                     
  4872                           ;main.c: 489:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
  4873  0010B0  EE20  F0F1         	lfsr	2,_IHM+6
  4874  0010B4  D802               	call	u5118
  4875  0010B6  EF75  F008         	goto	u5119
  4876  0010BA                     u5118:
  4877  0010BA  0005               	push	
  4878  0010BC  6EFA               	movwf	pclath,c
  4879  0010BE  50DE               	movf	postinc2,w,c
  4880  0010C0  6EFD               	movwf	tosl,c
  4881  0010C2  50DE               	movf	postinc2,w,c
  4882  0010C4  6EFE               	movwf	tosh,c
  4883  0010C6  50F8               	movf	tblptru,w,c
  4884  0010C8  6EFF               	movwf	tosu,c
  4885  0010CA  50FA               	movf	pclath,w,c
  4886  0010CC  0E04               	movlw	4
  4887  0010CE  6E32               	movwf	dispLCD_num@col^0,c
  4888  0010D0  ECF7  F01E         	call	_fifo_tam
  4889  0010D4  6E45               	movwf	??_main^0,c
  4890  0010D6  0EFE               	movlw	254
  4891  0010D8  2445               	addwf	??_main^0,w,c
  4892  0010DA  6E33               	movwf	dispLCD_num@num^0,c
  4893  0010DC  6A34               	clrf	(dispLCD_num@num+1)^0,c
  4894  0010DE  0EFF               	movlw	255
  4895  0010E0  2234               	addwfc	(dispLCD_num@num+1)^0,f,c
  4896  0010E2  0E02               	movlw	2
  4897  0010E4  6E35               	movwf	dispLCD_num@tam^0,c
  4898  0010E6  0E03               	movlw	3
  4899  0010E8  0012               	return		;indir
  4900  0010EA                     u5119:
  4901  0010EA                     
  4902                           ;main.c: 490:                             estado = 11;
  4903  0010EA  0E0B               	movlw	11
  4904  0010EC  0100               	movlb	0	; () banked
  4905  0010EE  6FBB               	movwf	main@estado& (0+255),b
  4906                           
  4907                           ;main.c: 491:                             break;
  4908  0010F0  EFCA  F00D         	goto	l7027
  4909  0010F4                     l6771:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;main.c: 495:                             estado = 70;
  4913  0010F4  0E46               	movlw	70
  4914  0010F6  6FBB               	movwf	main@estado& (0+255),b
  4915                           
  4916                           ;main.c: 496:                             meAtuadores = 1;
  4917  0010F8  0E01               	movlw	1
  4918  0010FA  6FAF               	movwf	main@meAtuadores& (0+255),b
  4919                           
  4920                           ;main.c: 497:                             break;
  4921  0010FC  EFCA  F00D         	goto	l7027
  4922  001100                     l6773:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;main.c: 500:                             if( meAtuadores == 3 && botao != 2 )
  4926  001100  0E03               	movlw	3
  4927  001102  19AF               	xorwf	main@meAtuadores& (0+255),w,b
  4928  001104  A4D8               	btfss	status,2,c
  4929  001106  EF87  F008         	goto	u5121
  4930  00110A  EF89  F008         	goto	u5120
  4931  00110E                     u5121:
  4932  00110E  EF23  F009         	goto	l6793
  4933  001112                     u5120:
  4934  001112                     
  4935                           ; BSR set to: 0
  4936  001112  0E02               	movlw	2
  4937  001114  19B3               	xorwf	main@botao& (0+255),w,b
  4938  001116  B4D8               	btfsc	status,2,c
  4939  001118  EF90  F008         	goto	u5131
  4940  00111C  EF92  F008         	goto	u5130
  4941  001120                     u5131:
  4942  001120  EF23  F009         	goto	l6793
  4943  001124                     u5130:
  4944  001124                     
  4945                           ; BSR set to: 0
  4946                           ;main.c: 501:                             {;main.c: 502:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
  4947  001124  EE20  F0EF         	lfsr	2,_IHM+4
  4948  001128  D802               	call	u5148
  4949  00112A  EFA8  F008         	goto	u5149
  4950  00112E                     u5148:
  4951  00112E  0005               	push	
  4952  001130  6EFA               	movwf	pclath,c
  4953  001132  50DE               	movf	postinc2,w,c
  4954  001134  6EFD               	movwf	tosl,c
  4955  001136  50DE               	movf	postinc2,w,c
  4956  001138  6EFE               	movwf	tosh,c
  4957  00113A  50F8               	movf	tblptru,w,c
  4958  00113C  6EFF               	movwf	tosu,c
  4959  00113E  50FA               	movf	pclath,w,c
  4960  001140  0E00               	movlw	0
  4961  001142  6E2E               	movwf	dispLCD@col^0,c
  4962  001144  0E19               	movlw	low STR_21
  4963  001146  6E2F               	movwf	dispLCD@str^0,c
  4964  001148  0E7E               	movlw	high STR_21
  4965  00114A  6E30               	movwf	(dispLCD@str+1)^0,c
  4966  00114C  0E00               	movlw	0
  4967  00114E  0012               	return		;indir
  4968  001150                     u5149:
  4969  001150                     
  4970                           ;main.c: 503:                                 printExec(1, -1);
  4971  001150  0EFF               	movlw	255
  4972  001152  6E40               	movwf	printExec@ind^0,c
  4973  001154  0E01               	movlw	1
  4974  001156  EC98  F010         	call	_printExec
  4975  00115A                     
  4976                           ;main.c: 504:                                 printExec(9, 0);
  4977  00115A  0E00               	movlw	0
  4978  00115C  6E40               	movwf	printExec@ind^0,c
  4979  00115E  0E09               	movlw	9
  4980  001160  EC98  F010         	call	_printExec
  4981  001164                     
  4982                           ;main.c: 505:                                 printExec(14, 1);
  4983  001164  0E01               	movlw	1
  4984  001166  6E40               	movwf	printExec@ind^0,c
  4985  001168  0E0E               	movlw	14
  4986  00116A  EC98  F010         	call	_printExec
  4987  00116E                     
  4988                           ;main.c: 506:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
  4989  00116E  EE20  F0EF         	lfsr	2,_IHM+4
  4990  001172  D802               	call	u5158
  4991  001174  EFCD  F008         	goto	u5159
  4992  001178                     u5158:
  4993  001178  0005               	push	
  4994  00117A  6EFA               	movwf	pclath,c
  4995  00117C  50DE               	movf	postinc2,w,c
  4996  00117E  6EFD               	movwf	tosl,c
  4997  001180  50DE               	movf	postinc2,w,c
  4998  001182  6EFE               	movwf	tosh,c
  4999  001184  50F8               	movf	tblptru,w,c
  5000  001186  6EFF               	movwf	tosu,c
  5001  001188  50FA               	movf	pclath,w,c
  5002  00118A  0E00               	movlw	0
  5003  00118C  6E2E               	movwf	dispLCD@col^0,c
  5004  00118E  0EDA               	movlw	low STR_22
  5005  001190  6E2F               	movwf	dispLCD@str^0,c
  5006  001192  0E7D               	movlw	high STR_22
  5007  001194  6E30               	movwf	(dispLCD@str+1)^0,c
  5008  001196  0E02               	movlw	2
  5009  001198  0012               	return		;indir
  5010  00119A                     u5159:
  5011  00119A                     
  5012                           ;main.c: 507:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
  5013  00119A  EE20  F0F1         	lfsr	2,_IHM+6
  5014  00119E  D802               	call	u5168
  5015  0011A0  EFEA  F008         	goto	u5169
  5016  0011A4                     u5168:
  5017  0011A4  0005               	push	
  5018  0011A6  6EFA               	movwf	pclath,c
  5019  0011A8  50DE               	movf	postinc2,w,c
  5020  0011AA  6EFD               	movwf	tosl,c
  5021  0011AC  50DE               	movf	postinc2,w,c
  5022  0011AE  6EFE               	movwf	tosh,c
  5023  0011B0  50F8               	movf	tblptru,w,c
  5024  0011B2  6EFF               	movwf	tosu,c
  5025  0011B4  50FA               	movf	pclath,w,c
  5026  0011B6  0E04               	movlw	4
  5027  0011B8  6E32               	movwf	dispLCD_num@col^0,c
  5028  0011BA  ECF9  F01E         	call	_fifo_indice
  5029  0011BE  6E45               	movwf	??_main^0,c
  5030  0011C0  0EFE               	movlw	254
  5031  0011C2  2445               	addwf	??_main^0,w,c
  5032  0011C4  6E33               	movwf	dispLCD_num@num^0,c
  5033  0011C6  6A34               	clrf	(dispLCD_num@num+1)^0,c
  5034  0011C8  0EFF               	movlw	255
  5035  0011CA  2234               	addwfc	(dispLCD_num@num+1)^0,f,c
  5036  0011CC  0E02               	movlw	2
  5037  0011CE  6E35               	movwf	dispLCD_num@tam^0,c
  5038  0011D0  0E02               	movlw	2
  5039  0011D2  0012               	return		;indir
  5040  0011D4                     u5169:
  5041  0011D4                     
  5042                           ;main.c: 508:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
  5043  0011D4  EE20  F0F1         	lfsr	2,_IHM+6
  5044  0011D8  D802               	call	u5178
  5045  0011DA  EF07  F009         	goto	u5179
  5046  0011DE                     u5178:
  5047  0011DE  0005               	push	
  5048  0011E0  6EFA               	movwf	pclath,c
  5049  0011E2  50DE               	movf	postinc2,w,c
  5050  0011E4  6EFD               	movwf	tosl,c
  5051  0011E6  50DE               	movf	postinc2,w,c
  5052  0011E8  6EFE               	movwf	tosh,c
  5053  0011EA  50F8               	movf	tblptru,w,c
  5054  0011EC  6EFF               	movwf	tosu,c
  5055  0011EE  50FA               	movf	pclath,w,c
  5056  0011F0  0E01               	movlw	1
  5057  0011F2  6E32               	movwf	dispLCD_num@col^0,c
  5058  0011F4  ECF5  F01E         	call	_getIndicePassos
  5059  0011F8  6E45               	movwf	??_main^0,c
  5060  0011FA  0EFF               	movlw	255
  5061  0011FC  2445               	addwf	??_main^0,w,c
  5062  0011FE  6E33               	movwf	dispLCD_num@num^0,c
  5063  001200  6A34               	clrf	(dispLCD_num@num+1)^0,c
  5064  001202  0EFF               	movlw	255
  5065  001204  2234               	addwfc	(dispLCD_num@num+1)^0,f,c
  5066  001206  0E02               	movlw	2
  5067  001208  6E35               	movwf	dispLCD_num@tam^0,c
  5068  00120A  0E02               	movlw	2
  5069  00120C  0012               	return		;indir
  5070  00120E                     u5179:
  5071  00120E                     
  5072                           ;main.c: 509:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
  5073  00120E  EE20  F0F1         	lfsr	2,_IHM+6
  5074  001212  D802               	call	u5188
  5075  001214  EF23  F009         	goto	u5189
  5076  001218                     u5188:
  5077  001218  0005               	push	
  5078  00121A  6EFA               	movwf	pclath,c
  5079  00121C  50DE               	movf	postinc2,w,c
  5080  00121E  6EFD               	movwf	tosl,c
  5081  001220  50DE               	movf	postinc2,w,c
  5082  001222  6EFE               	movwf	tosh,c
  5083  001224  50F8               	movf	tblptru,w,c
  5084  001226  6EFF               	movwf	tosu,c
  5085  001228  50FA               	movf	pclath,w,c
  5086  00122A  0E0B               	movlw	11
  5087  00122C  6E32               	movwf	dispLCD_num@col^0,c
  5088  00122E  ECD5  F01E         	call	_getContCiclos
  5089  001232  0E01               	movlw	1
  5090  001234  2427               	addwf	?_getContCiclos^0,w,c
  5091  001236  6E33               	movwf	dispLCD_num@num^0,c
  5092  001238  0E00               	movlw	0
  5093  00123A  2028               	addwfc	(?_getContCiclos+1)^0,w,c
  5094  00123C  6E34               	movwf	(dispLCD_num@num+1)^0,c
  5095  00123E  0E05               	movlw	5
  5096  001240  6E35               	movwf	dispLCD_num@tam^0,c
  5097  001242  0E02               	movlw	2
  5098  001244  0012               	return		;indir
  5099  001246                     u5189:
  5100  001246                     l6793:
  5101                           
  5102                           ;main.c: 512:                             if(meAtuadores == 0)
  5103  001246  0100               	movlb	0	; () banked
  5104  001248  51AF               	movf	main@meAtuadores& (0+255),w,b
  5105  00124A  A4D8               	btfss	status,2,c
  5106  00124C  EF2A  F009         	goto	u5191
  5107  001250  EF2C  F009         	goto	u5190
  5108  001254                     u5191:
  5109  001254  EF3D  F009         	goto	l6799
  5110  001258                     u5190:
  5111  001258                     
  5112                           ; BSR set to: 0
  5113                           ;main.c: 513:                             {;main.c: 514:                                
      +                           estado = 16;
  5114  001258  0E10               	movlw	16
  5115  00125A  6FBB               	movwf	main@estado& (0+255),b
  5116  00125C                     
  5117                           ; BSR set to: 0
  5118                           ;main.c: 515:                                 IHM.clr();
  5119  00125C  EE20  F0F3         	lfsr	2,_IHM+8
  5120  001260  D802               	call	u5208
  5121  001262  EF3D  F009         	goto	u5209
  5122  001266                     u5208:
  5123  001266  0005               	push	
  5124  001268  6EFA               	movwf	pclath,c
  5125  00126A  50DE               	movf	postinc2,w,c
  5126  00126C  6EFD               	movwf	tosl,c
  5127  00126E  50DE               	movf	postinc2,w,c
  5128  001270  6EFE               	movwf	tosh,c
  5129  001272  50F8               	movf	tblptru,w,c
  5130  001274  6EFF               	movwf	tosu,c
  5131  001276  50FA               	movf	pclath,w,c
  5132  001278  0012               	return		;indir
  5133  00127A                     u5209:
  5134  00127A                     l6799:
  5135                           
  5136                           ;main.c: 517:                             tecla = teclado_borda();
  5137  00127A  ECE5  F01C         	call	_teclado_borda
  5138  00127E  0100               	movlb	0	; () banked
  5139  001280  6FBC               	movwf	main@tecla& (0+255),b
  5140                           
  5141                           ;main.c: 518:                             switch(tecla)
  5142  001282  EF5C  F009         	goto	l6813
  5143  001286                     l6801:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;main.c: 521:                                     botao = 1;
  5147  001286  0E01               	movlw	1
  5148  001288  6FB3               	movwf	main@botao& (0+255),b
  5149                           
  5150                           ;main.c: 522:                                     break;
  5151  00128A  EFCA  F00D         	goto	l7027
  5152  00128E                     l6803:
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;main.c: 525:                                     botao = 2;
  5156  00128E  0E02               	movlw	2
  5157  001290  6FB3               	movwf	main@botao& (0+255),b
  5158                           
  5159                           ;main.c: 526:                                     break;
  5160  001292  EFCA  F00D         	goto	l7027
  5161  001296                     l6805:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;main.c: 529:                                     botao = 0;
  5165  001296  0E00               	movlw	0
  5166  001298  6FB3               	movwf	main@botao& (0+255),b
  5167                           
  5168                           ;main.c: 530:                                     break;
  5169  00129A  EFCA  F00D         	goto	l7027
  5170  00129E                     l6807:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;main.c: 533:                                     if(botao == 2)
  5174  00129E  0E02               	movlw	2
  5175  0012A0  19B3               	xorwf	main@botao& (0+255),w,b
  5176  0012A2  A4D8               	btfss	status,2,c
  5177  0012A4  EF56  F009         	goto	u5211
  5178  0012A8  EF58  F009         	goto	u5210
  5179  0012AC                     u5211:
  5180  0012AC  EFCA  F00D         	goto	l7027
  5181  0012B0                     u5210:
  5182  0012B0                     
  5183                           ; BSR set to: 0
  5184                           ;main.c: 534:                                         botao = 3;
  5185  0012B0  0E03               	movlw	3
  5186  0012B2  6FB3               	movwf	main@botao& (0+255),b
  5187  0012B4  EFCA  F00D         	goto	l7027
  5188  0012B8                     l6813:
  5189                           
  5190                           ; BSR set to: 0
  5191  0012B8  51BC               	movf	main@tecla& (0+255),w,b
  5192  0012BA  6E45               	movwf	??_main^0,c
  5193  0012BC  6A46               	clrf	(??_main+1)^0,c
  5194                           
  5195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5196                           ; Switch size 1, requested type "simple"
  5197                           ; Number of cases is 1, Range of values is 0 to 0
  5198                           ; switch strategies available:
  5199                           ; Name         Instructions Cycles
  5200                           ; simple_byte            4     3 (average)
  5201                           ;	Chosen strategy is simple_byte
  5202  0012BE  5046               	movf	(??_main+1)^0,w,c
  5203  0012C0  0A00               	xorlw	0	; case 0
  5204  0012C2  B4D8               	btfsc	status,2,c
  5205  0012C4  EF66  F009         	goto	l7931
  5206  0012C8  EFCA  F00D         	goto	l7027
  5207  0012CC                     l7931:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ; Switch size 1, requested type "simple"
  5211                           ; Number of cases is 4, Range of values is 35 to 53
  5212                           ; switch strategies available:
  5213                           ; Name         Instructions Cycles
  5214                           ; simple_byte           13     7 (average)
  5215                           ;	Chosen strategy is simple_byte
  5216  0012CC  5045               	movf	??_main^0,w,c
  5217  0012CE  0A23               	xorlw	35	; case 35
  5218  0012D0  B4D8               	btfsc	status,2,c
  5219  0012D2  EF43  F009         	goto	l6801
  5220  0012D6  0A13               	xorlw	19	; case 48
  5221  0012D8  B4D8               	btfsc	status,2,c
  5222  0012DA  EF4B  F009         	goto	l6805
  5223  0012DE  0A01               	xorlw	1	; case 49
  5224  0012E0  B4D8               	btfsc	status,2,c
  5225  0012E2  EF4F  F009         	goto	l6807
  5226  0012E6  0A04               	xorlw	4	; case 53
  5227  0012E8  B4D8               	btfsc	status,2,c
  5228  0012EA  EF47  F009         	goto	l6803
  5229  0012EE  EFCA  F00D         	goto	l7027
  5230  0012F2                     l6815:
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;main.c: 540:                             tecla = teclado_borda();
  5234  0012F2  ECE5  F01C         	call	_teclado_borda	;wreg free
  5235  0012F6  0100               	movlb	0	; () banked
  5236  0012F8  6FBC               	movwf	main@tecla& (0+255),b
  5237  0012FA                     
  5238                           ; BSR set to: 0
  5239                           ;main.c: 541:                             if(tecla >= '0' && tecla <= '9')
  5240  0012FA  0E2F               	movlw	47
  5241  0012FC  65BC               	cpfsgt	main@tecla& (0+255),b
  5242  0012FE  EF83  F009         	goto	u5221
  5243  001302  EF85  F009         	goto	u5220
  5244  001306                     u5221:
  5245  001306  EFA6  F009         	goto	l6827
  5246  00130A                     u5220:
  5247  00130A                     
  5248                           ; BSR set to: 0
  5249  00130A  0E3A               	movlw	58
  5250  00130C  61BC               	cpfslt	main@tecla& (0+255),b
  5251  00130E  EF8B  F009         	goto	u5231
  5252  001312  EF8D  F009         	goto	u5230
  5253  001316                     u5231:
  5254  001316  EFA6  F009         	goto	l6827
  5255  00131A                     u5230:
  5256  00131A                     
  5257                           ; BSR set to: 0
  5258                           ;main.c: 542:                             {;main.c: 543:                                
      +                           dignum_conc(tecla, &num);
  5259  00131A  0EB4               	movlw	low main@num
  5260  00131C  6E2D               	movwf	dignum_conc@ptrNum^0,c
  5261  00131E  0E00               	movlw	high main@num
  5262  001320  6E2E               	movwf	(dignum_conc@ptrNum+1)^0,c
  5263  001322  51BC               	movf	main@tecla& (0+255),w,b
  5264  001324  ECC8  F01B         	call	_dignum_conc
  5265  001328                     
  5266                           ;main.c: 544:                                 if(num > 120)
  5267  001328  0100               	movlb	0	; () banked
  5268  00132A  51B5               	movf	(main@num+1)& (0+255),w,b
  5269  00132C  E109               	bnz	u5240
  5270  00132E  0E79               	movlw	121
  5271  001330  5DB4               	subwf	main@num& (0+255),w,b
  5272  001332  A0D8               	btfss	status,0,c
  5273  001334  EF9E  F009         	goto	u5241
  5274  001338  EFA0  F009         	goto	u5240
  5275  00133C                     u5241:
  5276  00133C  EFA4  F009         	goto	l359
  5277  001340                     u5240:
  5278  001340                     
  5279                           ; BSR set to: 0
  5280                           ;main.c: 545:                                     num = 120;
  5281  001340  0E00               	movlw	0
  5282  001342  6FB5               	movwf	(main@num+1)& (0+255),b
  5283  001344  0E78               	movlw	120
  5284  001346  6FB4               	movwf	main@num& (0+255),b
  5285  001348                     l359:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;main.c: 546:                                 estado = 41;
  5289  001348  0E29               	movlw	41
  5290  00134A  6FBB               	movwf	main@estado& (0+255),b
  5291  00134C                     l6827:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;main.c: 548:                             if(tecla == '*')
  5295  00134C  0E2A               	movlw	42
  5296  00134E  19BC               	xorwf	main@tecla& (0+255),w,b
  5297  001350  A4D8               	btfss	status,2,c
  5298  001352  EFAD  F009         	goto	u5251
  5299  001356  EFAF  F009         	goto	u5250
  5300  00135A                     u5251:
  5301  00135A  EFB8  F009         	goto	l6833
  5302  00135E                     u5250:
  5303  00135E                     
  5304                           ; BSR set to: 0
  5305                           ;main.c: 549:                             {;main.c: 550:                                
      +                           dignum_apagar(&num);
  5306  00135E  0EB4               	movlw	low main@num
  5307  001360  6E2E               	movwf	dignum_apagar@ptrNum^0,c
  5308  001362  0E00               	movlw	high main@num
  5309  001364  6E2F               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5310  001366  EC62  F01D         	call	_dignum_apagar	;wreg free
  5311  00136A                     
  5312                           ;main.c: 551:                                 estado = 41;
  5313  00136A  0E29               	movlw	41
  5314  00136C  0100               	movlb	0	; () banked
  5315  00136E  6FBB               	movwf	main@estado& (0+255),b
  5316  001370                     l6833:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;main.c: 553:                             if(tecla == '#')
  5320  001370  0E23               	movlw	35
  5321  001372  19BC               	xorwf	main@tecla& (0+255),w,b
  5322  001374  A4D8               	btfss	status,2,c
  5323  001376  EFBF  F009         	goto	u5261
  5324  00137A  EFC1  F009         	goto	u5260
  5325  00137E                     u5261:
  5326  00137E  EFCA  F00D         	goto	l7027
  5327  001382                     u5260:
  5328  001382                     
  5329                           ; BSR set to: 0
  5330                           ;main.c: 554:                                 estado = 42;
  5331  001382  0E2A               	movlw	42
  5332  001384  6FBB               	movwf	main@estado& (0+255),b
  5333  001386  EFCA  F00D         	goto	l7027
  5334  00138A                     l6837:
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;main.c: 559:                             IHM.printpos(2, 0, "config tempo:      s");
  5338  00138A  EE20  F0EF         	lfsr	2,_IHM+4
  5339  00138E  D802               	call	u5278
  5340  001390  EFDB  F009         	goto	u5279
  5341  001394                     u5278:
  5342  001394  0005               	push	
  5343  001396  6EFA               	movwf	pclath,c
  5344  001398  50DE               	movf	postinc2,w,c
  5345  00139A  6EFD               	movwf	tosl,c
  5346  00139C  50DE               	movf	postinc2,w,c
  5347  00139E  6EFE               	movwf	tosh,c
  5348  0013A0  50F8               	movf	tblptru,w,c
  5349  0013A2  6EFF               	movwf	tosu,c
  5350  0013A4  50FA               	movf	pclath,w,c
  5351  0013A6  0E00               	movlw	0
  5352  0013A8  6E2E               	movwf	dispLCD@col^0,c
  5353  0013AA  0E54               	movlw	low STR_23
  5354  0013AC  6E2F               	movwf	dispLCD@str^0,c
  5355  0013AE  0E7F               	movlw	high STR_23
  5356  0013B0  6E30               	movwf	(dispLCD@str+1)^0,c
  5357  0013B2  0E02               	movlw	2
  5358  0013B4  0012               	return		;indir
  5359  0013B6                     u5279:
  5360  0013B6                     
  5361                           ;main.c: 560:                             IHM.printv(2, 15, num, 3);
  5362  0013B6  EE20  F0F1         	lfsr	2,_IHM+6
  5363  0013BA  D802               	call	u5288
  5364  0013BC  EFF3  F009         	goto	u5289
  5365  0013C0                     u5288:
  5366  0013C0  0005               	push	
  5367  0013C2  6EFA               	movwf	pclath,c
  5368  0013C4  50DE               	movf	postinc2,w,c
  5369  0013C6  6EFD               	movwf	tosl,c
  5370  0013C8  50DE               	movf	postinc2,w,c
  5371  0013CA  6EFE               	movwf	tosh,c
  5372  0013CC  50F8               	movf	tblptru,w,c
  5373  0013CE  6EFF               	movwf	tosu,c
  5374  0013D0  50FA               	movf	pclath,w,c
  5375  0013D2  0E0F               	movlw	15
  5376  0013D4  6E32               	movwf	dispLCD_num@col^0,c
  5377  0013D6  C0B4  F033         	movff	main@num,dispLCD_num@num
  5378  0013DA  C0B5  F034         	movff	main@num+1,dispLCD_num@num+1
  5379  0013DE  0E03               	movlw	3
  5380  0013E0  6E35               	movwf	dispLCD_num@tam^0,c
  5381  0013E2  0E02               	movlw	2
  5382  0013E4  0012               	return		;indir
  5383  0013E6                     u5289:
  5384  0013E6                     
  5385                           ;main.c: 561:                             estado = 40;
  5386  0013E6  0E28               	movlw	40
  5387  0013E8  0100               	movlb	0	; () banked
  5388  0013EA  6FBB               	movwf	main@estado& (0+255),b
  5389                           
  5390                           ;main.c: 562:                             break;
  5391  0013EC  EFCA  F00D         	goto	l7027
  5392  0013F0                     l6843:
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;main.c: 565:                             fifo_add_tempo(num);
  5396  0013F0  51B4               	movf	main@num& (0+255),w,b
  5397  0013F2  ECD9  F01A         	call	_fifo_add_tempo
  5398  0013F6                     l6845:
  5399                           
  5400                           ;main.c: 566:                             IHM.clr();
  5401  0013F6  EE20  F0F3         	lfsr	2,_IHM+8
  5402  0013FA  D802               	call	u5298
  5403  0013FC  EF0A  F00A         	goto	u5299
  5404  001400                     u5298:
  5405  001400  0005               	push	
  5406  001402  6EFA               	movwf	pclath,c
  5407  001404  50DE               	movf	postinc2,w,c
  5408  001406  6EFD               	movwf	tosl,c
  5409  001408  50DE               	movf	postinc2,w,c
  5410  00140A  6EFE               	movwf	tosh,c
  5411  00140C  50F8               	movf	tblptru,w,c
  5412  00140E  6EFF               	movwf	tosu,c
  5413  001410  50FA               	movf	pclath,w,c
  5414  001412  0012               	return		;indir
  5415  001414                     u5299:
  5416  001414  EFEA  F002         	goto	l6447
  5417  001418                     l6849:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;main.c: 599:                             tecla = teclado_borda();
  5421  001418  ECE5  F01C         	call	_teclado_borda	;wreg free
  5422  00141C  0100               	movlb	0	; () banked
  5423  00141E  6FBC               	movwf	main@tecla& (0+255),b
  5424  001420                     
  5425                           ; BSR set to: 0
  5426                           ;main.c: 600:                             if(tecla >= '0' && tecla <= '9')
  5427  001420  0E2F               	movlw	47
  5428  001422  65BC               	cpfsgt	main@tecla& (0+255),b
  5429  001424  EF16  F00A         	goto	u5301
  5430  001428  EF18  F00A         	goto	u5300
  5431  00142C                     u5301:
  5432  00142C  EF4A  F00A         	goto	l6873
  5433  001430                     u5300:
  5434  001430                     
  5435                           ; BSR set to: 0
  5436  001430  0E3A               	movlw	58
  5437  001432  61BC               	cpfslt	main@tecla& (0+255),b
  5438  001434  EF1E  F00A         	goto	u5311
  5439  001438  EF20  F00A         	goto	u5310
  5440  00143C                     u5311:
  5441  00143C  EF4A  F00A         	goto	l6873
  5442  001440                     u5310:
  5443  001440                     
  5444                           ; BSR set to: 0
  5445                           ;main.c: 601:                                {;main.c: 602:                             
      +                              dignum_conc(tecla, &ciclos);
  5446  001440  0EB0               	movlw	low main@ciclos
  5447  001442  6E2D               	movwf	dignum_conc@ptrNum^0,c
  5448  001444  0E00               	movlw	high main@ciclos
  5449  001446  6E2E               	movwf	(dignum_conc@ptrNum+1)^0,c
  5450  001448  51BC               	movf	main@tecla& (0+255),w,b
  5451  00144A  ECC8  F01B         	call	_dignum_conc
  5452  00144E                     
  5453                           ;main.c: 603:                                 if(ciclos > 10000)
  5454  00144E  0E11               	movlw	17
  5455  001450  0100               	movlb	0	; () banked
  5456  001452  5DB0               	subwf	main@ciclos& (0+255),w,b
  5457  001454  0E27               	movlw	39
  5458  001456  59B1               	subwfb	(main@ciclos+1)& (0+255),w,b
  5459  001458  A0D8               	btfss	status,0,c
  5460  00145A  EF31  F00A         	goto	u5321
  5461  00145E  EF33  F00A         	goto	u5320
  5462  001462                     u5321:
  5463  001462  EF37  F00A         	goto	l366
  5464  001466                     u5320:
  5465  001466                     
  5466                           ; BSR set to: 0
  5467                           ;main.c: 604:                                     ciclos = 10000;
  5468  001466  0E27               	movlw	39
  5469  001468  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  5470  00146A  0E10               	movlw	16
  5471  00146C  6FB0               	movwf	main@ciclos& (0+255),b
  5472  00146E                     l366:
  5473                           
  5474                           ;main.c: 605:                                 estado = 53;
  5475  00146E  0E35               	movlw	53
  5476  001470  0100               	movlb	0	; () banked
  5477  001472  6FBB               	movwf	main@estado& (0+255),b
  5478                           
  5479                           ;main.c: 606:                                 break;
  5480  001474  EFCA  F00D         	goto	l7027
  5481  001478                     l370:
  5482                           
  5483                           ; BSR set to: 0
  5484  001478  EFE8  F002         	goto	l6445
  5485  00147C                     l6865:
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;main.c: 618:                                        estado = 54;
  5489  00147C  0E36               	movlw	54
  5490  00147E  6FBB               	movwf	main@estado& (0+255),b
  5491                           
  5492                           ;main.c: 619:                                        break;
  5493  001480  EFCA  F00D         	goto	l7027
  5494  001484                     l6867:
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;main.c: 621:                                        dignum_apagar(&ciclos);
  5498  001484  0EB0               	movlw	low main@ciclos
  5499  001486  6E2E               	movwf	dignum_apagar@ptrNum^0,c
  5500  001488  0E00               	movlw	high main@ciclos
  5501  00148A  6E2F               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5502  00148C  EC62  F01D         	call	_dignum_apagar	;wreg free
  5503  001490  EF37  F00A         	goto	l366
  5504  001494                     l6873:
  5505                           
  5506                           ; BSR set to: 0
  5507  001494  51BC               	movf	main@tecla& (0+255),w,b
  5508  001496  6E45               	movwf	??_main^0,c
  5509  001498  6A46               	clrf	(??_main+1)^0,c
  5510                           
  5511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5512                           ; Switch size 1, requested type "simple"
  5513                           ; Number of cases is 1, Range of values is 0 to 0
  5514                           ; switch strategies available:
  5515                           ; Name         Instructions Cycles
  5516                           ; simple_byte            4     3 (average)
  5517                           ;	Chosen strategy is simple_byte
  5518  00149A  5046               	movf	(??_main+1)^0,w,c
  5519  00149C  0A00               	xorlw	0	; case 0
  5520  00149E  B4D8               	btfsc	status,2,c
  5521  0014A0  EF54  F00A         	goto	l7933
  5522  0014A4  EFCA  F00D         	goto	l7027
  5523  0014A8                     l7933:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ; Switch size 1, requested type "simple"
  5527                           ; Number of cases is 6, Range of values is 35 to 68
  5528                           ; switch strategies available:
  5529                           ; Name         Instructions Cycles
  5530                           ; simple_byte           19    10 (average)
  5531                           ;	Chosen strategy is simple_byte
  5532  0014A8  5045               	movf	??_main^0,w,c
  5533  0014AA  0A23               	xorlw	35	; case 35
  5534  0014AC  B4D8               	btfsc	status,2,c
  5535  0014AE  EF3E  F00A         	goto	l6865
  5536  0014B2  0A09               	xorlw	9	; case 42
  5537  0014B4  B4D8               	btfsc	status,2,c
  5538  0014B6  EF42  F00A         	goto	l6867
  5539  0014BA  0A6B               	xorlw	107	; case 65
  5540  0014BC  B4D8               	btfsc	status,2,c
  5541  0014BE  EF3C  F00A         	goto	l370
  5542  0014C2  0A03               	xorlw	3	; case 66
  5543  0014C4  B4D8               	btfsc	status,2,c
  5544  0014C6  EFE8  F002         	goto	l6445
  5545  0014CA  0A01               	xorlw	1	; case 67
  5546  0014CC  B4D8               	btfsc	status,2,c
  5547  0014CE  EFE8  F002         	goto	l6445
  5548  0014D2  0A07               	xorlw	7	; case 68
  5549  0014D4  B4D8               	btfsc	status,2,c
  5550  0014D6  EFE8  F002         	goto	l6445
  5551  0014DA  EFCA  F00D         	goto	l7027
  5552  0014DE                     l6875:
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;main.c: 628:                             IHM.clr();
  5556  0014DE  EE20  F0F3         	lfsr	2,_IHM+8
  5557  0014E2  D802               	call	u5338
  5558  0014E4  EF7E  F00A         	goto	u5339
  5559  0014E8                     u5338:
  5560  0014E8  0005               	push	
  5561  0014EA  6EFA               	movwf	pclath,c
  5562  0014EC  50DE               	movf	postinc2,w,c
  5563  0014EE  6EFD               	movwf	tosl,c
  5564  0014F0  50DE               	movf	postinc2,w,c
  5565  0014F2  6EFE               	movwf	tosh,c
  5566  0014F4  50F8               	movf	tblptru,w,c
  5567  0014F6  6EFF               	movwf	tosu,c
  5568  0014F8  50FA               	movf	pclath,w,c
  5569  0014FA  0012               	return		;indir
  5570  0014FC                     u5339:
  5571  0014FC                     
  5572                           ;main.c: 629:                             IHM.printpos(0, 0, "Ciclos:             ");
  5573  0014FC  EE20  F0EF         	lfsr	2,_IHM+4
  5574  001500  D802               	call	u5348
  5575  001502  EF94  F00A         	goto	u5349
  5576  001506                     u5348:
  5577  001506  0005               	push	
  5578  001508  6EFA               	movwf	pclath,c
  5579  00150A  50DE               	movf	postinc2,w,c
  5580  00150C  6EFD               	movwf	tosl,c
  5581  00150E  50DE               	movf	postinc2,w,c
  5582  001510  6EFE               	movwf	tosh,c
  5583  001512  50F8               	movf	tblptru,w,c
  5584  001514  6EFF               	movwf	tosu,c
  5585  001516  50FA               	movf	pclath,w,c
  5586  001518  0E00               	movlw	0
  5587  00151A  6E2E               	movwf	dispLCD@col^0,c
  5588  00151C  0EC5               	movlw	low STR_24
  5589  00151E  6E2F               	movwf	dispLCD@str^0,c
  5590  001520  0E7D               	movlw	high STR_24
  5591  001522  6E30               	movwf	(dispLCD@str+1)^0,c
  5592  001524  0E00               	movlw	0
  5593  001526  0012               	return		;indir
  5594  001528                     u5349:
  5595  001528                     
  5596                           ;main.c: 630:                             IHM.printv(0, 15, ciclos, 5);
  5597  001528  EE20  F0F1         	lfsr	2,_IHM+6
  5598  00152C  D802               	call	u5358
  5599  00152E  EFAC  F00A         	goto	u5359
  5600  001532                     u5358:
  5601  001532  0005               	push	
  5602  001534  6EFA               	movwf	pclath,c
  5603  001536  50DE               	movf	postinc2,w,c
  5604  001538  6EFD               	movwf	tosl,c
  5605  00153A  50DE               	movf	postinc2,w,c
  5606  00153C  6EFE               	movwf	tosh,c
  5607  00153E  50F8               	movf	tblptru,w,c
  5608  001540  6EFF               	movwf	tosu,c
  5609  001542  50FA               	movf	pclath,w,c
  5610  001544  0E0F               	movlw	15
  5611  001546  6E32               	movwf	dispLCD_num@col^0,c
  5612  001548  C0B0  F033         	movff	main@ciclos,dispLCD_num@num
  5613  00154C  C0B1  F034         	movff	main@ciclos+1,dispLCD_num@num+1
  5614  001550  0E05               	movlw	5
  5615  001552  6E35               	movwf	dispLCD_num@tam^0,c
  5616  001554  0E00               	movlw	0
  5617  001556  0012               	return		;indir
  5618  001558                     u5359:
  5619                           
  5620                           ;main.c: 631:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
  5621  001558  EE20  F0EF         	lfsr	2,_IHM+4
  5622  00155C  D802               	call	u5368
  5623  00155E  EFC2  F00A         	goto	u5369
  5624  001562                     u5368:
  5625  001562  0005               	push	
  5626  001564  6EFA               	movwf	pclath,c
  5627  001566  50DE               	movf	postinc2,w,c
  5628  001568  6EFD               	movwf	tosl,c
  5629  00156A  50DE               	movf	postinc2,w,c
  5630  00156C  6EFE               	movwf	tosh,c
  5631  00156E  50F8               	movf	tblptru,w,c
  5632  001570  6EFF               	movwf	tosu,c
  5633  001572  50FA               	movf	pclath,w,c
  5634  001574  0E00               	movlw	0
  5635  001576  6E2E               	movwf	dispLCD@col^0,c
  5636  001578  0E00               	movlw	low STR_25
  5637  00157A  6E2F               	movwf	dispLCD@str^0,c
  5638  00157C  0E7F               	movlw	high STR_25
  5639  00157E  6E30               	movwf	(dispLCD@str+1)^0,c
  5640  001580  0E02               	movlw	2
  5641  001582  0012               	return		;indir
  5642  001584                     u5369:
  5643  001584                     
  5644                           ;main.c: 632:                             estado = 52;
  5645  001584  0E34               	movlw	52
  5646  001586  0100               	movlb	0	; () banked
  5647  001588  6FBB               	movwf	main@estado& (0+255),b
  5648                           
  5649                           ;main.c: 633:                             break;
  5650  00158A  EFCA  F00D         	goto	l7027
  5651  00158E                     l6883:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;main.c: 636:                             salvar_dado(10, 10, init_cond);
  5655  00158E  0E0A               	movlw	10
  5656  001590  6E2D               	movwf	salvar_dado@col^0,c
  5657  001592  C0B2  F02E         	movff	main@init_cond,salvar_dado@data
  5658  001596  0E0A               	movlw	10
  5659  001598  ECF6  F01D         	call	_salvar_dado
  5660  00159C                     
  5661                           ;main.c: 637:                             EEPROM.salvar(11, fifo_adrs() + 2);
  5662  00159C  D802               	call	u5378
  5663  00159E  EFE5  F00A         	goto	u5379
  5664  0015A2                     u5378:
  5665  0015A2  0005               	push	
  5666  0015A4  0100               	movlb	0	; () banked
  5667  0015A6  6EFA               	movwf	pclath,c
  5668  0015A8  51E1               	movf	_EEPROM& (0+255),w,b
  5669  0015AA  6EFD               	movwf	tosl,c
  5670  0015AC  51E2               	movf	(_EEPROM+1)& (0+255),w,b
  5671  0015AE  6EFE               	movwf	tosh,c
  5672  0015B0  50F8               	movf	tblptru,w,c
  5673  0015B2  6EFF               	movwf	tosu,c
  5674  0015B4  50FA               	movf	pclath,w,c
  5675  0015B6  ECDA  F01E         	call	_fifo_adrs	;wreg free
  5676  0015BA  0E02               	movlw	2
  5677  0015BC  2427               	addwf	?_fifo_adrs^0,w,c
  5678  0015BE  6E2D               	movwf	salvar_receita@data^0,c
  5679  0015C0  0E00               	movlw	0
  5680  0015C2  2028               	addwfc	(?_fifo_adrs+1)^0,w,c
  5681  0015C4  6E2E               	movwf	(salvar_receita@data+1)^0,c
  5682  0015C6  0E0B               	movlw	11
  5683  0015C8  0012               	return		;indir
  5684  0015CA                     u5379:
  5685  0015CA                     
  5686                           ;main.c: 638:                             IHM.print("    DESEJA SALVAR   \n"
  5687  0015CA  0E21               	movlw	low STR_26
  5688  0015CC  6E2E               	movwf	dispLCD_str@str^0,c
  5689  0015CE  0E7D               	movlw	high STR_26
  5690  0015D0  6E2F               	movwf	(dispLCD_str@str+1)^0,c
  5691  0015D2  EE20  F0ED         	lfsr	2,_IHM+2
  5692  0015D6  D802               	call	u5388
  5693  0015D8  EFF8  F00A         	goto	u5389
  5694  0015DC                     u5388:
  5695  0015DC  0005               	push	
  5696  0015DE  6EFA               	movwf	pclath,c
  5697  0015E0  50DE               	movf	postinc2,w,c
  5698  0015E2  6EFD               	movwf	tosl,c
  5699  0015E4  50DE               	movf	postinc2,w,c
  5700  0015E6  6EFE               	movwf	tosh,c
  5701  0015E8  50F8               	movf	tblptru,w,c
  5702  0015EA  6EFF               	movwf	tosu,c
  5703  0015EC  50FA               	movf	pclath,w,c
  5704  0015EE  0012               	return		;indir
  5705  0015F0                     u5389:
  5706  0015F0                     
  5707                           ;main.c: 642:                             tecla = teclado_borda();
  5708  0015F0  ECE5  F01C         	call	_teclado_borda
  5709  0015F4  0100               	movlb	0	; () banked
  5710  0015F6  6FBC               	movwf	main@tecla& (0+255),b
  5711                           
  5712                           ;main.c: 643:                             switch(tecla)
  5713  0015F8  EF06  F00B         	goto	l6899
  5714  0015FC                     l6891:
  5715                           
  5716                           ; BSR set to: 0
  5717  0015FC  0E4B               	movlw	75
  5718  0015FE  6FBB               	movwf	main@estado& (0+255),b
  5719  001600  EFCA  F00D         	goto	l7027
  5720  001604                     l6893:
  5721                           
  5722                           ; BSR set to: 0
  5723  001604  ECE4  F01E         	call	_dispLCD_clr	;wreg free
  5724  001608  EF37  F00A         	goto	l366
  5725  00160C                     l6899:
  5726                           
  5727                           ; BSR set to: 0
  5728  00160C  51BC               	movf	main@tecla& (0+255),w,b
  5729  00160E  6E45               	movwf	??_main^0,c
  5730  001610  6A46               	clrf	(??_main+1)^0,c
  5731                           
  5732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5733                           ; Switch size 1, requested type "simple"
  5734                           ; Number of cases is 1, Range of values is 0 to 0
  5735                           ; switch strategies available:
  5736                           ; Name         Instructions Cycles
  5737                           ; simple_byte            4     3 (average)
  5738                           ;	Chosen strategy is simple_byte
  5739  001612  5046               	movf	(??_main+1)^0,w,c
  5740  001614  0A00               	xorlw	0	; case 0
  5741  001616  B4D8               	btfsc	status,2,c
  5742  001618  EF10  F00B         	goto	l7935
  5743  00161C  EFCA  F00D         	goto	l7027
  5744  001620                     l7935:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ; Switch size 1, requested type "simple"
  5748                           ; Number of cases is 2, Range of values is 35 to 42
  5749                           ; switch strategies available:
  5750                           ; Name         Instructions Cycles
  5751                           ; simple_byte            7     4 (average)
  5752                           ;	Chosen strategy is simple_byte
  5753  001620  5045               	movf	??_main^0,w,c
  5754  001622  0A23               	xorlw	35	; case 35
  5755  001624  B4D8               	btfsc	status,2,c
  5756  001626  EFFE  F00A         	goto	l6891
  5757  00162A  0A09               	xorlw	9	; case 42
  5758  00162C  B4D8               	btfsc	status,2,c
  5759  00162E  EF02  F00B         	goto	l6893
  5760  001632  EFCA  F00D         	goto	l7027
  5761  001636                     l6901:
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;main.c: 651:                             IHM.clr();
  5765  001636  EE20  F0F3         	lfsr	2,_IHM+8
  5766  00163A  D802               	call	u5398
  5767  00163C  EF2A  F00B         	goto	u5399
  5768  001640                     u5398:
  5769  001640  0005               	push	
  5770  001642  6EFA               	movwf	pclath,c
  5771  001644  50DE               	movf	postinc2,w,c
  5772  001646  6EFD               	movwf	tosl,c
  5773  001648  50DE               	movf	postinc2,w,c
  5774  00164A  6EFE               	movwf	tosh,c
  5775  00164C  50F8               	movf	tblptru,w,c
  5776  00164E  6EFF               	movwf	tosu,c
  5777  001650  50FA               	movf	pclath,w,c
  5778  001652  0012               	return		;indir
  5779  001654                     u5399:
  5780  001654                     
  5781                           ;main.c: 652:                             IHM.print(" ESCOLHA A MEMORIA\n"
  5782  001654  0ED3               	movlw	low STR_27
  5783  001656  6E2E               	movwf	dispLCD_str@str^0,c
  5784  001658  0E7C               	movlw	high STR_27
  5785  00165A  6E2F               	movwf	(dispLCD_str@str+1)^0,c
  5786  00165C  EE20  F0ED         	lfsr	2,_IHM+2
  5787  001660  D802               	call	u5408
  5788  001662  EF3D  F00B         	goto	u5409
  5789  001666                     u5408:
  5790  001666  0005               	push	
  5791  001668  6EFA               	movwf	pclath,c
  5792  00166A  50DE               	movf	postinc2,w,c
  5793  00166C  6EFD               	movwf	tosl,c
  5794  00166E  50DE               	movf	postinc2,w,c
  5795  001670  6EFE               	movwf	tosh,c
  5796  001672  50F8               	movf	tblptru,w,c
  5797  001674  6EFF               	movwf	tosu,c
  5798  001676  50FA               	movf	pclath,w,c
  5799  001678  0012               	return		;indir
  5800  00167A                     u5409:
  5801  00167A                     
  5802                           ;main.c: 656:                             estado = 76;
  5803  00167A  0E4C               	movlw	76
  5804  00167C  0100               	movlb	0	; () banked
  5805  00167E  6FBB               	movwf	main@estado& (0+255),b
  5806  001680                     l6907:
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;main.c: 659:                             tecla = teclado_borda();
  5810  001680  ECE5  F01C         	call	_teclado_borda	;wreg free
  5811  001684  0100               	movlb	0	; () banked
  5812  001686  6FBC               	movwf	main@tecla& (0+255),b
  5813                           
  5814                           ;main.c: 660:                             switch(tecla)
  5815  001688  EF8C  F00B         	goto	l6921
  5816  00168C                     l387:
  5817  00168C                     l6909:
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;main.c: 672:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
  5821  00168C  C0BC  F027         	movff	main@tecla,___awmod@dividend
  5822  001690  6A28               	clrf	(___awmod@dividend+1)^0,c
  5823  001692  0E00               	movlw	0
  5824  001694  6E2A               	movwf	(___awmod@divisor+1)^0,c
  5825  001696  0E30               	movlw	48
  5826  001698  6E29               	movwf	___awmod@divisor^0,c
  5827  00169A  EC1D  F016         	call	___awmod	;wreg free
  5828  00169E  5027               	movf	?___awmod^0,w,c
  5829  0016A0  6E2D               	movwf	salvar_dado@col^0,c
  5830  0016A2  C0B2  F02E         	movff	main@init_cond,salvar_dado@data
  5831  0016A6  0E0A               	movlw	10
  5832  0016A8  ECF6  F01D         	call	_salvar_dado
  5833  0016AC                     
  5834                           ;main.c: 673:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
  5835  0016AC  D802               	call	u5418
  5836  0016AE  EF76  F00B         	goto	u5419
  5837  0016B2                     u5418:
  5838  0016B2  0005               	push	
  5839  0016B4  0100               	movlb	0	; () banked
  5840  0016B6  6EFA               	movwf	pclath,c
  5841  0016B8  51E1               	movf	_EEPROM& (0+255),w,b
  5842  0016BA  6EFD               	movwf	tosl,c
  5843  0016BC  51E2               	movf	(_EEPROM+1)& (0+255),w,b
  5844  0016BE  6EFE               	movwf	tosh,c
  5845  0016C0  50F8               	movf	tblptru,w,c
  5846  0016C2  6EFF               	movwf	tosu,c
  5847  0016C4  50FA               	movf	pclath,w,c
  5848  0016C6  ECDA  F01E         	call	_fifo_adrs	;wreg free
  5849  0016CA  0E02               	movlw	2
  5850  0016CC  2427               	addwf	?_fifo_adrs^0,w,c
  5851  0016CE  6E2D               	movwf	salvar_receita@data^0,c
  5852  0016D0  0E00               	movlw	0
  5853  0016D2  2028               	addwfc	(?_fifo_adrs+1)^0,w,c
  5854  0016D4  6E2E               	movwf	(salvar_receita@data+1)^0,c
  5855  0016D6  C0BC  F027         	movff	main@tecla,___awmod@dividend
  5856  0016DA  6A28               	clrf	(___awmod@dividend+1)^0,c
  5857  0016DC  0E00               	movlw	0
  5858  0016DE  6E2A               	movwf	(___awmod@divisor+1)^0,c
  5859  0016E0  0E30               	movlw	48
  5860  0016E2  6E29               	movwf	___awmod@divisor^0,c
  5861  0016E4  EC1D  F016         	call	___awmod	;wreg free
  5862  0016E8  5027               	movf	?___awmod^0,w,c
  5863  0016EA  0012               	return		;indir
  5864  0016EC                     u5419:
  5865  0016EC                     
  5866                           ;main.c: 674:                                            estado = 77;
  5867  0016EC  0E4D               	movlw	77
  5868  0016EE  0100               	movlb	0	; () banked
  5869  0016F0  6FBB               	movwf	main@estado& (0+255),b
  5870                           
  5871                           ;main.c: 675:                                            break;
  5872  0016F2  EFCA  F00D         	goto	l7027
  5873  0016F6                     l6915:
  5874                           
  5875                           ; BSR set to: 0
  5876  0016F6  EE20  F0F3         	lfsr	2,_IHM+8
  5877  0016FA  D802               	call	u5428
  5878  0016FC  EF8A  F00B         	goto	u5429
  5879  001700                     u5428:
  5880  001700  0005               	push	
  5881  001702  6EFA               	movwf	pclath,c
  5882  001704  50DE               	movf	postinc2,w,c
  5883  001706  6EFD               	movwf	tosl,c
  5884  001708  50DE               	movf	postinc2,w,c
  5885  00170A  6EFE               	movwf	tosh,c
  5886  00170C  50F8               	movf	tblptru,w,c
  5887  00170E  6EFF               	movwf	tosu,c
  5888  001710  50FA               	movf	pclath,w,c
  5889  001712  0012               	return		;indir
  5890  001714                     u5429:
  5891  001714  EFDF  F007         	goto	l6749
  5892  001718                     l6921:
  5893                           
  5894                           ; BSR set to: 0
  5895  001718  51BC               	movf	main@tecla& (0+255),w,b
  5896  00171A  6E45               	movwf	??_main^0,c
  5897  00171C  6A46               	clrf	(??_main+1)^0,c
  5898                           
  5899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5900                           ; Switch size 1, requested type "simple"
  5901                           ; Number of cases is 1, Range of values is 0 to 0
  5902                           ; switch strategies available:
  5903                           ; Name         Instructions Cycles
  5904                           ; simple_byte            4     3 (average)
  5905                           ;	Chosen strategy is simple_byte
  5906  00171E  5046               	movf	(??_main+1)^0,w,c
  5907  001720  0A00               	xorlw	0	; case 0
  5908  001722  B4D8               	btfsc	status,2,c
  5909  001724  EF96  F00B         	goto	l7937
  5910  001728  EFCA  F00D         	goto	l7027
  5911  00172C                     l7937:
  5912                           
  5913                           ; BSR set to: 0
  5914                           ; Switch size 1, requested type "simple"
  5915                           ; Number of cases is 11, Range of values is 42 to 57
  5916                           ; switch strategies available:
  5917                           ; Name         Instructions Cycles
  5918                           ; simple_byte           34    18 (average)
  5919                           ;	Chosen strategy is simple_byte
  5920  00172C  5045               	movf	??_main^0,w,c
  5921  00172E  0A2A               	xorlw	42	; case 42
  5922  001730  B4D8               	btfsc	status,2,c
  5923  001732  EF7B  F00B         	goto	l6915
  5924  001736  0A1A               	xorlw	26	; case 48
  5925  001738  B4D8               	btfsc	status,2,c
  5926  00173A  EF46  F00B         	goto	l387
  5927  00173E  0A01               	xorlw	1	; case 49
  5928  001740  B4D8               	btfsc	status,2,c
  5929  001742  EF46  F00B         	goto	l387
  5930  001746  0A03               	xorlw	3	; case 50
  5931  001748  B4D8               	btfsc	status,2,c
  5932  00174A  EF46  F00B         	goto	l6909
  5933  00174E  0A01               	xorlw	1	; case 51
  5934  001750  B4D8               	btfsc	status,2,c
  5935  001752  EF46  F00B         	goto	l6909
  5936  001756  0A07               	xorlw	7	; case 52
  5937  001758  B4D8               	btfsc	status,2,c
  5938  00175A  EF46  F00B         	goto	l6909
  5939  00175E  0A01               	xorlw	1	; case 53
  5940  001760  B4D8               	btfsc	status,2,c
  5941  001762  EF46  F00B         	goto	l6909
  5942  001766  0A03               	xorlw	3	; case 54
  5943  001768  B4D8               	btfsc	status,2,c
  5944  00176A  EF46  F00B         	goto	l6909
  5945  00176E  0A01               	xorlw	1	; case 55
  5946  001770  B4D8               	btfsc	status,2,c
  5947  001772  EF46  F00B         	goto	l6909
  5948  001776  0A0F               	xorlw	15	; case 56
  5949  001778  B4D8               	btfsc	status,2,c
  5950  00177A  EF46  F00B         	goto	l6909
  5951  00177E  0A01               	xorlw	1	; case 57
  5952  001780  B4D8               	btfsc	status,2,c
  5953  001782  EF46  F00B         	goto	l6909
  5954  001786  EFCA  F00D         	goto	l7027
  5955  00178A                     l6923:
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;main.c: 682:                             IHM.clr();
  5959  00178A  EE20  F0F3         	lfsr	2,_IHM+8
  5960  00178E  D802               	call	u5438
  5961  001790  EFD4  F00B         	goto	u5439
  5962  001794                     u5438:
  5963  001794  0005               	push	
  5964  001796  6EFA               	movwf	pclath,c
  5965  001798  50DE               	movf	postinc2,w,c
  5966  00179A  6EFD               	movwf	tosl,c
  5967  00179C  50DE               	movf	postinc2,w,c
  5968  00179E  6EFE               	movwf	tosh,c
  5969  0017A0  50F8               	movf	tblptru,w,c
  5970  0017A2  6EFF               	movwf	tosu,c
  5971  0017A4  50FA               	movf	pclath,w,c
  5972  0017A6  0012               	return		;indir
  5973  0017A8                     u5439:
  5974  0017A8                     
  5975                           ;main.c: 683:                             for(char i = 0; i <= 3; i++)
  5976  0017A8  0E00               	movlw	0
  5977  0017AA  0100               	movlb	0	; () banked
  5978  0017AC  6FA9               	movwf	main@i_694& (0+255),b
  5979  0017AE                     l6927:
  5980                           
  5981                           ; BSR set to: 0
  5982  0017AE  0E03               	movlw	3
  5983  0017B0  65A9               	cpfsgt	main@i_694& (0+255),b
  5984  0017B2  EFDD  F00B         	goto	u5441
  5985  0017B6  EFDF  F00B         	goto	u5440
  5986  0017BA                     u5441:
  5987  0017BA  EFE1  F00B         	goto	l6931
  5988  0017BE                     u5440:
  5989  0017BE  EF10  F00C         	goto	l6949
  5990  0017C2                     l6931:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;main.c: 684:                             {;main.c: 685:                                
      +                           for(char j = 0; j <= 19; j++)
  5994  0017C2  0E00               	movlw	0
  5995  0017C4  6FAA               	movwf	main@j_695& (0+255),b
  5996  0017C6                     l6933:
  5997                           
  5998                           ; BSR set to: 0
  5999  0017C6  0E13               	movlw	19
  6000  0017C8  65AA               	cpfsgt	main@j_695& (0+255),b
  6001  0017CA  EFE9  F00B         	goto	u5451
  6002  0017CE  EFEB  F00B         	goto	u5450
  6003  0017D2                     u5451:
  6004  0017D2  EFED  F00B         	goto	l6937
  6005  0017D6                     u5450:
  6006  0017D6  EF0D  F00C         	goto	l6945
  6007  0017DA                     l6937:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;main.c: 686:                                 {;main.c: 687:                            
      +                                   IHM.printpos(i, j, "\377");
  6011  0017DA  EE20  F0EF         	lfsr	2,_IHM+4
  6012  0017DE  D802               	call	u5468
  6013  0017E0  EF03  F00C         	goto	u5469
  6014  0017E4                     u5468:
  6015  0017E4  0005               	push	
  6016  0017E6  6EFA               	movwf	pclath,c
  6017  0017E8  50DE               	movf	postinc2,w,c
  6018  0017EA  6EFD               	movwf	tosl,c
  6019  0017EC  50DE               	movf	postinc2,w,c
  6020  0017EE  6EFE               	movwf	tosh,c
  6021  0017F0  50F8               	movf	tblptru,w,c
  6022  0017F2  6EFF               	movwf	tosu,c
  6023  0017F4  50FA               	movf	pclath,w,c
  6024  0017F6  C0AA  F02E         	movff	main@j_695,dispLCD@col
  6025  0017FA  0EFC               	movlw	low STR_1
  6026  0017FC  6E2F               	movwf	dispLCD@str^0,c
  6027  0017FE  0E7F               	movlw	high STR_1
  6028  001800  6E30               	movwf	(dispLCD@str+1)^0,c
  6029  001802  51A9               	movf	main@i_694& (0+255),w,b
  6030  001804  0012               	return		;indir
  6031  001806                     u5469:
  6032  001806                     
  6033                           ;main.c: 688:                                     delay(10);
  6034  001806  0E00               	movlw	0
  6035  001808  6E28               	movwf	(delay@t+1)^0,c
  6036  00180A  0E0A               	movlw	10
  6037  00180C  6E27               	movwf	delay@t^0,c
  6038  00180E  EC90  F01D         	call	_delay
  6039  001812                     
  6040                           ;main.c: 689:                                 }
  6041  001812  0100               	movlb	0	; () banked
  6042  001814  2BAA               	incf	main@j_695& (0+255),f,b
  6043  001816  EFE3  F00B         	goto	l6933
  6044  00181A                     l6945:
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;main.c: 690:                             }
  6048  00181A  2BA9               	incf	main@i_694& (0+255),f,b
  6049  00181C  EFD7  F00B         	goto	l6927
  6050  001820                     l6949:
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;main.c: 692:                             for(char i = 0; i <= 3; i++)
  6054  001820  0E00               	movlw	0
  6055  001822  6FAB               	movwf	main@i_697& (0+255),b
  6056  001824                     l6951:
  6057                           
  6058                           ; BSR set to: 0
  6059  001824  0E03               	movlw	3
  6060  001826  65AB               	cpfsgt	main@i_697& (0+255),b
  6061  001828  EF18  F00C         	goto	u5471
  6062  00182C  EF1A  F00C         	goto	u5470
  6063  001830                     u5471:
  6064  001830  EF1C  F00C         	goto	l6955
  6065  001834                     u5470:
  6066  001834  EF4B  F00C         	goto	l6973
  6067  001838                     l6955:
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;main.c: 693:                             {;main.c: 694:                                
      +                           for(char j = 0; j <= 19; j++)
  6071  001838  0E00               	movlw	0
  6072  00183A  6FAC               	movwf	main@j_698& (0+255),b
  6073  00183C                     l6957:
  6074                           
  6075                           ; BSR set to: 0
  6076  00183C  0E13               	movlw	19
  6077  00183E  65AC               	cpfsgt	main@j_698& (0+255),b
  6078  001840  EF24  F00C         	goto	u5481
  6079  001844  EF26  F00C         	goto	u5480
  6080  001848                     u5481:
  6081  001848  EF28  F00C         	goto	l6961
  6082  00184C                     u5480:
  6083  00184C  EF48  F00C         	goto	l6969
  6084  001850                     l6961:
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;main.c: 695:                                 {;main.c: 696:                            
      +                                   IHM.printpos(i, j, " ");
  6088  001850  EE20  F0EF         	lfsr	2,_IHM+4
  6089  001854  D802               	call	u5498
  6090  001856  EF3E  F00C         	goto	u5499
  6091  00185A                     u5498:
  6092  00185A  0005               	push	
  6093  00185C  6EFA               	movwf	pclath,c
  6094  00185E  50DE               	movf	postinc2,w,c
  6095  001860  6EFD               	movwf	tosl,c
  6096  001862  50DE               	movf	postinc2,w,c
  6097  001864  6EFE               	movwf	tosh,c
  6098  001866  50F8               	movf	tblptru,w,c
  6099  001868  6EFF               	movwf	tosu,c
  6100  00186A  50FA               	movf	pclath,w,c
  6101  00186C  C0AC  F02E         	movff	main@j_698,dispLCD@col
  6102  001870  0ED8               	movlw	low (STR_24+19)
  6103  001872  6E2F               	movwf	dispLCD@str^0,c
  6104  001874  0E7D               	movlw	high (STR_24+19)
  6105  001876  6E30               	movwf	(dispLCD@str+1)^0,c
  6106  001878  51AB               	movf	main@i_697& (0+255),w,b
  6107  00187A  0012               	return		;indir
  6108  00187C                     u5499:
  6109  00187C                     
  6110                           ;main.c: 697:                                     delay(10);
  6111  00187C  0E00               	movlw	0
  6112  00187E  6E28               	movwf	(delay@t+1)^0,c
  6113  001880  0E0A               	movlw	10
  6114  001882  6E27               	movwf	delay@t^0,c
  6115  001884  EC90  F01D         	call	_delay
  6116  001888                     
  6117                           ;main.c: 698:                                 }
  6118  001888  0100               	movlb	0	; () banked
  6119  00188A  2BAC               	incf	main@j_698& (0+255),f,b
  6120  00188C  EF1E  F00C         	goto	l6957
  6121  001890                     l6969:
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;main.c: 699:                             }
  6125  001890  2BAB               	incf	main@i_697& (0+255),f,b
  6126  001892  EF12  F00C         	goto	l6951
  6127  001896                     l6973:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;main.c: 700:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
  6131  001896  EE20  F0EF         	lfsr	2,_IHM+4
  6132  00189A  D802               	call	u5508
  6133  00189C  EF61  F00C         	goto	u5509
  6134  0018A0                     u5508:
  6135  0018A0  0005               	push	
  6136  0018A2  6EFA               	movwf	pclath,c
  6137  0018A4  50DE               	movf	postinc2,w,c
  6138  0018A6  6EFD               	movwf	tosl,c
  6139  0018A8  50DE               	movf	postinc2,w,c
  6140  0018AA  6EFE               	movwf	tosh,c
  6141  0018AC  50F8               	movf	tblptru,w,c
  6142  0018AE  6EFF               	movwf	tosu,c
  6143  0018B0  50FA               	movf	pclath,w,c
  6144  0018B2  0E00               	movlw	0
  6145  0018B4  6E2E               	movwf	dispLCD@col^0,c
  6146  0018B6  0E6D               	movlw	low STR_30
  6147  0018B8  6E2F               	movwf	dispLCD@str^0,c
  6148  0018BA  0E7E               	movlw	high STR_30
  6149  0018BC  6E30               	movwf	(dispLCD@str+1)^0,c
  6150  0018BE  0E01               	movlw	1
  6151  0018C0  0012               	return		;indir
  6152  0018C2                     u5509:
  6153                           
  6154                           ;main.c: 701:                             IHM.printpos(2, 0, "        SALVA       ");
  6155  0018C2  EE20  F0EF         	lfsr	2,_IHM+4
  6156  0018C6  D802               	call	u5518
  6157  0018C8  EF77  F00C         	goto	u5519
  6158  0018CC                     u5518:
  6159  0018CC  0005               	push	
  6160  0018CE  6EFA               	movwf	pclath,c
  6161  0018D0  50DE               	movf	postinc2,w,c
  6162  0018D2  6EFD               	movwf	tosl,c
  6163  0018D4  50DE               	movf	postinc2,w,c
  6164  0018D6  6EFE               	movwf	tosh,c
  6165  0018D8  50F8               	movf	tblptru,w,c
  6166  0018DA  6EFF               	movwf	tosu,c
  6167  0018DC  50FA               	movf	pclath,w,c
  6168  0018DE  0E00               	movlw	0
  6169  0018E0  6E2E               	movwf	dispLCD@col^0,c
  6170  0018E2  0EEF               	movlw	low STR_31
  6171  0018E4  6E2F               	movwf	dispLCD@str^0,c
  6172  0018E6  0E7D               	movlw	high STR_31
  6173  0018E8  6E30               	movwf	(dispLCD@str+1)^0,c
  6174  0018EA  0E02               	movlw	2
  6175  0018EC  0012               	return		;indir
  6176  0018EE                     u5519:
  6177  0018EE                     
  6178                           ;main.c: 703:                             setT1(1000);
  6179  0018EE  0EE8               	movlw	232
  6180  0018F0  6E2D               	movwf	setT1@c^0,c
  6181  0018F2  0E03               	movlw	3
  6182  0018F4  6E2E               	movwf	(setT1@c+1)^0,c
  6183  0018F6  0E00               	movlw	0
  6184  0018F8  6E2F               	movwf	(setT1@c+2)^0,c
  6185  0018FA  0E00               	movlw	0
  6186  0018FC  6E30               	movwf	(setT1@c+3)^0,c
  6187  0018FE  EC60  F01E         	call	_setT1
  6188  001902                     
  6189                           ;main.c: 704:                             estado = 78;
  6190  001902  0E4E               	movlw	78
  6191  001904  0100               	movlb	0	; () banked
  6192  001906  6FBB               	movwf	main@estado& (0+255),b
  6193                           
  6194                           ;main.c: 705:                             break;
  6195  001908  EFCA  F00D         	goto	l7027
  6196  00190C                     l6979:
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;main.c: 708:                             if(!statusT1())
  6200  00190C  EC9C  F01E         	call	_statusT1	;wreg free
  6201  001910  5027               	movf	?_statusT1^0,w,c
  6202  001912  1028               	iorwf	(?_statusT1+1)^0,w,c
  6203  001914  1029               	iorwf	(?_statusT1+2)^0,w,c
  6204  001916  102A               	iorwf	(?_statusT1+3)^0,w,c
  6205  001918  A4D8               	btfss	status,2,c
  6206  00191A  EF91  F00C         	goto	u5521
  6207  00191E  EF93  F00C         	goto	u5520
  6208  001922                     u5521:
  6209  001922  EFCA  F00D         	goto	l7027
  6210  001926                     u5520:
  6211  001926  EF37  F00A         	goto	l366
  6212  00192A                     l6983:
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;main.c: 713:                             IHM.printpos(2, 0, "config contrl:     %");
  6216  00192A  EE20  F0EF         	lfsr	2,_IHM+4
  6217  00192E  D802               	call	u5538
  6218  001930  EFAB  F00C         	goto	u5539
  6219  001934                     u5538:
  6220  001934  0005               	push	
  6221  001936  6EFA               	movwf	pclath,c
  6222  001938  50DE               	movf	postinc2,w,c
  6223  00193A  6EFD               	movwf	tosl,c
  6224  00193C  50DE               	movf	postinc2,w,c
  6225  00193E  6EFE               	movwf	tosh,c
  6226  001940  50F8               	movf	tblptru,w,c
  6227  001942  6EFF               	movwf	tosu,c
  6228  001944  50FA               	movf	pclath,w,c
  6229  001946  0E00               	movlw	0
  6230  001948  6E2E               	movwf	dispLCD@col^0,c
  6231  00194A  0E2A               	movlw	low STR_32
  6232  00194C  6E2F               	movwf	dispLCD@str^0,c
  6233  00194E  0E7F               	movlw	high STR_32
  6234  001950  6E30               	movwf	(dispLCD@str+1)^0,c
  6235  001952  0E02               	movlw	2
  6236  001954  0012               	return		;indir
  6237  001956                     u5539:
  6238  001956                     
  6239                           ;main.c: 714:                             IHM.printv(2, 15, num, 3);
  6240  001956  EE20  F0F1         	lfsr	2,_IHM+6
  6241  00195A  D802               	call	u5548
  6242  00195C  EFC3  F00C         	goto	u5549
  6243  001960                     u5548:
  6244  001960  0005               	push	
  6245  001962  6EFA               	movwf	pclath,c
  6246  001964  50DE               	movf	postinc2,w,c
  6247  001966  6EFD               	movwf	tosl,c
  6248  001968  50DE               	movf	postinc2,w,c
  6249  00196A  6EFE               	movwf	tosh,c
  6250  00196C  50F8               	movf	tblptru,w,c
  6251  00196E  6EFF               	movwf	tosu,c
  6252  001970  50FA               	movf	pclath,w,c
  6253  001972  0E0F               	movlw	15
  6254  001974  6E32               	movwf	dispLCD_num@col^0,c
  6255  001976  C0B4  F033         	movff	main@num,dispLCD_num@num
  6256  00197A  C0B5  F034         	movff	main@num+1,dispLCD_num@num+1
  6257  00197E  0E03               	movlw	3
  6258  001980  6E35               	movwf	dispLCD_num@tam^0,c
  6259  001982  0E02               	movlw	2
  6260  001984  0012               	return		;indir
  6261  001986                     u5549:
  6262  001986                     
  6263                           ;main.c: 715:                             estado = 91;
  6264  001986  0E5B               	movlw	91
  6265  001988  0100               	movlb	0	; () banked
  6266  00198A  6FBB               	movwf	main@estado& (0+255),b
  6267                           
  6268                           ;main.c: 716:                             break;
  6269  00198C  EFCA  F00D         	goto	l7027
  6270  001990                     l6989:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;main.c: 719:                             tecla = teclado_borda();
  6274  001990  ECE5  F01C         	call	_teclado_borda
  6275  001994  0100               	movlb	0	; () banked
  6276  001996  6FBC               	movwf	main@tecla& (0+255),b
  6277  001998                     
  6278                           ; BSR set to: 0
  6279                           ;main.c: 720:                             if(tecla >= '0' && tecla <= '9')
  6280  001998  0E2F               	movlw	47
  6281  00199A  65BC               	cpfsgt	main@tecla& (0+255),b
  6282  00199C  EFD2  F00C         	goto	u5551
  6283  0019A0  EFD4  F00C         	goto	u5550
  6284  0019A4                     u5551:
  6285  0019A4  EFF5  F00C         	goto	l7001
  6286  0019A8                     u5550:
  6287  0019A8                     
  6288                           ; BSR set to: 0
  6289  0019A8  0E3A               	movlw	58
  6290  0019AA  61BC               	cpfslt	main@tecla& (0+255),b
  6291  0019AC  EFDA  F00C         	goto	u5561
  6292  0019B0  EFDC  F00C         	goto	u5560
  6293  0019B4                     u5561:
  6294  0019B4  EFF5  F00C         	goto	l7001
  6295  0019B8                     u5560:
  6296  0019B8                     
  6297                           ; BSR set to: 0
  6298                           ;main.c: 721:                             {;main.c: 722:                                
      +                           dignum_conc(tecla, &num);
  6299  0019B8  0EB4               	movlw	low main@num
  6300  0019BA  6E2D               	movwf	dignum_conc@ptrNum^0,c
  6301  0019BC  0E00               	movlw	high main@num
  6302  0019BE  6E2E               	movwf	(dignum_conc@ptrNum+1)^0,c
  6303  0019C0  51BC               	movf	main@tecla& (0+255),w,b
  6304  0019C2  ECC8  F01B         	call	_dignum_conc
  6305  0019C6                     
  6306                           ;main.c: 723:                                 if(num > 100)
  6307  0019C6  0100               	movlb	0	; () banked
  6308  0019C8  51B5               	movf	(main@num+1)& (0+255),w,b
  6309  0019CA  E109               	bnz	u5570
  6310  0019CC  0E65               	movlw	101
  6311  0019CE  5DB4               	subwf	main@num& (0+255),w,b
  6312  0019D0  A0D8               	btfss	status,0,c
  6313  0019D2  EFED  F00C         	goto	u5571
  6314  0019D6  EFEF  F00C         	goto	u5570
  6315  0019DA                     u5571:
  6316  0019DA  EFF3  F00C         	goto	l410
  6317  0019DE                     u5570:
  6318  0019DE                     
  6319                           ; BSR set to: 0
  6320                           ;main.c: 724:                                     num = 100;
  6321  0019DE  0E00               	movlw	0
  6322  0019E0  6FB5               	movwf	(main@num+1)& (0+255),b
  6323  0019E2  0E64               	movlw	100
  6324  0019E4  6FB4               	movwf	main@num& (0+255),b
  6325  0019E6                     l410:
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;main.c: 725:                                 estado = 90;
  6329  0019E6  0E5A               	movlw	90
  6330  0019E8  6FBB               	movwf	main@estado& (0+255),b
  6331  0019EA                     l7001:
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;main.c: 727:                             if(tecla == '*')
  6335  0019EA  0E2A               	movlw	42
  6336  0019EC  19BC               	xorwf	main@tecla& (0+255),w,b
  6337  0019EE  A4D8               	btfss	status,2,c
  6338  0019F0  EFFC  F00C         	goto	u5581
  6339  0019F4  EFFE  F00C         	goto	u5580
  6340  0019F8                     u5581:
  6341  0019F8  EF07  F00D         	goto	l7007
  6342  0019FC                     u5580:
  6343  0019FC                     
  6344                           ; BSR set to: 0
  6345                           ;main.c: 728:                             {;main.c: 729:                                
      +                           dignum_apagar(&num);
  6346  0019FC  0EB4               	movlw	low main@num
  6347  0019FE  6E2E               	movwf	dignum_apagar@ptrNum^0,c
  6348  001A00  0E00               	movlw	high main@num
  6349  001A02  6E2F               	movwf	(dignum_apagar@ptrNum+1)^0,c
  6350  001A04  EC62  F01D         	call	_dignum_apagar	;wreg free
  6351  001A08                     
  6352                           ;main.c: 730:                                 estado = 90;
  6353  001A08  0E5A               	movlw	90
  6354  001A0A  0100               	movlb	0	; () banked
  6355  001A0C  6FBB               	movwf	main@estado& (0+255),b
  6356  001A0E                     l7007:
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;main.c: 732:                             if(tecla == '#')
  6360  001A0E  0E23               	movlw	35
  6361  001A10  19BC               	xorwf	main@tecla& (0+255),w,b
  6362  001A12  A4D8               	btfss	status,2,c
  6363  001A14  EF0E  F00D         	goto	u5591
  6364  001A18  EF10  F00D         	goto	u5590
  6365  001A1C                     u5591:
  6366  001A1C  EFCA  F00D         	goto	l7027
  6367  001A20                     u5590:
  6368  001A20                     
  6369                           ; BSR set to: 0
  6370                           ;main.c: 733:                                 estado = 92;
  6371  001A20  0E5C               	movlw	92
  6372  001A22  6FBB               	movwf	main@estado& (0+255),b
  6373  001A24  EFCA  F00D         	goto	l7027
  6374  001A28                     l7011:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 737:                             fifo_add_control(num);
  6378  001A28  51B4               	movf	main@num& (0+255),w,b
  6379  001A2A  EC80  F01B         	call	_fifo_add_control
  6380  001A2E  EFFB  F009         	goto	l6845
  6381  001A32                     l7017:
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;main.c: 743:                             fifo_add_ciclo(ciclos);
  6385  001A32  C0B0  F027         	movff	main@ciclos,fifo_add_ciclo@ciclos
  6386  001A36  C0B1  F028         	movff	main@ciclos+1,fifo_add_ciclo@ciclos+1
  6387  001A3A  ECDF  F01E         	call	_fifo_add_ciclo	;wreg free
  6388  001A3E                     
  6389                           ;main.c: 744:                             estado = 30;
  6390  001A3E  0E1E               	movlw	30
  6391  001A40  0100               	movlb	0	; () banked
  6392  001A42  6FBB               	movwf	main@estado& (0+255),b
  6393  001A44  EF43  F009         	goto	l6801
  6394  001A48                     l162:
  6395  001A48                     l7025:
  6396  001A48  0100               	movlb	0	; () banked
  6397  001A4A  51BB               	movf	main@estado& (0+255),w,b
  6398  001A4C  6E45               	movwf	??_main^0,c
  6399  001A4E  6A46               	clrf	(??_main+1)^0,c
  6400                           
  6401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6402                           ; Switch size 1, requested type "simple"
  6403                           ; Number of cases is 1, Range of values is 0 to 0
  6404                           ; switch strategies available:
  6405                           ; Name         Instructions Cycles
  6406                           ; simple_byte            4     3 (average)
  6407                           ;	Chosen strategy is simple_byte
  6408  001A50  5046               	movf	(??_main+1)^0,w,c
  6409  001A52  0A00               	xorlw	0	; case 0
  6410  001A54  B4D8               	btfsc	status,2,c
  6411  001A56  EF2F  F00D         	goto	l7939
  6412  001A5A  EFCA  F00D         	goto	l7027
  6413  001A5E                     l7939:
  6414                           
  6415                           ; BSR set to: 0
  6416                           ; Switch size 1, requested type "simple"
  6417                           ; Number of cases is 38, Range of values is 0 to 100
  6418                           ; switch strategies available:
  6419                           ; Name         Instructions Cycles
  6420                           ; simple_byte          115    58 (average)
  6421                           ;	Chosen strategy is simple_byte
  6422  001A5E  5045               	movf	??_main^0,w,c
  6423  001A60  0A00               	xorlw	0	; case 0
  6424  001A62  B4D8               	btfsc	status,2,c
  6425  001A64  EF70  F000         	goto	l6291
  6426  001A68  0A01               	xorlw	1	; case 1
  6427  001A6A  B4D8               	btfsc	status,2,c
  6428  001A6C  EFEA  F000         	goto	l6341
  6429  001A70  0A03               	xorlw	3	; case 2
  6430  001A72  B4D8               	btfsc	status,2,c
  6431  001A74  EF44  F001         	goto	l6365
  6432  001A78  0A01               	xorlw	1	; case 3
  6433  001A7A  B4D8               	btfsc	status,2,c
  6434  001A7C  EFCF  F005         	goto	l6619
  6435  001A80  0A05               	xorlw	5	; case 6
  6436  001A82  B4D8               	btfsc	status,2,c
  6437  001A84  EF0F  F006         	goto	l6627
  6438  001A88  0A01               	xorlw	1	; case 7
  6439  001A8A  B4D8               	btfsc	status,2,c
  6440  001A8C  EFA6  F006         	goto	l6671
  6441  001A90  0A0F               	xorlw	15	; case 8
  6442  001A92  B4D8               	btfsc	status,2,c
  6443  001A94  EF56  F001         	goto	l6369
  6444  001A98  0A01               	xorlw	1	; case 9
  6445  001A9A  B4D8               	btfsc	status,2,c
  6446  001A9C  EF7A  F001         	goto	l6377
  6447  001AA0  0A03               	xorlw	3	; case 10
  6448  001AA2  B4D8               	btfsc	status,2,c
  6449  001AA4  EF65  F007         	goto	l6713
  6450  001AA8  0A01               	xorlw	1	; case 11
  6451  001AAA  B4D8               	btfsc	status,2,c
  6452  001AAC  EF93  F007         	goto	l6721
  6453  001AB0  0A05               	xorlw	5	; case 14
  6454  001AB2  B4D8               	btfsc	status,2,c
  6455  001AB4  EF25  F008         	goto	l6763
  6456  001AB8  0A1E               	xorlw	30	; case 16
  6457  001ABA  B4D8               	btfsc	status,2,c
  6458  001ABC  EF21  F008         	goto	l6759
  6459  001AC0  0A0E               	xorlw	14	; case 30
  6460  001AC2  B4D8               	btfsc	status,2,c
  6461  001AC4  EF7A  F008         	goto	l6771
  6462  001AC8  0A36               	xorlw	54	; case 40
  6463  001ACA  B4D8               	btfsc	status,2,c
  6464  001ACC  EF79  F009         	goto	l6815
  6465  001AD0  0A01               	xorlw	1	; case 41
  6466  001AD2  B4D8               	btfsc	status,2,c
  6467  001AD4  EFC5  F009         	goto	l6837
  6468  001AD8  0A03               	xorlw	3	; case 42
  6469  001ADA  B4D8               	btfsc	status,2,c
  6470  001ADC  EFF8  F009         	goto	l6843
  6471  001AE0  0A1E               	xorlw	30	; case 52
  6472  001AE2  B4D8               	btfsc	status,2,c
  6473  001AE4  EF0C  F00A         	goto	l6849
  6474  001AE8  0A01               	xorlw	1	; case 53
  6475  001AEA  B4D8               	btfsc	status,2,c
  6476  001AEC  EF6F  F00A         	goto	l6875
  6477  001AF0  0A03               	xorlw	3	; case 54
  6478  001AF2  B4D8               	btfsc	status,2,c
  6479  001AF4  EF19  F00D         	goto	l7017
  6480  001AF8  0A70               	xorlw	112	; case 70
  6481  001AFA  B4D8               	btfsc	status,2,c
  6482  001AFC  EF80  F008         	goto	l6773
  6483  001B00  0A01               	xorlw	1	; case 71
  6484  001B02  B4D8               	btfsc	status,2,c
  6485  001B04  EF8C  F001         	goto	l6381
  6486  001B08  0A0F               	xorlw	15	; case 72
  6487  001B0A  B4D8               	btfsc	status,2,c
  6488  001B0C  EF30  F004         	goto	l6551
  6489  001B10  0A01               	xorlw	1	; case 73
  6490  001B12  B4D8               	btfsc	status,2,c
  6491  001B14  EF55  F004         	goto	l6557
  6492  001B18  0A03               	xorlw	3	; case 74
  6493  001B1A  B4D8               	btfsc	status,2,c
  6494  001B1C  EFC7  F00A         	goto	l6883
  6495  001B20  0A01               	xorlw	1	; case 75
  6496  001B22  B4D8               	btfsc	status,2,c
  6497  001B24  EF1B  F00B         	goto	l6901
  6498  001B28  0A07               	xorlw	7	; case 76
  6499  001B2A  B4D8               	btfsc	status,2,c
  6500  001B2C  EF40  F00B         	goto	l6907
  6501  001B30  0A01               	xorlw	1	; case 77
  6502  001B32  B4D8               	btfsc	status,2,c
  6503  001B34  EFC5  F00B         	goto	l6923
  6504  001B38  0A03               	xorlw	3	; case 78
  6505  001B3A  B4D8               	btfsc	status,2,c
  6506  001B3C  EF86  F00C         	goto	l6979
  6507  001B40  0A1E               	xorlw	30	; case 80
  6508  001B42  B4D8               	btfsc	status,2,c
  6509  001B44  EFEF  F002         	goto	l6449
  6510  001B48  0A01               	xorlw	1	; case 81
  6511  001B4A  B4D8               	btfsc	status,2,c
  6512  001B4C  EF12  F003         	goto	l6459
  6513  001B50  0A03               	xorlw	3	; case 82
  6514  001B52  B4D8               	btfsc	status,2,c
  6515  001B54  EF24  F003         	goto	l6463
  6516  001B58  0A06               	xorlw	6	; case 84
  6517  001B5A  B4D8               	btfsc	status,2,c
  6518  001B5C  EF4B  F003         	goto	l6475
  6519  001B60  0A01               	xorlw	1	; case 85
  6520  001B62  B4D8               	btfsc	status,2,c
  6521  001B64  EF92  F003         	goto	l6489
  6522  001B68  0A03               	xorlw	3	; case 86
  6523  001B6A  B4D8               	btfsc	status,2,c
  6524  001B6C  EF21  F004         	goto	l6547
  6525  001B70  0A0C               	xorlw	12	; case 90
  6526  001B72  B4D8               	btfsc	status,2,c
  6527  001B74  EF95  F00C         	goto	l6983
  6528  001B78  0A01               	xorlw	1	; case 91
  6529  001B7A  B4D8               	btfsc	status,2,c
  6530  001B7C  EFC8  F00C         	goto	l6989
  6531  001B80  0A07               	xorlw	7	; case 92
  6532  001B82  B4D8               	btfsc	status,2,c
  6533  001B84  EF14  F00D         	goto	l7011
  6534  001B88  0A38               	xorlw	56	; case 100
  6535  001B8A  B4D8               	btfsc	status,2,c
  6536  001B8C  EFC1  F001         	goto	l6395
  6537  001B90  EFCA  F00D         	goto	l7027
  6538  001B94                     l7027:
  6539                           
  6540                           ;main.c: 749:         serialIOscan();
  6541  001B94  ECAD  F01A         	call	_serialIOscan	;wreg free
  6542                           
  6543                           ;main.c: 751:         switch(meAtuadores)
  6544  001B98  EFF2  F00E         	goto	l7101
  6545  001B9C                     l7029:
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;main.c: 756:                             resetIndicePassos();
  6549  001B9C  ECEF  F01E         	call	_resetIndicePassos	;wreg free
  6550                           
  6551                           ;main.c: 757:                             resetContCiclos();
  6552  001BA0  ECCB  F01E         	call	_resetContCiclos	;wreg free
  6553  001BA4                     l7031:
  6554                           
  6555                           ;main.c: 758:                             meAtuadores = 2;
  6556  001BA4  0E02               	movlw	2
  6557  001BA6  0100               	movlb	0	; () banked
  6558  001BA8  6FAF               	movwf	main@meAtuadores& (0+255),b
  6559                           
  6560                           ;main.c: 759:                             break;
  6561  001BAA  EF24  F00D         	goto	l7025
  6562  001BAE                     l7033:
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;main.c: 762:                             auxPasso = fifo_lerPos(getIndicePassos());
  6566  001BAE  ECF5  F01E         	call	_getIndicePassos	;wreg free
  6567  001BB2  ECAE  F01E         	call	_fifo_lerPos
  6568  001BB6  0100               	movlb	0	; () banked
  6569  001BB8  6FBA               	movwf	main@auxPasso& (0+255),b
  6570  001BBA                     
  6571                           ; BSR set to: 0
  6572                           ;main.c: 764:                             if(botao == 1 || botao == 3 || botao == 0)
  6573  001BBA  05B3               	decf	main@botao& (0+255),w,b
  6574  001BBC  B4D8               	btfsc	status,2,c
  6575  001BBE  EFE3  F00D         	goto	u5601
  6576  001BC2  EFE5  F00D         	goto	u5600
  6577  001BC6                     u5601:
  6578  001BC6  EFF6  F00D         	goto	l7041
  6579  001BCA                     u5600:
  6580  001BCA                     
  6581                           ; BSR set to: 0
  6582  001BCA  0E03               	movlw	3
  6583  001BCC  19B3               	xorwf	main@botao& (0+255),w,b
  6584  001BCE  B4D8               	btfsc	status,2,c
  6585  001BD0  EFEC  F00D         	goto	u5611
  6586  001BD4  EFEE  F00D         	goto	u5610
  6587  001BD8                     u5611:
  6588  001BD8  EFF6  F00D         	goto	l7041
  6589  001BDC                     u5610:
  6590  001BDC                     
  6591                           ; BSR set to: 0
  6592  001BDC  51B3               	movf	main@botao& (0+255),w,b
  6593  001BDE  A4D8               	btfss	status,2,c
  6594  001BE0  EFF4  F00D         	goto	u5621
  6595  001BE4  EFF6  F00D         	goto	u5620
  6596  001BE8                     u5621:
  6597  001BE8  EF24  F00D         	goto	l162
  6598  001BEC                     u5620:
  6599  001BEC                     l7041:
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;main.c: 765:                                 meAtuadores = 3;
  6603  001BEC  0E03               	movlw	3
  6604  001BEE  6FAF               	movwf	main@meAtuadores& (0+255),b
  6605  001BF0  EF24  F00D         	goto	l7025
  6606  001BF4                     l7043:
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;main.c: 769:                             if(auxPasso <= 0x64 || auxPasso == 0xFE)
  6610  001BF4  0E64               	movlw	100
  6611  001BF6  65BA               	cpfsgt	main@auxPasso& (0+255),b
  6612  001BF8  EF00  F00E         	goto	u5631
  6613  001BFC  EF02  F00E         	goto	u5630
  6614  001C00                     u5631:
  6615  001C00  EF0B  F00E         	goto	l7047
  6616  001C04                     u5630:
  6617  001C04                     
  6618                           ; BSR set to: 0
  6619  001C04  0EFE               	movlw	254
  6620  001C06  19BA               	xorwf	main@auxPasso& (0+255),w,b
  6621  001C08  A4D8               	btfss	status,2,c
  6622  001C0A  EF09  F00E         	goto	u5641
  6623  001C0E  EF0B  F00E         	goto	u5640
  6624  001C12                     u5641:
  6625  001C12  EF3E  F00E         	goto	l7053
  6626  001C16                     u5640:
  6627  001C16                     l7047:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 770:                             {;main.c: 771:                                
      +                           decodifica(&auxPasso);
  6631  001C16  0EBA               	movlw	low main@auxPasso
  6632  001C18  6E27               	movwf	decodifica@d^0,c
  6633  001C1A  0E00               	movlw	high main@auxPasso
  6634  001C1C  6E28               	movwf	(decodifica@d+1)^0,c
  6635  001C1E  ECC4  F012         	call	_decodifica	;wreg free
  6636  001C22                     
  6637                           ;main.c: 772:                                 MCP4725((long)((4095L * auxPasso)/100));
  6638  001C22  0100               	movlb	0	; () banked
  6639  001C24  51BA               	movf	main@auxPasso& (0+255),w,b
  6640  001C26  6E27               	movwf	___lmul@multiplier^0,c
  6641  001C28  6A28               	clrf	(___lmul@multiplier+1)^0,c
  6642  001C2A  6A29               	clrf	(___lmul@multiplier+2)^0,c
  6643  001C2C  6A2A               	clrf	(___lmul@multiplier+3)^0,c
  6644  001C2E  0EFF               	movlw	255
  6645  001C30  6E2B               	movwf	___lmul@multiplicand^0,c
  6646  001C32  0E0F               	movlw	15
  6647  001C34  6E2C               	movwf	(___lmul@multiplicand+1)^0,c
  6648  001C36  0E00               	movlw	0
  6649  001C38  6E2D               	movwf	(___lmul@multiplicand+2)^0,c
  6650  001C3A  0E00               	movlw	0
  6651  001C3C  6E2E               	movwf	(___lmul@multiplicand+3)^0,c
  6652  001C3E  EC8F  F019         	call	___lmul	;wreg free
  6653  001C42  C027  F033         	movff	?___lmul,___aldiv@dividend
  6654  001C46  C028  F034         	movff	?___lmul+1,___aldiv@dividend+1
  6655  001C4A  C029  F035         	movff	?___lmul+2,___aldiv@dividend+2
  6656  001C4E  C02A  F036         	movff	?___lmul+3,___aldiv@dividend+3
  6657  001C52  0E64               	movlw	100
  6658  001C54  6E37               	movwf	___aldiv@divisor^0,c
  6659  001C56  0E00               	movlw	0
  6660  001C58  6E38               	movwf	(___aldiv@divisor+1)^0,c
  6661  001C5A  0E00               	movlw	0
  6662  001C5C  6E39               	movwf	(___aldiv@divisor+2)^0,c
  6663  001C5E  0E00               	movlw	0
  6664  001C60  6E3A               	movwf	(___aldiv@divisor+3)^0,c
  6665  001C62  EC64  F013         	call	___aldiv	;wreg free
  6666  001C66  C033  F041         	movff	?___aldiv,MCP4725@Vout
  6667  001C6A  C034  F042         	movff	?___aldiv+1,MCP4725@Vout+1
  6668  001C6E  EC07  F01E         	call	_MCP4725	;wreg free
  6669  001C72                     l7051:
  6670                           
  6671                           ;main.c: 773:                                 meAtuadores = 6;
  6672  001C72  0E06               	movlw	6
  6673  001C74  0100               	movlb	0	; () banked
  6674  001C76  6FAF               	movwf	main@meAtuadores& (0+255),b
  6675                           
  6676                           ;main.c: 774:                             }
  6677  001C78  EF24  F00D         	goto	l7025
  6678  001C7C                     l7053:
  6679                           
  6680                           ; BSR set to: 0
  6681  001C7C  0E64               	movlw	100
  6682  001C7E  65BA               	cpfsgt	main@auxPasso& (0+255),b
  6683  001C80  EF44  F00E         	goto	u5651
  6684  001C84  EF46  F00E         	goto	u5650
  6685  001C88                     u5651:
  6686  001C88  EF69  F00E         	goto	l7063
  6687  001C8C                     u5650:
  6688  001C8C                     
  6689                           ; BSR set to: 0
  6690  001C8C  0EDD               	movlw	221
  6691  001C8E  61BA               	cpfslt	main@auxPasso& (0+255),b
  6692  001C90  EF4C  F00E         	goto	u5661
  6693  001C94  EF4E  F00E         	goto	u5660
  6694  001C98                     u5661:
  6695  001C98  EF69  F00E         	goto	l7063
  6696  001C9C                     u5660:
  6697  001C9C                     
  6698                           ; BSR set to: 0
  6699                           ;main.c: 776:                             {;main.c: 777:                                
      +                           auxPasso -= 0x64;
  6700  001C9C  0E64               	movlw	100
  6701  001C9E  5FBA               	subwf	main@auxPasso& (0+255),f,b
  6702  001CA0                     
  6703                           ; BSR set to: 0
  6704                           ;main.c: 778:                                 setT1(auxPasso * 1000 );
  6705  001CA0  C0BA  F027         	movff	main@auxPasso,___wmul@multiplier
  6706  001CA4  6A28               	clrf	(___wmul@multiplier+1)^0,c
  6707  001CA6  0E03               	movlw	3
  6708  001CA8  6E2A               	movwf	(___wmul@multiplicand+1)^0,c
  6709  001CAA  0EE8               	movlw	232
  6710  001CAC  6E29               	movwf	___wmul@multiplicand^0,c
  6711  001CAE  ECD1  F01D         	call	___wmul	;wreg free
  6712  001CB2  C027  F02D         	movff	?___wmul,setT1@c
  6713  001CB6  C028  F02E         	movff	?___wmul+1,setT1@c+1
  6714  001CBA  0E00               	movlw	0
  6715  001CBC  BE2E               	btfsc	(setT1@c+1)^0,7,c
  6716  001CBE  0EFF               	movlw	-1
  6717  001CC0  6E2F               	movwf	(setT1@c+2)^0,c
  6718  001CC2  6E30               	movwf	(setT1@c+3)^0,c
  6719  001CC4  EC60  F01E         	call	_setT1	;wreg free
  6720  001CC8                     
  6721                           ;main.c: 779:                                 meAtuadores = 4;
  6722  001CC8  0E04               	movlw	4
  6723  001CCA  0100               	movlb	0	; () banked
  6724  001CCC  6FAF               	movwf	main@meAtuadores& (0+255),b
  6725                           
  6726                           ;main.c: 780:                             }
  6727  001CCE  EF24  F00D         	goto	l7025
  6728  001CD2                     l7063:
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;main.c: 782:                             {;main.c: 783:                                
      +                           decodifica(&auxPasso);
  6732  001CD2  0EBA               	movlw	low main@auxPasso
  6733  001CD4  6E27               	movwf	decodifica@d^0,c
  6734  001CD6  0E00               	movlw	high main@auxPasso
  6735  001CD8  6E28               	movwf	(decodifica@d+1)^0,c
  6736  001CDA  ECC4  F012         	call	_decodifica	;wreg free
  6737                           
  6738                           ;main.c: 784:                                 set_passo(auxPasso, vetorOut);
  6739  001CDE  0EAE               	movlw	low main@vetorOut
  6740  001CE0  6E27               	movwf	set_passo@ptr^0,c
  6741  001CE2  0E00               	movlw	high main@vetorOut
  6742  001CE4  6E28               	movwf	(set_passo@ptr+1)^0,c
  6743  001CE6  0100               	movlb	0	; () banked
  6744  001CE8  51BA               	movf	main@auxPasso& (0+255),w,b
  6745  001CEA  EC4A  F015         	call	_set_passo
  6746  001CEE                     
  6747                           ;main.c: 785:                                 meAtuadores = 5;
  6748  001CEE  0E05               	movlw	5
  6749  001CF0  0100               	movlb	0	; () banked
  6750  001CF2  6FAF               	movwf	main@meAtuadores& (0+255),b
  6751  001CF4  EF24  F00D         	goto	l7025
  6752  001CF8                     l7067:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;main.c: 790:                             if(!statusT1())
  6756  001CF8  EC9C  F01E         	call	_statusT1	;wreg free
  6757  001CFC  5027               	movf	?_statusT1^0,w,c
  6758  001CFE  1028               	iorwf	(?_statusT1+1)^0,w,c
  6759  001D00  1029               	iorwf	(?_statusT1+2)^0,w,c
  6760  001D02  102A               	iorwf	(?_statusT1+3)^0,w,c
  6761  001D04  A4D8               	btfss	status,2,c
  6762  001D06  EF87  F00E         	goto	u5671
  6763  001D0A  EF89  F00E         	goto	u5670
  6764  001D0E                     u5671:
  6765  001D0E  EF24  F00D         	goto	l162
  6766  001D12                     u5670:
  6767  001D12  EF39  F00E         	goto	l7051
  6768  001D16                     l7071:
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;main.c: 795:                             if(ler_sensor(auxPasso, vetorIn))
  6772  001D16  0EAD               	movlw	low main@vetorIn
  6773  001D18  6E27               	movwf	ler_sensor@ptr^0,c
  6774  001D1A  0E00               	movlw	high main@vetorIn
  6775  001D1C  6E28               	movwf	(ler_sensor@ptr+1)^0,c
  6776  001D1E  51BA               	movf	main@auxPasso& (0+255),w,b
  6777  001D20  EC62  F014         	call	_ler_sensor
  6778  001D24  0900               	iorlw	0
  6779  001D26  B4D8               	btfsc	status,2,c
  6780  001D28  EF98  F00E         	goto	u5681
  6781  001D2C  EF9A  F00E         	goto	u5680
  6782  001D30                     u5681:
  6783  001D30  EF24  F00D         	goto	l162
  6784  001D34                     u5680:
  6785  001D34  EF39  F00E         	goto	l7051
  6786  001D38                     l7075:
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;main.c: 800:                             if(botao == 3)
  6790  001D38  0E03               	movlw	3
  6791  001D3A  19B3               	xorwf	main@botao& (0+255),w,b
  6792  001D3C  A4D8               	btfss	status,2,c
  6793  001D3E  EFA3  F00E         	goto	u5691
  6794  001D42  EFA5  F00E         	goto	u5690
  6795  001D46                     u5691:
  6796  001D46  EFA7  F00E         	goto	l435
  6797  001D4A                     u5690:
  6798  001D4A                     
  6799                           ; BSR set to: 0
  6800                           ;main.c: 801:                             {;main.c: 802:                                
      +                           botao = 2;
  6801  001D4A  0E02               	movlw	2
  6802  001D4C  6FB3               	movwf	main@botao& (0+255),b
  6803  001D4E                     l435:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;main.c: 804:                             meAtuadores = 7;
  6807  001D4E  0E07               	movlw	7
  6808  001D50  6FAF               	movwf	main@meAtuadores& (0+255),b
  6809                           
  6810                           ;main.c: 806:                             break;
  6811  001D52  EF24  F00D         	goto	l7025
  6812  001D56                     l7079:
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;main.c: 809:                             addIndicePassos();
  6816  001D56  EC4A  F01E         	call	_addIndicePassos	;wreg free
  6817                           
  6818                           ;main.c: 810:                             if(getIndicePassos() < fifo_indice())
  6819  001D5A  ECF5  F01E         	call	_getIndicePassos	;wreg free
  6820  001D5E  6E45               	movwf	??_main^0,c
  6821  001D60  ECF9  F01E         	call	_fifo_indice	;wreg free
  6822  001D64  5C45               	subwf	??_main^0,w,c
  6823  001D66  B0D8               	btfsc	status,0,c
  6824  001D68  EFB8  F00E         	goto	u5701
  6825  001D6C  EFBA  F00E         	goto	u5700
  6826  001D70                     u5701:
  6827  001D70  EFBC  F00E         	goto	l7083
  6828  001D74                     u5700:
  6829  001D74  EFD2  F00D         	goto	l7031
  6830  001D78                     l7083:
  6831                           
  6832                           ;main.c: 813:                             {;main.c: 814:                                
      +                           addContCiclos();
  6833  001D78  ECF2  F01E         	call	_addContCiclos	;wreg free
  6834  001D7C                     
  6835                           ;main.c: 815:                                 meAtuadores = 8;
  6836  001D7C  0E08               	movlw	8
  6837  001D7E  0100               	movlb	0	; () banked
  6838  001D80  6FAF               	movwf	main@meAtuadores& (0+255),b
  6839  001D82  EF24  F00D         	goto	l7025
  6840  001D86                     l7087:
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;main.c: 820:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
  6844  001D86  51B3               	movf	main@botao& (0+255),w,b
  6845  001D88  B4D8               	btfsc	status,2,c
  6846  001D8A  EFC9  F00E         	goto	u5711
  6847  001D8E  EFCB  F00E         	goto	u5710
  6848  001D92                     u5711:
  6849  001D92  EFED  F00E         	goto	l7097
  6850  001D96                     u5710:
  6851  001D96                     
  6852                           ; BSR set to: 0
  6853  001D96  ECD5  F01E         	call	_getContCiclos	;wreg free
  6854  001D9A  C027  F045         	movff	?_getContCiclos,??_main
  6855  001D9E  C028  F046         	movff	?_getContCiclos+1,??_main+1
  6856  001DA2  EC18  F01E         	call	_getCiclos	;wreg free
  6857  001DA6  5027               	movf	?_getCiclos^0,w,c
  6858  001DA8  5C45               	subwf	??_main^0,w,c
  6859  001DAA  5028               	movf	(?_getCiclos+1)^0,w,c
  6860  001DAC  5846               	subwfb	(??_main+1)^0,w,c
  6861  001DAE  A0D8               	btfss	status,0,c
  6862  001DB0  EFDC  F00E         	goto	u5721
  6863  001DB4  EFDE  F00E         	goto	u5720
  6864  001DB8                     u5721:
  6865  001DB8  EFE9  F00E         	goto	l7093
  6866  001DBC                     u5720:
  6867  001DBC  EC18  F01E         	call	_getCiclos	;wreg free
  6868  001DC0  5027               	movf	?_getCiclos^0,w,c
  6869  001DC2  1028               	iorwf	(?_getCiclos+1)^0,w,c
  6870  001DC4  A4D8               	btfss	status,2,c
  6871  001DC6  EFE7  F00E         	goto	u5731
  6872  001DCA  EFE9  F00E         	goto	u5730
  6873  001DCE                     u5731:
  6874  001DCE  EFED  F00E         	goto	l7097
  6875  001DD2                     u5730:
  6876  001DD2                     l7093:
  6877                           
  6878                           ;main.c: 821:                             {;main.c: 822:                                
      +                           resetIndicePassos();
  6879  001DD2  ECEF  F01E         	call	_resetIndicePassos	;wreg free
  6880  001DD6  EFD2  F00D         	goto	l7031
  6881  001DDA                     l7097:
  6882                           
  6883                           ;main.c: 826:                             {;main.c: 827:                                
      +                           meAtuadores = 0;
  6884  001DDA  0E00               	movlw	0
  6885  001DDC  0100               	movlb	0	; () banked
  6886  001DDE  6FAF               	movwf	main@meAtuadores& (0+255),b
  6887  001DE0  EF24  F00D         	goto	l7025
  6888  001DE4                     l7101:
  6889  001DE4  0100               	movlb	0	; () banked
  6890  001DE6  51AF               	movf	main@meAtuadores& (0+255),w,b
  6891  001DE8  6E45               	movwf	??_main^0,c
  6892  001DEA  6A46               	clrf	(??_main+1)^0,c
  6893                           
  6894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6895                           ; Switch size 1, requested type "simple"
  6896                           ; Number of cases is 1, Range of values is 0 to 0
  6897                           ; switch strategies available:
  6898                           ; Name         Instructions Cycles
  6899                           ; simple_byte            4     3 (average)
  6900                           ;	Chosen strategy is simple_byte
  6901  001DEC  5046               	movf	(??_main+1)^0,w,c
  6902  001DEE  0A00               	xorlw	0	; case 0
  6903  001DF0  B4D8               	btfsc	status,2,c
  6904  001DF2  EFFD  F00E         	goto	l7941
  6905  001DF6  EF24  F00D         	goto	l7025
  6906  001DFA                     l7941:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ; Switch size 1, requested type "simple"
  6910                           ; Number of cases is 9, Range of values is 0 to 8
  6911                           ; switch strategies available:
  6912                           ; Name         Instructions Cycles
  6913                           ; simple_byte           28    15 (average)
  6914                           ;	Chosen strategy is simple_byte
  6915  001DFA  5045               	movf	??_main^0,w,c
  6916  001DFC  0A00               	xorlw	0	; case 0
  6917  001DFE  B4D8               	btfsc	status,2,c
  6918  001E00  EF24  F00D         	goto	l7025
  6919  001E04  0A01               	xorlw	1	; case 1
  6920  001E06  B4D8               	btfsc	status,2,c
  6921  001E08  EFCE  F00D         	goto	l7029
  6922  001E0C  0A03               	xorlw	3	; case 2
  6923  001E0E  B4D8               	btfsc	status,2,c
  6924  001E10  EFD7  F00D         	goto	l7033
  6925  001E14  0A01               	xorlw	1	; case 3
  6926  001E16  B4D8               	btfsc	status,2,c
  6927  001E18  EFFA  F00D         	goto	l7043
  6928  001E1C  0A07               	xorlw	7	; case 4
  6929  001E1E  B4D8               	btfsc	status,2,c
  6930  001E20  EF7C  F00E         	goto	l7067
  6931  001E24  0A01               	xorlw	1	; case 5
  6932  001E26  B4D8               	btfsc	status,2,c
  6933  001E28  EF8B  F00E         	goto	l7071
  6934  001E2C  0A03               	xorlw	3	; case 6
  6935  001E2E  B4D8               	btfsc	status,2,c
  6936  001E30  EF9C  F00E         	goto	l7075
  6937  001E34  0A01               	xorlw	1	; case 7
  6938  001E36  B4D8               	btfsc	status,2,c
  6939  001E38  EFAB  F00E         	goto	l7079
  6940  001E3C  0A0F               	xorlw	15	; case 8
  6941  001E3E  B4D8               	btfsc	status,2,c
  6942  001E40  EFC3  F00E         	goto	l7087
  6943  001E44  EF24  F00D         	goto	l7025
  6944  001E48  EF07  F000         	goto	start
  6945  001E4C                     __end_of_main:
  6946                           	callstack 0
  6947                           
  6948 ;; *************** function _wifi_init *****************
  6949 ;; Defined at:
  6950 ;;		line 12 in file "wifi.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  br              4   21[COMRAM] long 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;		None
  6955 ;; Return value:  Size  Location     Type
  6956 ;;                  1    wreg      void 
  6957 ;; Registers used:
  6958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6964 ;;      Params:         4       0       0       0       0       0       0       0       0
  6965 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6967 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6968 ;;Total ram usage:        4 bytes
  6969 ;; Hardware stack levels used:    1
  6970 ;; Hardware stack levels required when called:    4
  6971 ;; This function calls:
  6972 ;;		_initEUSART
  6973 ;; This function is called by:
  6974 ;;		_main
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text1
  6979  003A36                     __ptext1:
  6980                           	callstack 0
  6981  003A36                     _wifi_init:
  6982                           	callstack 26
  6983  003A36                     
  6984                           ;wifi.c: 12: void wifi_init( long br);wifi.c: 13: {;wifi.c: 14:     eusart.init(br);
  6985  003A36  C03C  F034         	movff	wifi_init@br,initEUSART@baudRate
  6986  003A3A  C03D  F035         	movff	wifi_init@br+1,initEUSART@baudRate+1
  6987  003A3E  C03E  F036         	movff	wifi_init@br+2,initEUSART@baudRate+2
  6988  003A42  C03F  F037         	movff	wifi_init@br+3,initEUSART@baudRate+3
  6989  003A46  EE20  F053         	lfsr	2,_eusart+12
  6990  003A4A  D802               	call	u4398
  6991  003A4C  EF32  F01D         	goto	u4399
  6992  003A50                     u4398:
  6993  003A50  0005               	push	
  6994  003A52  6EFA               	movwf	pclath,c
  6995  003A54  50DE               	movf	postinc2,w,c
  6996  003A56  6EFD               	movwf	tosl,c
  6997  003A58  50DE               	movf	postinc2,w,c
  6998  003A5A  6EFE               	movwf	tosh,c
  6999  003A5C  50F8               	movf	tblptru,w,c
  7000  003A5E  6EFF               	movwf	tosu,c
  7001  003A60  50FA               	movf	pclath,w,c
  7002  003A62  0012               	return		;indir
  7003  003A64                     u4399:
  7004  003A64  0012               	return		;funcret
  7005  003A66                     __end_of_wifi_init:
  7006                           	callstack 0
  7007                           
  7008 ;; *************** function _initEUSART *****************
  7009 ;; Defined at:
  7010 ;;		line 137 in file "eusart.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  baudRate        4   13[COMRAM] unsigned long 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;		None
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  1    wreg      void 
  7017 ;; Registers used:
  7018 ;;		wreg, status,2, status,0, cstack
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7024 ;;      Params:         4       0       0       0       0       0       0       0       0
  7025 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7026 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7027 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7028 ;;Total ram usage:        8 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    3
  7031 ;; This function calls:
  7032 ;;		___lldiv
  7033 ;; This function is called by:
  7034 ;;		_wifi_init
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text2
  7039  0032B0                     __ptext2:
  7040                           	callstack 0
  7041  0032B0                     _initEUSART:
  7042                           	callstack 26
  7043  0032B0                     
  7044                           ;eusart.c: 137: void initEUSART( unsigned long baudRate );eusart.c: 138: {;eusart.c: 139
      +                          :     TRISCbits.TRISC6 = 1;
  7045  0032B0  8C94               	bsf	148,6,c	;volatile
  7046                           
  7047                           ;eusart.c: 140:     TRISCbits.TRISC7 = 1;
  7048  0032B2  8E94               	bsf	148,7,c	;volatile
  7049                           
  7050                           ;eusart.c: 142:     INTCONbits.GIE = 0;
  7051  0032B4  9EF2               	bcf	242,7,c	;volatile
  7052  0032B6                     
  7053                           ;eusart.c: 145:     SPBRbits.u16 = (unsigned int)( (20000000 / (baudRate<<2)) - 1);
  7054  0032B6  0E00               	movlw	0
  7055  0032B8  6E27               	movwf	___lldiv@dividend^0,c
  7056  0032BA  0E2D               	movlw	45
  7057  0032BC  6E28               	movwf	(___lldiv@dividend+1)^0,c
  7058  0032BE  0E31               	movlw	49
  7059  0032C0  6E29               	movwf	(___lldiv@dividend+2)^0,c
  7060  0032C2  0E01               	movlw	1
  7061  0032C4  6E2A               	movwf	(___lldiv@dividend+3)^0,c
  7062  0032C6  C034  F038         	movff	initEUSART@baudRate,??_initEUSART
  7063  0032CA  C035  F039         	movff	initEUSART@baudRate+1,??_initEUSART+1
  7064  0032CE  C036  F03A         	movff	initEUSART@baudRate+2,??_initEUSART+2
  7065  0032D2  C037  F03B         	movff	initEUSART@baudRate+3,??_initEUSART+3
  7066  0032D6  0E02               	movlw	2
  7067  0032D8                     u3755:
  7068  0032D8  90D8               	bcf	status,0,c
  7069  0032DA  3638               	rlcf	??_initEUSART^0,f,c
  7070  0032DC  3639               	rlcf	(??_initEUSART+1)^0,f,c
  7071  0032DE  363A               	rlcf	(??_initEUSART+2)^0,f,c
  7072  0032E0  363B               	rlcf	(??_initEUSART+3)^0,f,c
  7073  0032E2  2EE8               	decfsz	wreg,f,c
  7074  0032E4  EF6C  F019         	goto	u3755
  7075  0032E8  C038  F02B         	movff	??_initEUSART,___lldiv@divisor
  7076  0032EC  C039  F02C         	movff	??_initEUSART+1,___lldiv@divisor+1
  7077  0032F0  C03A  F02D         	movff	??_initEUSART+2,___lldiv@divisor+2
  7078  0032F4  C03B  F02E         	movff	??_initEUSART+3,___lldiv@divisor+3
  7079  0032F8  EC1C  F017         	call	___lldiv	;wreg free
  7080  0032FC  0EFF               	movlw	255
  7081  0032FE  2427               	addwf	?___lldiv^0,w,c
  7082  003300  6EAF               	movwf	175,c	;volatile
  7083  003302  0EFF               	movlw	255
  7084  003304  2028               	addwfc	(?___lldiv+1)^0,w,c
  7085  003306  6EB0               	movwf	176,c	;volatile
  7086  003308                     
  7087                           ;eusart.c: 149:     TXSTAbits.SYNC = 0;
  7088  003308  98AC               	bcf	172,4,c	;volatile
  7089  00330A                     
  7090                           ;eusart.c: 150:     BAUDCONbits.BRG16 = 1;
  7091  00330A  86B8               	bsf	184,3,c	;volatile
  7092  00330C                     
  7093                           ;eusart.c: 151:     TXSTAbits.BRGH = 1;
  7094  00330C  84AC               	bsf	172,2,c	;volatile
  7095  00330E                     
  7096                           ;eusart.c: 153:     RCSTAbits.SPEN = 1;
  7097  00330E  8EAB               	bsf	171,7,c	;volatile
  7098  003310                     
  7099                           ;eusart.c: 154:     TXSTAbits.TXEN = 1;
  7100  003310  8AAC               	bsf	172,5,c	;volatile
  7101  003312                     
  7102                           ;eusart.c: 155:     RCSTAbits.CREN = 1;
  7103  003312  88AB               	bsf	171,4,c	;volatile
  7104  003314                     
  7105                           ;eusart.c: 157:     PIE1bits.RCIE = 1;
  7106  003314  8A9D               	bsf	157,5,c	;volatile
  7107  003316                     
  7108                           ;eusart.c: 158:     PIE1bits.TXIE = 0;
  7109  003316  989D               	bcf	157,4,c	;volatile
  7110  003318                     
  7111                           ;eusart.c: 159:     INTCONbits.PEIE = 1;
  7112  003318  8CF2               	bsf	242,6,c	;volatile
  7113  00331A                     
  7114                           ;eusart.c: 160:     INTCONbits.GIE = 1;
  7115  00331A  8EF2               	bsf	242,7,c	;volatile
  7116  00331C  0012               	return		;funcret
  7117  00331E                     __end_of_initEUSART:
  7118                           	callstack 0
  7119                           
  7120 ;; *************** function _timer1_init *****************
  7121 ;; Defined at:
  7122 ;;		line 16 in file "timer1.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7139 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7140 ;;Total ram usage:        0 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    2
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_main
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text3
  7151  003C4E                     __ptext3:
  7152                           	callstack 0
  7153  003C4E                     _timer1_init:
  7154                           	callstack 28
  7155  003C4E                     
  7156                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  7157  003C4E  92CD               	bcf	205,1,c	;volatile
  7158  003C50                     
  7159                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  7160  003C50  0E30               	movlw	48
  7161  003C52  12CD               	iorwf	205,f,c	;volatile
  7162  003C54                     
  7163                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  7164  003C54  84CD               	bsf	205,2,c	;volatile
  7165                           
  7166                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  7167  003C56  0EFD               	movlw	253
  7168  003C58  6ECF               	movwf	207,c	;volatile
  7169                           
  7170                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  7171  003C5A  0E8F               	movlw	143
  7172  003C5C  6ECE               	movwf	206,c	;volatile
  7173  003C5E                     
  7174                           ;timer1.c: 23:     T1CONbits.T1RUN = 0;
  7175  003C5E  9CCD               	bcf	205,6,c	;volatile
  7176  003C60                     
  7177                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  7178  003C60  809D               	bsf	157,0,c	;volatile
  7179  003C62                     
  7180                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  7181  003C62  8CF2               	bsf	242,6,c	;volatile
  7182  003C64                     
  7183                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  7184  003C64  8EF2               	bsf	242,7,c	;volatile
  7185  003C66  0012               	return		;funcret
  7186  003C68                     __end_of_timer1_init:
  7187                           	callstack 0
  7188                           
  7189 ;; *************** function _teclado_init *****************
  7190 ;; Defined at:
  7191 ;;		line 29 in file "teclado.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;		None
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  1    wreg      void 
  7198 ;; Registers used:
  7199 ;;		wreg, status,2
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7205 ;;      Params:         0       0       0       0       0       0       0       0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7208 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7209 ;;Total ram usage:        0 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    2
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_main
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text4
  7220  003D8C                     __ptext4:
  7221                           	callstack 0
  7222  003D8C                     _teclado_init:
  7223                           	callstack 28
  7224  003D8C                     
  7225                           ;teclado.c: 31:     PORTD = 0x00;
  7226  003D8C  0E00               	movlw	0
  7227  003D8E  6E83               	movwf	131,c	;volatile
  7228                           
  7229                           ;teclado.c: 32:     TRISD = 0xF0;
  7230  003D90  0EF0               	movlw	240
  7231  003D92  6E95               	movwf	149,c	;volatile
  7232  003D94  0012               	return		;funcret
  7233  003D96                     __end_of_teclado_init:
  7234                           	callstack 0
  7235                           
  7236 ;; *************** function _teclado_borda *****************
  7237 ;; Defined at:
  7238 ;;		line 92 in file "teclado.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;		None
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  tecla           1    6[COMRAM] unsigned char 
  7243 ;;  aux             1    5[COMRAM] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      unsigned char 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7253 ;;      Params:         0       0       0       0       0       0       0       0       0
  7254 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7256 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7257 ;;Total ram usage:        2 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    3
  7260 ;; This function calls:
  7261 ;;		_teclado_scan
  7262 ;; This function is called by:
  7263 ;;		_main
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text5
  7268  0039CA                     __ptext5:
  7269                           	callstack 0
  7270  0039CA                     _teclado_borda:
  7271                           	callstack 27
  7272  0039CA                     
  7273                           ;teclado.c: 95:     char aux = 0;
  7274  0039CA  0E00               	movlw	0
  7275  0039CC  6E2C               	movwf	teclado_borda@aux^0,c
  7276  0039CE                     
  7277                           ;teclado.c: 97:     tecla = teclado_scan();
  7278  0039CE  EC75  F016         	call	_teclado_scan	;wreg free
  7279  0039D2  6E2D               	movwf	teclado_borda@tecla^0,c
  7280  0039D4                     
  7281                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  7282  0039D4  502D               	movf	teclado_borda@tecla^0,w,c
  7283  0039D6  B4D8               	btfsc	status,2,c
  7284  0039D8  EFF0  F01C         	goto	u3851
  7285  0039DC  EFF2  F01C         	goto	u3850
  7286  0039E0                     u3851:
  7287  0039E0  EFFC  F01C         	goto	l1029
  7288  0039E4                     u3850:
  7289  0039E4  5011               	movf	_teclaAnterior^0,w,c
  7290  0039E6  A4D8               	btfss	status,2,c
  7291  0039E8  EFF8  F01C         	goto	u3861
  7292  0039EC  EFFA  F01C         	goto	u3860
  7293  0039F0                     u3861:
  7294  0039F0  EFFC  F01C         	goto	l1029
  7295  0039F4                     u3860:
  7296  0039F4                     
  7297                           ;teclado.c: 100:         aux = tecla;
  7298  0039F4  C02D  F02C         	movff	teclado_borda@tecla,teclado_borda@aux
  7299  0039F8                     l1029:
  7300                           
  7301                           ;teclado.c: 102:     teclaAnterior = tecla;
  7302  0039F8  C02D  F011         	movff	teclado_borda@tecla,_teclaAnterior
  7303  0039FC                     
  7304                           ;teclado.c: 104:     return(aux);
  7305  0039FC  502C               	movf	teclado_borda@aux^0,w,c
  7306  0039FE  0012               	return		;funcret
  7307  003A00                     __end_of_teclado_borda:
  7308                           	callstack 0
  7309                           
  7310 ;; *************** function _teclado_scan *****************
  7311 ;; Defined at:
  7312 ;;		line 55 in file "teclado.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;		None
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  c               1    4[COMRAM] unsigned char 
  7317 ;;  l               1    3[COMRAM] unsigned char 
  7318 ;;  tecla           1    2[COMRAM] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      unsigned char 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7328 ;;      Params:         0       0       0       0       0       0       0       0       0
  7329 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7330 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7331 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7332 ;;Total ram usage:        5 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    2
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_teclado_borda
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text6
  7343  002CEA                     __ptext6:
  7344                           	callstack 0
  7345  002CEA                     _teclado_scan:
  7346                           	callstack 27
  7347  002CEA                     
  7348                           ;teclado.c: 57:    char tecla = 0;
  7349  002CEA  0E00               	movlw	0
  7350  002CEC  6E29               	movwf	teclado_scan@tecla^0,c
  7351                           
  7352                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  7353  002CEE  0E00               	movlw	0
  7354  002CF0  6E2A               	movwf	teclado_scan@l^0,c
  7355  002CF2                     l5477:
  7356  002CF2  0E03               	movlw	3
  7357  002CF4  642A               	cpfsgt	teclado_scan@l^0,c
  7358  002CF6  EF7F  F016         	goto	u3701
  7359  002CFA  EF81  F016         	goto	u3700
  7360  002CFE                     u3701:
  7361  002CFE  EF83  F016         	goto	l5481
  7362  002D02                     u3700:
  7363  002D02  EFC7  F016         	goto	l5501
  7364  002D06                     l5481:
  7365                           
  7366                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  7367  002D06  C02A  F027         	movff	teclado_scan@l,??_teclado_scan
  7368  002D0A  0E01               	movlw	1
  7369  002D0C  6E28               	movwf	(??_teclado_scan+1)^0,c
  7370  002D0E  2A27               	incf	??_teclado_scan^0,f,c
  7371  002D10  EF8C  F016         	goto	u3714
  7372  002D14                     u3715:
  7373  002D14  90D8               	bcf	status,0,c
  7374  002D16  3628               	rlcf	(??_teclado_scan+1)^0,f,c
  7375  002D18                     u3714:
  7376  002D18  2E27               	decfsz	??_teclado_scan^0,f,c
  7377  002D1A  EF8A  F016         	goto	u3715
  7378  002D1E  5028               	movf	(??_teclado_scan+1)^0,w,c
  7379  002D20  6E83               	movwf	131,c	;volatile
  7380  002D22                     
  7381                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  7382  002D22  0E00               	movlw	0
  7383  002D24  6E2B               	movwf	teclado_scan@c^0,c
  7384  002D26                     l5489:
  7385                           
  7386                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  7387  002D26  C02B  F027         	movff	teclado_scan@c,??_teclado_scan
  7388  002D2A  0E10               	movlw	16
  7389  002D2C  6E28               	movwf	(??_teclado_scan+1)^0,c
  7390  002D2E  2A27               	incf	??_teclado_scan^0,f,c
  7391  002D30  EF9C  F016         	goto	u3724
  7392  002D34                     u3725:
  7393  002D34  90D8               	bcf	status,0,c
  7394  002D36  3628               	rlcf	(??_teclado_scan+1)^0,f,c
  7395  002D38                     u3724:
  7396  002D38  2E27               	decfsz	??_teclado_scan^0,f,c
  7397  002D3A  EF9A  F016         	goto	u3725
  7398  002D3E  5028               	movf	(??_teclado_scan+1)^0,w,c
  7399  002D40  1483               	andwf	131,w,c	;volatile
  7400  002D42  0900               	iorlw	0
  7401  002D44  B4D8               	btfsc	status,2,c
  7402  002D46  EFA7  F016         	goto	u3731
  7403  002D4A  EFA9  F016         	goto	u3730
  7404  002D4E                     u3731:
  7405  002D4E  EFBB  F016         	goto	l5493
  7406  002D52                     u3730:
  7407  002D52                     
  7408                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  7409  002D52  502A               	movf	teclado_scan@l^0,w,c
  7410  002D54  0D04               	mullw	4
  7411  002D56  0ED1               	movlw	low _teclas
  7412  002D58  6E27               	movwf	??_teclado_scan^0,c
  7413  002D5A  0E00               	movlw	high _teclas
  7414  002D5C  6E28               	movwf	(??_teclado_scan+1)^0,c
  7415  002D5E  50F3               	movf	243,w,c
  7416  002D60  2627               	addwf	??_teclado_scan^0,f,c
  7417  002D62  50F4               	movf	244,w,c
  7418  002D64  2228               	addwfc	(??_teclado_scan+1)^0,f,c
  7419  002D66  502B               	movf	teclado_scan@c^0,w,c
  7420  002D68  2427               	addwf	??_teclado_scan^0,w,c
  7421  002D6A  6ED9               	movwf	fsr2l,c
  7422  002D6C  0E00               	movlw	0
  7423  002D6E  2028               	addwfc	(??_teclado_scan+1)^0,w,c
  7424  002D70  6EDA               	movwf	fsr2h,c
  7425  002D72  50DF               	movf	indf2,w,c
  7426  002D74  6E29               	movwf	teclado_scan@tecla^0,c
  7427  002D76                     l5493:
  7428                           
  7429                           ;teclado.c: 85:         }
  7430  002D76  2A2B               	incf	teclado_scan@c^0,f,c
  7431  002D78  0E03               	movlw	3
  7432  002D7A  642B               	cpfsgt	teclado_scan@c^0,c
  7433  002D7C  EFC2  F016         	goto	u3741
  7434  002D80  EFC4  F016         	goto	u3740
  7435  002D84                     u3741:
  7436  002D84  EF93  F016         	goto	l5489
  7437  002D88                     u3740:
  7438  002D88                     
  7439                           ;teclado.c: 86:     }
  7440  002D88  2A2A               	incf	teclado_scan@l^0,f,c
  7441  002D8A  EF79  F016         	goto	l5477
  7442  002D8E                     l5501:
  7443                           
  7444                           ;teclado.c: 87:     return( tecla );
  7445  002D8E  5029               	movf	teclado_scan@tecla^0,w,c
  7446  002D90  0012               	return		;funcret
  7447  002D92                     __end_of_teclado_scan:
  7448                           	callstack 0
  7449                           
  7450 ;; *************** function _statusT1 *****************
  7451 ;; Defined at:
  7452 ;;		line 38 in file "timer1.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;		None
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  4    0[COMRAM] unsigned long 
  7459 ;; Registers used:
  7460 ;;		None
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7466 ;;      Params:         4       0       0       0       0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7469 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7470 ;;Total ram usage:        4 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    2
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_main
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text7
  7481  003D38                     __ptext7:
  7482                           	callstack 0
  7483  003D38                     _statusT1:
  7484                           	callstack 28
  7485  003D38                     
  7486                           ;timer1.c: 40:     return( t1cont );
  7487  003D38  C001  F027         	movff	_t1cont,?_statusT1
  7488  003D3C  C002  F028         	movff	_t1cont+1,?_statusT1+1
  7489  003D40  C003  F029         	movff	_t1cont+2,?_statusT1+2
  7490  003D44  C004  F02A         	movff	_t1cont+3,?_statusT1+3
  7491  003D48  0012               	return		;funcret
  7492  003D4A                     __end_of_statusT1:
  7493                           	callstack 0
  7494                           
  7495 ;; *************** function _set_passo *****************
  7496 ;; Defined at:
  7497 ;;		line 53 in file "atuadores.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  passo           1    wreg     unsigned char 
  7500 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7501 ;;		 -> main@vetorOut(1), 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  passo           1    4[COMRAM] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      void 
  7506 ;; Registers used:
  7507 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7513 ;;      Params:         2       0       0       0       0       0       0       0       0
  7514 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7515 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7516 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7517 ;;Total ram usage:        5 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    2
  7520 ;; This function calls:
  7521 ;;		Nothing
  7522 ;; This function is called by:
  7523 ;;		_main
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text8
  7528  002A94                     __ptext8:
  7529                           	callstack 0
  7530  002A94                     _set_passo:
  7531                           	callstack 28
  7532                           
  7533                           ;incstack = 0
  7534                           ;set_passo@passo stored from wreg
  7535  002A94  6E2B               	movwf	set_passo@passo^0,c
  7536  002A96                     
  7537                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  7538  002A96  EF8D  F015         	goto	l6035
  7539  002A9A                     l6017:
  7540  002A9A  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7541  002A9E  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7542  002AA2  0E00               	movlw	0
  7543  002AA4  80DB               	bsf	plusw2,0,c
  7544  002AA6  EFBA  F015         	goto	l459
  7545  002AAA                     l6019:
  7546  002AAA  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7547  002AAE  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7548  002AB2  0EFE               	movlw	254
  7549  002AB4  16DF               	andwf	indf2,f,c
  7550  002AB6  EFBA  F015         	goto	l459
  7551  002ABA                     l6021:
  7552  002ABA  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7553  002ABE  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7554  002AC2  0E00               	movlw	0
  7555  002AC4  82DB               	bsf	plusw2,1,c
  7556  002AC6  EFBA  F015         	goto	l459
  7557  002ACA                     l6023:
  7558  002ACA  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7559  002ACE  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7560  002AD2  0EFD               	movlw	253
  7561  002AD4  16DF               	andwf	indf2,f,c
  7562  002AD6  EFBA  F015         	goto	l459
  7563  002ADA                     l6025:
  7564  002ADA  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7565  002ADE  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7566  002AE2  0E00               	movlw	0
  7567  002AE4  84DB               	bsf	plusw2,2,c
  7568  002AE6  EFBA  F015         	goto	l459
  7569  002AEA                     l6027:
  7570  002AEA  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7571  002AEE  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7572  002AF2  0EFB               	movlw	251
  7573  002AF4  16DF               	andwf	indf2,f,c
  7574  002AF6  EFBA  F015         	goto	l459
  7575  002AFA                     l6029:
  7576  002AFA  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7577  002AFE  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7578  002B02  0E00               	movlw	0
  7579  002B04  86DB               	bsf	plusw2,3,c
  7580  002B06  EFBA  F015         	goto	l459
  7581  002B0A                     l6031:
  7582  002B0A  C027  FFD9         	movff	set_passo@ptr,fsr2l
  7583  002B0E  C028  FFDA         	movff	set_passo@ptr+1,fsr2h
  7584  002B12  0EF7               	movlw	247
  7585  002B14  16DF               	andwf	indf2,f,c
  7586  002B16  EFBA  F015         	goto	l459
  7587  002B1A                     l6035:
  7588  002B1A  502B               	movf	set_passo@passo^0,w,c
  7589  002B1C  6E29               	movwf	??_set_passo^0,c
  7590  002B1E  6A2A               	clrf	(??_set_passo+1)^0,c
  7591                           
  7592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7593                           ; Switch size 1, requested type "simple"
  7594                           ; Number of cases is 1, Range of values is 0 to 0
  7595                           ; switch strategies available:
  7596                           ; Name         Instructions Cycles
  7597                           ; simple_byte            4     3 (average)
  7598                           ;	Chosen strategy is simple_byte
  7599  002B20  502A               	movf	(??_set_passo+1)^0,w,c
  7600  002B22  0A00               	xorlw	0	; case 0
  7601  002B24  B4D8               	btfsc	status,2,c
  7602  002B26  EF97  F015         	goto	l7943
  7603  002B2A  EFBA  F015         	goto	l459
  7604  002B2E                     l7943:
  7605                           
  7606                           ; Switch size 1, requested type "simple"
  7607                           ; Number of cases is 8, Range of values is 65 to 100
  7608                           ; switch strategies available:
  7609                           ; Name         Instructions Cycles
  7610                           ; simple_byte           25    13 (average)
  7611                           ;	Chosen strategy is simple_byte
  7612  002B2E  5029               	movf	??_set_passo^0,w,c
  7613  002B30  0A41               	xorlw	65	; case 65
  7614  002B32  B4D8               	btfsc	status,2,c
  7615  002B34  EF4D  F015         	goto	l6017
  7616  002B38  0A03               	xorlw	3	; case 66
  7617  002B3A  B4D8               	btfsc	status,2,c
  7618  002B3C  EF5D  F015         	goto	l6021
  7619  002B40  0A01               	xorlw	1	; case 67
  7620  002B42  B4D8               	btfsc	status,2,c
  7621  002B44  EF6D  F015         	goto	l6025
  7622  002B48  0A07               	xorlw	7	; case 68
  7623  002B4A  B4D8               	btfsc	status,2,c
  7624  002B4C  EF7D  F015         	goto	l6029
  7625  002B50  0A25               	xorlw	37	; case 97
  7626  002B52  B4D8               	btfsc	status,2,c
  7627  002B54  EF55  F015         	goto	l6019
  7628  002B58  0A03               	xorlw	3	; case 98
  7629  002B5A  B4D8               	btfsc	status,2,c
  7630  002B5C  EF65  F015         	goto	l6023
  7631  002B60  0A01               	xorlw	1	; case 99
  7632  002B62  B4D8               	btfsc	status,2,c
  7633  002B64  EF75  F015         	goto	l6027
  7634  002B68  0A07               	xorlw	7	; case 100
  7635  002B6A  B4D8               	btfsc	status,2,c
  7636  002B6C  EF85  F015         	goto	l6031
  7637  002B70  EFBA  F015         	goto	l459
  7638  002B74                     l459:
  7639  002B74  0012               	return		;funcret
  7640  002B76                     __end_of_set_passo:
  7641                           	callstack 0
  7642                           
  7643 ;; *************** function _setT1 *****************
  7644 ;; Defined at:
  7645 ;;		line 31 in file "timer1.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  c               4    6[COMRAM] unsigned long 
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      void 
  7652 ;; Registers used:
  7653 ;;		None
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7659 ;;      Params:         4       0       0       0       0       0       0       0       0
  7660 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7662 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7663 ;;Total ram usage:        4 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    2
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_main
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text9
  7674  003CC0                     __ptext9:
  7675                           	callstack 0
  7676  003CC0                     _setT1:
  7677                           	callstack 28
  7678  003CC0                     
  7679                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  7680  003CC0  C02D  F001         	movff	setT1@c,_t1cont
  7681  003CC4  C02E  F002         	movff	setT1@c+1,_t1cont+1
  7682  003CC8  C02F  F003         	movff	setT1@c+2,_t1cont+2
  7683  003CCC  C030  F004         	movff	setT1@c+3,_t1cont+3
  7684                           
  7685                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  7686  003CD0  80CD               	bsf	205,0,c	;volatile
  7687  003CD2  0012               	return		;funcret
  7688  003CD4                     __end_of_setT1:
  7689                           	callstack 0
  7690                           
  7691 ;; *************** function _serialIOscan *****************
  7692 ;; Defined at:
  7693 ;;		line 76 in file "serialIO.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;		None
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  i               1    6[COMRAM] unsigned char 
  7698 ;;  j               1    5[COMRAM] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      void 
  7701 ;; Registers used:
  7702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7708 ;;      Params:         0       0       0       0       0       0       0       0       0
  7709 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7710 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7711 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7712 ;;Total ram usage:        4 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    3
  7715 ;; This function calls:
  7716 ;;		_serialIObyteShift
  7717 ;;		_serialIOload
  7718 ;; This function is called by:
  7719 ;;		_main
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text10
  7724  00355A                     __ptext10:
  7725                           	callstack 0
  7726  00355A                     _serialIOscan:
  7727                           	callstack 27
  7728  00355A                     
  7729                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  7730  00355A  0412               	decf	_lenSerialIO^0,w,c
  7731  00355C  6E2C               	movwf	serialIOscan@j^0,c
  7732  00355E                     
  7733                           ;serialIO.c: 80:     serialIOload();
  7734  00355E  ECEC  F01E         	call	_serialIOload	;wreg free
  7735  003562                     
  7736                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  7737  003562  0E00               	movlw	0
  7738  003564  6E2D               	movwf	serialIOscan@i^0,c
  7739  003566  EFCD  F01A         	goto	l6007
  7740  00356A                     l6003:
  7741                           
  7742                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  7743  00356A  502D               	movf	serialIOscan@i^0,w,c
  7744  00356C  240B               	addwf	_ptrSerialIn^0,w,c
  7745  00356E  6ED9               	movwf	fsr2l,c
  7746  003570  0E00               	movlw	0
  7747  003572  200C               	addwfc	(_ptrSerialIn+1)^0,w,c
  7748  003574  6EDA               	movwf	fsr2h,c
  7749  003576  502C               	movf	serialIOscan@j^0,w,c
  7750  003578  2409               	addwf	_ptrSerialOut^0,w,c
  7751  00357A  6E2A               	movwf	??_serialIOscan^0,c
  7752  00357C  0E00               	movlw	0
  7753  00357E  200A               	addwfc	(_ptrSerialOut+1)^0,w,c
  7754  003580  6E2B               	movwf	(??_serialIOscan+1)^0,c
  7755  003582  502D               	movf	serialIOscan@i^0,w,c
  7756  003584  5C2A               	subwf	??_serialIOscan^0,w,c
  7757  003586  6EE1               	movwf	fsr1l,c
  7758  003588  502B               	movf	(??_serialIOscan+1)^0,w,c
  7759  00358A  A0D8               	btfss	status,0,c
  7760  00358C  042B               	decf	(??_serialIOscan+1)^0,w,c
  7761  00358E  6EE2               	movwf	fsr1h,c
  7762  003590  50E7               	movf	indf1,w,c
  7763  003592  EC80  F01A         	call	_serialIObyteShift
  7764  003596  6EDF               	movwf	indf2,c
  7765  003598                     
  7766                           ;serialIO.c: 84:     }
  7767  003598  2A2D               	incf	serialIOscan@i^0,f,c
  7768  00359A                     l6007:
  7769  00359A  5012               	movf	_lenSerialIO^0,w,c
  7770  00359C  5C2D               	subwf	serialIOscan@i^0,w,c
  7771  00359E  A0D8               	btfss	status,0,c
  7772  0035A0  EFD4  F01A         	goto	u4321
  7773  0035A4  EFD6  F01A         	goto	u4320
  7774  0035A8                     u4321:
  7775  0035A8  EFB5  F01A         	goto	l6003
  7776  0035AC                     u4320:
  7777  0035AC                     
  7778                           ;serialIO.c: 85:     serialIOload();
  7779  0035AC  ECEC  F01E         	call	_serialIOload	;wreg free
  7780  0035B0  0012               	return		;funcret
  7781  0035B2                     __end_of_serialIOscan:
  7782                           	callstack 0
  7783                           
  7784 ;; *************** function _serialIOload *****************
  7785 ;; Defined at:
  7786 ;;		line 45 in file "serialIO.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;		None
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;		None
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  1    wreg      void 
  7793 ;; Registers used:
  7794 ;;		None
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7800 ;;      Params:         0       0       0       0       0       0       0       0       0
  7801 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7803 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7804 ;;Total ram usage:        0 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    2
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		_serialIOscan
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text11
  7815  003DD8                     __ptext11:
  7816                           	callstack 0
  7817  003DD8                     _serialIOload:
  7818                           	callstack 27
  7819  003DD8                     
  7820                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  7821  003DD8  9680               	bcf	128,3,c	;volatile
  7822                           
  7823                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  7824  003DDA  8680               	bsf	128,3,c	;volatile
  7825  003DDC  0012               	return		;funcret
  7826  003DDE                     __end_of_serialIOload:
  7827                           	callstack 0
  7828                           
  7829 ;; *************** function _serialIObyteShift *****************
  7830 ;; Defined at:
  7831 ;;		line 50 in file "serialIO.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;  dataIn          1    wreg     unsigned char 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  dataIn          1    0[COMRAM] unsigned char 
  7836 ;;  dataBit         1    2[COMRAM] unsigned char 
  7837 ;;  dataOut         1    1[COMRAM] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      unsigned char 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7847 ;;      Params:         0       0       0       0       0       0       0       0       0
  7848 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7850 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7851 ;;Total ram usage:        3 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    2
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_serialIOscan
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text12
  7862  003500                     __ptext12:
  7863                           	callstack 0
  7864  003500                     _serialIObyteShift:
  7865                           	callstack 27
  7866                           
  7867                           ;incstack = 0
  7868                           ;serialIObyteShift@dataIn stored from wreg
  7869  003500  6E27               	movwf	serialIObyteShift@dataIn^0,c
  7870  003502                     
  7871                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  7872  003502  0E80               	movlw	128
  7873  003504  6E29               	movwf	serialIObyteShift@dataBit^0,c
  7874                           
  7875                           ;serialIO.c: 56:     dataOut = 0;
  7876  003506  0E00               	movlw	0
  7877  003508  6E28               	movwf	serialIObyteShift@dataOut^0,c
  7878                           
  7879                           ;serialIO.c: 58:     while( dataBit )
  7880  00350A  EFA2  F01A         	goto	l5469
  7881  00350E                     l926:
  7882                           
  7883                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  7884  00350E  9480               	bcf	128,2,c	;volatile
  7885  003510                     
  7886                           ;serialIO.c: 61:         if( dataIn & dataBit )
  7887  003510  5027               	movf	serialIObyteShift@dataIn^0,w,c
  7888  003512  1429               	andwf	serialIObyteShift@dataBit^0,w,c
  7889  003514  0900               	iorlw	0
  7890  003516  B4D8               	btfsc	status,2,c
  7891  003518  EF90  F01A         	goto	u3671
  7892  00351C  EF92  F01A         	goto	u3670
  7893  003520                     u3671:
  7894  003520  EF95  F01A         	goto	l927
  7895  003524                     u3670:
  7896  003524                     
  7897                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  7898  003524  8080               	bsf	128,0,c	;volatile
  7899  003526  EF96  F01A         	goto	l928
  7900  00352A                     l927:
  7901                           
  7902                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  7903  00352A  9080               	bcf	128,0,c	;volatile
  7904  00352C                     l928:
  7905                           
  7906                           ;serialIO.c: 66:         if( SERIALIO.IN )
  7907  00352C  A280               	btfss	128,1,c	;volatile
  7908  00352E  EF9B  F01A         	goto	u3681
  7909  003532  EF9D  F01A         	goto	u3680
  7910  003536                     u3681:
  7911  003536  EF9F  F01A         	goto	l5467
  7912  00353A                     u3680:
  7913  00353A                     
  7914                           ;serialIO.c: 67:             dataOut |= dataBit;
  7915  00353A  5029               	movf	serialIObyteShift@dataBit^0,w,c
  7916  00353C  1228               	iorwf	serialIObyteShift@dataOut^0,f,c
  7917  00353E                     l5467:
  7918                           
  7919                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  7920  00353E  8480               	bsf	128,2,c	;volatile
  7921                           
  7922                           ;serialIO.c: 69:         dataBit >>= 1;
  7923  003540  90D8               	bcf	status,0,c
  7924  003542  3229               	rrcf	serialIObyteShift@dataBit^0,f,c
  7925  003544                     l5469:
  7926                           
  7927                           ;serialIO.c: 58:     while( dataBit )
  7928  003544  5029               	movf	serialIObyteShift@dataBit^0,w,c
  7929  003546  A4D8               	btfss	status,2,c
  7930  003548  EFA8  F01A         	goto	u3691
  7931  00354C  EFAA  F01A         	goto	u3690
  7932  003550                     u3691:
  7933  003550  EF87  F01A         	goto	l926
  7934  003554                     u3690:
  7935  003554                     
  7936                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  7937  003554  9480               	bcf	128,2,c	;volatile
  7938  003556                     
  7939                           ;serialIO.c: 72:     return( dataOut );
  7940  003556  5028               	movf	serialIObyteShift@dataOut^0,w,c
  7941  003558  0012               	return		;funcret
  7942  00355A                     __end_of_serialIObyteShift:
  7943                           	callstack 0
  7944                           
  7945 ;; *************** function _salvar_receita *****************
  7946 ;; Defined at:
  7947 ;;		line 46 in file "eeprom.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;  adrs            1    wreg     unsigned char 
  7950 ;;  data            2    6[COMRAM] PTR unsigned char 
  7951 ;;		 -> fila(18), 
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;  adrs            1   10[COMRAM] unsigned char 
  7954 ;;  i               1   11[COMRAM] unsigned char 
  7955 ;;  aux             2    8[COMRAM] int 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      void 
  7958 ;; Registers used:
  7959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7965 ;;      Params:         2       0       0       0       0       0       0       0       0
  7966 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7967 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7968 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7969 ;;Total ram usage:        6 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    3
  7972 ;; This function calls:
  7973 ;;		_EEPROM_write
  7974 ;;		_end_receita
  7975 ;; This function is called by:
  7976 ;;		_main
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text13
  7981  003820                     __ptext13:
  7982                           	callstack 0
  7983  003820                     _salvar_receita:
  7984                           	callstack 27
  7985                           
  7986                           ;incstack = 0
  7987                           ;salvar_receita@adrs stored from wreg
  7988  003820  6E31               	movwf	salvar_receita@adrs^0,c
  7989  003822                     
  7990                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  7991  003822  C031  F027         	movff	salvar_receita@adrs,end_receita@x
  7992  003826  6A28               	clrf	(end_receita@x+1)^0,c
  7993  003828  ECE4  F01D         	call	_end_receita	;wreg free
  7994  00382C  C027  F02F         	movff	?_end_receita,salvar_receita@aux
  7995  003830  C028  F030         	movff	?_end_receita+1,salvar_receita@aux+1
  7996  003834                     
  7997                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  7998  003834  0E00               	movlw	0
  7999  003836  6E32               	movwf	salvar_receita@i^0,c
  8000  003838                     l6143:
  8001                           
  8002                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  8003  003838  5032               	movf	salvar_receita@i^0,w,c
  8004  00383A  242D               	addwf	salvar_receita@data^0,w,c
  8005  00383C  6ED9               	movwf	fsr2l,c
  8006  00383E  0E00               	movlw	0
  8007  003840  202E               	addwfc	(salvar_receita@data+1)^0,w,c
  8008  003842  6EDA               	movwf	fsr2h,c
  8009  003844  50DF               	movf	indf2,w,c
  8010  003846  6E27               	movwf	EEPROM_write@data^0,c
  8011  003848  5032               	movf	salvar_receita@i^0,w,c
  8012  00384A  242F               	addwf	salvar_receita@aux^0,w,c
  8013  00384C  EC79  F01D         	call	_EEPROM_write
  8014  003850  2A32               	incf	salvar_receita@i^0,f,c
  8015  003852  0E0F               	movlw	15
  8016  003854  6432               	cpfsgt	salvar_receita@i^0,c
  8017  003856  EF2F  F01C         	goto	u4361
  8018  00385A  EF31  F01C         	goto	u4360
  8019  00385E                     u4361:
  8020  00385E  EF1C  F01C         	goto	l6143
  8021  003862                     u4360:
  8022  003862  0012               	return		;funcret
  8023  003864                     __end_of_salvar_receita:
  8024                           	callstack 0
  8025                           
  8026 ;; *************** function _salvar_dado *****************
  8027 ;; Defined at:
  8028 ;;		line 63 in file "eeprom.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  adrs            1    wreg     unsigned char 
  8031 ;;  col             1    6[COMRAM] unsigned char 
  8032 ;;  data            1    7[COMRAM] unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  adrs            1   10[COMRAM] unsigned char 
  8035 ;;  aux             2    8[COMRAM] int 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      void 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2, status,0, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8045 ;;      Params:         2       0       0       0       0       0       0       0       0
  8046 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8048 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8049 ;;Total ram usage:        5 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    3
  8052 ;; This function calls:
  8053 ;;		_EEPROM_write
  8054 ;;		_end_receita
  8055 ;; This function is called by:
  8056 ;;		_main
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text14
  8061  003BEC                     __ptext14:
  8062                           	callstack 0
  8063  003BEC                     _salvar_dado:
  8064                           	callstack 27
  8065                           
  8066                           ;incstack = 0
  8067                           ;salvar_dado@adrs stored from wreg
  8068  003BEC  6E31               	movwf	salvar_dado@adrs^0,c
  8069  003BEE                     
  8070                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  8071  003BEE  C031  F027         	movff	salvar_dado@adrs,end_receita@x
  8072  003BF2  6A28               	clrf	(end_receita@x+1)^0,c
  8073  003BF4  ECE4  F01D         	call	_end_receita	;wreg free
  8074  003BF8  C027  F02F         	movff	?_end_receita,salvar_dado@aux
  8075  003BFC  C028  F030         	movff	?_end_receita+1,salvar_dado@aux+1
  8076                           
  8077                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  8078  003C00  C02E  F027         	movff	salvar_dado@data,EEPROM_write@data
  8079  003C04  502D               	movf	salvar_dado@col^0,w,c
  8080  003C06  242F               	addwf	salvar_dado@aux^0,w,c
  8081  003C08  EC79  F01D         	call	_EEPROM_write
  8082  003C0C  0012               	return		;funcret
  8083  003C0E                     __end_of_salvar_dado:
  8084                           	callstack 0
  8085                           
  8086 ;; *************** function _salva_atuadores_init *****************
  8087 ;; Defined at:
  8088 ;;		line 117 in file "fifo.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;		None
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  condi_init      4    3[COMRAM] unsigned char [4]
  8093 ;;  pt              2    7[COMRAM] PTR unsigned char 
  8094 ;;		 -> salva_atuadores_init@condi_init(4), 
  8095 ;;  mask            1   10[COMRAM] unsigned char 
  8096 ;;  dado            1    9[COMRAM] unsigned char 
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      unsigned char 
  8099 ;; Registers used:
  8100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0
  8107 ;;      Locals:         8       0       0       0       0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8109 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8110 ;;Total ram usage:        8 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    3
  8113 ;; This function calls:
  8114 ;;		_ler_atuador
  8115 ;; This function is called by:
  8116 ;;		_main
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text15
  8121  0031BE                     __ptext15:
  8122                           	callstack 0
  8123  0031BE                     _salva_atuadores_init:
  8124                           	callstack 27
  8125  0031BE                     
  8126                           ;fifo.c: 119:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  8127  0031BE  0E00               	movlw	0
  8128  0031C0  6E2A               	movwf	salva_atuadores_init@condi_init^0,c
  8129  0031C2  0E00               	movlw	0
  8130  0031C4  6E2B               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  8131  0031C6  0E00               	movlw	0
  8132  0031C8  6E2C               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  8133  0031CA  0E00               	movlw	0
  8134  0031CC  6E2D               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  8135  0031CE  0E41               	movlw	65
  8136  0031D0  EC6E  F017         	call	_ler_atuador
  8137  0031D4  6E2A               	movwf	salva_atuadores_init@condi_init^0,c
  8138  0031D6  0E42               	movlw	66
  8139  0031D8  EC6E  F017         	call	_ler_atuador
  8140  0031DC  6E2B               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  8141  0031DE  0E43               	movlw	67
  8142  0031E0  EC6E  F017         	call	_ler_atuador
  8143  0031E4  6E2C               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  8144  0031E6  0E44               	movlw	68
  8145  0031E8  EC6E  F017         	call	_ler_atuador
  8146  0031EC  6E2D               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  8147  0031EE                     
  8148                           ;fifo.c: 121:     char *pt = condi_init;
  8149  0031EE  0E2A               	movlw	low salva_atuadores_init@condi_init
  8150  0031F0  6E2E               	movwf	salva_atuadores_init@pt^0,c
  8151  0031F2  0E00               	movlw	high salva_atuadores_init@condi_init
  8152  0031F4  6E2F               	movwf	(salva_atuadores_init@pt+1)^0,c
  8153  0031F6                     
  8154                           ;fifo.c: 122:     char dado = 0;
  8155  0031F6  0E00               	movlw	0
  8156  0031F8  6E30               	movwf	salva_atuadores_init@dado^0,c
  8157  0031FA                     
  8158                           ;fifo.c: 123:     char mask = 0x08;
  8159  0031FA  0E08               	movlw	8
  8160  0031FC  6E31               	movwf	salva_atuadores_init@mask^0,c
  8161                           
  8162                           ;fifo.c: 125:     while( mask )
  8163  0031FE  EF14  F019         	goto	l5881
  8164  003202                     l5873:
  8165                           
  8166                           ;fifo.c: 126:     {;fifo.c: 127:         if( *pt )
  8167  003202  C02E  FFD9         	movff	salva_atuadores_init@pt,fsr2l
  8168  003206  C02F  FFDA         	movff	salva_atuadores_init@pt+1,fsr2h
  8169  00320A  50DF               	movf	indf2,w,c
  8170  00320C  B4D8               	btfsc	status,2,c
  8171  00320E  EF0B  F019         	goto	u4121
  8172  003212  EF0D  F019         	goto	u4120
  8173  003216                     u4121:
  8174  003216  EF10  F019         	goto	l5877
  8175  00321A                     u4120:
  8176  00321A                     
  8177                           ;fifo.c: 128:         {;fifo.c: 129:             dado = dado | mask;
  8178  00321A  5030               	movf	salva_atuadores_init@dado^0,w,c
  8179  00321C  1031               	iorwf	salva_atuadores_init@mask^0,w,c
  8180  00321E  6E30               	movwf	salva_atuadores_init@dado^0,c
  8181  003220                     l5877:
  8182                           
  8183                           ;fifo.c: 131:         pt++;
  8184  003220  4A2E               	infsnz	salva_atuadores_init@pt^0,f,c
  8185  003222  2A2F               	incf	(salva_atuadores_init@pt+1)^0,f,c
  8186  003224                     
  8187                           ;fifo.c: 132:         mask >>= 1;
  8188  003224  90D8               	bcf	status,0,c
  8189  003226  3231               	rrcf	salva_atuadores_init@mask^0,f,c
  8190  003228                     l5881:
  8191                           
  8192                           ;fifo.c: 125:     while( mask )
  8193  003228  5031               	movf	salva_atuadores_init@mask^0,w,c
  8194  00322A  A4D8               	btfss	status,2,c
  8195  00322C  EF1A  F019         	goto	u4131
  8196  003230  EF1C  F019         	goto	u4130
  8197  003234                     u4131:
  8198  003234  EF01  F019         	goto	l5873
  8199  003238                     u4130:
  8200  003238                     
  8201                           ;fifo.c: 134:     return(dado);
  8202  003238  5030               	movf	salva_atuadores_init@dado^0,w,c
  8203  00323A  0012               	return		;funcret
  8204  00323C                     __end_of_salva_atuadores_init:
  8205                           	callstack 0
  8206                           
  8207 ;; *************** function _ler_atuador *****************
  8208 ;; Defined at:
  8209 ;;		line 80 in file "fifo.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;  tecla           1    wreg     unsigned char 
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  tecla           1    2[COMRAM] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      unsigned char 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0
  8224 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8225 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8226 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8227 ;;Total ram usage:        3 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    2
  8230 ;; This function calls:
  8231 ;;		Nothing
  8232 ;; This function is called by:
  8233 ;;		_main
  8234 ;;		_salva_atuadores_init
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           	psect	text16
  8239  002EDC                     __ptext16:
  8240                           	callstack 0
  8241  002EDC                     _ler_atuador:
  8242                           	callstack 27
  8243                           
  8244                           ;incstack = 0
  8245                           ;ler_atuador@tecla stored from wreg
  8246  002EDC  6E29               	movwf	ler_atuador@tecla^0,c
  8247  002EDE                     
  8248                           ;fifo.c: 80: char ler_atuador(char tecla);fifo.c: 81: {;fifo.c: 82:     switch(tecla)
  8249  002EDE  EFA0  F017         	goto	l5275
  8250  002EE2                     l675:
  8251  002EE2  B013               	btfsc	_atuador^0,0,c
  8252  002EE4  EF76  F017         	goto	u3421
  8253  002EE8  EF79  F017         	goto	u3420
  8254  002EEC                     u3421:
  8255  002EEC  0E01               	movlw	1
  8256  002EEE  EF7A  F017         	goto	u3426
  8257  002EF2                     u3420:
  8258  002EF2  0E00               	movlw	0
  8259  002EF4                     u3426:
  8260  002EF4  EFBD  F017         	goto	l676
  8261  002EF8                     l678:
  8262  002EF8  B213               	btfsc	_atuador^0,1,c
  8263  002EFA  EF81  F017         	goto	u3431
  8264  002EFE  EF84  F017         	goto	u3430
  8265  002F02                     u3431:
  8266  002F02  0E01               	movlw	1
  8267  002F04  EF85  F017         	goto	u3436
  8268  002F08                     u3430:
  8269  002F08  0E00               	movlw	0
  8270  002F0A                     u3436:
  8271  002F0A  EFBD  F017         	goto	l676
  8272  002F0E                     l679:
  8273  002F0E  B413               	btfsc	_atuador^0,2,c
  8274  002F10  EF8C  F017         	goto	u3441
  8275  002F14  EF8F  F017         	goto	u3440
  8276  002F18                     u3441:
  8277  002F18  0E01               	movlw	1
  8278  002F1A  EF90  F017         	goto	u3446
  8279  002F1E                     u3440:
  8280  002F1E  0E00               	movlw	0
  8281  002F20                     u3446:
  8282  002F20  EFBD  F017         	goto	l676
  8283  002F24                     l680:
  8284  002F24  B613               	btfsc	_atuador^0,3,c
  8285  002F26  EF97  F017         	goto	u3451
  8286  002F2A  EF9A  F017         	goto	u3450
  8287  002F2E                     u3451:
  8288  002F2E  0E01               	movlw	1
  8289  002F30  EF9B  F017         	goto	u3456
  8290  002F34                     u3450:
  8291  002F34  0E00               	movlw	0
  8292  002F36                     u3456:
  8293  002F36  EFBD  F017         	goto	l676
  8294  002F3A                     l5267:
  8295  002F3A  0E00               	movlw	0
  8296  002F3C  EFBD  F017         	goto	l676
  8297  002F40                     l5275:
  8298  002F40  5029               	movf	ler_atuador@tecla^0,w,c
  8299  002F42  6E27               	movwf	??_ler_atuador^0,c
  8300  002F44  6A28               	clrf	(??_ler_atuador+1)^0,c
  8301                           
  8302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8303                           ; Switch size 1, requested type "simple"
  8304                           ; Number of cases is 1, Range of values is 0 to 0
  8305                           ; switch strategies available:
  8306                           ; Name         Instructions Cycles
  8307                           ; simple_byte            4     3 (average)
  8308                           ;	Chosen strategy is simple_byte
  8309  002F46  5028               	movf	(??_ler_atuador+1)^0,w,c
  8310  002F48  0A00               	xorlw	0	; case 0
  8311  002F4A  B4D8               	btfsc	status,2,c
  8312  002F4C  EFAA  F017         	goto	l7945
  8313  002F50  EF9D  F017         	goto	l5267
  8314  002F54                     l7945:
  8315                           
  8316                           ; Switch size 1, requested type "simple"
  8317                           ; Number of cases is 4, Range of values is 65 to 68
  8318                           ; switch strategies available:
  8319                           ; Name         Instructions Cycles
  8320                           ; simple_byte           13     7 (average)
  8321                           ;	Chosen strategy is simple_byte
  8322  002F54  5027               	movf	??_ler_atuador^0,w,c
  8323  002F56  0A41               	xorlw	65	; case 65
  8324  002F58  B4D8               	btfsc	status,2,c
  8325  002F5A  EF71  F017         	goto	l675
  8326  002F5E  0A03               	xorlw	3	; case 66
  8327  002F60  B4D8               	btfsc	status,2,c
  8328  002F62  EF7C  F017         	goto	l678
  8329  002F66  0A01               	xorlw	1	; case 67
  8330  002F68  B4D8               	btfsc	status,2,c
  8331  002F6A  EF87  F017         	goto	l679
  8332  002F6E  0A07               	xorlw	7	; case 68
  8333  002F70  B4D8               	btfsc	status,2,c
  8334  002F72  EF92  F017         	goto	l680
  8335  002F76  EF9D  F017         	goto	l5267
  8336  002F7A                     l676:
  8337  002F7A  0012               	return		;funcret
  8338  002F7C                     __end_of_ler_atuador:
  8339                           	callstack 0
  8340                           
  8341 ;; *************** function _resetIndicePassos *****************
  8342 ;; Defined at:
  8343 ;;		line 36 in file "fifo.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;		None
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  1    wreg      void 
  8350 ;; Registers used:
  8351 ;;		wreg, status,2
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8357 ;;      Params:         0       0       0       0       0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8360 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8361 ;;Total ram usage:        0 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    2
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		_main
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text17
  8372  003DDE                     __ptext17:
  8373                           	callstack 0
  8374  003DDE                     _resetIndicePassos:
  8375                           	callstack 28
  8376  003DDE                     
  8377                           ;fifo.c: 38:     indice_passos = 2;
  8378  003DDE  0E02               	movlw	2
  8379  003DE0  6E57               	movwf	_indice_passos^0,c
  8380  003DE2  0012               	return		;funcret
  8381  003DE4                     __end_of_resetIndicePassos:
  8382                           	callstack 0
  8383                           
  8384 ;; *************** function _resetContCiclos *****************
  8385 ;; Defined at:
  8386 ;;		line 54 in file "fifo.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  1    wreg      void 
  8393 ;; Registers used:
  8394 ;;		wreg, status,2
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8400 ;;      Params:         0       0       0       0       0       0       0       0       0
  8401 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8403 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8404 ;;Total ram usage:        0 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; Hardware stack levels required when called:    2
  8407 ;; This function calls:
  8408 ;;		Nothing
  8409 ;; This function is called by:
  8410 ;;		_main
  8411 ;; This function uses a non-reentrant model
  8412 ;;
  8413                           
  8414                           	psect	text18
  8415  003D96                     __ptext18:
  8416                           	callstack 0
  8417  003D96                     _resetContCiclos:
  8418                           	callstack 28
  8419  003D96                     
  8420                           ;fifo.c: 56:     cont_ciclos = 0;
  8421  003D96  0E00               	movlw	0
  8422  003D98  6E0E               	movwf	(_cont_ciclos+1)^0,c
  8423  003D9A  0E00               	movlw	0
  8424  003D9C  6E0D               	movwf	_cont_ciclos^0,c
  8425  003D9E  0012               	return		;funcret
  8426  003DA0                     __end_of_resetContCiclos:
  8427                           	callstack 0
  8428                           
  8429 ;; *************** function _printExec *****************
  8430 ;; Defined at:
  8431 ;;		line 520 in file "fifo.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  col             1    wreg     unsigned char 
  8434 ;;  ind             1   25[COMRAM] unsigned char 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  col             1   28[COMRAM] unsigned char 
  8437 ;;  passo           1   29[COMRAM] unsigned char 
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  1    wreg      void 
  8440 ;; Registers used:
  8441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8447 ;;      Params:         1       0       0       0       0       0       0       0       0
  8448 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8450 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8451 ;;Total ram usage:        5 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    5
  8454 ;; This function calls:
  8455 ;;		_decodifica
  8456 ;;		_dignum_tam
  8457 ;;		_dispLCD_dataReg
  8458 ;;		_dispLCD_lincol
  8459 ;;		_dispLCD_num
  8460 ;;		_posAtual
  8461 ;; This function is called by:
  8462 ;;		_main
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           	psect	text19
  8467  002130                     __ptext19:
  8468                           	callstack 0
  8469  002130                     _printExec:
  8470                           	callstack 25
  8471                           
  8472                           ;incstack = 0
  8473                           ;printExec@col stored from wreg
  8474  002130  6E43               	movwf	printExec@col^0,c
  8475  002132                     
  8476                           ;fifo.c: 520: void printExec (char col, char ind);fifo.c: 521: {;fifo.c: 522:     char p
      +                          asso = posAtual( ind );
  8477  002132  5040               	movf	printExec@ind^0,w,c
  8478  002134  ECA5  F01E         	call	_posAtual
  8479  002138  6E44               	movwf	printExec@passo^0,c
  8480  00213A                     
  8481                           ;fifo.c: 524:     if(passo > 0 && passo <= 0x64)
  8482  00213A  5044               	movf	printExec@passo^0,w,c
  8483  00213C  B4D8               	btfsc	status,2,c
  8484  00213E  EFA3  F010         	goto	u4221
  8485  002142  EFA5  F010         	goto	u4220
  8486  002146                     u4221:
  8487  002146  EFCE  F010         	goto	l5941
  8488  00214A                     u4220:
  8489  00214A  0E65               	movlw	101
  8490  00214C  6044               	cpfslt	printExec@passo^0,c
  8491  00214E  EFAB  F010         	goto	u4231
  8492  002152  EFAD  F010         	goto	u4230
  8493  002156                     u4231:
  8494  002156  EFCE  F010         	goto	l5941
  8495  00215A                     u4230:
  8496  00215A                     
  8497                           ;fifo.c: 525:     {;fifo.c: 526:         if( dignum_tam( (int) passo ) == 3 )
  8498  00215A  C044  F02F         	movff	printExec@passo,dignum_tam@num
  8499  00215E  6A30               	clrf	(dignum_tam@num+1)^0,c
  8500  002160  EC72  F01C         	call	_dignum_tam	;wreg free
  8501  002164  0A03               	xorlw	3
  8502  002166  A4D8               	btfss	status,2,c
  8503  002168  EFB8  F010         	goto	u4241
  8504  00216C  EFBA  F010         	goto	u4240
  8505  002170                     u4241:
  8506  002170  EFBB  F010         	goto	l5937
  8507  002174                     u4240:
  8508  002174                     
  8509                           ;fifo.c: 527:             col-=1;
  8510  002174  0643               	decf	printExec@col^0,f,c
  8511  002176                     l5937:
  8512                           
  8513                           ;fifo.c: 528:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8514  002176  C043  F032         	movff	printExec@col,dispLCD_num@col
  8515  00217A  C044  F033         	movff	printExec@passo,dispLCD_num@num
  8516  00217E  6A34               	clrf	(dispLCD_num@num+1)^0,c
  8517  002180  C044  F02F         	movff	printExec@passo,dignum_tam@num
  8518  002184  6A30               	clrf	(dignum_tam@num+1)^0,c
  8519  002186  EC72  F01C         	call	_dignum_tam	;wreg free
  8520  00218A  6E35               	movwf	dispLCD_num@tam^0,c
  8521  00218C  0E00               	movlw	0
  8522  00218E  EC5D  F011         	call	_dispLCD_num
  8523  002192                     
  8524                           ;fifo.c: 529:         dispLCD_dataReg('%');
  8525  002192  0E25               	movlw	37
  8526  002194  EC59  F01B         	call	_dispLCD_dataReg
  8527                           
  8528                           ;fifo.c: 530:     }
  8529  002198  EF5C  F011         	goto	l883
  8530  00219C                     l5941:
  8531  00219C  0E64               	movlw	100
  8532  00219E  6444               	cpfsgt	printExec@passo^0,c
  8533  0021A0  EFD4  F010         	goto	u4251
  8534  0021A4  EFD6  F010         	goto	u4250
  8535  0021A8                     u4251:
  8536  0021A8  EF05  F011         	goto	l5955
  8537  0021AC                     u4250:
  8538  0021AC  0EDD               	movlw	221
  8539  0021AE  6044               	cpfslt	printExec@passo^0,c
  8540  0021B0  EFDC  F010         	goto	u4261
  8541  0021B4  EFDE  F010         	goto	u4260
  8542  0021B8                     u4261:
  8543  0021B8  EF05  F011         	goto	l5955
  8544  0021BC                     u4260:
  8545  0021BC                     
  8546                           ;fifo.c: 532:     {;fifo.c: 533:         decodifica(&passo);
  8547  0021BC  0E44               	movlw	low printExec@passo
  8548  0021BE  6E27               	movwf	decodifica@d^0,c
  8549  0021C0  0E00               	movlw	high printExec@passo
  8550  0021C2  6E28               	movwf	(decodifica@d+1)^0,c
  8551  0021C4  ECC4  F012         	call	_decodifica	;wreg free
  8552  0021C8                     
  8553                           ;fifo.c: 534:         if( dignum_tam( (int) passo ) == 3 )
  8554  0021C8  C044  F02F         	movff	printExec@passo,dignum_tam@num
  8555  0021CC  6A30               	clrf	(dignum_tam@num+1)^0,c
  8556  0021CE  EC72  F01C         	call	_dignum_tam	;wreg free
  8557  0021D2  0A03               	xorlw	3
  8558  0021D4  A4D8               	btfss	status,2,c
  8559  0021D6  EFEF  F010         	goto	u4271
  8560  0021DA  EFF1  F010         	goto	u4270
  8561  0021DE                     u4271:
  8562  0021DE  EFF2  F010         	goto	l5951
  8563  0021E2                     u4270:
  8564  0021E2                     
  8565                           ;fifo.c: 535:             col-=1;
  8566  0021E2  0643               	decf	printExec@col^0,f,c
  8567  0021E4                     l5951:
  8568                           
  8569                           ;fifo.c: 536:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8570  0021E4  C043  F032         	movff	printExec@col,dispLCD_num@col
  8571  0021E8  C044  F033         	movff	printExec@passo,dispLCD_num@num
  8572  0021EC  6A34               	clrf	(dispLCD_num@num+1)^0,c
  8573  0021EE  C044  F02F         	movff	printExec@passo,dignum_tam@num
  8574  0021F2  6A30               	clrf	(dignum_tam@num+1)^0,c
  8575  0021F4  EC72  F01C         	call	_dignum_tam	;wreg free
  8576  0021F8  6E35               	movwf	dispLCD_num@tam^0,c
  8577  0021FA  0E00               	movlw	0
  8578  0021FC  EC5D  F011         	call	_dispLCD_num
  8579  002200                     
  8580                           ;fifo.c: 537:         dispLCD_dataReg('s');
  8581  002200  0E73               	movlw	115
  8582  002202  EC59  F01B         	call	_dispLCD_dataReg
  8583                           
  8584                           ;fifo.c: 538:     }
  8585  002206  EF5C  F011         	goto	l883
  8586  00220A                     l5955:
  8587  00220A  0EDC               	movlw	220
  8588  00220C  6444               	cpfsgt	printExec@passo^0,c
  8589  00220E  EF0B  F011         	goto	u4281
  8590  002212  EF0D  F011         	goto	u4280
  8591  002216                     u4281:
  8592  002216  EF3A  F011         	goto	l5973
  8593  00221A                     u4280:
  8594  00221A  0EFE               	movlw	254
  8595  00221C  6044               	cpfslt	printExec@passo^0,c
  8596  00221E  EF13  F011         	goto	u4291
  8597  002222  EF15  F011         	goto	u4290
  8598  002226                     u4291:
  8599  002226  EF3A  F011         	goto	l5973
  8600  00222A                     u4290:
  8601  00222A                     
  8602                           ;fifo.c: 540:     {;fifo.c: 541:         decodifica(&passo);
  8603  00222A  0E44               	movlw	low printExec@passo
  8604  00222C  6E27               	movwf	decodifica@d^0,c
  8605  00222E  0E00               	movlw	high printExec@passo
  8606  002230  6E28               	movwf	(decodifica@d+1)^0,c
  8607  002232  ECC4  F012         	call	_decodifica	;wreg free
  8608  002236                     
  8609                           ;fifo.c: 542:         dispLCD_lincol(0, col);
  8610  002236  C043  F029         	movff	printExec@col,dispLCD_lincol@col
  8611  00223A  0E00               	movlw	0
  8612  00223C  ECC4  F019         	call	_dispLCD_lincol
  8613  002240                     
  8614                           ;fifo.c: 543:         dispLCD_dataReg( passo & ~0x20 );
  8615  002240  5044               	movf	printExec@passo^0,w,c
  8616  002242  0BDF               	andlw	223
  8617  002244  EC59  F01B         	call	_dispLCD_dataReg
  8618  002248                     
  8619                           ;fifo.c: 544:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  8620  002248  BA44               	btfsc	printExec@passo^0,5,c
  8621  00224A  EF29  F011         	goto	u4301
  8622  00224E  EF2B  F011         	goto	u4300
  8623  002252                     u4301:
  8624  002252  EF31  F011         	goto	l5969
  8625  002256                     u4300:
  8626  002256  0E00               	movlw	0
  8627  002258  6E42               	movwf	(_printExec$1075+1)^0,c
  8628  00225A  0E2B               	movlw	43
  8629  00225C  6E41               	movwf	_printExec$1075^0,c
  8630  00225E  EF35  F011         	goto	l5971
  8631  002262                     l5969:
  8632  002262  0E00               	movlw	0
  8633  002264  6E42               	movwf	(_printExec$1075+1)^0,c
  8634  002266  0E2D               	movlw	45
  8635  002268  6E41               	movwf	_printExec$1075^0,c
  8636  00226A                     l5971:
  8637  00226A  5041               	movf	_printExec$1075^0,w,c
  8638  00226C  EC59  F01B         	call	_dispLCD_dataReg
  8639                           
  8640                           ;fifo.c: 545:     }
  8641  002270  EF5C  F011         	goto	l883
  8642  002274                     l5973:
  8643  002274  0EFE               	movlw	254
  8644  002276  1844               	xorwf	printExec@passo^0,w,c
  8645  002278  A4D8               	btfss	status,2,c
  8646  00227A  EF41  F011         	goto	u4311
  8647  00227E  EF43  F011         	goto	u4310
  8648  002282                     u4311:
  8649  002282  EF5C  F011         	goto	l875
  8650  002286                     u4310:
  8651  002286                     
  8652                           ;fifo.c: 547:     {;fifo.c: 548:         decodifica(&passo);
  8653  002286  0E44               	movlw	low printExec@passo
  8654  002288  6E27               	movwf	decodifica@d^0,c
  8655  00228A  0E00               	movlw	high printExec@passo
  8656  00228C  6E28               	movwf	(decodifica@d+1)^0,c
  8657  00228E  ECC4  F012         	call	_decodifica	;wreg free
  8658  002292                     
  8659                           ;fifo.c: 549:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  8660  002292  C043  F032         	movff	printExec@col,dispLCD_num@col
  8661  002296  C044  F033         	movff	printExec@passo,dispLCD_num@num
  8662  00229A  6A34               	clrf	(dispLCD_num@num+1)^0,c
  8663  00229C  C044  F02F         	movff	printExec@passo,dignum_tam@num
  8664  0022A0  6A30               	clrf	(dignum_tam@num+1)^0,c
  8665  0022A2  EC72  F01C         	call	_dignum_tam	;wreg free
  8666  0022A6  6E35               	movwf	dispLCD_num@tam^0,c
  8667  0022A8  0E00               	movlw	0
  8668  0022AA  EC5D  F011         	call	_dispLCD_num
  8669  0022AE                     
  8670                           ;fifo.c: 550:         dispLCD_dataReg('%');
  8671  0022AE  0E25               	movlw	37
  8672  0022B0  EC59  F01B         	call	_dispLCD_dataReg
  8673  0022B4  EF5C  F011         	goto	l883
  8674  0022B8                     l875:
  8675  0022B8                     l883:
  8676  0022B8  0012               	return		;funcret
  8677  0022BA                     __end_of_printExec:
  8678                           	callstack 0
  8679                           
  8680 ;; *************** function _posAtual *****************
  8681 ;; Defined at:
  8682 ;;		line 512 in file "fifo.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  ind             1    wreg     unsigned char 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  ind             1    1[COMRAM] unsigned char 
  8687 ;;  passo           1    2[COMRAM] unsigned char 
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      unsigned char 
  8690 ;; Registers used:
  8691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8697 ;;      Params:         0       0       0       0       0       0       0       0       0
  8698 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8700 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8701 ;;Total ram usage:        2 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; Hardware stack levels required when called:    3
  8704 ;; This function calls:
  8705 ;;		_fifo_lerPos
  8706 ;;		_getIndicePassos
  8707 ;; This function is called by:
  8708 ;;		_printExec
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           	psect	text20
  8713  003D4A                     __ptext20:
  8714                           	callstack 0
  8715  003D4A                     _posAtual:
  8716                           	callstack 26
  8717                           
  8718                           ;incstack = 0
  8719                           ;posAtual@ind stored from wreg
  8720  003D4A  6E28               	movwf	posAtual@ind^0,c
  8721  003D4C                     
  8722                           ;fifo.c: 516:     passo = fifo_lerPos( getIndicePassos() + ind );
  8723  003D4C  ECF5  F01E         	call	_getIndicePassos	;wreg free
  8724  003D50  2428               	addwf	posAtual@ind^0,w,c
  8725  003D52  ECAE  F01E         	call	_fifo_lerPos
  8726  003D56  6E29               	movwf	posAtual@passo^0,c
  8727  003D58                     
  8728                           ;fifo.c: 517:     return(passo);
  8729  003D58  5029               	movf	posAtual@passo^0,w,c
  8730  003D5A  0012               	return		;funcret
  8731  003D5C                     __end_of_posAtual:
  8732                           	callstack 0
  8733                           
  8734 ;; *************** function _getIndicePassos *****************
  8735 ;; Defined at:
  8736 ;;		line 31 in file "fifo.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;		None
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  1    wreg      unsigned char 
  8743 ;; Registers used:
  8744 ;;		wreg, status,2
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8750 ;;      Params:         0       0       0       0       0       0       0       0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8753 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8754 ;;Total ram usage:        0 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; Hardware stack levels required when called:    2
  8757 ;; This function calls:
  8758 ;;		Nothing
  8759 ;; This function is called by:
  8760 ;;		_main
  8761 ;;		_posAtual
  8762 ;; This function uses a non-reentrant model
  8763 ;;
  8764                           
  8765                           	psect	text21
  8766  003DEA                     __ptext21:
  8767                           	callstack 0
  8768  003DEA                     _getIndicePassos:
  8769                           	callstack 26
  8770  003DEA                     
  8771                           ;fifo.c: 33:     return(indice_passos);
  8772  003DEA  5057               	movf	_indice_passos^0,w,c
  8773  003DEC  0012               	return		;funcret
  8774  003DEE                     __end_of_getIndicePassos:
  8775                           	callstack 0
  8776                           
  8777 ;; *************** function _fifo_lerPos *****************
  8778 ;; Defined at:
  8779 ;;		line 168 in file "fifo.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  i               1    wreg     unsigned char 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  i               1    0[COMRAM] unsigned char 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      unsigned char 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0
  8794 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8796 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8797 ;;Total ram usage:        1 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    2
  8800 ;; This function calls:
  8801 ;;		Nothing
  8802 ;; This function is called by:
  8803 ;;		_main
  8804 ;;		_posAtual
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text22
  8809  003D5C                     __ptext22:
  8810                           	callstack 0
  8811  003D5C                     _fifo_lerPos:
  8812                           	callstack 26
  8813                           
  8814                           ;incstack = 0
  8815                           ;fifo_lerPos@i stored from wreg
  8816  003D5C  6E27               	movwf	fifo_lerPos@i^0,c
  8817  003D5E                     
  8818                           ;fifo.c: 168: char fifo_lerPos(char i);fifo.c: 169: {;fifo.c: 170:     return ( fila[i] 
      +                          );
  8819  003D5E  0E15               	movlw	low _fila
  8820  003D60  2427               	addwf	fifo_lerPos@i^0,w,c
  8821  003D62  6ED9               	movwf	fsr2l,c
  8822  003D64  6ADA               	clrf	fsr2h,c
  8823  003D66  0E00               	movlw	high _fila
  8824  003D68  22DA               	addwfc	fsr2h,f,c
  8825  003D6A  50DF               	movf	indf2,w,c
  8826  003D6C  0012               	return		;funcret
  8827  003D6E                     __end_of_fifo_lerPos:
  8828                           	callstack 0
  8829                           
  8830 ;; *************** function _dispLCD_num *****************
  8831 ;; Defined at:
  8832 ;;		line 201 in file "dispLCD4vias.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  lin             1    wreg     unsigned char 
  8835 ;;  col             1   11[COMRAM] unsigned char 
  8836 ;;  num             2   12[COMRAM] int 
  8837 ;;  tam             1   14[COMRAM] unsigned char 
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;  lin             1   20[COMRAM] unsigned char 
  8840 ;;  div             2   23[COMRAM] int 
  8841 ;;  sinal           1   22[COMRAM] unsigned char 
  8842 ;;  size            1   21[COMRAM] unsigned char 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, status,2, status,0, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8852 ;;      Params:         4       0       0       0       0       0       0       0       0
  8853 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8854 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8855 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8856 ;;Total ram usage:       14 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    4
  8859 ;; This function calls:
  8860 ;;		___awdiv
  8861 ;;		___awmod
  8862 ;;		_dispLCD_dataReg
  8863 ;;		_dispLCD_lincol
  8864 ;; This function is called by:
  8865 ;;		_printExec
  8866 ;;		_main
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           	psect	text23
  8871  0022BA                     __ptext23:
  8872                           	callstack 0
  8873  0022BA                     _dispLCD_num:
  8874                           	callstack 25
  8875                           
  8876                           ;incstack = 0
  8877                           ;dispLCD_num@lin stored from wreg
  8878  0022BA  6E3B               	movwf	dispLCD_num@lin^0,c
  8879  0022BC                     
  8880                           ;dispLCD4vias.c: 201: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 202:                     int num, unsigned char tam );dispLCD4vias.c: 203: {;dispL
      +                          CD4vias.c: 204:     int div;;dispLCD4vias.c: 205:     unsigned char size;;dispLCD4vias.c
      +                          : 206:     char sinal;;dispLCD4vias.c: 208:     sinal = num < 0;
  8881  0022BC  BE34               	btfsc	(dispLCD_num@num+1)^0,7,c
  8882  0022BE  EF63  F011         	goto	u3461
  8883  0022C2  EF66  F011         	goto	u3460
  8884  0022C6                     u3461:
  8885  0022C6  0E01               	movlw	1
  8886  0022C8  EF67  F011         	goto	u3470
  8887  0022CC                     u3460:
  8888  0022CC  0E00               	movlw	0
  8889  0022CE                     u3470:
  8890  0022CE  6E3D               	movwf	dispLCD_num@sinal^0,c
  8891  0022D0                     
  8892                           ;dispLCD4vias.c: 209:     if( sinal )
  8893  0022D0  503D               	movf	dispLCD_num@sinal^0,w,c
  8894  0022D2  B4D8               	btfsc	status,2,c
  8895  0022D4  EF6E  F011         	goto	u3481
  8896  0022D8  EF70  F011         	goto	u3480
  8897  0022DC                     u3481:
  8898  0022DC  EF74  F011         	goto	l5287
  8899  0022E0                     u3480:
  8900  0022E0                     
  8901                           ;dispLCD4vias.c: 210:         num = (~num) + 1;
  8902  0022E0  6C33               	negf	dispLCD_num@num^0,c
  8903  0022E2  1E34               	comf	(dispLCD_num@num+1)^0,f,c
  8904  0022E4  B0D8               	btfsc	status,0,c
  8905  0022E6  2A34               	incf	(dispLCD_num@num+1)^0,f,c
  8906  0022E8                     l5287:
  8907                           
  8908                           ;dispLCD4vias.c: 212:     dispLCD_lincol(lin, col);
  8909  0022E8  C032  F029         	movff	dispLCD_num@col,dispLCD_lincol@col
  8910  0022EC  503B               	movf	dispLCD_num@lin^0,w,c
  8911  0022EE  ECC4  F019         	call	_dispLCD_lincol
  8912  0022F2                     
  8913                           ;dispLCD4vias.c: 214:     div=10000;
  8914  0022F2  0E27               	movlw	39
  8915  0022F4  6E3F               	movwf	(dispLCD_num@div+1)^0,c
  8916  0022F6  0E10               	movlw	16
  8917  0022F8  6E3E               	movwf	dispLCD_num@div^0,c
  8918  0022FA                     
  8919                           ;dispLCD4vias.c: 215:     size = 5;
  8920  0022FA  0E05               	movlw	5
  8921  0022FC  6E3C               	movwf	dispLCD_num@size^0,c
  8922                           
  8923                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  8924  0022FE  EFA3  F011         	goto	l5299
  8925  002302                     l5293:
  8926                           
  8927                           ;dispLCD4vias.c: 217:     {;dispLCD4vias.c: 218:         if( num/div == 0 )
  8928  002302  C033  F027         	movff	dispLCD_num@num,___awdiv@dividend
  8929  002306  C034  F028         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  8930  00230A  C03E  F029         	movff	dispLCD_num@div,___awdiv@divisor
  8931  00230E  C03F  F02A         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  8932  002312  ECBB  F015         	call	___awdiv	;wreg free
  8933  002316  5027               	movf	?___awdiv^0,w,c
  8934  002318  1028               	iorwf	(?___awdiv+1)^0,w,c
  8935  00231A  A4D8               	btfss	status,2,c
  8936  00231C  EF92  F011         	goto	u3491
  8937  002320  EF94  F011         	goto	u3490
  8938  002324                     u3491:
  8939  002324  EFB6  F011         	goto	l5305
  8940  002328                     u3490:
  8941  002328                     
  8942                           ;dispLCD4vias.c: 219:             --size;
  8943  002328  063C               	decf	dispLCD_num@size^0,f,c
  8944  00232A                     
  8945                           ;dispLCD4vias.c: 222:         div/=10;
  8946  00232A  C03E  F027         	movff	dispLCD_num@div,___awdiv@dividend
  8947  00232E  C03F  F028         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  8948  002332  0E00               	movlw	0
  8949  002334  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  8950  002336  0E0A               	movlw	10
  8951  002338  6E29               	movwf	___awdiv@divisor^0,c
  8952  00233A  ECBB  F015         	call	___awdiv	;wreg free
  8953  00233E  C027  F03E         	movff	?___awdiv,dispLCD_num@div
  8954  002342  C028  F03F         	movff	?___awdiv+1,dispLCD_num@div+1
  8955  002346                     l5299:
  8956                           
  8957                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  8958  002346  BE3F               	btfsc	(dispLCD_num@div+1)^0,7,c
  8959  002348  EFB0  F011         	goto	u3500
  8960  00234C  503F               	movf	(dispLCD_num@div+1)^0,w,c
  8961  00234E  E106               	bnz	u3501
  8962  002350  043E               	decf	dispLCD_num@div^0,w,c
  8963  002352  B0D8               	btfsc	status,0,c
  8964  002354  EFAE  F011         	goto	u3501
  8965  002358  EFB0  F011         	goto	u3500
  8966  00235C                     u3501:
  8967  00235C  EF81  F011         	goto	l5293
  8968  002360                     u3500:
  8969  002360  EFB6  F011         	goto	l5305
  8970  002364                     l5301:
  8971                           
  8972                           ;dispLCD4vias.c: 226:     {;dispLCD4vias.c: 227:         dispLCD_dataReg(' ');
  8973  002364  0E20               	movlw	32
  8974  002366  EC59  F01B         	call	_dispLCD_dataReg
  8975  00236A                     
  8976                           ;dispLCD4vias.c: 228:         --tam;
  8977  00236A  0635               	decf	dispLCD_num@tam^0,f,c
  8978  00236C                     l5305:
  8979                           
  8980                           ;dispLCD4vias.c: 225:     while( tam > (size+sinal) && tam > 1 )
  8981  00236C  5035               	movf	dispLCD_num@tam^0,w,c
  8982  00236E  6E36               	movwf	??_dispLCD_num^0,c
  8983  002370  6A37               	clrf	(??_dispLCD_num+1)^0,c
  8984  002372  503D               	movf	dispLCD_num@sinal^0,w,c
  8985  002374  C03C  F038         	movff	dispLCD_num@size,??_dispLCD_num+2
  8986  002378  6A39               	clrf	(??_dispLCD_num+3)^0,c
  8987  00237A  2638               	addwf	(??_dispLCD_num+2)^0,f,c
  8988  00237C  0E00               	movlw	0
  8989  00237E  2239               	addwfc	(??_dispLCD_num+3)^0,f,c
  8990  002380  5036               	movf	??_dispLCD_num^0,w,c
  8991  002382  5C38               	subwf	(??_dispLCD_num+2)^0,w,c
  8992  002384  5039               	movf	(??_dispLCD_num+3)^0,w,c
  8993  002386  0A80               	xorlw	128
  8994  002388  6E3A               	movwf	(??_dispLCD_num+4)^0,c
  8995  00238A  5037               	movf	(??_dispLCD_num+1)^0,w,c
  8996  00238C  0A80               	xorlw	128
  8997  00238E  583A               	subwfb	(??_dispLCD_num+4)^0,w,c
  8998  002390  B0D8               	btfsc	status,0,c
  8999  002392  EFCD  F011         	goto	u3511
  9000  002396  EFCF  F011         	goto	u3510
  9001  00239A                     u3511:
  9002  00239A  EFD7  F011         	goto	l5309
  9003  00239E                     u3510:
  9004  00239E  0E02               	movlw	2
  9005  0023A0  6035               	cpfslt	dispLCD_num@tam^0,c
  9006  0023A2  EFD5  F011         	goto	u3521
  9007  0023A6  EFD7  F011         	goto	u3520
  9008  0023AA                     u3521:
  9009  0023AA  EFB2  F011         	goto	l5301
  9010  0023AE                     u3520:
  9011  0023AE                     l5309:
  9012                           
  9013                           ;dispLCD4vias.c: 231:     if( sinal )
  9014  0023AE  503D               	movf	dispLCD_num@sinal^0,w,c
  9015  0023B0  B4D8               	btfsc	status,2,c
  9016  0023B2  EFDD  F011         	goto	u3531
  9017  0023B6  EFDF  F011         	goto	u3530
  9018  0023BA                     u3531:
  9019  0023BA  EFE2  F011         	goto	l538
  9020  0023BE                     u3530:
  9021  0023BE                     
  9022                           ;dispLCD4vias.c: 232:         dispLCD_dataReg('-');
  9023  0023BE  0E2D               	movlw	45
  9024  0023C0  EC59  F01B         	call	_dispLCD_dataReg
  9025  0023C4                     l538:
  9026                           
  9027                           ;dispLCD4vias.c: 235:     {;dispLCD4vias.c: 236:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  9028  0023C4  C033  F027         	movff	dispLCD_num@num,___awdiv@dividend
  9029  0023C8  C034  F028         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  9030  0023CC  C03E  F029         	movff	dispLCD_num@div,___awdiv@divisor
  9031  0023D0  C03F  F02A         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  9032  0023D4  ECBB  F015         	call	___awdiv	;wreg free
  9033  0023D8  5027               	movf	?___awdiv^0,w,c
  9034  0023DA  0F30               	addlw	48
  9035  0023DC  EC59  F01B         	call	_dispLCD_dataReg
  9036                           
  9037                           ;dispLCD4vias.c: 237:         num = num % div;
  9038  0023E0  C033  F027         	movff	dispLCD_num@num,___awmod@dividend
  9039  0023E4  C034  F028         	movff	dispLCD_num@num+1,___awmod@dividend+1
  9040  0023E8  C03E  F029         	movff	dispLCD_num@div,___awmod@divisor
  9041  0023EC  C03F  F02A         	movff	dispLCD_num@div+1,___awmod@divisor+1
  9042  0023F0  EC1D  F016         	call	___awmod	;wreg free
  9043  0023F4  C027  F033         	movff	?___awmod,dispLCD_num@num
  9044  0023F8  C028  F034         	movff	?___awmod+1,dispLCD_num@num+1
  9045                           
  9046                           ;dispLCD4vias.c: 238:         div/=10;
  9047  0023FC  C03E  F027         	movff	dispLCD_num@div,___awdiv@dividend
  9048  002400  C03F  F028         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  9049  002404  0E00               	movlw	0
  9050  002406  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  9051  002408  0E0A               	movlw	10
  9052  00240A  6E29               	movwf	___awdiv@divisor^0,c
  9053  00240C  ECBB  F015         	call	___awdiv	;wreg free
  9054  002410  C027  F03E         	movff	?___awdiv,dispLCD_num@div
  9055  002414  C028  F03F         	movff	?___awdiv+1,dispLCD_num@div+1
  9056  002418                     
  9057                           ;dispLCD4vias.c: 239:     }
  9058  002418  BE3F               	btfsc	(dispLCD_num@div+1)^0,7,c
  9059  00241A  EF19  F012         	goto	u3540
  9060  00241E  503F               	movf	(dispLCD_num@div+1)^0,w,c
  9061  002420  E106               	bnz	u3541
  9062  002422  043E               	decf	dispLCD_num@div^0,w,c
  9063  002424  B0D8               	btfsc	status,0,c
  9064  002426  EF17  F012         	goto	u3541
  9065  00242A  EF19  F012         	goto	u3540
  9066  00242E                     u3541:
  9067  00242E  EFE2  F011         	goto	l538
  9068  002432                     u3540:
  9069  002432  0012               	return		;funcret
  9070  002434                     __end_of_dispLCD_num:
  9071                           	callstack 0
  9072                           
  9073 ;; *************** function _manipula_atuadores_init *****************
  9074 ;; Defined at:
  9075 ;;		line 137 in file "fifo.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;  aux             1    wreg     unsigned char 
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;  aux             1    4[COMRAM] unsigned char 
  9080 ;;  mask            1    5[COMRAM] unsigned char 
  9081 ;;  atuador         1    3[COMRAM] unsigned char 
  9082 ;; Return value:  Size  Location     Type
  9083 ;;                  1    wreg      void 
  9084 ;; Registers used:
  9085 ;;		wreg, status,2, status,0, cstack
  9086 ;; Tracked objects:
  9087 ;;		On entry : 0/0
  9088 ;;		On exit  : 0/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9091 ;;      Params:         0       0       0       0       0       0       0       0       0
  9092 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9094 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9095 ;;Total ram usage:        3 bytes
  9096 ;; Hardware stack levels used:    1
  9097 ;; Hardware stack levels required when called:    3
  9098 ;; This function calls:
  9099 ;;		_alt_atuador
  9100 ;; This function is called by:
  9101 ;;		_main
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text24
  9106  003662                     __ptext24:
  9107                           	callstack 0
  9108  003662                     _manipula_atuadores_init:
  9109                           	callstack 27
  9110                           
  9111                           ;incstack = 0
  9112                           ;manipula_atuadores_init@aux stored from wreg
  9113  003662  6E2B               	movwf	manipula_atuadores_init@aux^0,c
  9114  003664                     
  9115                           ;fifo.c: 137: void manipula_atuadores_init(char aux);fifo.c: 138: {;fifo.c: 139:     cha
      +                          r mask = 0x08;
  9116  003664  0E08               	movlw	8
  9117  003666  6E2C               	movwf	manipula_atuadores_init@mask^0,c
  9118                           
  9119                           ;fifo.c: 140:     char atuador = 0x41;
  9120  003668  0E41               	movlw	65
  9121  00366A  6E2A               	movwf	manipula_atuadores_init@atuador^0,c
  9122  00366C                     
  9123                           ;fifo.c: 142:     if(aux ==0xFF)
  9124  00366C  282B               	incf	manipula_atuadores_init@aux^0,w,c
  9125  00366E  A4D8               	btfss	status,2,c
  9126  003670  EF3C  F01B         	goto	u3871
  9127  003674  EF3E  F01B         	goto	u3870
  9128  003678                     u3871:
  9129  003678  EF50  F01B         	goto	l5669
  9130  00367C                     u3870:
  9131  00367C  EF58  F01B         	goto	l711
  9132  003680                     l5661:
  9133                           
  9134                           ;fifo.c: 148:         {;fifo.c: 150:             if(aux & mask)
  9135  003680  502B               	movf	manipula_atuadores_init@aux^0,w,c
  9136  003682  142C               	andwf	manipula_atuadores_init@mask^0,w,c
  9137  003684  0900               	iorlw	0
  9138  003686  B4D8               	btfsc	status,2,c
  9139  003688  EF48  F01B         	goto	u3881
  9140  00368C  EF4A  F01B         	goto	u3880
  9141  003690                     u3881:
  9142  003690  EF4D  F01B         	goto	l5665
  9143  003694                     u3880:
  9144  003694                     
  9145                           ;fifo.c: 151:             {;fifo.c: 152:                 alt_atuador(atuador);
  9146  003694  502A               	movf	manipula_atuadores_init@atuador^0,w,c
  9147  003696  ECBE  F017         	call	_alt_atuador
  9148  00369A                     l5665:
  9149                           
  9150                           ;fifo.c: 154:             atuador++;
  9151  00369A  2A2A               	incf	manipula_atuadores_init@atuador^0,f,c
  9152  00369C                     
  9153                           ;fifo.c: 155:             mask >>= 1;
  9154  00369C  90D8               	bcf	status,0,c
  9155  00369E  322C               	rrcf	manipula_atuadores_init@mask^0,f,c
  9156  0036A0                     l5669:
  9157                           
  9158                           ;fifo.c: 147:         while(mask)
  9159  0036A0  502C               	movf	manipula_atuadores_init@mask^0,w,c
  9160  0036A2  A4D8               	btfss	status,2,c
  9161  0036A4  EF56  F01B         	goto	u3891
  9162  0036A8  EF58  F01B         	goto	u3890
  9163  0036AC                     u3891:
  9164  0036AC  EF40  F01B         	goto	l5661
  9165  0036B0                     u3890:
  9166  0036B0                     l711:
  9167  0036B0  0012               	return		;funcret
  9168  0036B2                     __end_of_manipula_atuadores_init:
  9169                           	callstack 0
  9170                           
  9171 ;; *************** function _ler_sensor *****************
  9172 ;; Defined at:
  9173 ;;		line 68 in file "atuadores.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;  passo           1    wreg     unsigned char 
  9176 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  9177 ;;		 -> main@vetorIn(1), 
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;  passo           1    4[COMRAM] unsigned char 
  9180 ;; Return value:  Size  Location     Type
  9181 ;;                  1    wreg      unsigned char 
  9182 ;; Registers used:
  9183 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9189 ;;      Params:         2       0       0       0       0       0       0       0       0
  9190 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9191 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9192 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9193 ;;Total ram usage:        5 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    2
  9196 ;; This function calls:
  9197 ;;		Nothing
  9198 ;; This function is called by:
  9199 ;;		_main
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           	psect	text25
  9204  0028C4                     __ptext25:
  9205                           	callstack 0
  9206  0028C4                     _ler_sensor:
  9207                           	callstack 28
  9208                           
  9209                           ;incstack = 0
  9210                           ;ler_sensor@passo stored from wreg
  9211  0028C4  6E2B               	movwf	ler_sensor@passo^0,c
  9212  0028C6                     
  9213                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  9214  0028C6  EFA8  F014         	goto	l6099
  9215  0028CA                     l6043:
  9216  0028CA  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9217  0028CE  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9218  0028D2  50DF               	movf	indf2,w,c
  9219  0028D4  0B02               	andlw	2
  9220  0028D6  EFD5  F014         	goto	l464
  9221  0028DA                     l6049:
  9222  0028DA  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9223  0028DE  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9224  0028E2  50DF               	movf	indf2,w,c
  9225  0028E4  0B01               	andlw	1
  9226  0028E6  EFD5  F014         	goto	l464
  9227  0028EA                     l6055:
  9228  0028EA  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9229  0028EE  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9230  0028F2  50DF               	movf	indf2,w,c
  9231  0028F4  0B08               	andlw	8
  9232  0028F6  EFD5  F014         	goto	l464
  9233  0028FA                     l6061:
  9234  0028FA  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9235  0028FE  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9236  002902  50DF               	movf	indf2,w,c
  9237  002904  0B04               	andlw	4
  9238  002906  EFD5  F014         	goto	l464
  9239  00290A                     l6067:
  9240  00290A  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9241  00290E  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9242  002912  50DF               	movf	indf2,w,c
  9243  002914  0B20               	andlw	32
  9244  002916  EFD5  F014         	goto	l464
  9245  00291A                     l6073:
  9246  00291A  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9247  00291E  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9248  002922  50DF               	movf	indf2,w,c
  9249  002924  0B10               	andlw	16
  9250  002926  EFD5  F014         	goto	l464
  9251  00292A                     l6079:
  9252  00292A  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9253  00292E  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9254  002932  50DF               	movf	indf2,w,c
  9255  002934  0B80               	andlw	128
  9256  002936  EFD5  F014         	goto	l464
  9257  00293A                     l6085:
  9258  00293A  C027  FFD9         	movff	ler_sensor@ptr,fsr2l
  9259  00293E  C028  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  9260  002942  50DF               	movf	indf2,w,c
  9261  002944  0B40               	andlw	64
  9262  002946  EFD5  F014         	goto	l464
  9263  00294A                     l6091:
  9264  00294A  0E00               	movlw	0
  9265  00294C  EFD5  F014         	goto	l464
  9266  002950                     l6099:
  9267  002950  502B               	movf	ler_sensor@passo^0,w,c
  9268  002952  6E29               	movwf	??_ler_sensor^0,c
  9269  002954  6A2A               	clrf	(??_ler_sensor+1)^0,c
  9270                           
  9271                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9272                           ; Switch size 1, requested type "simple"
  9273                           ; Number of cases is 1, Range of values is 0 to 0
  9274                           ; switch strategies available:
  9275                           ; Name         Instructions Cycles
  9276                           ; simple_byte            4     3 (average)
  9277                           ;	Chosen strategy is simple_byte
  9278  002956  502A               	movf	(??_ler_sensor+1)^0,w,c
  9279  002958  0A00               	xorlw	0	; case 0
  9280  00295A  B4D8               	btfsc	status,2,c
  9281  00295C  EFB2  F014         	goto	l7947
  9282  002960  EFA5  F014         	goto	l6091
  9283  002964                     l7947:
  9284                           
  9285                           ; Switch size 1, requested type "simple"
  9286                           ; Number of cases is 8, Range of values is 65 to 100
  9287                           ; switch strategies available:
  9288                           ; Name         Instructions Cycles
  9289                           ; simple_byte           25    13 (average)
  9290                           ;	Chosen strategy is simple_byte
  9291  002964  5029               	movf	??_ler_sensor^0,w,c
  9292  002966  0A41               	xorlw	65	; case 65
  9293  002968  B4D8               	btfsc	status,2,c
  9294  00296A  EF65  F014         	goto	l6043
  9295  00296E  0A03               	xorlw	3	; case 66
  9296  002970  B4D8               	btfsc	status,2,c
  9297  002972  EF75  F014         	goto	l6055
  9298  002976  0A01               	xorlw	1	; case 67
  9299  002978  B4D8               	btfsc	status,2,c
  9300  00297A  EF85  F014         	goto	l6067
  9301  00297E  0A07               	xorlw	7	; case 68
  9302  002980  B4D8               	btfsc	status,2,c
  9303  002982  EF95  F014         	goto	l6079
  9304  002986  0A25               	xorlw	37	; case 97
  9305  002988  B4D8               	btfsc	status,2,c
  9306  00298A  EF6D  F014         	goto	l6049
  9307  00298E  0A03               	xorlw	3	; case 98
  9308  002990  B4D8               	btfsc	status,2,c
  9309  002992  EF7D  F014         	goto	l6061
  9310  002996  0A01               	xorlw	1	; case 99
  9311  002998  B4D8               	btfsc	status,2,c
  9312  00299A  EF8D  F014         	goto	l6073
  9313  00299E  0A07               	xorlw	7	; case 100
  9314  0029A0  B4D8               	btfsc	status,2,c
  9315  0029A2  EF9D  F014         	goto	l6085
  9316  0029A6  EFA5  F014         	goto	l6091
  9317  0029AA                     l464:
  9318  0029AA  0012               	return		;funcret
  9319  0029AC                     __end_of_ler_sensor:
  9320                           	callstack 0
  9321                           
  9322 ;; *************** function _init_atuadores *****************
  9323 ;; Defined at:
  9324 ;;		line 103 in file "fifo.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;		None
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;		None
  9329 ;; Return value:  Size  Location     Type
  9330 ;;                  1    wreg      void 
  9331 ;; Registers used:
  9332 ;;		None
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9341 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9342 ;;Total ram usage:        0 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    2
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_main
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           	psect	text26
  9353  003DA0                     __ptext26:
  9354                           	callstack 0
  9355  003DA0                     _init_atuadores:
  9356                           	callstack 28
  9357  003DA0                     
  9358                           ;fifo.c: 105:     atuador.A = 0;
  9359  003DA0  9013               	bcf	_atuador^0,0,c
  9360                           
  9361                           ;fifo.c: 106:     atuador.B = 0;
  9362  003DA2  9213               	bcf	_atuador^0,1,c
  9363                           
  9364                           ;fifo.c: 107:     atuador.C = 0;
  9365  003DA4  9413               	bcf	_atuador^0,2,c
  9366                           
  9367                           ;fifo.c: 108:     atuador.D = 0;
  9368  003DA6  9613               	bcf	_atuador^0,3,c
  9369  003DA8  0012               	return		;funcret
  9370  003DAA                     __end_of_init_atuadores:
  9371                           	callstack 0
  9372                           
  9373 ;; *************** function _initSerialIO *****************
  9374 ;; Defined at:
  9375 ;;		line 89 in file "serialIO.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;  ptrIn           2    0[COMRAM] PTR unsigned char 
  9378 ;;		 -> main@vetorIn(1), 
  9379 ;;  ptrOut          2    2[COMRAM] PTR unsigned char 
  9380 ;;		 -> main@vetorOut(1), 
  9381 ;;  length          1    4[COMRAM] unsigned char 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;		None
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, status,2, status,0
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9393 ;;      Params:         5       0       0       0       0       0       0       0       0
  9394 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9396 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9397 ;;Total ram usage:        5 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    2
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_main
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           	psect	text27
  9408  003A96                     __ptext27:
  9409                           	callstack 0
  9410  003A96                     _initSerialIO:
  9411                           	callstack 28
  9412  003A96                     
  9413                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ADCON1 = 0xFF;
  9414  003A96  68C1               	setf	193,c	;volatile
  9415  003A98                     
  9416                           ;serialIO.c: 93:     ptrSerialIn = ptrIn;
  9417  003A98  C027  F00B         	movff	initSerialIO@ptrIn,_ptrSerialIn
  9418  003A9C  C028  F00C         	movff	initSerialIO@ptrIn+1,_ptrSerialIn+1
  9419                           
  9420                           ;serialIO.c: 94:     ptrSerialOut = ptrOut;
  9421  003AA0  C029  F009         	movff	initSerialIO@ptrOut,_ptrSerialOut
  9422  003AA4  C02A  F00A         	movff	initSerialIO@ptrOut+1,_ptrSerialOut+1
  9423  003AA8                     
  9424                           ;serialIO.c: 95:     lenSerialIO = length;
  9425  003AA8  C02B  F012         	movff	initSerialIO@length,_lenSerialIO
  9426  003AAC                     
  9427                           ;serialIO.c: 97:     PORTAbits.RA3 = 0;
  9428  003AAC  9680               	bcf	128,3,c	;volatile
  9429  003AAE                     
  9430                           ;serialIO.c: 99:     TRISAbits.TRISA3 = 0;
  9431  003AAE  9692               	bcf	146,3,c	;volatile
  9432  003AB0                     
  9433                           ;serialIO.c: 102:     PORTAbits.RA2 = 0;
  9434  003AB0  9480               	bcf	128,2,c	;volatile
  9435  003AB2                     
  9436                           ;serialIO.c: 104:     TRISAbits.TRISA2 = 0;
  9437  003AB2  9492               	bcf	146,2,c	;volatile
  9438  003AB4                     
  9439                           ;serialIO.c: 107:     PORTAbits.RA0 = 0;
  9440  003AB4  9080               	bcf	128,0,c	;volatile
  9441  003AB6                     
  9442                           ;serialIO.c: 109:     TRISAbits.TRISA0 = 0;
  9443  003AB6  9092               	bcf	146,0,c	;volatile
  9444  003AB8                     
  9445                           ;serialIO.c: 112:     PORTAbits.RA1 = 0;
  9446  003AB8  9280               	bcf	128,1,c	;volatile
  9447  003ABA                     
  9448                           ;serialIO.c: 114:     TRISAbits.TRISA1 = 1;
  9449  003ABA  8292               	bsf	146,1,c	;volatile
  9450  003ABC                     
  9451                           ;serialIO.c: 117:     SERIALIO.CLK = 0;
  9452  003ABC  9480               	bcf	128,2,c	;volatile
  9453  003ABE                     
  9454                           ;serialIO.c: 118:     SERIALIO.OUT = 0;
  9455  003ABE  9080               	bcf	128,0,c	;volatile
  9456  003AC0                     
  9457                           ;serialIO.c: 119:     SERIALIO.SHLD = 1;
  9458  003AC0  8680               	bsf	128,3,c	;volatile
  9459  003AC2  0012               	return		;funcret
  9460  003AC4                     __end_of_initSerialIO:
  9461                           	callstack 0
  9462                           
  9463 ;; *************** function _getContCiclos *****************
  9464 ;; Defined at:
  9465 ;;		line 49 in file "fifo.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;		None
  9470 ;; Return value:  Size  Location     Type
  9471 ;;                  2    0[COMRAM] unsigned int 
  9472 ;; Registers used:
  9473 ;;		None
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9479 ;;      Params:         2       0       0       0       0       0       0       0       0
  9480 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9482 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9483 ;;Total ram usage:        2 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    2
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_main
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text28
  9494  003DAA                     __ptext28:
  9495                           	callstack 0
  9496  003DAA                     _getContCiclos:
  9497                           	callstack 28
  9498  003DAA                     
  9499                           ;fifo.c: 51:     return(cont_ciclos);
  9500  003DAA  C00D  F027         	movff	_cont_ciclos,?_getContCiclos
  9501  003DAE  C00E  F028         	movff	_cont_ciclos+1,?_getContCiclos+1
  9502  003DB2  0012               	return		;funcret
  9503  003DB4                     __end_of_getContCiclos:
  9504                           	callstack 0
  9505                           
  9506 ;; *************** function _getCiclos *****************
  9507 ;; Defined at:
  9508 ;;		line 41 in file "fifo.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;		None
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  aux             2    2[COMRAM] int 
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  2    0[COMRAM] unsigned int 
  9515 ;; Registers used:
  9516 ;;		wreg, status,2, status,0
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9522 ;;      Params:         2       0       0       0       0       0       0       0       0
  9523 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9525 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9526 ;;Total ram usage:        4 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    2
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_main
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text29
  9537  003C30                     __ptext29:
  9538                           	callstack 0
  9539  003C30                     _getCiclos:
  9540                           	callstack 28
  9541  003C30                     
  9542                           ;fifo.c: 43:     int aux = fila[1];
  9543  003C30  C016  F029         	movff	_fila+1,getCiclos@aux
  9544  003C34  6A2A               	clrf	(getCiclos@aux+1)^0,c
  9545  003C36                     
  9546                           ;fifo.c: 44:     aux <<= 8;
  9547  003C36  5029               	movf	getCiclos@aux^0,w,c
  9548  003C38  6E2A               	movwf	(getCiclos@aux+1)^0,c
  9549  003C3A  6A29               	clrf	getCiclos@aux^0,c
  9550  003C3C                     
  9551                           ;fifo.c: 45:     aux +=fila[0];
  9552  003C3C  5015               	movf	_fila^0,w,c
  9553  003C3E  2629               	addwf	getCiclos@aux^0,f,c
  9554  003C40  0E00               	movlw	0
  9555  003C42  222A               	addwfc	(getCiclos@aux+1)^0,f,c
  9556  003C44                     
  9557                           ;fifo.c: 46:     return(aux);
  9558  003C44  C029  F027         	movff	getCiclos@aux,?_getCiclos
  9559  003C48  C02A  F028         	movff	getCiclos@aux+1,?_getCiclos+1
  9560  003C4C  0012               	return		;funcret
  9561  003C4E                     __end_of_getCiclos:
  9562                           	callstack 0
  9563                           
  9564 ;; *************** function _formatar_receitas *****************
  9565 ;; Defined at:
  9566 ;;		line 100 in file "eeprom.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;		None
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;  i               1    2[COMRAM] unsigned char 
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  1    wreg      void 
  9573 ;; Registers used:
  9574 ;;		wreg, status,2, status,0, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9580 ;;      Params:         0       0       0       0       0       0       0       0       0
  9581 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9583 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9584 ;;Total ram usage:        1 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    3
  9587 ;; This function calls:
  9588 ;;		_EEPROM_write
  9589 ;; This function is called by:
  9590 ;;		_main
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           	psect	text30
  9595  003C68                     __ptext30:
  9596                           	callstack 0
  9597  003C68                     _formatar_receitas:
  9598                           	callstack 27
  9599  003C68                     
  9600                           ;eeprom.c: 102:     for( char i = 0;i<256;i++)
  9601  003C68  0E00               	movlw	0
  9602  003C6A  6E29               	movwf	formatar_receitas@i^0,c
  9603  003C6C                     l6181:
  9604                           
  9605                           ;eeprom.c: 103:            EEPROM_write(i,0);
  9606  003C6C  0E00               	movlw	0
  9607  003C6E  6E27               	movwf	EEPROM_write@data^0,c
  9608  003C70  5029               	movf	formatar_receitas@i^0,w,c
  9609  003C72  EC79  F01D         	call	_EEPROM_write
  9610  003C76  2A29               	incf	formatar_receitas@i^0,f,c
  9611  003C78  EF36  F01E         	goto	l6181
  9612  003C7C  0012               	return		;funcret
  9613  003C7E                     __end_of_formatar_receitas:
  9614                           	callstack 0
  9615                           
  9616 ;; *************** function _fifo_tam *****************
  9617 ;; Defined at:
  9618 ;;		line 317 in file "fifo.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      unsigned char 
  9625 ;; Registers used:
  9626 ;;		wreg
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    2
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_main
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           	psect	text31
  9647  003DEE                     __ptext31:
  9648                           	callstack 0
  9649  003DEE                     _fifo_tam:
  9650                           	callstack 28
  9651  003DEE                     
  9652                           ;fifo.c: 319:     return( 18 );
  9653  003DEE  0E12               	movlw	18
  9654  003DF0  0012               	return		;funcret
  9655  003DF2                     __end_of_fifo_tam:
  9656                           	callstack 0
  9657                           
  9658 ;; *************** function _fifo_print *****************
  9659 ;; Defined at:
  9660 ;;		line 342 in file "fifo.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  comando         1   16[COMRAM] unsigned char 
  9665 ;;  atraso          1   15[COMRAM] unsigned char 
  9666 ;;  i               1   14[COMRAM] unsigned char 
  9667 ;;  indPrint        1   13[COMRAM] unsigned char 
  9668 ;;  completar       1   12[COMRAM] unsigned char 
  9669 ;; Return value:  Size  Location     Type
  9670 ;;                  1    wreg      void 
  9671 ;; Registers used:
  9672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9678 ;;      Params:         0       0       0       0       0       0       0       0       0
  9679 ;;      Locals:         7       0       0       0       0       0       0       0       0
  9680 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9681 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9682 ;;Total ram usage:        9 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    4
  9685 ;; This function calls:
  9686 ;;		___awdiv
  9687 ;;		___awmod
  9688 ;;		_decodifica
  9689 ;;		_dispLCD_dataReg
  9690 ;;		_dispLCD_lincol
  9691 ;; This function is called by:
  9692 ;;		_main
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           	psect	text32
  9697  001E4C                     __ptext32:
  9698                           	callstack 0
  9699  001E4C                     _fifo_print:
  9700                           	callstack 26
  9701  001E4C                     
  9702                           ;fifo.c: 344:     char completar = 0;
  9703  001E4C  0E00               	movlw	0
  9704  001E4E  6E33               	movwf	fifo_print@completar^0,c
  9705                           
  9706                           ;fifo.c: 346:     char atraso = 0;
  9707  001E50  0E00               	movlw	0
  9708  001E52  6E36               	movwf	fifo_print@atraso^0,c
  9709                           
  9710                           ;fifo.c: 347:     char i = 0;
  9711  001E54  0E00               	movlw	0
  9712  001E56  6E35               	movwf	fifo_print@i^0,c
  9713  001E58                     
  9714                           ;fifo.c: 348:     char indPrint = ind_print;
  9715  001E58  C058  F034         	movff	_ind_print,fifo_print@indPrint
  9716  001E5C                     
  9717                           ;fifo.c: 350:     dispLCD_lincol(0, 0);
  9718  001E5C  0E00               	movlw	0
  9719  001E5E  6E29               	movwf	dispLCD_lincol@col^0,c
  9720  001E60  0E00               	movlw	0
  9721  001E62  ECC4  F019         	call	_dispLCD_lincol
  9722  001E66                     l5717:
  9723                           
  9724                           ;fifo.c: 352:     {;fifo.c: 353:         if( completar )
  9725  001E66  5033               	movf	fifo_print@completar^0,w,c
  9726  001E68  B4D8               	btfsc	status,2,c
  9727  001E6A  EF39  F00F         	goto	u3951
  9728  001E6E  EF3B  F00F         	goto	u3950
  9729  001E72                     u3951:
  9730  001E72  EF41  F00F         	goto	l5723
  9731  001E76                     u3950:
  9732  001E76                     
  9733                           ;fifo.c: 354:         {;fifo.c: 355:             dispLCD_dataReg(' ');
  9734  001E76  0E20               	movlw	32
  9735  001E78  EC59  F01B         	call	_dispLCD_dataReg
  9736  001E7C                     l5721:
  9737                           
  9738                           ;fifo.c: 356:             ++i;
  9739  001E7C  2A35               	incf	fifo_print@i^0,f,c
  9740                           
  9741                           ;fifo.c: 357:         }
  9742  001E7E  EF8F  F010         	goto	l5837
  9743  001E82                     l5723:
  9744                           
  9745                           ;fifo.c: 359:         {;fifo.c: 360:             comando = fila[indPrint++];
  9746  001E82  0E15               	movlw	low _fila
  9747  001E84  2434               	addwf	fifo_print@indPrint^0,w,c
  9748  001E86  6ED9               	movwf	fsr2l,c
  9749  001E88  6ADA               	clrf	fsr2h,c
  9750  001E8A  0E00               	movlw	high _fila
  9751  001E8C  22DA               	addwfc	fsr2h,f,c
  9752  001E8E  50DF               	movf	indf2,w,c
  9753  001E90  6E37               	movwf	fifo_print@comando^0,c
  9754  001E92  2A34               	incf	fifo_print@indPrint^0,f,c
  9755  001E94                     
  9756                           ;fifo.c: 362:             if( comando == 0 )
  9757  001E94  5037               	movf	fifo_print@comando^0,w,c
  9758  001E96  A4D8               	btfss	status,2,c
  9759  001E98  EF50  F00F         	goto	u3961
  9760  001E9C  EF52  F00F         	goto	u3960
  9761  001EA0                     u3961:
  9762  001EA0  EF56  F00F         	goto	l5731
  9763  001EA4                     u3960:
  9764  001EA4                     
  9765                           ;fifo.c: 363:                 completar = 1;
  9766  001EA4  0E01               	movlw	1
  9767  001EA6  6E33               	movwf	fifo_print@completar^0,c
  9768  001EA8  EF8F  F010         	goto	l5837
  9769  001EAC                     l5731:
  9770  001EAC  0E65               	movlw	101
  9771  001EAE  6037               	cpfslt	fifo_print@comando^0,c
  9772  001EB0  EF5C  F00F         	goto	u3971
  9773  001EB4  EF5E  F00F         	goto	u3970
  9774  001EB8                     u3971:
  9775  001EB8  EFAE  F00F         	goto	l5763
  9776  001EBC                     u3970:
  9777  001EBC                     
  9778                           ;fifo.c: 365:             {;fifo.c: 366:                 atraso = comando;
  9779  001EBC  C037  F036         	movff	fifo_print@comando,fifo_print@atraso
  9780  001EC0                     
  9781                           ;fifo.c: 367:                 if( atraso >= 100 )
  9782  001EC0  0E63               	movlw	99
  9783  001EC2  6436               	cpfsgt	fifo_print@atraso^0,c
  9784  001EC4  EF66  F00F         	goto	u3981
  9785  001EC8  EF68  F00F         	goto	u3980
  9786  001ECC                     u3981:
  9787  001ECC  EF83  F00F         	goto	l5749
  9788  001ED0                     u3980:
  9789  001ED0                     
  9790                           ;fifo.c: 368:                 {;fifo.c: 369:                     dispLCD_dataReg('1');
  9791  001ED0  0E31               	movlw	49
  9792  001ED2  EC59  F01B         	call	_dispLCD_dataReg
  9793  001ED6                     
  9794                           ;fifo.c: 370:                     ++i;
  9795  001ED6  2A35               	incf	fifo_print@i^0,f,c
  9796  001ED8                     
  9797                           ;fifo.c: 371:                     atraso %= 100;
  9798  001ED8  C036  F027         	movff	fifo_print@atraso,___awmod@dividend
  9799  001EDC  6A28               	clrf	(___awmod@dividend+1)^0,c
  9800  001EDE  0E00               	movlw	0
  9801  001EE0  6E2A               	movwf	(___awmod@divisor+1)^0,c
  9802  001EE2  0E64               	movlw	100
  9803  001EE4  6E29               	movwf	___awmod@divisor^0,c
  9804  001EE6  EC1D  F016         	call	___awmod	;wreg free
  9805  001EEA  5027               	movf	?___awmod^0,w,c
  9806  001EEC  6E36               	movwf	fifo_print@atraso^0,c
  9807  001EEE                     
  9808                           ;fifo.c: 372:                     if(atraso < 10)
  9809  001EEE  0E0A               	movlw	10
  9810  001EF0  6036               	cpfslt	fifo_print@atraso^0,c
  9811  001EF2  EF7D  F00F         	goto	u3991
  9812  001EF6  EF7F  F00F         	goto	u3990
  9813  001EFA                     u3991:
  9814  001EFA  EF83  F00F         	goto	l5749
  9815  001EFE                     u3990:
  9816  001EFE                     
  9817                           ;fifo.c: 373:                     {;fifo.c: 374:                         dispLCD_dataReg
      +                          ('0');
  9818  001EFE  0E30               	movlw	48
  9819  001F00  EC59  F01B         	call	_dispLCD_dataReg
  9820  001F04                     
  9821                           ;fifo.c: 375:                         ++i;
  9822  001F04  2A35               	incf	fifo_print@i^0,f,c
  9823  001F06                     l5749:
  9824                           
  9825                           ;fifo.c: 378:                 if( atraso >= 10 )
  9826  001F06  0E09               	movlw	9
  9827  001F08  6436               	cpfsgt	fifo_print@atraso^0,c
  9828  001F0A  EF89  F00F         	goto	u4001
  9829  001F0E  EF8B  F00F         	goto	u4000
  9830  001F12                     u4001:
  9831  001F12  EFA4  F00F         	goto	l5757
  9832  001F16                     u4000:
  9833  001F16                     
  9834                           ;fifo.c: 379:                 {;fifo.c: 380:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  9835  001F16  C036  F027         	movff	fifo_print@atraso,___awdiv@dividend
  9836  001F1A  6A28               	clrf	(___awdiv@dividend+1)^0,c
  9837  001F1C  0E00               	movlw	0
  9838  001F1E  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  9839  001F20  0E0A               	movlw	10
  9840  001F22  6E29               	movwf	___awdiv@divisor^0,c
  9841  001F24  ECBB  F015         	call	___awdiv	;wreg free
  9842  001F28  5027               	movf	?___awdiv^0,w,c
  9843  001F2A  0F30               	addlw	48
  9844  001F2C  EC59  F01B         	call	_dispLCD_dataReg
  9845  001F30                     
  9846                           ;fifo.c: 381:                     ++i;
  9847  001F30  2A35               	incf	fifo_print@i^0,f,c
  9848  001F32                     
  9849                           ;fifo.c: 382:                     atraso %= 10;
  9850  001F32  C036  F027         	movff	fifo_print@atraso,___awmod@dividend
  9851  001F36  6A28               	clrf	(___awmod@dividend+1)^0,c
  9852  001F38  0E00               	movlw	0
  9853  001F3A  6E2A               	movwf	(___awmod@divisor+1)^0,c
  9854  001F3C  0E0A               	movlw	10
  9855  001F3E  6E29               	movwf	___awmod@divisor^0,c
  9856  001F40  EC1D  F016         	call	___awmod	;wreg free
  9857  001F44  5027               	movf	?___awmod^0,w,c
  9858  001F46  6E36               	movwf	fifo_print@atraso^0,c
  9859  001F48                     l5757:
  9860                           
  9861                           ;fifo.c: 385:                 dispLCD_dataReg(atraso + '0');
  9862  001F48  5036               	movf	fifo_print@atraso^0,w,c
  9863  001F4A  0F30               	addlw	48
  9864  001F4C  EC59  F01B         	call	_dispLCD_dataReg
  9865  001F50                     
  9866                           ;fifo.c: 386:                 ++i;
  9867  001F50  2A35               	incf	fifo_print@i^0,f,c
  9868                           
  9869                           ;fifo.c: 388:                 dispLCD_dataReg('%');
  9870  001F52  0E25               	movlw	37
  9871  001F54  EC59  F01B         	call	_dispLCD_dataReg
  9872  001F58  EF3E  F00F         	goto	l5721
  9873  001F5C                     l5763:
  9874  001F5C  0E64               	movlw	100
  9875  001F5E  6437               	cpfsgt	fifo_print@comando^0,c
  9876  001F60  EFB4  F00F         	goto	u4011
  9877  001F64  EFB6  F00F         	goto	u4010
  9878  001F68                     u4011:
  9879  001F68  EF14  F010         	goto	l5799
  9880  001F6C                     u4010:
  9881  001F6C  0EDD               	movlw	221
  9882  001F6E  6037               	cpfslt	fifo_print@comando^0,c
  9883  001F70  EFBC  F00F         	goto	u4021
  9884  001F74  EFBE  F00F         	goto	u4020
  9885  001F78                     u4021:
  9886  001F78  EF14  F010         	goto	l5799
  9887  001F7C                     u4020:
  9888  001F7C                     
  9889                           ;fifo.c: 393:             {;fifo.c: 394:                 decodifica(&comando);
  9890  001F7C  0E37               	movlw	low fifo_print@comando
  9891  001F7E  6E27               	movwf	decodifica@d^0,c
  9892  001F80  0E00               	movlw	high fifo_print@comando
  9893  001F82  6E28               	movwf	(decodifica@d+1)^0,c
  9894  001F84  ECC4  F012         	call	_decodifica	;wreg free
  9895  001F88                     
  9896                           ;fifo.c: 395:                 atraso = comando;
  9897  001F88  C037  F036         	movff	fifo_print@comando,fifo_print@atraso
  9898  001F8C                     
  9899                           ;fifo.c: 397:                 if( atraso >= 100 )
  9900  001F8C  0E63               	movlw	99
  9901  001F8E  6436               	cpfsgt	fifo_print@atraso^0,c
  9902  001F90  EFCC  F00F         	goto	u4031
  9903  001F94  EFCE  F00F         	goto	u4030
  9904  001F98                     u4031:
  9905  001F98  EFE9  F00F         	goto	l5785
  9906  001F9C                     u4030:
  9907  001F9C                     
  9908                           ;fifo.c: 398:                 {;fifo.c: 399:                     dispLCD_dataReg('1');
  9909  001F9C  0E31               	movlw	49
  9910  001F9E  EC59  F01B         	call	_dispLCD_dataReg
  9911  001FA2                     
  9912                           ;fifo.c: 400:                     ++i;
  9913  001FA2  2A35               	incf	fifo_print@i^0,f,c
  9914  001FA4                     
  9915                           ;fifo.c: 401:                     atraso %= 100;
  9916  001FA4  C036  F027         	movff	fifo_print@atraso,___awmod@dividend
  9917  001FA8  6A28               	clrf	(___awmod@dividend+1)^0,c
  9918  001FAA  0E00               	movlw	0
  9919  001FAC  6E2A               	movwf	(___awmod@divisor+1)^0,c
  9920  001FAE  0E64               	movlw	100
  9921  001FB0  6E29               	movwf	___awmod@divisor^0,c
  9922  001FB2  EC1D  F016         	call	___awmod	;wreg free
  9923  001FB6  5027               	movf	?___awmod^0,w,c
  9924  001FB8  6E36               	movwf	fifo_print@atraso^0,c
  9925  001FBA                     
  9926                           ;fifo.c: 402:                     if(atraso < 10)
  9927  001FBA  0E0A               	movlw	10
  9928  001FBC  6036               	cpfslt	fifo_print@atraso^0,c
  9929  001FBE  EFE3  F00F         	goto	u4041
  9930  001FC2  EFE5  F00F         	goto	u4040
  9931  001FC6                     u4041:
  9932  001FC6  EFE9  F00F         	goto	l5785
  9933  001FCA                     u4040:
  9934  001FCA                     
  9935                           ;fifo.c: 403:                     {;fifo.c: 404:                         dispLCD_dataReg
      +                          ('0');
  9936  001FCA  0E30               	movlw	48
  9937  001FCC  EC59  F01B         	call	_dispLCD_dataReg
  9938  001FD0                     
  9939                           ;fifo.c: 405:                         ++i;
  9940  001FD0  2A35               	incf	fifo_print@i^0,f,c
  9941  001FD2                     l5785:
  9942                           
  9943                           ;fifo.c: 408:                 if( atraso >= 10 )
  9944  001FD2  0E09               	movlw	9
  9945  001FD4  6436               	cpfsgt	fifo_print@atraso^0,c
  9946  001FD6  EFEF  F00F         	goto	u4051
  9947  001FDA  EFF1  F00F         	goto	u4050
  9948  001FDE                     u4051:
  9949  001FDE  EF0A  F010         	goto	l5793
  9950  001FE2                     u4050:
  9951  001FE2                     
  9952                           ;fifo.c: 409:                 {;fifo.c: 410:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  9953  001FE2  C036  F027         	movff	fifo_print@atraso,___awdiv@dividend
  9954  001FE6  6A28               	clrf	(___awdiv@dividend+1)^0,c
  9955  001FE8  0E00               	movlw	0
  9956  001FEA  6E2A               	movwf	(___awdiv@divisor+1)^0,c
  9957  001FEC  0E0A               	movlw	10
  9958  001FEE  6E29               	movwf	___awdiv@divisor^0,c
  9959  001FF0  ECBB  F015         	call	___awdiv	;wreg free
  9960  001FF4  5027               	movf	?___awdiv^0,w,c
  9961  001FF6  0F30               	addlw	48
  9962  001FF8  EC59  F01B         	call	_dispLCD_dataReg
  9963  001FFC                     
  9964                           ;fifo.c: 411:                     ++i;
  9965  001FFC  2A35               	incf	fifo_print@i^0,f,c
  9966  001FFE                     
  9967                           ;fifo.c: 412:                     atraso %= 10;
  9968  001FFE  C036  F027         	movff	fifo_print@atraso,___awmod@dividend
  9969  002002  6A28               	clrf	(___awmod@dividend+1)^0,c
  9970  002004  0E00               	movlw	0
  9971  002006  6E2A               	movwf	(___awmod@divisor+1)^0,c
  9972  002008  0E0A               	movlw	10
  9973  00200A  6E29               	movwf	___awmod@divisor^0,c
  9974  00200C  EC1D  F016         	call	___awmod	;wreg free
  9975  002010  5027               	movf	?___awmod^0,w,c
  9976  002012  6E36               	movwf	fifo_print@atraso^0,c
  9977  002014                     l5793:
  9978                           
  9979                           ;fifo.c: 415:                 dispLCD_dataReg(atraso + '0');
  9980  002014  5036               	movf	fifo_print@atraso^0,w,c
  9981  002016  0F30               	addlw	48
  9982  002018  EC59  F01B         	call	_dispLCD_dataReg
  9983  00201C                     
  9984                           ;fifo.c: 416:                 ++i;
  9985  00201C  2A35               	incf	fifo_print@i^0,f,c
  9986                           
  9987                           ;fifo.c: 418:                 dispLCD_dataReg('s');
  9988  00201E  0E73               	movlw	115
  9989  002020  EC59  F01B         	call	_dispLCD_dataReg
  9990  002024  EF3E  F00F         	goto	l5721
  9991  002028                     l5799:
  9992  002028  0EDC               	movlw	220
  9993  00202A  6437               	cpfsgt	fifo_print@comando^0,c
  9994  00202C  EF1A  F010         	goto	u4061
  9995  002030  EF1C  F010         	goto	u4060
  9996  002034                     u4061:
  9997  002034  EF74  F010         	goto	l5823
  9998  002038                     u4060:
  9999  002038  0EFE               	movlw	254
 10000  00203A  6037               	cpfslt	fifo_print@comando^0,c
 10001  00203C  EF22  F010         	goto	u4071
 10002  002040  EF24  F010         	goto	u4070
 10003  002044                     u4071:
 10004  002044  EF74  F010         	goto	l5823
 10005  002048                     u4070:
 10006  002048                     
 10007                           ;fifo.c: 422:             {;fifo.c: 423:                 decodifica(&comando);
 10008  002048  0E37               	movlw	low fifo_print@comando
 10009  00204A  6E27               	movwf	decodifica@d^0,c
 10010  00204C  0E00               	movlw	high fifo_print@comando
 10011  00204E  6E28               	movwf	(decodifica@d+1)^0,c
 10012  002050  ECC4  F012         	call	_decodifica	;wreg free
 10013                           
 10014                           ;fifo.c: 424:                 switch( comando )
 10015  002054  EF47  F010         	goto	l5821
 10016  002058                     l828:
 10017  002058                     l5805:
 10018                           
 10019                           ;fifo.c: 434:                                 dispLCD_dataReg( comando & ~0x20 );
 10020  002058  5037               	movf	fifo_print@comando^0,w,c
 10021  00205A  0BDF               	andlw	223
 10022  00205C  EC59  F01B         	call	_dispLCD_dataReg
 10023  002060                     
 10024                           ;fifo.c: 435:                                 ++i;
 10025  002060  2A35               	incf	fifo_print@i^0,f,c
 10026  002062                     
 10027                           ;fifo.c: 436:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
 10028  002062  BA37               	btfsc	fifo_print@comando^0,5,c
 10029  002064  EF36  F010         	goto	u4081
 10030  002068  EF38  F010         	goto	u4080
 10031  00206C                     u4081:
 10032  00206C  EF3E  F010         	goto	l5813
 10033  002070                     u4080:
 10034  002070  0E00               	movlw	0
 10035  002072  6E32               	movwf	(_fifo_print$1053+1)^0,c
 10036  002074  0E2B               	movlw	43
 10037  002076  6E31               	movwf	_fifo_print$1053^0,c
 10038  002078  EF42  F010         	goto	l5815
 10039  00207C                     l5813:
 10040  00207C  0E00               	movlw	0
 10041  00207E  6E32               	movwf	(_fifo_print$1053+1)^0,c
 10042  002080  0E2D               	movlw	45
 10043  002082  6E31               	movwf	_fifo_print$1053^0,c
 10044  002084                     l5815:
 10045  002084  5031               	movf	_fifo_print$1053^0,w,c
 10046  002086  EC59  F01B         	call	_dispLCD_dataReg
 10047  00208A  EF3E  F00F         	goto	l5721
 10048  00208E                     l5821:
 10049  00208E  5037               	movf	fifo_print@comando^0,w,c
 10050  002090  6E2F               	movwf	??_fifo_print^0,c
 10051  002092  6A30               	clrf	(??_fifo_print+1)^0,c
 10052                           
 10053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10054                           ; Switch size 1, requested type "simple"
 10055                           ; Number of cases is 1, Range of values is 0 to 0
 10056                           ; switch strategies available:
 10057                           ; Name         Instructions Cycles
 10058                           ; simple_byte            4     3 (average)
 10059                           ;	Chosen strategy is simple_byte
 10060  002094  5030               	movf	(??_fifo_print+1)^0,w,c
 10061  002096  0A00               	xorlw	0	; case 0
 10062  002098  B4D8               	btfsc	status,2,c
 10063  00209A  EF51  F010         	goto	l7949
 10064  00209E  EF8F  F010         	goto	l817
 10065  0020A2                     l7949:
 10066                           
 10067                           ; Switch size 1, requested type "simple"
 10068                           ; Number of cases is 8, Range of values is 65 to 100
 10069                           ; switch strategies available:
 10070                           ; Name         Instructions Cycles
 10071                           ; simple_byte           25    13 (average)
 10072                           ;	Chosen strategy is simple_byte
 10073  0020A2  502F               	movf	??_fifo_print^0,w,c
 10074  0020A4  0A41               	xorlw	65	; case 65
 10075  0020A6  B4D8               	btfsc	status,2,c
 10076  0020A8  EF2C  F010         	goto	l828
 10077  0020AC  0A03               	xorlw	3	; case 66
 10078  0020AE  B4D8               	btfsc	status,2,c
 10079  0020B0  EF2C  F010         	goto	l5805
 10080  0020B4  0A01               	xorlw	1	; case 67
 10081  0020B6  B4D8               	btfsc	status,2,c
 10082  0020B8  EF2C  F010         	goto	l5805
 10083  0020BC  0A07               	xorlw	7	; case 68
 10084  0020BE  B4D8               	btfsc	status,2,c
 10085  0020C0  EF2C  F010         	goto	l5805
 10086  0020C4  0A25               	xorlw	37	; case 97
 10087  0020C6  B4D8               	btfsc	status,2,c
 10088  0020C8  EF2C  F010         	goto	l5805
 10089  0020CC  0A03               	xorlw	3	; case 98
 10090  0020CE  B4D8               	btfsc	status,2,c
 10091  0020D0  EF2C  F010         	goto	l5805
 10092  0020D4  0A01               	xorlw	1	; case 99
 10093  0020D6  B4D8               	btfsc	status,2,c
 10094  0020D8  EF2C  F010         	goto	l5805
 10095  0020DC  0A07               	xorlw	7	; case 100
 10096  0020DE  B4D8               	btfsc	status,2,c
 10097  0020E0  EF2C  F010         	goto	l5805
 10098  0020E4  EF8F  F010         	goto	l817
 10099  0020E8                     l5823:
 10100                           
 10101                           ;fifo.c: 442:             {;fifo.c: 443:                 if(comando == 0xFE)
 10102  0020E8  0EFE               	movlw	254
 10103  0020EA  1837               	xorwf	fifo_print@comando^0,w,c
 10104  0020EC  A4D8               	btfss	status,2,c
 10105  0020EE  EF7B  F010         	goto	u4091
 10106  0020F2  EF7D  F010         	goto	u4090
 10107  0020F6                     u4091:
 10108  0020F6  EF8F  F010         	goto	l817
 10109  0020FA                     u4090:
 10110  0020FA                     
 10111                           ;fifo.c: 444:                 {;fifo.c: 445:                     decodifica(&comando);
 10112  0020FA  0E37               	movlw	low fifo_print@comando
 10113  0020FC  6E27               	movwf	decodifica@d^0,c
 10114  0020FE  0E00               	movlw	high fifo_print@comando
 10115  002100  6E28               	movwf	(decodifica@d+1)^0,c
 10116  002102  ECC4  F012         	call	_decodifica	;wreg free
 10117  002106                     
 10118                           ;fifo.c: 446:                     atraso = comando;
 10119  002106  C037  F036         	movff	fifo_print@comando,fifo_print@atraso
 10120  00210A                     
 10121                           ;fifo.c: 448:                     dispLCD_dataReg(atraso + '0');
 10122  00210A  5036               	movf	fifo_print@atraso^0,w,c
 10123  00210C  0F30               	addlw	48
 10124  00210E  EC59  F01B         	call	_dispLCD_dataReg
 10125  002112                     
 10126                           ;fifo.c: 449:                     ++i;
 10127  002112  2A35               	incf	fifo_print@i^0,f,c
 10128  002114                     
 10129                           ;fifo.c: 451:                     dispLCD_dataReg('%');
 10130  002114  0E25               	movlw	37
 10131  002116  EC59  F01B         	call	_dispLCD_dataReg
 10132  00211A  EF3E  F00F         	goto	l5721
 10133  00211E                     l817:
 10134  00211E                     l5837:
 10135                           
 10136                           ;fifo.c: 456:     }
 10137  00211E  0E14               	movlw	20
 10138  002120  6435               	cpfsgt	fifo_print@i^0,c
 10139  002122  EF95  F010         	goto	u4101
 10140  002126  EF97  F010         	goto	u4100
 10141  00212A                     u4101:
 10142  00212A  EF33  F00F         	goto	l5717
 10143  00212E                     u4100:
 10144  00212E  0012               	return		;funcret
 10145  002130                     __end_of_fifo_print:
 10146                           	callstack 0
 10147                           
 10148 ;; *************** function ___awmod *****************
 10149 ;; Defined at:
 10150 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awmod.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  dividend        2    0[COMRAM] int 
 10153 ;;  divisor         2    2[COMRAM] int 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  sign            1    5[COMRAM] unsigned char 
 10156 ;;  counter         1    4[COMRAM] unsigned char 
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  2    0[COMRAM] int 
 10159 ;; Registers used:
 10160 ;;		wreg, status,2, status,0
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10166 ;;      Params:         4       0       0       0       0       0       0       0       0
 10167 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10169 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10170 ;;Total ram usage:        6 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    2
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_main
 10177 ;;		_dispLCD_num
 10178 ;;		_fifo_print
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text33
 10183  002C3A                     __ptext33:
 10184                           	callstack 0
 10185  002C3A                     ___awmod:
 10186                           	callstack 26
 10187  002C3A  0E00               	movlw	0
 10188  002C3C  6E2C               	movwf	___awmod@sign^0,c
 10189  002C3E  BE28               	btfsc	(___awmod@dividend+1)^0,7,c
 10190  002C40  EF26  F016         	goto	u3260
 10191  002C44  EF24  F016         	goto	u3261
 10192  002C48                     u3261:
 10193  002C48  EF2C  F016         	goto	l5185
 10194  002C4C                     u3260:
 10195  002C4C  6C27               	negf	___awmod@dividend^0,c
 10196  002C4E  1E28               	comf	(___awmod@dividend+1)^0,f,c
 10197  002C50  B0D8               	btfsc	status,0,c
 10198  002C52  2A28               	incf	(___awmod@dividend+1)^0,f,c
 10199  002C54  0E01               	movlw	1
 10200  002C56  6E2C               	movwf	___awmod@sign^0,c
 10201  002C58                     l5185:
 10202  002C58  BE2A               	btfsc	(___awmod@divisor+1)^0,7,c
 10203  002C5A  EF33  F016         	goto	u3270
 10204  002C5E  EF31  F016         	goto	u3271
 10205  002C62                     u3271:
 10206  002C62  EF37  F016         	goto	l5189
 10207  002C66                     u3270:
 10208  002C66  6C29               	negf	___awmod@divisor^0,c
 10209  002C68  1E2A               	comf	(___awmod@divisor+1)^0,f,c
 10210  002C6A  B0D8               	btfsc	status,0,c
 10211  002C6C  2A2A               	incf	(___awmod@divisor+1)^0,f,c
 10212  002C6E                     l5189:
 10213  002C6E  5029               	movf	___awmod@divisor^0,w,c
 10214  002C70  102A               	iorwf	(___awmod@divisor+1)^0,w,c
 10215  002C72  B4D8               	btfsc	status,2,c
 10216  002C74  EF3E  F016         	goto	u3281
 10217  002C78  EF40  F016         	goto	u3280
 10218  002C7C                     u3281:
 10219  002C7C  EF64  F016         	goto	l5205
 10220  002C80                     u3280:
 10221  002C80  0E01               	movlw	1
 10222  002C82  6E2B               	movwf	___awmod@counter^0,c
 10223  002C84  EF48  F016         	goto	l5195
 10224  002C88                     l5193:
 10225  002C88  90D8               	bcf	status,0,c
 10226  002C8A  3629               	rlcf	___awmod@divisor^0,f,c
 10227  002C8C  362A               	rlcf	(___awmod@divisor+1)^0,f,c
 10228  002C8E  2A2B               	incf	___awmod@counter^0,f,c
 10229  002C90                     l5195:
 10230  002C90  AE2A               	btfss	(___awmod@divisor+1)^0,7,c
 10231  002C92  EF4D  F016         	goto	u3291
 10232  002C96  EF4F  F016         	goto	u3290
 10233  002C9A                     u3291:
 10234  002C9A  EF44  F016         	goto	l5193
 10235  002C9E                     u3290:
 10236  002C9E                     l5197:
 10237  002C9E  5029               	movf	___awmod@divisor^0,w,c
 10238  002CA0  5C27               	subwf	___awmod@dividend^0,w,c
 10239  002CA2  502A               	movf	(___awmod@divisor+1)^0,w,c
 10240  002CA4  5828               	subwfb	(___awmod@dividend+1)^0,w,c
 10241  002CA6  A0D8               	btfss	status,0,c
 10242  002CA8  EF58  F016         	goto	u3301
 10243  002CAC  EF5A  F016         	goto	u3300
 10244  002CB0                     u3301:
 10245  002CB0  EF5E  F016         	goto	l5201
 10246  002CB4                     u3300:
 10247  002CB4  5029               	movf	___awmod@divisor^0,w,c
 10248  002CB6  5E27               	subwf	___awmod@dividend^0,f,c
 10249  002CB8  502A               	movf	(___awmod@divisor+1)^0,w,c
 10250  002CBA  5A28               	subwfb	(___awmod@dividend+1)^0,f,c
 10251  002CBC                     l5201:
 10252  002CBC  90D8               	bcf	status,0,c
 10253  002CBE  322A               	rrcf	(___awmod@divisor+1)^0,f,c
 10254  002CC0  3229               	rrcf	___awmod@divisor^0,f,c
 10255  002CC2  2E2B               	decfsz	___awmod@counter^0,f,c
 10256  002CC4  EF4F  F016         	goto	l5197
 10257  002CC8                     l5205:
 10258  002CC8  502C               	movf	___awmod@sign^0,w,c
 10259  002CCA  B4D8               	btfsc	status,2,c
 10260  002CCC  EF6A  F016         	goto	u3311
 10261  002CD0  EF6C  F016         	goto	u3310
 10262  002CD4                     u3311:
 10263  002CD4  EF70  F016         	goto	l5209
 10264  002CD8                     u3310:
 10265  002CD8  6C27               	negf	___awmod@dividend^0,c
 10266  002CDA  1E28               	comf	(___awmod@dividend+1)^0,f,c
 10267  002CDC  B0D8               	btfsc	status,0,c
 10268  002CDE  2A28               	incf	(___awmod@dividend+1)^0,f,c
 10269  002CE0                     l5209:
 10270  002CE0  C027  F027         	movff	___awmod@dividend,?___awmod
 10271  002CE4  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
 10272  002CE8  0012               	return		;funcret
 10273  002CEA                     __end_of___awmod:
 10274                           	callstack 0
 10275                           
 10276 ;; *************** function _fifo_indicePrint_inc *****************
 10277 ;; Defined at:
 10278 ;;		line 322 in file "fifo.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      void 
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10294 ;;      Temps:          7       0       0       0       0       0       0       0       0
 10295 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10296 ;;Total ram usage:        7 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    2
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_main
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text34
 10307  0033EA                     __ptext34:
 10308                           	callstack 0
 10309  0033EA                     _fifo_indicePrint_inc:
 10310                           	callstack 28
 10311  0033EA                     
 10312                           ;fifo.c: 324:     if( ind_print < 18 -1 )
 10313  0033EA  0E11               	movlw	17
 10314  0033EC  6058               	cpfslt	_ind_print^0,c
 10315  0033EE  EFFB  F019         	goto	u4161
 10316  0033F2  EFFD  F019         	goto	u4160
 10317  0033F6                     u4161:
 10318  0033F6  EF21  F01A         	goto	l5899
 10319  0033FA                     u4160:
 10320  0033FA                     
 10321                           ;fifo.c: 325:     {;fifo.c: 326:         if( ind_print < ind_fila-1 )
 10322  0033FA  0EFF               	movlw	255
 10323  0033FC  6E27               	movwf	??_fifo_indicePrint_inc^0,c
 10324  0033FE  0EFF               	movlw	255
 10325  003400  6E28               	movwf	(??_fifo_indicePrint_inc+1)^0,c
 10326  003402  5059               	movf	_ind_fila^0,w,c
 10327  003404  6E29               	movwf	(??_fifo_indicePrint_inc+2)^0,c
 10328  003406  6A2A               	clrf	(??_fifo_indicePrint_inc+3)^0,c
 10329  003408  5027               	movf	??_fifo_indicePrint_inc^0,w,c
 10330  00340A  2629               	addwf	(??_fifo_indicePrint_inc+2)^0,f,c
 10331  00340C  5028               	movf	(??_fifo_indicePrint_inc+1)^0,w,c
 10332  00340E  222A               	addwfc	(??_fifo_indicePrint_inc+3)^0,f,c
 10333  003410  5058               	movf	_ind_print^0,w,c
 10334  003412  6E2B               	movwf	(??_fifo_indicePrint_inc+4)^0,c
 10335  003414  6A2C               	clrf	(??_fifo_indicePrint_inc+5)^0,c
 10336  003416  5029               	movf	(??_fifo_indicePrint_inc+2)^0,w,c
 10337  003418  5C2B               	subwf	(??_fifo_indicePrint_inc+4)^0,w,c
 10338  00341A  502C               	movf	(??_fifo_indicePrint_inc+5)^0,w,c
 10339  00341C  0A80               	xorlw	128
 10340  00341E  6E2D               	movwf	(??_fifo_indicePrint_inc+6)^0,c
 10341  003420  502A               	movf	(??_fifo_indicePrint_inc+3)^0,w,c
 10342  003422  0A80               	xorlw	128
 10343  003424  582D               	subwfb	(??_fifo_indicePrint_inc+6)^0,w,c
 10344  003426  B0D8               	btfsc	status,0,c
 10345  003428  EF18  F01A         	goto	u4171
 10346  00342C  EF1A  F01A         	goto	u4170
 10347  003430                     u4171:
 10348  003430  EF1D  F01A         	goto	l5897
 10349  003434                     u4170:
 10350  003434                     
 10351                           ;fifo.c: 327:             ind_print++;
 10352  003434  2A58               	incf	_ind_print^0,f,c
 10353  003436  EF23  F01A         	goto	l801
 10354  00343A                     l5897:
 10355                           
 10356                           ;fifo.c: 329:             ind_print = ind_fila-1;
 10357  00343A  0459               	decf	_ind_fila^0,w,c
 10358  00343C  6E58               	movwf	_ind_print^0,c
 10359  00343E  EF23  F01A         	goto	l801
 10360  003442                     l5899:
 10361                           
 10362                           ;fifo.c: 332:         ind_print = 18 -1;
 10363  003442  0E11               	movlw	17
 10364  003444  6E58               	movwf	_ind_print^0,c
 10365  003446                     l801:
 10366  003446  0012               	return		;funcret
 10367  003448                     __end_of_fifo_indicePrint_inc:
 10368                           	callstack 0
 10369                           
 10370 ;; *************** function _fifo_indicePrint_dec *****************
 10371 ;; Defined at:
 10372 ;;		line 334 in file "fifo.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;		None
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;		None
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  1    wreg      void 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10386 ;;      Params:         0       0       0       0       0       0       0       0       0
 10387 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10389 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10390 ;;Total ram usage:        0 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    2
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_main
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	text35
 10401  003CD4                     __ptext35:
 10402                           	callstack 0
 10403  003CD4                     _fifo_indicePrint_dec:
 10404                           	callstack 28
 10405  003CD4                     
 10406                           ;fifo.c: 336:     if( ind_print > 2 )
 10407  003CD4  0E02               	movlw	2
 10408  003CD6  6458               	cpfsgt	_ind_print^0,c
 10409  003CD8  EF70  F01E         	goto	u4181
 10410  003CDC  EF72  F01E         	goto	u4180
 10411  003CE0                     u4181:
 10412  003CE0  EF73  F01E         	goto	l805
 10413  003CE4                     u4180:
 10414  003CE4                     
 10415                           ;fifo.c: 337:         ind_print--;
 10416  003CE4  0658               	decf	_ind_print^0,f,c
 10417  003CE6                     l805:
 10418  003CE6  0012               	return		;funcret
 10419  003CE8                     __end_of_fifo_indicePrint_dec:
 10420                           	callstack 0
 10421                           
 10422 ;; *************** function _fifo_indice *****************
 10423 ;; Defined at:
 10424 ;;		line 307 in file "fifo.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;		None
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;		None
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      unsigned char 
 10431 ;; Registers used:
 10432 ;;		wreg, status,2
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10438 ;;      Params:         0       0       0       0       0       0       0       0       0
 10439 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10440 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10441 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10442 ;;Total ram usage:        0 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:    2
 10445 ;; This function calls:
 10446 ;;		Nothing
 10447 ;; This function is called by:
 10448 ;;		_main
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           	psect	text36
 10453  003DF2                     __ptext36:
 10454                           	callstack 0
 10455  003DF2                     _fifo_indice:
 10456                           	callstack 28
 10457  003DF2                     
 10458                           ;fifo.c: 309:     return ( ind_fila );
 10459  003DF2  5059               	movf	_ind_fila^0,w,c
 10460  003DF4  0012               	return		;funcret
 10461  003DF6                     __end_of_fifo_indice:
 10462                           	callstack 0
 10463                           
 10464 ;; *************** function _fifo_disponivel *****************
 10465 ;; Defined at:
 10466 ;;		line 312 in file "fifo.c"
 10467 ;; Parameters:    Size  Location     Type
 10468 ;;		None
 10469 ;; Auto vars:     Size  Location     Type
 10470 ;;		None
 10471 ;; Return value:  Size  Location     Type
 10472 ;;                  1    wreg      unsigned char 
 10473 ;; Registers used:
 10474 ;;		wreg, status,2, status,0
 10475 ;; Tracked objects:
 10476 ;;		On entry : 0/0
 10477 ;;		On exit  : 0/0
 10478 ;;		Unchanged: 0/0
 10479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10480 ;;      Params:         0       0       0       0       0       0       0       0       0
 10481 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10482 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10483 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10484 ;;Total ram usage:        0 bytes
 10485 ;; Hardware stack levels used:    1
 10486 ;; Hardware stack levels required when called:    2
 10487 ;; This function calls:
 10488 ;;		Nothing
 10489 ;; This function is called by:
 10490 ;;		_main
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           	psect	text37
 10495  003C7E                     __ptext37:
 10496                           	callstack 0
 10497  003C7E                     _fifo_disponivel:
 10498                           	callstack 28
 10499  003C7E                     
 10500                           ;fifo.c: 314:     return( ind_fila < 18 );
 10501  003C7E  0E11               	movlw	17
 10502  003C80  6459               	cpfsgt	_ind_fila^0,c
 10503  003C82  EF45  F01E         	goto	u4141
 10504  003C86  EF48  F01E         	goto	u4140
 10505  003C8A                     u4141:
 10506  003C8A  0E01               	movlw	1
 10507  003C8C  EF49  F01E         	goto	u4150
 10508  003C90                     u4140:
 10509  003C90  0E00               	movlw	0
 10510  003C92                     u4150:
 10511  003C92  0012               	return		;funcret
 10512  003C94                     __end_of_fifo_disponivel:
 10513                           	callstack 0
 10514                           
 10515 ;; *************** function _fifo_delete *****************
 10516 ;; Defined at:
 10517 ;;		line 183 in file "fifo.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;		None
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;		None
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  1    wreg      void 
 10524 ;; Registers used:
 10525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10531 ;;      Params:         0       0       0       0       0       0       0       0       0
 10532 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10533 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10534 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10535 ;;Total ram usage:        2 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:    5
 10538 ;; This function calls:
 10539 ;;		_alt_atuador
 10540 ;;		_codifica
 10541 ;;		_decodifica
 10542 ;;		_fifo_alinharPrint
 10543 ;; This function is called by:
 10544 ;;		_main
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           	psect	text38
 10549  003016                     __ptext38:
 10550                           	callstack 0
 10551  003016                     _fifo_delete:
 10552                           	callstack 25
 10553  003016                     
 10554                           ;fifo.c: 185:     if(ind_fila)
 10555  003016  5059               	movf	_ind_fila^0,w,c
 10556  003018  B4D8               	btfsc	status,2,c
 10557  00301A  EF11  F018         	goto	u4191
 10558  00301E  EF13  F018         	goto	u4190
 10559  003022                     u4191:
 10560  003022  EF54  F018         	goto	l5921
 10561  003026                     u4190:
 10562  003026                     
 10563                           ;fifo.c: 186:     {;fifo.c: 187:         if(ind_fila > 2)
 10564  003026  0E02               	movlw	2
 10565  003028  6459               	cpfsgt	_ind_fila^0,c
 10566  00302A  EF19  F018         	goto	u4201
 10567  00302E  EF1B  F018         	goto	u4200
 10568  003032                     u4201:
 10569  003032  EF1C  F018         	goto	l5915
 10570  003036                     u4200:
 10571  003036                     
 10572                           ;fifo.c: 188:             ind_fila--;
 10573  003036  0659               	decf	_ind_fila^0,f,c
 10574  003038                     l5915:
 10575                           
 10576                           ;fifo.c: 189:         if(fila[ind_fila] > 0xDC)
 10577  003038  0E15               	movlw	low _fila
 10578  00303A  2459               	addwf	_ind_fila^0,w,c
 10579  00303C  6ED9               	movwf	fsr2l,c
 10580  00303E  6ADA               	clrf	fsr2h,c
 10581  003040  0E00               	movlw	high _fila
 10582  003042  22DA               	addwfc	fsr2h,f,c
 10583  003044  0EDC               	movlw	220
 10584  003046  64DF               	cpfsgt	indf2,c
 10585  003048  EF28  F018         	goto	u4211
 10586  00304C  EF2A  F018         	goto	u4210
 10587  003050                     u4211:
 10588  003050  EF4C  F018         	goto	l5919
 10589  003054                     u4210:
 10590  003054                     
 10591                           ;fifo.c: 190:         {;fifo.c: 191:             decodifica(&fila[ind_fila]);
 10592  003054  0E15               	movlw	low _fila
 10593  003056  2459               	addwf	_ind_fila^0,w,c
 10594  003058  6E27               	movwf	decodifica@d^0,c
 10595  00305A  6A28               	clrf	(decodifica@d+1)^0,c
 10596  00305C  0E00               	movlw	high _fila
 10597  00305E  2228               	addwfc	(decodifica@d+1)^0,f,c
 10598  003060  ECC4  F012         	call	_decodifica	;wreg free
 10599                           
 10600                           ;fifo.c: 192:             alt_atuador(fila[ind_fila] & ~0x20);
 10601  003064  0E15               	movlw	low _fila
 10602  003066  2459               	addwf	_ind_fila^0,w,c
 10603  003068  6ED9               	movwf	fsr2l,c
 10604  00306A  6ADA               	clrf	fsr2h,c
 10605  00306C  0E00               	movlw	high _fila
 10606  00306E  22DA               	addwfc	fsr2h,f,c
 10607  003070  50DF               	movf	indf2,w,c
 10608  003072  0BDF               	andlw	223
 10609  003074  ECBE  F017         	call	_alt_atuador
 10610                           
 10611                           ;fifo.c: 193:             codifica('a',fila[ind_fila]);
 10612  003078  0E15               	movlw	low _fila
 10613  00307A  2459               	addwf	_ind_fila^0,w,c
 10614  00307C  6ED9               	movwf	fsr2l,c
 10615  00307E  6ADA               	clrf	fsr2h,c
 10616  003080  0E00               	movlw	high _fila
 10617  003082  22DA               	addwfc	fsr2h,f,c
 10618  003084  50DF               	movf	indf2,w,c
 10619  003086  6E36               	movwf	??_fifo_delete^0,c
 10620  003088  6A37               	clrf	(??_fifo_delete+1)^0,c
 10621  00308A  C036  F027         	movff	??_fifo_delete,codifica@dado
 10622  00308E  C037  F028         	movff	??_fifo_delete+1,codifica@dado+1
 10623  003092  0E61               	movlw	97
 10624  003094  EC1A  F012         	call	_codifica
 10625  003098                     l5919:
 10626                           
 10627                           ;fifo.c: 195:         fila[ind_fila] = 0;
 10628  003098  0E15               	movlw	low _fila
 10629  00309A  2459               	addwf	_ind_fila^0,w,c
 10630  00309C  6ED9               	movwf	fsr2l,c
 10631  00309E  6ADA               	clrf	fsr2h,c
 10632  0030A0  0E00               	movlw	high _fila
 10633  0030A2  22DA               	addwfc	fsr2h,f,c
 10634  0030A4  0E00               	movlw	0
 10635  0030A6  6EDF               	movwf	indf2,c
 10636  0030A8                     l5921:
 10637                           
 10638                           ;fifo.c: 197:     fifo_alinharPrint();
 10639  0030A8  ECD6  F014         	call	_fifo_alinharPrint	;wreg free
 10640  0030AC  0012               	return		;funcret
 10641  0030AE                     __end_of_fifo_delete:
 10642                           	callstack 0
 10643                           
 10644 ;; *************** function _decodifica *****************
 10645 ;; Defined at:
 10646 ;;		line 228 in file "fifo.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;  d               2    0[COMRAM] PTR unsigned char 
 10649 ;;		 -> printExec@passo(1), fifo_print@comando(1), fila(18), main@vetor_aux(16), 
 10650 ;;		 -> main@auxPasso(1), 
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;		None
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10662 ;;      Params:         2       0       0       0       0       0       0       0       0
 10663 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10664 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10665 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10666 ;;Total ram usage:        4 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    2
 10669 ;; This function calls:
 10670 ;;		Nothing
 10671 ;; This function is called by:
 10672 ;;		_main
 10673 ;;		_fifo_delete
 10674 ;;		_fifo_print
 10675 ;;		_printExec
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text39
 10680  002588                     __ptext39:
 10681                           	callstack 0
 10682  002588                     _decodifica:
 10683                           	callstack 27
 10684  002588                     
 10685                           ;fifo.c: 228: void decodifica( unsigned char *d );fifo.c: 229: {;fifo.c: 230:     if( *d
      +                           <= 100 )
 10686  002588  C027  FFD9         	movff	decodifica@d,fsr2l
 10687  00258C  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10688  002590  0E65               	movlw	101
 10689  002592  60DF               	cpfslt	indf2,c
 10690  002594  EFCE  F012         	goto	u3321
 10691  002598  EFD0  F012         	goto	u3320
 10692  00259C                     u3321:
 10693  00259C  EFD2  F012         	goto	l5217
 10694  0025A0                     u3320:
 10695  0025A0  EF63  F013         	goto	l768
 10696  0025A4                     l5217:
 10697  0025A4  C027  FFD9         	movff	decodifica@d,fsr2l
 10698  0025A8  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10699  0025AC  0EDD               	movlw	221
 10700  0025AE  60DF               	cpfslt	indf2,c
 10701  0025B0  EFDC  F012         	goto	u3331
 10702  0025B4  EFDE  F012         	goto	u3330
 10703  0025B8                     u3331:
 10704  0025B8  EF2E  F013         	goto	l5241
 10705  0025BC                     u3330:
 10706  0025BC                     
 10707                           ;fifo.c: 235:     {;fifo.c: 236:         *d -= 0x64;
 10708  0025BC  C027  FFD9         	movff	decodifica@d,fsr2l
 10709  0025C0  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10710  0025C4  0E64               	movlw	100
 10711  0025C6  5EDF               	subwf	indf2,f,c
 10712                           
 10713                           ;fifo.c: 237:     } else
 10714  0025C8  EF63  F013         	goto	l768
 10715  0025CC                     l5221:
 10716  0025CC  C027  FFD9         	movff	decodifica@d,fsr2l
 10717  0025D0  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10718  0025D4  0E41               	movlw	65
 10719  0025D6  6EDF               	movwf	indf2,c
 10720  0025D8  EF63  F013         	goto	l768
 10721  0025DC                     l5223:
 10722  0025DC  C027  FFD9         	movff	decodifica@d,fsr2l
 10723  0025E0  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10724  0025E4  0E61               	movlw	97
 10725  0025E6  6EDF               	movwf	indf2,c
 10726  0025E8  EF63  F013         	goto	l768
 10727  0025EC                     l5225:
 10728  0025EC  C027  FFD9         	movff	decodifica@d,fsr2l
 10729  0025F0  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10730  0025F4  0E42               	movlw	66
 10731  0025F6  6EDF               	movwf	indf2,c
 10732  0025F8  EF63  F013         	goto	l768
 10733  0025FC                     l5227:
 10734  0025FC  C027  FFD9         	movff	decodifica@d,fsr2l
 10735  002600  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10736  002604  0E62               	movlw	98
 10737  002606  6EDF               	movwf	indf2,c
 10738  002608  EF63  F013         	goto	l768
 10739  00260C                     l5229:
 10740  00260C  C027  FFD9         	movff	decodifica@d,fsr2l
 10741  002610  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10742  002614  0E43               	movlw	67
 10743  002616  6EDF               	movwf	indf2,c
 10744  002618  EF63  F013         	goto	l768
 10745  00261C                     l5231:
 10746  00261C  C027  FFD9         	movff	decodifica@d,fsr2l
 10747  002620  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10748  002624  0E63               	movlw	99
 10749  002626  6EDF               	movwf	indf2,c
 10750  002628  EF63  F013         	goto	l768
 10751  00262C                     l5233:
 10752  00262C  C027  FFD9         	movff	decodifica@d,fsr2l
 10753  002630  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10754  002634  0E44               	movlw	68
 10755  002636  6EDF               	movwf	indf2,c
 10756  002638  EF63  F013         	goto	l768
 10757  00263C                     l5235:
 10758  00263C  C027  FFD9         	movff	decodifica@d,fsr2l
 10759  002640  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10760  002644  0E64               	movlw	100
 10761  002646  6EDF               	movwf	indf2,c
 10762  002648  EF63  F013         	goto	l768
 10763  00264C                     l5237:
 10764  00264C  C027  FFD9         	movff	decodifica@d,fsr2l
 10765  002650  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10766  002654  0E00               	movlw	0
 10767  002656  6EDF               	movwf	indf2,c
 10768  002658  EF63  F013         	goto	l768
 10769  00265C                     l5241:
 10770  00265C  C027  FFD9         	movff	decodifica@d,fsr2l
 10771  002660  C028  FFDA         	movff	decodifica@d+1,fsr2h
 10772  002664  50DF               	movf	indf2,w,c
 10773  002666  6E29               	movwf	??_decodifica^0,c
 10774  002668  6A2A               	clrf	(??_decodifica+1)^0,c
 10775                           
 10776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10777                           ; Switch size 1, requested type "simple"
 10778                           ; Number of cases is 1, Range of values is 0 to 0
 10779                           ; switch strategies available:
 10780                           ; Name         Instructions Cycles
 10781                           ; simple_byte            4     3 (average)
 10782                           ;	Chosen strategy is simple_byte
 10783  00266A  502A               	movf	(??_decodifica+1)^0,w,c
 10784  00266C  0A00               	xorlw	0	; case 0
 10785  00266E  B4D8               	btfsc	status,2,c
 10786  002670  EF3C  F013         	goto	l7951
 10787  002674  EF63  F013         	goto	l768
 10788  002678                     l7951:
 10789                           
 10790                           ; Switch size 1, requested type "simple"
 10791                           ; Number of cases is 9, Range of values is 221 to 254
 10792                           ; switch strategies available:
 10793                           ; Name         Instructions Cycles
 10794                           ; simple_byte           28    15 (average)
 10795                           ;	Chosen strategy is simple_byte
 10796  002678  5029               	movf	??_decodifica^0,w,c
 10797  00267A  0ADD               	xorlw	221	; case 221
 10798  00267C  B4D8               	btfsc	status,2,c
 10799  00267E  EFE6  F012         	goto	l5221
 10800  002682  0A03               	xorlw	3	; case 222
 10801  002684  B4D8               	btfsc	status,2,c
 10802  002686  EFEE  F012         	goto	l5223
 10803  00268A  0A01               	xorlw	1	; case 223
 10804  00268C  B4D8               	btfsc	status,2,c
 10805  00268E  EFF6  F012         	goto	l5225
 10806  002692  0A3F               	xorlw	63	; case 224
 10807  002694  B4D8               	btfsc	status,2,c
 10808  002696  EFFE  F012         	goto	l5227
 10809  00269A  0A01               	xorlw	1	; case 225
 10810  00269C  B4D8               	btfsc	status,2,c
 10811  00269E  EF06  F013         	goto	l5229
 10812  0026A2  0A03               	xorlw	3	; case 226
 10813  0026A4  B4D8               	btfsc	status,2,c
 10814  0026A6  EF0E  F013         	goto	l5231
 10815  0026AA  0A01               	xorlw	1	; case 227
 10816  0026AC  B4D8               	btfsc	status,2,c
 10817  0026AE  EF16  F013         	goto	l5233
 10818  0026B2  0A07               	xorlw	7	; case 228
 10819  0026B4  B4D8               	btfsc	status,2,c
 10820  0026B6  EF1E  F013         	goto	l5235
 10821  0026BA  0A1A               	xorlw	26	; case 254
 10822  0026BC  B4D8               	btfsc	status,2,c
 10823  0026BE  EF26  F013         	goto	l5237
 10824  0026C2  EF63  F013         	goto	l768
 10825  0026C6                     l768:
 10826  0026C6  0012               	return		;funcret
 10827  0026C8                     __end_of_decodifica:
 10828                           	callstack 0
 10829                           
 10830 ;; *************** function _alt_atuador *****************
 10831 ;; Defined at:
 10832 ;;		line 92 in file "fifo.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  tecla           1    wreg     unsigned char 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  tecla           1    2[COMRAM] unsigned char 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      void 
 10839 ;; Registers used:
 10840 ;;		wreg, status,2, status,0
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0
 10847 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10848 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10849 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10850 ;;Total ram usage:        3 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    2
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_main
 10857 ;;		_manipula_atuadores_init
 10858 ;;		_fifo_delete
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text40
 10863  002F7C                     __ptext40:
 10864                           	callstack 0
 10865  002F7C                     _alt_atuador:
 10866                           	callstack 27
 10867                           
 10868                           ;incstack = 0
 10869                           ;alt_atuador@tecla stored from wreg
 10870  002F7C  6E29               	movwf	alt_atuador@tecla^0,c
 10871  002F7E                     
 10872                           ;fifo.c: 92: void alt_atuador( char tecla );fifo.c: 93: {;fifo.c: 94:     switch(tecla)
 10873  002F7E  EFED  F017         	goto	l5251
 10874  002F82                     l685:
 10875  002F82  A013               	btfss	_atuador^0,0,c
 10876  002F84  EFC6  F017         	goto	u3341
 10877  002F88  EFC9  F017         	goto	u3340
 10878  002F8C                     u3341:
 10879  002F8C  8013               	bsf	_atuador^0,0,c
 10880  002F8E  EFCA  F017         	goto	u3355
 10881  002F92                     u3340:
 10882  002F92  9013               	bcf	_atuador^0,0,c
 10883  002F94                     u3355:
 10884  002F94  EF0A  F018         	goto	l690
 10885  002F98                     l687:
 10886  002F98  A213               	btfss	_atuador^0,1,c
 10887  002F9A  EFD1  F017         	goto	u3361
 10888  002F9E  EFD4  F017         	goto	u3360
 10889  002FA2                     u3361:
 10890  002FA2  8213               	bsf	_atuador^0,1,c
 10891  002FA4  EFD5  F017         	goto	u3375
 10892  002FA8                     u3360:
 10893  002FA8  9213               	bcf	_atuador^0,1,c
 10894  002FAA                     u3375:
 10895  002FAA  EF0A  F018         	goto	l690
 10896  002FAE                     l688:
 10897  002FAE  A413               	btfss	_atuador^0,2,c
 10898  002FB0  EFDC  F017         	goto	u3381
 10899  002FB4  EFDF  F017         	goto	u3380
 10900  002FB8                     u3381:
 10901  002FB8  8413               	bsf	_atuador^0,2,c
 10902  002FBA  EFE0  F017         	goto	u3395
 10903  002FBE                     u3380:
 10904  002FBE  9413               	bcf	_atuador^0,2,c
 10905  002FC0                     u3395:
 10906  002FC0  EF0A  F018         	goto	l690
 10907  002FC4                     l689:
 10908  002FC4  A613               	btfss	_atuador^0,3,c
 10909  002FC6  EFE7  F017         	goto	u3401
 10910  002FCA  EFEA  F017         	goto	u3400
 10911  002FCE                     u3401:
 10912  002FCE  8613               	bsf	_atuador^0,3,c
 10913  002FD0  EFEB  F017         	goto	u3415
 10914  002FD4                     u3400:
 10915  002FD4  9613               	bcf	_atuador^0,3,c
 10916  002FD6                     u3415:
 10917  002FD6  EF0A  F018         	goto	l690
 10918  002FDA                     l5251:
 10919  002FDA  5029               	movf	alt_atuador@tecla^0,w,c
 10920  002FDC  6E27               	movwf	??_alt_atuador^0,c
 10921  002FDE  6A28               	clrf	(??_alt_atuador+1)^0,c
 10922                           
 10923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10924                           ; Switch size 1, requested type "simple"
 10925                           ; Number of cases is 1, Range of values is 0 to 0
 10926                           ; switch strategies available:
 10927                           ; Name         Instructions Cycles
 10928                           ; simple_byte            4     3 (average)
 10929                           ;	Chosen strategy is simple_byte
 10930  002FE0  5028               	movf	(??_alt_atuador+1)^0,w,c
 10931  002FE2  0A00               	xorlw	0	; case 0
 10932  002FE4  B4D8               	btfsc	status,2,c
 10933  002FE6  EFF7  F017         	goto	l7953
 10934  002FEA  EF0A  F018         	goto	l690
 10935  002FEE                     l7953:
 10936                           
 10937                           ; Switch size 1, requested type "simple"
 10938                           ; Number of cases is 4, Range of values is 65 to 68
 10939                           ; switch strategies available:
 10940                           ; Name         Instructions Cycles
 10941                           ; simple_byte           13     7 (average)
 10942                           ;	Chosen strategy is simple_byte
 10943  002FEE  5027               	movf	??_alt_atuador^0,w,c
 10944  002FF0  0A41               	xorlw	65	; case 65
 10945  002FF2  B4D8               	btfsc	status,2,c
 10946  002FF4  EFC1  F017         	goto	l685
 10947  002FF8  0A03               	xorlw	3	; case 66
 10948  002FFA  B4D8               	btfsc	status,2,c
 10949  002FFC  EFCC  F017         	goto	l687
 10950  003000  0A01               	xorlw	1	; case 67
 10951  003002  B4D8               	btfsc	status,2,c
 10952  003004  EFD7  F017         	goto	l688
 10953  003008  0A07               	xorlw	7	; case 68
 10954  00300A  B4D8               	btfsc	status,2,c
 10955  00300C  EFE2  F017         	goto	l689
 10956  003010  EF0A  F018         	goto	l690
 10957  003014                     l690:
 10958  003014  0012               	return		;funcret
 10959  003016                     __end_of_alt_atuador:
 10960                           	callstack 0
 10961                           
 10962 ;; *************** function _fifo_adrs *****************
 10963 ;; Defined at:
 10964 ;;		line 178 in file "fifo.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  2    0[COMRAM] PTR unsigned char 
 10971 ;; Registers used:
 10972 ;;		wreg, status,2, status,0
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10978 ;;      Params:         2       0       0       0       0       0       0       0       0
 10979 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10980 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10981 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10982 ;;Total ram usage:        2 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; Hardware stack levels required when called:    2
 10985 ;; This function calls:
 10986 ;;		Nothing
 10987 ;; This function is called by:
 10988 ;;		_main
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           	psect	text41
 10993  003DB4                     __ptext41:
 10994                           	callstack 0
 10995  003DB4                     _fifo_adrs:
 10996                           	callstack 28
 10997  003DB4                     
 10998                           ;fifo.c: 180:     return fila;
 10999  003DB4  0E15               	movlw	low _fila
 11000  003DB6  6E27               	movwf	?_fifo_adrs^0,c
 11001  003DB8  0E00               	movlw	high _fila
 11002  003DBA  6E28               	movwf	(?_fifo_adrs+1)^0,c
 11003  003DBC  0012               	return		;funcret
 11004  003DBE                     __end_of_fifo_adrs:
 11005                           	callstack 0
 11006                           
 11007 ;; *************** function _fifo_add_tempo *****************
 11008 ;; Defined at:
 11009 ;;		line 269 in file "fifo.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;  t               1    wreg     const unsigned char 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  t               1   15[COMRAM] const unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  1    wreg      void 
 11016 ;; Registers used:
 11017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11023 ;;      Params:         0       0       0       0       0       0       0       0       0
 11024 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11026 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11027 ;;Total ram usage:        1 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    5
 11030 ;; This function calls:
 11031 ;;		_codifica
 11032 ;;		_fifo_alinharPrint
 11033 ;; This function is called by:
 11034 ;;		_main
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           	psect	text42
 11039  0035B2                     __ptext42:
 11040                           	callstack 0
 11041  0035B2                     _fifo_add_tempo:
 11042                           	callstack 25
 11043                           
 11044                           ;incstack = 0
 11045                           ;fifo_add_tempo@t stored from wreg
 11046  0035B2  6E36               	movwf	fifo_add_tempo@t^0,c
 11047  0035B4                     
 11048                           ;fifo.c: 269: void fifo_add_tempo(const char t);fifo.c: 270: {;fifo.c: 271:     if(ind_f
      +                          ila < 18)
 11049  0035B4  0E12               	movlw	18
 11050  0035B6  6059               	cpfslt	_ind_fila^0,c
 11051  0035B8  EFE0  F01A         	goto	u3911
 11052  0035BC  EFE2  F01A         	goto	u3910
 11053  0035C0                     u3911:
 11054  0035C0  EF02  F01B         	goto	l5695
 11055  0035C4                     u3910:
 11056  0035C4                     
 11057                           ;fifo.c: 272:     {;fifo.c: 273:         if(t)
 11058  0035C4  5036               	movf	fifo_add_tempo@t^0,w,c
 11059  0035C6  B4D8               	btfsc	status,2,c
 11060  0035C8  EFE8  F01A         	goto	u3921
 11061  0035CC  EFEA  F01A         	goto	u3920
 11062  0035D0                     u3921:
 11063  0035D0  EF02  F01B         	goto	l5695
 11064  0035D4                     u3920:
 11065  0035D4                     
 11066                           ;fifo.c: 274:         {;fifo.c: 275:             codifica('t', &t);
 11067  0035D4  0E36               	movlw	low fifo_add_tempo@t
 11068  0035D6  6E27               	movwf	codifica@dado^0,c
 11069  0035D8  0E00               	movlw	high fifo_add_tempo@t
 11070  0035DA  6E28               	movwf	(codifica@dado+1)^0,c
 11071  0035DC  0E74               	movlw	116
 11072  0035DE  EC1A  F012         	call	_codifica
 11073  0035E2                     
 11074                           ;fifo.c: 276:             fila[ind_fila] = t;
 11075  0035E2  0E15               	movlw	low _fila
 11076  0035E4  2459               	addwf	_ind_fila^0,w,c
 11077  0035E6  6ED9               	movwf	fsr2l,c
 11078  0035E8  6ADA               	clrf	fsr2h,c
 11079  0035EA  0E00               	movlw	high _fila
 11080  0035EC  22DA               	addwfc	fsr2h,f,c
 11081  0035EE  C036  FFDF         	movff	fifo_add_tempo@t,indf2
 11082  0035F2                     
 11083                           ;fifo.c: 277:             ind_fila++;
 11084  0035F2  2A59               	incf	_ind_fila^0,f,c
 11085  0035F4                     
 11086                           ;fifo.c: 278:             fila[ind_fila] = 0;
 11087  0035F4  0E15               	movlw	low _fila
 11088  0035F6  2459               	addwf	_ind_fila^0,w,c
 11089  0035F8  6ED9               	movwf	fsr2l,c
 11090  0035FA  6ADA               	clrf	fsr2h,c
 11091  0035FC  0E00               	movlw	high _fila
 11092  0035FE  22DA               	addwfc	fsr2h,f,c
 11093  003600  0E00               	movlw	0
 11094  003602  6EDF               	movwf	indf2,c
 11095  003604                     l5695:
 11096                           
 11097                           ;fifo.c: 281:     fifo_alinharPrint();
 11098  003604  ECD6  F014         	call	_fifo_alinharPrint	;wreg free
 11099  003608  0012               	return		;funcret
 11100  00360A                     __end_of_fifo_add_tempo:
 11101                           	callstack 0
 11102                           
 11103 ;; *************** function _fifo_add_control *****************
 11104 ;; Defined at:
 11105 ;;		line 284 in file "fifo.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;  c               1    wreg     const unsigned char 
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;  c               1   15[COMRAM] const unsigned char 
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      void 
 11112 ;; Registers used:
 11113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11114 ;; Tracked objects:
 11115 ;;		On entry : 0/0
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11119 ;;      Params:         0       0       0       0       0       0       0       0       0
 11120 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11121 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11122 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11123 ;;Total ram usage:        1 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    5
 11126 ;; This function calls:
 11127 ;;		_codifica
 11128 ;;		_fifo_alinharPrint
 11129 ;; This function is called by:
 11130 ;;		_main
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text43
 11135  003700                     __ptext43:
 11136                           	callstack 0
 11137  003700                     _fifo_add_control:
 11138                           	callstack 25
 11139                           
 11140                           ;incstack = 0
 11141                           ;fifo_add_control@c stored from wreg
 11142  003700  6E36               	movwf	fifo_add_control@c^0,c
 11143  003702                     
 11144                           ;fifo.c: 284: void fifo_add_control(const char c);fifo.c: 285: {;fifo.c: 286:     if(ind
      +                          _fila < 18)
 11145  003702  0E12               	movlw	18
 11146  003704  6059               	cpfslt	_ind_fila^0,c
 11147  003706  EF87  F01B         	goto	u3901
 11148  00370A  EF89  F01B         	goto	u3900
 11149  00370E                     u3901:
 11150  00370E  EFA1  F01B         	goto	l5681
 11151  003712                     u3900:
 11152  003712                     
 11153                           ;fifo.c: 287:     {;fifo.c: 290:             codifica('p', &c);
 11154  003712  0E36               	movlw	low fifo_add_control@c
 11155  003714  6E27               	movwf	codifica@dado^0,c
 11156  003716  0E00               	movlw	high fifo_add_control@c
 11157  003718  6E28               	movwf	(codifica@dado+1)^0,c
 11158  00371A  0E70               	movlw	112
 11159  00371C  EC1A  F012         	call	_codifica
 11160  003720                     
 11161                           ;fifo.c: 291:             fila[ind_fila] = c;
 11162  003720  0E15               	movlw	low _fila
 11163  003722  2459               	addwf	_ind_fila^0,w,c
 11164  003724  6ED9               	movwf	fsr2l,c
 11165  003726  6ADA               	clrf	fsr2h,c
 11166  003728  0E00               	movlw	high _fila
 11167  00372A  22DA               	addwfc	fsr2h,f,c
 11168  00372C  C036  FFDF         	movff	fifo_add_control@c,indf2
 11169  003730                     
 11170                           ;fifo.c: 292:             ind_fila++;
 11171  003730  2A59               	incf	_ind_fila^0,f,c
 11172  003732                     
 11173                           ;fifo.c: 293:             fila[ind_fila] = 0;
 11174  003732  0E15               	movlw	low _fila
 11175  003734  2459               	addwf	_ind_fila^0,w,c
 11176  003736  6ED9               	movwf	fsr2l,c
 11177  003738  6ADA               	clrf	fsr2h,c
 11178  00373A  0E00               	movlw	high _fila
 11179  00373C  22DA               	addwfc	fsr2h,f,c
 11180  00373E  0E00               	movlw	0
 11181  003740  6EDF               	movwf	indf2,c
 11182  003742                     l5681:
 11183                           
 11184                           ;fifo.c: 296:     fifo_alinharPrint();
 11185  003742  ECD6  F014         	call	_fifo_alinharPrint	;wreg free
 11186  003746  0012               	return		;funcret
 11187  003748                     __end_of_fifo_add_control:
 11188                           	callstack 0
 11189                           
 11190 ;; *************** function _fifo_add_ciclo *****************
 11191 ;; Defined at:
 11192 ;;		line 299 in file "fifo.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  ciclos          2    0[COMRAM] unsigned int 
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;		None
 11197 ;; Return value:  Size  Location     Type
 11198 ;;                  1    wreg      void 
 11199 ;; Registers used:
 11200 ;;		wreg, status,2
 11201 ;; Tracked objects:
 11202 ;;		On entry : 0/0
 11203 ;;		On exit  : 0/0
 11204 ;;		Unchanged: 0/0
 11205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11206 ;;      Params:         2       0       0       0       0       0       0       0       0
 11207 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11208 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11209 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11210 ;;Total ram usage:        2 bytes
 11211 ;; Hardware stack levels used:    1
 11212 ;; Hardware stack levels required when called:    2
 11213 ;; This function calls:
 11214 ;;		Nothing
 11215 ;; This function is called by:
 11216 ;;		_main
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           	psect	text44
 11221  003DBE                     __ptext44:
 11222                           	callstack 0
 11223  003DBE                     _fifo_add_ciclo:
 11224                           	callstack 28
 11225  003DBE                     
 11226                           ;fifo.c: 299: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 300: {;fifo.c: 301:     f
      +                          ila[0] = ciclos & 0x00ff;
 11227  003DBE  C027  F015         	movff	fifo_add_ciclo@ciclos,_fila
 11228  003DC2                     
 11229                           ;fifo.c: 302:     fila[1] = ciclos >> 8;
 11230  003DC2  5028               	movf	(fifo_add_ciclo@ciclos+1)^0,w,c
 11231  003DC4  6E16               	movwf	(_fila+1)^0,c
 11232  003DC6  0012               	return		;funcret
 11233  003DC8                     __end_of_fifo_add_ciclo:
 11234                           	callstack 0
 11235                           
 11236 ;; *************** function _fifo_add *****************
 11237 ;; Defined at:
 11238 ;;		line 254 in file "fifo.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;  passo           1    wreg     const unsigned char 
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  passo           1   15[COMRAM] const unsigned char 
 11243 ;; Return value:  Size  Location     Type
 11244 ;;                  1    wreg      void 
 11245 ;; Registers used:
 11246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11247 ;; Tracked objects:
 11248 ;;		On entry : 0/0
 11249 ;;		On exit  : 0/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11252 ;;      Params:         0       0       0       0       0       0       0       0       0
 11253 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11254 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11255 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11256 ;;Total ram usage:        1 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; Hardware stack levels required when called:    5
 11259 ;; This function calls:
 11260 ;;		_codifica
 11261 ;;		_fifo_alinharPrint
 11262 ;; This function is called by:
 11263 ;;		_main
 11264 ;; This function uses a non-reentrant model
 11265 ;;
 11266                           
 11267                           	psect	text45
 11268  00360A                     __ptext45:
 11269                           	callstack 0
 11270  00360A                     _fifo_add:
 11271                           	callstack 25
 11272                           
 11273                           ;incstack = 0
 11274                           ;fifo_add@passo stored from wreg
 11275  00360A  6E36               	movwf	fifo_add@passo^0,c
 11276  00360C                     
 11277                           ;fifo.c: 254: void fifo_add(const char passo);fifo.c: 255: {;fifo.c: 256:     if(ind_fil
      +                          a < 18)
 11278  00360C  0E12               	movlw	18
 11279  00360E  6059               	cpfslt	_ind_fila^0,c
 11280  003610  EF0C  F01B         	goto	u3931
 11281  003614  EF0E  F01B         	goto	u3930
 11282  003618                     u3931:
 11283  003618  EF2E  F01B         	goto	l5709
 11284  00361C                     u3930:
 11285  00361C                     
 11286                           ;fifo.c: 257:     {;fifo.c: 258:         if(passo)
 11287  00361C  5036               	movf	fifo_add@passo^0,w,c
 11288  00361E  B4D8               	btfsc	status,2,c
 11289  003620  EF14  F01B         	goto	u3941
 11290  003624  EF16  F01B         	goto	u3940
 11291  003628                     u3941:
 11292  003628  EF2E  F01B         	goto	l5709
 11293  00362C                     u3940:
 11294  00362C                     
 11295                           ;fifo.c: 259:         {;fifo.c: 260:             codifica('a', &passo);
 11296  00362C  0E36               	movlw	low fifo_add@passo
 11297  00362E  6E27               	movwf	codifica@dado^0,c
 11298  003630  0E00               	movlw	high fifo_add@passo
 11299  003632  6E28               	movwf	(codifica@dado+1)^0,c
 11300  003634  0E61               	movlw	97
 11301  003636  EC1A  F012         	call	_codifica
 11302  00363A                     
 11303                           ;fifo.c: 261:             fila[ind_fila] = passo;
 11304  00363A  0E15               	movlw	low _fila
 11305  00363C  2459               	addwf	_ind_fila^0,w,c
 11306  00363E  6ED9               	movwf	fsr2l,c
 11307  003640  6ADA               	clrf	fsr2h,c
 11308  003642  0E00               	movlw	high _fila
 11309  003644  22DA               	addwfc	fsr2h,f,c
 11310  003646  C036  FFDF         	movff	fifo_add@passo,indf2
 11311  00364A                     
 11312                           ;fifo.c: 262:             ind_fila++;
 11313  00364A  2A59               	incf	_ind_fila^0,f,c
 11314  00364C                     
 11315                           ;fifo.c: 263:             fila[ind_fila] = 0;
 11316  00364C  0E15               	movlw	low _fila
 11317  00364E  2459               	addwf	_ind_fila^0,w,c
 11318  003650  6ED9               	movwf	fsr2l,c
 11319  003652  6ADA               	clrf	fsr2h,c
 11320  003654  0E00               	movlw	high _fila
 11321  003656  22DA               	addwfc	fsr2h,f,c
 11322  003658  0E00               	movlw	0
 11323  00365A  6EDF               	movwf	indf2,c
 11324  00365C                     l5709:
 11325                           
 11326                           ;fifo.c: 266:      fifo_alinharPrint();
 11327  00365C  ECD6  F014         	call	_fifo_alinharPrint	;wreg free
 11328  003660  0012               	return		;funcret
 11329  003662                     __end_of_fifo_add:
 11330                           	callstack 0
 11331                           
 11332 ;; *************** function _fifo_alinharPrint *****************
 11333 ;; Defined at:
 11334 ;;		line 482 in file "fifo.c"
 11335 ;; Parameters:    Size  Location     Type
 11336 ;;		None
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;  aux             1   14[COMRAM] unsigned char 
 11339 ;;  i               1   13[COMRAM] unsigned char 
 11340 ;;  cont            1   12[COMRAM] unsigned char 
 11341 ;; Return value:  Size  Location     Type
 11342 ;;                  1    wreg      void 
 11343 ;; Registers used:
 11344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11345 ;; Tracked objects:
 11346 ;;		On entry : 0/0
 11347 ;;		On exit  : 0/0
 11348 ;;		Unchanged: 0/0
 11349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11350 ;;      Params:         0       0       0       0       0       0       0       0       0
 11351 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11352 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11353 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11354 ;;Total ram usage:        4 bytes
 11355 ;; Hardware stack levels used:    1
 11356 ;; Hardware stack levels required when called:    4
 11357 ;; This function calls:
 11358 ;;		_dignum_tam
 11359 ;; This function is called by:
 11360 ;;		_fifo_delete
 11361 ;;		_fifo_add
 11362 ;;		_fifo_add_tempo
 11363 ;;		_fifo_add_control
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367                           	psect	text46
 11368  0029AC                     __ptext46:
 11369                           	callstack 0
 11370  0029AC                     _fifo_alinharPrint:
 11371                           	callstack 25
 11372  0029AC                     
 11373                           ;fifo.c: 484:     unsigned char i;;fifo.c: 485:     unsigned char aux;;fifo.c: 486:     
      +                          unsigned char cont = 0;
 11374  0029AC  0E00               	movlw	0
 11375  0029AE  6E33               	movwf	fifo_alinharPrint@cont^0,c
 11376  0029B0                     
 11377                           ;fifo.c: 488:     for( i=ind_fila-1; i>=2; i-- )
 11378  0029B0  0459               	decf	_ind_fila^0,w,c
 11379  0029B2  6E34               	movwf	fifo_alinharPrint@i^0,c
 11380  0029B4                     l5389:
 11381  0029B4  0E02               	movlw	2
 11382  0029B6  6034               	cpfslt	fifo_alinharPrint@i^0,c
 11383  0029B8  EFE0  F014         	goto	u3571
 11384  0029BC  EFE2  F014         	goto	u3570
 11385  0029C0                     u3571:
 11386  0029C0  EFE4  F014         	goto	l5393
 11387  0029C4                     u3570:
 11388  0029C4  EF49  F015         	goto	l864
 11389  0029C8                     l5393:
 11390                           
 11391                           ;fifo.c: 489:     {;fifo.c: 490:         aux = fila[i];
 11392  0029C8  0E15               	movlw	low _fila
 11393  0029CA  2434               	addwf	fifo_alinharPrint@i^0,w,c
 11394  0029CC  6ED9               	movwf	fsr2l,c
 11395  0029CE  6ADA               	clrf	fsr2h,c
 11396  0029D0  0E00               	movlw	high _fila
 11397  0029D2  22DA               	addwfc	fsr2h,f,c
 11398  0029D4  50DF               	movf	indf2,w,c
 11399  0029D6  6E35               	movwf	fifo_alinharPrint@aux^0,c
 11400  0029D8                     
 11401                           ;fifo.c: 491:         if( aux <= 0x64 )
 11402  0029D8  0E65               	movlw	101
 11403  0029DA  6035               	cpfslt	fifo_alinharPrint@aux^0,c
 11404  0029DC  EFF2  F014         	goto	u3581
 11405  0029E0  EFF4  F014         	goto	u3580
 11406  0029E4                     u3581:
 11407  0029E4  EFFC  F014         	goto	l5399
 11408  0029E8                     u3580:
 11409  0029E8                     
 11410                           ;fifo.c: 492:             cont += dignum_tam( aux )+1;
 11411  0029E8  C035  F02F         	movff	fifo_alinharPrint@aux,dignum_tam@num
 11412  0029EC  6A30               	clrf	(dignum_tam@num+1)^0,c
 11413  0029EE  EC72  F01C         	call	_dignum_tam	;wreg free
 11414  0029F2  6E32               	movwf	??_fifo_alinharPrint^0,c
 11415  0029F4  2832               	incf	??_fifo_alinharPrint^0,w,c
 11416  0029F6  2633               	addwf	fifo_alinharPrint@cont^0,f,c
 11417  0029F8                     l5399:
 11418                           
 11419                           ;fifo.c: 494:         if( aux > 0x64 && aux <= 0xDC )
 11420  0029F8  0E64               	movlw	100
 11421  0029FA  6435               	cpfsgt	fifo_alinharPrint@aux^0,c
 11422  0029FC  EF02  F015         	goto	u3591
 11423  002A00  EF04  F015         	goto	u3590
 11424  002A04                     u3591:
 11425  002A04  EF17  F015         	goto	l5405
 11426  002A08                     u3590:
 11427  002A08  0EDD               	movlw	221
 11428  002A0A  6035               	cpfslt	fifo_alinharPrint@aux^0,c
 11429  002A0C  EF0A  F015         	goto	u3601
 11430  002A10  EF0C  F015         	goto	u3600
 11431  002A14                     u3601:
 11432  002A14  EF17  F015         	goto	l5405
 11433  002A18                     u3600:
 11434  002A18                     
 11435                           ;fifo.c: 495:             cont += dignum_tam( aux - 0x64 )+1;
 11436  002A18  0E9C               	movlw	156
 11437  002A1A  2435               	addwf	fifo_alinharPrint@aux^0,w,c
 11438  002A1C  6E2F               	movwf	dignum_tam@num^0,c
 11439  002A1E  6A30               	clrf	(dignum_tam@num+1)^0,c
 11440  002A20  0EFF               	movlw	255
 11441  002A22  2230               	addwfc	(dignum_tam@num+1)^0,f,c
 11442  002A24  EC72  F01C         	call	_dignum_tam	;wreg free
 11443  002A28  6E32               	movwf	??_fifo_alinharPrint^0,c
 11444  002A2A  2832               	incf	??_fifo_alinharPrint^0,w,c
 11445  002A2C  2633               	addwf	fifo_alinharPrint@cont^0,f,c
 11446  002A2E                     l5405:
 11447                           
 11448                           ;fifo.c: 497:         if( aux > 0xDC && aux < 0xFE )
 11449  002A2E  0EDC               	movlw	220
 11450  002A30  6435               	cpfsgt	fifo_alinharPrint@aux^0,c
 11451  002A32  EF1D  F015         	goto	u3611
 11452  002A36  EF1F  F015         	goto	u3610
 11453  002A3A                     u3611:
 11454  002A3A  EF29  F015         	goto	l860
 11455  002A3E                     u3610:
 11456  002A3E  0EFE               	movlw	254
 11457  002A40  6035               	cpfslt	fifo_alinharPrint@aux^0,c
 11458  002A42  EF25  F015         	goto	u3621
 11459  002A46  EF27  F015         	goto	u3620
 11460  002A4A                     u3621:
 11461  002A4A  EF29  F015         	goto	l860
 11462  002A4E                     u3620:
 11463  002A4E                     
 11464                           ;fifo.c: 498:             cont += 2;
 11465  002A4E  0E02               	movlw	2
 11466  002A50  2633               	addwf	fifo_alinharPrint@cont^0,f,c
 11467  002A52                     l860:
 11468                           
 11469                           ;fifo.c: 500:         if( aux == 0xFE )
 11470  002A52  0EFE               	movlw	254
 11471  002A54  1835               	xorwf	fifo_alinharPrint@aux^0,w,c
 11472  002A56  A4D8               	btfss	status,2,c
 11473  002A58  EF30  F015         	goto	u3631
 11474  002A5C  EF32  F015         	goto	u3630
 11475  002A60                     u3631:
 11476  002A60  EF3A  F015         	goto	l5413
 11477  002A64                     u3630:
 11478  002A64                     
 11479                           ;fifo.c: 501:             cont += dignum_tam( aux )+1;
 11480  002A64  C035  F02F         	movff	fifo_alinharPrint@aux,dignum_tam@num
 11481  002A68  6A30               	clrf	(dignum_tam@num+1)^0,c
 11482  002A6A  EC72  F01C         	call	_dignum_tam	;wreg free
 11483  002A6E  6E32               	movwf	??_fifo_alinharPrint^0,c
 11484  002A70  2832               	incf	??_fifo_alinharPrint^0,w,c
 11485  002A72  2633               	addwf	fifo_alinharPrint@cont^0,f,c
 11486  002A74                     l5413:
 11487                           
 11488                           ;fifo.c: 503:         if( cont > 20 )
 11489  002A74  0E14               	movlw	20
 11490  002A76  6433               	cpfsgt	fifo_alinharPrint@cont^0,c
 11491  002A78  EF40  F015         	goto	u3641
 11492  002A7C  EF42  F015         	goto	u3640
 11493  002A80                     u3641:
 11494  002A80  EF44  F015         	goto	l862
 11495  002A84                     u3640:
 11496  002A84  EF49  F015         	goto	l864
 11497  002A88                     l862:
 11498                           
 11499                           ;fifo.c: 508:             ind_print = i;
 11500  002A88  C034  F058         	movff	fifo_alinharPrint@i,_ind_print
 11501  002A8C                     
 11502                           ;fifo.c: 509:     }
 11503  002A8C  0634               	decf	fifo_alinharPrint@i^0,f,c
 11504  002A8E  EFDA  F014         	goto	l5389
 11505  002A92                     l864:
 11506  002A92  0012               	return		;funcret
 11507  002A94                     __end_of_fifo_alinharPrint:
 11508                           	callstack 0
 11509                           
 11510 ;; *************** function _dignum_tam *****************
 11511 ;; Defined at:
 11512 ;;		line 470 in file "fifo.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  num             2    8[COMRAM] int 
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;  tam             1   10[COMRAM] unsigned char 
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  1    wreg      unsigned char 
 11519 ;; Registers used:
 11520 ;;		wreg, status,2, status,0, cstack
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11526 ;;      Params:         2       0       0       0       0       0       0       0       0
 11527 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11528 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11529 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11530 ;;Total ram usage:        3 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    3
 11533 ;; This function calls:
 11534 ;;		___awdiv
 11535 ;; This function is called by:
 11536 ;;		_fifo_alinharPrint
 11537 ;;		_printExec
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           	psect	text47
 11542  0038E4                     __ptext47:
 11543                           	callstack 0
 11544  0038E4                     _dignum_tam:
 11545                           	callstack 26
 11546  0038E4                     
 11547                           ;fifo.c: 470: unsigned char dignum_tam(int num);fifo.c: 471: {;fifo.c: 472:     unsigned
      +                           char tam = 0;
 11548  0038E4  0E00               	movlw	0
 11549  0038E6  6E31               	movwf	dignum_tam@tam^0,c
 11550                           
 11551                           ;fifo.c: 474:     while(num != 0)
 11552  0038E8  EF85  F01C         	goto	l5137
 11553  0038EC                     l5133:
 11554                           
 11555                           ;fifo.c: 475:     {;fifo.c: 476:         num /= 10;
 11556  0038EC  C02F  F027         	movff	dignum_tam@num,___awdiv@dividend
 11557  0038F0  C030  F028         	movff	dignum_tam@num+1,___awdiv@dividend+1
 11558  0038F4  0E00               	movlw	0
 11559  0038F6  6E2A               	movwf	(___awdiv@divisor+1)^0,c
 11560  0038F8  0E0A               	movlw	10
 11561  0038FA  6E29               	movwf	___awdiv@divisor^0,c
 11562  0038FC  ECBB  F015         	call	___awdiv	;wreg free
 11563  003900  C027  F02F         	movff	?___awdiv,dignum_tam@num
 11564  003904  C028  F030         	movff	?___awdiv+1,dignum_tam@num+1
 11565  003908                     
 11566                           ;fifo.c: 477:         tam++;
 11567  003908  2A31               	incf	dignum_tam@tam^0,f,c
 11568  00390A                     l5137:
 11569                           
 11570                           ;fifo.c: 474:     while(num != 0)
 11571  00390A  502F               	movf	dignum_tam@num^0,w,c
 11572  00390C  1030               	iorwf	(dignum_tam@num+1)^0,w,c
 11573  00390E  A4D8               	btfss	status,2,c
 11574  003910  EF8C  F01C         	goto	u3171
 11575  003914  EF8E  F01C         	goto	u3170
 11576  003918                     u3171:
 11577  003918  EF76  F01C         	goto	l5133
 11578  00391C                     u3170:
 11579  00391C                     
 11580                           ;fifo.c: 479:     return ( tam );
 11581  00391C  5031               	movf	dignum_tam@tam^0,w,c
 11582  00391E  0012               	return		;funcret
 11583  003920                     __end_of_dignum_tam:
 11584                           	callstack 0
 11585                           
 11586 ;; *************** function ___awdiv *****************
 11587 ;; Defined at:
 11588 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;  dividend        2    0[COMRAM] int 
 11591 ;;  divisor         2    2[COMRAM] int 
 11592 ;; Auto vars:     Size  Location     Type
 11593 ;;  quotient        2    6[COMRAM] int 
 11594 ;;  sign            1    5[COMRAM] unsigned char 
 11595 ;;  counter         1    4[COMRAM] unsigned char 
 11596 ;; Return value:  Size  Location     Type
 11597 ;;                  2    0[COMRAM] int 
 11598 ;; Registers used:
 11599 ;;		wreg, status,2, status,0
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11605 ;;      Params:         4       0       0       0       0       0       0       0       0
 11606 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11608 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11609 ;;Total ram usage:        8 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    2
 11612 ;; This function calls:
 11613 ;;		Nothing
 11614 ;; This function is called by:
 11615 ;;		_dispLCD_num
 11616 ;;		_fifo_print
 11617 ;;		_dignum_tam
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text48
 11622  002B76                     __ptext48:
 11623                           	callstack 0
 11624  002B76                     ___awdiv:
 11625                           	callstack 26
 11626  002B76  0E00               	movlw	0
 11627  002B78  6E2C               	movwf	___awdiv@sign^0,c
 11628  002B7A  BE2A               	btfsc	(___awdiv@divisor+1)^0,7,c
 11629  002B7C  EFC4  F015         	goto	u3100
 11630  002B80  EFC2  F015         	goto	u3101
 11631  002B84                     u3101:
 11632  002B84  EFCA  F015         	goto	l5045
 11633  002B88                     u3100:
 11634  002B88  6C29               	negf	___awdiv@divisor^0,c
 11635  002B8A  1E2A               	comf	(___awdiv@divisor+1)^0,f,c
 11636  002B8C  B0D8               	btfsc	status,0,c
 11637  002B8E  2A2A               	incf	(___awdiv@divisor+1)^0,f,c
 11638  002B90  0E01               	movlw	1
 11639  002B92  6E2C               	movwf	___awdiv@sign^0,c
 11640  002B94                     l5045:
 11641  002B94  BE28               	btfsc	(___awdiv@dividend+1)^0,7,c
 11642  002B96  EFD1  F015         	goto	u3110
 11643  002B9A  EFCF  F015         	goto	u3111
 11644  002B9E                     u3111:
 11645  002B9E  EFD7  F015         	goto	l5051
 11646  002BA2                     u3110:
 11647  002BA2  6C27               	negf	___awdiv@dividend^0,c
 11648  002BA4  1E28               	comf	(___awdiv@dividend+1)^0,f,c
 11649  002BA6  B0D8               	btfsc	status,0,c
 11650  002BA8  2A28               	incf	(___awdiv@dividend+1)^0,f,c
 11651  002BAA  0E01               	movlw	1
 11652  002BAC  1A2C               	xorwf	___awdiv@sign^0,f,c
 11653  002BAE                     l5051:
 11654  002BAE  0E00               	movlw	0
 11655  002BB0  6E2E               	movwf	(___awdiv@quotient+1)^0,c
 11656  002BB2  0E00               	movlw	0
 11657  002BB4  6E2D               	movwf	___awdiv@quotient^0,c
 11658  002BB6  5029               	movf	___awdiv@divisor^0,w,c
 11659  002BB8  102A               	iorwf	(___awdiv@divisor+1)^0,w,c
 11660  002BBA  B4D8               	btfsc	status,2,c
 11661  002BBC  EFE2  F015         	goto	u3121
 11662  002BC0  EFE4  F015         	goto	u3120
 11663  002BC4                     u3121:
 11664  002BC4  EF0C  F016         	goto	l5073
 11665  002BC8                     u3120:
 11666  002BC8  0E01               	movlw	1
 11667  002BCA  6E2B               	movwf	___awdiv@counter^0,c
 11668  002BCC  EFEC  F015         	goto	l5059
 11669  002BD0                     l5057:
 11670  002BD0  90D8               	bcf	status,0,c
 11671  002BD2  3629               	rlcf	___awdiv@divisor^0,f,c
 11672  002BD4  362A               	rlcf	(___awdiv@divisor+1)^0,f,c
 11673  002BD6  2A2B               	incf	___awdiv@counter^0,f,c
 11674  002BD8                     l5059:
 11675  002BD8  AE2A               	btfss	(___awdiv@divisor+1)^0,7,c
 11676  002BDA  EFF1  F015         	goto	u3131
 11677  002BDE  EFF3  F015         	goto	u3130
 11678  002BE2                     u3131:
 11679  002BE2  EFE8  F015         	goto	l5057
 11680  002BE6                     u3130:
 11681  002BE6                     l5061:
 11682  002BE6  90D8               	bcf	status,0,c
 11683  002BE8  362D               	rlcf	___awdiv@quotient^0,f,c
 11684  002BEA  362E               	rlcf	(___awdiv@quotient+1)^0,f,c
 11685  002BEC  5029               	movf	___awdiv@divisor^0,w,c
 11686  002BEE  5C27               	subwf	___awdiv@dividend^0,w,c
 11687  002BF0  502A               	movf	(___awdiv@divisor+1)^0,w,c
 11688  002BF2  5828               	subwfb	(___awdiv@dividend+1)^0,w,c
 11689  002BF4  A0D8               	btfss	status,0,c
 11690  002BF6  EFFF  F015         	goto	u3141
 11691  002BFA  EF01  F016         	goto	u3140
 11692  002BFE                     u3141:
 11693  002BFE  EF06  F016         	goto	l5069
 11694  002C02                     u3140:
 11695  002C02  5029               	movf	___awdiv@divisor^0,w,c
 11696  002C04  5E27               	subwf	___awdiv@dividend^0,f,c
 11697  002C06  502A               	movf	(___awdiv@divisor+1)^0,w,c
 11698  002C08  5A28               	subwfb	(___awdiv@dividend+1)^0,f,c
 11699  002C0A  802D               	bsf	___awdiv@quotient^0,0,c
 11700  002C0C                     l5069:
 11701  002C0C  90D8               	bcf	status,0,c
 11702  002C0E  322A               	rrcf	(___awdiv@divisor+1)^0,f,c
 11703  002C10  3229               	rrcf	___awdiv@divisor^0,f,c
 11704  002C12  2E2B               	decfsz	___awdiv@counter^0,f,c
 11705  002C14  EFF3  F015         	goto	l5061
 11706  002C18                     l5073:
 11707  002C18  502C               	movf	___awdiv@sign^0,w,c
 11708  002C1A  B4D8               	btfsc	status,2,c
 11709  002C1C  EF12  F016         	goto	u3151
 11710  002C20  EF14  F016         	goto	u3150
 11711  002C24                     u3151:
 11712  002C24  EF18  F016         	goto	l5077
 11713  002C28                     u3150:
 11714  002C28  6C2D               	negf	___awdiv@quotient^0,c
 11715  002C2A  1E2E               	comf	(___awdiv@quotient+1)^0,f,c
 11716  002C2C  B0D8               	btfsc	status,0,c
 11717  002C2E  2A2E               	incf	(___awdiv@quotient+1)^0,f,c
 11718  002C30                     l5077:
 11719  002C30  C02D  F027         	movff	___awdiv@quotient,?___awdiv
 11720  002C34  C02E  F028         	movff	___awdiv@quotient+1,?___awdiv+1
 11721  002C38  0012               	return		;funcret
 11722  002C3A                     __end_of___awdiv:
 11723                           	callstack 0
 11724                           
 11725 ;; *************** function _codifica *****************
 11726 ;; Defined at:
 11727 ;;		line 200 in file "fifo.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;  tipo            1    wreg     unsigned char 
 11730 ;;  dado            2    0[COMRAM] PTR unsigned char 
 11731 ;;		 -> fifo_add_control@c(1), fifo_add_tempo@t(1), fifo_add@passo(1), RAM(2047), 
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;  tipo            1    4[COMRAM] unsigned char 
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  1    wreg      void 
 11736 ;; Registers used:
 11737 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11743 ;;      Params:         2       0       0       0       0       0       0       0       0
 11744 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11745 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11746 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11747 ;;Total ram usage:        5 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    2
 11750 ;; This function calls:
 11751 ;;		Nothing
 11752 ;; This function is called by:
 11753 ;;		_fifo_delete
 11754 ;;		_fifo_add
 11755 ;;		_fifo_add_tempo
 11756 ;;		_fifo_add_control
 11757 ;; This function uses a non-reentrant model
 11758 ;;
 11759                           
 11760                           	psect	text49
 11761  002434                     __ptext49:
 11762                           	callstack 0
 11763  002434                     _codifica:
 11764                           	callstack 27
 11765                           
 11766                           ;incstack = 0
 11767                           ;codifica@tipo stored from wreg
 11768  002434  6E2B               	movwf	codifica@tipo^0,c
 11769  002436                     
 11770                           ;fifo.c: 200: void codifica( unsigned char tipo, unsigned char *dado );fifo.c: 201: {;fi
      +                          fo.c: 202:     switch( tipo )
 11771  002436  EFAA  F012         	goto	l5375
 11772  00243A                     l5347:
 11773  00243A  C027  FFD9         	movff	codifica@dado,fsr2l
 11774  00243E  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11775  002442  50DF               	movf	indf2,w,c
 11776  002444  A4D8               	btfss	status,2,c
 11777  002446  EF27  F012         	goto	u3561
 11778  00244A  EF29  F012         	goto	u3560
 11779  00244E                     u3561:
 11780  00244E  EFC3  F012         	goto	l750
 11781  002452                     u3560:
 11782  002452                     
 11783                           ;fifo.c: 205:                        *dado = 254;
 11784  002452  C027  FFD9         	movff	codifica@dado,fsr2l
 11785  002456  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11786  00245A  0EFE               	movlw	254
 11787  00245C  6EDF               	movwf	indf2,c
 11788  00245E  EFC3  F012         	goto	l750
 11789  002462                     l5351:
 11790  002462  C027  FFD9         	movff	codifica@dado,fsr2l
 11791  002466  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11792  00246A  0E64               	movlw	100
 11793  00246C  26DF               	addwf	indf2,f,c
 11794  00246E  EFC3  F012         	goto	l750
 11795  002472                     l5353:
 11796  002472  C027  FFD9         	movff	codifica@dado,fsr2l
 11797  002476  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11798  00247A  0EDD               	movlw	221
 11799  00247C  6EDF               	movwf	indf2,c
 11800  00247E  EFC3  F012         	goto	l750
 11801  002482                     l5355:
 11802  002482  C027  FFD9         	movff	codifica@dado,fsr2l
 11803  002486  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11804  00248A  0EDE               	movlw	222
 11805  00248C  6EDF               	movwf	indf2,c
 11806  00248E  EFC3  F012         	goto	l750
 11807  002492                     l5357:
 11808  002492  C027  FFD9         	movff	codifica@dado,fsr2l
 11809  002496  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11810  00249A  0EDF               	movlw	223
 11811  00249C  6EDF               	movwf	indf2,c
 11812  00249E  EFC3  F012         	goto	l750
 11813  0024A2                     l5359:
 11814  0024A2  C027  FFD9         	movff	codifica@dado,fsr2l
 11815  0024A6  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11816  0024AA  0EE0               	movlw	224
 11817  0024AC  6EDF               	movwf	indf2,c
 11818  0024AE  EFC3  F012         	goto	l750
 11819  0024B2                     l5361:
 11820  0024B2  C027  FFD9         	movff	codifica@dado,fsr2l
 11821  0024B6  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11822  0024BA  0EE1               	movlw	225
 11823  0024BC  6EDF               	movwf	indf2,c
 11824  0024BE  EFC3  F012         	goto	l750
 11825  0024C2                     l5363:
 11826  0024C2  C027  FFD9         	movff	codifica@dado,fsr2l
 11827  0024C6  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11828  0024CA  0EE2               	movlw	226
 11829  0024CC  6EDF               	movwf	indf2,c
 11830  0024CE  EFC3  F012         	goto	l750
 11831  0024D2                     l5365:
 11832  0024D2  C027  FFD9         	movff	codifica@dado,fsr2l
 11833  0024D6  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11834  0024DA  0EE3               	movlw	227
 11835  0024DC  6EDF               	movwf	indf2,c
 11836  0024DE  EFC3  F012         	goto	l750
 11837  0024E2                     l5367:
 11838  0024E2  C027  FFD9         	movff	codifica@dado,fsr2l
 11839  0024E6  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11840  0024EA  0EE4               	movlw	228
 11841  0024EC  6EDF               	movwf	indf2,c
 11842  0024EE  EFC3  F012         	goto	l750
 11843  0024F2                     l5371:
 11844  0024F2  C027  FFD9         	movff	codifica@dado,fsr2l
 11845  0024F6  C028  FFDA         	movff	codifica@dado+1,fsr2h
 11846  0024FA  50DF               	movf	indf2,w,c
 11847  0024FC  6E29               	movwf	??_codifica^0,c
 11848  0024FE  6A2A               	clrf	(??_codifica+1)^0,c
 11849                           
 11850                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11851                           ; Switch size 1, requested type "simple"
 11852                           ; Number of cases is 1, Range of values is 0 to 0
 11853                           ; switch strategies available:
 11854                           ; Name         Instructions Cycles
 11855                           ; simple_byte            4     3 (average)
 11856                           ;	Chosen strategy is simple_byte
 11857  002500  502A               	movf	(??_codifica+1)^0,w,c
 11858  002502  0A00               	xorlw	0	; case 0
 11859  002504  B4D8               	btfsc	status,2,c
 11860  002506  EF87  F012         	goto	l7955
 11861  00250A  EFC3  F012         	goto	l750
 11862  00250E                     l7955:
 11863                           
 11864                           ; Switch size 1, requested type "simple"
 11865                           ; Number of cases is 8, Range of values is 65 to 100
 11866                           ; switch strategies available:
 11867                           ; Name         Instructions Cycles
 11868                           ; simple_byte           25    13 (average)
 11869                           ;	Chosen strategy is simple_byte
 11870  00250E  5029               	movf	??_codifica^0,w,c
 11871  002510  0A41               	xorlw	65	; case 65
 11872  002512  B4D8               	btfsc	status,2,c
 11873  002514  EF39  F012         	goto	l5353
 11874  002518  0A03               	xorlw	3	; case 66
 11875  00251A  B4D8               	btfsc	status,2,c
 11876  00251C  EF49  F012         	goto	l5357
 11877  002520  0A01               	xorlw	1	; case 67
 11878  002522  B4D8               	btfsc	status,2,c
 11879  002524  EF59  F012         	goto	l5361
 11880  002528  0A07               	xorlw	7	; case 68
 11881  00252A  B4D8               	btfsc	status,2,c
 11882  00252C  EF69  F012         	goto	l5365
 11883  002530  0A25               	xorlw	37	; case 97
 11884  002532  B4D8               	btfsc	status,2,c
 11885  002534  EF41  F012         	goto	l5355
 11886  002538  0A03               	xorlw	3	; case 98
 11887  00253A  B4D8               	btfsc	status,2,c
 11888  00253C  EF51  F012         	goto	l5359
 11889  002540  0A01               	xorlw	1	; case 99
 11890  002542  B4D8               	btfsc	status,2,c
 11891  002544  EF61  F012         	goto	l5363
 11892  002548  0A07               	xorlw	7	; case 100
 11893  00254A  B4D8               	btfsc	status,2,c
 11894  00254C  EF71  F012         	goto	l5367
 11895  002550  EFC3  F012         	goto	l750
 11896  002554                     l5375:
 11897  002554  502B               	movf	codifica@tipo^0,w,c
 11898  002556  6E29               	movwf	??_codifica^0,c
 11899  002558  6A2A               	clrf	(??_codifica+1)^0,c
 11900                           
 11901                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11902                           ; Switch size 1, requested type "simple"
 11903                           ; Number of cases is 1, Range of values is 0 to 0
 11904                           ; switch strategies available:
 11905                           ; Name         Instructions Cycles
 11906                           ; simple_byte            4     3 (average)
 11907                           ;	Chosen strategy is simple_byte
 11908  00255A  502A               	movf	(??_codifica+1)^0,w,c
 11909  00255C  0A00               	xorlw	0	; case 0
 11910  00255E  B4D8               	btfsc	status,2,c
 11911  002560  EFB4  F012         	goto	l7957
 11912  002564  EFC3  F012         	goto	l750
 11913  002568                     l7957:
 11914                           
 11915                           ; Switch size 1, requested type "simple"
 11916                           ; Number of cases is 3, Range of values is 97 to 116
 11917                           ; switch strategies available:
 11918                           ; Name         Instructions Cycles
 11919                           ; simple_byte           10     6 (average)
 11920                           ;	Chosen strategy is simple_byte
 11921  002568  5029               	movf	??_codifica^0,w,c
 11922  00256A  0A61               	xorlw	97	; case 97
 11923  00256C  B4D8               	btfsc	status,2,c
 11924  00256E  EF79  F012         	goto	l5371
 11925  002572  0A11               	xorlw	17	; case 112
 11926  002574  B4D8               	btfsc	status,2,c
 11927  002576  EF1D  F012         	goto	l5347
 11928  00257A  0A04               	xorlw	4	; case 116
 11929  00257C  B4D8               	btfsc	status,2,c
 11930  00257E  EF31  F012         	goto	l5351
 11931  002582  EFC3  F012         	goto	l750
 11932  002586                     l750:
 11933  002586  0012               	return		;funcret
 11934  002588                     __end_of_codifica:
 11935                           	callstack 0
 11936                           
 11937 ;; *************** function _dispLCD_str *****************
 11938 ;; Defined at:
 11939 ;;		line 250 in file "dispLCD4vias.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  str             2    7[COMRAM] PTR const unsigned char 
 11942 ;;		 -> STR_27(78), STR_26(62), STR_15(81), STR_4(83), 
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;  c               1   10[COMRAM] unsigned char 
 11945 ;;  lin             1    9[COMRAM] unsigned char 
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11955 ;;      Params:         2       0       0       0       0       0       0       0       0
 11956 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11958 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11959 ;;Total ram usage:        4 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    4
 11962 ;; This function calls:
 11963 ;;		_dispLCD_dataReg
 11964 ;;		_dispLCD_lincol
 11965 ;; This function is called by:
 11966 ;;		_main
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           	psect	text50
 11971  003448                     __ptext50:
 11972                           	callstack 0
 11973  003448                     _dispLCD_str:
 11974                           	callstack 26
 11975  003448                     
 11976                           ;dispLCD4vias.c: 250: void dispLCD_str( const char * str );dispLCD4vias.c: 251: {;dispLC
      +                          D4vias.c: 252:     char lin = 0;
 11977  003448  0E00               	movlw	0
 11978  00344A  6E30               	movwf	dispLCD_str@lin^0,c
 11979  00344C                     
 11980                           ;dispLCD4vias.c: 253:     char c;;dispLCD4vias.c: 254:     dispLCD_lincol(0,0);
 11981  00344C  0E00               	movlw	0
 11982  00344E  6E29               	movwf	dispLCD_lincol@col^0,c
 11983  003450  0E00               	movlw	0
 11984  003452  ECC4  F019         	call	_dispLCD_lincol
 11985                           
 11986                           ;dispLCD4vias.c: 256:     while( c = *str )
 11987  003456  EF43  F01A         	goto	l6133
 11988  00345A                     l6125:
 11989                           
 11990                           ;dispLCD4vias.c: 257:     {;dispLCD4vias.c: 258:         if( c != '\n' )
 11991  00345A  0E0A               	movlw	10
 11992  00345C  1831               	xorwf	dispLCD_str@c^0,w,c
 11993  00345E  B4D8               	btfsc	status,2,c
 11994  003460  EF34  F01A         	goto	u4341
 11995  003464  EF36  F01A         	goto	u4340
 11996  003468                     u4341:
 11997  003468  EF3B  F01A         	goto	l6129
 11998  00346C                     u4340:
 11999  00346C                     
 12000                           ;dispLCD4vias.c: 259:             dispLCD_dataReg( c );
 12001  00346C  5031               	movf	dispLCD_str@c^0,w,c
 12002  00346E  EC59  F01B         	call	_dispLCD_dataReg
 12003  003472  EF41  F01A         	goto	l6131
 12004  003476                     l6129:
 12005                           
 12006                           ;dispLCD4vias.c: 261:             dispLCD_lincol(++lin,0);
 12007  003476  0E00               	movlw	0
 12008  003478  6E29               	movwf	dispLCD_lincol@col^0,c
 12009  00347A  2A30               	incf	dispLCD_str@lin^0,f,c
 12010  00347C  5030               	movf	dispLCD_str@lin^0,w,c
 12011  00347E  ECC4  F019         	call	_dispLCD_lincol
 12012  003482                     l6131:
 12013                           
 12014                           ;dispLCD4vias.c: 262:         ++str;
 12015  003482  4A2E               	infsnz	dispLCD_str@str^0,f,c
 12016  003484  2A2F               	incf	(dispLCD_str@str+1)^0,f,c
 12017  003486                     l6133:
 12018                           
 12019                           ;dispLCD4vias.c: 256:     while( c = *str )
 12020  003486  C02E  FFF6         	movff	dispLCD_str@str,tblptrl
 12021  00348A  C02F  FFF7         	movff	dispLCD_str@str+1,tblptrh
 12022  00348E                     	if	0	;tblptru may be non-zero
 12023  00348E                     	endif
 12024  00348E                     	if	0	;tblptru may be non-zero
 12025  00348E                     	endif
 12026  00348E  0008               	tblrd		*
 12027  003490  CFF5 F031          	movff	tablat,dispLCD_str@c
 12028  003494  5031               	movf	dispLCD_str@c^0,w,c
 12029  003496  A4D8               	btfss	status,2,c
 12030  003498  EF50  F01A         	goto	u4351
 12031  00349C  EF52  F01A         	goto	u4350
 12032  0034A0                     u4351:
 12033  0034A0  EF2D  F01A         	goto	l6125
 12034  0034A4                     u4350:
 12035  0034A4  0012               	return		;funcret
 12036  0034A6                     __end_of_dispLCD_str:
 12037                           	callstack 0
 12038                           
 12039 ;; *************** function _dispLCD_init *****************
 12040 ;; Defined at:
 12041 ;;		line 165 in file "dispLCD4vias.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;		None
 12046 ;; Return value:  Size  Location     Type
 12047 ;;                  1    wreg      void 
 12048 ;; Registers used:
 12049 ;;		wreg, status,2, status,0, cstack
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12055 ;;      Params:         0       0       0       0       0       0       0       0       0
 12056 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12057 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12058 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12059 ;;Total ram usage:        0 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    3
 12062 ;; This function calls:
 12063 ;;		_delay
 12064 ;;		_dispLCD_instReg
 12065 ;; This function is called by:
 12066 ;;		_main
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           	psect	text51
 12071  003A00                     __ptext51:
 12072                           	callstack 0
 12073  003A00                     _dispLCD_init:
 12074                           	callstack 27
 12075  003A00                     
 12076                           ;dispLCD4vias.c: 167:     ADCON1 = 0xFF;
 12077  003A00  68C1               	setf	193,c	;volatile
 12078                           
 12079                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB2 = 0;
 12080  003A02  9493               	bcf	147,2,c	;volatile
 12081                           
 12082                           ;dispLCD4vias.c: 171:     TRISBbits.TRISB3 = 0;
 12083  003A04  9693               	bcf	147,3,c	;volatile
 12084                           
 12085                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB4 = 0;
 12086  003A06  9893               	bcf	147,4,c	;volatile
 12087                           
 12088                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB5 = 0;
 12089  003A08  9A93               	bcf	147,5,c	;volatile
 12090                           
 12091                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB6 = 0;
 12092  003A0A  9C93               	bcf	147,6,c	;volatile
 12093                           
 12094                           ;dispLCD4vias.c: 176:     TRISBbits.TRISB7 = 0;
 12095  003A0C  9E93               	bcf	147,7,c	;volatile
 12096                           
 12097                           ;dispLCD4vias.c: 178:     LCDbits.EN = 1;
 12098  003A0E  8E8A               	bsf	138,7,c	;volatile
 12099  003A10                     
 12100                           ;dispLCD4vias.c: 179:     delay(5);
 12101  003A10  0E00               	movlw	0
 12102  003A12  6E28               	movwf	(delay@t+1)^0,c
 12103  003A14  0E05               	movlw	5
 12104  003A16  6E27               	movwf	delay@t^0,c
 12105  003A18  EC90  F01D         	call	_delay	;wreg free
 12106                           
 12107                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x20|0x00|0x08);
 12108  003A1C  0E28               	movlw	40
 12109  003A1E  ECEA  F013         	call	_dispLCD_instReg
 12110                           
 12111                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
 12112  003A22  0E0C               	movlw	12
 12113  003A24  ECEA  F013         	call	_dispLCD_instReg
 12114                           
 12115                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x01 );
 12116  003A28  0E01               	movlw	1
 12117  003A2A  ECEA  F013         	call	_dispLCD_instReg
 12118                           
 12119                           ;dispLCD4vias.c: 183:     dispLCD_instReg( 0x02 );
 12120  003A2E  0E02               	movlw	2
 12121  003A30  ECEA  F013         	call	_dispLCD_instReg
 12122  003A34  0012               	return		;funcret
 12123  003A36                     __end_of_dispLCD_init:
 12124                           	callstack 0
 12125                           
 12126 ;; *************** function _dispLCD_clr *****************
 12127 ;; Defined at:
 12128 ;;		line 244 in file "dispLCD4vias.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;		None
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;		None
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      void 
 12135 ;; Registers used:
 12136 ;;		wreg, status,2, status,0, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12142 ;;      Params:         0       0       0       0       0       0       0       0       0
 12143 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12145 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12146 ;;Total ram usage:        0 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    3
 12149 ;; This function calls:
 12150 ;;		_dispLCD_instReg
 12151 ;; This function is called by:
 12152 ;;		_main
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text52
 12157  003DC8                     __ptext52:
 12158                           	callstack 0
 12159  003DC8                     _dispLCD_clr:
 12160                           	callstack 27
 12161  003DC8                     
 12162                           ;dispLCD4vias.c: 246:     dispLCD_instReg(0x01);
 12163  003DC8  0E01               	movlw	1
 12164  003DCA  ECEA  F013         	call	_dispLCD_instReg
 12165  003DCE  0012               	return		;funcret
 12166  003DD0                     __end_of_dispLCD_clr:
 12167                           	callstack 0
 12168                           
 12169 ;; *************** function _dispLCD *****************
 12170 ;; Defined at:
 12171 ;;		line 187 in file "dispLCD4vias.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;  lin             1    wreg     unsigned char 
 12174 ;;  col             1    7[COMRAM] unsigned char 
 12175 ;;  str             2    8[COMRAM] PTR const unsigned char 
 12176 ;;		 -> STR_32(21), STR_31(21), STR_30(21), STR_29(2), 
 12177 ;;		 -> STR_28(2), STR_25(21), STR_24(21), STR_23(21), 
 12178 ;;		 -> STR_22(21), STR_21(21), STR_20(8), STR_19(21), 
 12179 ;;		 -> STR_18(21), STR_17(21), STR_16(21), STR_14(21), 
 12180 ;;		 -> STR_13(21), STR_12(2), STR_11(2), STR_10(21), 
 12181 ;;		 -> STR_9(21), STR_8(21), STR_7(21), STR_6(21), 
 12182 ;;		 -> STR_5(21), STR_3(21), STR_2(2), STR_1(2), 
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;  lin             1   11[COMRAM] unsigned char 
 12185 ;;  pos             1   10[COMRAM] unsigned char 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      void 
 12188 ;; Registers used:
 12189 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12195 ;;      Params:         3       0       0       0       0       0       0       0       0
 12196 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12198 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12199 ;;Total ram usage:        5 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    4
 12202 ;; This function calls:
 12203 ;;		_dispLCD_dataReg
 12204 ;;		_dispLCD_lincol
 12205 ;; This function is called by:
 12206 ;;		_main
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           	psect	text53
 12211  003748                     __ptext53:
 12212                           	callstack 0
 12213  003748                     _dispLCD:
 12214                           	callstack 26
 12215                           
 12216                           ;incstack = 0
 12217                           ;dispLCD@lin stored from wreg
 12218  003748  6E32               	movwf	dispLCD@lin^0,c
 12219  00374A                     
 12220                           ;dispLCD4vias.c: 187: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 188: {;dispLCD4vias.c: 189:     char pos = col;
 12221  00374A  C02E  F031         	movff	dispLCD@col,dispLCD@pos
 12222  00374E                     
 12223                           ;dispLCD4vias.c: 190:     dispLCD_lincol( lin, col );
 12224  00374E  C02E  F029         	movff	dispLCD@col,dispLCD_lincol@col
 12225  003752  5032               	movf	dispLCD@lin^0,w,c
 12226  003754  ECC4  F019         	call	_dispLCD_lincol
 12227                           
 12228                           ;dispLCD4vias.c: 192:     while( *str )
 12229  003758  EFB9  F01B         	goto	l5855
 12230  00375C                     l5849:
 12231                           
 12232                           ;dispLCD4vias.c: 193:     {;dispLCD4vias.c: 194:         dispLCD_dataReg( *str );
 12233  00375C  C02F  FFF6         	movff	dispLCD@str,tblptrl
 12234  003760  C030  FFF7         	movff	dispLCD@str+1,tblptrh
 12235  003764                     	if	0	;tblptru may be non-zero
 12236  003764                     	endif
 12237  003764                     	if	0	;tblptru may be non-zero
 12238  003764                     	endif
 12239  003764  0008               	tblrd		*
 12240  003766  50F5               	movf	tablat,w,c
 12241  003768  EC59  F01B         	call	_dispLCD_dataReg
 12242  00376C                     
 12243                           ;dispLCD4vias.c: 195:         ++str;
 12244  00376C  4A2F               	infsnz	dispLCD@str^0,f,c
 12245  00376E  2A30               	incf	(dispLCD@str+1)^0,f,c
 12246  003770                     
 12247                           ;dispLCD4vias.c: 196:         ++pos;
 12248  003770  2A31               	incf	dispLCD@pos^0,f,c
 12249  003772                     l5855:
 12250                           
 12251                           ;dispLCD4vias.c: 192:     while( *str )
 12252  003772  C02F  FFF6         	movff	dispLCD@str,tblptrl
 12253  003776  C030  FFF7         	movff	dispLCD@str+1,tblptrh
 12254  00377A                     	if	0	;tblptru may be non-zero
 12255  00377A                     	endif
 12256  00377A                     	if	0	;tblptru may be non-zero
 12257  00377A                     	endif
 12258  00377A  0008               	tblrd		*
 12259  00377C  50F5               	movf	tablat,w,c
 12260  00377E  0900               	iorlw	0
 12261  003780  A4D8               	btfss	status,2,c
 12262  003782  EFC5  F01B         	goto	u4111
 12263  003786  EFC7  F01B         	goto	u4110
 12264  00378A                     u4111:
 12265  00378A  EFAE  F01B         	goto	l5849
 12266  00378E                     u4110:
 12267  00378E  0012               	return		;funcret
 12268  003790                     __end_of_dispLCD:
 12269                           	callstack 0
 12270                           
 12271 ;; *************** function _dispLCD_lincol *****************
 12272 ;; Defined at:
 12273 ;;		line 150 in file "dispLCD4vias.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  lin             1    wreg     unsigned char 
 12276 ;;  col             1    2[COMRAM] unsigned char 
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  lin             1    5[COMRAM] unsigned char 
 12279 ;;  aux             1    6[COMRAM] unsigned char 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      void 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12289 ;;      Params:         1       0       0       0       0       0       0       0       0
 12290 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12291 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12292 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12293 ;;Total ram usage:        5 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    3
 12296 ;; This function calls:
 12297 ;;		_dispLCD_instReg
 12298 ;; This function is called by:
 12299 ;;		_main
 12300 ;;		_dispLCD
 12301 ;;		_dispLCD_num
 12302 ;;		_dispLCD_str
 12303 ;;		_fifo_print
 12304 ;;		_printExec
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           	psect	text54
 12309  003388                     __ptext54:
 12310                           	callstack 0
 12311  003388                     _dispLCD_lincol:
 12312                           	callstack 25
 12313                           
 12314                           ;incstack = 0
 12315                           ;dispLCD_lincol@lin stored from wreg
 12316  003388  6E2C               	movwf	dispLCD_lincol@lin^0,c
 12317  00338A                     
 12318                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
 12319  00338A  0E00               	movlw	0
 12320  00338C  6E2D               	movwf	dispLCD_lincol@aux^0,c
 12321                           
 12322                           ;dispLCD4vias.c: 154:     switch(lin)
 12323  00338E  EFD5  F019         	goto	l5097
 12324  003392                     l5089:
 12325  003392  0E40               	movlw	64
 12326  003394  6E2D               	movwf	dispLCD_lincol@aux^0,c
 12327  003396  EFEE  F019         	goto	l5099
 12328  00339A                     l5091:
 12329  00339A  0E14               	movlw	20
 12330  00339C  6E2D               	movwf	dispLCD_lincol@aux^0,c
 12331  00339E  EFEE  F019         	goto	l5099
 12332  0033A2                     l5093:
 12333  0033A2  0E54               	movlw	84
 12334  0033A4  6E2D               	movwf	dispLCD_lincol@aux^0,c
 12335  0033A6  EFEE  F019         	goto	l5099
 12336  0033AA                     l5097:
 12337  0033AA  502C               	movf	dispLCD_lincol@lin^0,w,c
 12338  0033AC  6E2A               	movwf	??_dispLCD_lincol^0,c
 12339  0033AE  6A2B               	clrf	(??_dispLCD_lincol+1)^0,c
 12340                           
 12341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12342                           ; Switch size 1, requested type "simple"
 12343                           ; Number of cases is 1, Range of values is 0 to 0
 12344                           ; switch strategies available:
 12345                           ; Name         Instructions Cycles
 12346                           ; simple_byte            4     3 (average)
 12347                           ;	Chosen strategy is simple_byte
 12348  0033B0  502B               	movf	(??_dispLCD_lincol+1)^0,w,c
 12349  0033B2  0A00               	xorlw	0	; case 0
 12350  0033B4  B4D8               	btfsc	status,2,c
 12351  0033B6  EFDF  F019         	goto	l7959
 12352  0033BA  EFEE  F019         	goto	l5099
 12353  0033BE                     l7959:
 12354                           
 12355                           ; Switch size 1, requested type "simple"
 12356                           ; Number of cases is 3, Range of values is 1 to 3
 12357                           ; switch strategies available:
 12358                           ; Name         Instructions Cycles
 12359                           ; simple_byte           10     6 (average)
 12360                           ;	Chosen strategy is simple_byte
 12361  0033BE  502A               	movf	??_dispLCD_lincol^0,w,c
 12362  0033C0  0A01               	xorlw	1	; case 1
 12363  0033C2  B4D8               	btfsc	status,2,c
 12364  0033C4  EFC9  F019         	goto	l5089
 12365  0033C8  0A03               	xorlw	3	; case 2
 12366  0033CA  B4D8               	btfsc	status,2,c
 12367  0033CC  EFCD  F019         	goto	l5091
 12368  0033D0  0A01               	xorlw	1	; case 3
 12369  0033D2  B4D8               	btfsc	status,2,c
 12370  0033D4  EFD1  F019         	goto	l5093
 12371  0033D8  EFEE  F019         	goto	l5099
 12372  0033DC                     l5099:
 12373                           
 12374                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
 12375  0033DC  502D               	movf	dispLCD_lincol@aux^0,w,c
 12376  0033DE  2429               	addwf	dispLCD_lincol@col^0,w,c
 12377  0033E0  0B7F               	andlw	127
 12378  0033E2  0F80               	addlw	128
 12379  0033E4  ECEA  F013         	call	_dispLCD_instReg
 12380  0033E8  0012               	return		;funcret
 12381  0033EA                     __end_of_dispLCD_lincol:
 12382                           	callstack 0
 12383                           
 12384 ;; *************** function _dispLCD_instReg *****************
 12385 ;; Defined at:
 12386 ;;		line 101 in file "dispLCD4vias.c"
 12387 ;; Parameters:    Size  Location     Type
 12388 ;;  i               1    wreg     unsigned char 
 12389 ;; Auto vars:     Size  Location     Type
 12390 ;;  i               1    1[COMRAM] unsigned char 
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  1    wreg      void 
 12393 ;; Registers used:
 12394 ;;		wreg, status,2, status,0
 12395 ;; Tracked objects:
 12396 ;;		On entry : 0/0
 12397 ;;		On exit  : 0/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12400 ;;      Params:         0       0       0       0       0       0       0       0       0
 12401 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12402 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12403 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12404 ;;Total ram usage:        2 bytes
 12405 ;; Hardware stack levels used:    1
 12406 ;; Hardware stack levels required when called:    2
 12407 ;; This function calls:
 12408 ;;		Nothing
 12409 ;; This function is called by:
 12410 ;;		_dispLCD_lincol
 12411 ;;		_dispLCD_init
 12412 ;;		_dispLCD_clr
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           	psect	text55
 12417  0027D4                     __ptext55:
 12418                           	callstack 0
 12419  0027D4                     _dispLCD_instReg:
 12420                           	callstack 25
 12421                           
 12422                           ;incstack = 0
 12423                           ;dispLCD_instReg@i stored from wreg
 12424  0027D4  6E28               	movwf	dispLCD_instReg@i^0,c
 12425  0027D6                     
 12426                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
 12427  0027D6  9C8A               	bcf	138,6,c	;volatile
 12428  0027D8                     
 12429                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
 12430  0027D8  C028  F027         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12431  0027DC  3A27               	swapf	??_dispLCD_instReg^0,f,c
 12432  0027DE  0E0F               	movlw	15
 12433  0027E0  1627               	andwf	??_dispLCD_instReg^0,f,c
 12434  0027E2  4627               	rlncf	??_dispLCD_instReg^0,f,c
 12435  0027E4  4627               	rlncf	??_dispLCD_instReg^0,f,c
 12436  0027E6  508A               	movf	138,w,c	;volatile
 12437  0027E8  1827               	xorwf	??_dispLCD_instReg^0,w,c
 12438  0027EA  0BC3               	andlw	-61
 12439  0027EC  1827               	xorwf	??_dispLCD_instReg^0,w,c
 12440  0027EE  6E8A               	movwf	138,c	;volatile
 12441  0027F0                     
 12442                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
 12443  0027F0  9E8A               	bcf	138,7,c	;volatile
 12444                           
 12445                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
 12446  0027F2  0428               	decf	dispLCD_instReg@i^0,w,c
 12447  0027F4  B4D8               	btfsc	status,2,c
 12448  0027F6  EFFF  F013         	goto	u3051
 12449  0027FA  EF01  F014         	goto	u3050
 12450  0027FE                     u3051:
 12451  0027FE  EF0A  F014         	goto	l5003
 12452  002802                     u3050:
 12453  002802  0E02               	movlw	2
 12454  002804  1828               	xorwf	dispLCD_instReg@i^0,w,c
 12455  002806  A4D8               	btfss	status,2,c
 12456  002808  EF08  F014         	goto	u3061
 12457  00280C  EF0A  F014         	goto	u3060
 12458  002810                     u3061:
 12459  002810  EF13  F014         	goto	l5005
 12460  002814                     u3060:
 12461  002814                     l5003:
 12462                           
 12463                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
 12464  002814  0E0D               	movlw	13
 12465  002816  6E27               	movwf	??_dispLCD_instReg^0,c
 12466  002818  0EFC               	movlw	252
 12467  00281A                     u5827:
 12468  00281A  2EE8               	decfsz	wreg,f,c
 12469  00281C  D7FE               	bra	u5827
 12470  00281E  2E27               	decfsz	??_dispLCD_instReg^0,f,c
 12471  002820  D7FC               	bra	u5827
 12472  002822  EF17  F014         	goto	l5007
 12473  002826                     l5005:
 12474                           
 12475                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12476  002826  0E42               	movlw	66
 12477  002828                     u5837:
 12478  002828  2EE8               	decfsz	wreg,f,c
 12479  00282A  D7FE               	bra	u5837
 12480  00282C  D000               	nop2	
 12481  00282E                     l5007:
 12482                           
 12483                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
 12484  00282E  8E8A               	bsf	138,7,c	;volatile
 12485  002830                     
 12486                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
 12487  002830  5028               	movf	dispLCD_instReg@i^0,w,c
 12488  002832  0BF0               	andlw	240
 12489  002834  0A20               	xorlw	32
 12490  002836  A4D8               	btfss	status,2,c
 12491  002838  EF20  F014         	goto	u3071
 12492  00283C  EF22  F014         	goto	u3070
 12493  002840                     u3071:
 12494  002840  EF35  F014         	goto	l5021
 12495  002844                     u3070:
 12496  002844                     
 12497                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
 12498  002844  9C8A               	bcf	138,6,c	;volatile
 12499  002846                     
 12500                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
 12501  002846  C028  F027         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12502  00284A  3A27               	swapf	??_dispLCD_instReg^0,f,c
 12503  00284C  0E0F               	movlw	15
 12504  00284E  1627               	andwf	??_dispLCD_instReg^0,f,c
 12505  002850  4627               	rlncf	??_dispLCD_instReg^0,f,c
 12506  002852  4627               	rlncf	??_dispLCD_instReg^0,f,c
 12507  002854  508A               	movf	138,w,c	;volatile
 12508  002856  1827               	xorwf	??_dispLCD_instReg^0,w,c
 12509  002858  0BC3               	andlw	-61
 12510  00285A  1827               	xorwf	??_dispLCD_instReg^0,w,c
 12511  00285C  6E8A               	movwf	138,c	;volatile
 12512  00285E                     
 12513                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
 12514  00285E  9E8A               	bcf	138,7,c	;volatile
 12515  002860                     
 12516                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12517  002860  0E42               	movlw	66
 12518  002862                     u5847:
 12519  002862  2EE8               	decfsz	wreg,f,c
 12520  002864  D7FE               	bra	u5847
 12521  002866  D000               	nop2	
 12522  002868                     
 12523                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
 12524  002868  8E8A               	bsf	138,7,c	;volatile
 12525  00286A                     l5021:
 12526                           
 12527                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
 12528  00286A  9C8A               	bcf	138,6,c	;volatile
 12529  00286C                     
 12530                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
 12531  00286C  C028  F027         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 12532  002870  0E0F               	movlw	15
 12533  002872  1627               	andwf	??_dispLCD_instReg^0,f,c
 12534  002874  4627               	rlncf	??_dispLCD_instReg^0,f,c
 12535  002876  4627               	rlncf	??_dispLCD_instReg^0,f,c
 12536  002878  508A               	movf	138,w,c	;volatile
 12537  00287A  1827               	xorwf	??_dispLCD_instReg^0,w,c
 12538  00287C  0BC3               	andlw	-61
 12539  00287E  1827               	xorwf	??_dispLCD_instReg^0,w,c
 12540  002880  6E8A               	movwf	138,c	;volatile
 12541  002882                     
 12542                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
 12543  002882  9E8A               	bcf	138,7,c	;volatile
 12544  002884                     
 12545                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
 12546  002884  0428               	decf	dispLCD_instReg@i^0,w,c
 12547  002886  B4D8               	btfsc	status,2,c
 12548  002888  EF48  F014         	goto	u3081
 12549  00288C  EF4A  F014         	goto	u3080
 12550  002890                     u3081:
 12551  002890  EF53  F014         	goto	l5031
 12552  002894                     u3080:
 12553  002894  0E02               	movlw	2
 12554  002896  1828               	xorwf	dispLCD_instReg@i^0,w,c
 12555  002898  A4D8               	btfss	status,2,c
 12556  00289A  EF51  F014         	goto	u3091
 12557  00289E  EF53  F014         	goto	u3090
 12558  0028A2                     u3091:
 12559  0028A2  EF5C  F014         	goto	l5033
 12560  0028A6                     u3090:
 12561  0028A6                     l5031:
 12562                           
 12563                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
 12564  0028A6  0E0D               	movlw	13
 12565  0028A8  6E27               	movwf	??_dispLCD_instReg^0,c
 12566  0028AA  0EFC               	movlw	252
 12567  0028AC                     u5857:
 12568  0028AC  2EE8               	decfsz	wreg,f,c
 12569  0028AE  D7FE               	bra	u5857
 12570  0028B0  2E27               	decfsz	??_dispLCD_instReg^0,f,c
 12571  0028B2  D7FC               	bra	u5857
 12572  0028B4  EF60  F014         	goto	l5035
 12573  0028B8                     l5033:
 12574                           
 12575                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 12576  0028B8  0E42               	movlw	66
 12577  0028BA                     u5867:
 12578  0028BA  2EE8               	decfsz	wreg,f,c
 12579  0028BC  D7FE               	bra	u5867
 12580  0028BE  D000               	nop2	
 12581  0028C0                     l5035:
 12582                           
 12583                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
 12584  0028C0  8E8A               	bsf	138,7,c	;volatile
 12585  0028C2  0012               	return		;funcret
 12586  0028C4                     __end_of_dispLCD_instReg:
 12587                           	callstack 0
 12588                           
 12589 ;; *************** function _dispLCD_dataReg *****************
 12590 ;; Defined at:
 12591 ;;		line 134 in file "dispLCD4vias.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  d               1    wreg     unsigned char 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;  d               1    1[COMRAM] unsigned char 
 12596 ;; Return value:  Size  Location     Type
 12597 ;;                  1    wreg      void 
 12598 ;; Registers used:
 12599 ;;		wreg, status,2, status,0
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12605 ;;      Params:         0       0       0       0       0       0       0       0       0
 12606 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12607 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12608 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12609 ;;Total ram usage:        2 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:    2
 12612 ;; This function calls:
 12613 ;;		Nothing
 12614 ;; This function is called by:
 12615 ;;		_main
 12616 ;;		_dispLCD
 12617 ;;		_dispLCD_num
 12618 ;;		_dispLCD_str
 12619 ;;		_fifo_print
 12620 ;;		_printExec
 12621 ;; This function uses a non-reentrant model
 12622 ;;
 12623                           
 12624                           	psect	text56
 12625  0036B2                     __ptext56:
 12626                           	callstack 0
 12627  0036B2                     _dispLCD_dataReg:
 12628                           	callstack 26
 12629                           
 12630                           ;incstack = 0
 12631                           ;dispLCD_dataReg@d stored from wreg
 12632  0036B2  6E28               	movwf	dispLCD_dataReg@d^0,c
 12633  0036B4                     
 12634                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
 12635  0036B4  8C8A               	bsf	138,6,c	;volatile
 12636  0036B6                     
 12637                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
 12638  0036B6  C028  F027         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 12639  0036BA  3A27               	swapf	??_dispLCD_dataReg^0,f,c
 12640  0036BC  0E0F               	movlw	15
 12641  0036BE  1627               	andwf	??_dispLCD_dataReg^0,f,c
 12642  0036C0  4627               	rlncf	??_dispLCD_dataReg^0,f,c
 12643  0036C2  4627               	rlncf	??_dispLCD_dataReg^0,f,c
 12644  0036C4  508A               	movf	138,w,c	;volatile
 12645  0036C6  1827               	xorwf	??_dispLCD_dataReg^0,w,c
 12646  0036C8  0BC3               	andlw	-61
 12647  0036CA  1827               	xorwf	??_dispLCD_dataReg^0,w,c
 12648  0036CC  6E8A               	movwf	138,c	;volatile
 12649  0036CE                     
 12650                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
 12651  0036CE  9E8A               	bcf	138,7,c	;volatile
 12652  0036D0                     
 12653                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12654  0036D0  0E42               	movlw	66
 12655  0036D2                     u5877:
 12656  0036D2  2EE8               	decfsz	wreg,f,c
 12657  0036D4  D7FE               	bra	u5877
 12658  0036D6  D000               	nop2	
 12659  0036D8                     
 12660                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
 12661  0036D8  8E8A               	bsf	138,7,c	;volatile
 12662  0036DA                     
 12663                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
 12664  0036DA  8C8A               	bsf	138,6,c	;volatile
 12665  0036DC                     
 12666                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
 12667  0036DC  C028  F027         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 12668  0036E0  0E0F               	movlw	15
 12669  0036E2  1627               	andwf	??_dispLCD_dataReg^0,f,c
 12670  0036E4  4627               	rlncf	??_dispLCD_dataReg^0,f,c
 12671  0036E6  4627               	rlncf	??_dispLCD_dataReg^0,f,c
 12672  0036E8  508A               	movf	138,w,c	;volatile
 12673  0036EA  1827               	xorwf	??_dispLCD_dataReg^0,w,c
 12674  0036EC  0BC3               	andlw	-61
 12675  0036EE  1827               	xorwf	??_dispLCD_dataReg^0,w,c
 12676  0036F0  6E8A               	movwf	138,c	;volatile
 12677  0036F2                     
 12678                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
 12679  0036F2  9E8A               	bcf	138,7,c	;volatile
 12680                           
 12681                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12682  0036F4  0E42               	movlw	66
 12683  0036F6                     u5887:
 12684  0036F6  2EE8               	decfsz	wreg,f,c
 12685  0036F8  D7FE               	bra	u5887
 12686  0036FA  D000               	nop2	
 12687  0036FC                     
 12688                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
 12689  0036FC  8E8A               	bsf	138,7,c	;volatile
 12690  0036FE  0012               	return		;funcret
 12691  003700                     __end_of_dispLCD_dataReg:
 12692                           	callstack 0
 12693                           
 12694 ;; *************** function _dignum_conc *****************
 12695 ;; Defined at:
 12696 ;;		line 460 in file "fifo.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;  dig             1    wreg     unsigned char 
 12699 ;;  ptrNum          2    6[COMRAM] PTR unsigned int 
 12700 ;;		 -> main@ciclos(2), main@num(2), 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;  dig             1   10[COMRAM] unsigned char 
 12703 ;; Return value:  Size  Location     Type
 12704 ;;                  1    wreg      void 
 12705 ;; Registers used:
 12706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12712 ;;      Params:         2       0       0       0       0       0       0       0       0
 12713 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12714 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12715 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12716 ;;Total ram usage:        5 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    3
 12719 ;; This function calls:
 12720 ;;		___wmul
 12721 ;; This function is called by:
 12722 ;;		_main
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           	psect	text57
 12727  003790                     __ptext57:
 12728                           	callstack 0
 12729  003790                     _dignum_conc:
 12730                           	callstack 27
 12731                           
 12732                           ;incstack = 0
 12733                           ;dignum_conc@dig stored from wreg
 12734  003790  6E31               	movwf	dignum_conc@dig^0,c
 12735  003792                     
 12736                           ;fifo.c: 460: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 461: {;fifo.c: 
      +                          462:     *ptrNum = (*ptrNum * 10) + (dig - '0');
 12737  003792  0ED0               	movlw	208
 12738  003794  6E2F               	movwf	??_dignum_conc^0,c
 12739  003796  0EFF               	movlw	255
 12740  003798  6E30               	movwf	(??_dignum_conc+1)^0,c
 12741  00379A  C02D  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12742  00379E  C02E  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12743  0037A2  CFDE F027          	movff	postinc2,___wmul@multiplier
 12744  0037A6  CFDD F028          	movff	postdec2,___wmul@multiplier+1
 12745  0037AA  0E00               	movlw	0
 12746  0037AC  6E2A               	movwf	(___wmul@multiplicand+1)^0,c
 12747  0037AE  0E0A               	movlw	10
 12748  0037B0  6E29               	movwf	___wmul@multiplicand^0,c
 12749  0037B2  ECD1  F01D         	call	___wmul	;wreg free
 12750  0037B6  5031               	movf	dignum_conc@dig^0,w,c
 12751  0037B8  2627               	addwf	?___wmul^0,f,c
 12752  0037BA  0E00               	movlw	0
 12753  0037BC  2228               	addwfc	(?___wmul+1)^0,f,c
 12754  0037BE  502F               	movf	??_dignum_conc^0,w,c
 12755  0037C0  2627               	addwf	?___wmul^0,f,c
 12756  0037C2  5030               	movf	(??_dignum_conc+1)^0,w,c
 12757  0037C4  2228               	addwfc	(?___wmul+1)^0,f,c
 12758  0037C6  C02D  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12759  0037CA  C02E  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12760  0037CE  C027  FFDE         	movff	?___wmul,postinc2
 12761  0037D2  C028  FFDD         	movff	?___wmul+1,postdec2
 12762  0037D6  0012               	return		;funcret
 12763  0037D8                     __end_of_dignum_conc:
 12764                           	callstack 0
 12765                           
 12766 ;; *************** function ___wmul *****************
 12767 ;; Defined at:
 12768 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
 12769 ;; Parameters:    Size  Location     Type
 12770 ;;  multiplier      2    0[COMRAM] unsigned int 
 12771 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12772 ;; Auto vars:     Size  Location     Type
 12773 ;;  product         2    4[COMRAM] unsigned int 
 12774 ;; Return value:  Size  Location     Type
 12775 ;;                  2    0[COMRAM] unsigned int 
 12776 ;; Registers used:
 12777 ;;		wreg, status,2, status,0, prodl, prodh
 12778 ;; Tracked objects:
 12779 ;;		On entry : 0/0
 12780 ;;		On exit  : 0/0
 12781 ;;		Unchanged: 0/0
 12782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12783 ;;      Params:         4       0       0       0       0       0       0       0       0
 12784 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12785 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12786 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12787 ;;Total ram usage:        6 bytes
 12788 ;; Hardware stack levels used:    1
 12789 ;; Hardware stack levels required when called:    2
 12790 ;; This function calls:
 12791 ;;		Nothing
 12792 ;; This function is called by:
 12793 ;;		_main
 12794 ;;		_dignum_conc
 12795 ;; This function uses a non-reentrant model
 12796 ;;
 12797                           
 12798                           	psect	text58
 12799  003BA2                     __ptext58:
 12800                           	callstack 0
 12801  003BA2                     ___wmul:
 12802                           	callstack 27
 12803  003BA2  5027               	movf	___wmul@multiplier^0,w,c
 12804  003BA4  0229               	mulwf	___wmul@multiplicand^0,c
 12805  003BA6  CFF3 F02B          	movff	prodl,___wmul@product
 12806  003BAA  CFF4 F02C          	movff	prodh,___wmul@product+1
 12807  003BAE  5027               	movf	___wmul@multiplier^0,w,c
 12808  003BB0  022A               	mulwf	(___wmul@multiplicand+1)^0,c
 12809  003BB2  50F3               	movf	243,w,c
 12810  003BB4  262C               	addwf	(___wmul@product+1)^0,f,c
 12811  003BB6  5028               	movf	(___wmul@multiplier+1)^0,w,c
 12812  003BB8  0229               	mulwf	___wmul@multiplicand^0,c
 12813  003BBA  50F3               	movf	243,w,c
 12814  003BBC  262C               	addwf	(___wmul@product+1)^0,f,c
 12815  003BBE  C02B  F027         	movff	___wmul@product,?___wmul
 12816  003BC2  C02C  F028         	movff	___wmul@product+1,?___wmul+1
 12817  003BC6  0012               	return		;funcret
 12818  003BC8                     __end_of___wmul:
 12819                           	callstack 0
 12820                           
 12821 ;; *************** function _dignum_apagar *****************
 12822 ;; Defined at:
 12823 ;;		line 465 in file "fifo.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;  ptrNum          2    7[COMRAM] PTR unsigned int 
 12826 ;;		 -> main@ciclos(2), main@num(2), 
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;		None
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  1    wreg      void 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12838 ;;      Params:         2       0       0       0       0       0       0       0       0
 12839 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12840 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12841 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12842 ;;Total ram usage:        2 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:    3
 12845 ;; This function calls:
 12846 ;;		___lwdiv
 12847 ;; This function is called by:
 12848 ;;		_main
 12849 ;; This function uses a non-reentrant model
 12850 ;;
 12851                           
 12852                           	psect	text59
 12853  003AC4                     __ptext59:
 12854                           	callstack 0
 12855  003AC4                     _dignum_apagar:
 12856                           	callstack 27
 12857  003AC4                     
 12858                           ;fifo.c: 465: void dignum_apagar(unsigned int * ptrNum );fifo.c: 466: {;fifo.c: 467:    
      +                           *ptrNum /= 10;
 12859  003AC4  C02E  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 12860  003AC8  C02F  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 12861  003ACC  CFDE F027          	movff	postinc2,___lwdiv@dividend
 12862  003AD0  CFDD F028          	movff	postdec2,___lwdiv@dividend+1
 12863  003AD4  0E00               	movlw	0
 12864  003AD6  6E2A               	movwf	(___lwdiv@divisor+1)^0,c
 12865  003AD8  0E0A               	movlw	10
 12866  003ADA  6E29               	movwf	___lwdiv@divisor^0,c
 12867  003ADC  EC1E  F019         	call	___lwdiv	;wreg free
 12868  003AE0  C02E  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 12869  003AE4  C02F  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 12870  003AE8  C027  FFDE         	movff	?___lwdiv,postinc2
 12871  003AEC  C028  FFDD         	movff	?___lwdiv+1,postdec2
 12872  003AF0  0012               	return		;funcret
 12873  003AF2                     __end_of_dignum_apagar:
 12874                           	callstack 0
 12875                           
 12876 ;; *************** function ___lwdiv *****************
 12877 ;; Defined at:
 12878 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;  dividend        2    0[COMRAM] unsigned int 
 12881 ;;  divisor         2    2[COMRAM] unsigned int 
 12882 ;; Auto vars:     Size  Location     Type
 12883 ;;  quotient        2    4[COMRAM] unsigned int 
 12884 ;;  counter         1    6[COMRAM] unsigned char 
 12885 ;; Return value:  Size  Location     Type
 12886 ;;                  2    0[COMRAM] unsigned int 
 12887 ;; Registers used:
 12888 ;;		wreg, status,2, status,0
 12889 ;; Tracked objects:
 12890 ;;		On entry : 0/0
 12891 ;;		On exit  : 0/0
 12892 ;;		Unchanged: 0/0
 12893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12894 ;;      Params:         4       0       0       0       0       0       0       0       0
 12895 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12897 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12898 ;;Total ram usage:        7 bytes
 12899 ;; Hardware stack levels used:    1
 12900 ;; Hardware stack levels required when called:    2
 12901 ;; This function calls:
 12902 ;;		Nothing
 12903 ;; This function is called by:
 12904 ;;		_dignum_apagar
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           	psect	text60
 12909  00323C                     __ptext60:
 12910                           	callstack 0
 12911  00323C                     ___lwdiv:
 12912                           	callstack 27
 12913  00323C  0E00               	movlw	0
 12914  00323E  6E2C               	movwf	(___lwdiv@quotient+1)^0,c
 12915  003240  0E00               	movlw	0
 12916  003242  6E2B               	movwf	___lwdiv@quotient^0,c
 12917  003244  5029               	movf	___lwdiv@divisor^0,w,c
 12918  003246  102A               	iorwf	(___lwdiv@divisor+1)^0,w,c
 12919  003248  B4D8               	btfsc	status,2,c
 12920  00324A  EF29  F019         	goto	u3821
 12921  00324E  EF2B  F019         	goto	u3820
 12922  003252                     u3821:
 12923  003252  EF53  F019         	goto	l1735
 12924  003256                     u3820:
 12925  003256  0E01               	movlw	1
 12926  003258  6E2D               	movwf	___lwdiv@counter^0,c
 12927  00325A  EF33  F019         	goto	l5553
 12928  00325E                     l5551:
 12929  00325E  90D8               	bcf	status,0,c
 12930  003260  3629               	rlcf	___lwdiv@divisor^0,f,c
 12931  003262  362A               	rlcf	(___lwdiv@divisor+1)^0,f,c
 12932  003264  2A2D               	incf	___lwdiv@counter^0,f,c
 12933  003266                     l5553:
 12934  003266  AE2A               	btfss	(___lwdiv@divisor+1)^0,7,c
 12935  003268  EF38  F019         	goto	u3831
 12936  00326C  EF3A  F019         	goto	u3830
 12937  003270                     u3831:
 12938  003270  EF2F  F019         	goto	l5551
 12939  003274                     u3830:
 12940  003274                     l5555:
 12941  003274  90D8               	bcf	status,0,c
 12942  003276  362B               	rlcf	___lwdiv@quotient^0,f,c
 12943  003278  362C               	rlcf	(___lwdiv@quotient+1)^0,f,c
 12944  00327A  5029               	movf	___lwdiv@divisor^0,w,c
 12945  00327C  5C27               	subwf	___lwdiv@dividend^0,w,c
 12946  00327E  502A               	movf	(___lwdiv@divisor+1)^0,w,c
 12947  003280  5828               	subwfb	(___lwdiv@dividend+1)^0,w,c
 12948  003282  A0D8               	btfss	status,0,c
 12949  003284  EF46  F019         	goto	u3841
 12950  003288  EF48  F019         	goto	u3840
 12951  00328C                     u3841:
 12952  00328C  EF4D  F019         	goto	l5563
 12953  003290                     u3840:
 12954  003290  5029               	movf	___lwdiv@divisor^0,w,c
 12955  003292  5E27               	subwf	___lwdiv@dividend^0,f,c
 12956  003294  502A               	movf	(___lwdiv@divisor+1)^0,w,c
 12957  003296  5A28               	subwfb	(___lwdiv@dividend+1)^0,f,c
 12958  003298  802B               	bsf	___lwdiv@quotient^0,0,c
 12959  00329A                     l5563:
 12960  00329A  90D8               	bcf	status,0,c
 12961  00329C  322A               	rrcf	(___lwdiv@divisor+1)^0,f,c
 12962  00329E  3229               	rrcf	___lwdiv@divisor^0,f,c
 12963  0032A0  2E2D               	decfsz	___lwdiv@counter^0,f,c
 12964  0032A2  EF3A  F019         	goto	l5555
 12965  0032A6                     l1735:
 12966  0032A6  C02B  F027         	movff	___lwdiv@quotient,?___lwdiv
 12967  0032AA  C02C  F028         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12968  0032AE  0012               	return		;funcret
 12969  0032B0                     __end_of___lwdiv:
 12970                           	callstack 0
 12971                           
 12972 ;; *************** function _deletar_receita *****************
 12973 ;; Defined at:
 12974 ;;		line 77 in file "eeprom.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;  receita         1    wreg     unsigned char 
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  receita         1    6[COMRAM] unsigned char 
 12979 ;;  i               1    7[COMRAM] unsigned char 
 12980 ;;  aux             2    4[COMRAM] int 
 12981 ;; Return value:  Size  Location     Type
 12982 ;;                  1    wreg      void 
 12983 ;; Registers used:
 12984 ;;		wreg, status,2, status,0, cstack
 12985 ;; Tracked objects:
 12986 ;;		On entry : 0/0
 12987 ;;		On exit  : 0/0
 12988 ;;		Unchanged: 0/0
 12989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12990 ;;      Params:         0       0       0       0       0       0       0       0       0
 12991 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12992 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12993 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12994 ;;Total ram usage:        4 bytes
 12995 ;; Hardware stack levels used:    1
 12996 ;; Hardware stack levels required when called:    3
 12997 ;; This function calls:
 12998 ;;		_EEPROM_write
 12999 ;;		_end_receita
 13000 ;; This function is called by:
 13001 ;;		_main
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           	psect	text61
 13006  003992                     __ptext61:
 13007                           	callstack 0
 13008  003992                     _deletar_receita:
 13009                           	callstack 27
 13010                           
 13011                           ;incstack = 0
 13012                           ;deletar_receita@receita stored from wreg
 13013  003992  6E2D               	movwf	deletar_receita@receita^0,c
 13014  003994                     
 13015                           ;eeprom.c: 77: void deletar_receita (char receita);eeprom.c: 78: {;eeprom.c: 79:    int 
      +                          aux;;eeprom.c: 80:    aux = end_receita(receita);
 13016  003994  C02D  F027         	movff	deletar_receita@receita,end_receita@x
 13017  003998  6A28               	clrf	(end_receita@x+1)^0,c
 13018  00399A  ECE4  F01D         	call	_end_receita	;wreg free
 13019  00399E  C027  F02B         	movff	?_end_receita,deletar_receita@aux
 13020  0039A2  C028  F02C         	movff	?_end_receita+1,deletar_receita@aux+1
 13021  0039A6                     
 13022                           ;eeprom.c: 81:    for( char i=0 ; i<16; i++)
 13023  0039A6  0E00               	movlw	0
 13024  0039A8  6E2E               	movwf	deletar_receita@i^0,c
 13025  0039AA                     l6171:
 13026                           
 13027                           ;eeprom.c: 82:         EEPROM_write((aux+i),0);
 13028  0039AA  0E00               	movlw	0
 13029  0039AC  6E27               	movwf	EEPROM_write@data^0,c
 13030  0039AE  502E               	movf	deletar_receita@i^0,w,c
 13031  0039B0  242B               	addwf	deletar_receita@aux^0,w,c
 13032  0039B2  EC79  F01D         	call	_EEPROM_write
 13033  0039B6  2A2E               	incf	deletar_receita@i^0,f,c
 13034  0039B8  0E0F               	movlw	15
 13035  0039BA  642E               	cpfsgt	deletar_receita@i^0,c
 13036  0039BC  EFE2  F01C         	goto	u4381
 13037  0039C0  EFE4  F01C         	goto	u4380
 13038  0039C4                     u4381:
 13039  0039C4  EFD5  F01C         	goto	l6171
 13040  0039C8                     u4380:
 13041  0039C8  0012               	return		;funcret
 13042  0039CA                     __end_of_deletar_receita:
 13043                           	callstack 0
 13044                           
 13045 ;; *************** function _EEPROM_write *****************
 13046 ;; Defined at:
 13047 ;;		line 24 in file "eeprom.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  addr            1    wreg     unsigned char 
 13050 ;;  data            1    0[COMRAM] unsigned char 
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;  addr            1    1[COMRAM] unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      void 
 13055 ;; Registers used:
 13056 ;;		wreg, status,2
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13062 ;;      Params:         1       0       0       0       0       0       0       0       0
 13063 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13065 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13066 ;;Total ram usage:        2 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    2
 13069 ;; This function calls:
 13070 ;;		Nothing
 13071 ;; This function is called by:
 13072 ;;		_salvar_receita
 13073 ;;		_salvar_dado
 13074 ;;		_deletar_receita
 13075 ;;		_formatar_receitas
 13076 ;; This function uses a non-reentrant model
 13077 ;;
 13078                           
 13079                           	psect	text62
 13080  003AF2                     __ptext62:
 13081                           	callstack 0
 13082  003AF2                     _EEPROM_write:
 13083                           	callstack 27
 13084                           
 13085                           ;incstack = 0
 13086                           ;EEPROM_write@addr stored from wreg
 13087  003AF2  6E28               	movwf	EEPROM_write@addr^0,c
 13088  003AF4                     
 13089                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
 13090  003AF4  9EF2               	bcf	242,7,c	;volatile
 13091  003AF6                     
 13092                           ;eeprom.c: 27:     EEADR = addr;
 13093  003AF6  C028  FFA9         	movff	EEPROM_write@addr,4009	;volatile
 13094  003AFA                     
 13095                           ;eeprom.c: 28:     EEDATA = data;
 13096  003AFA  C027  FFA8         	movff	EEPROM_write@data,4008	;volatile
 13097  003AFE                     
 13098                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
 13099  003AFE  9EA6               	bcf	166,7,c	;volsfr
 13100  003B00                     
 13101                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
 13102  003B00  84A6               	bsf	166,2,c	;volsfr
 13103  003B02                     
 13104                           ;eeprom.c: 31:     EECON2 = 0x55;
 13105  003B02  0E55               	movlw	85
 13106  003B04  6EA7               	movwf	167,c	;volsfr
 13107  003B06                     
 13108                           ;eeprom.c: 32:     EECON2 = 0xAA;
 13109  003B06  0EAA               	movlw	170
 13110  003B08  6EA7               	movwf	167,c	;volsfr
 13111  003B0A                     
 13112                           ;eeprom.c: 33:     EECON1bits.WR = 1;
 13113  003B0A  82A6               	bsf	166,1,c	;volsfr
 13114  003B0C                     l579:
 13115  003B0C  B2A6               	btfsc	166,1,c	;volsfr
 13116  003B0E  EF8B  F01D         	goto	u3551
 13117  003B12  EF8D  F01D         	goto	u3550
 13118  003B16                     u3551:
 13119  003B16  EF86  F01D         	goto	l579
 13120  003B1A                     u3550:
 13121  003B1A                     
 13122                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
 13123  003B1A  94A6               	bcf	166,2,c	;volsfr
 13124                           
 13125                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
 13126  003B1C  8EF2               	bsf	242,7,c	;volatile
 13127  003B1E  0012               	return		;funcret
 13128  003B20                     __end_of_EEPROM_write:
 13129                           	callstack 0
 13130                           
 13131 ;; *************** function _buscar_receita *****************
 13132 ;; Defined at:
 13133 ;;		line 55 in file "eeprom.c"
 13134 ;; Parameters:    Size  Location     Type
 13135 ;;  adrs            1    wreg     unsigned char 
 13136 ;;  data            2    6[COMRAM] PTR unsigned char 
 13137 ;;		 -> main@vetor_aux(16), 
 13138 ;; Auto vars:     Size  Location     Type
 13139 ;;  adrs            1   10[COMRAM] unsigned char 
 13140 ;;  i               1   11[COMRAM] unsigned char 
 13141 ;;  aux             2    8[COMRAM] int 
 13142 ;; Return value:  Size  Location     Type
 13143 ;;                  1    wreg      void 
 13144 ;; Registers used:
 13145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13151 ;;      Params:         2       0       0       0       0       0       0       0       0
 13152 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13153 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13154 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13155 ;;Total ram usage:        6 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    3
 13158 ;; This function calls:
 13159 ;;		_EEPROM_read
 13160 ;;		_end_receita
 13161 ;; This function is called by:
 13162 ;;		_main
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           	psect	text63
 13167  003864                     __ptext63:
 13168                           	callstack 0
 13169  003864                     _buscar_receita:
 13170                           	callstack 27
 13171                           
 13172                           ;incstack = 0
 13173                           ;buscar_receita@adrs stored from wreg
 13174  003864  6E31               	movwf	buscar_receita@adrs^0,c
 13175  003866                     
 13176                           ;eeprom.c: 55: void buscar_receita (char adrs, unsigned char * data );eeprom.c: 56: {;ee
      +                          prom.c: 57:     int aux;;eeprom.c: 58:     aux = end_receita(adrs);
 13177  003866  C031  F027         	movff	buscar_receita@adrs,end_receita@x
 13178  00386A  6A28               	clrf	(end_receita@x+1)^0,c
 13179  00386C  ECE4  F01D         	call	_end_receita	;wreg free
 13180  003870  C027  F02F         	movff	?_end_receita,buscar_receita@aux
 13181  003874  C028  F030         	movff	?_end_receita+1,buscar_receita@aux+1
 13182  003878                     
 13183                           ;eeprom.c: 59:     for( char i=0; i<16; i++ )
 13184  003878  0E00               	movlw	0
 13185  00387A  6E32               	movwf	buscar_receita@i^0,c
 13186  00387C                     l6157:
 13187                           
 13188                           ;eeprom.c: 60:        *(data+i) = EEPROM_read(aux+i);
 13189  00387C  5032               	movf	buscar_receita@i^0,w,c
 13190  00387E  242D               	addwf	buscar_receita@data^0,w,c
 13191  003880  6ED9               	movwf	fsr2l,c
 13192  003882  0E00               	movlw	0
 13193  003884  202E               	addwfc	(buscar_receita@data+1)^0,w,c
 13194  003886  6EDA               	movwf	fsr2h,c
 13195  003888  5032               	movf	buscar_receita@i^0,w,c
 13196  00388A  242F               	addwf	buscar_receita@aux^0,w,c
 13197  00388C  ECBF  F01E         	call	_EEPROM_read
 13198  003890  6EDF               	movwf	indf2,c
 13199  003892  2A32               	incf	buscar_receita@i^0,f,c
 13200  003894  0E0F               	movlw	15
 13201  003896  6432               	cpfsgt	buscar_receita@i^0,c
 13202  003898  EF50  F01C         	goto	u4371
 13203  00389C  EF52  F01C         	goto	u4370
 13204  0038A0                     u4371:
 13205  0038A0  EF3E  F01C         	goto	l6157
 13206  0038A4                     u4370:
 13207  0038A4  0012               	return		;funcret
 13208  0038A6                     __end_of_buscar_receita:
 13209                           	callstack 0
 13210                           
 13211 ;; *************** function _buscar_dado *****************
 13212 ;; Defined at:
 13213 ;;		line 70 in file "eeprom.c"
 13214 ;; Parameters:    Size  Location     Type
 13215 ;;  adrs            1    wreg     unsigned char 
 13216 ;;  col             1    6[COMRAM] unsigned char 
 13217 ;;  data            2    7[COMRAM] PTR unsigned char 
 13218 ;;		 -> main@init_cond(1), 
 13219 ;; Auto vars:     Size  Location     Type
 13220 ;;  adrs            1   11[COMRAM] unsigned char 
 13221 ;;  aux             2    9[COMRAM] int 
 13222 ;; Return value:  Size  Location     Type
 13223 ;;                  1    wreg      void 
 13224 ;; Registers used:
 13225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13231 ;;      Params:         3       0       0       0       0       0       0       0       0
 13232 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13233 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13234 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13235 ;;Total ram usage:        6 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    3
 13238 ;; This function calls:
 13239 ;;		_EEPROM_read
 13240 ;;		_end_receita
 13241 ;; This function is called by:
 13242 ;;		_main
 13243 ;; This function uses a non-reentrant model
 13244 ;;
 13245                           
 13246                           	psect	text64
 13247  003B7A                     __ptext64:
 13248                           	callstack 0
 13249  003B7A                     _buscar_dado:
 13250                           	callstack 27
 13251                           
 13252                           ;incstack = 0
 13253                           ;buscar_dado@adrs stored from wreg
 13254  003B7A  6E32               	movwf	buscar_dado@adrs^0,c
 13255  003B7C                     
 13256                           ;eeprom.c: 70: void buscar_dado (char adrs, char col, unsigned char *data);eeprom.c: 71:
      +                           {;eeprom.c: 72:     int aux;;eeprom.c: 73:     aux = end_receita(adrs);
 13257  003B7C  C032  F027         	movff	buscar_dado@adrs,end_receita@x
 13258  003B80  6A28               	clrf	(end_receita@x+1)^0,c
 13259  003B82  ECE4  F01D         	call	_end_receita	;wreg free
 13260  003B86  C027  F030         	movff	?_end_receita,buscar_dado@aux
 13261  003B8A  C028  F031         	movff	?_end_receita+1,buscar_dado@aux+1
 13262  003B8E                     
 13263                           ;eeprom.c: 74:     *data = EEPROM_read((aux+col));
 13264  003B8E  502D               	movf	buscar_dado@col^0,w,c
 13265  003B90  2430               	addwf	buscar_dado@aux^0,w,c
 13266  003B92  ECBF  F01E         	call	_EEPROM_read
 13267  003B96  C02E  FFD9         	movff	buscar_dado@data,fsr2l
 13268  003B9A  C02F  FFDA         	movff	buscar_dado@data+1,fsr2h
 13269  003B9E  6EDF               	movwf	indf2,c
 13270  003BA0  0012               	return		;funcret
 13271  003BA2                     __end_of_buscar_dado:
 13272                           	callstack 0
 13273                           
 13274 ;; *************** function _end_receita *****************
 13275 ;; Defined at:
 13276 ;;		line 41 in file "eeprom.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;  x               2    0[COMRAM] int 
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;		None
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  2    0[COMRAM] int 
 13283 ;; Registers used:
 13284 ;;		wreg, status,2, status,0
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13290 ;;      Params:         2       0       0       0       0       0       0       0       0
 13291 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13292 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13293 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13294 ;;Total ram usage:        4 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    2
 13297 ;; This function calls:
 13298 ;;		Nothing
 13299 ;; This function is called by:
 13300 ;;		_salvar_receita
 13301 ;;		_buscar_receita
 13302 ;;		_salvar_dado
 13303 ;;		_buscar_dado
 13304 ;;		_deletar_receita
 13305 ;;		_receita_livre
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           	psect	text65
 13310  003BC8                     __ptext65:
 13311                           	callstack 0
 13312  003BC8                     _end_receita:
 13313                           	callstack 27
 13314  003BC8                     
 13315                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
 13316  003BC8  C027  F029         	movff	end_receita@x,??_end_receita
 13317  003BCC  C028  F02A         	movff	end_receita@x+1,??_end_receita+1
 13318  003BD0  3A29               	swapf	??_end_receita^0,f,c
 13319  003BD2  3A2A               	swapf	(??_end_receita+1)^0,f,c
 13320  003BD4  0EF0               	movlw	240
 13321  003BD6  162A               	andwf	(??_end_receita+1)^0,f,c
 13322  003BD8  5029               	movf	??_end_receita^0,w,c
 13323  003BDA  0B0F               	andlw	15
 13324  003BDC  122A               	iorwf	(??_end_receita+1)^0,f,c
 13325  003BDE  0EF0               	movlw	240
 13326  003BE0  1629               	andwf	??_end_receita^0,f,c
 13327  003BE2  C029  F027         	movff	??_end_receita,?_end_receita
 13328  003BE6  C02A  F028         	movff	??_end_receita+1,?_end_receita+1
 13329  003BEA  0012               	return		;funcret
 13330  003BEC                     __end_of_end_receita:
 13331                           	callstack 0
 13332                           
 13333 ;; *************** function _EEPROM_read *****************
 13334 ;; Defined at:
 13335 ;;		line 14 in file "eeprom.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  addr            1    wreg     unsigned char 
 13338 ;; Auto vars:     Size  Location     Type
 13339 ;;  addr            1    0[COMRAM] unsigned char 
 13340 ;; Return value:  Size  Location     Type
 13341 ;;                  1    wreg      unsigned char 
 13342 ;; Registers used:
 13343 ;;		wreg, status,2
 13344 ;; Tracked objects:
 13345 ;;		On entry : 0/0
 13346 ;;		On exit  : 0/0
 13347 ;;		Unchanged: 0/0
 13348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13349 ;;      Params:         0       0       0       0       0       0       0       0       0
 13350 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13351 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13352 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13353 ;;Total ram usage:        1 bytes
 13354 ;; Hardware stack levels used:    1
 13355 ;; Hardware stack levels required when called:    2
 13356 ;; This function calls:
 13357 ;;		Nothing
 13358 ;; This function is called by:
 13359 ;;		_buscar_receita
 13360 ;;		_buscar_dado
 13361 ;;		_receita_livre
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           	psect	text66
 13366  003D7E                     __ptext66:
 13367                           	callstack 0
 13368  003D7E                     _EEPROM_read:
 13369                           	callstack 27
 13370                           
 13371                           ;incstack = 0
 13372                           ;EEPROM_read@addr stored from wreg
 13373  003D7E  6E27               	movwf	EEPROM_read@addr^0,c
 13374  003D80                     
 13375                           ;eeprom.c: 14: char EEPROM_read( unsigned char addr );eeprom.c: 15: {;eeprom.c: 17:     
      +                          EEADR = addr;
 13376  003D80  C027  FFA9         	movff	EEPROM_read@addr,4009	;volatile
 13377  003D84                     
 13378                           ;eeprom.c: 18:     EECON1bits.EEPGD = 0;
 13379  003D84  9EA6               	bcf	166,7,c	;volsfr
 13380  003D86                     
 13381                           ;eeprom.c: 19:     EECON1bits.RD = 1;
 13382  003D86  80A6               	bsf	166,0,c	;volsfr
 13383  003D88                     
 13384                           ;eeprom.c: 20:     return( EEDATA );
 13385  003D88  50A8               	movf	168,w,c	;volatile
 13386  003D8A  0012               	return		;funcret
 13387  003D8C                     __end_of_EEPROM_read:
 13388                           	callstack 0
 13389                           
 13390 ;; *************** function _addIndicePassos *****************
 13391 ;; Defined at:
 13392 ;;		line 19 in file "fifo.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;		None
 13395 ;; Auto vars:     Size  Location     Type
 13396 ;;		None
 13397 ;; Return value:  Size  Location     Type
 13398 ;;                  1    wreg      void 
 13399 ;; Registers used:
 13400 ;;		wreg, status,2, status,0
 13401 ;; Tracked objects:
 13402 ;;		On entry : 0/0
 13403 ;;		On exit  : 0/0
 13404 ;;		Unchanged: 0/0
 13405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13406 ;;      Params:         0       0       0       0       0       0       0       0       0
 13407 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13408 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13409 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13410 ;;Total ram usage:        0 bytes
 13411 ;; Hardware stack levels used:    1
 13412 ;; Hardware stack levels required when called:    2
 13413 ;; This function calls:
 13414 ;;		Nothing
 13415 ;; This function is called by:
 13416 ;;		_main
 13417 ;; This function uses a non-reentrant model
 13418 ;;
 13419                           
 13420                           	psect	text67
 13421  003C94                     __ptext67:
 13422                           	callstack 0
 13423  003C94                     _addIndicePassos:
 13424                           	callstack 28
 13425  003C94                     
 13426                           ;fifo.c: 21:     if(indice_passos < ind_fila)
 13427  003C94  5059               	movf	_ind_fila^0,w,c
 13428  003C96  5C57               	subwf	_indice_passos^0,w,c
 13429  003C98  B0D8               	btfsc	status,0,c
 13430  003C9A  EF51  F01E         	goto	u4331
 13431  003C9E  EF53  F01E         	goto	u4330
 13432  003CA2                     u4331:
 13433  003CA2  EF54  F01E         	goto	l647
 13434  003CA6                     u4330:
 13435  003CA6                     
 13436                           ;fifo.c: 22:         indice_passos++;
 13437  003CA6  2A57               	incf	_indice_passos^0,f,c
 13438  003CA8                     l647:
 13439  003CA8  0012               	return		;funcret
 13440  003CAA                     __end_of_addIndicePassos:
 13441                           	callstack 0
 13442                           
 13443 ;; *************** function _addContCiclos *****************
 13444 ;; Defined at:
 13445 ;;		line 59 in file "fifo.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		status,2, status,0
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13462 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13463 ;;Total ram usage:        0 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    2
 13466 ;; This function calls:
 13467 ;;		Nothing
 13468 ;; This function is called by:
 13469 ;;		_main
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           	psect	text68
 13474  003DE4                     __ptext68:
 13475                           	callstack 0
 13476  003DE4                     _addContCiclos:
 13477                           	callstack 28
 13478  003DE4                     
 13479                           ;fifo.c: 61:     cont_ciclos++;
 13480  003DE4  4A0D               	infsnz	_cont_ciclos^0,f,c
 13481  003DE6  2A0E               	incf	(_cont_ciclos+1)^0,f,c
 13482  003DE8  0012               	return		;funcret
 13483  003DEA                     __end_of_addContCiclos:
 13484                           	callstack 0
 13485                           
 13486 ;; *************** function ___lmul *****************
 13487 ;; Defined at:
 13488 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul32.c"
 13489 ;; Parameters:    Size  Location     Type
 13490 ;;  multiplier      4    0[COMRAM] unsigned long 
 13491 ;;  multiplicand    4    4[COMRAM] unsigned long 
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;  product         4    8[COMRAM] unsigned long 
 13494 ;; Return value:  Size  Location     Type
 13495 ;;                  4    0[COMRAM] unsigned long 
 13496 ;; Registers used:
 13497 ;;		wreg, status,2, status,0
 13498 ;; Tracked objects:
 13499 ;;		On entry : 0/0
 13500 ;;		On exit  : 0/0
 13501 ;;		Unchanged: 0/0
 13502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13503 ;;      Params:         8       0       0       0       0       0       0       0       0
 13504 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13506 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13507 ;;Total ram usage:       12 bytes
 13508 ;; Hardware stack levels used:    1
 13509 ;; Hardware stack levels required when called:    2
 13510 ;; This function calls:
 13511 ;;		Nothing
 13512 ;; This function is called by:
 13513 ;;		_main
 13514 ;; This function uses a non-reentrant model
 13515 ;;
 13516                           
 13517                           	psect	text69
 13518  00331E                     __ptext69:
 13519                           	callstack 0
 13520  00331E                     ___lmul:
 13521                           	callstack 28
 13522  00331E  0E00               	movlw	0
 13523  003320  6E2F               	movwf	___lmul@product^0,c
 13524  003322  0E00               	movlw	0
 13525  003324  6E30               	movwf	(___lmul@product+1)^0,c
 13526  003326  0E00               	movlw	0
 13527  003328  6E31               	movwf	(___lmul@product+2)^0,c
 13528  00332A  0E00               	movlw	0
 13529  00332C  6E32               	movwf	(___lmul@product+3)^0,c
 13530  00332E                     l6203:
 13531  00332E  A027               	btfss	___lmul@multiplier^0,0,c
 13532  003330  EF9C  F019         	goto	u4431
 13533  003334  EF9E  F019         	goto	u4430
 13534  003338                     u4431:
 13535  003338  EFA6  F019         	goto	l6207
 13536  00333C                     u4430:
 13537  00333C  502B               	movf	___lmul@multiplicand^0,w,c
 13538  00333E  262F               	addwf	___lmul@product^0,f,c
 13539  003340  502C               	movf	(___lmul@multiplicand+1)^0,w,c
 13540  003342  2230               	addwfc	(___lmul@product+1)^0,f,c
 13541  003344  502D               	movf	(___lmul@multiplicand+2)^0,w,c
 13542  003346  2231               	addwfc	(___lmul@product+2)^0,f,c
 13543  003348  502E               	movf	(___lmul@multiplicand+3)^0,w,c
 13544  00334A  2232               	addwfc	(___lmul@product+3)^0,f,c
 13545  00334C                     l6207:
 13546  00334C  90D8               	bcf	status,0,c
 13547  00334E  362B               	rlcf	___lmul@multiplicand^0,f,c
 13548  003350  362C               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13549  003352  362D               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13550  003354  362E               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13551  003356  90D8               	bcf	status,0,c
 13552  003358  322A               	rrcf	(___lmul@multiplier+3)^0,f,c
 13553  00335A  3229               	rrcf	(___lmul@multiplier+2)^0,f,c
 13554  00335C  3228               	rrcf	(___lmul@multiplier+1)^0,f,c
 13555  00335E  3227               	rrcf	___lmul@multiplier^0,f,c
 13556  003360  5027               	movf	___lmul@multiplier^0,w,c
 13557  003362  1028               	iorwf	(___lmul@multiplier+1)^0,w,c
 13558  003364  1029               	iorwf	(___lmul@multiplier+2)^0,w,c
 13559  003366  102A               	iorwf	(___lmul@multiplier+3)^0,w,c
 13560  003368  A4D8               	btfss	status,2,c
 13561  00336A  EFB9  F019         	goto	u4441
 13562  00336E  EFBB  F019         	goto	u4440
 13563  003372                     u4441:
 13564  003372  EF97  F019         	goto	l6203
 13565  003376                     u4440:
 13566  003376  C02F  F027         	movff	___lmul@product,?___lmul
 13567  00337A  C030  F028         	movff	___lmul@product+1,?___lmul+1
 13568  00337E  C031  F029         	movff	___lmul@product+2,?___lmul+2
 13569  003382  C032  F02A         	movff	___lmul@product+3,?___lmul+3
 13570  003386  0012               	return		;funcret
 13571  003388                     __end_of___lmul:
 13572                           	callstack 0
 13573                           
 13574 ;; *************** function ___aldiv *****************
 13575 ;; Defined at:
 13576 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aldiv.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;  dividend        4   12[COMRAM] long 
 13579 ;;  divisor         4   16[COMRAM] long 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  quotient        4   22[COMRAM] long 
 13582 ;;  sign            1   21[COMRAM] unsigned char 
 13583 ;;  counter         1   20[COMRAM] unsigned char 
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  4   12[COMRAM] long 
 13586 ;; Registers used:
 13587 ;;		wreg, status,2, status,0
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13593 ;;      Params:         8       0       0       0       0       0       0       0       0
 13594 ;;      Locals:         6       0       0       0       0       0       0       0       0
 13595 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13596 ;;      Totals:        14       0       0       0       0       0       0       0       0
 13597 ;;Total ram usage:       14 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    2
 13600 ;; This function calls:
 13601 ;;		Nothing
 13602 ;; This function is called by:
 13603 ;;		_main
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           	psect	text70
 13608  0026C8                     __ptext70:
 13609                           	callstack 0
 13610  0026C8                     ___aldiv:
 13611                           	callstack 28
 13612  0026C8  0E00               	movlw	0
 13613  0026CA  6E3C               	movwf	___aldiv@sign^0,c
 13614  0026CC  BE3A               	btfsc	(___aldiv@divisor+3)^0,7,c
 13615  0026CE  EF6D  F013         	goto	u4450
 13616  0026D2  EF6B  F013         	goto	u4451
 13617  0026D6                     u4451:
 13618  0026D6  EF77  F013         	goto	l6219
 13619  0026DA                     u4450:
 13620  0026DA  1E3A               	comf	(___aldiv@divisor+3)^0,f,c
 13621  0026DC  1E39               	comf	(___aldiv@divisor+2)^0,f,c
 13622  0026DE  1E38               	comf	(___aldiv@divisor+1)^0,f,c
 13623  0026E0  6C37               	negf	___aldiv@divisor^0,c
 13624  0026E2  0E00               	movlw	0
 13625  0026E4  2238               	addwfc	(___aldiv@divisor+1)^0,f,c
 13626  0026E6  2239               	addwfc	(___aldiv@divisor+2)^0,f,c
 13627  0026E8  223A               	addwfc	(___aldiv@divisor+3)^0,f,c
 13628  0026EA  0E01               	movlw	1
 13629  0026EC  6E3C               	movwf	___aldiv@sign^0,c
 13630  0026EE                     l6219:
 13631  0026EE  BE36               	btfsc	(___aldiv@dividend+3)^0,7,c
 13632  0026F0  EF7E  F013         	goto	u4460
 13633  0026F4  EF7C  F013         	goto	u4461
 13634  0026F8                     u4461:
 13635  0026F8  EF88  F013         	goto	l6225
 13636  0026FC                     u4460:
 13637  0026FC  1E36               	comf	(___aldiv@dividend+3)^0,f,c
 13638  0026FE  1E35               	comf	(___aldiv@dividend+2)^0,f,c
 13639  002700  1E34               	comf	(___aldiv@dividend+1)^0,f,c
 13640  002702  6C33               	negf	___aldiv@dividend^0,c
 13641  002704  0E00               	movlw	0
 13642  002706  2234               	addwfc	(___aldiv@dividend+1)^0,f,c
 13643  002708  2235               	addwfc	(___aldiv@dividend+2)^0,f,c
 13644  00270A  2236               	addwfc	(___aldiv@dividend+3)^0,f,c
 13645  00270C  0E01               	movlw	1
 13646  00270E  1A3C               	xorwf	___aldiv@sign^0,f,c
 13647  002710                     l6225:
 13648  002710  0E00               	movlw	0
 13649  002712  6E3D               	movwf	___aldiv@quotient^0,c
 13650  002714  0E00               	movlw	0
 13651  002716  6E3E               	movwf	(___aldiv@quotient+1)^0,c
 13652  002718  0E00               	movlw	0
 13653  00271A  6E3F               	movwf	(___aldiv@quotient+2)^0,c
 13654  00271C  0E00               	movlw	0
 13655  00271E  6E40               	movwf	(___aldiv@quotient+3)^0,c
 13656  002720  5037               	movf	___aldiv@divisor^0,w,c
 13657  002722  1038               	iorwf	(___aldiv@divisor+1)^0,w,c
 13658  002724  1039               	iorwf	(___aldiv@divisor+2)^0,w,c
 13659  002726  103A               	iorwf	(___aldiv@divisor+3)^0,w,c
 13660  002728  B4D8               	btfsc	status,2,c
 13661  00272A  EF99  F013         	goto	u4471
 13662  00272E  EF9B  F013         	goto	u4470
 13663  002732                     u4471:
 13664  002732  EFD1  F013         	goto	l6247
 13665  002736                     u4470:
 13666  002736  0E01               	movlw	1
 13667  002738  6E3B               	movwf	___aldiv@counter^0,c
 13668  00273A  EFA5  F013         	goto	l6233
 13669  00273E                     l6231:
 13670  00273E  90D8               	bcf	status,0,c
 13671  002740  3637               	rlcf	___aldiv@divisor^0,f,c
 13672  002742  3638               	rlcf	(___aldiv@divisor+1)^0,f,c
 13673  002744  3639               	rlcf	(___aldiv@divisor+2)^0,f,c
 13674  002746  363A               	rlcf	(___aldiv@divisor+3)^0,f,c
 13675  002748  2A3B               	incf	___aldiv@counter^0,f,c
 13676  00274A                     l6233:
 13677  00274A  AE3A               	btfss	(___aldiv@divisor+3)^0,7,c
 13678  00274C  EFAA  F013         	goto	u4481
 13679  002750  EFAC  F013         	goto	u4480
 13680  002754                     u4481:
 13681  002754  EF9F  F013         	goto	l6231
 13682  002758                     u4480:
 13683  002758                     l6235:
 13684  002758  90D8               	bcf	status,0,c
 13685  00275A  363D               	rlcf	___aldiv@quotient^0,f,c
 13686  00275C  363E               	rlcf	(___aldiv@quotient+1)^0,f,c
 13687  00275E  363F               	rlcf	(___aldiv@quotient+2)^0,f,c
 13688  002760  3640               	rlcf	(___aldiv@quotient+3)^0,f,c
 13689  002762  5037               	movf	___aldiv@divisor^0,w,c
 13690  002764  5C33               	subwf	___aldiv@dividend^0,w,c
 13691  002766  5038               	movf	(___aldiv@divisor+1)^0,w,c
 13692  002768  5834               	subwfb	(___aldiv@dividend+1)^0,w,c
 13693  00276A  5039               	movf	(___aldiv@divisor+2)^0,w,c
 13694  00276C  5835               	subwfb	(___aldiv@dividend+2)^0,w,c
 13695  00276E  503A               	movf	(___aldiv@divisor+3)^0,w,c
 13696  002770  5836               	subwfb	(___aldiv@dividend+3)^0,w,c
 13697  002772  A0D8               	btfss	status,0,c
 13698  002774  EFBE  F013         	goto	u4491
 13699  002778  EFC0  F013         	goto	u4490
 13700  00277C                     u4491:
 13701  00277C  EFC9  F013         	goto	l6243
 13702  002780                     u4490:
 13703  002780  5037               	movf	___aldiv@divisor^0,w,c
 13704  002782  5E33               	subwf	___aldiv@dividend^0,f,c
 13705  002784  5038               	movf	(___aldiv@divisor+1)^0,w,c
 13706  002786  5A34               	subwfb	(___aldiv@dividend+1)^0,f,c
 13707  002788  5039               	movf	(___aldiv@divisor+2)^0,w,c
 13708  00278A  5A35               	subwfb	(___aldiv@dividend+2)^0,f,c
 13709  00278C  503A               	movf	(___aldiv@divisor+3)^0,w,c
 13710  00278E  5A36               	subwfb	(___aldiv@dividend+3)^0,f,c
 13711  002790  803D               	bsf	___aldiv@quotient^0,0,c
 13712  002792                     l6243:
 13713  002792  90D8               	bcf	status,0,c
 13714  002794  323A               	rrcf	(___aldiv@divisor+3)^0,f,c
 13715  002796  3239               	rrcf	(___aldiv@divisor+2)^0,f,c
 13716  002798  3238               	rrcf	(___aldiv@divisor+1)^0,f,c
 13717  00279A  3237               	rrcf	___aldiv@divisor^0,f,c
 13718  00279C  2E3B               	decfsz	___aldiv@counter^0,f,c
 13719  00279E  EFAC  F013         	goto	l6235
 13720  0027A2                     l6247:
 13721  0027A2  503C               	movf	___aldiv@sign^0,w,c
 13722  0027A4  B4D8               	btfsc	status,2,c
 13723  0027A6  EFD7  F013         	goto	u4501
 13724  0027AA  EFD9  F013         	goto	u4500
 13725  0027AE                     u4501:
 13726  0027AE  EFE1  F013         	goto	l6251
 13727  0027B2                     u4500:
 13728  0027B2  1E40               	comf	(___aldiv@quotient+3)^0,f,c
 13729  0027B4  1E3F               	comf	(___aldiv@quotient+2)^0,f,c
 13730  0027B6  1E3E               	comf	(___aldiv@quotient+1)^0,f,c
 13731  0027B8  6C3D               	negf	___aldiv@quotient^0,c
 13732  0027BA  0E00               	movlw	0
 13733  0027BC  223E               	addwfc	(___aldiv@quotient+1)^0,f,c
 13734  0027BE  223F               	addwfc	(___aldiv@quotient+2)^0,f,c
 13735  0027C0  2240               	addwfc	(___aldiv@quotient+3)^0,f,c
 13736  0027C2                     l6251:
 13737  0027C2  C03D  F033         	movff	___aldiv@quotient,?___aldiv
 13738  0027C6  C03E  F034         	movff	___aldiv@quotient+1,?___aldiv+1
 13739  0027CA  C03F  F035         	movff	___aldiv@quotient+2,?___aldiv+2
 13740  0027CE  C040  F036         	movff	___aldiv@quotient+3,?___aldiv+3
 13741  0027D2  0012               	return		;funcret
 13742  0027D4                     __end_of___aldiv:
 13743                           	callstack 0
 13744                           
 13745 ;; *************** function _Wifi_mode *****************
 13746 ;; Defined at:
 13747 ;;		line 46 in file "wifi.c"
 13748 ;; Parameters:    Size  Location     Type
 13749 ;;  d               1    wreg     unsigned char 
 13750 ;; Auto vars:     Size  Location     Type
 13751 ;;  d               1    3[COMRAM] unsigned char 
 13752 ;; Return value:  Size  Location     Type
 13753 ;;                  1    wreg      void 
 13754 ;; Registers used:
 13755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 13756 ;; Tracked objects:
 13757 ;;		On entry : 0/0
 13758 ;;		On exit  : 0/0
 13759 ;;		Unchanged: 0/0
 13760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13761 ;;      Params:         0       0       0       0       0       0       0       0       0
 13762 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13764 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13765 ;;Total ram usage:        1 bytes
 13766 ;; Hardware stack levels used:    1
 13767 ;; Hardware stack levels required when called:    4
 13768 ;; This function calls:
 13769 ;;		_wifi_send
 13770 ;; This function is called by:
 13771 ;;		_main
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           	psect	text71
 13776  00313A                     __ptext71:
 13777                           	callstack 0
 13778  00313A                     _Wifi_mode:
 13779                           	callstack 26
 13780                           
 13781                           ;incstack = 0
 13782                           ;Wifi_mode@d stored from wreg
 13783  00313A  6E2A               	movwf	Wifi_mode@d^0,c
 13784  00313C                     
 13785                           ;wifi.c: 46: void Wifi_mode(unsigned char d );wifi.c: 47: {;wifi.c: 48:     if(d == 1)
 13786  00313C  042A               	decf	Wifi_mode@d^0,w,c
 13787  00313E  A4D8               	btfss	status,2,c
 13788  003140  EFA4  F018         	goto	u4401
 13789  003144  EFA6  F018         	goto	u4400
 13790  003148                     u4401:
 13791  003148  EFAC  F018         	goto	l6191
 13792  00314C                     u4400:
 13793  00314C                     
 13794                           ;wifi.c: 49:     {;wifi.c: 50:         wifi_send("AT+CWMODE=1\r\n");
 13795  00314C  0E98               	movlw	low STR_33
 13796  00314E  6E28               	movwf	wifi_send@msg^0,c
 13797  003150  0E7F               	movlw	high STR_33
 13798  003152  6E29               	movwf	(wifi_send@msg+1)^0,c
 13799  003154  ECC9  F016         	call	_wifi_send	;wreg free
 13800  003158                     l6191:
 13801                           
 13802                           ;wifi.c: 53:     if(d == 2)
 13803  003158  0E02               	movlw	2
 13804  00315A  182A               	xorwf	Wifi_mode@d^0,w,c
 13805  00315C  A4D8               	btfss	status,2,c
 13806  00315E  EFB3  F018         	goto	u4411
 13807  003162  EFB5  F018         	goto	u4410
 13808  003166                     u4411:
 13809  003166  EFC1  F018         	goto	l6195
 13810  00316A                     u4410:
 13811  00316A                     
 13812                           ;wifi.c: 54:     {;wifi.c: 55:         wifi_send("AT+CWMODE=2\r\n");
 13813  00316A  0EB4               	movlw	low STR_34
 13814  00316C  6E28               	movwf	wifi_send@msg^0,c
 13815  00316E  0E7F               	movlw	high STR_34
 13816  003170  6E29               	movwf	(wifi_send@msg+1)^0,c
 13817  003172  ECC9  F016         	call	_wifi_send	;wreg free
 13818                           
 13819                           ;wifi.c: 56:         wifi_send("AT+CWSAP=\"Wireless\",\"********\",1,2,4,0\r\n");
 13820  003176  0E5F               	movlw	low STR_35
 13821  003178  6E28               	movwf	wifi_send@msg^0,c
 13822  00317A  0E7D               	movlw	high STR_35
 13823  00317C  6E29               	movwf	(wifi_send@msg+1)^0,c
 13824  00317E  ECC9  F016         	call	_wifi_send	;wreg free
 13825  003182                     l6195:
 13826                           
 13827                           ;wifi.c: 58:     if(d == 3)
 13828  003182  0E03               	movlw	3
 13829  003184  182A               	xorwf	Wifi_mode@d^0,w,c
 13830  003186  A4D8               	btfss	status,2,c
 13831  003188  EFC8  F018         	goto	u4421
 13832  00318C  EFCA  F018         	goto	u4420
 13833  003190                     u4421:
 13834  003190  EFD8  F018         	goto	l6199
 13835  003194                     u4420:
 13836  003194                     
 13837                           ;wifi.c: 59:     {;wifi.c: 60:         wifi_send("AT+CWMODE=3\r\n");
 13838  003194  0EC2               	movlw	low STR_36
 13839  003196  6E28               	movwf	wifi_send@msg^0,c
 13840  003198  0E7F               	movlw	high STR_36
 13841  00319A  6E29               	movwf	(wifi_send@msg+1)^0,c
 13842  00319C  ECC9  F016         	call	_wifi_send	;wreg free
 13843                           
 13844                           ;wifi.c: 61:         wifi_send("AT+CWSAP=\"Wireless\",\"********\",1,2,4,0\r\n");
 13845  0031A0  0E5F               	movlw	low STR_35
 13846  0031A2  6E28               	movwf	wifi_send@msg^0,c
 13847  0031A4  0E7D               	movlw	high STR_35
 13848  0031A6  6E29               	movwf	(wifi_send@msg+1)^0,c
 13849  0031A8  ECC9  F016         	call	_wifi_send	;wreg free
 13850                           
 13851                           ;wifi.c: 62:     }
 13852  0031AC  EFDE  F018         	goto	l1205
 13853  0031B0                     l6199:
 13854                           
 13855                           ;wifi.c: 64:         wifi_send("AT+CWMODE=0\r\n");
 13856  0031B0  0E8A               	movlw	low STR_38
 13857  0031B2  6E28               	movwf	wifi_send@msg^0,c
 13858  0031B4  0E7F               	movlw	high STR_38
 13859  0031B6  6E29               	movwf	(wifi_send@msg+1)^0,c
 13860  0031B8  ECC9  F016         	call	_wifi_send	;wreg free
 13861  0031BC                     l1205:
 13862  0031BC  0012               	return		;funcret
 13863  0031BE                     __end_of_Wifi_mode:
 13864                           	callstack 0
 13865                           
 13866 ;; *************** function _wifi_send *****************
 13867 ;; Defined at:
 13868 ;;		line 17 in file "wifi.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  msg             2    1[COMRAM] PTR const unsigned char 
 13871 ;;		 -> STR_46(14), STR_45(40), Wifi_cipsend@vtr(30), Wifi_cipsend@str(30), 
 13872 ;;		 -> STR_44(21), STR_43(14), STR_42(15), STR_41(18), 
 13873 ;;		 -> STR_40(11), STR_39(11), Wifi_connect@str(40), STR_38(14), 
 13874 ;;		 -> STR_37(41), STR_36(14), STR_35(41), STR_34(14), 
 13875 ;;		 -> STR_33(14), 
 13876 ;; Auto vars:     Size  Location     Type
 13877 ;;		None
 13878 ;; Return value:  Size  Location     Type
 13879 ;;                  1    wreg      void 
 13880 ;; Registers used:
 13881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
 13882 ;; Tracked objects:
 13883 ;;		On entry : 0/0
 13884 ;;		On exit  : 0/0
 13885 ;;		Unchanged: 0/0
 13886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13887 ;;      Params:         2       0       0       0       0       0       0       0       0
 13888 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13889 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13890 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13891 ;;Total ram usage:        2 bytes
 13892 ;; Hardware stack levels used:    1
 13893 ;; Hardware stack levels required when called:    3
 13894 ;; This function calls:
 13895 ;;		_txEUSART
 13896 ;;		_txStatusEUSART
 13897 ;; This function is called by:
 13898 ;;		_Wifi_mode
 13899 ;;		_Wifi_connect
 13900 ;;		_Wifi_scan
 13901 ;;		_Wifi_ip
 13902 ;;		_Wifi_autoconnect
 13903 ;;		_Wifi_config_servidor
 13904 ;;		_Wifi_cipsend
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           	psect	text72
 13909  002D92                     __ptext72:
 13910                           	callstack 0
 13911  002D92                     _wifi_send:
 13912                           	callstack 26
 13913  002D92                     
 13914                           ;wifi.c: 17: void wifi_send( const char * msg );wifi.c: 18: {;wifi.c: 19:     while( *ms
      +                          g )
 13915  002D92  EF03  F017         	goto	l5537
 13916  002D96                     l5531:
 13917  002D96  EE20  F051         	lfsr	2,_eusart+10
 13918  002D9A  D802               	call	u3768
 13919  002D9C  EFDA  F016         	goto	u3769
 13920  002DA0                     u3768:
 13921  002DA0  0005               	push	
 13922  002DA2  6EFA               	movwf	pclath,c
 13923  002DA4  50DE               	movf	postinc2,w,c
 13924  002DA6  6EFD               	movwf	tosl,c
 13925  002DA8  50DE               	movf	postinc2,w,c
 13926  002DAA  6EFE               	movwf	tosh,c
 13927  002DAC  50F8               	movf	tblptru,w,c
 13928  002DAE  6EFF               	movwf	tosu,c
 13929  002DB0  50FA               	movf	pclath,w,c
 13930  002DB2  0012               	return		;indir
 13931  002DB4                     u3769:
 13932  002DB4  0900               	iorlw	0
 13933  002DB6  A4D8               	btfss	status,2,c
 13934  002DB8  EFE0  F016         	goto	u3771
 13935  002DBC  EFE2  F016         	goto	u3770
 13936  002DC0                     u3771:
 13937  002DC0  EFCB  F016         	goto	l5531
 13938  002DC4                     u3770:
 13939  002DC4                     
 13940                           ;wifi.c: 22:         eusart.tx( *msg );
 13941  002DC4  EE20  F04F         	lfsr	2,_eusart+8
 13942  002DC8  D802               	call	u3788
 13943  002DCA  EF01  F017         	goto	u3789
 13944  002DCE                     u3788:
 13945  002DCE  0005               	push	
 13946  002DD0  6EFA               	movwf	pclath,c
 13947  002DD2  50DE               	movf	postinc2,w,c
 13948  002DD4  6EFD               	movwf	tosl,c
 13949  002DD6  50DE               	movf	postinc2,w,c
 13950  002DD8  6EFE               	movwf	tosh,c
 13951  002DDA  50F8               	movf	tblptru,w,c
 13952  002DDC  6EFF               	movwf	tosu,c
 13953  002DDE  50FA               	movf	pclath,w,c
 13954  002DE0  C028  FFF6         	movff	wifi_send@msg,tblptrl
 13955  002DE4  C029  FFF7         	movff	wifi_send@msg+1,tblptrh
 13956  002DE8  6AF8               	clrf	tblptru,c
 13957  002DEA  0E07               	movlw	(high __ramtop+-1)
 13958  002DEC  64F7               	cpfsgt	tblptrh,c
 13959  002DEE  D003               	bra	u3797
 13960  002DF0  0008               	tblrd		*
 13961  002DF2  50F5               	movf	tablat,w,c
 13962  002DF4  D005               	bra	u3790
 13963  002DF6                     u3797:
 13964  002DF6  CFF6 FFE1          	movff	tblptrl,fsr1l
 13965  002DFA  CFF7 FFE2          	movff	tblptrh,fsr1h
 13966  002DFE  50E7               	movf	indf1,w,c
 13967  002E00                     u3790:
 13968  002E00  0012               	return		;indir
 13969  002E02                     u3789:
 13970  002E02                     
 13971                           ;wifi.c: 23:         ++msg;
 13972  002E02  4A28               	infsnz	wifi_send@msg^0,f,c
 13973  002E04  2A29               	incf	(wifi_send@msg+1)^0,f,c
 13974  002E06                     l5537:
 13975                           
 13976                           ;wifi.c: 19:     while( *msg )
 13977  002E06  C028  FFF6         	movff	wifi_send@msg,tblptrl
 13978  002E0A  C029  FFF7         	movff	wifi_send@msg+1,tblptrh
 13979  002E0E  6AF8               	clrf	tblptru,c
 13980  002E10  0E07               	movlw	(high __ramtop+-1)
 13981  002E12  64F7               	cpfsgt	tblptrh,c
 13982  002E14  D003               	bra	u3807
 13983  002E16  0008               	tblrd		*
 13984  002E18  50F5               	movf	tablat,w,c
 13985  002E1A  D005               	bra	u3800
 13986  002E1C                     u3807:
 13987  002E1C  CFF6 FFE1          	movff	tblptrl,fsr1l
 13988  002E20  CFF7 FFE2          	movff	tblptrh,fsr1h
 13989  002E24  50E7               	movf	indf1,w,c
 13990  002E26                     u3800:
 13991  002E26  0900               	iorlw	0
 13992  002E28  A4D8               	btfss	status,2,c
 13993  002E2A  EF19  F017         	goto	u3811
 13994  002E2E  EF1B  F017         	goto	u3810
 13995  002E32                     u3811:
 13996  002E32  EFCB  F016         	goto	l5531
 13997  002E36                     u3810:
 13998  002E36  0012               	return		;funcret
 13999  002E38                     __end_of_wifi_send:
 14000                           	callstack 0
 14001                           
 14002 ;; *************** function _txStatusEUSART *****************
 14003 ;; Defined at:
 14004 ;;		line 126 in file "eusart.c"
 14005 ;; Parameters:    Size  Location     Type
 14006 ;;		None
 14007 ;; Auto vars:     Size  Location     Type
 14008 ;;		None
 14009 ;; Return value:  Size  Location     Type
 14010 ;;                  1    wreg      unsigned char 
 14011 ;; Registers used:
 14012 ;;		wreg
 14013 ;; Tracked objects:
 14014 ;;		On entry : 0/0
 14015 ;;		On exit  : 0/0
 14016 ;;		Unchanged: 0/0
 14017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14018 ;;      Params:         0       0       0       0       0       0       0       0       0
 14019 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14020 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14021 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14022 ;;Total ram usage:        0 bytes
 14023 ;; Hardware stack levels used:    1
 14024 ;; Hardware stack levels required when called:    2
 14025 ;; This function calls:
 14026 ;;		Nothing
 14027 ;; This function is called by:
 14028 ;;		_wifi_send
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           	psect	text73
 14033  003CE8                     __ptext73:
 14034                           	callstack 0
 14035  003CE8                     _txStatusEUSART:
 14036                           	callstack 26
 14037  003CE8                     
 14038                           ;eusart.c: 128:     return( !TXSTAbits.TRMT );
 14039  003CE8  A2AC               	btfss	172,1,c	;volatile
 14040  003CEA  EF79  F01E         	goto	u3211
 14041  003CEE  EF7C  F01E         	goto	u3210
 14042  003CF2                     u3211:
 14043  003CF2  0E01               	movlw	1
 14044  003CF4  EF7D  F01E         	goto	u3220
 14045  003CF8                     u3210:
 14046  003CF8  0E00               	movlw	0
 14047  003CFA                     u3220:
 14048  003CFA  0012               	return		;funcret
 14049  003CFC                     __end_of_txStatusEUSART:
 14050                           	callstack 0
 14051                           
 14052 ;; *************** function _txEUSART *****************
 14053 ;; Defined at:
 14054 ;;		line 115 in file "eusart.c"
 14055 ;; Parameters:    Size  Location     Type
 14056 ;;  d               1    wreg     unsigned char 
 14057 ;; Auto vars:     Size  Location     Type
 14058 ;;  d               1    0[COMRAM] unsigned char 
 14059 ;; Return value:  Size  Location     Type
 14060 ;;                  1    wreg      void 
 14061 ;; Registers used:
 14062 ;;		wreg
 14063 ;; Tracked objects:
 14064 ;;		On entry : 0/0
 14065 ;;		On exit  : 0/0
 14066 ;;		Unchanged: 0/0
 14067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14068 ;;      Params:         0       0       0       0       0       0       0       0       0
 14069 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14070 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14071 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14072 ;;Total ram usage:        1 bytes
 14073 ;; Hardware stack levels used:    1
 14074 ;; Hardware stack levels required when called:    2
 14075 ;; This function calls:
 14076 ;;		Nothing
 14077 ;; This function is called by:
 14078 ;;		_wifi_send
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           	psect	text74
 14083  003DD0                     __ptext74:
 14084                           	callstack 0
 14085  003DD0                     _txEUSART:
 14086                           	callstack 26
 14087                           
 14088                           ;incstack = 0
 14089                           ;txEUSART@d stored from wreg
 14090  003DD0  6E27               	movwf	txEUSART@d^0,c
 14091  003DD2                     
 14092                           ;eusart.c: 115: void txEUSART( unsigned char d );eusart.c: 116: {;eusart.c: 117:     TXR
      +                          EG = d;
 14093  003DD2  C027  FFAD         	movff	txEUSART@d,4013	;volatile
 14094  003DD6  0012               	return		;funcret
 14095  003DD8                     __end_of_txEUSART:
 14096                           	callstack 0
 14097                           
 14098 ;; *************** function _MCP4725 *****************
 14099 ;; Defined at:
 14100 ;;		line 35 in file "MCP4725.c"
 14101 ;; Parameters:    Size  Location     Type
 14102 ;;  Vout            2   26[COMRAM] unsigned int 
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;		None
 14105 ;; Return value:  Size  Location     Type
 14106 ;;                  1    wreg      void 
 14107 ;; Registers used:
 14108 ;;		wreg, status,2, status,0, cstack
 14109 ;; Tracked objects:
 14110 ;;		On entry : 0/0
 14111 ;;		On exit  : 0/0
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14114 ;;      Params:         2       0       0       0       0       0       0       0       0
 14115 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14116 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14117 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14118 ;;Total ram usage:        2 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    4
 14121 ;; This function calls:
 14122 ;;		_I2C_stop
 14123 ;;		_dac_init
 14124 ;;		_dac_write
 14125 ;;		_delay
 14126 ;; This function is called by:
 14127 ;;		_main
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           	psect	text75
 14132  003C0E                     __ptext75:
 14133                           	callstack 0
 14134  003C0E                     _MCP4725:
 14135                           	callstack 26
 14136  003C0E                     
 14137                           ;MCP4725.c: 35: void MCP4725 (unsigned int Vout);MCP4725.c: 36: {;MCP4725.c: 37:     dac
      +                          _init();
 14138  003C0E  EC53  F01C         	call	_dac_init
 14139                           
 14140                           ;MCP4725.c: 38:     dac_write(Vout);
 14141  003C12  C041  F02A         	movff	MCP4725@Vout,dac_write@code
 14142  003C16  C042  F02B         	movff	MCP4725@Vout+1,dac_write@code+1
 14143  003C1A  ECEC  F01B         	call	_dac_write	;wreg free
 14144  003C1E                     
 14145                           ;MCP4725.c: 39:     I2C_stop();
 14146  003C1E  EC88  F01E         	call	_I2C_stop	;wreg free
 14147  003C22                     
 14148                           ;MCP4725.c: 40:     delay(1);
 14149  003C22  0E00               	movlw	0
 14150  003C24  6E28               	movwf	(delay@t+1)^0,c
 14151  003C26  0E01               	movlw	1
 14152  003C28  6E27               	movwf	delay@t^0,c
 14153  003C2A  EC90  F01D         	call	_delay	;wreg free
 14154  003C2E  0012               	return		;funcret
 14155  003C30                     __end_of_MCP4725:
 14156                           	callstack 0
 14157                           
 14158 ;; *************** function _dac_write *****************
 14159 ;; Defined at:
 14160 ;;		line 25 in file "MCP4725.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;  code            2    3[COMRAM] unsigned int 
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;		None
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      void 
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, status,0, cstack
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14174 ;;      Params:         2       0       0       0       0       0       0       0       0
 14175 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14176 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14177 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14178 ;;Total ram usage:        5 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    3
 14181 ;; This function calls:
 14182 ;;		_I2C_ack_receive
 14183 ;;		_I2C_tx
 14184 ;;		_delay
 14185 ;; This function is called by:
 14186 ;;		_MCP4725
 14187 ;;		_MCP4725X
 14188 ;; This function uses a non-reentrant model
 14189 ;;
 14190                           
 14191                           	psect	text76
 14192  0037D8                     __ptext76:
 14193                           	callstack 0
 14194  0037D8                     _dac_write:
 14195                           	callstack 26
 14196  0037D8                     
 14197                           ;MCP4725.c: 25: void dac_write ( unsigned int code );MCP4725.c: 26: {;MCP4725.c: 27:    
      +                           I2C_tx( code >> 4 );
 14198  0037D8  C02A  F02C         	movff	dac_write@code,??_dac_write
 14199  0037DC  C02B  F02D         	movff	dac_write@code+1,??_dac_write+1
 14200  0037E0  0E04               	movlw	4
 14201  0037E2  6E2E               	movwf	(??_dac_write+2)^0,c
 14202  0037E4                     u3655:
 14203  0037E4  90D8               	bcf	status,0,c
 14204  0037E6  322D               	rrcf	(??_dac_write+1)^0,f,c
 14205  0037E8  322C               	rrcf	??_dac_write^0,f,c
 14206  0037EA  2E2E               	decfsz	(??_dac_write+2)^0,f,c
 14207  0037EC  EFF2  F01B         	goto	u3655
 14208  0037F0  502C               	movf	??_dac_write^0,w,c
 14209  0037F2  EC55  F01E         	call	_I2C_tx
 14210  0037F6                     
 14211                           ;MCP4725.c: 28:     I2C_ack_receive();
 14212  0037F6  ECB7  F01E         	call	_I2C_ack_receive	;wreg free
 14213  0037FA                     
 14214                           ;MCP4725.c: 29:     delay(1);
 14215  0037FA  0E00               	movlw	0
 14216  0037FC  6E28               	movwf	(delay@t+1)^0,c
 14217  0037FE  0E01               	movlw	1
 14218  003800  6E27               	movwf	delay@t^0,c
 14219  003802  EC90  F01D         	call	_delay	;wreg free
 14220  003806                     
 14221                           ;MCP4725.c: 30:     I2C_tx( code << 4);
 14222  003806  382A               	swapf	dac_write@code^0,w,c
 14223  003808  0BF0               	andlw	240
 14224  00380A  EC55  F01E         	call	_I2C_tx
 14225  00380E                     
 14226                           ;MCP4725.c: 31:     I2C_ack_receive();
 14227  00380E  ECB7  F01E         	call	_I2C_ack_receive	;wreg free
 14228                           
 14229                           ;MCP4725.c: 32:     delay(1);
 14230  003812  0E00               	movlw	0
 14231  003814  6E28               	movwf	(delay@t+1)^0,c
 14232  003816  0E01               	movlw	1
 14233  003818  6E27               	movwf	delay@t^0,c
 14234  00381A  EC90  F01D         	call	_delay	;wreg free
 14235  00381E  0012               	return		;funcret
 14236  003820                     __end_of_dac_write:
 14237                           	callstack 0
 14238                           
 14239 ;; *************** function _dac_init *****************
 14240 ;; Defined at:
 14241 ;;		line 13 in file "MCP4725.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  1    wreg      void 
 14248 ;; Registers used:
 14249 ;;		wreg, status,2, status,0, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0
 14256 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14257 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14258 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14259 ;;Total ram usage:        0 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    3
 14262 ;; This function calls:
 14263 ;;		_I2C_ack_receive
 14264 ;;		_I2C_start
 14265 ;;		_I2C_tx
 14266 ;;		_delay
 14267 ;; This function is called by:
 14268 ;;		_MCP4725
 14269 ;;		_MCP4725X
 14270 ;; This function uses a non-reentrant model
 14271 ;;
 14272                           
 14273                           	psect	text77
 14274  0038A6                     __ptext77:
 14275                           	callstack 0
 14276  0038A6                     _dac_init:
 14277                           	callstack 26
 14278  0038A6                     
 14279                           ;MCP4725.c: 15:     I2C_start();
 14280  0038A6  EC7E  F01E         	call	_I2C_start	;wreg free
 14281  0038AA                     
 14282                           ;MCP4725.c: 16:     delay(1);
 14283  0038AA  0E00               	movlw	0
 14284  0038AC  6E28               	movwf	(delay@t+1)^0,c
 14285  0038AE  0E01               	movlw	1
 14286  0038B0  6E27               	movwf	delay@t^0,c
 14287  0038B2  EC90  F01D         	call	_delay	;wreg free
 14288  0038B6                     
 14289                           ;MCP4725.c: 17:     I2C_tx( 0b11000000 );
 14290  0038B6  0EC0               	movlw	192
 14291  0038B8  EC55  F01E         	call	_I2C_tx
 14292  0038BC                     
 14293                           ;MCP4725.c: 18:     I2C_ack_receive();
 14294  0038BC  ECB7  F01E         	call	_I2C_ack_receive	;wreg free
 14295  0038C0                     
 14296                           ;MCP4725.c: 19:     delay(1);
 14297  0038C0  0E00               	movlw	0
 14298  0038C2  6E28               	movwf	(delay@t+1)^0,c
 14299  0038C4  0E01               	movlw	1
 14300  0038C6  6E27               	movwf	delay@t^0,c
 14301  0038C8  EC90  F01D         	call	_delay	;wreg free
 14302                           
 14303                           ;MCP4725.c: 20:     I2C_tx( 0b01100000 );
 14304  0038CC  0E60               	movlw	96
 14305  0038CE  EC55  F01E         	call	_I2C_tx
 14306  0038D2                     
 14307                           ;MCP4725.c: 21:     I2C_ack_receive();
 14308  0038D2  ECB7  F01E         	call	_I2C_ack_receive	;wreg free
 14309  0038D6                     
 14310                           ;MCP4725.c: 22:     delay(1);
 14311  0038D6  0E00               	movlw	0
 14312  0038D8  6E28               	movwf	(delay@t+1)^0,c
 14313  0038DA  0E01               	movlw	1
 14314  0038DC  6E27               	movwf	delay@t^0,c
 14315  0038DE  EC90  F01D         	call	_delay	;wreg free
 14316  0038E2  0012               	return		;funcret
 14317  0038E4                     __end_of_dac_init:
 14318                           	callstack 0
 14319                           
 14320 ;; *************** function _delay *****************
 14321 ;; Defined at:
 14322 ;;		line 10 in file "delay.c"
 14323 ;; Parameters:    Size  Location     Type
 14324 ;;  t               2    0[COMRAM] unsigned int 
 14325 ;; Auto vars:     Size  Location     Type
 14326 ;;		None
 14327 ;; Return value:  Size  Location     Type
 14328 ;;                  1    wreg      void 
 14329 ;; Registers used:
 14330 ;;		wreg, status,2, status,0
 14331 ;; Tracked objects:
 14332 ;;		On entry : 0/0
 14333 ;;		On exit  : 0/0
 14334 ;;		Unchanged: 0/0
 14335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14336 ;;      Params:         2       0       0       0       0       0       0       0       0
 14337 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14338 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14339 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14340 ;;Total ram usage:        3 bytes
 14341 ;; Hardware stack levels used:    1
 14342 ;; Hardware stack levels required when called:    2
 14343 ;; This function calls:
 14344 ;;		Nothing
 14345 ;; This function is called by:
 14346 ;;		_main
 14347 ;;		_dispLCD_init
 14348 ;;		_dac_init
 14349 ;;		_dac_write
 14350 ;;		_MCP4725
 14351 ;;		_MCP4725X
 14352 ;; This function uses a non-reentrant model
 14353 ;;
 14354                           
 14355                           	psect	text78
 14356  003B20                     __ptext78:
 14357                           	callstack 0
 14358  003B20                     _delay:
 14359                           	callstack 27
 14360  003B20                     
 14361                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
 14362  003B20  EF9D  F01D         	goto	l478
 14363  003B24                     l5083:
 14364                           
 14365                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
 14366  003B24  0E07               	movlw	7
 14367  003B26  6E29               	movwf	??_delay^0,c
 14368  003B28  0E7D               	movlw	125
 14369  003B2A                     u5897:
 14370  003B2A  2EE8               	decfsz	wreg,f,c
 14371  003B2C  D7FE               	bra	u5897
 14372  003B2E  2E29               	decfsz	??_delay^0,f,c
 14373  003B30  D7FC               	bra	u5897
 14374  003B32  F000               	nop	
 14375  003B34                     
 14376                           ;delay.c: 15:         --t;
 14377  003B34  0627               	decf	delay@t^0,f,c
 14378  003B36  A0D8               	btfss	status,0,c
 14379  003B38  0628               	decf	(delay@t+1)^0,f,c
 14380  003B3A                     l478:
 14381                           
 14382                           ;delay.c: 12:     while( t )
 14383  003B3A  5027               	movf	delay@t^0,w,c
 14384  003B3C  1028               	iorwf	(delay@t+1)^0,w,c
 14385  003B3E  A4D8               	btfss	status,2,c
 14386  003B40  EFA4  F01D         	goto	u3161
 14387  003B44  EFA6  F01D         	goto	u3160
 14388  003B48                     u3161:
 14389  003B48  EF92  F01D         	goto	l5083
 14390  003B4C                     u3160:
 14391  003B4C  0012               	return		;funcret
 14392  003B4E                     __end_of_delay:
 14393                           	callstack 0
 14394                           
 14395 ;; *************** function _I2C_tx *****************
 14396 ;; Defined at:
 14397 ;;		line 36 in file "spi_i2c.c"
 14398 ;; Parameters:    Size  Location     Type
 14399 ;;  b               1    wreg     unsigned char 
 14400 ;; Auto vars:     Size  Location     Type
 14401 ;;  b               1    0[COMRAM] unsigned char 
 14402 ;; Return value:  Size  Location     Type
 14403 ;;                  1    wreg      void 
 14404 ;; Registers used:
 14405 ;;		wreg
 14406 ;; Tracked objects:
 14407 ;;		On entry : 0/0
 14408 ;;		On exit  : 0/0
 14409 ;;		Unchanged: 0/0
 14410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14411 ;;      Params:         0       0       0       0       0       0       0       0       0
 14412 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14413 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14414 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14415 ;;Total ram usage:        1 bytes
 14416 ;; Hardware stack levels used:    1
 14417 ;; Hardware stack levels required when called:    2
 14418 ;; This function calls:
 14419 ;;		Nothing
 14420 ;; This function is called by:
 14421 ;;		_dac_init
 14422 ;;		_dac_write
 14423 ;; This function uses a non-reentrant model
 14424 ;;
 14425                           
 14426                           	psect	text79
 14427  003CAA                     __ptext79:
 14428                           	callstack 0
 14429  003CAA                     _I2C_tx:
 14430                           	callstack 26
 14431                           
 14432                           ;incstack = 0
 14433                           ;I2C_tx@b stored from wreg
 14434  003CAA  6E27               	movwf	I2C_tx@b^0,c
 14435  003CAC                     
 14436                           ;spi_i2c.c: 36: void I2C_tx( unsigned char b );spi_i2c.c: 37: {;spi_i2c.c: 38:     SSPBU
      +                          F = b;
 14437  003CAC  C027  FFC9         	movff	I2C_tx@b,4041	;volatile
 14438  003CB0                     l975:
 14439  003CB0  B0C7               	btfsc	199,0,c	;volatile
 14440  003CB2  EF5D  F01E         	goto	u3191
 14441  003CB6  EF5F  F01E         	goto	u3190
 14442  003CBA                     u3191:
 14443  003CBA  EF58  F01E         	goto	l975
 14444  003CBE                     u3190:
 14445  003CBE  0012               	return		;funcret
 14446  003CC0                     __end_of_I2C_tx:
 14447                           	callstack 0
 14448                           
 14449 ;; *************** function _I2C_start *****************
 14450 ;; Defined at:
 14451 ;;		line 22 in file "spi_i2c.c"
 14452 ;; Parameters:    Size  Location     Type
 14453 ;;		None
 14454 ;; Auto vars:     Size  Location     Type
 14455 ;;		None
 14456 ;; Return value:  Size  Location     Type
 14457 ;;                  1    wreg      void 
 14458 ;; Registers used:
 14459 ;;		None
 14460 ;; Tracked objects:
 14461 ;;		On entry : 0/0
 14462 ;;		On exit  : 0/0
 14463 ;;		Unchanged: 0/0
 14464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14465 ;;      Params:         0       0       0       0       0       0       0       0       0
 14466 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14468 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14469 ;;Total ram usage:        0 bytes
 14470 ;; Hardware stack levels used:    1
 14471 ;; Hardware stack levels required when called:    2
 14472 ;; This function calls:
 14473 ;;		Nothing
 14474 ;; This function is called by:
 14475 ;;		_dac_init
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           	psect	text80
 14480  003CFC                     __ptext80:
 14481                           	callstack 0
 14482  003CFC                     _I2C_start:
 14483                           	callstack 26
 14484  003CFC                     
 14485                           ;spi_i2c.c: 24:     SSPCON2bits.SEN = 1;
 14486  003CFC  80C5               	bsf	197,0,c	;volatile
 14487  003CFE                     l960:
 14488  003CFE  A69E               	btfss	158,3,c	;volatile
 14489  003D00  EF84  F01E         	goto	u3181
 14490  003D04  EF86  F01E         	goto	u3180
 14491  003D08                     u3181:
 14492  003D08  EF7F  F01E         	goto	l960
 14493  003D0C                     u3180:
 14494  003D0C                     
 14495                           ;spi_i2c.c: 26:     PIR1bits.SSPIF = 0;
 14496  003D0C  969E               	bcf	158,3,c	;volatile
 14497  003D0E  0012               	return		;funcret
 14498  003D10                     __end_of_I2C_start:
 14499                           	callstack 0
 14500                           
 14501 ;; *************** function _I2C_ack_receive *****************
 14502 ;; Defined at:
 14503 ;;		line 56 in file "spi_i2c.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;		None
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;		None
 14508 ;; Return value:  Size  Location     Type
 14509 ;;                  1    wreg      void 
 14510 ;; Registers used:
 14511 ;;		None
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14517 ;;      Params:         0       0       0       0       0       0       0       0       0
 14518 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14520 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14521 ;;Total ram usage:        0 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    2
 14524 ;; This function calls:
 14525 ;;		Nothing
 14526 ;; This function is called by:
 14527 ;;		_dac_init
 14528 ;;		_dac_write
 14529 ;; This function uses a non-reentrant model
 14530 ;;
 14531                           
 14532                           	psect	text81
 14533  003D6E                     __ptext81:
 14534                           	callstack 0
 14535  003D6E                     _I2C_ack_receive:
 14536                           	callstack 26
 14537  003D6E                     l996:
 14538  003D6E  BCC5               	btfsc	197,6,c	;volatile
 14539  003D70  EFBC  F01E         	goto	u3201
 14540  003D74  EFBE  F01E         	goto	u3200
 14541  003D78                     u3201:
 14542  003D78  EFB7  F01E         	goto	l996
 14543  003D7C                     u3200:
 14544  003D7C  0012               	return		;funcret
 14545  003D7E                     __end_of_I2C_ack_receive:
 14546                           	callstack 0
 14547                           
 14548 ;; *************** function _I2C_stop *****************
 14549 ;; Defined at:
 14550 ;;		line 41 in file "spi_i2c.c"
 14551 ;; Parameters:    Size  Location     Type
 14552 ;;		None
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;		None
 14555 ;; Return value:  Size  Location     Type
 14556 ;;                  1    wreg      void 
 14557 ;; Registers used:
 14558 ;;		None
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14564 ;;      Params:         0       0       0       0       0       0       0       0       0
 14565 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14566 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14567 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14568 ;;Total ram usage:        0 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    2
 14571 ;; This function calls:
 14572 ;;		Nothing
 14573 ;; This function is called by:
 14574 ;;		_MCP4725
 14575 ;;		_MCP4725X
 14576 ;; This function uses a non-reentrant model
 14577 ;;
 14578                           
 14579                           	psect	text82
 14580  003D10                     __ptext82:
 14581                           	callstack 0
 14582  003D10                     _I2C_stop:
 14583                           	callstack 27
 14584  003D10                     
 14585                           ;spi_i2c.c: 43:     SSPCON2bits.PEN = 1;
 14586  003D10  84C5               	bsf	197,2,c	;volatile
 14587  003D12                     l981:
 14588  003D12  A69E               	btfss	158,3,c	;volatile
 14589  003D14  EF8E  F01E         	goto	u3661
 14590  003D18  EF90  F01E         	goto	u3660
 14591  003D1C                     u3661:
 14592  003D1C  EF89  F01E         	goto	l981
 14593  003D20                     u3660:
 14594  003D20                     
 14595                           ;spi_i2c.c: 45:     PIR1bits.SSPIF = 0;
 14596  003D20  969E               	bcf	158,3,c	;volatile
 14597  003D22  0012               	return		;funcret
 14598  003D24                     __end_of_I2C_stop:
 14599                           	callstack 0
 14600                           
 14601 ;; *************** function _I2C_init *****************
 14602 ;; Defined at:
 14603 ;;		line 12 in file "spi_i2c.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;  freq            4   13[COMRAM] unsigned long 
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;		None
 14608 ;; Return value:  Size  Location     Type
 14609 ;;                  1    wreg      void 
 14610 ;; Registers used:
 14611 ;;		wreg, status,2, status,0, cstack
 14612 ;; Tracked objects:
 14613 ;;		On entry : 0/0
 14614 ;;		On exit  : 0/0
 14615 ;;		Unchanged: 0/0
 14616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14617 ;;      Params:         4       0       0       0       0       0       0       0       0
 14618 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14619 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14620 ;;      Totals:         4       0       0       0       0       0       0       0       0
 14621 ;;Total ram usage:        4 bytes
 14622 ;; Hardware stack levels used:    1
 14623 ;; Hardware stack levels required when called:    3
 14624 ;; This function calls:
 14625 ;;		___lldiv
 14626 ;; This function is called by:
 14627 ;;		_main
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           	psect	text83
 14632  003920                     __ptext83:
 14633                           	callstack 0
 14634  003920                     _I2C_init:
 14635                           	callstack 27
 14636  003920                     
 14637                           ;spi_i2c.c: 12: void I2C_init( unsigned long freq );spi_i2c.c: 13: {;spi_i2c.c: 14:     
      +                          TRISBbits.TRISB0 = 1;
 14638  003920  8093               	bsf	147,0,c	;volatile
 14639                           
 14640                           ;spi_i2c.c: 15:     TRISBbits.TRISB1 = 1;
 14641  003922  8293               	bsf	147,1,c	;volatile
 14642  003924                     
 14643                           ;spi_i2c.c: 16:     SSPCON1bits.SSPM = 0x8;
 14644  003924  50C6               	movf	198,w,c	;volatile
 14645  003926  0BF0               	andlw	-16
 14646  003928  0908               	iorlw	8
 14647  00392A  6EC6               	movwf	198,c	;volatile
 14648  00392C                     
 14649                           ;spi_i2c.c: 17:     SSPADD = ((20000000>>2) / (freq))-1;
 14650  00392C  0E40               	movlw	64
 14651  00392E  6E27               	movwf	___lldiv@dividend^0,c
 14652  003930  0E4B               	movlw	75
 14653  003932  6E28               	movwf	(___lldiv@dividend+1)^0,c
 14654  003934  0E4C               	movlw	76
 14655  003936  6E29               	movwf	(___lldiv@dividend+2)^0,c
 14656  003938  0E00               	movlw	0
 14657  00393A  6E2A               	movwf	(___lldiv@dividend+3)^0,c
 14658  00393C  C034  F02B         	movff	I2C_init@freq,___lldiv@divisor
 14659  003940  C035  F02C         	movff	I2C_init@freq+1,___lldiv@divisor+1
 14660  003944  C036  F02D         	movff	I2C_init@freq+2,___lldiv@divisor+2
 14661  003948  C037  F02E         	movff	I2C_init@freq+3,___lldiv@divisor+3
 14662  00394C  EC1C  F017         	call	___lldiv	;wreg free
 14663  003950  0427               	decf	?___lldiv^0,w,c
 14664  003952  6EC8               	movwf	200,c	;volatile
 14665  003954                     
 14666                           ;spi_i2c.c: 18:     SSPSTATbits.SMP = 1;
 14667  003954  8EC7               	bsf	199,7,c	;volatile
 14668  003956                     
 14669                           ;spi_i2c.c: 19:     SSPCON1bits.SSPEN = 1;
 14670  003956  8AC6               	bsf	198,5,c	;volatile
 14671  003958  0012               	return		;funcret
 14672  00395A                     __end_of_I2C_init:
 14673                           	callstack 0
 14674                           
 14675 ;; *************** function ___lldiv *****************
 14676 ;; Defined at:
 14677 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\__lldiv.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;  dividend        4    0[COMRAM] unsigned long 
 14680 ;;  divisor         4    4[COMRAM] unsigned long 
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  quotient        4    8[COMRAM] unsigned long 
 14683 ;;  counter         1   12[COMRAM] unsigned char 
 14684 ;; Return value:  Size  Location     Type
 14685 ;;                  4    0[COMRAM] unsigned long 
 14686 ;; Registers used:
 14687 ;;		wreg, status,2, status,0
 14688 ;; Tracked objects:
 14689 ;;		On entry : 0/0
 14690 ;;		On exit  : 0/0
 14691 ;;		Unchanged: 0/0
 14692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14693 ;;      Params:         8       0       0       0       0       0       0       0       0
 14694 ;;      Locals:         5       0       0       0       0       0       0       0       0
 14695 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14696 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14697 ;;Total ram usage:       13 bytes
 14698 ;; Hardware stack levels used:    1
 14699 ;; Hardware stack levels required when called:    2
 14700 ;; This function calls:
 14701 ;;		Nothing
 14702 ;; This function is called by:
 14703 ;;		_I2C_init
 14704 ;;		_initEUSART
 14705 ;; This function uses a non-reentrant model
 14706 ;;
 14707                           
 14708                           	psect	text84
 14709  002E38                     __ptext84:
 14710                           	callstack 0
 14711  002E38                     ___lldiv:
 14712                           	callstack 26
 14713  002E38  0E00               	movlw	0
 14714  002E3A  6E2F               	movwf	___lldiv@quotient^0,c
 14715  002E3C  0E00               	movlw	0
 14716  002E3E  6E30               	movwf	(___lldiv@quotient+1)^0,c
 14717  002E40  0E00               	movlw	0
 14718  002E42  6E31               	movwf	(___lldiv@quotient+2)^0,c
 14719  002E44  0E00               	movlw	0
 14720  002E46  6E32               	movwf	(___lldiv@quotient+3)^0,c
 14721  002E48  502B               	movf	___lldiv@divisor^0,w,c
 14722  002E4A  102C               	iorwf	(___lldiv@divisor+1)^0,w,c
 14723  002E4C  102D               	iorwf	(___lldiv@divisor+2)^0,w,c
 14724  002E4E  102E               	iorwf	(___lldiv@divisor+3)^0,w,c
 14725  002E50  B4D8               	btfsc	status,2,c
 14726  002E52  EF2D  F017         	goto	u3231
 14727  002E56  EF2F  F017         	goto	u3230
 14728  002E5A                     u3231:
 14729  002E5A  EF65  F017         	goto	l1271
 14730  002E5E                     u3230:
 14731  002E5E  0E01               	movlw	1
 14732  002E60  6E33               	movwf	___lldiv@counter^0,c
 14733  002E62  EF39  F017         	goto	l5163
 14734  002E66                     l5161:
 14735  002E66  90D8               	bcf	status,0,c
 14736  002E68  362B               	rlcf	___lldiv@divisor^0,f,c
 14737  002E6A  362C               	rlcf	(___lldiv@divisor+1)^0,f,c
 14738  002E6C  362D               	rlcf	(___lldiv@divisor+2)^0,f,c
 14739  002E6E  362E               	rlcf	(___lldiv@divisor+3)^0,f,c
 14740  002E70  2A33               	incf	___lldiv@counter^0,f,c
 14741  002E72                     l5163:
 14742  002E72  AE2E               	btfss	(___lldiv@divisor+3)^0,7,c
 14743  002E74  EF3E  F017         	goto	u3241
 14744  002E78  EF40  F017         	goto	u3240
 14745  002E7C                     u3241:
 14746  002E7C  EF33  F017         	goto	l5161
 14747  002E80                     u3240:
 14748  002E80                     l5165:
 14749  002E80  90D8               	bcf	status,0,c
 14750  002E82  362F               	rlcf	___lldiv@quotient^0,f,c
 14751  002E84  3630               	rlcf	(___lldiv@quotient+1)^0,f,c
 14752  002E86  3631               	rlcf	(___lldiv@quotient+2)^0,f,c
 14753  002E88  3632               	rlcf	(___lldiv@quotient+3)^0,f,c
 14754  002E8A  502B               	movf	___lldiv@divisor^0,w,c
 14755  002E8C  5C27               	subwf	___lldiv@dividend^0,w,c
 14756  002E8E  502C               	movf	(___lldiv@divisor+1)^0,w,c
 14757  002E90  5828               	subwfb	(___lldiv@dividend+1)^0,w,c
 14758  002E92  502D               	movf	(___lldiv@divisor+2)^0,w,c
 14759  002E94  5829               	subwfb	(___lldiv@dividend+2)^0,w,c
 14760  002E96  502E               	movf	(___lldiv@divisor+3)^0,w,c
 14761  002E98  582A               	subwfb	(___lldiv@dividend+3)^0,w,c
 14762  002E9A  A0D8               	btfss	status,0,c
 14763  002E9C  EF52  F017         	goto	u3251
 14764  002EA0  EF54  F017         	goto	u3250
 14765  002EA4                     u3251:
 14766  002EA4  EF5D  F017         	goto	l5173
 14767  002EA8                     u3250:
 14768  002EA8  502B               	movf	___lldiv@divisor^0,w,c
 14769  002EAA  5E27               	subwf	___lldiv@dividend^0,f,c
 14770  002EAC  502C               	movf	(___lldiv@divisor+1)^0,w,c
 14771  002EAE  5A28               	subwfb	(___lldiv@dividend+1)^0,f,c
 14772  002EB0  502D               	movf	(___lldiv@divisor+2)^0,w,c
 14773  002EB2  5A29               	subwfb	(___lldiv@dividend+2)^0,f,c
 14774  002EB4  502E               	movf	(___lldiv@divisor+3)^0,w,c
 14775  002EB6  5A2A               	subwfb	(___lldiv@dividend+3)^0,f,c
 14776  002EB8  802F               	bsf	___lldiv@quotient^0,0,c
 14777  002EBA                     l5173:
 14778  002EBA  90D8               	bcf	status,0,c
 14779  002EBC  322E               	rrcf	(___lldiv@divisor+3)^0,f,c
 14780  002EBE  322D               	rrcf	(___lldiv@divisor+2)^0,f,c
 14781  002EC0  322C               	rrcf	(___lldiv@divisor+1)^0,f,c
 14782  002EC2  322B               	rrcf	___lldiv@divisor^0,f,c
 14783  002EC4  2E33               	decfsz	___lldiv@counter^0,f,c
 14784  002EC6  EF40  F017         	goto	l5165
 14785  002ECA                     l1271:
 14786  002ECA  C02F  F027         	movff	___lldiv@quotient,?___lldiv
 14787  002ECE  C030  F028         	movff	___lldiv@quotient+1,?___lldiv+1
 14788  002ED2  C031  F029         	movff	___lldiv@quotient+2,?___lldiv+2
 14789  002ED6  C032  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
 14790  002EDA  0012               	return		;funcret
 14791  002EDC                     __end_of___lldiv:
 14792                           	callstack 0
 14793                           
 14794 ;; *************** function _irq *****************
 14795 ;; Defined at:
 14796 ;;		line 58 in file "main.c"
 14797 ;; Parameters:    Size  Location     Type
 14798 ;;		None
 14799 ;; Auto vars:     Size  Location     Type
 14800 ;;		None
 14801 ;; Return value:  Size  Location     Type
 14802 ;;                  1    wreg      void 
 14803 ;; Registers used:
 14804 ;;		wreg, status,2, status,0, cstack
 14805 ;; Tracked objects:
 14806 ;;		On entry : 0/0
 14807 ;;		On exit  : 0/0
 14808 ;;		Unchanged: 0/0
 14809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14810 ;;      Params:         0       0       0       0       0       0       0       0       0
 14811 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14812 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14813 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14814 ;;Total ram usage:        0 bytes
 14815 ;; Hardware stack levels used:    1
 14816 ;; Hardware stack levels required when called:    1
 14817 ;; This function calls:
 14818 ;;		_intt1_1ms
 14819 ;; This function is called by:
 14820 ;;		Interrupt level 2
 14821 ;; This function uses a non-reentrant model
 14822 ;;
 14823                           
 14824                           	psect	intcode
 14825  000008                     __pintcode:
 14826                           	callstack 0
 14827  000008                     _irq:
 14828                           	callstack 25
 14829                           
 14830                           ;incstack = 0
 14831  000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 14832  00000A  EDA7  F01D         	call	int_func,f	;refresh shadow registers
 14833                           
 14834                           	psect	intcode_body
 14835  003B4E                     __pintcode_body:
 14836                           	callstack 25
 14837  003B4E                     int_func:
 14838                           	callstack 25
 14839  003B4E  0006               	pop		; remove dummy address from shadow register refresh
 14840  003B50                     
 14841                           ;main.c: 60:     INTCONbits.GIE = 0;
 14842  003B50  9EF2               	bcf	242,7,c	;volatile
 14843                           
 14844                           ;main.c: 61:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 14845  003B52  A09E               	btfss	158,0,c	;volatile
 14846  003B54  EFAE  F01D         	goto	i2u149_41
 14847  003B58  EFB0  F01D         	goto	i2u149_40
 14848  003B5C                     i2u149_41:
 14849  003B5C  EFBA  F01D         	goto	i2l3199
 14850  003B60                     i2u149_40:
 14851  003B60  A09D               	btfss	157,0,c	;volatile
 14852  003B62  EFB5  F01D         	goto	i2u150_41
 14853  003B66  EFB7  F01D         	goto	i2u150_40
 14854  003B6A                     i2u150_41:
 14855  003B6A  EFBA  F01D         	goto	i2l3199
 14856  003B6E                     i2u150_40:
 14857  003B6E                     
 14858                           ;main.c: 62:     {;main.c: 63:         PIR1bits.TMR1IF = 0;
 14859  003B6E  909E               	bcf	158,0,c	;volatile
 14860  003B70                     
 14861                           ;main.c: 65:         intt1_1ms();
 14862  003B70  EC33  F01D         	call	_intt1_1ms	;wreg free
 14863  003B74                     i2l3199:
 14864                           
 14865                           ;main.c: 67:     INTCONbits.GIE = 1;
 14866  003B74  8EF2               	bsf	242,7,c	;volatile
 14867  003B76  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 14868  003B78  0011               	retfie		f
 14869  003B7A                     __end_of_irq:
 14870                           	callstack 0
 14871                           
 14872 ;; *************** function _intt1_1ms *****************
 14873 ;; Defined at:
 14874 ;;		line 5 in file "timer1.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;		None
 14877 ;; Auto vars:     Size  Location     Type
 14878 ;;		None
 14879 ;; Return value:  Size  Location     Type
 14880 ;;                  1    wreg      void 
 14881 ;; Registers used:
 14882 ;;		wreg, status,2, status,0
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14888 ;;      Params:         0       0       0       0       0       0       0       0       0
 14889 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14890 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14891 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14892 ;;Total ram usage:        0 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; This function calls:
 14895 ;;		Nothing
 14896 ;; This function is called by:
 14897 ;;		_irq
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           	psect	text86
 14902  003A66                     __ptext86:
 14903                           	callstack 0
 14904  003A66                     _intt1_1ms:
 14905                           	callstack 25
 14906  003A66                     
 14907                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 14908  003A66  0EFD               	movlw	253
 14909  003A68  6ECF               	movwf	207,c	;volatile
 14910                           
 14911                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 14912  003A6A  0E8F               	movlw	143
 14913  003A6C  6ECE               	movwf	206,c	;volatile
 14914  003A6E                     
 14915                           ;timer1.c: 10:     if(t1cont)
 14916  003A6E  5001               	movf	_t1cont^0,w,c
 14917  003A70  1002               	iorwf	(_t1cont+1)^0,w,c
 14918  003A72  1003               	iorwf	(_t1cont+2)^0,w,c
 14919  003A74  1004               	iorwf	(_t1cont+3)^0,w,c
 14920  003A76  B4D8               	btfsc	status,2,c
 14921  003A78  EF40  F01D         	goto	i2u81_41
 14922  003A7C  EF42  F01D         	goto	i2u81_40
 14923  003A80                     i2u81_41:
 14924  003A80  EF49  F01D         	goto	i2l1061
 14925  003A84                     i2u81_40:
 14926  003A84                     
 14927                           ;timer1.c: 11:         --t1cont;
 14928  003A84  0601               	decf	_t1cont^0,f,c
 14929  003A86  0E00               	movlw	0
 14930  003A88  5A02               	subwfb	(_t1cont+1)^0,f,c
 14931  003A8A  5A03               	subwfb	(_t1cont+2)^0,f,c
 14932  003A8C  5A04               	subwfb	(_t1cont+3)^0,f,c
 14933  003A8E  EF4A  F01D         	goto	i2l1063
 14934  003A92                     i2l1061:
 14935                           
 14936                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 14937  003A92  90CD               	bcf	205,0,c	;volatile
 14938  003A94                     i2l1063:
 14939  003A94  0012               	return		;funcret
 14940  003A96                     __end_of_intt1_1ms:
 14941                           	callstack 0
 14942                           
 14943                           	psect	text87
 14944  000000                     __ptext87:
 14945                           	callstack 0
 14946  000000                     
 14947                           	psect	rparam
 14948  0000                     
 14949                           	psect	temp
 14950  00005A                     btemp:
 14951                           	callstack 0
 14952  00005A                     	ds	1
 14953  0000                     int$flags	set	btemp
 14954  0000                     wtemp8	set	btemp+1
 14955  0000                     ttemp5	set	btemp+1
 14956  0000                     ttemp6	set	btemp+4
 14957  0000                     ttemp7	set	btemp+8
 14958                           
 14959                           	psect	idloc
 14960                           
 14961                           ;Config register IDLOC0 @ 0x200000
 14962                           ;	unspecified, using default values
 14963  200000                     	org	2097152
 14964  200000  FF                 	db	255
 14965                           
 14966                           ;Config register IDLOC1 @ 0x200001
 14967                           ;	unspecified, using default values
 14968  200001                     	org	2097153
 14969  200001  FF                 	db	255
 14970                           
 14971                           ;Config register IDLOC2 @ 0x200002
 14972                           ;	unspecified, using default values
 14973  200002                     	org	2097154
 14974  200002  FF                 	db	255
 14975                           
 14976                           ;Config register IDLOC3 @ 0x200003
 14977                           ;	unspecified, using default values
 14978  200003                     	org	2097155
 14979  200003  FF                 	db	255
 14980                           
 14981                           ;Config register IDLOC4 @ 0x200004
 14982                           ;	unspecified, using default values
 14983  200004                     	org	2097156
 14984  200004  FF                 	db	255
 14985                           
 14986                           ;Config register IDLOC5 @ 0x200005
 14987                           ;	unspecified, using default values
 14988  200005                     	org	2097157
 14989  200005  FF                 	db	255
 14990                           
 14991                           ;Config register IDLOC6 @ 0x200006
 14992                           ;	unspecified, using default values
 14993  200006                     	org	2097158
 14994  200006  FF                 	db	255
 14995                           
 14996                           ;Config register IDLOC7 @ 0x200007
 14997                           ;	unspecified, using default values
 14998  200007                     	org	2097159
 14999  200007  FF                 	db	255
 15000                           
 15001                           	psect	config
 15002                           
 15003                           ;Config register CONFIG1L @ 0x300000
 15004                           ;	PLL Prescaler Selection bits
 15005                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
 15006                           ;	System Clock Postscaler Selection bits
 15007                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 15008                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 15009                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 15010  300000                     	org	3145728
 15011  300000  04                 	db	4
 15012                           
 15013                           ;Config register CONFIG1H @ 0x300001
 15014                           ;	Oscillator Selection bits
 15015                           ;	FOSC = HS, HS oscillator (HS)
 15016                           ;	Fail-Safe Clock Monitor Enable bit
 15017                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 15018                           ;	Internal/External Oscillator Switchover bit
 15019                           ;	IESO = OFF, Oscillator Switchover mode disabled
 15020  300001                     	org	3145729
 15021  300001  0C                 	db	12
 15022                           
 15023                           ;Config register CONFIG2L @ 0x300002
 15024                           ;	Power-up Timer Enable bit
 15025                           ;	PWRT = ON, PWRT enabled
 15026                           ;	Brown-out Reset Enable bits
 15027                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 15028                           ;	Brown-out Reset Voltage bits
 15029                           ;	BORV = 3, Minimum setting 2.05V
 15030                           ;	USB Voltage Regulator Enable bit
 15031                           ;	VREGEN = OFF, USB voltage regulator disabled
 15032  300002                     	org	3145730
 15033  300002  18                 	db	24
 15034                           
 15035                           ;Config register CONFIG2H @ 0x300003
 15036                           ;	Watchdog Timer Enable bit
 15037                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 15038                           ;	Watchdog Timer Postscale Select bits
 15039                           ;	WDTPS = 32768, 1:32768
 15040  300003                     	org	3145731
 15041  300003  1E                 	db	30
 15042                           
 15043                           ; Padding undefined space
 15044  300004                     	org	3145732
 15045  300004  FF                 	db	255
 15046                           
 15047                           ;Config register CONFIG3H @ 0x300005
 15048                           ;	CCP2 MUX bit
 15049                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 15050                           ;	PORTB A/D Enable bit
 15051                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 15052                           ;	Low-Power Timer 1 Oscillator Enable bit
 15053                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 15054                           ;	MCLR Pin Enable bit
 15055                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
 15056  300005                     	org	3145733
 15057  300005  01                 	db	1
 15058                           
 15059                           ;Config register CONFIG4L @ 0x300006
 15060                           ;	Stack Full/Underflow Reset Enable bit
 15061                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
 15062                           ;	Single-Supply ICSP Enable bit
 15063                           ;	LVP = OFF, Single-Supply ICSP disabled
 15064                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 15065                           ;	ICPRT = OFF, ICPORT disabled
 15066                           ;	Extended Instruction Set Enable bit
 15067                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 15068                           ;	Background Debugger Enable bit
 15069                           ;	DEBUG = 0x1, unprogrammed default
 15070  300006                     	org	3145734
 15071  300006  80                 	db	128
 15072                           
 15073                           ; Padding undefined space
 15074  300007                     	org	3145735
 15075  300007  FF                 	db	255
 15076                           
 15077                           ;Config register CONFIG5L @ 0x300008
 15078                           ;	Code Protection bit
 15079                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 15080                           ;	Code Protection bit
 15081                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 15082                           ;	Code Protection bit
 15083                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 15084                           ;	Code Protection bit
 15085                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 15086  300008                     	org	3145736
 15087  300008  0F                 	db	15
 15088                           
 15089                           ;Config register CONFIG5H @ 0x300009
 15090                           ;	Boot Block Code Protection bit
 15091                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 15092                           ;	Data EEPROM Code Protection bit
 15093                           ;	CPD = OFF, Data EEPROM is not code-protected
 15094  300009                     	org	3145737
 15095  300009  C0                 	db	192
 15096                           
 15097                           ;Config register CONFIG6L @ 0x30000A
 15098                           ;	Write Protection bit
 15099                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 15100                           ;	Write Protection bit
 15101                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 15102                           ;	Write Protection bit
 15103                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 15104                           ;	Write Protection bit
 15105                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 15106  30000A                     	org	3145738
 15107  30000A  0F                 	db	15
 15108                           
 15109                           ;Config register CONFIG6H @ 0x30000B
 15110                           ;	Configuration Register Write Protection bit
 15111                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 15112                           ;	Boot Block Write Protection bit
 15113                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 15114                           ;	Data EEPROM Write Protection bit
 15115                           ;	WRTD = OFF, Data EEPROM is not write-protected
 15116  30000B                     	org	3145739
 15117  30000B  E0                 	db	224
 15118                           
 15119                           ;Config register CONFIG7L @ 0x30000C
 15120                           ;	Table Read Protection bit
 15121                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15122                           ;	Table Read Protection bit
 15123                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15124                           ;	Table Read Protection bit
 15125                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15126                           ;	Table Read Protection bit
 15127                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 15128  30000C                     	org	3145740
 15129  30000C  0F                 	db	15
 15130                           
 15131                           ;Config register CONFIG7H @ 0x30000D
 15132                           ;	Boot Block Table Read Protection bit
 15133                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 15134  30000D                     	org	3145741
 15135  30000D  40                 	db	64
 15136                           tosu	equ	0xFFF
 15137                           tosh	equ	0xFFE
 15138                           tosl	equ	0xFFD
 15139                           stkptr	equ	0xFFC
 15140                           pclatu	equ	0xFFB
 15141                           pclath	equ	0xFFA
 15142                           pcl	equ	0xFF9
 15143                           tblptru	equ	0xFF8
 15144                           tblptrh	equ	0xFF7
 15145                           tblptrl	equ	0xFF6
 15146                           tablat	equ	0xFF5
 15147                           prodh	equ	0xFF4
 15148                           prodl	equ	0xFF3
 15149                           indf0	equ	0xFEF
 15150                           postinc0	equ	0xFEE
 15151                           postdec0	equ	0xFED
 15152                           preinc0	equ	0xFEC
 15153                           plusw0	equ	0xFEB
 15154                           fsr0h	equ	0xFEA
 15155                           fsr0l	equ	0xFE9
 15156                           wreg	equ	0xFE8
 15157                           indf1	equ	0xFE7
 15158                           postinc1	equ	0xFE6
 15159                           postdec1	equ	0xFE5
 15160                           preinc1	equ	0xFE4
 15161                           plusw1	equ	0xFE3
 15162                           fsr1h	equ	0xFE2
 15163                           fsr1l	equ	0xFE1
 15164                           bsr	equ	0xFE0
 15165                           indf2	equ	0xFDF
 15166                           postinc2	equ	0xFDE
 15167                           postdec2	equ	0xFDD
 15168                           preinc2	equ	0xFDC
 15169                           plusw2	equ	0xFDB
 15170                           fsr2h	equ	0xFDA
 15171                           fsr2l	equ	0xFD9
 15172                           status	equ	0xFD8

Data Sizes:
    Strings     975
    Constant    0
    Data        165
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      89
    BANK0           160     93     151
    BANK1           256      0     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    S85$3$0	PTR unsigned char  size(2) Largest target is 0

    S145$1$0	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_46(CODE[14]), STR_45(CODE[40]), Wifi_cipsend@vtr(COMRAM[30]), Wifi_cipsend@str(COMRAM[30]), 
		 -> STR_44(CODE[21]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[18]), 
		 -> STR_40(CODE[11]), STR_39(CODE[11]), Wifi_connect@str(COMRAM[40]), STR_38(CODE[14]), 
		 -> STR_37(CODE[41]), STR_36(CODE[14]), STR_35(CODE[41]), STR_34(CODE[14]), 
		 -> STR_33(CODE[14]), 

    S145$2$0	PTR unsigned char  size(2) Largest target is 0

    S145$4$1	PTR const unsigned char  size(2) Largest target is 0

    S145$4$0	PTR const unsigned char  size(2) Largest target is 0

    S145$9$1	PTR unsigned char  size(2) Largest target is 0

    S145$9$0	PTR unsigned char  size(2) Largest target is 0

    S1655$7$1	PTR const unsigned char  size(2) Largest target is 0

    S1655$7$0	PTR const unsigned char  size(2) Largest target is 0

    S85$0$1	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S85$1$1	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    S29$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_27(CODE[78]), STR_26(CODE[62]), STR_15(CODE[81]), STR_4(CODE[83]), 

    S29$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[21]), STR_24(CODE[21]), STR_23(CODE[21]), 
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[8]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_14(CODE[21]), 
		 -> STR_13(CODE[21]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), STR_3(CODE[21]), STR_2(CODE[2]), STR_1(CODE[2]), 

    wifi_send@msg	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_46(CODE[14]), STR_45(CODE[40]), Wifi_cipsend@vtr(COMRAM[30]), Wifi_cipsend@str(COMRAM[30]), 
		 -> STR_44(CODE[21]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[18]), 
		 -> STR_40(CODE[11]), STR_39(CODE[11]), Wifi_connect@str(COMRAM[40]), STR_38(CODE[14]), 
		 -> STR_37(CODE[41]), STR_36(CODE[14]), STR_35(CODE[41]), STR_34(CODE[14]), 
		 -> STR_33(CODE[14]), 

    S1655eusartT$search_string	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)int  size(2) Largest target is 2
		 -> search(), 

    eusart.search_string	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)int  size(2) Largest target is 2
		 -> search(), 

    S1655eusartT$init	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> initEUSART(), 

    eusart.init	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> initEUSART(), 

    S1655eusartT$txSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> txStatusEUSART(), 

    eusart.txSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> txStatusEUSART(), 

    S1655eusartT$tx	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> txEUSART(), 

    eusart.tx	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> txEUSART(), 

    S1655eusartT$rxResetERROR	PTR FTN()void  size(2) Largest target is 1
		 -> rxResetErrorEUSART(), 

    eusart.rxResetERROR	PTR FTN()void  size(2) Largest target is 1
		 -> rxResetErrorEUSART(), 

    S1655eusartT$rxERROR	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxErrorEUSART(), 

    eusart.rxERROR	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxErrorEUSART(), 

    S1655eusartT$rxSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxStatusEUSART(), 

    eusart.rxSTATUS	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxStatusEUSART(), 

    S1655eusartT$rx	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxEUSART(), 

    eusart.rx	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> rxEUSART(), 

    initSerialIO@ptrOut	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK0[1]), 

    dignum_apagar@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    decodifica@d	PTR unsigned char  size(2) Largest target is 18
		 -> printExec@passo(COMRAM[1]), fifo_print@comando(COMRAM[1]), fila(COMRAM[18]), main@vetor_aux(BANK0[16]), 
		 -> main@auxPasso(BANK0[1]), 

    codifica@dado	PTR unsigned char  size(2) Largest target is 2047
		 -> fifo_add_control@c(COMRAM[1]), fifo_add_tempo@t(COMRAM[1]), fifo_add@passo(COMRAM[1]), RAM(DATA[2047]), 

    salva_atuadores_init@pt	PTR unsigned char  size(2) Largest target is 4
		 -> salva_atuadores_init@condi_init(COMRAM[4]), 

    buscar_dado@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@init_cond(BANK0[1]), 

    buscar_receita@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    salvar_receita@data	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_27(CODE[78]), STR_26(CODE[62]), STR_15(CODE[81]), STR_4(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[21]), STR_24(CODE[21]), STR_23(CODE[21]), 
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[8]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_14(CODE[21]), 
		 -> STR_13(CODE[21]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), STR_3(CODE[21]), STR_2(CODE[2]), STR_1(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    set_passo@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    sp__fifo_adrs	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    main@ptr_671	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr_652	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@pt	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr	PTR unsigned char  size(2) Largest target is 20
		 -> main@lema(BANK0[20]), 

    S145$cipsend	PTR FTN(PTR unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_cipsend(), 

    wifi.cipsend	PTR FTN(PTR unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_cipsend(), 

    S145$config_servidor	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_config_servidor(), 

    wifi.config_servidor	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_config_servidor(), 

    S145$scan	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_scan(), 

    wifi.scan	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_scan(), 

    S145$autoconnect	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_autoconnect(), 

    wifi.autoconnect	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_autoconnect(), 

    S145$ip	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_ip(), 

    wifi.ip	PTR FTN()void  size(2) Largest target is 1
		 -> Wifi_ip(), 

    S145$connect	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_connect(), 

    wifi.connect	PTR FTN(PTR const unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_connect(), 

    S145$mode	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_mode(), 

    wifi.mode	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Wifi_mode(), 

    S145$receive	PTR FTN(PTR unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> wifi_receive(), 

    wifi.receive	PTR FTN(PTR unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> wifi_receive(), 

    S145$send	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> wifi_send(), 

    wifi.send	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> wifi_send(), 

    S145$init	PTR FTN(long ,)void  size(2) Largest target is 1
		 -> wifi_init(), 

    wifi.init	PTR FTN(long ,)void  size(2) Largest target is 1
		 -> wifi_init(), 

    S85$formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    S85$livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    S85$deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    S85$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    S85$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    S29$clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    S29$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    S29$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    S29$print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    S29$init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 


Critical Paths under _main in COMRAM

    _main->_printExec
    _wifi_init->_initEUSART
    _initEUSART->___lldiv
    _teclado_borda->_teclado_scan
    _setT1->___wmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _manipula_atuadores_init->_alt_atuador
    _formatar_receitas->_EEPROM_write
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    _deletar_receita->_end_receita
    _buscar_receita->___awmod
    _buscar_dado->___awmod
    ___aldiv->___lmul
    _Wifi_mode->_wifi_send
    _wifi_send->_txEUSART
    _MCP4725->___aldiv
    _dac_write->_delay
    _dac_init->_delay
    _I2C_init->___lldiv

Critical Paths under _irq in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _irq in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _irq in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _irq in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _irq in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                96    96      0   76167
                                             30 COMRAM     2     2      0
                                              0 BANK0     93    93      0
                           _I2C_init
                            _MCP4725
                          _Wifi_mode *
                            ___aldiv
                            ___awmod
                             ___lmul
                             ___wmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                        _buscar_dado
                     _buscar_receita *
                         _decodifica
                              _delay
                    _deletar_receita *
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                  _formatar_receitas *
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
            _manipula_atuadores_init
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
                          _wifi_init *
 ---------------------------------------------------------------------------------
 (1) _wifi_init                                            4     0      4     616
                                             21 COMRAM     4     0      4
                         _initEUSART *
 ---------------------------------------------------------------------------------
 (2) _initEUSART                                           8     4      4     541
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        2     2      0     296
                                              5 COMRAM     2     2      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         5     5      0     204
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     478
                                              6 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         4     4      0     205
                                              3 COMRAM     4     4      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    3     3      0     114
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       6     4      2    1089
                                              6 COMRAM     6     4      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          5     3      2    1219
                                              6 COMRAM     5     3      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     235
                                              3 COMRAM     8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                            5     4      1   12960
                                             25 COMRAM     5     4      1
                         _decodifica
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         14    10      4    7167
                                             11 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _manipula_atuadores_init                              3     3      0     136
                                              3 COMRAM     3     3      0
                        _alt_atuador
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         5     0      5     294
                                              0 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _formatar_receitas                                    1     1      0     372
                                              2 COMRAM     1     1      0
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                           9     9      0    7013
                                              8 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                         _decodifica
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 7     7      0       0
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          2     2      0    4395
                                             15 COMRAM     2     2      0
                        _alt_atuador
                           _codifica
                         _decodifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _decodifica                                           4     2      2    1426
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     1     1      0    3013
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       2     0      2     120
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    4     4      0    2357
                                             11 COMRAM     4     4      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           3     1      2    2041
                                              8 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _codifica                                             5     3      2     590
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          4     2      2    1733
                                              7 COMRAM     4     2      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0    1415
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     176
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              5     2      3    4971
                                              7 COMRAM     5     2      3
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1386
                                              2 COMRAM     5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      2     2      0     176
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          5     3      2     757
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        2     0      2     540
                                              7 COMRAM     2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _deletar_receita                                      4     4      0     939
                                              4 COMRAM     4     4      0
                       _EEPROM_write
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     348
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _buscar_receita                                       6     4      2     763
                                              6 COMRAM     6     4      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _buscar_dado                                          6     3      3     893
                                              6 COMRAM     6     3      3
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     478
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wifi_mode                                            1     1      0    1425
                                              3 COMRAM     1     1      0
                          _wifi_send
 ---------------------------------------------------------------------------------
 (2) _wifi_send                                            2     0      2    1359
                                              1 COMRAM     2     0      2
                           _txEUSART *
                     _txStatusEUSART *
 ---------------------------------------------------------------------------------
 (3) _txStatusEUSART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _txEUSART                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MCP4725                                              2     0      2    4207
                                             26 COMRAM     2     0      2
                           _I2C_stop
                            ___aldiv (ARG)
                             ___lmul (ARG)
                           _dac_init
                          _dac_write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_write                                            5     3      2    1533
                                              3 COMRAM     5     3      2
                    _I2C_ack_receive
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_init                                             0     0      0    1261
                    _I2C_ack_receive
                          _I2C_start
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     1      2    1239
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _I2C_tx                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ack_receive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             4     0      4     564
                                             13 COMRAM     4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  0     0      0       0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     ___lldiv
   _MCP4725
     _I2C_stop
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
     _dac_init (ARG)
       _I2C_ack_receive
       _I2C_start
       _I2C_tx
       _delay
     _dac_write (ARG)
       _I2C_ack_receive
       _I2C_tx
       _delay
     _delay (ARG)
   _Wifi_mode *
     _wifi_send
       _txEUSART *
       _txStatusEUSART *
   ___aldiv *
     ___lmul (ARG)
   ___awmod *
   ___lmul *
   ___wmul *
   _addContCiclos *
   _addIndicePassos *
   _alt_atuador *
   _buscar_dado *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _buscar_receita *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _decodifica *
   _delay *
   _deletar_receita *
     _EEPROM_write
     _end_receita
   _dignum_apagar *
     ___lwdiv
   _dignum_conc *
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _codifica
     _decodifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _decodifica
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _formatar_receitas *
     _EEPROM_write
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _manipula_atuadores_init *
     _alt_atuador
   _printExec *
     _decodifica
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___wmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *
   _wifi_init *
     _initEUSART *
       ___lldiv

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      78       7       46.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5D      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      59       1       94.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     168      20        0.0%
DATA                 0      0     168       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed Nov 17 22:31:09 2021

              ??_fifo_add_control 0036                     dac_write@code 002A  
                ??_fifo_add_tempo 0036     __size_of_fifo_indicePrint_dec 0014  
   __size_of_fifo_indicePrint_inc 005E                                 _d 0014  
                     fp__txEUSART 0000                       _SSPSTATbits 000FC7  
                    ___awdiv@sign 002C           __end_of_dispLCD_dataReg 3700  
             ___wmul@multiplicand 0029                      printExec@col 0043  
                    printExec@ind 0040                    salvar_dado@col 002D  
                  salvar_dado@aux 002F                __size_of_I2C_start 0014  
                             l205 04D8                               l162 1A48  
                             l410 19E6                               l332 0F7C  
                             l503 28C2                               l247 08B6  
                             l328 0F32                               l601 3BA0  
                             l506 36FE                               l514 33E8  
                             l370 1478                               l523 378E  
                             l435 1D4E                               l267 0A30  
                             l540 2432                               l517 3A34  
                             l606 39C8                               l702 323A  
                             l366 146E                               l543 3DCE  
                             l551 34A4                               l711 36B0  
                             l359 1348                               l464 29AA  
                             l481 3B4C                               l801 3446  
                             l538 23C4                               l731 30AC  
                             l459 2B74                               l387 168C  
                             l660 3C4C                               l581 3B1A  
                             l725 3DBC                               l805 3CE6  
                             l478 3B3A                               l902 3C2E  
                             l582 3B1E                               l750 2586  
                             l654 3DEC                               l590 3862  
                             l647 3CA8                               l663 3DB2  
                             l719 3D6C                               l576 3D8A  
                             l680 2F24                               l585 3BEA  
                             l841 212E                               l817 211E  
                             l657 3DE2                               l690 3014  
                             l666 3D9E                               l930 3554  
                             l922 3DDC                               l595 38A4  
                             l579 3B0C                               l675 2EE2  
                             l931 3558                               l844 37D6  
                             l860 2A52                               l828 2058  
                             l940 3AC2                               l676 2F7A  
                             l669 3DE8                               l853 391E  
                             l773 3660                               l685 2F82  
                             l693 3DA8                               l862 2A88  
                             l782 3746                               l678 2EF8  
                             l598 3C0C                               l926 350E  
                             l847 3AF0                               l687 2F98  
                             l791 3C92                               l679 2F0E  
                             l927 352A                               l960 3CFE  
                             l864 2A92                               l688 2FAE  
                             l768 26C6                               l928 352C  
                             l785 3DC6                               l689 2FC4  
                             l937 35B0                               l962 3D0C  
                             l778 3608                               l794 3DF0  
                             l963 3D0E                               l867 3D5A  
                             l875 22B8                               l883 22B8  
                             l788 3DF4                               l957 3958  
                             l981 3D12                               l983 3D20  
                             l975 3CB0                               l984 3D22  
                             l896 38E2                               l978 3CBE  
                             l899 381E                               l996 3D6E  
                             l999 3D7C                               _IHM 00EB  
              deletar_receita@aux 002B                               _irq 0008  
         __size_of_buscar_receita 0042                 fp__buscar_receita 0000  
         __end_of_dispLCD_instReg 28C4                      ___awmod@sign 002C  
                             tosl 000FFD                               wreg 000FE8  
                 __end_of_MCP4725 3C30                   salvar_dado@data 002E  
                 salvar_dado@adrs 0031                  alt_atuador@tecla 0029  
                    ?_buscar_dado 002D                              l1030 39FE  
                            l1014 3D94                              l1024 2D90  
                            l1133 3DD6                              l1205 31BC  
                            l1029 39F8                              l1136 3CFA  
                            l1072 3D48                              l1066 3C66  
                            l1323 27D2                              l1139 331C  
                            l1244 3BC6                              l1069 3CD2  
                            l1271 2ECA                              l1255 3376  
                            l1256 3386                              l1177 3A64  
                            l1186 2E36                              l1278 2EDA  
                            l5001 2802                              l5011 2844  
                            l5003 2814                              l1475 2C38  
                            l5013 2846                              l5021 286A  
                            l5005 2826                              l1742 32AE  
                            l1735 32A6                              l5111 36D0  
                            l5031 28A6                              l5023 286C  
                            l5015 285E                              l5007 282E  
                            l1488 2CE8                              l5121 36FC  
                            l5113 36D8                              l5105 36B4  
                            l5033 28B8                              l5025 2882  
                            l5017 2860                              l5009 2830  
                            l5041 2B88                              l5201 2CBC  
                            l6001 3562                              l5115 36DA  
                            l5107 36B6                              l5035 28C0  
                            l5027 2884                              l5019 2868  
                            l5051 2BAE                              l5043 2B90  
                            l5131 38E4                              l5203 2CC2  
                            l5123 3DEA                              l6011 3DDE  
                            l6003 356A                              l5117 36DC  
                            l5109 36CE                              l5029 2894  
                            l5061 2BE6                              l5053 2BB6  
                            l5045 2B94                              l5037 2B76  
                            l5133 38EC                              l5221 25CC  
                            l5213 2588                              l5205 2CC8  
                            l5301 2364                              l6013 3D96  
                            l6005 3598                              l6021 2ABA  
                            l5143 3CFC                              l5151 3CE8  
                            l5119 36F2                              l5071 2C12  
                            l5063 2BEC                              l5055 2BC8  
                            l5047 2BA2                              l5039 2B7A  
                            l5135 3908                              l5231 261C  
                            l5223 25DC                              l5207 2CD8  
                            l6111 3C30                              l5311 23BE  
                            l5303 236A                              l5127 3D5E  
                            l6007 359A                              l6031 2B0A  
                            l6023 2ACA                              l6015 2A96  
                            l5161 2E66                              l5145 3CAC  
                            l5081 3B20                              l6201 331E  
                            l6105 3C94                              l5321 3D88  
                            l6121 3448                              l5065 2C02  
                            l5057 2BD0                              l5073 2C18  
                            l5049 2BAA                              l5137 390A  
                            l5401 2A08                              l5233 262C  
                            l5225 25EC                              l5241 265C  
                            l5217 25A4                              l5209 2CE0  
                            l6113 3C36                              l6041 28C6  
                            l5313 2418                              l5305 236C  
                            l6009 35AC                              l6025 2ADA  
                            l6017 2A9A                              l7001 19EA  
                            l5171 2EB8                              l5163 2E72  
                            l5155 2E38                              l5147 3D6E  
                            l5083 3B24                              l6211 26C8  
                            l6203 332E                              l6107 3CA6  
                            l5315 3D80                              l5331 3AFE  
                            l5091 339A                              l6131 3482  
                            l6123 344C                              l5075 2C28  
                            l5067 2C0A                              l5059 2BD8  
                            l5139 391C                              l5411 2A64  
                            l5403 2A18                              l5251 2FDA  
                            l5235 263C                              l5227 25FC  
                            l5219 25BC                              l6115 3C3C  
                            l6043 28CA                              l5307 239E  
                            l6027 2AEA                              l6019 2AAA  
                            l6035 2B1A                              l7011 1A28  
                            l7003 19FC                              l5173 2EBA  
                            l5165 2E80                              l5157 2E48  
                            l5085 3B34                              l5149 3DD2  
                            l6221 26FC                              l6213 26CC  
                            l6205 333C                              l6109 3DE4  
                            l5317 3D84                              l5341 3BC8  
                            l5333 3B00                              l5325 3AF4  
                            l5093 33A2                              l6125 345A  
                            l6133 3486                              l5077 2C30  
                            l5069 2C0C                              l5413 2A74  
                            l5405 2A2E                              l5237 264C  
                            l5229 260C                              l5181 2C4C  
                            l6117 3C44                              l6061 28FA  
                            l5309 23AE                              l6029 2AFA  
                            l5501 2D8E                              l7101 1DE4  
                            l7005 1A08                              l5175 2EC4  
                            l5167 2E8A                              l5159 2E5E  
                            l5431 38A6                              l6231 273E  
                            l6223 270C                              l6215 26DA  
                            l6207 334C                              l5319 3D86  
                            l6151 3878                              l5335 3B02  
                            l5327 3AF6                              l5087 338A  
                            l6127 346C                              l5351 2462  
                            l5407 2A3E                              l5247 2F7E  
                            l5191 2C80                              l5183 2C54  
                            l6055 28EA                              l5423 3D4C  
                            l6143 3838                              l6135 3822  
                            l5511 330A                              l7031 1BA4  
                            l7007 1A0E                              l6311 0150  
                            l6303 0110                              l5169 2EA8  
                            l5441 38D2                              l5433 38AA  
                            l5601 3C22                              l6241 2790  
                            l6233 274A                              l6225 2710  
                            l6217 26EA                              l6209 3356  
                            l6161 3894                              l5337 3B06  
                            l5329 3AFA                              l5089 3392  
                            l5097 33AA                              l6129 3476  
                            l5361 24B2                              l5353 2472  
                            l5345 2436                              l5409 2A4E  
                            l5193 2C88                              l5185 2C58  
                            l5177 2C3A                              l6073 291A  
                            l6049 28DA                              l5281 22BC  
                            l5425 3D4C                              l5257 2EDE  
                            l6145 3850                              l6137 3834  
                            l5521 3314                              l5513 330C  
                            l5505 32B0                              l7041 1BEC  
                            l7033 1BAE                              l7017 1A32  
                            l7009 1A20                              l6401 03C4  
                            l6321 016E                              l6305 013C  
                            l7025 1A48                              l5443 38D6  
                            l5435 38B6                              l5451 3806  
                            l5531 2D96                              l6251 27C2  
                            l6243 2792                              l6235 2758  
                            l6227 2720                              l6219 26EE  
                            l5339 3B0A                              l6171 39AA  
                            l6163 3994                              l5099 33DC  
                            l5371 24F2                              l5363 24C2  
                            l5355 2482                              l5347 243A  
                            l5419 2A8C                              l5195 2C90  
                            l5187 2C66                              l5179 2C3E  
                            l5611 3AAE                              l5603 3A96  
                            l6091 294A                              l6067 290A  
                            l5291 22FA                              l5283 22D0  
                            l5427 3D58                              l5267 2F3A  
                            l5275 2F40                              l6147 3852  
                            l5523 3316                              l5515 330E  
                            l5507 32B6                              l7051 1C72  
                            l7043 1BF4                              l7035 1BBA  
                            l7019 1A3E                              l6411 042A  
                            l6403 03CE                              l7027 1B94  
                            l6331 01BE                              l6323 0172  
                            l6307 0148                              l6315 0156  
                            l5437 38BC                              l5453 380E  
                            l5445 37D8                              l5533 2DC4  
                            l6245 279C                              l6237 2762  
                            l6229 2736                              l6157 387C  
                            l6149 3866                              l6173 39B6  
                            l6165 39A6                              l5541 3BBE  
                            l5365 24D2                              l5357 2492  
                            l5349 2452                              l5701 362C  
                            l5197 2C9E                              l5189 2C6E  
                            l6181 3C6C                              l5621 3AB8  
                            l5613 3AB0                              l5605 3A98  
                            l6085 293A                              l5293 2302  
                            l5285 22E0                              l5461 3510  
                            l5525 3318                              l5517 3310  
                            l5509 3308                              l7061 1CC8  
                            l7053 1C7C                              l7045 1C04  
                            l7037 1BCA                              l7029 1B9C  
                            l6501 0764                              l6421 04AA  
                            l6413 0442                              l6405 03E6  
                            l6341 01D4                              l6317 015A  
                            l6261 003E                              l5455 3D10  
                            l5439 38C0                              l5447 37F6  
                            l5535 2E02                              l6191 3158  
                            l6239 2780                              l6247 27A2  
                            l6159 3892                              l6175 39B8  
                            l5551 325E                              l5367 24E2  
                            l5359 24A2                              l5375 2554  
                            l5703 363A                              l5199 2CB4  
                            l5711 1E4C                              l6183 3C76  
                            l5623 3ABA                              l5615 3AB2  
                            l5607 3AA8                              l6079 292A  
                            l5295 2328                              l5287 22E8  
                            l5471 3556                              l5463 3524  
                            l5631 3CC0                              l5527 331A  
                            l5519 3312                              l7071 1D16  
                            l7055 1C8C                              l7063 1CD2  
                            l7047 1C16                              l7039 1BDC  
                            l6431 054A                              l6423 04C8  
                            l6415 045C                              l6407 0418  
                            l6351 022E                              l6343 0200  
                            l6335 01C6                              l6327 0186  
                            l6271 0098                              l6263 006A  
                            l6255 0012                              l5449 37FA  
                            l5537 2E06                              l5529 2D92  
                            l6193 316A                              l6249 27B2  
                            l5561 3298                              l5553 3266  
                            l5545 323C                              l5393 29C8  
                            l5385 29AC                              l5705 364A  
                            l5801 2038                              l5721 1E7C  
                            l5713 1E58                              l6177 3C68  
                            l5625 3ABC                              l5617 3AB4  
                            l5609 3AAC                              l5297 232A  
                            l5289 22F2                              l5465 353A  
                            l5457 3DD8                              l5633 3D38  
                            l5481 2D06                              l5641 39D4  
                            l6185 3A36                              l7065 1CEE  
                            l7057 1C9C                              l7049 1C22  
                            l6601 0B00                              l6513 079E  
                            l6505 0778                              l6441 05B2  
                            l6433 0576                              l6425 04D8  
                            l6417 047A                              l6409 041E  
                            l6361 026A                              l6353 023C  
                            l6345 0212                              l6329 01B2  
                            l6281 00C0                              l6273 009C  
                            l6265 008A                              l6257 0016  
                            l6195 3182                              l6187 313C  
                            l5651 3B7C                              l5563 329A  
                            l5555 3274                              l5547 3244  
                            l5539 3BA2                              l5395 29D8  
                            l5387 29B0                              l5707 364C  
                            l5811 2070                              l5803 2048  
                            l5731 1EAC                              l5723 1E82  
                            l5715 1E5C                              l5627 3ABE  
                            l5619 3AB6                              l5635 3DA0  
                            l6099 2950                              l5299 2346  
                            l5467 353E                              l5459 3502  
                            l5491 2D52                              l5483 2D22  
                            l5475 2CEA                              l5643 39E4  
                            l5571 3D8C                              l7091 1DBC  
                            l7083 1D78                              l7075 1D38  
                            l7067 1CF8                              l7059 1CA0  
                            l6603 0B06                              l6531 07E6  
                            l6523 07BC                              l6507 078A  
                            l6451 05E2                              l6435 0594  
                            l6419 0492                              l6443 05B8  
                            l6371 02B0                              l6363 027E  
                            l6355 0240                              l6347 0218  
                            l6339 01CC                              l6291 00E0  
                            l6283 00C4                              l6275 00A0  
                            l6267 0090                              l6259 001A  
                            l6197 3194                              l6189 314C  
                            l5653 3B8E                              l5565 32A0  
                            l5557 327A                              l5549 3256  
                            l5397 29E8                              l5389 29B4  
                            l5709 365C                              l5901 3CD4  
                            l5813 207C                              l5805 2058  
                            l5821 208E                              l5741 1ED8  
                            l5733 1EBC                              l5725 1E92  
                            l5717 1E66                              l5629 3AC0  
                            l5661 3680                              l5469 3544  
                            l5493 2D76                              l5477 2CF2  
                            l5645 39F4                              l5637 39CA  
                            l5581 3C60                              l5573 3C4E  
                            l7093 1DD2                              l7085 1D7C  
                            l7077 1D4A                              l6701 0E64  
                            l6621 0BBC                              l6605 0B0A  
                            l6533 07F2                              l6525 07C0  
                            l6541 0800                              l6509 0796  
                            l6517 07A4                              l6461 063E  
                            l6453 05F4                              l6445 05D0  
                            l6437 05A8                              l6429 04E8  
                            l6381 0318                              l6373 02D6  
                            l6365 0288                              l6357 024C  
                            l6349 0224                              l6293 00E4  
                            l6285 00C8                              l6277 00A4  
                            l6269 0094                              l5591 392C  
                            l6199 31B0                              l5559 3290  
                            l5567 3A00                              l5399 29F8  
                            l5671 3702                              l5911 3026  
                            l5903 3CE4                              l5831 2112  
                            l5815 2084                              l5807 2060  
                            l5823 20E8                              l5751 1F16  
                            l5743 1EEE                              l5735 1EC0  
                            l5727 1E94                              l5719 1E76  
                            l5663 3694                              l5655 3664  
                            l5495 2D78                              l5647 39FC  
                            l5639 39CE                              l5583 3C62  
                            l5575 3C50                              l7087 1D86  
                            l7079 1D56                              l6703 0E6E  
                            l6711 0E80                              l6631 0C54  
                            l6623 0BE8                              l6607 0B10  
                            l6551 0860                              l6543 0824  
                            l6519 07A8                              l6463 0648  
                            l6455 0606                              l6447 05D4  
                            l6439 05AE                              l6383 0324  
                            l6375 02EA                              l6367 02A2  
                            l6359 0252                              l6287 00D0  
                            l6279 00BC                              l5593 3954  
                            l5569 3A10                              l5673 3712  
                            l5681 3742                              l5913 3036  
                            l5921 30A8                              l5905 3DF2  
                            l5833 2114                              l5825 20FA  
                            l5809 2062                              l5753 1F30  
                            l5745 1EFE                              l5737 1ED0  
                            l5729 1EA4                              l5665 369A  
                            l5657 366C                              l5497 2D88  
                            l5489 2D26                              l5585 3C64  
                            l5577 3C54                              l7089 1D96  
                            l7097 1DDA                              l6801 1286  
                            l6721 0F26                              l6713 0ECA  
                            l6705 0E78                              l6641 0C92  
                            l6633 0C6A                              l6625 0C14  
                            l6561 08DA                              l6617 0B2C  
                            l6553 087E                              l6545 0838  
                            l6537 07FA                              l6529 07D4  
                            l6481 06F2                              l6465 0654  
                            l6473 0664                              l6457 061A  
                            l6449 05DE                              l6385 032E  
                            l6393 0348                              l6377 02F4  
                            l6369 02AC                              l6297 00F8  
                            l6289 00D8                              ?_irq 0027  
                            l5595 3956                              l5587 3920  
                            l5851 376C                              l5843 3DC8  
                            l5675 3720                              l5691 35F2  
                            l5683 35B4                              l5915 3038  
                            l5827 2106                              l5771 1F8C  
                            l5755 1F32                              l5747 1F04  
                            l5739 1ED6                              l5763 1F5C  
                            l5923 3DEE                              l5667 369C  
                            l5931 214A                              l5579 3C5E  
                            l6803 128E                              l6723 0F32  
                            l6715 0ED2                              l6651 0CD0  
                            l6643 0CA8                              l6635 0C78  
                            l6627 0C1E                              l6619 0B9E  
                            l6571 0970                              l6563 08E2  
                            l6555 08A4                              l6547 0842  
                            l6491 0742                              l6475 0696  
                            l6467 065C                              l6459 0624  
                            l6395 0382                              l6387 0336  
                            l6379 030E                              l6299 00FC  
                            l5589 3924                              l5597 3C0E  
                            l5853 3770                              l5845 374A  
                            l5677 3730                              l5693 35F4  
                            l5685 35C4                              l5917 3054  
                            l5909 3016                              l5829 210A  
                            l5781 1FCA                              l5773 1F9C  
                            l5765 1F6C                              l5757 1F48  
                            l5749 1F06                              l5837 211E  
                            l5669 36A0                              l5933 215A  
                            l5941 219C                              l5861 31D6  
                            l6901 1636                              l6821 131A  
                            l6805 1296                              l6813 12B8  
                            l6741 0F9E                              l6733 0F8E  
                            l6725 0F46                              l6717 0EF0  
                            l6661 0D0E                              l6653 0CE6  
                            l6645 0CB6                              l6637 0C82  
                            l6629 0C4A                              l6581 09D2  
                            l6573 0976                              l6565 091C  
                            l6557 08AA                              l6493 0746  
                            l6477 06DE                              l6397 0394  
                            l6389 033E                              l5599 3C1E  
                            l5855 3772                              l5847 374E  
                            l5679 3732                              l5687 35D4  
                            l5695 3604                              l5919 3098  
                            l5791 1FFE                              l5783 1FD0  
                            l5775 1FA2                              l5767 1F7C  
                            l5759 1F50                              l5951 21E4  
                            l5943 21AC                              l5935 2174  
                            l5927 2132                              l5871 31FA  
                            l5863 31DE                              l6911 16AC  
                            l6903 1654                              l6831 136A  
                            l6823 1328                              l6815 12F2  
                            l6807 129E                              l6751 0FC8  
                            l6727 0F66                              l6719 0F1C  
                            l6671 0D4C                              l6663 0D24  
                            l6655 0CF4                              l6647 0CC0  
                            l6639 0C88                              l6583 09EA  
                            l6575 0982                              l6567 0926  
                            l6559 08B6                              l6495 074C  
                            l6479 06EA                              l6487 06FA  
                            l6399 039C                              l5849 375C  
                            l5697 360C                              l5689 35E2  
                            l5793 2014                              l5777 1FA4  
                            l5785 1FD2                              l5769 1F88  
                            l5961 2236                              l5953 2200  
                            l5945 21BC                              l5937 2176  
                            l5929 213A                              l5873 3202  
                            l5881 3228                              l5865 31E6  
                            l5857 31BE                              l6913 16EC  
                            l6921 1718                              l6905 167A  
                            l6841 13E6                              l6833 1370  
                            l6825 1340                              l6817 12FA  
                            l6809 12B0                              l6753 0FD0  
                            l6745 0FB6                              l6737 0F96  
                            l6729 0F84                              l6681 0DA0  
                            l6673 0D58                              l6665 0D32  
                            l6657 0CFE                              l6649 0CC6  
                            l6593 0A40                              l6585 0A02  
                            l6577 099A                              l6569 093E  
                            l6489 0724                              l4995 27D6  
                            l5699 361C                              l5891 33EA  
                            l5795 201C                              l5787 1FE2  
                            l5779 1FBA                              l5971 226A  
                            l5963 2240                              l5947 21C8  
                            l5955 220A                              l5939 2192  
                            l5883 3238                              l5875 321A  
                            l5867 31EE                              l5859 31CE  
                            l6931 17C2                              l6923 178A  
                            l6915 16F6                              l6907 1680  
                            l6851 1420                              l6843 13F0  
                            l6835 1382                              l6819 130A  
                            l6827 134C                              l6771 10F4  
                            l6763 104A                              l6691 0E0E  
                            l6683 0DC6                              l6675 0D7E  
                            l6667 0D3C                              l6659 0D04  
                            l6595 0AA2                              l6587 0A20  
                            l6579 09B4                              l6499 0760  
                            l4997 27D8                              l5893 33FA  
                            l5789 1FFC                              l5981 3DAA  
                            l5965 2248                              l5957 221A  
                            l5973 2274                              l5949 21E2  
                            l5877 3220                              l5869 31F6  
                            l6941 1812                              l6933 17C6  
                            l6925 17A8                              l6909 168C  
                            l6853 1430                              l6845 13F6  
                            l6837 138A                              l6829 135E  
                            l6781 115A                              l6773 1100  
                            l6765 1076                              l6749 0FBE  
                            l6757 0FD8                              l6693 0E1C  
                            l6685 0DD4                              l6677 0D8C  
                            l6669 0D42                              l6597 0ACE  
                            l6589 0A30                              l5983 3792  
                            l4999 27F0                              l5887 3C7E  
                            l5895 3434                              l5799 2028  
                            l5975 2286                              l5967 2256  
                            l5959 222A                              l5879 3224  
                            l6951 1824                              l6927 17AE  
                            l6855 1440                              l6839 13B6  
                            l6791 120E                              l6783 1164  
                            l6775 1112                              l6767 10B0  
                            l6759 1042                              l6695 0E26  
                            l6687 0DDE                              l6679 0D96  
                            l6599 0AEC                              l5985 3AC4  
                            l5993 3DBE                              l5897 343A  
                            l5977 2292                              l5969 2262  
                            l6961 1850                              l6945 181A  
                            l6937 17DA                              l6881 1584  
                            l6865 147C                              l6857 144E  
                            l6873 1494                              l6849 1418  
                            l6785 116E                              l6777 1124  
                            l6793 1246                              l6769 10EA  
                            l6697 0E30                              l6689 0DE8  
                            l7921 070E                              l5995 3DC2  
                            l5899 3442                              l5979 22AE  
                            l5987 3BEE                              l6963 187C  
                            l6955 1838                              l6939 1806  
                            l6891 15FC                              l6883 158E  
                            l6875 14DE                              l6867 1484  
                            l6859 1466                              l7931 12CC  
                            l6795 1258                              l6787 119A  
                            l6779 1150                              l6699 0E56  
                            l7923 0A5C                              l7915 035C  
                            l5989 3DB4                              l5997 355A  
                            l7941 1DFA                              l6965 1888  
                            l6957 183C                              l6973 1896  
                            l6949 1820                              l6893 1604  
                            l6885 159C                              l6877 14FC  
                            l7933 14A8                              l6797 125C  
                            l6789 11D4                              l7925 0B40  
                            l7917 0504                              l7951 2678  
                            l5999 355E                              l7943 2B2E  
                            l6991 1998                              l6983 192A  
                            l6975 18EE                              l7935 1620  
                            l6887 15CA                              l6879 1528  
                            l6799 127A                              l7927 0E94  
                            l7919 0678                              l7953 2FEE  
                            l7945 2F54                              l6993 19A8  
                            l6985 1956                              l6977 1902  
                            l6969 1890                              l7937 172C  
                            l6889 15F0                              l7929 0FEC  
                            l7955 250E                              l7947 2964  
                            l7939 1A5E                              l6995 19B8  
                            l6987 1986                              l6979 190C  
                            l6899 160C                              l7957 2568  
                            l7949 20A2                              l6997 19C6  
                            l6989 1990                              l7959 33BE  
                            l6999 19DE           __end_of_getIndicePassos 3DEE  
                            STR_1 7FFC                              STR_2 7DD8  
                            STR_3 7E04                              STR_4 7C2F  
                            STR_5 7F3F                              STR_6 7EC1  
                            STR_7 7F15                              STR_8 7EAC  
                            STR_9 7E58                              u3100 2B88  
                            u3101 2B84                              u3110 2BA2  
                            u3111 2B9E                              u3200 3D7C  
                            u3120 2BC8                              u4000 1F16  
                            u3201 3D78                              u3121 2BC4  
                            u4001 1F12                              u3210 3CF8  
                            u3050 2802                              u3130 2BE6  
                            u4010 1F6C                              u3211 3CF2  
                            u3051 27FE                              u3131 2BE2  
                            u4011 1F68                              u3220 3CFA  
                            u3060 2814                              u3140 2C02  
                            u3300 2CB4                              u4100 212E  
                            u4020 1F7C                              u3061 2810  
                            u3141 2BFE                              u3301 2CB0  
                            u4101 212A                              u4021 1F78  
                            u3230 2E5E                              u3070 2844  
                            u4110 378E                              u3150 2C28  
                            u3310 2CD8                              u4030 1F9C  
                            u3231 2E5A                              u3071 2840  
                            u4111 378A                              u3151 2C24  
                            u3311 2CD4                              u4031 1F98  
                            u3240 2E80                              u3160 3B4C  
                            u3080 2894                              u3400 2FD4  
                            u3320 25A0                              u4200 3036  
                            u4040 1FCA                              u4120 321A  
                            u5000 0D7E                              u3241 2E7C  
                            u3161 3B48                              u3081 2890  
                            u3401 2FCE                              u3321 259C  
                            u4201 3032                              u4041 1FC6  
                            u4121 3216                              u5001 0D7A  
                            u3250 2EA8                              u3090 28A6  
                            u3170 391C                              u3330 25BC  
                            u4210 3054                              u4050 1FE2  
                            u4130 3238                              u5010 0DC6  
                            u3251 2EA4                              u3091 28A2  
                            u3171 3918                              u3331 25B8  
                            u4211 3050                              u4051 1FDE  
                            u4131 3234                              u5011 0DC2  
                            u3180 3D0C                              u3340 2F92  
                            u4140 3C90                              u3260 2C4C  
                            u4060 2038                              u3500 2360  
                            u4300 2256                              u4220 214A  
                            u3420 2EF2                              u5020 0E0E  
                            u3181 3D08                              u3341 2F8C  
                            u4141 3C8A                              u3261 2C48  
                            u4061 2034                              u3501 235C  
                            u4301 2252                              u4221 2146  
                            u3421 2EEC                              u5021 0E0A  
                            u3190 3CBE                              u4150 3C92  
                            u3270 2C66                              u4070 2048  
                            u3510 239E                              u4310 2286  
                            u4230 215A                              u3430 2F08  
                            u5030 0E56                              u3191 3CBA  
                            u3415 2FD6                              u3271 2C62  
                            u4071 2044                              u3511 239A  
                            u4311 2282                              u4231 2156  
                            u3431 2F02                              u5031 0E52  
                            u4400 314C                              u3600 2A18  
                            u3360 2FA8                              u4160 33FA  
                            u3280 2C80                              u4080 2070  
                            u3520 23AE                              u4240 2174  
                            u3440 2F1E                              u4320 35AC  
                            u5120 1112                              u4401 3148  
                            u3601 2A14                              u3361 2FA2  
                            u4161 33F6                              u3281 2C7C  
                            u4081 206C                              u3521 23AA  
                            u4241 2170                              u3441 2F18  
                            u4321 35A8                              u5121 110E  
                            u4410 316A                              u4330 3CA6  
                            u3610 2A3E                              u4170 3434  
                            u3290 2C9E                              u4090 20FA  
                            u3530 23BE                              u4250 21AC  
                            u3450 2F34                              u3426 2EF4  
                            u5210 12B0                              u5130 1124  
                            u4411 3166                              u4331 3CA2  
                            u3611 2A3A                              u3355 2F94  
                            u4171 3430                              u3291 2C9A  
                            u4091 20F6                              u3531 23BA  
                            u4251 21A8                              u3451 2F2E  
                            u5211 12AC                              u5131 1120  
                            u4420 3194                              u4500 27B2  
                            u4340 346C                              u3620 2A4E  
                            u3380 2FBE                              u4180 3CE4  
                            u3540 2432                              u3460 22CC  
                            u4260 21BC                              u3436 2F0A  
                            u3700 2D02                              u5300 1430  
                            u5220 130A                              u5108 1080  
                            u5060 0F46                              u4421 3190  
                            u4501 27AE                              u4341 3468  
                            u3621 2A4A                              u3381 2FB8  
                            u4181 3CE0                              u3541 242E  
                            u3461 22C6                              u4261 21B8  
                            u3701 2CFE                              u5301 142C  
                            u5221 1306                              u5109 10B0  
                            u5061 0F42                              u4430 333C  
                            u3550 3B1A                              u4350 34A4  
                            u3630 2A64                              u4190 3026  
                            u3470 22CE                              u4270 21E2  
                            u3446 2F20                              u5310 1440  
                            u5230 131A                              u5118 10BA  
                            u5070 0F66                              u4431 3338  
                            u3551 3B16                              u4351 34A0  
                            u3631 2A60                              u3375 2FAA  
                            u4191 3022                              u4271 21DE  
                            u5311 143C                              u5231 1316  
                            u5119 10EA                              u5071 0F62  
                            u3800 2E26                              u4440 3376  
                            u3560 2452                              u3640 2A84  
                            u3480 22E0                              u4280 221A  
                            u3456 2F36                              u4360 3862  
                            u5320 1466                              u5240 1340  
                            u5208 1266                              u5080 0FB2  
                            u5048 0EDC                              u4441 3372  
                            u3561 244E                              u3641 2A80  
                            u3481 22DC                              u4281 2216  
                            u4361 385E                              u5321 1462  
                            u5241 133C                              u5209 127A  
                            u5081 0FAE                              u5049 0EF0  
                            u4601 020A                              u3810 2E36  
                            u4450 26DA                              u4370 38A4  
                            u3570 29C4                              u3490 2328  
                            u4290 222A                              u3730 2D52  
                            u3714 2D18                              u5250 135E  
                            u5058 0EFA                              u4610 026A  
                            u4530 00F4                              u3811 2E32  
                            u4451 26D6                              u4371 38A0  
                            u3571 29C0                              u3395 2FC0  
                            u3491 2324                              u4291 2226  
                            u3731 2D4E                              u3715 2D14  
                            u5251 135A                              u5059 0F1C  
                            u4611 0266                              u4531 00F0  
                            u3660 3D20                              u4460 26FC  
                            u4380 39C8                              u3820 3256  
                            u3580 29E8                              u3900 3712  
                            u3740 2D88                              u3724 2D38  
                            u5260 1382                              u5148 112E  
                            u4700 0492                              u4620 02A2  
                            u4540 010C                              u3661 3D1C  
                            u4461 26F8                              u4381 39C4  
                            u3821 3252                              u3581 29E4  
                            u3901 370E                              u3741 2D84  
                            u3725 2D34                              u5261 137E  
                            u5149 1150                              u4701 048E  
                            u4621 029E                              u4541 0108  
                            u4470 2736                              u3830 3274  
                            u3590 2A08                              u3910 35C4  
                            u3670 3524                              u5190 1258  
                            u5158 1178                              u4710 04AA  
                            u4518 0054                              u3655 37E4  
                            u3807 2E1C                              u4471 2732  
                            u3831 3270                              u3591 2A04  
                            u3911 35C0                              u3671 3520  
                            u5191 1254                              u5159 119A  
                            u4711 04A6                              u4519 006A  
                            u4480 2758                              u3840 3290  
                            u3920 35D4                              u3680 353A  
                            u5600 1BCA                              u5520 1926  
                            u5440 17BE                              u5408 1666  
                            u5168 11A4                              u4800 085C  
                            u4720 0576                              u4640 030E  
                            u4560 016A                              u4528 0074  
                            u4481 2754                              u3841 328C  
                            u3921 35D0                              u3681 3536  
                            u5601 1BC6                              u5521 1922  
                            u5441 17BA                              u5409 167A  
                            u5169 11D4                              u4801 0858  
                            u4721 0572                              u4641 030A  
                            u4561 0166                              u4529 008A  
                            u3770 2DC4                              u4490 2780  
                            u3930 361C                              u3690 3554  
                            u3850 39E4                              u5610 1BDC  
                            u5450 17D6                              u5418 16B2  
                            u5338 14E8                              u5178 11DE  
                            u5098 1054                              u4730 05D0  
                            u4570 0182                              u3771 2DC0  
                            u4491 277C                              u3931 3618  
                            u3691 3550                              u3851 39E0  
                            u3755 32D8                              u5611 1BD8  
                            u5451 17D2                              u5419 16EC  
                            u5339 14FC                              u5179 120E  
                            u5099 1076                              u4731 05CC  
                            u4571 017E                              u3940 362C  
                            u3860 39F4                              u5700 1D74  
                            u5620 1BEC                              u5508 18A0  
                            u5428 1700                              u5348 1506  
                            u5188 1218                              u4900 0ACE  
                            u4740 063E                              u4660 03E6  
                            u3941 3628                              u3861 39F0  
                            u5701 1D70                              u5621 1BE8  
                            u5509 18C2                              u5429 1714  
                            u5349 1528                              u5189 1246  
                            u4901 0ACA                              u4741 063A  
                            u4661 03E2                              u3790 2E00  
                            u3950 1E76                              u3870 367C  
                            u4398 3A50                              u5710 1D96  
                            u5630 1C04                              u5550 19A8  
                            u5518 18CC                              u5470 1834  
                            u5438 1794                              u5358 1532  
                            u5278 1394                              u4910 0B28  
                            u4638 02C2                              u4558 011A  
                            u3951 1E72                              u3871 3678  
                            u4399 3A64                              u5711 1D92  
                            u5631 1C00                              u5551 19A4  
                            u5519 18EE                              u5471 1830  
                            u5439 17A8                              u5359 1558  
                            u5279 13B6                              u4911 0B24  
                            u4639 02D6                              u4559 013C  
                            u3768 2DA0                              u3960 1EA4  
                            u3880 3694                              u5720 1DBC  
                            u5640 1C16                              u5560 19B8  
                            u5480 184C                              u5368 1562  
                            u5288 13C0                              u4840 093E  
                            u4760 075C                              u4680 0442  
                            u3769 2DB4                              u3961 1EA0  
                            u3881 3690                              u5721 1DB8  
                            u5641 1C12                              u5561 19B4  
                            u5481 1848                              u5369 1584  
                            u5289 13E6                              u4841 093A  
                            u4761 0758                              u4681 043E  
                            u3970 1EBC                              u3890 36B0  
                            u5730 1DD2                              u5650 1C8C  
                            u5570 19DE                              u5538 1934  
                            u5378 15A2                              u5298 1400  
                            u4818 086A                              u4770 0774  
                            u4690 045C                              u4658 03A6  
                            u3971 1EB8                              u3891 36AC  
                            u5731 1DCE                              u5651 1C88  
                            u5571 19DA                              u5539 1956  
                            u5379 15CA                              u5299 1414  
                            u4819 087E                              u4771 0770  
                            u4691 0458                              u4659 03C4  
                            u3788 2DCE                              u3980 1ED0  
                            u5660 1C9C                              u5580 19FC  
                            u5548 1960                              u5468 17E4  
                            u5388 15DC                              u4860 099A  
                            u4828 0890                              u4780 07B8  
                            u4588 0190                              u3797 2DF6  
                            u3789 2E02                              u3981 1ECC  
                            u5661 1C98                              u5581 19F8  
                            u5549 1986                              u5469 1806  
                            u5389 15F0                              u4861 0996  
                            u4829 08A4                              u4781 07B4  
                            u4589 01B2                              u3990 1EFE  
                            u5670 1D12                              u5590 1A20  
                            u5398 1640                              u4870 09B4  
                            u4838 08EC                              u4790 07D0  
                            u4758 072E                              u4678 03F0  
                            u4598 01DE                              u3991 1EFA  
                            u5671 1D0E                              u5591 1A1C  
                            u5399 1654                              u4871 09B0  
                            u4839 091C                              u4791 07CC  
                            u4759 0742                              u4679 0418  
                            u4599 0200                              u5680 1D34  
                            u4960 0C6A                              u4928 0BA8  
                            u4880 09EA                              u5681 1D30  
                            u4961 0C66                              u4929 0BBC  
                            u4881 09E6                              u5690 1D4A  
                            u5498 185A                              u4970 0CA8  
                            u4938 0BC6                              u4890 0A02  
                            u4858 0948                              u5827 281A  
                            u5691 1D46                              u5499 187C  
                            u4971 0CA4                              u4939 0BE8  
                            u4891 09FE                              u4859 0970  
                            u4980 0CE6                              u4948 0BF2  
                            u5837 2828                              u4981 0CE2  
                            u4949 0C14                              u4990 0D24  
                            u4958 0C28                              u5847 2862  
                            u4991 0D20                              u4959 0C4A  
                            u5857 28AC                              u5867 28BA  
                            u5877 36D2                              u5887 36F6  
                            u5897 3B2A                       main@ptr_652 00B6  
                     main@ptr_671 00B8                              _fila 0015  
                            _main 0012                      fp__wifi_init 0000  
                    fp__wifi_send 0000                              _wifi 00BD  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 005A                    ?_addContCiclos 0027  
                __end_of_I2C_init 395A                              prodh 000FF4  
                            prodl 000FF3                       main@vetorIn 00AD  
                            start 000E           __size_of_salvar_receita 0044  
               fp__salvar_receita 0000                  __end_of_I2C_stop 3D24  
               _formatar_receitas 3C68                      ___param_bank 000000  
                    ?_ler_atuador 0027                    printExec@passo 0044  
              ?_formatar_receitas 0027      __end_of_salva_atuadores_init 323C  
                           ??_irq 0027                   _addIndicePassos 3C94  
            __end_of_EEPROM_write 3B20                      main@auxPasso 00BA  
                 __end_of___aldiv 27D4                             ?_main 0027  
                 __end_of___awdiv 2C3A                             _EEADR 000FA9  
                    wifi_send@msg 0028                             STR_10 7D4A  
                           STR_11 7FFC                             STR_12 7DD8  
                           STR_20 7FF4                             STR_13 7E2E  
                           STR_21 7E19                             STR_30 7E6D  
                           STR_14 7E43                             STR_22 7DDA  
                           STR_23 7F54                             STR_31 7DEF  
                           STR_15 7C82                             STR_40 7FE9  
                           STR_32 7F2A                             STR_16 7ED6  
                           STR_24 7DC5                             STR_33 7F98  
                           STR_41 7F69                             STR_25 7F00  
                           STR_17 7E82                             STR_34 7FB4  
                           STR_42 7F7B                             STR_18 7E97  
                           STR_26 7D21                             STR_43 7FA6  
                           STR_19 7EEB                             STR_35 7D5F  
                           STR_27 7CD3                             STR_28 7FFC  
                           STR_36 7FC2                             STR_44 7DB0  
                 __end_of___awmod 2CEA                             STR_37 7D5F  
                           STR_29 7DD8                             STR_45 7D88  
                           STR_46 7FD0                             STR_38 7F8A  
                           STR_39 7FDE                   __end_of___lldiv 2EDC  
                 ___awdiv@divisor 0029               ??_formatar_receitas 0029  
                 __end_of___lwdiv 32B0                             i2l152 3B76  
                 ___awdiv@counter 002B                             _RCREG 000FAE  
                           _TMR1H 000FCF                             _TMR1L 000FCE  
                           _PORTD 000F83                             _TRISD 000F95  
                           _TXREG 000FAD  __size_of_manipula_atuadores_init 0050  
             ___lmul@multiplicand 002B                   __end_of_dispLCD 3790  
                  _txStatusEUSART 3CE8                 ??_fifo_disponivel 0027  
           __end_of_teclado_borda 3A00                             _delay 3B20  
                           _setT1 3CC0                   salvar_receita@i 0032  
                           main@i 00A1                             main@j 00A2  
                           pclath 000FFA                             tablat 000FF5  
                 _I2C_ack_receive 3D6E                             plusw1 000FE3  
                           plusw2 000FDB                      main@vetorOut 00AE  
                           ttemp5 005B                             ttemp6 005E  
                           ttemp7 0062                             status 000FD8  
               __end_of_I2C_start 3D10                             wtemp8 005B  
       __end_of_formatar_receitas 3C7E                   EEPROM_read@addr 0027  
                   _indice_passos 0057              __end_of_dispLCD_init 3A36  
            __size_of_EEPROM_read 000E                   __initialization 30AE  
                    __end_of_main 1E4C                  ?_dispLCD_dataReg 0027  
                          ??_main 0045                         ??_MCP4725 0043  
                   __activetblptr 000002                     ?_initSerialIO 0027  
            __size_of_dispLCD_clr 0008            __end_of_txStatusEUSART 3CFC  
            __size_of_dispLCD_num 017A              __size_of_dispLCD_str 005E  
            __size_of_alt_atuador 009A                  ?_dispLCD_instReg 0027  
                          ?_delay 0027                      ?_salvar_dado 002D  
                          _ADCON1 000FC1                            ?_setT1 002D  
                          _EEDATA 000FA8                            _EECON2 000FA7  
                ___awdiv@dividend 0027                            _I2C_tx 3CAA  
            __size_of_dignum_conc 0048                            _EEPROM 00E1  
                ?_getIndicePassos 0027                            i2l1061 3A92  
                          i2l1063 3A94                            i2l3191 3B50  
                          i2l3193 3B60                            i2l2491 3A6E  
                          i2l3195 3B6E                            i2l2493 3A84  
                          i2l3197 3B70                            i2l3199 3B74  
                          i2l2489 3A66              __size_of_fifo_delete 0098  
                __end_of_dac_init 38E4                   ??_addContCiclos 0027  
            __size_of_end_receita 0024              __size_of_fifo_indice 0004  
            __size_of_fifo_lerPos 0012                            _SSPADD 000FC8  
                          _SSPBUF 000FC9                     main@init_cond 00B2  
                 ler_sensor@passo 002B                  __end_of_codifica 2588  
                __end_of_fifo_add 3662                  __end_of_fifo_tam 3DF2  
         __end_of_addIndicePassos 3CAA                  _Wifi_autoconnect 000000  
                          _t1cont 0001                            ___lmul 331E  
                       ??___aldiv 003B                            ___wmul 3BA2  
                       ??___awdiv 002B                         ??___awmod 002B  
                          _ciclos 000F                         ??___lldiv 002F  
               _fifo_alinharPrint 29AC                      ?_timer1_init 0027  
                       ??___lwdiv 002B                            _eusart 0047  
                          delay@t 0027                            clear_0 3114  
                          clear_1 3126                  __end_of_txEUSART 3DD8  
                          _search 000000                  ___awdiv@quotient 002D  
                          _teclas 00D1                   ___awmod@divisor 0029  
              ?_fifo_alinharPrint 0027                         ??_dispLCD 0031  
                 ___awmod@counter 002B                    ??_initSerialIO 002C  
                          main@pt 009D                    _buscar_receita 3864  
                __end_of_posAtual 3D5C                   ?_txStatusEUSART 0027  
                          setT1@c 002D                      __pdataCOMRAM 0047  
                      Wifi_mode@d 002A                __size_of_Wifi_mode 0084  
                    __mediumconst 7C2E                         ?_I2C_init 0034  
                          tblptrh 000FF7                            tblptrl 000FF6  
             ??_fifo_alinharPrint 0032                            tblptru 000FF8  
                       ?_I2C_stop 0027           __end_of_I2C_ack_receive 3D7E  
           __end_of_getContCiclos 3DB4              _Wifi_config_servidor 000000  
                   main@vetor_aux 0076                  __end_of_statusT1 3D4A  
          salva_atuadores_init@pt 002E              _salva_atuadores_init 31BE  
                      __accesstop 0060           __end_of__initialization 312C  
            __size_of_buscar_dado 0028          __size_of_deletar_receita 0038  
              fp__deletar_receita 0000                 _serialIObyteShift 3500  
                  _salvar_receita 3820        __size_of_formatar_receitas 0016  
         __size_of_dispLCD_lincol 0062                     ___rparam_used 000001  
              ?_serialIObyteShift 0027                __size_of_dac_write 0048  
       __end_of_fifo_alinharPrint 2A94                    __pcstackCOMRAM 0027  
           __size_of_EEPROM_write 002E          __size_of_resetContCiclos 000A  
                    __pidataBANK0 395A                      __pidataBANK1 34A6  
                   __end_of_delay 3B4E                     __end_of_setT1 3CD4  
               fifo_add_control@c 0036              __size_of_ler_atuador 00A0  
             ??_serialIObyteShift 0027            __end_of_buscar_receita 38A6  
              __size_of_getCiclos 001E           _manipula_atuadores_init 3662  
       __size_of_fifo_add_control 0048                 initSerialIO@ptrIn 0027  
              __size_of_fifo_adrs 000A                           I2C_tx@b 0027  
                      ??_I2C_init 0038      __end_of_fifo_indicePrint_dec 3CE8  
                      ??_I2C_stop 0027      __end_of_fifo_indicePrint_inc 3448  
                         ??_delay 0029                           ??_setT1 0031  
              teclado_borda@tecla 002D                           ?_I2C_tx 0027  
           ?_salva_atuadores_init 0027                        __pbssBANK0 00F5  
                      __pbssBANK1 015A             __size_of_dispLCD_init 0036  
       __end_of_serialIObyteShift 355A            __end_of_salvar_receita 3864  
                      _decodifica 2588                     ?_teclado_init 0027  
                   ?_teclado_scan 0027                __size_of_intt1_1ms 0030  
                    _EEPROM_write 3AF2                  teclado_borda@aux 002C  
           __end_of_dignum_apagar 3AF2                 __end_of_Wifi_mode 31BE  
                ?_addIndicePassos 0027                    main@contPassos 0074  
                         ?___lmul 0027                           ?___wmul 0027  
                 _fifo_disponivel 3C7E                    ___lmul@product 002F  
         serialIObyteShift@dataIn 0027                   ?_buscar_receita 002D  
                      _dignum_tam 38E4                __size_of_set_passo 00E2  
                         _MCP4725 3C0E                         ?_dac_init 0027  
                      _fifo_print 1E4C                __size_of_printExec 018A  
                         _LCDbits 000F8A                      _dispLCD_init 3A00  
              __size_of_wifi_init 0030                __size_of_wifi_send 00A6  
                ?_I2C_ack_receive 0027                           i2u81_40 3A84  
                         i2u81_41 3A80                 __end_of_dac_write 3820  
                       ?_codifica 0027                         ?_fifo_add 0027  
                       ?_fifo_tam 0027                   __size_of_I2C_tx 0016  
            __size_of_salvar_dado 0022                    ??_teclado_init 0027  
                  ??_teclado_scan 0027                   ?_salvar_receita 002D  
                   ?_serialIOload 0027                     ?_serialIOscan 0027  
                      _initEUSART 32B0                 __end_of_getCiclos 3C4E  
                       ?_txEUSART 0027              __end_of_initSerialIO 3AC4  
                     posAtual@ind 0028                  EEPROM_write@addr 0028  
                EEPROM_write@data 0027                           __Hparam 0000  
               __end_of_fifo_adrs 3DBE                         ?_posAtual 0027  
                         __Lparam 0000                         _I2C_start 3CFC  
      __size_of_fifo_alinharPrint 00E8                           _Wifi_ip 000000  
               ??_deletar_receita 002B                           ___aldiv 26C8  
                         ___awdiv 2B76                   __size_of___lmul 006A  
                         ___awmod 2C3A                        _ler_sensor 28C4  
                         ___lldiv 2E38                   __size_of___wmul 0026  
         __size_of_init_atuadores 000A                           ___lwdiv 323C  
                       ?_statusT1 0027            deletar_receita@receita 002D  
       ??_manipula_atuadores_init 002A                           __pcinit 30AE  
                         __ramtop 0800                           _dispLCD 3748  
            __size_of_timer1_init 001A                           __ptext0 0012  
                         __ptext1 3A36                           __ptext2 32B0  
                         __ptext3 3C4E                           __ptext4 3D8C  
                         __ptext5 39CA                           __ptext6 2CEA  
                         __ptext7 3D38                           __ptext8 2A94  
                         __ptext9 3CC0                     teclado_scan@c 002B  
                   teclado_scan@l 002A                        ??_dac_init 002A  
               __end_of_intt1_1ms 3A96                 ??_resetContCiclos 0027  
                         _atuador 0013           __size_of_fifo_add_ciclo 000A  
                       _T1CONbits 000FCD                      __size_of_irq 3B72  
         __size_of_fifo_add_tempo 0058                  ___awmod@dividend 0027  
               salvar_receita@aux 002F                  ___aldiv@dividend 0033  
                 _fifo_print$1053 0031                     _receita_livre 000000  
                      ??_codifica 0029            ??_salva_atuadores_init 002A  
                      ??_fifo_add 0036                        ??_fifo_tam 0027  
                         main@aux 0075                           main@num 00B4  
                         main@ptr 009F                    __pintcode_body 3B4E  
            end_of_initialization 312C                    ??_serialIOload 0027  
                  ??_serialIOscan 002A        __size_of_serialIObyteShift 005A  
                     ?_decodifica 0027                     __Lmediumconst 7C2E  
                         int_func 3B4E                    dispLCD_num@col 0032  
                  dispLCD_num@div 003E                    dispLCD_num@lin 003B  
                  dispLCD_num@tam 0035                        ??_txEUSART 0027  
                  dispLCD_num@num 0033                    _dispLCD_lincol 3388  
                   ??_EEPROM_read 0027                 __end_of_set_passo 2B76  
                  dispLCD_str@lin 0030                    dispLCD_str@str 002E  
                      dispLCD@col 002E                   ___lldiv@divisor 002B  
                      dispLCD@lin 0032                        dispLCD@pos 0031  
                      dispLCD@str 002F           __end_of_fifo_disponivel 3C94  
               __end_of_printExec 22BA                   ___lldiv@counter 0033  
                      ??_posAtual 0028                        ?_I2C_start 0027  
               __end_of_wifi_init 3A66                 __end_of_wifi_send 2E38  
                    I2C_init@freq 0034                         _RCSTAbits 000FAB  
            _fifo_indicePrint_dec 3CD4                  ___aldiv@quotient 003D  
            _fifo_indicePrint_inc 33EA                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE            __size_of_teclado_borda 0036  
                ??_txStatusEUSART 0027                fifo_alinharPrint@i 0034  
                      ??_statusT1 002B                     ??_dispLCD_clr 0029  
                   ??_dispLCD_num 0036                     ??_dispLCD_str 0030  
                   ??_alt_atuador 0027                       ?_dignum_tam 002F  
                       _PORTAbits 000F80                  _fifo_add_control 3700  
            fp__formatar_receitas 0000                       ?_fifo_print 0027  
                      fp__dispLCD 0000                     ??_dignum_conc 002F  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94          __size_of_dispLCD_dataReg 004E  
                   ??_fifo_delete 0036                     ??_end_receita 0029  
                   ??_fifo_indice 0027                     ??_fifo_lerPos 0027  
               __size_of_I2C_init 003A                 __size_of_I2C_stop 0014  
                   _teclaAnterior 0011   __end_of_manipula_atuadores_init 36B2  
          __end_of_dispLCD_lincol 33EA                    __end_of_I2C_tx 3CC0  
  manipula_atuadores_init@atuador 002A          __size_of_dispLCD_instReg 00F0  
                      main@ciclos 00B0                       ?_initEUSART 0034  
                       _TXSTAbits 000FAC               dignum_apagar@ptrNum 002E  
                      main@estado 00BB             __end_of_addContCiclos 3DEA  
        __size_of_getIndicePassos 0004             ?_fifo_indicePrint_dec 0027  
           ?_fifo_indicePrint_inc 0027                       wifi_init@br 003C  
             __end_of_EEPROM_read 3D8C                       ?_ler_sensor 0027  
                  __end_of___lmul 3388                    __end_of___wmul 3BC8  
                     _BAUDCONbits 000FB8                     __pidataCOMRAM 3D24  
                  set_passo@passo 002B              __end_of_teclado_init 3D96  
            __end_of_teclado_scan 2D92               __size_of_decodifica 0140  
             start_initialization 30AE               __end_of_dispLCD_clr 3DD0  
                   posAtual@passo 0029               __end_of_dispLCD_num 2434  
             __end_of_dispLCD_str 34A6               __end_of_alt_atuador 3016  
                     __end_of_irq 3B7A                     _teclado_borda 39CA  
                   ??_buscar_dado 0030                          ??_I2C_tx 0027  
           __size_of_initSerialIO 002E                   fifo_add_tempo@t 0036  
                 ?_dispLCD_lincol 0029               __end_of_dignum_conc 37D8  
              initSerialIO@length 002B               __size_of_dignum_tam 003C  
             __end_of_fifo_delete 30AE                initSerialIO@ptrOut 0029  
             __end_of_end_receita 3BEC               __end_of_fifo_indice 3DF6  
             __end_of_fifo_lerPos 3D6E               __size_of_fifo_print 02E4  
                ?_fifo_disponivel 0027                 dispLCD_lincol@col 0029  
               dispLCD_lincol@aux 002D                 dispLCD_lincol@lin 002C  
                     ??_I2C_start 0027                   main@meAtuadores 00AF  
                   ??_ler_atuador 0027                  ??_buscar_receita 002F  
                        ??___lmul 002F                          ??___wmul 002B  
                  _init_atuadores 3DA0            __size_of_getContCiclos 000A  
                     __pdataBANK0 00BD                       __pdataBANK1 0100  
                       _Wifi_mode 313A                         _Wifi_scan 000000  
            __end_of_serialIOload 3DDE              __end_of_serialIOscan 35B2  
                        ?_MCP4725 0041                    _fifo_add_ciclo 3DBE  
                ler_atuador@tecla 0029                      _initSerialIO 3A96  
             __size_of_initEUSART 006E                    _fifo_add_tempo 35B2  
                     __pbssCOMRAM 0001                 __size_of_dac_init 003E  
                   __pcstackBANK0 0060                  ??_salvar_receita 002F  
                  ?_teclado_borda 0027               __size_of_ler_sensor 00E8  
               __size_of_codifica 0154                 __size_of_fifo_add 0058  
                       _dac_write 37D8                 __size_of_fifo_tam 0004  
                 _deletar_receita 3992                 ??_dispLCD_dataReg 0027  
                     _EEPROM_read 3D7E               __end_of_buscar_dado 3BA2  
          ??_fifo_indicePrint_dec 0027            ??_fifo_indicePrint_inc 0027  
               __size_of_txEUSART 0008                  ___lwdiv@dividend 0027  
          __end_of_init_atuadores 3DAA                   _resetContCiclos 3D96  
                       _getCiclos 3C30                 ??_dispLCD_instReg 0027  
                       __pintcode 0008                     __pmediumconst 7C2E  
                        ?___aldiv 0033                          ?___awdiv 0027  
               __size_of_posAtual 0012                          ?___awmod 0027  
                        ?___lldiv 0027                          ?___lwdiv 0027  
                       _fifo_adrs 3DB4                     serialIOscan@i 002D  
                   serialIOscan@j 002C                        ?_Wifi_mode 0027  
          __end_of_fifo_add_ciclo 3DC8                       _dispLCD_clr 3DC8  
                     _dispLCD_num 22BA                       _dispLCD_str 3448  
               ??_getIndicePassos 0027            __end_of_fifo_add_tempo 360A  
                        ?_dispLCD 002E                       _alt_atuador 2F7C  
             __end_of_ler_atuador 2F7C                 __size_of_statusT1 0012  
        __size_of_addIndicePassos 0016                         _ind_print 0058  
                   _rxErrorEUSART 000000                          _I2C_init 3920  
        serialIObyteShift@dataBit 0029                          _I2C_stop 3D10  
          __size_of_dignum_apagar 002E                       _dignum_conc 3790  
        serialIObyteShift@dataOut 0028                         _intt1_1ms 3A66  
                   ??_salvar_dado 002F                  ___lwdiv@quotient 002B  
                   _getContCiclos 3DAA                    __size_of_delay 002E  
                     _fifo_delete 3016                    __size_of_setT1 0014  
                     _end_receita 3BC8                       _fifo_indice 3DF2  
                     _fifo_lerPos 3D5C                        ?_dac_write 002A  
                    ??_decodifica 0029                 teclado_scan@tecla 0029  
                 ___aldiv@divisor 0037                   ___aldiv@counter 003B  
                  ___wmul@product 002B          __size_of_I2C_ack_receive 0010  
        __end_of_fifo_add_control 3748                          _PIE1bits 000F9D  
                        i2u150_40 3B6E                          i2u150_41 3B6A  
                        i2u149_40 3B60                          i2u149_41 3B5C  
                        _PIR1bits 000F9E                   ?_init_atuadores 0027  
                        _SERIALIO 000F80                        ?_getCiclos 0027  
                       _set_passo 2A94             __size_of_teclado_init 000A  
                       main@F3510 0146             __size_of_teclado_scan 00A8  
                       main@F3484 00F6                         main@F3486 00F5  
                  dignum_conc@dig 0031                     ??_timer1_init 0027  
                      ?_fifo_adrs 0027                         _printExec 2130  
                  _printExec$1075 0041                  dispLCD_dataReg@d 0028  
                        _SPBRbits 000FAF                   ?_fifo_add_ciclo 0027  
                       _wifi_init 3A36                         _wifi_send 2D92  
                    ??_dignum_tam 0031                       _cont_ciclos 000D  
                 ?_fifo_add_tempo 0027                         main@i_643 00A3  
                       main@i_661 00A5                         main@i_664 00A7  
                       main@i_649 009C                         main@i_694 00A9  
                       main@i_697 00AB                 ___wmul@multiplier 0027  
                       main@j_644 00A4                         main@j_662 00A6  
                       main@j_665 00A8                         main@j_695 00AA  
              initEUSART@baudRate 0034                         main@j_698 00AC  
             fifo_print@completar 0033                  deletar_receita@i 002E  
                    ??_fifo_print 002F                __end_of_decodifica 26C8  
                __size_of_MCP4725 0022                         main@botao 00B3  
                     _lenSerialIO 0012                   ??_teclado_borda 002C  
                       main@tecla 00BC           __end_of_deletar_receita 39CA  
                      ?_intt1_1ms 0027                    ?_getContCiclos 0027  
               _resetIndicePassos 3DDE                 Wifi_cipsend@F3294 0128  
               Wifi_cipsend@F3297 015A                 ___lmul@multiplier 0027  
                       copy_data0 30C2                         copy_data1 30E2  
                       copy_data2 3102                       _buscar_dado 3B7A  
   __size_of_salva_atuadores_init 007E                ?_resetIndicePassos 0027  
         __end_of_resetContCiclos 3DA0                      ??_initEUSART 0038  
                    _teclado_init 3D8C               __end_of_salvar_dado 3C0E  
                    _teclado_scan 2CEA                        _EECON1bits 000FA6  
              __end_of_dignum_tam 3920               ??_resetIndicePassos 0027  
                        __Hrparam 0000                     _dignum_apagar 3AC4  
                   ler_sensor@ptr 0027                __end_of_fifo_print 2130  
                        __Lrparam 0000          ?_manipula_atuadores_init 0027  
                      ?_set_passo 0027             __size_of_serialIOload 0006  
           __size_of_serialIOscan 0058                      getCiclos@aux 0029  
                dispLCD_instReg@i 0028                       _ler_atuador 2EDC  
                    ??_ler_sensor 0029                         txEUSART@d 0027  
                      ?_printExec 0040                  __size_of___aldiv 010C  
                     ??_Wifi_mode 002A                  __size_of___awdiv 00C4  
                __size_of___awmod 00B0                  __size_of___lldiv 00A4  
                      ?_wifi_init 003C                        ?_wifi_send 0028  
                __size_of___lwdiv 0074                   fp__dispLCD_init 0000  
              buscar_receita@data 002D                buscar_receita@adrs 0031  
                dispLCD_num@sinal 003D             fifo_alinharPrint@cont 0033  
     manipula_atuadores_init@mask 002C                          _dac_init 38A6  
                __size_of_dispLCD 0048               __end_of_timer1_init 3C68  
                  _rxStatusEUSART 000000                __end_of_initEUSART 331E  
       __end_of_resetIndicePassos 3DE4                       decodifica@d 0027  
                        _main$653 0086                          _main$680 0092  
                        _main$672 0088                          _main$681 0094  
                        _main$682 0096                          _main$683 0098  
                        _main$676 008A                          _main$685 009A  
                        _main$677 008C                          _main$678 008E  
                        _main$679 0090                  ??_dispLCD_lincol 002A  
                 ___lwdiv@divisor 0029                   ___lwdiv@counter 002D  
                        _codifica 2434                          __ptext10 355A  
                        __ptext11 3DD8                          __ptext20 3D4A  
                        __ptext12 3500                          __ptext21 3DEA  
                        __ptext13 3820                          __ptext30 3C68  
                        __ptext22 3D5C                          __ptext14 3BEC  
                        __ptext31 3DEE                          __ptext23 22BA  
                        __ptext15 31BE                          __ptext40 2F7C  
                        __ptext32 1E4C                          __ptext24 3662  
                        __ptext16 2EDC                          __ptext41 3DB4  
                        __ptext33 2C3A                          __ptext25 28C4  
                        __ptext17 3DDE                          __ptext50 3448  
                        __ptext42 35B2                          __ptext34 33EA  
                        __ptext26 3DA0                          __ptext18 3D96  
                        __ptext51 3A00                          __ptext43 3700  
                        __ptext35 3CD4                          __ptext27 3A96  
                        __ptext19 2130                          __ptext60 323C  
                        __ptext52 3DC8                          __ptext44 3DBE  
                        __ptext36 3DF2                          __ptext28 3DAA  
                        __ptext61 3992                          __ptext53 3748  
                        __ptext45 360A                          __ptext37 3C7E  
                        __ptext29 3C30                          __ptext70 26C8  
                        __ptext62 3AF2                          __ptext54 3388  
                        __ptext46 29AC                          __ptext38 3016  
                        __ptext71 313A                          __ptext63 3864  
                        __ptext55 27D4                          __ptext47 38E4  
                        __ptext39 2588                          __ptext80 3CFC  
                        __ptext72 2D92                          __ptext64 3B7A  
                        __ptext56 36B2                          __ptext48 2B76  
                        __ptext81 3D6E                          __ptext73 3CE8  
                        __ptext65 3BC8                          __ptext57 3790  
                        __ptext49 2434                          __ptext82 3D10  
                        __ptext74 3DD0                          __ptext66 3D7E  
                        __ptext58 3BA2                          __ptext83 3920  
                        __ptext75 3C0E                          __ptext67 3C94  
                        __ptext59 3AC4                          __ptext84 2E38  
                        __ptext76 37D8                          __ptext68 3DE4  
                        __ptext77 38A6                          __ptext69 331E  
                        __ptext86 3A66                          __ptext78 3B20  
                        __ptext87 0000                          __ptext79 3CAA  
                        _fifo_add 360A                 ??_addIndicePassos 0027  
                        _fifo_tam 3DEE                          _ind_fila 0059  
                     ??_dac_write 002C                __end_of_ler_sensor 29AC  
                        _rxEUSART 000000                     ?_EEPROM_write 0027  
                    _serialIOload 3DD8                      _serialIOscan 355A  
              _rxResetErrorEUSART 000000                     __size_of_main 1E3A  
                        _txEUSART 3DD0                salvar_receita@data 002D  
              salvar_receita@adrs 0031                    ?_dignum_apagar 002E  
                        _posAtual 3D4A                      dispLCD_str@c 0031  
                     ??_getCiclos 0029                 ??_I2C_ack_receive 0027  
                        int$flags 005A                       ??_fifo_adrs 0029  
              fifo_print@indPrint 0034                     fifo_add@passo 0036  
                        _statusT1 3D38                       MCP4725@Vout 0041  
                   dignum_tam@tam 0031                     dignum_tam@num 002F  
                        main@lema 0060                      _Wifi_cipsend 000000  
                    _Wifi_connect 000000                      set_passo@ptr 0027  
  salva_atuadores_init@condi_init 002A                   ??_getContCiclos 0029  
                      _INTCONbits 000FF2                 Wifi_connect@F3284 0100  
                   ?_dispLCD_init 0027            __size_of_addContCiclos 0006  
                    codifica@dado 0027                   _dispLCD_dataReg 36B2  
                    codifica@tipo 002B                       ??_intt1_1ms 0027  
                ?_deletar_receita 0027           __size_of_txStatusEUSART 0014  
               fp__txStatusEUSART 0000                formatar_receitas@i 0029  
                 buscar_dado@data 002E                   buscar_dado@adrs 0032  
                     _salvar_dado 3BEC                    fp__dispLCD_clr 0000  
                  fp__dispLCD_num 0000                    fp__dispLCD_str 0000  
               buscar_receita@aux 002F                   dispLCD_num@size 003C  
            fifo_alinharPrint@aux 0035        manipula_atuadores_init@aux 002B  
                 _dispLCD_instReg 27D4                          intlevel2 0000  
                  ??_EEPROM_write 0028                      fp__Wifi_mode 0000  
                ?_resetContCiclos 0027                  ___lldiv@dividend 0027  
                    ?_EEPROM_read 0027                   _getIndicePassos 3DEA  
               dignum_conc@ptrNum 002D                       ??_set_passo 0029  
               fifo_print@comando 0037                       ??_printExec 0041  
        salva_atuadores_init@F108 0005                       _timer1_init 3C4E  
                     ??_wifi_init 0040                      _ptrSerialOut 0009  
                     ??_wifi_send 002A                      ?_dispLCD_clr 0027  
                    ?_dispLCD_num 0032                      ?_dispLCD_str 002E  
        __size_of_fifo_disponivel 0016                      ?_alt_atuador 0027  
        salva_atuadores_init@dado 0030                    buscar_dado@col 002D  
                  buscar_dado@aux 0030              fifo_add_ciclo@ciclos 0027  
        salva_atuadores_init@mask 0031                    ??_dispLCD_init 002A  
                ___lldiv@quotient 002F        __size_of_resetIndicePassos 0006  
                    ___aldiv@sign 003C                      ?_dignum_conc 002D  
                     _SSPCON1bits 000FC6                      end_receita@x 0027  
                     _SSPCON2bits 000FC5                  fifo_print@atraso 0036  
                    ?_fifo_delete 0027                       _ptrSerialIn 000B  
                    fifo_lerPos@i 0027                      ?_end_receita 0027  
                    _wifi_receive 000000                      ?_fifo_indice 0027  
                    ?_fifo_lerPos 0027                   buscar_receita@i 0032  
                ??_init_atuadores 0027                   ??_dignum_apagar 0030  
               ?_fifo_add_control 0027                     _addContCiclos 3DE4  
                ??_fifo_add_ciclo 0029                       fifo_print@i 0035  
                   fp__initEUSART 0000  
