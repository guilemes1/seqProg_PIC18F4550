

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Nov 15 14:04:02 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   102                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   103  0000                     
   104                           ; Version 2.20
   105                           ; Generated 12/02/2020 GMT
   106                           ; 
   107                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4550 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     
   139 ;; Function _receita_livre is unused but had its address taken
   140  0000                     
   141                           	psect	idataCOMRAM
   142  003A66                     __pidataCOMRAM:
   143                           	callstack 0
   144                           
   145                           ;initializer for _teclas
   146  003A66  31                 	db	49
   147  003A67  32                 	db	50
   148  003A68  33                 	db	51
   149  003A69  41                 	db	65
   150  003A6A  34                 	db	52
   151  003A6B  35                 	db	53
   152  003A6C  36                 	db	54
   153  003A6D  42                 	db	66
   154  003A6E  37                 	db	55
   155  003A6F  38                 	db	56
   156  003A70  39                 	db	57
   157  003A71  43                 	db	67
   158  003A72  2A                 	db	42
   159  003A73  30                 	db	48
   160  003A74  23                 	db	35
   161  003A75  44                 	db	68
   162                           
   163                           ;initializer for _indice_passos
   164  003A76  02                 	db	2
   165                           
   166                           ;initializer for _ind_print
   167  003A77  02                 	db	2
   168                           
   169                           ;initializer for _ind_fila
   170  003A78  02                 	db	2
   171                           
   172                           	psect	idataBANK0
   173  0038A8                     __pidataBANK0:
   174                           	callstack 0
   175                           
   176                           ;initializer for main@F3405
   177  0038A8  4D                 	db	77
   178  0038A9  75                 	db	117
   179  0038AA  6E                 	db	110
   180  0038AB  64                 	db	100
   181  0038AC  6F                 	db	111
   182  0038AD  20                 	db	32
   183  0038AE  61                 	db	97
   184  0038AF  6F                 	db	111
   185  0038B0  20                 	db	32
   186  0038B1  73                 	db	115
   187  0038B2  65                 	db	101
   188  0038B3  75                 	db	117
   189  0038B4  20                 	db	32
   190  0038B5  63                 	db	99
   191  0038B6  6F                 	db	111
   192  0038B7  6D                 	db	109
   193  0038B8  61                 	db	97
   194  0038B9  6E                 	db	110
   195  0038BA  64                 	db	100
   196  0038BB  6F                 	db	111
   197                           
   198                           ;initializer for _EEPROM
   199  0038BC  B6                 	db	low _salvar_receita
   200  0038BD  35                 	db	high _salvar_receita
   201  0038BE  FA                 	db	low _buscar_receita
   202  0038BF  35                 	db	high _buscar_receita
   203  0038C0  F0                 	db	low _deletar_receita
   204  0038C1  36                 	db	high _deletar_receita
   205  0038C2  00                 	db	0
   206  0038C3  00                 	db	0
   207  0038C4  BE                 	db	low _formatar_receitas
   208  0038C5  39                 	db	high _formatar_receitas
   209                           
   210                           ;initializer for _IHM
   211  0038C6  5E                 	db	low _dispLCD_init
   212  0038C7  37                 	db	high _dispLCD_init
   213  0038C8  38                 	db	low _dispLCD_str
   214  0038C9  32                 	db	high _dispLCD_str
   215  0038CA  DE                 	db	low _dispLCD
   216  0038CB  34                 	db	high _dispLCD
   217  0038CC  6E                 	db	low _dispLCD_num
   218  0038CD  22                 	db	high _dispLCD_num
   219  0038CE  0A                 	db	low _dispLCD_clr
   220  0038CF  3B                 	db	high _dispLCD_clr
   221  0000                     _T1CONbits	set	4045
   222  0000                     _TMR1L	set	4046
   223  0000                     _TMR1H	set	4047
   224  0000                     _TRISD	set	3989
   225  0000                     _PORTD	set	3971
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON2bits	set	4037
   228  0000                     _SSPSTATbits	set	4039
   229  0000                     _SSPADD	set	4040
   230  0000                     _SSPCON1bits	set	4038
   231  0000                     _TRISAbits	set	3986
   232  0000                     _PORTAbits	set	3968
   233  0000                     _EECON2	set	4007
   234  0000                     _EEDATA	set	4008
   235  0000                     _EECON1bits	set	4006
   236  0000                     _EEADR	set	4009
   237  0000                     _TRISBbits	set	3987
   238  0000                     _ADCON1	set	4033
   239  0000                     _PIE1bits	set	3997
   240  0000                     _PIR1bits	set	3998
   241  0000                     _INTCONbits	set	4082
   242                           
   243                           	psect	mediumconst
   244  007D20                     __pmediumconst:
   245                           	callstack 0
   246  007D20  00                 	db	0
   247  007D21                     STR_4:
   248  007D21  31                 	db	49	;'1'
   249  007D22  3A                 	db	58	;':'
   250  007D23  20                 	db	32
   251  007D24  49                 	db	73	;'I'
   252  007D25  4E                 	db	78	;'N'
   253  007D26  53                 	db	83	;'S'
   254  007D27  45                 	db	69	;'E'
   255  007D28  52                 	db	82	;'R'
   256  007D29  49                 	db	73	;'I'
   257  007D2A  52                 	db	82	;'R'
   258  007D2B  20                 	db	32
   259  007D2C  53                 	db	83	;'S'
   260  007D2D  45                 	db	69	;'E'
   261  007D2E  51                 	db	81	;'Q'
   262  007D2F  55                 	db	85	;'U'
   263  007D30  45                 	db	69	;'E'
   264  007D31  4E                 	db	78	;'N'
   265  007D32  43                 	db	67	;'C'
   266  007D33  49                 	db	73	;'I'
   267  007D34  41                 	db	65	;'A'
   268  007D35  0A                 	db	10
   269  007D36  32                 	db	50	;'2'
   270  007D37  3A                 	db	58	;':'
   271  007D38  20                 	db	32
   272  007D39  42                 	db	66	;'B'
   273  007D3A  55                 	db	85	;'U'
   274  007D3B  53                 	db	83	;'S'
   275  007D3C  43                 	db	67	;'C'
   276  007D3D  41                 	db	65	;'A'
   277  007D3E  52                 	db	82	;'R'
   278  007D3F  20                 	db	32
   279  007D40  53                 	db	83	;'S'
   280  007D41  45                 	db	69	;'E'
   281  007D42  51                 	db	81	;'Q'
   282  007D43  55                 	db	85	;'U'
   283  007D44  45                 	db	69	;'E'
   284  007D45  4E                 	db	78	;'N'
   285  007D46  43                 	db	67	;'C'
   286  007D47  49                 	db	73	;'I'
   287  007D48  41                 	db	65	;'A'
   288  007D49  0A                 	db	10
   289  007D4A  33                 	db	51	;'3'
   290  007D4B  3A                 	db	58	;':'
   291  007D4C  20                 	db	32
   292  007D4D  52                 	db	82	;'R'
   293  007D4E  45                 	db	69	;'E'
   294  007D4F  50                 	db	80	;'P'
   295  007D50  45                 	db	69	;'E'
   296  007D51  54                 	db	84	;'T'
   297  007D52  49                 	db	73	;'I'
   298  007D53  52                 	db	82	;'R'
   299  007D54  20                 	db	32
   300  007D55  55                 	db	85	;'U'
   301  007D56  4C                 	db	76	;'L'
   302  007D57  54                 	db	84	;'T'
   303  007D58  2E                 	db	46
   304  007D59  20                 	db	32
   305  007D5A  53                 	db	83	;'S'
   306  007D5B  45                 	db	69	;'E'
   307  007D5C  51                 	db	81	;'Q'
   308  007D5D  55                 	db	85	;'U'
   309  007D5E  0A                 	db	10
   310  007D5F  34                 	db	52	;'4'
   311  007D60  3A                 	db	58	;':'
   312  007D61  20                 	db	32
   313  007D62  43                 	db	67	;'C'
   314  007D63  4F                 	db	79	;'O'
   315  007D64  4E                 	db	78	;'N'
   316  007D65  46                 	db	70	;'F'
   317  007D66  49                 	db	73	;'I'
   318  007D67  47                 	db	71	;'G'
   319  007D68  55                 	db	85	;'U'
   320  007D69  52                 	db	82	;'R'
   321  007D6A  41                 	db	65	;'A'
   322  007D6B  43                 	db	67	;'C'
   323  007D6C  4F                 	db	79	;'O'
   324  007D6D  45                 	db	69	;'E'
   325  007D6E  53                 	db	83	;'S'
   326  007D6F  20                 	db	32
   327  007D70  20                 	db	32
   328  007D71  20                 	db	32
   329  007D72  20                 	db	32
   330  007D73  00                 	db	0
   331  007D74                     STR_15:
   332  007D74  20                 	db	32
   333  007D75  45                 	db	69	;'E'
   334  007D76  53                 	db	83	;'S'
   335  007D77  43                 	db	67	;'C'
   336  007D78  4F                 	db	79	;'O'
   337  007D79  4C                 	db	76	;'L'
   338  007D7A  48                 	db	72	;'H'
   339  007D7B  41                 	db	65	;'A'
   340  007D7C  20                 	db	32
   341  007D7D  41                 	db	65	;'A'
   342  007D7E  20                 	db	32
   343  007D7F  4D                 	db	77	;'M'
   344  007D80  45                 	db	69	;'E'
   345  007D81  4D                 	db	77	;'M'
   346  007D82  4F                 	db	79	;'O'
   347  007D83  52                 	db	82	;'R'
   348  007D84  49                 	db	73	;'I'
   349  007D85  41                 	db	65	;'A'
   350  007D86  20                 	db	32
   351  007D87  0A                 	db	10
   352  007D88  51                 	db	81	;'Q'
   353  007D89  55                 	db	85	;'U'
   354  007D8A  45                 	db	69	;'E'
   355  007D8B  20                 	db	32
   356  007D8C  44                 	db	68	;'D'
   357  007D8D  45                 	db	69	;'E'
   358  007D8E  53                 	db	83	;'S'
   359  007D8F  45                 	db	69	;'E'
   360  007D90  4A                 	db	74	;'J'
   361  007D91  41                 	db	65	;'A'
   362  007D92  20                 	db	32
   363  007D93  45                 	db	69	;'E'
   364  007D94  58                 	db	88	;'X'
   365  007D95  45                 	db	69	;'E'
   366  007D96  43                 	db	67	;'C'
   367  007D97  55                 	db	85	;'U'
   368  007D98  54                 	db	84	;'T'
   369  007D99  41                 	db	65	;'A'
   370  007D9A  52                 	db	82	;'R'
   371  007D9B  0A                 	db	10
   372  007D9C  20                 	db	32
   373  007D9D  30                 	db	48	;'0'
   374  007D9E  20                 	db	32
   375  007D9F  20                 	db	32
   376  007DA0  20                 	db	32
   377  007DA1  31                 	db	49	;'1'
   378  007DA2  20                 	db	32
   379  007DA3  20                 	db	32
   380  007DA4  20                 	db	32
   381  007DA5  32                 	db	50	;'2'
   382  007DA6  20                 	db	32
   383  007DA7  20                 	db	32
   384  007DA8  20                 	db	32
   385  007DA9  33                 	db	51	;'3'
   386  007DAA  20                 	db	32
   387  007DAB  20                 	db	32
   388  007DAC  20                 	db	32
   389  007DAD  34                 	db	52	;'4'
   390  007DAE  20                 	db	32
   391  007DAF  0A                 	db	10
   392  007DB0  20                 	db	32
   393  007DB1  35                 	db	53	;'5'
   394  007DB2  20                 	db	32
   395  007DB3  20                 	db	32
   396  007DB4  20                 	db	32
   397  007DB5  36                 	db	54	;'6'
   398  007DB6  20                 	db	32
   399  007DB7  20                 	db	32
   400  007DB8  20                 	db	32
   401  007DB9  37                 	db	55	;'7'
   402  007DBA  20                 	db	32
   403  007DBB  20                 	db	32
   404  007DBC  20                 	db	32
   405  007DBD  38                 	db	56	;'8'
   406  007DBE  20                 	db	32
   407  007DBF  20                 	db	32
   408  007DC0  20                 	db	32
   409  007DC1  39                 	db	57	;'9'
   410  007DC2  20                 	db	32
   411  007DC3  0A                 	db	10
   412  007DC4  00                 	db	0
   413  007DC5                     STR_27:
   414  007DC5  20                 	db	32
   415  007DC6  45                 	db	69	;'E'
   416  007DC7  53                 	db	83	;'S'
   417  007DC8  43                 	db	67	;'C'
   418  007DC9  4F                 	db	79	;'O'
   419  007DCA  4C                 	db	76	;'L'
   420  007DCB  48                 	db	72	;'H'
   421  007DCC  41                 	db	65	;'A'
   422  007DCD  20                 	db	32
   423  007DCE  41                 	db	65	;'A'
   424  007DCF  20                 	db	32
   425  007DD0  4D                 	db	77	;'M'
   426  007DD1  45                 	db	69	;'E'
   427  007DD2  4D                 	db	77	;'M'
   428  007DD3  4F                 	db	79	;'O'
   429  007DD4  52                 	db	82	;'R'
   430  007DD5  49                 	db	73	;'I'
   431  007DD6  41                 	db	65	;'A'
   432  007DD7  0A                 	db	10
   433  007DD8  20                 	db	32
   434  007DD9  51                 	db	81	;'Q'
   435  007DDA  55                 	db	85	;'U'
   436  007DDB  45                 	db	69	;'E'
   437  007DDC  20                 	db	32
   438  007DDD  44                 	db	68	;'D'
   439  007DDE  45                 	db	69	;'E'
   440  007DDF  53                 	db	83	;'S'
   441  007DE0  45                 	db	69	;'E'
   442  007DE1  4A                 	db	74	;'J'
   443  007DE2  41                 	db	65	;'A'
   444  007DE3  20                 	db	32
   445  007DE4  53                 	db	83	;'S'
   446  007DE5  41                 	db	65	;'A'
   447  007DE6  4C                 	db	76	;'L'
   448  007DE7  56                 	db	86	;'V'
   449  007DE8  41                 	db	65	;'A'
   450  007DE9  52                 	db	82	;'R'
   451  007DEA  0A                 	db	10
   452  007DEB  20                 	db	32
   453  007DEC  30                 	db	48	;'0'
   454  007DED  20                 	db	32
   455  007DEE  20                 	db	32
   456  007DEF  20                 	db	32
   457  007DF0  31                 	db	49	;'1'
   458  007DF1  20                 	db	32
   459  007DF2  20                 	db	32
   460  007DF3  20                 	db	32
   461  007DF4  32                 	db	50	;'2'
   462  007DF5  20                 	db	32
   463  007DF6  20                 	db	32
   464  007DF7  20                 	db	32
   465  007DF8  33                 	db	51	;'3'
   466  007DF9  20                 	db	32
   467  007DFA  20                 	db	32
   468  007DFB  20                 	db	32
   469  007DFC  34                 	db	52	;'4'
   470  007DFD  0A                 	db	10
   471  007DFE  20                 	db	32
   472  007DFF  35                 	db	53	;'5'
   473  007E00  20                 	db	32
   474  007E01  20                 	db	32
   475  007E02  20                 	db	32
   476  007E03  36                 	db	54	;'6'
   477  007E04  20                 	db	32
   478  007E05  20                 	db	32
   479  007E06  20                 	db	32
   480  007E07  37                 	db	55	;'7'
   481  007E08  20                 	db	32
   482  007E09  20                 	db	32
   483  007E0A  20                 	db	32
   484  007E0B  38                 	db	56	;'8'
   485  007E0C  20                 	db	32
   486  007E0D  20                 	db	32
   487  007E0E  20                 	db	32
   488  007E0F  39                 	db	57	;'9'
   489  007E10  20                 	db	32
   490  007E11  20                 	db	32
   491  007E12  00                 	db	0
   492  007E13                     STR_26:
   493  007E13  20                 	db	32
   494  007E14  20                 	db	32
   495  007E15  20                 	db	32
   496  007E16  20                 	db	32
   497  007E17  44                 	db	68	;'D'
   498  007E18  45                 	db	69	;'E'
   499  007E19  53                 	db	83	;'S'
   500  007E1A  45                 	db	69	;'E'
   501  007E1B  4A                 	db	74	;'J'
   502  007E1C  41                 	db	65	;'A'
   503  007E1D  20                 	db	32
   504  007E1E  53                 	db	83	;'S'
   505  007E1F  41                 	db	65	;'A'
   506  007E20  4C                 	db	76	;'L'
   507  007E21  56                 	db	86	;'V'
   508  007E22  41                 	db	65	;'A'
   509  007E23  52                 	db	82	;'R'
   510  007E24  20                 	db	32
   511  007E25  20                 	db	32
   512  007E26  20                 	db	32
   513  007E27  0A                 	db	10
   514  007E28  20                 	db	32
   515  007E29  20                 	db	32
   516  007E2A  20                 	db	32
   517  007E2B  20                 	db	32
   518  007E2C  20                 	db	32
   519  007E2D  53                 	db	83	;'S'
   520  007E2E  45                 	db	69	;'E'
   521  007E2F  51                 	db	81	;'Q'
   522  007E30  55                 	db	85	;'U'
   523  007E31  45                 	db	69	;'E'
   524  007E32  4E                 	db	78	;'N'
   525  007E33  43                 	db	67	;'C'
   526  007E34  49                 	db	73	;'I'
   527  007E35  41                 	db	65	;'A'
   528  007E36  20                 	db	32
   529  007E37  3F                 	db	63	;'?'
   530  007E38  20                 	db	32
   531  007E39  20                 	db	32
   532  007E3A  0A                 	db	10
   533  007E3B  0A                 	db	10
   534  007E3C  23                 	db	35
   535  007E3D  20                 	db	32
   536  007E3E  2D                 	db	45
   537  007E3F  20                 	db	32
   538  007E40  53                 	db	83	;'S'
   539  007E41  49                 	db	73	;'I'
   540  007E42  4D                 	db	77	;'M'
   541  007E43  20                 	db	32
   542  007E44  20                 	db	32
   543  007E45  20                 	db	32
   544  007E46  20                 	db	32
   545  007E47  20                 	db	32
   546  007E48  20                 	db	32
   547  007E49  2A                 	db	42
   548  007E4A  20                 	db	32
   549  007E4B  2D                 	db	45
   550  007E4C  20                 	db	32
   551  007E4D  4E                 	db	78	;'N'
   552  007E4E  41                 	db	65	;'A'
   553  007E4F  4F                 	db	79	;'O'
   554  007E50  00                 	db	0
   555  007E51                     STR_24:
   556  007E51  43                 	db	67	;'C'
   557  007E52  69                 	db	105	;'i'
   558  007E53  63                 	db	99	;'c'
   559  007E54  6C                 	db	108	;'l'
   560  007E55  6F                 	db	111	;'o'
   561  007E56  73                 	db	115	;'s'
   562  007E57  3A                 	db	58	;':'
   563  007E58  20                 	db	32
   564  007E59  20                 	db	32
   565  007E5A  20                 	db	32
   566  007E5B  20                 	db	32
   567  007E5C  20                 	db	32
   568  007E5D  20                 	db	32
   569  007E5E  20                 	db	32
   570  007E5F  20                 	db	32
   571  007E60  20                 	db	32
   572  007E61  20                 	db	32
   573  007E62  20                 	db	32
   574  007E63  20                 	db	32
   575  007E64  20                 	db	32
   576  007E65  00                 	db	0
   577  007E66                     STR_22:
   578  007E66  3C                 	db	60	;'<'
   579  007E67  20                 	db	32
   580  007E68  20                 	db	32
   581  007E69  2F                 	db	47
   582  007E6A  20                 	db	32
   583  007E6B  20                 	db	32
   584  007E6C  3E                 	db	62	;'>'
   585  007E6D  20                 	db	32
   586  007E6E  63                 	db	99	;'c'
   587  007E6F  3A                 	db	58	;':'
   588  007E70  20                 	db	32
   589  007E71  20                 	db	32
   590  007E72  20                 	db	32
   591  007E73  20                 	db	32
   592  007E74  20                 	db	32
   593  007E75  20                 	db	32
   594  007E76  20                 	db	32
   595  007E77  20                 	db	32
   596  007E78  20                 	db	32
   597  007E79  20                 	db	32
   598  007E7A  00                 	db	0
   599  007E7B                     STR_31:
   600  007E7B  20                 	db	32
   601  007E7C  20                 	db	32
   602  007E7D  20                 	db	32
   603  007E7E  20                 	db	32
   604  007E7F  20                 	db	32
   605  007E80  20                 	db	32
   606  007E81  20                 	db	32
   607  007E82  20                 	db	32
   608  007E83  53                 	db	83	;'S'
   609  007E84  41                 	db	65	;'A'
   610  007E85  4C                 	db	76	;'L'
   611  007E86  56                 	db	86	;'V'
   612  007E87  41                 	db	65	;'A'
   613  007E88  20                 	db	32
   614  007E89  20                 	db	32
   615  007E8A  20                 	db	32
   616  007E8B  20                 	db	32
   617  007E8C  20                 	db	32
   618  007E8D  20                 	db	32
   619  007E8E  20                 	db	32
   620  007E8F  00                 	db	0
   621  007E90                     STR_3:
   622  007E90  20                 	db	32
   623  007E91  20                 	db	32
   624  007E92  20                 	db	32
   625  007E93  20                 	db	32
   626  007E94  20                 	db	32
   627  007E95  20                 	db	32
   628  007E96  53                 	db	83	;'S'
   629  007E97  45                 	db	69	;'E'
   630  007E98  47                 	db	71	;'G'
   631  007E99  47                 	db	71	;'G'
   632  007E9A  55                 	db	85	;'U'
   633  007E9B  49                 	db	73	;'I'
   634  007E9C  54                 	db	84	;'T'
   635  007E9D  20                 	db	32
   636  007E9E  20                 	db	32
   637  007E9F  20                 	db	32
   638  007EA0  20                 	db	32
   639  007EA1  20                 	db	32
   640  007EA2  20                 	db	32
   641  007EA3  20                 	db	32
   642  007EA4  00                 	db	0
   643  007EA5                     STR_21:
   644  007EA5  20                 	db	32
   645  007EA6  20                 	db	32
   646  007EA7  20                 	db	32
   647  007EA8  20                 	db	32
   648  007EA9  20                 	db	32
   649  007EAA  20                 	db	32
   650  007EAB  20                 	db	32
   651  007EAC  5B                 	db	91	;'['
   652  007EAD  20                 	db	32
   653  007EAE  20                 	db	32
   654  007EAF  20                 	db	32
   655  007EB0  20                 	db	32
   656  007EB1  5D                 	db	93	;']'
   657  007EB2  20                 	db	32
   658  007EB3  20                 	db	32
   659  007EB4  20                 	db	32
   660  007EB5  20                 	db	32
   661  007EB6  20                 	db	32
   662  007EB7  20                 	db	32
   663  007EB8  20                 	db	32
   664  007EB9  00                 	db	0
   665  007EBA                     STR_13:
   666  007EBA  20                 	db	32
   667  007EBB  20                 	db	32
   668  007EBC  20                 	db	32
   669  007EBD  20                 	db	32
   670  007EBE  20                 	db	32
   671  007EBF  20                 	db	32
   672  007EC0  20                 	db	32
   673  007EC1  44                 	db	68	;'D'
   674  007EC2  45                 	db	69	;'E'
   675  007EC3  4C                 	db	76	;'L'
   676  007EC4  45                 	db	69	;'E'
   677  007EC5  54                 	db	84	;'T'
   678  007EC6  45                 	db	69	;'E'
   679  007EC7  44                 	db	68	;'D'
   680  007EC8  20                 	db	32
   681  007EC9  20                 	db	32
   682  007ECA  20                 	db	32
   683  007ECB  20                 	db	32
   684  007ECC  20                 	db	32
   685  007ECD  20                 	db	32
   686  007ECE  00                 	db	0
   687  007ECF                     STR_14:
   688  007ECF  20                 	db	32
   689  007ED0  20                 	db	32
   690  007ED1  20                 	db	32
   691  007ED2  20                 	db	32
   692  007ED3  20                 	db	32
   693  007ED4  20                 	db	32
   694  007ED5  20                 	db	32
   695  007ED6  20                 	db	32
   696  007ED7  4D                 	db	77	;'M'
   697  007ED8  45                 	db	69	;'E'
   698  007ED9  4D                 	db	77	;'M'
   699  007EDA  4F                 	db	79	;'O'
   700  007EDB  52                 	db	82	;'R'
   701  007EDC  59                 	db	89	;'Y'
   702  007EDD  20                 	db	32
   703  007EDE  20                 	db	32
   704  007EDF  20                 	db	32
   705  007EE0  20                 	db	32
   706  007EE1  20                 	db	32
   707  007EE2  20                 	db	32
   708  007EE3  00                 	db	0
   709  007EE4                     STR_9:
   710  007EE4  20                 	db	32
   711  007EE5  20                 	db	32
   712  007EE6  20                 	db	32
   713  007EE7  20                 	db	32
   714  007EE8  20                 	db	32
   715  007EE9  20                 	db	32
   716  007EEA  4D                 	db	77	;'M'
   717  007EEB  45                 	db	69	;'E'
   718  007EEC  4D                 	db	77	;'M'
   719  007EED  4F                 	db	79	;'O'
   720  007EEE  52                 	db	82	;'R'
   721  007EEF  49                 	db	73	;'I'
   722  007EF0  41                 	db	65	;'A'
   723  007EF1  20                 	db	32
   724  007EF2  3F                 	db	63	;'?'
   725  007EF3  20                 	db	32
   726  007EF4  20                 	db	32
   727  007EF5  20                 	db	32
   728  007EF6  20                 	db	32
   729  007EF7  20                 	db	32
   730  007EF8  00                 	db	0
   731  007EF9                     STR_30:
   732  007EF9  20                 	db	32
   733  007EFA  20                 	db	32
   734  007EFB  20                 	db	32
   735  007EFC  20                 	db	32
   736  007EFD  20                 	db	32
   737  007EFE  20                 	db	32
   738  007EFF  53                 	db	83	;'S'
   739  007F00  45                 	db	69	;'E'
   740  007F01  51                 	db	81	;'Q'
   741  007F02  55                 	db	85	;'U'
   742  007F03  45                 	db	69	;'E'
   743  007F04  4E                 	db	78	;'N'
   744  007F05  43                 	db	67	;'C'
   745  007F06  49                 	db	73	;'I'
   746  007F07  41                 	db	65	;'A'
   747  007F08  20                 	db	32
   748  007F09  20                 	db	32
   749  007F0A  20                 	db	32
   750  007F0B  20                 	db	32
   751  007F0C  20                 	db	32
   752  007F0D  00                 	db	0
   753  007F0E                     STR_17:
   754  007F0E  20                 	db	32
   755  007F0F  20                 	db	32
   756  007F10  20                 	db	32
   757  007F11  20                 	db	32
   758  007F12  20                 	db	32
   759  007F13  44                 	db	68	;'D'
   760  007F14  4F                 	db	79	;'O'
   761  007F15  20                 	db	32
   762  007F16  53                 	db	83	;'S'
   763  007F17  49                 	db	73	;'I'
   764  007F18  53                 	db	83	;'S'
   765  007F19  54                 	db	84	;'T'
   766  007F1A  45                 	db	69	;'E'
   767  007F1B  4D                 	db	77	;'M'
   768  007F1C  41                 	db	65	;'A'
   769  007F1D  20                 	db	32
   770  007F1E  20                 	db	32
   771  007F1F  20                 	db	32
   772  007F20  20                 	db	32
   773  007F21  20                 	db	32
   774  007F22  00                 	db	0
   775  007F23                     STR_18:
   776  007F23  20                 	db	32
   777  007F24  20                 	db	32
   778  007F25  20                 	db	32
   779  007F26  41                 	db	65	;'A'
   780  007F27  20                 	db	32
   781  007F28  20                 	db	32
   782  007F29  20                 	db	32
   783  007F2A  42                 	db	66	;'B'
   784  007F2B  20                 	db	32
   785  007F2C  20                 	db	32
   786  007F2D  20                 	db	32
   787  007F2E  43                 	db	67	;'C'
   788  007F2F  20                 	db	32
   789  007F30  20                 	db	32
   790  007F31  20                 	db	32
   791  007F32  44                 	db	68	;'D'
   792  007F33  20                 	db	32
   793  007F34  20                 	db	32
   794  007F35  20                 	db	32
   795  007F36  20                 	db	32
   796  007F37  00                 	db	0
   797  007F38                     STR_8:
   798  007F38  20                 	db	32
   799  007F39  20                 	db	32
   800  007F3A  20                 	db	32
   801  007F3B  44                 	db	68	;'D'
   802  007F3C  45                 	db	69	;'E'
   803  007F3D  4C                 	db	76	;'L'
   804  007F3E  45                 	db	69	;'E'
   805  007F3F  54                 	db	84	;'T'
   806  007F40  41                 	db	65	;'A'
   807  007F41  52                 	db	82	;'R'
   808  007F42  20                 	db	32
   809  007F43  54                 	db	84	;'T'
   810  007F44  4F                 	db	79	;'O'
   811  007F45  44                 	db	68	;'D'
   812  007F46  41                 	db	65	;'A'
   813  007F47  20                 	db	32
   814  007F48  41                 	db	65	;'A'
   815  007F49  20                 	db	32
   816  007F4A  20                 	db	32
   817  007F4B  20                 	db	32
   818  007F4C  00                 	db	0
   819  007F4D                     STR_6:
   820  007F4D  32                 	db	50	;'2'
   821  007F4E  3A                 	db	58	;':'
   822  007F4F  20                 	db	32
   823  007F50  4C                 	db	76	;'L'
   824  007F51  49                 	db	73	;'I'
   825  007F52  4D                 	db	77	;'M'
   826  007F53  50                 	db	80	;'P'
   827  007F54  41                 	db	65	;'A'
   828  007F55  52                 	db	82	;'R'
   829  007F56  20                 	db	32
   830  007F57  4D                 	db	77	;'M'
   831  007F58  45                 	db	69	;'E'
   832  007F59  4D                 	db	77	;'M'
   833  007F5A  4F                 	db	79	;'O'
   834  007F5B  52                 	db	82	;'R'
   835  007F5C  49                 	db	73	;'I'
   836  007F5D  41                 	db	65	;'A'
   837  007F5E  20                 	db	32
   838  007F5F  20                 	db	32
   839  007F60  20                 	db	32
   840  007F61  00                 	db	0
   841  007F62                     STR_16:
   842  007F62  20                 	db	32
   843  007F63  20                 	db	32
   844  007F64  20                 	db	32
   845  007F65  41                 	db	65	;'A'
   846  007F66  4A                 	db	74	;'J'
   847  007F67  55                 	db	85	;'U'
   848  007F68  53                 	db	83	;'S'
   849  007F69  54                 	db	84	;'T'
   850  007F6A  45                 	db	69	;'E'
   851  007F6B  20                 	db	32
   852  007F6C  4F                 	db	79	;'O'
   853  007F6D  20                 	db	32
   854  007F6E  49                 	db	73	;'I'
   855  007F6F  4E                 	db	78	;'N'
   856  007F70  49                 	db	73	;'I'
   857  007F71  43                 	db	67	;'C'
   858  007F72  49                 	db	73	;'I'
   859  007F73  4F                 	db	79	;'O'
   860  007F74  20                 	db	32
   861  007F75  20                 	db	32
   862  007F76  00                 	db	0
   863  007F77                     STR_19:
   864  007F77  20                 	db	32
   865  007F78  20                 	db	32
   866  007F79  49                 	db	73	;'I'
   867  007F7A  4E                 	db	78	;'N'
   868  007F7B  53                 	db	83	;'S'
   869  007F7C  49                 	db	73	;'I'
   870  007F7D  52                 	db	82	;'R'
   871  007F7E  41                 	db	65	;'A'
   872  007F7F  20                 	db	32
   873  007F80  4F                 	db	79	;'O'
   874  007F81  53                 	db	83	;'S'
   875  007F82  20                 	db	32
   876  007F83  50                 	db	80	;'P'
   877  007F84  41                 	db	65	;'A'
   878  007F85  53                 	db	83	;'S'
   879  007F86  53                 	db	83	;'S'
   880  007F87  4F                 	db	79	;'O'
   881  007F88  53                 	db	83	;'S'
   882  007F89  20                 	db	32
   883  007F8A  20                 	db	32
   884  007F8B  00                 	db	0
   885  007F8C                     STR_25:
   886  007F8C  30                 	db	48	;'0'
   887  007F8D  20                 	db	32
   888  007F8E  2D                 	db	45
   889  007F8F  20                 	db	32
   890  007F90  43                 	db	67	;'C'
   891  007F91  69                 	db	105	;'i'
   892  007F92  63                 	db	99	;'c'
   893  007F93  6C                 	db	108	;'l'
   894  007F94  6F                 	db	111	;'o'
   895  007F95  20                 	db	32
   896  007F96  63                 	db	99	;'c'
   897  007F97  6F                 	db	111	;'o'
   898  007F98  6E                 	db	110	;'n'
   899  007F99  74                 	db	116	;'t'
   900  007F9A  69                 	db	105	;'i'
   901  007F9B  6E                 	db	110	;'n'
   902  007F9C  75                 	db	117	;'u'
   903  007F9D  6F                 	db	111	;'o'
   904  007F9E  20                 	db	32
   905  007F9F  20                 	db	32
   906  007FA0  00                 	db	0
   907  007FA1                     STR_7:
   908  007FA1  20                 	db	32
   909  007FA2  43                 	db	67	;'C'
   910  007FA3  45                 	db	69	;'E'
   911  007FA4  52                 	db	82	;'R'
   912  007FA5  54                 	db	84	;'T'
   913  007FA6  45                 	db	69	;'E'
   914  007FA7  5A                 	db	90	;'Z'
   915  007FA8  41                 	db	65	;'A'
   916  007FA9  20                 	db	32
   917  007FAA  51                 	db	81	;'Q'
   918  007FAB  55                 	db	85	;'U'
   919  007FAC  45                 	db	69	;'E'
   920  007FAD  20                 	db	32
   921  007FAE  44                 	db	68	;'D'
   922  007FAF  45                 	db	69	;'E'
   923  007FB0  53                 	db	83	;'S'
   924  007FB1  45                 	db	69	;'E'
   925  007FB2  4A                 	db	74	;'J'
   926  007FB3  41                 	db	65	;'A'
   927  007FB4  20                 	db	32
   928  007FB5  00                 	db	0
   929  007FB6                     STR_32:
   930  007FB6  63                 	db	99	;'c'
   931  007FB7  6F                 	db	111	;'o'
   932  007FB8  6E                 	db	110	;'n'
   933  007FB9  66                 	db	102	;'f'
   934  007FBA  69                 	db	105	;'i'
   935  007FBB  67                 	db	103	;'g'
   936  007FBC  20                 	db	32
   937  007FBD  63                 	db	99	;'c'
   938  007FBE  6F                 	db	111	;'o'
   939  007FBF  6E                 	db	110	;'n'
   940  007FC0  74                 	db	116	;'t'
   941  007FC1  72                 	db	114	;'r'
   942  007FC2  6C                 	db	108	;'l'
   943  007FC3  3A                 	db	58	;':'
   944  007FC4  20                 	db	32
   945  007FC5  20                 	db	32
   946  007FC6  20                 	db	32
   947  007FC7  20                 	db	32
   948  007FC8  20                 	db	32
   949  007FC9  25                 	db	37
   950  007FCA  00                 	db	0
   951  007FCB                     STR_5:
   952  007FCB  31                 	db	49	;'1'
   953  007FCC  3A                 	db	58	;':'
   954  007FCD  20                 	db	32
   955  007FCE  56                 	db	86	;'V'
   956  007FCF  45                 	db	69	;'E'
   957  007FD0  52                 	db	82	;'R'
   958  007FD1  49                 	db	73	;'I'
   959  007FD2  46                 	db	70	;'F'
   960  007FD3  49                 	db	73	;'I'
   961  007FD4  43                 	db	67	;'C'
   962  007FD5  41                 	db	65	;'A'
   963  007FD6  52                 	db	82	;'R'
   964  007FD7  20                 	db	32
   965  007FD8  4D                 	db	77	;'M'
   966  007FD9  45                 	db	69	;'E'
   967  007FDA  4D                 	db	77	;'M'
   968  007FDB  4F                 	db	79	;'O'
   969  007FDC  52                 	db	82	;'R'
   970  007FDD  49                 	db	73	;'I'
   971  007FDE  41                 	db	65	;'A'
   972  007FDF  00                 	db	0
   973  007FE0                     STR_23:
   974  007FE0  63                 	db	99	;'c'
   975  007FE1  6F                 	db	111	;'o'
   976  007FE2  6E                 	db	110	;'n'
   977  007FE3  66                 	db	102	;'f'
   978  007FE4  69                 	db	105	;'i'
   979  007FE5  67                 	db	103	;'g'
   980  007FE6  20                 	db	32
   981  007FE7  74                 	db	116	;'t'
   982  007FE8  65                 	db	101	;'e'
   983  007FE9  6D                 	db	109	;'m'
   984  007FEA  70                 	db	112	;'p'
   985  007FEB  6F                 	db	111	;'o'
   986  007FEC  3A                 	db	58	;':'
   987  007FED  20                 	db	32
   988  007FEE  20                 	db	32
   989  007FEF  20                 	db	32
   990  007FF0  20                 	db	32
   991  007FF1  20                 	db	32
   992  007FF2  20                 	db	32
   993  007FF3  73                 	db	115	;'s'
   994  007FF4  00                 	db	0
   995  007FF5                     STR_20:
   996  007FF5  3C                 	db	60	;'<'
   997  007FF6  20                 	db	32
   998  007FF7  20                 	db	32
   999  007FF8  2F                 	db	47
  1000  007FF9  20                 	db	32
  1001  007FFA  20                 	db	32
  1002  007FFB  3E                 	db	62	;'>'
  1003  007FFC  00                 	db	0
  1004  007FFD                     STR_1:
  1005  007FFD  FF                 	db	-1
  1006  007FFE  00                 	db	0
  1007  007FFF  00                 	db	0	; dummy byte at the end
  1008  0000                     
  1009                           ; #config settings
  1010                           
  1011                           	psect	cinit
  1012  00317A                     __pcinit:
  1013                           	callstack 0
  1014  00317A                     start_initialization:
  1015                           	callstack 0
  1016  00317A                     __initialization:
  1017                           	callstack 0
  1018                           
  1019                           ; Initialize objects allocated to BANK0 (40 bytes)
  1020                           ; load TBLPTR registers with __pidataBANK0
  1021  00317A  0EA8               	movlw	low __pidataBANK0
  1022  00317C  6EF6               	movwf	tblptrl,c
  1023  00317E  0E38               	movlw	high __pidataBANK0
  1024  003180  6EF7               	movwf	tblptrh,c
  1025  003182  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1026  003184  6EF8               	movwf	tblptru,c
  1027  003186  EE00  F0BD         	lfsr	0,__pdataBANK0
  1028  00318A  EE10 F028          	lfsr	1,40
  1029  00318E                     copy_data0:
  1030  00318E  0009               	tblrd		*+
  1031  003190  CFF5 FFEE          	movff	tablat,postinc0
  1032  003194  50E5               	movf	postdec1,w,c
  1033  003196  50E1               	movf	fsr1l,w,c
  1034  003198  E1FA               	bnz	copy_data0
  1035                           
  1036                           ; Initialize objects allocated to COMRAM (19 bytes)
  1037                           ; load TBLPTR registers with __pidataCOMRAM
  1038  00319A  0E66               	movlw	low __pidataCOMRAM
  1039  00319C  6EF6               	movwf	tblptrl,c
  1040  00319E  0E3A               	movlw	high __pidataCOMRAM
  1041  0031A0  6EF7               	movwf	tblptrh,c
  1042  0031A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1043  0031A4  6EF8               	movwf	tblptru,c
  1044  0031A6  EE00  F046         	lfsr	0,__pdataCOMRAM
  1045  0031AA  EE10 F013          	lfsr	1,19
  1046  0031AE                     copy_data1:
  1047  0031AE  0009               	tblrd		*+
  1048  0031B0  CFF5 FFEE          	movff	tablat,postinc0
  1049  0031B4  50E5               	movf	postdec1,w,c
  1050  0031B6  50E1               	movf	fsr1l,w,c
  1051  0031B8  E1FA               	bnz	copy_data1
  1052                           
  1053                           ; Clear objects allocated to BANK0 (2 bytes)
  1054  0031BA  0100               	movlb	0
  1055  0031BC  6BE6               	clrf	(__pbssBANK0+1)& (0+255),b
  1056  0031BE  6BE5               	clrf	__pbssBANK0& (0+255),b
  1057                           
  1058                           ; Clear objects allocated to COMRAM (37 bytes)
  1059  0031C0  EE00  F001         	lfsr	0,__pbssCOMRAM
  1060  0031C4  0E25               	movlw	37
  1061  0031C6                     clear_0:
  1062  0031C6  6AEE               	clrf	postinc0,c
  1063  0031C8  06E8               	decf	wreg,f,c
  1064  0031CA  E1FD               	bnz	clear_0
  1065  0031CC                     end_of_initialization:
  1066                           	callstack 0
  1067  0031CC                     __end_of__initialization:
  1068                           	callstack 0
  1069  0031CC  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1070  0031CE  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1071  0031D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1072  0031D2  6EF8               	movwf	tblptru,c
  1073  0031D4  0100               	movlb	0
  1074  0031D6  EF09  F000         	goto	_main	;jump to C main() function
  1075                           
  1076                           	psect	bssCOMRAM
  1077  000001                     __pbssCOMRAM:
  1078                           	callstack 0
  1079  000001                     _t1cont:
  1080                           	callstack 0
  1081  000001                     	ds	4
  1082  000005                     	ds	4
  1083  000009                     _ptrSerialOut:
  1084                           	callstack 0
  1085  000009                     	ds	2
  1086  00000B                     _ptrSerialIn:
  1087                           	callstack 0
  1088  00000B                     	ds	2
  1089  00000D                     _cont_ciclos:
  1090                           	callstack 0
  1091  00000D                     	ds	2
  1092  00000F                     _ciclos:
  1093                           	callstack 0
  1094  00000F                     	ds	2
  1095  000011                     _teclaAnterior:
  1096                           	callstack 0
  1097  000011                     	ds	1
  1098  000012                     _lenSerialIO:
  1099                           	callstack 0
  1100  000012                     	ds	1
  1101  000013                     _atuador:
  1102                           	callstack 0
  1103  000013                     	ds	1
  1104  000014                     _fila:
  1105                           	callstack 0
  1106  000014                     	ds	18
  1107                           
  1108                           	psect	dataCOMRAM
  1109  000046                     __pdataCOMRAM:
  1110                           	callstack 0
  1111  000046                     _teclas:
  1112                           	callstack 0
  1113  000046                     	ds	16
  1114  000056                     _indice_passos:
  1115                           	callstack 0
  1116  000056                     	ds	1
  1117  000057                     _ind_print:
  1118                           	callstack 0
  1119  000057                     	ds	1
  1120  000058                     _ind_fila:
  1121                           	callstack 0
  1122  000058                     	ds	1
  1123                           
  1124                           	psect	bssBANK0
  1125  0000E5                     __pbssBANK0:
  1126                           	callstack 0
  1127  0000E5                     	ds	1
  1128  0000E6                     	ds	1
  1129                           
  1130                           	psect	dataBANK0
  1131  0000BD                     __pdataBANK0:
  1132                           	callstack 0
  1133  0000BD                     main@F3405:
  1134                           	callstack 0
  1135  0000BD                     	ds	20
  1136  0000D1                     _EEPROM:
  1137                           	callstack 0
  1138  0000D1                     	ds	10
  1139  0000DB                     _IHM:
  1140                           	callstack 0
  1141  0000DB                     	ds	10
  1142                           
  1143                           	psect	cstackBANK0
  1144  000060                     __pcstackBANK0:
  1145                           	callstack 0
  1146  000060                     main@lema:
  1147                           	callstack 0
  1148                           
  1149                           ; 20 bytes @ 0x0
  1150  000060                     	ds	20
  1151  000074                     main@contPassos:
  1152                           	callstack 0
  1153                           
  1154                           ; 1 bytes @ 0x14
  1155  000074                     	ds	1
  1156  000075                     main@aux:
  1157                           	callstack 0
  1158                           
  1159                           ; 1 bytes @ 0x15
  1160  000075                     	ds	1
  1161  000076                     main@vetor_aux:
  1162                           	callstack 0
  1163                           
  1164                           ; 16 bytes @ 0x16
  1165  000076                     	ds	16
  1166  000086                     _main$546:
  1167                           	callstack 0
  1168                           
  1169                           ; 2 bytes @ 0x26
  1170  000086                     	ds	2
  1171  000088                     _main$565:
  1172                           	callstack 0
  1173                           
  1174                           ; 2 bytes @ 0x28
  1175  000088                     	ds	2
  1176  00008A                     _main$569:
  1177                           	callstack 0
  1178                           
  1179                           ; 2 bytes @ 0x2A
  1180  00008A                     	ds	2
  1181  00008C                     _main$570:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x2C
  1185  00008C                     	ds	2
  1186  00008E                     _main$571:
  1187                           	callstack 0
  1188                           
  1189                           ; 2 bytes @ 0x2E
  1190  00008E                     	ds	2
  1191  000090                     _main$572:
  1192                           	callstack 0
  1193                           
  1194                           ; 2 bytes @ 0x30
  1195  000090                     	ds	2
  1196  000092                     _main$573:
  1197                           	callstack 0
  1198                           
  1199                           ; 2 bytes @ 0x32
  1200  000092                     	ds	2
  1201  000094                     _main$574:
  1202                           	callstack 0
  1203                           
  1204                           ; 2 bytes @ 0x34
  1205  000094                     	ds	2
  1206  000096                     _main$575:
  1207                           	callstack 0
  1208                           
  1209                           ; 2 bytes @ 0x36
  1210  000096                     	ds	2
  1211  000098                     _main$576:
  1212                           	callstack 0
  1213                           
  1214                           ; 2 bytes @ 0x38
  1215  000098                     	ds	2
  1216  00009A                     _main$578:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x3A
  1220  00009A                     	ds	2
  1221  00009C                     main@i_542:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x3C
  1225  00009C                     	ds	1
  1226  00009D                     main@pt:
  1227                           	callstack 0
  1228                           
  1229                           ; 2 bytes @ 0x3D
  1230  00009D                     	ds	2
  1231  00009F                     main@ptr:
  1232                           	callstack 0
  1233                           
  1234                           ; 2 bytes @ 0x3F
  1235  00009F                     	ds	2
  1236  0000A1                     main@i:
  1237                           	callstack 0
  1238                           
  1239                           ; 1 bytes @ 0x41
  1240  0000A1                     	ds	1
  1241  0000A2                     main@j:
  1242                           	callstack 0
  1243                           
  1244                           ; 1 bytes @ 0x42
  1245  0000A2                     	ds	1
  1246  0000A3                     main@i_536:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x43
  1250  0000A3                     	ds	1
  1251  0000A4                     main@j_537:
  1252                           	callstack 0
  1253                           
  1254                           ; 1 bytes @ 0x44
  1255  0000A4                     	ds	1
  1256  0000A5                     main@i_554:
  1257                           	callstack 0
  1258                           
  1259                           ; 1 bytes @ 0x45
  1260  0000A5                     	ds	1
  1261  0000A6                     main@j_555:
  1262                           	callstack 0
  1263                           
  1264                           ; 1 bytes @ 0x46
  1265  0000A6                     	ds	1
  1266  0000A7                     main@i_557:
  1267                           	callstack 0
  1268                           
  1269                           ; 1 bytes @ 0x47
  1270  0000A7                     	ds	1
  1271  0000A8                     main@j_558:
  1272                           	callstack 0
  1273                           
  1274                           ; 1 bytes @ 0x48
  1275  0000A8                     	ds	1
  1276  0000A9                     main@i_587:
  1277                           	callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x49
  1280  0000A9                     	ds	1
  1281  0000AA                     main@j_588:
  1282                           	callstack 0
  1283                           
  1284                           ; 1 bytes @ 0x4A
  1285  0000AA                     	ds	1
  1286  0000AB                     main@i_590:
  1287                           	callstack 0
  1288                           
  1289                           ; 1 bytes @ 0x4B
  1290  0000AB                     	ds	1
  1291  0000AC                     main@j_591:
  1292                           	callstack 0
  1293                           
  1294                           ; 1 bytes @ 0x4C
  1295  0000AC                     	ds	1
  1296  0000AD                     main@vetorIn:
  1297                           	callstack 0
  1298                           
  1299                           ; 1 bytes @ 0x4D
  1300  0000AD                     	ds	1
  1301  0000AE                     main@vetorOut:
  1302                           	callstack 0
  1303                           
  1304                           ; 1 bytes @ 0x4E
  1305  0000AE                     	ds	1
  1306  0000AF                     main@meAtuadores:
  1307                           	callstack 0
  1308                           
  1309                           ; 1 bytes @ 0x4F
  1310  0000AF                     	ds	1
  1311  0000B0                     main@ciclos:
  1312                           	callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x50
  1315  0000B0                     	ds	2
  1316  0000B2                     main@init_cond:
  1317                           	callstack 0
  1318                           
  1319                           ; 1 bytes @ 0x52
  1320  0000B2                     	ds	1
  1321  0000B3                     main@botao:
  1322                           	callstack 0
  1323                           
  1324                           ; 1 bytes @ 0x53
  1325  0000B3                     	ds	1
  1326  0000B4                     main@num:
  1327                           	callstack 0
  1328                           
  1329                           ; 2 bytes @ 0x54
  1330  0000B4                     	ds	2
  1331  0000B6                     main@ptr_545:
  1332                           	callstack 0
  1333                           
  1334                           ; 2 bytes @ 0x56
  1335  0000B6                     	ds	2
  1336  0000B8                     main@ptr_564:
  1337                           	callstack 0
  1338                           
  1339                           ; 2 bytes @ 0x58
  1340  0000B8                     	ds	2
  1341  0000BA                     main@auxPasso:
  1342                           	callstack 0
  1343                           
  1344                           ; 1 bytes @ 0x5A
  1345  0000BA                     	ds	1
  1346  0000BB                     main@estado:
  1347                           	callstack 0
  1348                           
  1349                           ; 1 bytes @ 0x5B
  1350  0000BB                     	ds	1
  1351  0000BC                     main@tecla:
  1352                           	callstack 0
  1353                           
  1354                           ; 1 bytes @ 0x5C
  1355  0000BC                     	ds	1
  1356                           
  1357                           	psect	cstackCOMRAM
  1358  000026                     __pcstackCOMRAM:
  1359                           	callstack 0
  1360  000026                     ??_dispLCD_dataReg:
  1361  000026                     ??_alt_atuador:
  1362  000026                     ??_ler_atuador:
  1363  000026                     ??_fifo_indicePrint_inc:
  1364  000026                     ??_dispLCD_instReg:
  1365  000026                     ??_teclado_scan:
  1366  000026                     ?_getContCiclos:
  1367                           	callstack 0
  1368  000026                     ?_fifo_adrs:
  1369                           	callstack 0
  1370  000026                     ?_getCiclos:
  1371                           	callstack 0
  1372  000026                     ?_end_receita:
  1373                           	callstack 0
  1374  000026                     ?___wmul:
  1375                           	callstack 0
  1376  000026                     ?___awdiv:
  1377                           	callstack 0
  1378  000026                     ?___awmod:
  1379                           	callstack 0
  1380  000026                     ?___lwdiv:
  1381                           	callstack 0
  1382  000026                     ?_statusT1:
  1383                           	callstack 0
  1384  000026                     ?___lmul:
  1385                           	callstack 0
  1386  000026                     ?___lldiv:
  1387                           	callstack 0
  1388  000026                     EEPROM_read@addr:
  1389                           	callstack 0
  1390  000026                     EEPROM_write@data:
  1391                           	callstack 0
  1392  000026                     fifo_lerPos@i:
  1393                           	callstack 0
  1394  000026                     serialIObyteShift@dataIn:
  1395                           	callstack 0
  1396  000026                     I2C_tx@b:
  1397                           	callstack 0
  1398  000026                     set_passo@ptr:
  1399                           	callstack 0
  1400  000026                     ler_sensor@ptr:
  1401                           	callstack 0
  1402  000026                     delay@t:
  1403                           	callstack 0
  1404  000026                     end_receita@x:
  1405                           	callstack 0
  1406  000026                     codifica@dado:
  1407                           	callstack 0
  1408  000026                     decodifica@d:
  1409                           	callstack 0
  1410  000026                     fifo_add_ciclo@ciclos:
  1411                           	callstack 0
  1412  000026                     initSerialIO@ptrIn:
  1413                           	callstack 0
  1414  000026                     ___wmul@multiplier:
  1415                           	callstack 0
  1416  000026                     ___awdiv@dividend:
  1417                           	callstack 0
  1418  000026                     ___awmod@dividend:
  1419                           	callstack 0
  1420  000026                     ___lwdiv@dividend:
  1421                           	callstack 0
  1422  000026                     ___lmul@multiplier:
  1423                           	callstack 0
  1424  000026                     ___lldiv@dividend:
  1425                           	callstack 0
  1426                           
  1427                           ; 4 bytes @ 0x0
  1428  000026                     	ds	1
  1429  000027                     dispLCD_instReg@i:
  1430                           	callstack 0
  1431  000027                     dispLCD_dataReg@d:
  1432                           	callstack 0
  1433  000027                     EEPROM_write@addr:
  1434                           	callstack 0
  1435  000027                     posAtual@ind:
  1436                           	callstack 0
  1437  000027                     serialIObyteShift@dataOut:
  1438                           	callstack 0
  1439                           
  1440                           ; 1 bytes @ 0x1
  1441  000027                     	ds	1
  1442  000028                     ??_delay:
  1443  000028                     ??_decodifica:
  1444  000028                     ??_set_passo:
  1445  000028                     ??_ler_sensor:
  1446  000028                     ??_codifica:
  1447  000028                     ??_end_receita:
  1448  000028                     dispLCD_lincol@col:
  1449                           	callstack 0
  1450  000028                     formatar_receitas@i:
  1451                           	callstack 0
  1452  000028                     ler_atuador@tecla:
  1453                           	callstack 0
  1454  000028                     alt_atuador@tecla:
  1455                           	callstack 0
  1456  000028                     posAtual@passo:
  1457                           	callstack 0
  1458  000028                     serialIObyteShift@dataBit:
  1459                           	callstack 0
  1460  000028                     teclado_scan@tecla:
  1461                           	callstack 0
  1462  000028                     getCiclos@aux:
  1463                           	callstack 0
  1464  000028                     initSerialIO@ptrOut:
  1465                           	callstack 0
  1466  000028                     ___wmul@multiplicand:
  1467                           	callstack 0
  1468  000028                     ___awdiv@divisor:
  1469                           	callstack 0
  1470  000028                     ___awmod@divisor:
  1471                           	callstack 0
  1472  000028                     ___lwdiv@divisor:
  1473                           	callstack 0
  1474                           
  1475                           ; 2 bytes @ 0x2
  1476  000028                     	ds	1
  1477  000029                     ??_dispLCD_lincol:
  1478  000029                     ??_serialIOscan:
  1479  000029                     manipula_atuadores_init@atuador:
  1480                           	callstack 0
  1481  000029                     teclado_scan@l:
  1482                           	callstack 0
  1483  000029                     dac_write@code:
  1484                           	callstack 0
  1485  000029                     salva_atuadores_init@condi_init:
  1486                           	callstack 0
  1487                           
  1488                           ; 4 bytes @ 0x3
  1489  000029                     	ds	1
  1490  00002A                     set_passo@passo:
  1491                           	callstack 0
  1492  00002A                     ler_sensor@passo:
  1493                           	callstack 0
  1494  00002A                     manipula_atuadores_init@aux:
  1495                           	callstack 0
  1496  00002A                     codifica@tipo:
  1497                           	callstack 0
  1498  00002A                     initSerialIO@length:
  1499                           	callstack 0
  1500  00002A                     teclado_scan@c:
  1501                           	callstack 0
  1502  00002A                     ___awdiv@counter:
  1503                           	callstack 0
  1504  00002A                     ___awmod@counter:
  1505                           	callstack 0
  1506  00002A                     deletar_receita@aux:
  1507                           	callstack 0
  1508  00002A                     ___wmul@product:
  1509                           	callstack 0
  1510  00002A                     ___lwdiv@quotient:
  1511                           	callstack 0
  1512  00002A                     ___lmul@multiplicand:
  1513                           	callstack 0
  1514  00002A                     ___lldiv@divisor:
  1515                           	callstack 0
  1516                           
  1517                           ; 4 bytes @ 0x4
  1518  00002A                     	ds	1
  1519  00002B                     ??_dac_write:
  1520  00002B                     dispLCD_lincol@lin:
  1521                           	callstack 0
  1522  00002B                     manipula_atuadores_init@mask:
  1523                           	callstack 0
  1524  00002B                     serialIOscan@j:
  1525                           	callstack 0
  1526  00002B                     teclado_borda@aux:
  1527                           	callstack 0
  1528  00002B                     ___awdiv@sign:
  1529                           	callstack 0
  1530  00002B                     ___awmod@sign:
  1531                           	callstack 0
  1532                           
  1533                           ; 1 bytes @ 0x5
  1534  00002B                     	ds	1
  1535  00002C                     dispLCD_lincol@aux:
  1536                           	callstack 0
  1537  00002C                     salvar_dado@col:
  1538                           	callstack 0
  1539  00002C                     buscar_dado@col:
  1540                           	callstack 0
  1541  00002C                     deletar_receita@receita:
  1542                           	callstack 0
  1543  00002C                     serialIOscan@i:
  1544                           	callstack 0
  1545  00002C                     teclado_borda@tecla:
  1546                           	callstack 0
  1547  00002C                     ___lwdiv@counter:
  1548                           	callstack 0
  1549  00002C                     salvar_receita@data:
  1550                           	callstack 0
  1551  00002C                     buscar_receita@data:
  1552                           	callstack 0
  1553  00002C                     dignum_conc@ptrNum:
  1554                           	callstack 0
  1555  00002C                     ___awdiv@quotient:
  1556                           	callstack 0
  1557  00002C                     setT1@c:
  1558                           	callstack 0
  1559                           
  1560                           ; 4 bytes @ 0x6
  1561  00002C                     	ds	1
  1562  00002D                     dispLCD@col:
  1563                           	callstack 0
  1564  00002D                     salvar_dado@data:
  1565                           	callstack 0
  1566  00002D                     deletar_receita@i:
  1567                           	callstack 0
  1568  00002D                     dispLCD_str@str:
  1569                           	callstack 0
  1570  00002D                     buscar_dado@data:
  1571                           	callstack 0
  1572  00002D                     salva_atuadores_init@pt:
  1573                           	callstack 0
  1574  00002D                     dignum_apagar@ptrNum:
  1575                           	callstack 0
  1576                           
  1577                           ; 2 bytes @ 0x7
  1578  00002D                     	ds	1
  1579  00002E                     ??_fifo_print:
  1580  00002E                     ??_dignum_conc:
  1581  00002E                     dispLCD@str:
  1582                           	callstack 0
  1583  00002E                     salvar_receita@aux:
  1584                           	callstack 0
  1585  00002E                     buscar_receita@aux:
  1586                           	callstack 0
  1587  00002E                     salvar_dado@aux:
  1588                           	callstack 0
  1589  00002E                     dignum_tam@num:
  1590                           	callstack 0
  1591  00002E                     ___lmul@product:
  1592                           	callstack 0
  1593  00002E                     ___lldiv@quotient:
  1594                           	callstack 0
  1595                           
  1596                           ; 4 bytes @ 0x8
  1597  00002E                     	ds	1
  1598  00002F                     dispLCD_str@lin:
  1599                           	callstack 0
  1600  00002F                     salva_atuadores_init@dado:
  1601                           	callstack 0
  1602  00002F                     buscar_dado@aux:
  1603                           	callstack 0
  1604                           
  1605                           ; 2 bytes @ 0x9
  1606  00002F                     	ds	1
  1607  000030                     dispLCD@pos:
  1608                           	callstack 0
  1609  000030                     dispLCD_str@c:
  1610                           	callstack 0
  1611  000030                     salvar_receita@adrs:
  1612                           	callstack 0
  1613  000030                     buscar_receita@adrs:
  1614                           	callstack 0
  1615  000030                     salvar_dado@adrs:
  1616                           	callstack 0
  1617  000030                     salva_atuadores_init@mask:
  1618                           	callstack 0
  1619  000030                     dignum_conc@dig:
  1620                           	callstack 0
  1621  000030                     dignum_tam@tam:
  1622                           	callstack 0
  1623  000030                     _fifo_print$946:
  1624                           	callstack 0
  1625                           
  1626                           ; 2 bytes @ 0xA
  1627  000030                     	ds	1
  1628  000031                     ??_fifo_alinharPrint:
  1629  000031                     dispLCD@lin:
  1630                           	callstack 0
  1631  000031                     dispLCD_num@col:
  1632                           	callstack 0
  1633  000031                     salvar_receita@i:
  1634                           	callstack 0
  1635  000031                     buscar_receita@i:
  1636                           	callstack 0
  1637  000031                     buscar_dado@adrs:
  1638                           	callstack 0
  1639                           
  1640                           ; 1 bytes @ 0xB
  1641  000031                     	ds	1
  1642  000032                     ?___aldiv:
  1643                           	callstack 0
  1644  000032                     fifo_print@completar:
  1645                           	callstack 0
  1646  000032                     fifo_alinharPrint@cont:
  1647                           	callstack 0
  1648  000032                     ___lldiv@counter:
  1649                           	callstack 0
  1650  000032                     dispLCD_num@num:
  1651                           	callstack 0
  1652  000032                     ___aldiv@dividend:
  1653                           	callstack 0
  1654                           
  1655                           ; 4 bytes @ 0xC
  1656  000032                     	ds	1
  1657  000033                     fifo_print@indPrint:
  1658                           	callstack 0
  1659  000033                     fifo_alinharPrint@i:
  1660                           	callstack 0
  1661  000033                     I2C_init@freq:
  1662                           	callstack 0
  1663                           
  1664                           ; 4 bytes @ 0xD
  1665  000033                     	ds	1
  1666  000034                     dispLCD_num@tam:
  1667                           	callstack 0
  1668  000034                     fifo_print@i:
  1669                           	callstack 0
  1670  000034                     fifo_alinharPrint@aux:
  1671                           	callstack 0
  1672                           
  1673                           ; 1 bytes @ 0xE
  1674  000034                     	ds	1
  1675  000035                     ??_dispLCD_num:
  1676  000035                     ??_fifo_delete:
  1677  000035                     fifo_add@passo:
  1678                           	callstack 0
  1679  000035                     fifo_add_tempo@t:
  1680                           	callstack 0
  1681  000035                     fifo_add_control@c:
  1682                           	callstack 0
  1683  000035                     fifo_print@atraso:
  1684                           	callstack 0
  1685                           
  1686                           ; 1 bytes @ 0xF
  1687  000035                     	ds	1
  1688  000036                     fifo_print@comando:
  1689                           	callstack 0
  1690  000036                     ___aldiv@divisor:
  1691                           	callstack 0
  1692                           
  1693                           ; 4 bytes @ 0x10
  1694  000036                     	ds	1
  1695  000037                     
  1696                           ; 1 bytes @ 0x11
  1697  000037                     	ds	3
  1698  00003A                     dispLCD_num@lin:
  1699                           	callstack 0
  1700  00003A                     ___aldiv@counter:
  1701                           	callstack 0
  1702                           
  1703                           ; 1 bytes @ 0x14
  1704  00003A                     	ds	1
  1705  00003B                     dispLCD_num@size:
  1706                           	callstack 0
  1707  00003B                     ___aldiv@sign:
  1708                           	callstack 0
  1709                           
  1710                           ; 1 bytes @ 0x15
  1711  00003B                     	ds	1
  1712  00003C                     dispLCD_num@sinal:
  1713                           	callstack 0
  1714  00003C                     ___aldiv@quotient:
  1715                           	callstack 0
  1716                           
  1717                           ; 4 bytes @ 0x16
  1718  00003C                     	ds	1
  1719  00003D                     dispLCD_num@div:
  1720                           	callstack 0
  1721                           
  1722                           ; 2 bytes @ 0x17
  1723  00003D                     	ds	2
  1724  00003F                     printExec@ind:
  1725                           	callstack 0
  1726                           
  1727                           ; 1 bytes @ 0x19
  1728  00003F                     	ds	1
  1729  000040                     _printExec$968:
  1730                           	callstack 0
  1731  000040                     MCP4725@Vout:
  1732                           	callstack 0
  1733                           
  1734                           ; 2 bytes @ 0x1A
  1735  000040                     	ds	2
  1736  000042                     printExec@col:
  1737                           	callstack 0
  1738                           
  1739                           ; 1 bytes @ 0x1C
  1740  000042                     	ds	1
  1741  000043                     printExec@passo:
  1742                           	callstack 0
  1743                           
  1744                           ; 1 bytes @ 0x1D
  1745  000043                     	ds	1
  1746  000044                     ??_main:
  1747                           
  1748                           ; 1 bytes @ 0x1E
  1749  000044                     	ds	2
  1750                           
  1751 ;;
  1752 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1753 ;;
  1754 ;; *************** function _main *****************
  1755 ;; Defined at:
  1756 ;;		line 69 in file "main.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  j               1   76[BANK0 ] unsigned char 
  1761 ;;  j               1   74[BANK0 ] unsigned char 
  1762 ;;  j               1   72[BANK0 ] unsigned char 
  1763 ;;  j               1   70[BANK0 ] unsigned char 
  1764 ;;  j               1   68[BANK0 ] unsigned char 
  1765 ;;  j               1   66[BANK0 ] unsigned char 
  1766 ;;  ptr             2   88[BANK0 ] PTR unsigned char 
  1767 ;;		 -> main@vetor_aux(16), 
  1768 ;;  i               1   75[BANK0 ] unsigned char 
  1769 ;;  i               1   73[BANK0 ] unsigned char 
  1770 ;;  i               1   71[BANK0 ] unsigned char 
  1771 ;;  i               1   69[BANK0 ] unsigned char 
  1772 ;;  ptr             2   86[BANK0 ] PTR unsigned char 
  1773 ;;		 -> main@vetor_aux(16), 
  1774 ;;  i               1   67[BANK0 ] unsigned char 
  1775 ;;  i               1   65[BANK0 ] unsigned char 
  1776 ;;  lema           20    0[BANK0 ] unsigned char [20]
  1777 ;;  ptr             2   63[BANK0 ] PTR unsigned char 
  1778 ;;		 -> main@lema(20), 
  1779 ;;  i               1   60[BANK0 ] unsigned char 
  1780 ;;  vetor_aux      16   22[BANK0 ] unsigned char [16]
  1781 ;;  num             2   84[BANK0 ] unsigned int 
  1782 ;;  ciclos          2   80[BANK0 ] unsigned int 
  1783 ;;  pt              2   61[BANK0 ] PTR unsigned char 
  1784 ;;		 -> main@vetor_aux(16), 
  1785 ;;  tecla           1   92[BANK0 ] unsigned char 
  1786 ;;  estado          1   91[BANK0 ] unsigned char 
  1787 ;;  auxPasso        1   90[BANK0 ] unsigned char 
  1788 ;;  botao           1   83[BANK0 ] unsigned char 
  1789 ;;  init_cond       1   82[BANK0 ] unsigned char 
  1790 ;;  meAtuadores     1   79[BANK0 ] unsigned char 
  1791 ;;  vetorOut        1   78[BANK0 ] unsigned char [1]
  1792 ;;  vetorIn         1   77[BANK0 ] unsigned char [1]
  1793 ;;  aux             1   21[BANK0 ] unsigned char 
  1794 ;;  contPassos      1   20[BANK0 ] unsigned char 
  1795 ;;  atuador         1    0        unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0
  1806 ;;      Locals:         0      93       0       0       0       0       0       0       0
  1807 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1808 ;;      Totals:         2      93       0       0       0       0       0       0       0
  1809 ;;Total ram usage:       95 bytes
  1810 ;; Hardware stack levels required when called:    6
  1811 ;; This function calls:
  1812 ;;		_I2C_init
  1813 ;;		_MCP4725
  1814 ;;		___aldiv
  1815 ;;		___awmod
  1816 ;;		___lmul
  1817 ;;		___wmul
  1818 ;;		_addContCiclos
  1819 ;;		_addIndicePassos
  1820 ;;		_alt_atuador
  1821 ;;		_buscar_dado
  1822 ;;		_buscar_receita
  1823 ;;		_decodifica
  1824 ;;		_delay
  1825 ;;		_deletar_receita
  1826 ;;		_dignum_apagar
  1827 ;;		_dignum_conc
  1828 ;;		_dispLCD
  1829 ;;		_dispLCD_clr
  1830 ;;		_dispLCD_dataReg
  1831 ;;		_dispLCD_init
  1832 ;;		_dispLCD_lincol
  1833 ;;		_dispLCD_num
  1834 ;;		_dispLCD_str
  1835 ;;		_fifo_add
  1836 ;;		_fifo_add_ciclo
  1837 ;;		_fifo_add_control
  1838 ;;		_fifo_add_tempo
  1839 ;;		_fifo_adrs
  1840 ;;		_fifo_delete
  1841 ;;		_fifo_disponivel
  1842 ;;		_fifo_indice
  1843 ;;		_fifo_indicePrint_dec
  1844 ;;		_fifo_indicePrint_inc
  1845 ;;		_fifo_lerPos
  1846 ;;		_fifo_print
  1847 ;;		_fifo_tam
  1848 ;;		_formatar_receitas
  1849 ;;		_getCiclos
  1850 ;;		_getContCiclos
  1851 ;;		_getIndicePassos
  1852 ;;		_initSerialIO
  1853 ;;		_init_atuadores
  1854 ;;		_ler_atuador
  1855 ;;		_ler_sensor
  1856 ;;		_manipula_atuadores_init
  1857 ;;		_printExec
  1858 ;;		_resetContCiclos
  1859 ;;		_resetIndicePassos
  1860 ;;		_salva_atuadores_init
  1861 ;;		_salvar_dado
  1862 ;;		_salvar_receita
  1863 ;;		_serialIOscan
  1864 ;;		_setT1
  1865 ;;		_set_passo
  1866 ;;		_statusT1
  1867 ;;		_teclado_borda
  1868 ;;		_teclado_init
  1869 ;;		_timer1_init
  1870 ;; This function is called by:
  1871 ;;		Startup code after reset
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text0
  1876  000012                     __ptext0:
  1877                           	callstack 0
  1878  000012                     _main:
  1879                           	callstack 25
  1880  000012                     
  1881                           ;main.c: 71:     dispLCD_init();
  1882  000012  ECAF  F01B         	call	_dispLCD_init	;wreg free
  1883  000016                     
  1884                           ;main.c: 72:     teclado_init();
  1885  000016  EC67  F01D         	call	_teclado_init	;wreg free
  1886  00001A                     
  1887                           ;main.c: 73:     timer1_init();
  1888  00001A  ECD2  F01C         	call	_timer1_init	;wreg free
  1889                           
  1890                           ;main.c: 74:     I2C_init(20000000);
  1891  00001E  0E00               	movlw	0
  1892  000020  6E33               	movwf	I2C_init@freq^0,c
  1893  000022  0E2D               	movlw	45
  1894  000024  6E34               	movwf	(I2C_init@freq+1)^0,c
  1895  000026  0E31               	movlw	49
  1896  000028  6E35               	movwf	(I2C_init@freq+2)^0,c
  1897  00002A  0E01               	movlw	1
  1898  00002C  6E36               	movwf	(I2C_init@freq+3)^0,c
  1899  00002E  EC5B  F01B         	call	_I2C_init	;wreg free
  1900                           
  1901                           ;main.c: 75:     MCP4725(0);
  1902  000032  0E00               	movlw	0
  1903  000034  6E41               	movwf	(MCP4725@Vout+1)^0,c
  1904  000036  0E00               	movlw	0
  1905  000038  6E40               	movwf	MCP4725@Vout^0,c
  1906  00003A  ECB2  F01C         	call	_MCP4725	;wreg free
  1907  00003E                     
  1908                           ;main.c: 78:     char tecla = 0;
  1909  00003E  0E00               	movlw	0
  1910  000040  0100               	movlb	0	; () banked
  1911  000042  6FBC               	movwf	main@tecla& (0+255),b
  1912  000044                     
  1913                           ; BSR set to: 0
  1914                           ;main.c: 79:     char estado = 0;
  1915  000044  0E00               	movlw	0
  1916  000046  6FBB               	movwf	main@estado& (0+255),b
  1917  000048                     
  1918                           ; BSR set to: 0
  1919                           ;main.c: 80:     char atuador;;main.c: 81:     char vetor_aux[16];;main.c: 82:     char 
      +                          init_cond = 0;
  1920  000048  0E00               	movlw	0
  1921  00004A  6FB2               	movwf	main@init_cond& (0+255),b
  1922  00004C                     
  1923                           ; BSR set to: 0
  1924                           ;main.c: 83:     char *pt;;main.c: 85:     char contPassos = 0;
  1925  00004C  0E00               	movlw	0
  1926  00004E  6F74               	movwf	main@contPassos& (0+255),b
  1927  000050                     
  1928                           ; BSR set to: 0
  1929                           ;main.c: 86:     char vetorIn[1] = { 0 };
  1930  000050  0E00               	movlw	0
  1931  000052  6FAD               	movwf	main@vetorIn& (0+255),b
  1932  000054                     
  1933                           ; BSR set to: 0
  1934                           ;main.c: 87:     char vetorOut[1] = { 0 };
  1935  000054  0E00               	movlw	0
  1936  000056  6FAE               	movwf	main@vetorOut& (0+255),b
  1937                           
  1938                           ;main.c: 88:     initSerialIO( vetorIn, vetorOut, 1 );
  1939  000058  0EAD               	movlw	low main@vetorIn
  1940  00005A  6E26               	movwf	initSerialIO@ptrIn^0,c
  1941  00005C  0E00               	movlw	high main@vetorIn
  1942  00005E  6E27               	movwf	(initSerialIO@ptrIn+1)^0,c
  1943  000060  0EAE               	movlw	low main@vetorOut
  1944  000062  6E28               	movwf	initSerialIO@ptrOut^0,c
  1945  000064  0E00               	movlw	high main@vetorOut
  1946  000066  6E29               	movwf	(initSerialIO@ptrOut+1)^0,c
  1947  000068  0E01               	movlw	1
  1948  00006A  6E2A               	movwf	initSerialIO@length^0,c
  1949  00006C  ECE2  F01B         	call	_initSerialIO	;wreg free
  1950  000070                     
  1951                           ;main.c: 89:     char meAtuadores = -1;
  1952  000070  0100               	movlb	0	; () banked
  1953  000072  69AF               	setf	main@meAtuadores& (0+255),b
  1954  000074                     
  1955                           ; BSR set to: 0
  1956                           ;main.c: 90:     char auxPasso = 0;
  1957  000074  0E00               	movlw	0
  1958  000076  6FBA               	movwf	main@auxPasso& (0+255),b
  1959  000078                     
  1960                           ; BSR set to: 0
  1961                           ;main.c: 91:     char aux = 2;
  1962  000078  0E02               	movlw	2
  1963  00007A  6F75               	movwf	main@aux& (0+255),b
  1964  00007C                     
  1965                           ; BSR set to: 0
  1966                           ;main.c: 92:     unsigned int num = 0;
  1967  00007C  0E00               	movlw	0
  1968  00007E  6FB5               	movwf	(main@num+1)& (0+255),b
  1969  000080  0E00               	movlw	0
  1970  000082  6FB4               	movwf	main@num& (0+255),b
  1971  000084                     
  1972                           ; BSR set to: 0
  1973                           ;main.c: 93:     unsigned int ciclos = 0;
  1974  000084  0E00               	movlw	0
  1975  000086  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  1976  000088  0E00               	movlw	0
  1977  00008A  6FB0               	movwf	main@ciclos& (0+255),b
  1978  00008C                     
  1979                           ; BSR set to: 0
  1980                           ;main.c: 94:     char botao = 0;
  1981  00008C  0E00               	movlw	0
  1982  00008E  6FB3               	movwf	main@botao& (0+255),b
  1983  000090  EFFE  F00C         	goto	l6532
  1984  000094                     l5798:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 112:                             for(char i = 0; i <= 3; i++)
  1988  000094  0E00               	movlw	0
  1989  000096  6FA1               	movwf	main@i& (0+255),b
  1990  000098                     l5800:
  1991                           
  1992                           ; BSR set to: 0
  1993  000098  0E03               	movlw	3
  1994  00009A  65A1               	cpfsgt	main@i& (0+255),b
  1995  00009C  EF52  F000         	goto	u4001
  1996  0000A0  EF54  F000         	goto	u4000
  1997  0000A4                     u4001:
  1998  0000A4  EF56  F000         	goto	l5804
  1999  0000A8                     u4000:
  2000  0000A8  EF85  F000         	goto	l5822
  2001  0000AC                     l5804:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 113:                             {;main.c: 114:                                
      +                           for(char j = 0; j <= 19; j++)
  2005  0000AC  0E00               	movlw	0
  2006  0000AE  6FA2               	movwf	main@j& (0+255),b
  2007  0000B0                     l5806:
  2008                           
  2009                           ; BSR set to: 0
  2010  0000B0  0E13               	movlw	19
  2011  0000B2  65A2               	cpfsgt	main@j& (0+255),b
  2012  0000B4  EF5E  F000         	goto	u4011
  2013  0000B8  EF60  F000         	goto	u4010
  2014  0000BC                     u4011:
  2015  0000BC  EF62  F000         	goto	l5810
  2016  0000C0                     u4010:
  2017  0000C0  EF82  F000         	goto	l5818
  2018  0000C4                     l5810:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;main.c: 115:                                 {;main.c: 116:                            
      +                                   IHM.printpos(i, j, "\377");
  2022  0000C4  EE20  F0DF         	lfsr	2,_IHM+4
  2023  0000C8  D802               	call	u4028
  2024  0000CA  EF78  F000         	goto	u4029
  2025  0000CE                     u4028:
  2026  0000CE  0005               	push	
  2027  0000D0  6EFA               	movwf	pclath,c
  2028  0000D2  50DE               	movf	postinc2,w,c
  2029  0000D4  6EFD               	movwf	tosl,c
  2030  0000D6  50DE               	movf	postinc2,w,c
  2031  0000D8  6EFE               	movwf	tosh,c
  2032  0000DA  50F8               	movf	tblptru,w,c
  2033  0000DC  6EFF               	movwf	tosu,c
  2034  0000DE  50FA               	movf	pclath,w,c
  2035  0000E0  C0A2  F02D         	movff	main@j,dispLCD@col
  2036  0000E4  0EFD               	movlw	low STR_1
  2037  0000E6  6E2E               	movwf	dispLCD@str^0,c
  2038  0000E8  0E7F               	movlw	high STR_1
  2039  0000EA  6E2F               	movwf	(dispLCD@str+1)^0,c
  2040  0000EC  51A1               	movf	main@i& (0+255),w,b
  2041  0000EE  0012               	return		;indir
  2042  0000F0                     u4029:
  2043  0000F0                     
  2044                           ;main.c: 117:                                     delay(10);
  2045  0000F0  0E00               	movlw	0
  2046  0000F2  6E27               	movwf	(delay@t+1)^0,c
  2047  0000F4  0E0A               	movlw	10
  2048  0000F6  6E26               	movwf	delay@t^0,c
  2049  0000F8  EC27  F01C         	call	_delay
  2050  0000FC                     
  2051                           ;main.c: 118:                                 }
  2052  0000FC  0100               	movlb	0	; () banked
  2053  0000FE  2BA2               	incf	main@j& (0+255),f,b
  2054  000100  EF58  F000         	goto	l5806
  2055  000104                     l5818:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;main.c: 119:                             }
  2059  000104  2BA1               	incf	main@i& (0+255),f,b
  2060  000106  EF4C  F000         	goto	l5800
  2061  00010A                     l5822:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 121:                             for(char i = 0; i <= 3; i++)
  2065  00010A  0E00               	movlw	0
  2066  00010C  6FA3               	movwf	main@i_536& (0+255),b
  2067  00010E                     l5824:
  2068                           
  2069                           ; BSR set to: 0
  2070  00010E  0E03               	movlw	3
  2071  000110  65A3               	cpfsgt	main@i_536& (0+255),b
  2072  000112  EF8D  F000         	goto	u4031
  2073  000116  EF8F  F000         	goto	u4030
  2074  00011A                     u4031:
  2075  00011A  EF91  F000         	goto	l5828
  2076  00011E                     u4030:
  2077  00011E  EFC0  F000         	goto	l5846
  2078  000122                     l5828:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;main.c: 122:                             {;main.c: 123:                                
      +                           for(char j = 0; j <= 19; j++)
  2082  000122  0E00               	movlw	0
  2083  000124  6FA4               	movwf	main@j_537& (0+255),b
  2084  000126                     l5830:
  2085                           
  2086                           ; BSR set to: 0
  2087  000126  0E13               	movlw	19
  2088  000128  65A4               	cpfsgt	main@j_537& (0+255),b
  2089  00012A  EF99  F000         	goto	u4041
  2090  00012E  EF9B  F000         	goto	u4040
  2091  000132                     u4041:
  2092  000132  EF9D  F000         	goto	l5834
  2093  000136                     u4040:
  2094  000136  EFBD  F000         	goto	l5842
  2095  00013A                     l5834:
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 124:                                 {;main.c: 125:                            
      +                                   IHM.printpos(i, j, " ");
  2099  00013A  EE20  F0DF         	lfsr	2,_IHM+4
  2100  00013E  D802               	call	u4058
  2101  000140  EFB3  F000         	goto	u4059
  2102  000144                     u4058:
  2103  000144  0005               	push	
  2104  000146  6EFA               	movwf	pclath,c
  2105  000148  50DE               	movf	postinc2,w,c
  2106  00014A  6EFD               	movwf	tosl,c
  2107  00014C  50DE               	movf	postinc2,w,c
  2108  00014E  6EFE               	movwf	tosh,c
  2109  000150  50F8               	movf	tblptru,w,c
  2110  000152  6EFF               	movwf	tosu,c
  2111  000154  50FA               	movf	pclath,w,c
  2112  000156  C0A4  F02D         	movff	main@j_537,dispLCD@col
  2113  00015A  0E64               	movlw	low (STR_24+19)
  2114  00015C  6E2E               	movwf	dispLCD@str^0,c
  2115  00015E  0E7E               	movlw	high (STR_24+19)
  2116  000160  6E2F               	movwf	(dispLCD@str+1)^0,c
  2117  000162  51A3               	movf	main@i_536& (0+255),w,b
  2118  000164  0012               	return		;indir
  2119  000166                     u4059:
  2120  000166                     
  2121                           ;main.c: 126:                                     delay(10);
  2122  000166  0E00               	movlw	0
  2123  000168  6E27               	movwf	(delay@t+1)^0,c
  2124  00016A  0E0A               	movlw	10
  2125  00016C  6E26               	movwf	delay@t^0,c
  2126  00016E  EC27  F01C         	call	_delay
  2127  000172                     
  2128                           ;main.c: 127:                                 }
  2129  000172  0100               	movlb	0	; () banked
  2130  000174  2BA4               	incf	main@j_537& (0+255),f,b
  2131  000176  EF93  F000         	goto	l5830
  2132  00017A                     l5842:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;main.c: 128:                             }
  2136  00017A  2BA3               	incf	main@i_536& (0+255),f,b
  2137  00017C  EF87  F000         	goto	l5824
  2138  000180                     l5846:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 129:                             estado = 1;
  2142  000180  0E01               	movlw	1
  2143  000182  6FBB               	movwf	main@estado& (0+255),b
  2144                           
  2145                           ;main.c: 130:                             break;
  2146  000184  EFA4  F00D         	goto	l6534
  2147  000188                     l5848:
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;main.c: 133:                             IHM.printpos(1, 0, "      SEGGUIT       ");
  2151  000188  EE20  F0DF         	lfsr	2,_IHM+4
  2152  00018C  D802               	call	u4068
  2153  00018E  EFDA  F000         	goto	u4069
  2154  000192                     u4068:
  2155  000192  0005               	push	
  2156  000194  6EFA               	movwf	pclath,c
  2157  000196  50DE               	movf	postinc2,w,c
  2158  000198  6EFD               	movwf	tosl,c
  2159  00019A  50DE               	movf	postinc2,w,c
  2160  00019C  6EFE               	movwf	tosh,c
  2161  00019E  50F8               	movf	tblptru,w,c
  2162  0001A0  6EFF               	movwf	tosu,c
  2163  0001A2  50FA               	movf	pclath,w,c
  2164  0001A4  0E00               	movlw	0
  2165  0001A6  6E2D               	movwf	dispLCD@col^0,c
  2166  0001A8  0E90               	movlw	low STR_3
  2167  0001AA  6E2E               	movwf	dispLCD@str^0,c
  2168  0001AC  0E7E               	movlw	high STR_3
  2169  0001AE  6E2F               	movwf	(dispLCD@str+1)^0,c
  2170  0001B0  0E01               	movlw	1
  2171  0001B2  0012               	return		;indir
  2172  0001B4                     u4069:
  2173  0001B4                     
  2174                           ;main.c: 135:                             char lema[20] = "Mundo ao seu comando";
  2175  0001B4  EE20  F0BD         	lfsr	2,main@F3405
  2176  0001B8  EE10  F060         	lfsr	1,main@lema
  2177  0001BC  0E13               	movlw	19
  2178  0001BE                     u4071:
  2179  0001BE  CFDB FFE3          	movff	plusw2,plusw1
  2180  0001C2  06E8               	decf	wreg,f,c
  2181  0001C4  E2FC               	bc	u4071
  2182  0001C6                     
  2183                           ;main.c: 136:                             char i = 0;
  2184  0001C6  0E00               	movlw	0
  2185  0001C8  0100               	movlb	0	; () banked
  2186  0001CA  6F9C               	movwf	main@i_542& (0+255),b
  2187  0001CC                     
  2188                           ; BSR set to: 0
  2189                           ;main.c: 137:                             char *ptr;;main.c: 139:                       
      +                                for(ptr = lema; *ptr != 0; ptr++)
  2190  0001CC  0E60               	movlw	low main@lema
  2191  0001CE  6F9F               	movwf	main@ptr& (0+255),b
  2192  0001D0  0E00               	movlw	high main@lema
  2193  0001D2  6FA0               	movwf	(main@ptr+1)& (0+255),b
  2194  0001D4  EF03  F001         	goto	l5866
  2195  0001D8                     l5856:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;main.c: 140:                             {;main.c: 141:                                
      +                           dispLCD_lincol( 2, i );
  2199  0001D8  C09C  F028         	movff	main@i_542,dispLCD_lincol@col
  2200  0001DC  0E02               	movlw	2
  2201  0001DE  EC8C  F018         	call	_dispLCD_lincol
  2202  0001E2                     
  2203                           ;main.c: 142:                                 dispLCD_dataReg( *ptr );
  2204  0001E2  C09F  FFD9         	movff	main@ptr,fsr2l
  2205  0001E6  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2206  0001EA  50DF               	movf	indf2,w,c
  2207  0001EC  EC24  F01A         	call	_dispLCD_dataReg
  2208  0001F0                     
  2209                           ;main.c: 143:                                 i++;
  2210  0001F0  0100               	movlb	0	; () banked
  2211  0001F2  2B9C               	incf	main@i_542& (0+255),f,b
  2212  0001F4                     
  2213                           ; BSR set to: 0
  2214                           ;main.c: 144:                                 delay(50);
  2215  0001F4  0E00               	movlw	0
  2216  0001F6  6E27               	movwf	(delay@t+1)^0,c
  2217  0001F8  0E32               	movlw	50
  2218  0001FA  6E26               	movwf	delay@t^0,c
  2219  0001FC  EC27  F01C         	call	_delay	;wreg free
  2220  000200                     
  2221                           ;main.c: 145:                             }
  2222  000200  0100               	movlb	0	; () banked
  2223  000202  4B9F               	infsnz	main@ptr& (0+255),f,b
  2224  000204  2BA0               	incf	(main@ptr+1)& (0+255),f,b
  2225  000206                     l5866:
  2226                           
  2227                           ; BSR set to: 0
  2228  000206  C09F  FFD9         	movff	main@ptr,fsr2l
  2229  00020A  C0A0  FFDA         	movff	main@ptr+1,fsr2h
  2230  00020E  50DF               	movf	indf2,w,c
  2231  000210  A4D8               	btfss	status,2,c
  2232  000212  EF0D  F001         	goto	u4081
  2233  000216  EF0F  F001         	goto	u4080
  2234  00021A                     u4081:
  2235  00021A  EFEC  F000         	goto	l5856
  2236  00021E                     u4080:
  2237  00021E                     
  2238                           ; BSR set to: 0
  2239                           ;main.c: 147:                             setT1(1500);
  2240  00021E  0EDC               	movlw	220
  2241  000220  6E2C               	movwf	setT1@c^0,c
  2242  000222  0E05               	movlw	5
  2243  000224  6E2D               	movwf	(setT1@c+1)^0,c
  2244  000226  0E00               	movlw	0
  2245  000228  6E2E               	movwf	(setT1@c+2)^0,c
  2246  00022A  0E00               	movlw	0
  2247  00022C  6E2F               	movwf	(setT1@c+3)^0,c
  2248  00022E  EC0B  F01D         	call	_setT1	;wreg free
  2249  000232                     
  2250                           ;main.c: 148:                             estado = 2;
  2251  000232  0E02               	movlw	2
  2252  000234  0100               	movlb	0	; () banked
  2253  000236  6FBB               	movwf	main@estado& (0+255),b
  2254                           
  2255                           ;main.c: 149:                             break;
  2256  000238  EFA4  F00D         	goto	l6534
  2257  00023C                     l5872:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;main.c: 152:                             if(!statusT1())
  2261  00023C  EC3D  F01D         	call	_statusT1	;wreg free
  2262  000240  5026               	movf	?_statusT1^0,w,c
  2263  000242  1027               	iorwf	(?_statusT1+1)^0,w,c
  2264  000244  1028               	iorwf	(?_statusT1+2)^0,w,c
  2265  000246  1029               	iorwf	(?_statusT1+3)^0,w,c
  2266  000248  A4D8               	btfss	status,2,c
  2267  00024A  EF29  F001         	goto	u4091
  2268  00024E  EF2B  F001         	goto	u4090
  2269  000252                     u4091:
  2270  000252  EFA4  F00D         	goto	l6534
  2271  000256                     u4090:
  2272  000256                     l5874:
  2273                           
  2274                           ;main.c: 153:                                 estado = 8;
  2275  000256  0E08               	movlw	8
  2276  000258  0100               	movlb	0	; () banked
  2277  00025A  6FBB               	movwf	main@estado& (0+255),b
  2278  00025C  EFA4  F00D         	goto	l6534
  2279  000260                     l5876:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;main.c: 172:                             init_atuadores();
  2283  000260  EC71  F01D         	call	_init_atuadores	;wreg free
  2284  000264                     
  2285                           ;main.c: 173:                             IHM.print("1: INSERIR SEQUENCIA\n"
  2286  000264  0E21               	movlw	low STR_4
  2287  000266  6E2D               	movwf	dispLCD_str@str^0,c
  2288  000268  0E7D               	movlw	high STR_4
  2289  00026A  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  2290  00026C  EE20  F0DD         	lfsr	2,_IHM+2
  2291  000270  D802               	call	u4108
  2292  000272  EF45  F001         	goto	u4109
  2293  000276                     u4108:
  2294  000276  0005               	push	
  2295  000278  6EFA               	movwf	pclath,c
  2296  00027A  50DE               	movf	postinc2,w,c
  2297  00027C  6EFD               	movwf	tosl,c
  2298  00027E  50DE               	movf	postinc2,w,c
  2299  000280  6EFE               	movwf	tosh,c
  2300  000282  50F8               	movf	tblptru,w,c
  2301  000284  6EFF               	movwf	tosu,c
  2302  000286  50FA               	movf	pclath,w,c
  2303  000288  0012               	return		;indir
  2304  00028A                     u4109:
  2305  00028A                     
  2306                           ;main.c: 177:                             setT1(1000);
  2307  00028A  0EE8               	movlw	232
  2308  00028C  6E2C               	movwf	setT1@c^0,c
  2309  00028E  0E03               	movlw	3
  2310  000290  6E2D               	movwf	(setT1@c+1)^0,c
  2311  000292  0E00               	movlw	0
  2312  000294  6E2E               	movwf	(setT1@c+2)^0,c
  2313  000296  0E00               	movlw	0
  2314  000298  6E2F               	movwf	(setT1@c+3)^0,c
  2315  00029A  EC0B  F01D         	call	_setT1	;wreg free
  2316  00029E                     
  2317                           ;main.c: 178:                             estado = 9;
  2318  00029E  0E09               	movlw	9
  2319  0002A0  0100               	movlb	0	; () banked
  2320  0002A2  6FBB               	movwf	main@estado& (0+255),b
  2321                           
  2322                           ;main.c: 179:                             break;
  2323  0002A4  EFA4  F00D         	goto	l6534
  2324  0002A8                     l5884:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;main.c: 182:                             if(!statusT1())
  2328  0002A8  EC3D  F01D         	call	_statusT1	;wreg free
  2329  0002AC  5026               	movf	?_statusT1^0,w,c
  2330  0002AE  1027               	iorwf	(?_statusT1+1)^0,w,c
  2331  0002B0  1028               	iorwf	(?_statusT1+2)^0,w,c
  2332  0002B2  1029               	iorwf	(?_statusT1+3)^0,w,c
  2333  0002B4  A4D8               	btfss	status,2,c
  2334  0002B6  EF5F  F001         	goto	u4111
  2335  0002BA  EF61  F001         	goto	u4110
  2336  0002BE                     u4111:
  2337  0002BE  EFA4  F00D         	goto	l6534
  2338  0002C2                     u4110:
  2339  0002C2                     
  2340                           ;main.c: 183:                                 estado = 71;
  2341  0002C2  0E47               	movlw	71
  2342  0002C4  0100               	movlb	0	; () banked
  2343  0002C6  6FBB               	movwf	main@estado& (0+255),b
  2344  0002C8  EFA4  F00D         	goto	l6534
  2345  0002CC                     l5888:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 187:                             tecla = teclado_borda();
  2349  0002CC  EC94  F01B         	call	_teclado_borda	;wreg free
  2350  0002D0  0100               	movlb	0	; () banked
  2351  0002D2  6FBC               	movwf	main@tecla& (0+255),b
  2352                           
  2353                           ;main.c: 188:                             switch(tecla)
  2354  0002D4  EF7E  F001         	goto	l5900
  2355  0002D8                     l5890:
  2356  0002D8  0E03               	movlw	3
  2357  0002DA  0100               	movlb	0	; () banked
  2358  0002DC  6FBB               	movwf	main@estado& (0+255),b
  2359  0002DE  EFA4  F00D         	goto	l6534
  2360  0002E2                     l5892:
  2361                           
  2362                           ; BSR set to: 0
  2363  0002E2  0E48               	movlw	72
  2364  0002E4  6FBB               	movwf	main@estado& (0+255),b
  2365  0002E6  EFA4  F00D         	goto	l6534
  2366  0002EA                     l5894:
  2367                           
  2368                           ; BSR set to: 0
  2369  0002EA  0E64               	movlw	100
  2370  0002EC  6FBB               	movwf	main@estado& (0+255),b
  2371  0002EE  EFA4  F00D         	goto	l6534
  2372  0002F2                     l5896:
  2373  0002F2  0E50               	movlw	80
  2374  0002F4  0100               	movlb	0	; () banked
  2375  0002F6  6FBB               	movwf	main@estado& (0+255),b
  2376  0002F8  EFA4  F00D         	goto	l6534
  2377  0002FC                     l5900:
  2378                           
  2379                           ; BSR set to: 0
  2380  0002FC  51BC               	movf	main@tecla& (0+255),w,b
  2381  0002FE  6E44               	movwf	??_main^0,c
  2382  000300  6A45               	clrf	(??_main+1)^0,c
  2383                           
  2384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2385                           ; Switch size 1, requested type "simple"
  2386                           ; Number of cases is 1, Range of values is 0 to 0
  2387                           ; switch strategies available:
  2388                           ; Name         Instructions Cycles
  2389                           ; simple_byte            4     3 (average)
  2390                           ;	Chosen strategy is simple_byte
  2391  000302  5045               	movf	(??_main+1)^0,w,c
  2392  000304  0A00               	xorlw	0	; case 0
  2393  000306  B4D8               	btfsc	status,2,c
  2394  000308  EF88  F001         	goto	l7324
  2395  00030C  EFA4  F00D         	goto	l6534
  2396  000310                     l7324:
  2397                           
  2398                           ; BSR set to: 0
  2399                           ; Switch size 1, requested type "simple"
  2400                           ; Number of cases is 4, Range of values is 49 to 52
  2401                           ; switch strategies available:
  2402                           ; Name         Instructions Cycles
  2403                           ; simple_byte           13     7 (average)
  2404                           ;	Chosen strategy is simple_byte
  2405  000310  5044               	movf	??_main^0,w,c
  2406  000312  0A31               	xorlw	49	; case 49
  2407  000314  B4D8               	btfsc	status,2,c
  2408  000316  EF6C  F001         	goto	l5890
  2409  00031A  0A03               	xorlw	3	; case 50
  2410  00031C  B4D8               	btfsc	status,2,c
  2411  00031E  EF71  F001         	goto	l5892
  2412  000322  0A01               	xorlw	1	; case 51
  2413  000324  B4D8               	btfsc	status,2,c
  2414  000326  EF75  F001         	goto	l5894
  2415  00032A  0A07               	xorlw	7	; case 52
  2416  00032C  B4D8               	btfsc	status,2,c
  2417  00032E  EF79  F001         	goto	l5896
  2418  000332  EFA4  F00D         	goto	l6534
  2419  000336                     l5902:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;main.c: 199:                             buscar_dado(10, 10, &init_cond);
  2423  000336  0E0A               	movlw	10
  2424  000338  6E2C               	movwf	buscar_dado@col^0,c
  2425  00033A  0EB2               	movlw	low main@init_cond
  2426  00033C  6E2D               	movwf	buscar_dado@data^0,c
  2427  00033E  0E00               	movlw	high main@init_cond
  2428  000340  6E2E               	movwf	(buscar_dado@data+1)^0,c
  2429  000342  0E0A               	movlw	10
  2430  000344  EC68  F01C         	call	_buscar_dado
  2431  000348                     
  2432                           ;main.c: 200:                             manipula_atuadores_init(init_cond);
  2433  000348  0100               	movlb	0	; () banked
  2434  00034A  51B2               	movf	main@init_cond& (0+255),w,b
  2435  00034C  ECFC  F019         	call	_manipula_atuadores_init
  2436  000350                     
  2437                           ;main.c: 202:                             EEPROM.buscar(11, vetor_aux);
  2438  000350  EE20  F0D3         	lfsr	2,_EEPROM+2
  2439  000354  D802               	call	u4128
  2440  000356  EFBC  F001         	goto	u4129
  2441  00035A                     u4128:
  2442  00035A  0005               	push	
  2443  00035C  6EFA               	movwf	pclath,c
  2444  00035E  50DE               	movf	postinc2,w,c
  2445  000360  6EFD               	movwf	tosl,c
  2446  000362  50DE               	movf	postinc2,w,c
  2447  000364  6EFE               	movwf	tosh,c
  2448  000366  50F8               	movf	tblptru,w,c
  2449  000368  6EFF               	movwf	tosu,c
  2450  00036A  50FA               	movf	pclath,w,c
  2451  00036C  0E76               	movlw	low main@vetor_aux
  2452  00036E  6E2C               	movwf	buscar_receita@data^0,c
  2453  000370  0E00               	movlw	high main@vetor_aux
  2454  000372  6E2D               	movwf	(buscar_receita@data+1)^0,c
  2455  000374  0E0B               	movlw	11
  2456  000376  0012               	return		;indir
  2457  000378                     u4129:
  2458  000378                     
  2459                           ;main.c: 203:                             pt = vetor_aux;
  2460  000378  0E76               	movlw	low main@vetor_aux
  2461  00037A  0100               	movlb	0	; () banked
  2462  00037C  6F9D               	movwf	main@pt& (0+255),b
  2463  00037E  0E00               	movlw	high main@vetor_aux
  2464  000380  6F9E               	movwf	(main@pt+1)& (0+255),b
  2465  000382                     
  2466                           ; BSR set to: 0
  2467                           ;main.c: 205:                             if(*pt == 0xFF)
  2468  000382  C09D  FFD9         	movff	main@pt,fsr2l
  2469  000386  C09E  FFDA         	movff	main@pt+1,fsr2h
  2470  00038A  28DE               	incf	postinc2,w,c
  2471  00038C  A4D8               	btfss	status,2,c
  2472  00038E  EFCB  F001         	goto	u4131
  2473  000392  EFCD  F001         	goto	u4130
  2474  000396                     u4131:
  2475  000396  EFE9  F001         	goto	l5916
  2476  00039A                     u4130:
  2477  00039A                     
  2478                           ; BSR set to: 0
  2479                           ;main.c: 206:                             {;main.c: 207:                                
      +                           EEPROM.deletar(tecla % 0x30);
  2480  00039A  EE20  F0D5         	lfsr	2,_EEPROM+4
  2481  00039E  D802               	call	u4148
  2482  0003A0  EFE6  F001         	goto	u4149
  2483  0003A4                     u4148:
  2484  0003A4  0005               	push	
  2485  0003A6  6EFA               	movwf	pclath,c
  2486  0003A8  50DE               	movf	postinc2,w,c
  2487  0003AA  6EFD               	movwf	tosl,c
  2488  0003AC  50DE               	movf	postinc2,w,c
  2489  0003AE  6EFE               	movwf	tosh,c
  2490  0003B0  50F8               	movf	tblptru,w,c
  2491  0003B2  6EFF               	movwf	tosu,c
  2492  0003B4  50FA               	movf	pclath,w,c
  2493  0003B6  C0BC  F026         	movff	main@tecla,___awmod@dividend
  2494  0003BA  6A27               	clrf	(___awmod@dividend+1)^0,c
  2495  0003BC  0E00               	movlw	0
  2496  0003BE  6E29               	movwf	(___awmod@divisor+1)^0,c
  2497  0003C0  0E30               	movlw	48
  2498  0003C2  6E28               	movwf	___awmod@divisor^0,c
  2499  0003C4  ECF7  F015         	call	___awmod
  2500  0003C8  5026               	movf	?___awmod^0,w,c
  2501  0003CA  0012               	return		;indir
  2502  0003CC                     u4149:
  2503  0003CC                     
  2504                           ;main.c: 208:                                 vetor_aux[0] = 0;
  2505  0003CC  0E00               	movlw	0
  2506  0003CE  0100               	movlb	0	; () banked
  2507  0003D0  6F76               	movwf	main@vetor_aux& (0+255),b
  2508  0003D2                     l5916:
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;main.c: 212:                             for(char *ptr = vetor_aux; *ptr != 0; ptr++)
  2512  0003D2  0E76               	movlw	low main@vetor_aux
  2513  0003D4  6FB6               	movwf	main@ptr_545& (0+255),b
  2514  0003D6  0E00               	movlw	high main@vetor_aux
  2515  0003D8  6FB7               	movwf	(main@ptr_545+1)& (0+255),b
  2516  0003DA  EFB6  F002         	goto	l5950
  2517  0003DE                     l5918:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;main.c: 213:                             {;main.c: 214:                                
      +                           if(*ptr <= 0x64 || *ptr == 0xFE)
  2521  0003DE  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2522  0003E2  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2523  0003E6  0E64               	movlw	100
  2524  0003E8  64DF               	cpfsgt	indf2,c
  2525  0003EA  EFF9  F001         	goto	u4151
  2526  0003EE  EFFB  F001         	goto	u4150
  2527  0003F2                     u4151:
  2528  0003F2  EF08  F002         	goto	l5922
  2529  0003F6                     u4150:
  2530  0003F6                     
  2531                           ; BSR set to: 0
  2532  0003F6  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2533  0003FA  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2534  0003FE  0EFE               	movlw	254
  2535  000400  18DE               	xorwf	postinc2,w,c
  2536  000402  A4D8               	btfss	status,2,c
  2537  000404  EF06  F002         	goto	u4161
  2538  000408  EF08  F002         	goto	u4160
  2539  00040C                     u4161:
  2540  00040C  EF17  F002         	goto	l5924
  2541  000410                     u4160:
  2542  000410                     l5922:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 215:                                 {;main.c: 216:                            
      +                                   decodifica(&*ptr);
  2546  000410  C0B6  F026         	movff	main@ptr_545,decodifica@d
  2547  000414  C0B7  F027         	movff	main@ptr_545+1,decodifica@d+1
  2548  000418  EC9E  F012         	call	_decodifica
  2549                           
  2550                           ;main.c: 217:                                     fifo_add_control(*ptr);
  2551  00041C  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2552  000420  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2553  000424  50DF               	movf	indf2,w,c
  2554  000426  EC4B  F01A         	call	_fifo_add_control
  2555                           
  2556                           ;main.c: 218:                                 }
  2557  00042A  EFB1  F002         	goto	l5946
  2558  00042E                     l5924:
  2559                           
  2560                           ; BSR set to: 0
  2561  00042E  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2562  000432  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2563  000436  0E64               	movlw	100
  2564  000438  64DF               	cpfsgt	indf2,c
  2565  00043A  EF21  F002         	goto	u4171
  2566  00043E  EF23  F002         	goto	u4170
  2567  000442                     u4171:
  2568  000442  EF3E  F002         	goto	l5930
  2569  000446                     u4170:
  2570  000446                     
  2571                           ; BSR set to: 0
  2572  000446  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2573  00044A  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2574  00044E  0EDD               	movlw	221
  2575  000450  60DF               	cpfslt	indf2,c
  2576  000452  EF2D  F002         	goto	u4181
  2577  000456  EF2F  F002         	goto	u4180
  2578  00045A                     u4181:
  2579  00045A  EF3E  F002         	goto	l5930
  2580  00045E                     u4180:
  2581  00045E                     
  2582                           ; BSR set to: 0
  2583                           ;main.c: 220:                                 {;main.c: 221:                            
      +                                   decodifica(&*ptr);
  2584  00045E  C0B6  F026         	movff	main@ptr_545,decodifica@d
  2585  000462  C0B7  F027         	movff	main@ptr_545+1,decodifica@d+1
  2586  000466  EC9E  F012         	call	_decodifica	;wreg free
  2587                           
  2588                           ;main.c: 222:                                     fifo_add_tempo(*ptr);
  2589  00046A  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2590  00046E  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2591  000472  50DF               	movf	indf2,w,c
  2592  000474  ECA4  F019         	call	_fifo_add_tempo
  2593                           
  2594                           ;main.c: 223:                                 }
  2595  000478  EFB1  F002         	goto	l5946
  2596  00047C                     l5930:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;main.c: 225:                                 {;main.c: 226:                            
      +                                   decodifica(&*ptr);
  2600  00047C  C0B6  F026         	movff	main@ptr_545,decodifica@d
  2601  000480  C0B7  F027         	movff	main@ptr_545+1,decodifica@d+1
  2602  000484  EC9E  F012         	call	_decodifica	;wreg free
  2603                           
  2604                           ;main.c: 227:                                     switch( *ptr )
  2605  000488  EF4E  F002         	goto	l5936
  2606  00048C                     l181:
  2607  00048C                     l5932:
  2608                           
  2609                           ;main.c: 237:                                                 *ptr &= ~0x20;
  2610  00048C  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2611  000490  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2612  000494  0EDF               	movlw	223
  2613  000496  16DF               	andwf	indf2,f,c
  2614                           
  2615                           ;main.c: 238:                                                 break;
  2616  000498  EF7F  F002         	goto	l5938
  2617  00049C                     l5936:
  2618  00049C  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2619  0004A0  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2620  0004A4  50DF               	movf	indf2,w,c
  2621  0004A6  6E44               	movwf	??_main^0,c
  2622  0004A8  6A45               	clrf	(??_main+1)^0,c
  2623                           
  2624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2625                           ; Switch size 1, requested type "simple"
  2626                           ; Number of cases is 1, Range of values is 0 to 0
  2627                           ; switch strategies available:
  2628                           ; Name         Instructions Cycles
  2629                           ; simple_byte            4     3 (average)
  2630                           ;	Chosen strategy is simple_byte
  2631  0004AA  5045               	movf	(??_main+1)^0,w,c
  2632  0004AC  0A00               	xorlw	0	; case 0
  2633  0004AE  B4D8               	btfsc	status,2,c
  2634  0004B0  EF5C  F002         	goto	l7326
  2635  0004B4  EF7F  F002         	goto	l5938
  2636  0004B8                     l7326:
  2637                           
  2638                           ; Switch size 1, requested type "simple"
  2639                           ; Number of cases is 8, Range of values is 65 to 100
  2640                           ; switch strategies available:
  2641                           ; Name         Instructions Cycles
  2642                           ; simple_byte           25    13 (average)
  2643                           ;	Chosen strategy is simple_byte
  2644  0004B8  5044               	movf	??_main^0,w,c
  2645  0004BA  0A41               	xorlw	65	; case 65
  2646  0004BC  B4D8               	btfsc	status,2,c
  2647  0004BE  EF46  F002         	goto	l181
  2648  0004C2  0A03               	xorlw	3	; case 66
  2649  0004C4  B4D8               	btfsc	status,2,c
  2650  0004C6  EF46  F002         	goto	l5932
  2651  0004CA  0A01               	xorlw	1	; case 67
  2652  0004CC  B4D8               	btfsc	status,2,c
  2653  0004CE  EF46  F002         	goto	l5932
  2654  0004D2  0A07               	xorlw	7	; case 68
  2655  0004D4  B4D8               	btfsc	status,2,c
  2656  0004D6  EF46  F002         	goto	l5932
  2657  0004DA  0A25               	xorlw	37	; case 97
  2658  0004DC  B4D8               	btfsc	status,2,c
  2659  0004DE  EF46  F002         	goto	l5932
  2660  0004E2  0A03               	xorlw	3	; case 98
  2661  0004E4  B4D8               	btfsc	status,2,c
  2662  0004E6  EF46  F002         	goto	l5932
  2663  0004EA  0A01               	xorlw	1	; case 99
  2664  0004EC  B4D8               	btfsc	status,2,c
  2665  0004EE  EF46  F002         	goto	l5932
  2666  0004F2  0A07               	xorlw	7	; case 100
  2667  0004F4  B4D8               	btfsc	status,2,c
  2668  0004F6  EF46  F002         	goto	l5932
  2669  0004FA  EF7F  F002         	goto	l5938
  2670  0004FE                     l5938:
  2671                           
  2672                           ;main.c: 240:                                         alt_atuador(*ptr);
  2673  0004FE  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2674  000502  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2675  000506  50DF               	movf	indf2,w,c
  2676  000508  EC45  F017         	call	_alt_atuador
  2677                           
  2678                           ;main.c: 241:                                         fifo_add( ler_atuador(*ptr) ? *ptr
      +                           : *ptr|0x20 );
  2679  00050C  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2680  000510  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2681  000514  50DF               	movf	indf2,w,c
  2682  000516  ECF5  F016         	call	_ler_atuador
  2683  00051A  0900               	iorlw	0
  2684  00051C  A4D8               	btfss	status,2,c
  2685  00051E  EF93  F002         	goto	u4191
  2686  000522  EF95  F002         	goto	u4190
  2687  000526                     u4191:
  2688  000526  EFA4  F002         	goto	l5942
  2689  00052A                     u4190:
  2690  00052A  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2691  00052E  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2692  000532  50DF               	movf	indf2,w,c
  2693  000534  6E44               	movwf	??_main^0,c
  2694  000536  6A45               	clrf	(??_main+1)^0,c
  2695  000538  0E20               	movlw	32
  2696  00053A  1044               	iorwf	??_main^0,w,c
  2697  00053C  0100               	movlb	0	; () banked
  2698  00053E  6F86               	movwf	_main$546& (0+255),b
  2699  000540  5045               	movf	(??_main+1)^0,w,c
  2700  000542  6F87               	movwf	(_main$546+1)& (0+255),b
  2701  000544  EFAE  F002         	goto	l5944
  2702  000548                     l5942:
  2703  000548  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2704  00054C  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2705  000550  50DF               	movf	indf2,w,c
  2706  000552  6E44               	movwf	??_main^0,c
  2707  000554  5044               	movf	??_main^0,w,c
  2708  000556  0100               	movlb	0	; () banked
  2709  000558  6F86               	movwf	_main$546& (0+255),b
  2710  00055A  6B87               	clrf	(_main$546+1)& (0+255),b
  2711  00055C                     l5944:
  2712                           
  2713                           ; BSR set to: 0
  2714  00055C  5186               	movf	_main$546& (0+255),w,b
  2715  00055E  ECD0  F019         	call	_fifo_add
  2716  000562                     l5946:
  2717                           
  2718                           ;main.c: 243:                                 fifo_print();
  2719  000562  EC00  F00F         	call	_fifo_print	;wreg free
  2720  000566                     
  2721                           ;main.c: 244:                             }
  2722  000566  0100               	movlb	0	; () banked
  2723  000568  4BB6               	infsnz	main@ptr_545& (0+255),f,b
  2724  00056A  2BB7               	incf	(main@ptr_545+1)& (0+255),f,b
  2725  00056C                     l5950:
  2726                           
  2727                           ; BSR set to: 0
  2728  00056C  C0B6  FFD9         	movff	main@ptr_545,fsr2l
  2729  000570  C0B7  FFDA         	movff	main@ptr_545+1,fsr2h
  2730  000574  50DF               	movf	indf2,w,c
  2731  000576  A4D8               	btfss	status,2,c
  2732  000578  EFC0  F002         	goto	u4201
  2733  00057C  EFC2  F002         	goto	u4200
  2734  000580                     u4201:
  2735  000580  EFEF  F001         	goto	l5918
  2736  000584                     u4200:
  2737  000584                     l5952:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 246:                             dispLCD_clr();
  2741  000584  EC85  F01D         	call	_dispLCD_clr	;wreg free
  2742  000588                     l5954:
  2743                           
  2744                           ;main.c: 247:                             estado = 16;
  2745  000588  0E10               	movlw	16
  2746  00058A  0100               	movlb	0	; () banked
  2747  00058C  6FBB               	movwf	main@estado& (0+255),b
  2748                           
  2749                           ;main.c: 248:                             break;
  2750  00058E  EFA4  F00D         	goto	l6534
  2751  000592                     l5956:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 251:                             dispLCD_clr();
  2755  000592  EC85  F01D         	call	_dispLCD_clr	;wreg free
  2756  000596                     
  2757                           ;main.c: 252:                             dispLCD(0,0,"1: VERIFICAR MEMORIA");
  2758  000596  0E00               	movlw	0
  2759  000598  6E2D               	movwf	dispLCD@col^0,c
  2760  00059A  0ECB               	movlw	low STR_5
  2761  00059C  6E2E               	movwf	dispLCD@str^0,c
  2762  00059E  0E7F               	movlw	high STR_5
  2763  0005A0  6E2F               	movwf	(dispLCD@str+1)^0,c
  2764  0005A2  0E00               	movlw	0
  2765  0005A4  EC6F  F01A         	call	_dispLCD
  2766  0005A8                     
  2767                           ;main.c: 253:                             dispLCD(1,0,"2: LIMPAR MEMORIA   ");
  2768  0005A8  0E00               	movlw	0
  2769  0005AA  6E2D               	movwf	dispLCD@col^0,c
  2770  0005AC  0E4D               	movlw	low STR_6
  2771  0005AE  6E2E               	movwf	dispLCD@str^0,c
  2772  0005B0  0E7F               	movlw	high STR_6
  2773  0005B2  6E2F               	movwf	(dispLCD@str+1)^0,c
  2774  0005B4  0E01               	movlw	1
  2775  0005B6  EC6F  F01A         	call	_dispLCD
  2776  0005BA                     
  2777                           ;main.c: 255:                             setT1(1000);
  2778  0005BA  0EE8               	movlw	232
  2779  0005BC  6E2C               	movwf	setT1@c^0,c
  2780  0005BE  0E03               	movlw	3
  2781  0005C0  6E2D               	movwf	(setT1@c+1)^0,c
  2782  0005C2  0E00               	movlw	0
  2783  0005C4  6E2E               	movwf	(setT1@c+2)^0,c
  2784  0005C6  0E00               	movlw	0
  2785  0005C8  6E2F               	movwf	(setT1@c+3)^0,c
  2786  0005CA  EC0B  F01D         	call	_setT1	;wreg free
  2787  0005CE                     
  2788                           ;main.c: 256:                             estado = 81;
  2789  0005CE  0E51               	movlw	81
  2790  0005D0  0100               	movlb	0	; () banked
  2791  0005D2  6FBB               	movwf	main@estado& (0+255),b
  2792                           
  2793                           ;main.c: 257:                             break;
  2794  0005D4  EFA4  F00D         	goto	l6534
  2795  0005D8                     l5966:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 260:                             if(!statusT1())
  2799  0005D8  EC3D  F01D         	call	_statusT1	;wreg free
  2800  0005DC  5026               	movf	?_statusT1^0,w,c
  2801  0005DE  1027               	iorwf	(?_statusT1+1)^0,w,c
  2802  0005E0  1028               	iorwf	(?_statusT1+2)^0,w,c
  2803  0005E2  1029               	iorwf	(?_statusT1+3)^0,w,c
  2804  0005E4  A4D8               	btfss	status,2,c
  2805  0005E6  EFF7  F002         	goto	u4211
  2806  0005EA  EFF9  F002         	goto	u4210
  2807  0005EE                     u4211:
  2808  0005EE  EFA4  F00D         	goto	l6534
  2809  0005F2                     u4210:
  2810  0005F2                     
  2811                           ;main.c: 261:                                 estado = 82;
  2812  0005F2  0E52               	movlw	82
  2813  0005F4  0100               	movlb	0	; () banked
  2814  0005F6  6FBB               	movwf	main@estado& (0+255),b
  2815  0005F8  EFA4  F00D         	goto	l6534
  2816  0005FC                     l5970:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 265:                             tecla = teclado_borda();
  2820  0005FC  EC94  F01B         	call	_teclado_borda	;wreg free
  2821  000600  0100               	movlb	0	; () banked
  2822  000602  6FBC               	movwf	main@tecla& (0+255),b
  2823                           
  2824                           ;main.c: 266:                             switch(tecla)
  2825  000604  EF0C  F003         	goto	l5980
  2826  000608                     l5972:
  2827                           
  2828                           ; BSR set to: 0
  2829  000608  0E53               	movlw	83
  2830  00060A  6FBB               	movwf	main@estado& (0+255),b
  2831  00060C  EFA4  F00D         	goto	l6534
  2832  000610                     l5974:
  2833                           
  2834                           ; BSR set to: 0
  2835  000610  0E54               	movlw	84
  2836  000612  6FBB               	movwf	main@estado& (0+255),b
  2837  000614  EFA4  F00D         	goto	l6534
  2838  000618                     l5980:
  2839                           
  2840                           ; BSR set to: 0
  2841  000618  51BC               	movf	main@tecla& (0+255),w,b
  2842  00061A  6E44               	movwf	??_main^0,c
  2843  00061C  6A45               	clrf	(??_main+1)^0,c
  2844                           
  2845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2846                           ; Switch size 1, requested type "simple"
  2847                           ; Number of cases is 1, Range of values is 0 to 0
  2848                           ; switch strategies available:
  2849                           ; Name         Instructions Cycles
  2850                           ; simple_byte            4     3 (average)
  2851                           ;	Chosen strategy is simple_byte
  2852  00061E  5045               	movf	(??_main+1)^0,w,c
  2853  000620  0A00               	xorlw	0	; case 0
  2854  000622  B4D8               	btfsc	status,2,c
  2855  000624  EF16  F003         	goto	l7328
  2856  000628  EFA4  F00D         	goto	l6534
  2857  00062C                     l7328:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ; Switch size 1, requested type "simple"
  2861                           ; Number of cases is 3, Range of values is 42 to 50
  2862                           ; switch strategies available:
  2863                           ; Name         Instructions Cycles
  2864                           ; simple_byte           10     6 (average)
  2865                           ;	Chosen strategy is simple_byte
  2866  00062C  5044               	movf	??_main^0,w,c
  2867  00062E  0A2A               	xorlw	42	; case 42
  2868  000630  B4D8               	btfsc	status,2,c
  2869  000632  EF2B  F001         	goto	l5874
  2870  000636  0A1B               	xorlw	27	; case 49
  2871  000638  B4D8               	btfsc	status,2,c
  2872  00063A  EF04  F003         	goto	l5972
  2873  00063E  0A03               	xorlw	3	; case 50
  2874  000640  B4D8               	btfsc	status,2,c
  2875  000642  EF08  F003         	goto	l5974
  2876  000646  EFA4  F00D         	goto	l6534
  2877  00064A                     l5982:
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 275:                             dispLCD(0, 0, " CERTEZA QUE DESEJA ");
  2881  00064A  0E00               	movlw	0
  2882  00064C  6E2D               	movwf	dispLCD@col^0,c
  2883  00064E  0EA1               	movlw	low STR_7
  2884  000650  6E2E               	movwf	dispLCD@str^0,c
  2885  000652  0E7F               	movlw	high STR_7
  2886  000654  6E2F               	movwf	(dispLCD@str+1)^0,c
  2887  000656  0E00               	movlw	0
  2888  000658  EC6F  F01A         	call	_dispLCD
  2889                           
  2890                           ;main.c: 276:                             dispLCD(1, 0, "   DELETAR TODA A   ");
  2891  00065C  0E00               	movlw	0
  2892  00065E  6E2D               	movwf	dispLCD@col^0,c
  2893  000660  0E38               	movlw	low STR_8
  2894  000662  6E2E               	movwf	dispLCD@str^0,c
  2895  000664  0E7F               	movlw	high STR_8
  2896  000666  6E2F               	movwf	(dispLCD@str+1)^0,c
  2897  000668  0E01               	movlw	1
  2898  00066A  EC6F  F01A         	call	_dispLCD
  2899                           
  2900                           ;main.c: 277:                             dispLCD(2, 0, "      MEMORIA ?     ");
  2901  00066E  0E00               	movlw	0
  2902  000670  6E2D               	movwf	dispLCD@col^0,c
  2903  000672  0EE4               	movlw	low STR_9
  2904  000674  6E2E               	movwf	dispLCD@str^0,c
  2905  000676  0E7E               	movlw	high STR_9
  2906  000678  6E2F               	movwf	(dispLCD@str+1)^0,c
  2907  00067A  0E02               	movlw	2
  2908  00067C  EC6F  F01A         	call	_dispLCD
  2909                           
  2910                           ;main.c: 278:                             dispLCD(3, 0, "# - SIM      * - NAO");
  2911  000680  0E00               	movlw	0
  2912  000682  6E2D               	movwf	dispLCD@col^0,c
  2913  000684  0E3C               	movlw	low (STR_26+41)
  2914  000686  6E2E               	movwf	dispLCD@str^0,c
  2915  000688  0E7E               	movlw	high (STR_26+41)
  2916  00068A  6E2F               	movwf	(dispLCD@str+1)^0,c
  2917  00068C  0E03               	movlw	3
  2918  00068E  EC6F  F01A         	call	_dispLCD
  2919  000692                     
  2920                           ;main.c: 280:                             tecla = teclado_borda();
  2921  000692  EC94  F01B         	call	_teclado_borda	;wreg free
  2922  000696  0100               	movlb	0	; () banked
  2923  000698  6FBC               	movwf	main@tecla& (0+255),b
  2924                           
  2925                           ;main.c: 281:                             switch(tecla)
  2926  00069A  EF57  F003         	goto	l5994
  2927  00069E                     l5986:
  2928                           
  2929                           ; BSR set to: 0
  2930  00069E  0E55               	movlw	85
  2931  0006A0  6FBB               	movwf	main@estado& (0+255),b
  2932  0006A2  EFA4  F00D         	goto	l6534
  2933  0006A6                     l5988:
  2934                           
  2935                           ; BSR set to: 0
  2936  0006A6  EC85  F01D         	call	_dispLCD_clr	;wreg free
  2937  0006AA  EF79  F001         	goto	l5896
  2938  0006AE                     l5994:
  2939                           
  2940                           ; BSR set to: 0
  2941  0006AE  51BC               	movf	main@tecla& (0+255),w,b
  2942  0006B0  6E44               	movwf	??_main^0,c
  2943  0006B2  6A45               	clrf	(??_main+1)^0,c
  2944                           
  2945                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2946                           ; Switch size 1, requested type "simple"
  2947                           ; Number of cases is 1, Range of values is 0 to 0
  2948                           ; switch strategies available:
  2949                           ; Name         Instructions Cycles
  2950                           ; simple_byte            4     3 (average)
  2951                           ;	Chosen strategy is simple_byte
  2952  0006B4  5045               	movf	(??_main+1)^0,w,c
  2953  0006B6  0A00               	xorlw	0	; case 0
  2954  0006B8  B4D8               	btfsc	status,2,c
  2955  0006BA  EF61  F003         	goto	l7330
  2956  0006BE  EFA4  F00D         	goto	l6534
  2957  0006C2                     l7330:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ; Switch size 1, requested type "simple"
  2961                           ; Number of cases is 2, Range of values is 35 to 42
  2962                           ; switch strategies available:
  2963                           ; Name         Instructions Cycles
  2964                           ; simple_byte            7     4 (average)
  2965                           ;	Chosen strategy is simple_byte
  2966  0006C2  5044               	movf	??_main^0,w,c
  2967  0006C4  0A23               	xorlw	35	; case 35
  2968  0006C6  B4D8               	btfsc	status,2,c
  2969  0006C8  EF4F  F003         	goto	l5986
  2970  0006CC  0A09               	xorlw	9	; case 42
  2971  0006CE  B4D8               	btfsc	status,2,c
  2972  0006D0  EF53  F003         	goto	l5988
  2973  0006D4  EFA4  F00D         	goto	l6534
  2974  0006D8                     l5996:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 290:                             EEPROM.formatar();
  2978  0006D8  EE20  F0D9         	lfsr	2,_EEPROM+8
  2979  0006DC  D802               	call	u4228
  2980  0006DE  EF7B  F003         	goto	u4229
  2981  0006E2                     u4228:
  2982  0006E2  0005               	push	
  2983  0006E4  6EFA               	movwf	pclath,c
  2984  0006E6  50DE               	movf	postinc2,w,c
  2985  0006E8  6EFD               	movwf	tosl,c
  2986  0006EA  50DE               	movf	postinc2,w,c
  2987  0006EC  6EFE               	movwf	tosh,c
  2988  0006EE  50F8               	movf	tblptru,w,c
  2989  0006F0  6EFF               	movwf	tosu,c
  2990  0006F2  50FA               	movf	pclath,w,c
  2991  0006F4  0012               	return		;indir
  2992  0006F6                     u4229:
  2993  0006F6                     
  2994                           ;main.c: 291:                             dispLCD_clr();
  2995  0006F6  EC85  F01D         	call	_dispLCD_clr	;wreg free
  2996  0006FA                     
  2997                           ;main.c: 292:                             for(char i = 0; i <= 3; i++)
  2998  0006FA  0E00               	movlw	0
  2999  0006FC  0100               	movlb	0	; () banked
  3000  0006FE  6FA5               	movwf	main@i_554& (0+255),b
  3001  000700                     l6002:
  3002                           
  3003                           ; BSR set to: 0
  3004  000700  0E03               	movlw	3
  3005  000702  65A5               	cpfsgt	main@i_554& (0+255),b
  3006  000704  EF86  F003         	goto	u4231
  3007  000708  EF88  F003         	goto	u4230
  3008  00070C                     u4231:
  3009  00070C  EF8A  F003         	goto	l6006
  3010  000710                     u4230:
  3011  000710  EFAC  F003         	goto	l6024
  3012  000714                     l6006:
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;main.c: 293:                             {;main.c: 294:                                
      +                           for(char j = 0; j <= 19; j++)
  3016  000714  0E00               	movlw	0
  3017  000716  6FA6               	movwf	main@j_555& (0+255),b
  3018  000718                     l6008:
  3019                           
  3020                           ; BSR set to: 0
  3021  000718  0E13               	movlw	19
  3022  00071A  65A6               	cpfsgt	main@j_555& (0+255),b
  3023  00071C  EF92  F003         	goto	u4241
  3024  000720  EF94  F003         	goto	u4240
  3025  000724                     u4241:
  3026  000724  EF96  F003         	goto	l6012
  3027  000728                     u4240:
  3028  000728  EFA9  F003         	goto	l6020
  3029  00072C                     l6012:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;main.c: 295:                                 {;main.c: 296:                            
      +                                   dispLCD(i, j, "\377");
  3033  00072C  C0A6  F02D         	movff	main@j_555,dispLCD@col
  3034  000730  0EFD               	movlw	low STR_1
  3035  000732  6E2E               	movwf	dispLCD@str^0,c
  3036  000734  0E7F               	movlw	high STR_1
  3037  000736  6E2F               	movwf	(dispLCD@str+1)^0,c
  3038  000738  51A5               	movf	main@i_554& (0+255),w,b
  3039  00073A  EC6F  F01A         	call	_dispLCD
  3040  00073E                     
  3041                           ;main.c: 297:                                     delay(10);
  3042  00073E  0E00               	movlw	0
  3043  000740  6E27               	movwf	(delay@t+1)^0,c
  3044  000742  0E0A               	movlw	10
  3045  000744  6E26               	movwf	delay@t^0,c
  3046  000746  EC27  F01C         	call	_delay	;wreg free
  3047  00074A                     
  3048                           ;main.c: 298:                                 }
  3049  00074A  0100               	movlb	0	; () banked
  3050  00074C  2BA6               	incf	main@j_555& (0+255),f,b
  3051  00074E  EF8C  F003         	goto	l6008
  3052  000752                     l6020:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;main.c: 299:                             }
  3056  000752  2BA5               	incf	main@i_554& (0+255),f,b
  3057  000754  EF80  F003         	goto	l6002
  3058  000758                     l6024:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;main.c: 301:                             for(char i = 0; i <= 3; i++)
  3062  000758  0E00               	movlw	0
  3063  00075A  6FA7               	movwf	main@i_557& (0+255),b
  3064  00075C                     l6026:
  3065                           
  3066                           ; BSR set to: 0
  3067  00075C  0E03               	movlw	3
  3068  00075E  65A7               	cpfsgt	main@i_557& (0+255),b
  3069  000760  EFB4  F003         	goto	u4251
  3070  000764  EFB6  F003         	goto	u4250
  3071  000768                     u4251:
  3072  000768  EFB8  F003         	goto	l6030
  3073  00076C                     u4250:
  3074  00076C  EFDA  F003         	goto	l6048
  3075  000770                     l6030:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 302:                             {;main.c: 303:                                
      +                           for(char j = 0; j <= 19; j++)
  3079  000770  0E00               	movlw	0
  3080  000772  6FA8               	movwf	main@j_558& (0+255),b
  3081  000774                     l6032:
  3082                           
  3083                           ; BSR set to: 0
  3084  000774  0E13               	movlw	19
  3085  000776  65A8               	cpfsgt	main@j_558& (0+255),b
  3086  000778  EFC0  F003         	goto	u4261
  3087  00077C  EFC2  F003         	goto	u4260
  3088  000780                     u4261:
  3089  000780  EFC4  F003         	goto	l6036
  3090  000784                     u4260:
  3091  000784  EFD7  F003         	goto	l6044
  3092  000788                     l6036:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;main.c: 304:                                 {;main.c: 305:                            
      +                                   dispLCD(i, j, " ");
  3096  000788  C0A8  F02D         	movff	main@j_558,dispLCD@col
  3097  00078C  0E64               	movlw	low (STR_24+19)
  3098  00078E  6E2E               	movwf	dispLCD@str^0,c
  3099  000790  0E7E               	movlw	high (STR_24+19)
  3100  000792  6E2F               	movwf	(dispLCD@str+1)^0,c
  3101  000794  51A7               	movf	main@i_557& (0+255),w,b
  3102  000796  EC6F  F01A         	call	_dispLCD
  3103  00079A                     
  3104                           ;main.c: 306:                                     delay(10);
  3105  00079A  0E00               	movlw	0
  3106  00079C  6E27               	movwf	(delay@t+1)^0,c
  3107  00079E  0E0A               	movlw	10
  3108  0007A0  6E26               	movwf	delay@t^0,c
  3109  0007A2  EC27  F01C         	call	_delay	;wreg free
  3110  0007A6                     
  3111                           ;main.c: 307:                                 }
  3112  0007A6  0100               	movlb	0	; () banked
  3113  0007A8  2BA8               	incf	main@j_558& (0+255),f,b
  3114  0007AA  EFBA  F003         	goto	l6032
  3115  0007AE                     l6044:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;main.c: 308:                             }
  3119  0007AE  2BA7               	incf	main@i_557& (0+255),f,b
  3120  0007B0  EFAE  F003         	goto	l6026
  3121  0007B4                     l6048:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 309:                             dispLCD(1, 0, "       DELETED      ");
  3125  0007B4  0E00               	movlw	0
  3126  0007B6  6E2D               	movwf	dispLCD@col^0,c
  3127  0007B8  0EBA               	movlw	low STR_13
  3128  0007BA  6E2E               	movwf	dispLCD@str^0,c
  3129  0007BC  0E7E               	movlw	high STR_13
  3130  0007BE  6E2F               	movwf	(dispLCD@str+1)^0,c
  3131  0007C0  0E01               	movlw	1
  3132  0007C2  EC6F  F01A         	call	_dispLCD
  3133                           
  3134                           ;main.c: 310:                             dispLCD(2, 0, "        MEMORY      ");
  3135  0007C6  0E00               	movlw	0
  3136  0007C8  6E2D               	movwf	dispLCD@col^0,c
  3137  0007CA  0ECF               	movlw	low STR_14
  3138  0007CC  6E2E               	movwf	dispLCD@str^0,c
  3139  0007CE  0E7E               	movlw	high STR_14
  3140  0007D0  6E2F               	movwf	(dispLCD@str+1)^0,c
  3141  0007D2  0E02               	movlw	2
  3142  0007D4  EC6F  F01A         	call	_dispLCD
  3143  0007D8                     
  3144                           ;main.c: 312:                             setT1(1000);
  3145  0007D8  0EE8               	movlw	232
  3146  0007DA  6E2C               	movwf	setT1@c^0,c
  3147  0007DC  0E03               	movlw	3
  3148  0007DE  6E2D               	movwf	(setT1@c+1)^0,c
  3149  0007E0  0E00               	movlw	0
  3150  0007E2  6E2E               	movwf	(setT1@c+2)^0,c
  3151  0007E4  0E00               	movlw	0
  3152  0007E6  6E2F               	movwf	(setT1@c+3)^0,c
  3153  0007E8  EC0B  F01D         	call	_setT1	;wreg free
  3154  0007EC                     
  3155                           ;main.c: 313:                             estado = 86;
  3156  0007EC  0E56               	movlw	86
  3157  0007EE  0100               	movlb	0	; () banked
  3158  0007F0  6FBB               	movwf	main@estado& (0+255),b
  3159                           
  3160                           ;main.c: 314:                             break;
  3161  0007F2  EFA4  F00D         	goto	l6534
  3162  0007F6                     l6054:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 317:                             if(!statusT1())
  3166  0007F6  EC3D  F01D         	call	_statusT1	;wreg free
  3167  0007FA  5026               	movf	?_statusT1^0,w,c
  3168  0007FC  1027               	iorwf	(?_statusT1+1)^0,w,c
  3169  0007FE  1028               	iorwf	(?_statusT1+2)^0,w,c
  3170  000800  1029               	iorwf	(?_statusT1+3)^0,w,c
  3171  000802  A4D8               	btfss	status,2,c
  3172  000804  EF06  F004         	goto	u4271
  3173  000808  EF08  F004         	goto	u4270
  3174  00080C                     u4271:
  3175  00080C  EFA4  F00D         	goto	l6534
  3176  000810                     u4270:
  3177  000810  EF79  F001         	goto	l5896
  3178  000814                     l6058:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 322:                             IHM.clr();
  3182  000814  EE20  F0E3         	lfsr	2,_IHM+8
  3183  000818  D802               	call	u4288
  3184  00081A  EF19  F004         	goto	u4289
  3185  00081E                     u4288:
  3186  00081E  0005               	push	
  3187  000820  6EFA               	movwf	pclath,c
  3188  000822  50DE               	movf	postinc2,w,c
  3189  000824  6EFD               	movwf	tosl,c
  3190  000826  50DE               	movf	postinc2,w,c
  3191  000828  6EFE               	movwf	tosh,c
  3192  00082A  50F8               	movf	tblptru,w,c
  3193  00082C  6EFF               	movwf	tosu,c
  3194  00082E  50FA               	movf	pclath,w,c
  3195  000830  0012               	return		;indir
  3196  000832                     u4289:
  3197  000832                     
  3198                           ;main.c: 323:                             IHM.print(" ESCOLHA A MEMORIA \n"
  3199  000832  0E74               	movlw	low STR_15
  3200  000834  6E2D               	movwf	dispLCD_str@str^0,c
  3201  000836  0E7D               	movlw	high STR_15
  3202  000838  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  3203  00083A  EE20  F0DD         	lfsr	2,_IHM+2
  3204  00083E  D802               	call	u4298
  3205  000840  EF2C  F004         	goto	u4299
  3206  000844                     u4298:
  3207  000844  0005               	push	
  3208  000846  6EFA               	movwf	pclath,c
  3209  000848  50DE               	movf	postinc2,w,c
  3210  00084A  6EFD               	movwf	tosl,c
  3211  00084C  50DE               	movf	postinc2,w,c
  3212  00084E  6EFE               	movwf	tosh,c
  3213  000850  50F8               	movf	tblptru,w,c
  3214  000852  6EFF               	movwf	tosu,c
  3215  000854  50FA               	movf	pclath,w,c
  3216  000856  0012               	return		;indir
  3217  000858                     u4299:
  3218  000858                     
  3219                           ;main.c: 327:                             estado = 73;
  3220  000858  0E49               	movlw	73
  3221  00085A  0100               	movlb	0	; () banked
  3222  00085C  6FBB               	movwf	main@estado& (0+255),b
  3223  00085E                     l6064:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;main.c: 330:                             tecla = teclado_borda();
  3227  00085E  EC94  F01B         	call	_teclado_borda	;wreg free
  3228  000862  0100               	movlb	0	; () banked
  3229  000864  6FBC               	movwf	main@tecla& (0+255),b
  3230                           
  3231                           ;main.c: 331:                             switch(tecla)
  3232  000866  EF70  F005         	goto	l6124
  3233  00086A                     l223:
  3234  00086A                     l6066:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 343:                                            buscar_dado(10, tecla % 0x30, &
      +                          init_cond);
  3238  00086A  C0BC  F026         	movff	main@tecla,___awmod@dividend
  3239  00086E  6A27               	clrf	(___awmod@dividend+1)^0,c
  3240  000870  0E00               	movlw	0
  3241  000872  6E29               	movwf	(___awmod@divisor+1)^0,c
  3242  000874  0E30               	movlw	48
  3243  000876  6E28               	movwf	___awmod@divisor^0,c
  3244  000878  ECF7  F015         	call	___awmod	;wreg free
  3245  00087C  5026               	movf	?___awmod^0,w,c
  3246  00087E  6E2C               	movwf	buscar_dado@col^0,c
  3247  000880  0EB2               	movlw	low main@init_cond
  3248  000882  6E2D               	movwf	buscar_dado@data^0,c
  3249  000884  0E00               	movlw	high main@init_cond
  3250  000886  6E2E               	movwf	(buscar_dado@data+1)^0,c
  3251  000888  0E0A               	movlw	10
  3252  00088A  EC68  F01C         	call	_buscar_dado
  3253  00088E                     
  3254                           ;main.c: 344:                                            manipula_atuadores_init(init_co
      +                          nd);
  3255  00088E  0100               	movlb	0	; () banked
  3256  000890  51B2               	movf	main@init_cond& (0+255),w,b
  3257  000892  ECFC  F019         	call	_manipula_atuadores_init
  3258  000896                     
  3259                           ;main.c: 346:                                            EEPROM.buscar(tecla % 0x30, vet
      +                          or_aux);
  3260  000896  EE20  F0D3         	lfsr	2,_EEPROM+2
  3261  00089A  D802               	call	u4308
  3262  00089C  EF68  F004         	goto	u4309
  3263  0008A0                     u4308:
  3264  0008A0  0005               	push	
  3265  0008A2  6EFA               	movwf	pclath,c
  3266  0008A4  50DE               	movf	postinc2,w,c
  3267  0008A6  6EFD               	movwf	tosl,c
  3268  0008A8  50DE               	movf	postinc2,w,c
  3269  0008AA  6EFE               	movwf	tosh,c
  3270  0008AC  50F8               	movf	tblptru,w,c
  3271  0008AE  6EFF               	movwf	tosu,c
  3272  0008B0  50FA               	movf	pclath,w,c
  3273  0008B2  0E76               	movlw	low main@vetor_aux
  3274  0008B4  6E2C               	movwf	buscar_receita@data^0,c
  3275  0008B6  0E00               	movlw	high main@vetor_aux
  3276  0008B8  6E2D               	movwf	(buscar_receita@data+1)^0,c
  3277  0008BA  C0BC  F026         	movff	main@tecla,___awmod@dividend
  3278  0008BE  6A27               	clrf	(___awmod@dividend+1)^0,c
  3279  0008C0  0E00               	movlw	0
  3280  0008C2  6E29               	movwf	(___awmod@divisor+1)^0,c
  3281  0008C4  0E30               	movlw	48
  3282  0008C6  6E28               	movwf	___awmod@divisor^0,c
  3283  0008C8  ECF7  F015         	call	___awmod	;wreg free
  3284  0008CC  5026               	movf	?___awmod^0,w,c
  3285  0008CE  0012               	return		;indir
  3286  0008D0                     u4309:
  3287  0008D0                     
  3288                           ;main.c: 347:                                            pt = vetor_aux;
  3289  0008D0  0E76               	movlw	low main@vetor_aux
  3290  0008D2  0100               	movlb	0	; () banked
  3291  0008D4  6F9D               	movwf	main@pt& (0+255),b
  3292  0008D6  0E00               	movlw	high main@vetor_aux
  3293  0008D8  6F9E               	movwf	(main@pt+1)& (0+255),b
  3294  0008DA                     
  3295                           ; BSR set to: 0
  3296                           ;main.c: 349:                                            if(*pt == 0xFF)
  3297  0008DA  C09D  FFD9         	movff	main@pt,fsr2l
  3298  0008DE  C09E  FFDA         	movff	main@pt+1,fsr2h
  3299  0008E2  28DE               	incf	postinc2,w,c
  3300  0008E4  A4D8               	btfss	status,2,c
  3301  0008E6  EF77  F004         	goto	u4311
  3302  0008EA  EF79  F004         	goto	u4310
  3303  0008EE                     u4311:
  3304  0008EE  EF95  F004         	goto	l6080
  3305  0008F2                     u4310:
  3306  0008F2                     
  3307                           ; BSR set to: 0
  3308                           ;main.c: 350:                                            {;main.c: 351:                 
      +                                                         EEPROM.deletar(tecla % 0x30);
  3309  0008F2  EE20  F0D5         	lfsr	2,_EEPROM+4
  3310  0008F6  D802               	call	u4328
  3311  0008F8  EF92  F004         	goto	u4329
  3312  0008FC                     u4328:
  3313  0008FC  0005               	push	
  3314  0008FE  6EFA               	movwf	pclath,c
  3315  000900  50DE               	movf	postinc2,w,c
  3316  000902  6EFD               	movwf	tosl,c
  3317  000904  50DE               	movf	postinc2,w,c
  3318  000906  6EFE               	movwf	tosh,c
  3319  000908  50F8               	movf	tblptru,w,c
  3320  00090A  6EFF               	movwf	tosu,c
  3321  00090C  50FA               	movf	pclath,w,c
  3322  00090E  C0BC  F026         	movff	main@tecla,___awmod@dividend
  3323  000912  6A27               	clrf	(___awmod@dividend+1)^0,c
  3324  000914  0E00               	movlw	0
  3325  000916  6E29               	movwf	(___awmod@divisor+1)^0,c
  3326  000918  0E30               	movlw	48
  3327  00091A  6E28               	movwf	___awmod@divisor^0,c
  3328  00091C  ECF7  F015         	call	___awmod
  3329  000920  5026               	movf	?___awmod^0,w,c
  3330  000922  0012               	return		;indir
  3331  000924                     u4329:
  3332  000924                     
  3333                           ;main.c: 352:                                                vetor_aux[0] = 0;
  3334  000924  0E00               	movlw	0
  3335  000926  0100               	movlb	0	; () banked
  3336  000928  6F76               	movwf	main@vetor_aux& (0+255),b
  3337  00092A                     l6080:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 356:                                            for(char *ptr = vetor_aux; *ptr
      +                           != 0; ptr++)
  3341  00092A  0E76               	movlw	low main@vetor_aux
  3342  00092C  6FB8               	movwf	main@ptr_564& (0+255),b
  3343  00092E  0E00               	movlw	high main@vetor_aux
  3344  000930  6FB9               	movwf	(main@ptr_564+1)& (0+255),b
  3345  000932  EF62  F005         	goto	l6114
  3346  000936                     l6082:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;main.c: 357:                                            {;main.c: 358:                 
      +                                                          if(*ptr <= 0x64 || *ptr == 0xFE)
  3350  000936  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3351  00093A  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3352  00093E  0E64               	movlw	100
  3353  000940  64DF               	cpfsgt	indf2,c
  3354  000942  EFA5  F004         	goto	u4331
  3355  000946  EFA7  F004         	goto	u4330
  3356  00094A                     u4331:
  3357  00094A  EFB4  F004         	goto	l6086
  3358  00094E                     u4330:
  3359  00094E                     
  3360                           ; BSR set to: 0
  3361  00094E  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3362  000952  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3363  000956  0EFE               	movlw	254
  3364  000958  18DE               	xorwf	postinc2,w,c
  3365  00095A  A4D8               	btfss	status,2,c
  3366  00095C  EFB2  F004         	goto	u4341
  3367  000960  EFB4  F004         	goto	u4340
  3368  000964                     u4341:
  3369  000964  EFC3  F004         	goto	l6088
  3370  000968                     u4340:
  3371  000968                     l6086:
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;main.c: 359:                                                 {;main.c: 360:            
      +                                                                   decodifica(&*ptr);
  3375  000968  C0B8  F026         	movff	main@ptr_564,decodifica@d
  3376  00096C  C0B9  F027         	movff	main@ptr_564+1,decodifica@d+1
  3377  000970  EC9E  F012         	call	_decodifica
  3378                           
  3379                           ;main.c: 361:                                                     fifo_add_control(*ptr)
      +                          ;
  3380  000974  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3381  000978  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3382  00097C  50DF               	movf	indf2,w,c
  3383  00097E  EC4B  F01A         	call	_fifo_add_control
  3384                           
  3385                           ;main.c: 362:                                                 }
  3386  000982  EF5D  F005         	goto	l6110
  3387  000986                     l6088:
  3388                           
  3389                           ; BSR set to: 0
  3390  000986  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3391  00098A  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3392  00098E  0E64               	movlw	100
  3393  000990  64DF               	cpfsgt	indf2,c
  3394  000992  EFCD  F004         	goto	u4351
  3395  000996  EFCF  F004         	goto	u4350
  3396  00099A                     u4351:
  3397  00099A  EFEA  F004         	goto	l6094
  3398  00099E                     u4350:
  3399  00099E                     
  3400                           ; BSR set to: 0
  3401  00099E  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3402  0009A2  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3403  0009A6  0EDD               	movlw	221
  3404  0009A8  60DF               	cpfslt	indf2,c
  3405  0009AA  EFD9  F004         	goto	u4361
  3406  0009AE  EFDB  F004         	goto	u4360
  3407  0009B2                     u4361:
  3408  0009B2  EFEA  F004         	goto	l6094
  3409  0009B6                     u4360:
  3410  0009B6                     
  3411                           ; BSR set to: 0
  3412                           ;main.c: 364:                                                 {;main.c: 365:            
      +                                                                   decodifica(&*ptr);
  3413  0009B6  C0B8  F026         	movff	main@ptr_564,decodifica@d
  3414  0009BA  C0B9  F027         	movff	main@ptr_564+1,decodifica@d+1
  3415  0009BE  EC9E  F012         	call	_decodifica	;wreg free
  3416                           
  3417                           ;main.c: 366:                                                     fifo_add_tempo(*ptr);
  3418  0009C2  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3419  0009C6  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3420  0009CA  50DF               	movf	indf2,w,c
  3421  0009CC  ECA4  F019         	call	_fifo_add_tempo
  3422                           
  3423                           ;main.c: 367:                                                 }
  3424  0009D0  EF5D  F005         	goto	l6110
  3425  0009D4                     l6094:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;main.c: 369:                                                 {;main.c: 370:            
      +                                                                   decodifica(&*ptr);
  3429  0009D4  C0B8  F026         	movff	main@ptr_564,decodifica@d
  3430  0009D8  C0B9  F027         	movff	main@ptr_564+1,decodifica@d+1
  3431  0009DC  EC9E  F012         	call	_decodifica	;wreg free
  3432                           
  3433                           ;main.c: 371:                                                     switch( *ptr )
  3434  0009E0  EFFA  F004         	goto	l6100
  3435  0009E4                     l243:
  3436  0009E4                     l6096:
  3437                           
  3438                           ;main.c: 381:                                                                 *ptr &= ~0
      +                          x20;
  3439  0009E4  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3440  0009E8  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3441  0009EC  0EDF               	movlw	223
  3442  0009EE  16DF               	andwf	indf2,f,c
  3443                           
  3444                           ;main.c: 382:                                                                 break;
  3445  0009F0  EF2B  F005         	goto	l6102
  3446  0009F4                     l6100:
  3447  0009F4  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3448  0009F8  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3449  0009FC  50DF               	movf	indf2,w,c
  3450  0009FE  6E44               	movwf	??_main^0,c
  3451  000A00  6A45               	clrf	(??_main+1)^0,c
  3452                           
  3453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3454                           ; Switch size 1, requested type "simple"
  3455                           ; Number of cases is 1, Range of values is 0 to 0
  3456                           ; switch strategies available:
  3457                           ; Name         Instructions Cycles
  3458                           ; simple_byte            4     3 (average)
  3459                           ;	Chosen strategy is simple_byte
  3460  000A02  5045               	movf	(??_main+1)^0,w,c
  3461  000A04  0A00               	xorlw	0	; case 0
  3462  000A06  B4D8               	btfsc	status,2,c
  3463  000A08  EF08  F005         	goto	l7332
  3464  000A0C  EF2B  F005         	goto	l6102
  3465  000A10                     l7332:
  3466                           
  3467                           ; Switch size 1, requested type "simple"
  3468                           ; Number of cases is 8, Range of values is 65 to 100
  3469                           ; switch strategies available:
  3470                           ; Name         Instructions Cycles
  3471                           ; simple_byte           25    13 (average)
  3472                           ;	Chosen strategy is simple_byte
  3473  000A10  5044               	movf	??_main^0,w,c
  3474  000A12  0A41               	xorlw	65	; case 65
  3475  000A14  B4D8               	btfsc	status,2,c
  3476  000A16  EFF2  F004         	goto	l243
  3477  000A1A  0A03               	xorlw	3	; case 66
  3478  000A1C  B4D8               	btfsc	status,2,c
  3479  000A1E  EFF2  F004         	goto	l6096
  3480  000A22  0A01               	xorlw	1	; case 67
  3481  000A24  B4D8               	btfsc	status,2,c
  3482  000A26  EFF2  F004         	goto	l6096
  3483  000A2A  0A07               	xorlw	7	; case 68
  3484  000A2C  B4D8               	btfsc	status,2,c
  3485  000A2E  EFF2  F004         	goto	l6096
  3486  000A32  0A25               	xorlw	37	; case 97
  3487  000A34  B4D8               	btfsc	status,2,c
  3488  000A36  EFF2  F004         	goto	l6096
  3489  000A3A  0A03               	xorlw	3	; case 98
  3490  000A3C  B4D8               	btfsc	status,2,c
  3491  000A3E  EFF2  F004         	goto	l6096
  3492  000A42  0A01               	xorlw	1	; case 99
  3493  000A44  B4D8               	btfsc	status,2,c
  3494  000A46  EFF2  F004         	goto	l6096
  3495  000A4A  0A07               	xorlw	7	; case 100
  3496  000A4C  B4D8               	btfsc	status,2,c
  3497  000A4E  EFF2  F004         	goto	l6096
  3498  000A52  EF2B  F005         	goto	l6102
  3499  000A56                     l6102:
  3500                           
  3501                           ;main.c: 384:                                                     alt_atuador(*ptr);
  3502  000A56  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3503  000A5A  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3504  000A5E  50DF               	movf	indf2,w,c
  3505  000A60  EC45  F017         	call	_alt_atuador
  3506                           
  3507                           ;main.c: 385:                                                     fifo_add( ler_atuador(
      +                          *ptr) ? *ptr : *ptr|0x20 );
  3508  000A64  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3509  000A68  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3510  000A6C  50DF               	movf	indf2,w,c
  3511  000A6E  ECF5  F016         	call	_ler_atuador
  3512  000A72  0900               	iorlw	0
  3513  000A74  A4D8               	btfss	status,2,c
  3514  000A76  EF3F  F005         	goto	u4371
  3515  000A7A  EF41  F005         	goto	u4370
  3516  000A7E                     u4371:
  3517  000A7E  EF50  F005         	goto	l6106
  3518  000A82                     u4370:
  3519  000A82  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3520  000A86  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3521  000A8A  50DF               	movf	indf2,w,c
  3522  000A8C  6E44               	movwf	??_main^0,c
  3523  000A8E  6A45               	clrf	(??_main+1)^0,c
  3524  000A90  0E20               	movlw	32
  3525  000A92  1044               	iorwf	??_main^0,w,c
  3526  000A94  0100               	movlb	0	; () banked
  3527  000A96  6F88               	movwf	_main$565& (0+255),b
  3528  000A98  5045               	movf	(??_main+1)^0,w,c
  3529  000A9A  6F89               	movwf	(_main$565+1)& (0+255),b
  3530  000A9C  EF5A  F005         	goto	l6108
  3531  000AA0                     l6106:
  3532  000AA0  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3533  000AA4  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3534  000AA8  50DF               	movf	indf2,w,c
  3535  000AAA  6E44               	movwf	??_main^0,c
  3536  000AAC  5044               	movf	??_main^0,w,c
  3537  000AAE  0100               	movlb	0	; () banked
  3538  000AB0  6F88               	movwf	_main$565& (0+255),b
  3539  000AB2  6B89               	clrf	(_main$565+1)& (0+255),b
  3540  000AB4                     l6108:
  3541                           
  3542                           ; BSR set to: 0
  3543  000AB4  5188               	movf	_main$565& (0+255),w,b
  3544  000AB6  ECD0  F019         	call	_fifo_add
  3545  000ABA                     l6110:
  3546                           
  3547                           ;main.c: 387:                                                 fifo_print();
  3548  000ABA  EC00  F00F         	call	_fifo_print	;wreg free
  3549  000ABE                     
  3550                           ;main.c: 388:                                            }
  3551  000ABE  0100               	movlb	0	; () banked
  3552  000AC0  4BB8               	infsnz	main@ptr_564& (0+255),f,b
  3553  000AC2  2BB9               	incf	(main@ptr_564+1)& (0+255),f,b
  3554  000AC4                     l6114:
  3555                           
  3556                           ; BSR set to: 0
  3557  000AC4  C0B8  FFD9         	movff	main@ptr_564,fsr2l
  3558  000AC8  C0B9  FFDA         	movff	main@ptr_564+1,fsr2h
  3559  000ACC  50DF               	movf	indf2,w,c
  3560  000ACE  A4D8               	btfss	status,2,c
  3561  000AD0  EF6C  F005         	goto	u4381
  3562  000AD4  EF6E  F005         	goto	u4380
  3563  000AD8                     u4381:
  3564  000AD8  EF9B  F004         	goto	l6082
  3565  000ADC                     u4380:
  3566  000ADC  EFC2  F002         	goto	l5952
  3567  000AE0                     l6124:
  3568                           
  3569                           ; BSR set to: 0
  3570  000AE0  51BC               	movf	main@tecla& (0+255),w,b
  3571  000AE2  6E44               	movwf	??_main^0,c
  3572  000AE4  6A45               	clrf	(??_main+1)^0,c
  3573                           
  3574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3575                           ; Switch size 1, requested type "simple"
  3576                           ; Number of cases is 1, Range of values is 0 to 0
  3577                           ; switch strategies available:
  3578                           ; Name         Instructions Cycles
  3579                           ; simple_byte            4     3 (average)
  3580                           ;	Chosen strategy is simple_byte
  3581  000AE6  5045               	movf	(??_main+1)^0,w,c
  3582  000AE8  0A00               	xorlw	0	; case 0
  3583  000AEA  B4D8               	btfsc	status,2,c
  3584  000AEC  EF7A  F005         	goto	l7334
  3585  000AF0  EFA4  F00D         	goto	l6534
  3586  000AF4                     l7334:
  3587                           
  3588                           ; BSR set to: 0
  3589                           ; Switch size 1, requested type "simple"
  3590                           ; Number of cases is 11, Range of values is 42 to 57
  3591                           ; switch strategies available:
  3592                           ; Name         Instructions Cycles
  3593                           ; simple_byte           34    18 (average)
  3594                           ;	Chosen strategy is simple_byte
  3595  000AF4  5044               	movf	??_main^0,w,c
  3596  000AF6  0A2A               	xorlw	42	; case 42
  3597  000AF8  B4D8               	btfsc	status,2,c
  3598  000AFA  EF2B  F001         	goto	l5874
  3599  000AFE  0A1A               	xorlw	26	; case 48
  3600  000B00  B4D8               	btfsc	status,2,c
  3601  000B02  EF35  F004         	goto	l223
  3602  000B06  0A01               	xorlw	1	; case 49
  3603  000B08  B4D8               	btfsc	status,2,c
  3604  000B0A  EF35  F004         	goto	l223
  3605  000B0E  0A03               	xorlw	3	; case 50
  3606  000B10  B4D8               	btfsc	status,2,c
  3607  000B12  EF35  F004         	goto	l6066
  3608  000B16  0A01               	xorlw	1	; case 51
  3609  000B18  B4D8               	btfsc	status,2,c
  3610  000B1A  EF35  F004         	goto	l6066
  3611  000B1E  0A07               	xorlw	7	; case 52
  3612  000B20  B4D8               	btfsc	status,2,c
  3613  000B22  EF35  F004         	goto	l6066
  3614  000B26  0A01               	xorlw	1	; case 53
  3615  000B28  B4D8               	btfsc	status,2,c
  3616  000B2A  EF35  F004         	goto	l6066
  3617  000B2E  0A03               	xorlw	3	; case 54
  3618  000B30  B4D8               	btfsc	status,2,c
  3619  000B32  EF35  F004         	goto	l6066
  3620  000B36  0A01               	xorlw	1	; case 55
  3621  000B38  B4D8               	btfsc	status,2,c
  3622  000B3A  EF35  F004         	goto	l6066
  3623  000B3E  0A0F               	xorlw	15	; case 56
  3624  000B40  B4D8               	btfsc	status,2,c
  3625  000B42  EF35  F004         	goto	l6066
  3626  000B46  0A01               	xorlw	1	; case 57
  3627  000B48  B4D8               	btfsc	status,2,c
  3628  000B4A  EF35  F004         	goto	l6066
  3629  000B4E  EFA4  F00D         	goto	l6534
  3630  000B52                     l6126:
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;main.c: 399:                             IHM.clr();
  3634  000B52  EE20  F0E3         	lfsr	2,_IHM+8
  3635  000B56  D802               	call	u4398
  3636  000B58  EFB8  F005         	goto	u4399
  3637  000B5C                     u4398:
  3638  000B5C  0005               	push	
  3639  000B5E  6EFA               	movwf	pclath,c
  3640  000B60  50DE               	movf	postinc2,w,c
  3641  000B62  6EFD               	movwf	tosl,c
  3642  000B64  50DE               	movf	postinc2,w,c
  3643  000B66  6EFE               	movwf	tosh,c
  3644  000B68  50F8               	movf	tblptru,w,c
  3645  000B6A  6EFF               	movwf	tosu,c
  3646  000B6C  50FA               	movf	pclath,w,c
  3647  000B6E  0012               	return		;indir
  3648  000B70                     u4399:
  3649  000B70                     
  3650                           ;main.c: 400:                             IHM.printpos(0, 0, "   AJUSTE O INICIO  ");
  3651  000B70  EE20  F0DF         	lfsr	2,_IHM+4
  3652  000B74  D802               	call	u4408
  3653  000B76  EFCE  F005         	goto	u4409
  3654  000B7A                     u4408:
  3655  000B7A  0005               	push	
  3656  000B7C  6EFA               	movwf	pclath,c
  3657  000B7E  50DE               	movf	postinc2,w,c
  3658  000B80  6EFD               	movwf	tosl,c
  3659  000B82  50DE               	movf	postinc2,w,c
  3660  000B84  6EFE               	movwf	tosh,c
  3661  000B86  50F8               	movf	tblptru,w,c
  3662  000B88  6EFF               	movwf	tosu,c
  3663  000B8A  50FA               	movf	pclath,w,c
  3664  000B8C  0E00               	movlw	0
  3665  000B8E  6E2D               	movwf	dispLCD@col^0,c
  3666  000B90  0E62               	movlw	low STR_16
  3667  000B92  6E2E               	movwf	dispLCD@str^0,c
  3668  000B94  0E7F               	movlw	high STR_16
  3669  000B96  6E2F               	movwf	(dispLCD@str+1)^0,c
  3670  000B98  0E00               	movlw	0
  3671  000B9A  0012               	return		;indir
  3672  000B9C                     u4409:
  3673  000B9C                     
  3674                           ;main.c: 401:                             IHM.printpos(1, 0, "     DO SISTEMA     ");
  3675  000B9C  EE20  F0DF         	lfsr	2,_IHM+4
  3676  000BA0  D802               	call	u4418
  3677  000BA2  EFE4  F005         	goto	u4419
  3678  000BA6                     u4418:
  3679  000BA6  0005               	push	
  3680  000BA8  6EFA               	movwf	pclath,c
  3681  000BAA  50DE               	movf	postinc2,w,c
  3682  000BAC  6EFD               	movwf	tosl,c
  3683  000BAE  50DE               	movf	postinc2,w,c
  3684  000BB0  6EFE               	movwf	tosh,c
  3685  000BB2  50F8               	movf	tblptru,w,c
  3686  000BB4  6EFF               	movwf	tosu,c
  3687  000BB6  50FA               	movf	pclath,w,c
  3688  000BB8  0E00               	movlw	0
  3689  000BBA  6E2D               	movwf	dispLCD@col^0,c
  3690  000BBC  0E0E               	movlw	low STR_17
  3691  000BBE  6E2E               	movwf	dispLCD@str^0,c
  3692  000BC0  0E7F               	movlw	high STR_17
  3693  000BC2  6E2F               	movwf	(dispLCD@str+1)^0,c
  3694  000BC4  0E01               	movlw	1
  3695  000BC6  0012               	return		;indir
  3696  000BC8                     u4419:
  3697  000BC8                     
  3698                           ;main.c: 402:                             estado = 6;
  3699  000BC8  0E06               	movlw	6
  3700  000BCA  0100               	movlb	0	; () banked
  3701  000BCC  6FBB               	movwf	main@estado& (0+255),b
  3702                           
  3703                           ;main.c: 403:                             break;
  3704  000BCE  EFA4  F00D         	goto	l6534
  3705  000BD2                     l6134:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;main.c: 406:                             IHM.printpos(3,0,"   A   B   C   D    ");
  3709  000BD2  EE20  F0DF         	lfsr	2,_IHM+4
  3710  000BD6  D802               	call	u4428
  3711  000BD8  EFFF  F005         	goto	u4429
  3712  000BDC                     u4428:
  3713  000BDC  0005               	push	
  3714  000BDE  6EFA               	movwf	pclath,c
  3715  000BE0  50DE               	movf	postinc2,w,c
  3716  000BE2  6EFD               	movwf	tosl,c
  3717  000BE4  50DE               	movf	postinc2,w,c
  3718  000BE6  6EFE               	movwf	tosh,c
  3719  000BE8  50F8               	movf	tblptru,w,c
  3720  000BEA  6EFF               	movwf	tosu,c
  3721  000BEC  50FA               	movf	pclath,w,c
  3722  000BEE  0E00               	movlw	0
  3723  000BF0  6E2D               	movwf	dispLCD@col^0,c
  3724  000BF2  0E23               	movlw	low STR_18
  3725  000BF4  6E2E               	movwf	dispLCD@str^0,c
  3726  000BF6  0E7F               	movlw	high STR_18
  3727  000BF8  6E2F               	movwf	(dispLCD@str+1)^0,c
  3728  000BFA  0E03               	movlw	3
  3729  000BFC  0012               	return		;indir
  3730  000BFE                     u4429:
  3731  000BFE                     
  3732                           ;main.c: 407:                             dispLCD_lincol(3, 4); dispLCD_dataReg(ler_atua
      +                          dor('A') ? '+' : '-');
  3733  000BFE  0E04               	movlw	4
  3734  000C00  6E28               	movwf	dispLCD_lincol@col^0,c
  3735  000C02  0E03               	movlw	3
  3736  000C04  EC8C  F018         	call	_dispLCD_lincol
  3737  000C08  0E41               	movlw	65
  3738  000C0A  ECF5  F016         	call	_ler_atuador
  3739  000C0E  0900               	iorlw	0
  3740  000C10  A4D8               	btfss	status,2,c
  3741  000C12  EF0D  F006         	goto	u4431
  3742  000C16  EF0F  F006         	goto	u4430
  3743  000C1A                     u4431:
  3744  000C1A  EF16  F006         	goto	l6142
  3745  000C1E                     u4430:
  3746  000C1E  0E00               	movlw	0
  3747  000C20  0100               	movlb	0	; () banked
  3748  000C22  6F8B               	movwf	(_main$569+1)& (0+255),b
  3749  000C24  0E2D               	movlw	45
  3750  000C26  6F8A               	movwf	_main$569& (0+255),b
  3751  000C28  EF1B  F006         	goto	l6144
  3752  000C2C                     l6142:
  3753  000C2C  0E00               	movlw	0
  3754  000C2E  0100               	movlb	0	; () banked
  3755  000C30  6F8B               	movwf	(_main$569+1)& (0+255),b
  3756  000C32  0E2B               	movlw	43
  3757  000C34  6F8A               	movwf	_main$569& (0+255),b
  3758  000C36                     l6144:
  3759                           
  3760                           ; BSR set to: 0
  3761  000C36  518A               	movf	_main$569& (0+255),w,b
  3762  000C38  EC24  F01A         	call	_dispLCD_dataReg
  3763  000C3C                     
  3764                           ;main.c: 408:                             dispLCD_lincol(3, 8);dispLCD_dataReg(ler_atuad
      +                          or('B') ? '+' : '-');
  3765  000C3C  0E08               	movlw	8
  3766  000C3E  6E28               	movwf	dispLCD_lincol@col^0,c
  3767  000C40  0E03               	movlw	3
  3768  000C42  EC8C  F018         	call	_dispLCD_lincol
  3769  000C46  0E42               	movlw	66
  3770  000C48  ECF5  F016         	call	_ler_atuador
  3771  000C4C  0900               	iorlw	0
  3772  000C4E  A4D8               	btfss	status,2,c
  3773  000C50  EF2C  F006         	goto	u4441
  3774  000C54  EF2E  F006         	goto	u4440
  3775  000C58                     u4441:
  3776  000C58  EF35  F006         	goto	l6152
  3777  000C5C                     u4440:
  3778  000C5C  0E00               	movlw	0
  3779  000C5E  0100               	movlb	0	; () banked
  3780  000C60  6F8D               	movwf	(_main$570+1)& (0+255),b
  3781  000C62  0E2D               	movlw	45
  3782  000C64  6F8C               	movwf	_main$570& (0+255),b
  3783  000C66  EF3A  F006         	goto	l6154
  3784  000C6A                     l6152:
  3785  000C6A  0E00               	movlw	0
  3786  000C6C  0100               	movlb	0	; () banked
  3787  000C6E  6F8D               	movwf	(_main$570+1)& (0+255),b
  3788  000C70  0E2B               	movlw	43
  3789  000C72  6F8C               	movwf	_main$570& (0+255),b
  3790  000C74                     l6154:
  3791                           
  3792                           ; BSR set to: 0
  3793  000C74  518C               	movf	_main$570& (0+255),w,b
  3794  000C76  EC24  F01A         	call	_dispLCD_dataReg
  3795  000C7A                     
  3796                           ;main.c: 409:                             dispLCD_lincol(3, 12);dispLCD_dataReg(ler_atua
      +                          dor('C') ? '+' : '-');
  3797  000C7A  0E0C               	movlw	12
  3798  000C7C  6E28               	movwf	dispLCD_lincol@col^0,c
  3799  000C7E  0E03               	movlw	3
  3800  000C80  EC8C  F018         	call	_dispLCD_lincol
  3801  000C84  0E43               	movlw	67
  3802  000C86  ECF5  F016         	call	_ler_atuador
  3803  000C8A  0900               	iorlw	0
  3804  000C8C  A4D8               	btfss	status,2,c
  3805  000C8E  EF4B  F006         	goto	u4451
  3806  000C92  EF4D  F006         	goto	u4450
  3807  000C96                     u4451:
  3808  000C96  EF54  F006         	goto	l6162
  3809  000C9A                     u4450:
  3810  000C9A  0E00               	movlw	0
  3811  000C9C  0100               	movlb	0	; () banked
  3812  000C9E  6F8F               	movwf	(_main$571+1)& (0+255),b
  3813  000CA0  0E2D               	movlw	45
  3814  000CA2  6F8E               	movwf	_main$571& (0+255),b
  3815  000CA4  EF59  F006         	goto	l6164
  3816  000CA8                     l6162:
  3817  000CA8  0E00               	movlw	0
  3818  000CAA  0100               	movlb	0	; () banked
  3819  000CAC  6F8F               	movwf	(_main$571+1)& (0+255),b
  3820  000CAE  0E2B               	movlw	43
  3821  000CB0  6F8E               	movwf	_main$571& (0+255),b
  3822  000CB2                     l6164:
  3823                           
  3824                           ; BSR set to: 0
  3825  000CB2  518E               	movf	_main$571& (0+255),w,b
  3826  000CB4  EC24  F01A         	call	_dispLCD_dataReg
  3827  000CB8                     
  3828                           ;main.c: 410:                             dispLCD_lincol(3, 16);dispLCD_dataReg(ler_atua
      +                          dor('D') ? '+' : '-');
  3829  000CB8  0E10               	movlw	16
  3830  000CBA  6E28               	movwf	dispLCD_lincol@col^0,c
  3831  000CBC  0E03               	movlw	3
  3832  000CBE  EC8C  F018         	call	_dispLCD_lincol
  3833  000CC2  0E44               	movlw	68
  3834  000CC4  ECF5  F016         	call	_ler_atuador
  3835  000CC8  0900               	iorlw	0
  3836  000CCA  A4D8               	btfss	status,2,c
  3837  000CCC  EF6A  F006         	goto	u4461
  3838  000CD0  EF6C  F006         	goto	u4460
  3839  000CD4                     u4461:
  3840  000CD4  EF73  F006         	goto	l6172
  3841  000CD8                     u4460:
  3842  000CD8  0E00               	movlw	0
  3843  000CDA  0100               	movlb	0	; () banked
  3844  000CDC  6F91               	movwf	(_main$572+1)& (0+255),b
  3845  000CDE  0E2D               	movlw	45
  3846  000CE0  6F90               	movwf	_main$572& (0+255),b
  3847  000CE2  EF78  F006         	goto	l6174
  3848  000CE6                     l6172:
  3849  000CE6  0E00               	movlw	0
  3850  000CE8  0100               	movlb	0	; () banked
  3851  000CEA  6F91               	movwf	(_main$572+1)& (0+255),b
  3852  000CEC  0E2B               	movlw	43
  3853  000CEE  6F90               	movwf	_main$572& (0+255),b
  3854  000CF0                     l6174:
  3855                           
  3856                           ; BSR set to: 0
  3857  000CF0  5190               	movf	_main$572& (0+255),w,b
  3858  000CF2  EC24  F01A         	call	_dispLCD_dataReg
  3859  000CF6                     
  3860                           ;main.c: 411:                             estado = 7;
  3861  000CF6  0E07               	movlw	7
  3862  000CF8  0100               	movlb	0	; () banked
  3863  000CFA  6FBB               	movwf	main@estado& (0+255),b
  3864                           
  3865                           ;main.c: 412:                             break;
  3866  000CFC  EFA4  F00D         	goto	l6534
  3867  000D00                     l6178:
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;main.c: 415:                             tecla = teclado_borda();
  3871  000D00  EC94  F01B         	call	_teclado_borda	;wreg free
  3872  000D04  0100               	movlb	0	; () banked
  3873  000D06  6FBC               	movwf	main@tecla& (0+255),b
  3874                           
  3875                           ;main.c: 416:                             switch(tecla)
  3876  000D08  EF1A  F007         	goto	l6218
  3877  000D0C                     l6180:
  3878                           
  3879                           ; BSR set to: 0
  3880  000D0C  51BC               	movf	main@tecla& (0+255),w,b
  3881  000D0E  EC45  F017         	call	_alt_atuador
  3882  000D12  0E04               	movlw	4
  3883  000D14  6E28               	movwf	dispLCD_lincol@col^0,c
  3884  000D16  0E03               	movlw	3
  3885  000D18  EC8C  F018         	call	_dispLCD_lincol
  3886  000D1C  0E41               	movlw	65
  3887  000D1E  ECF5  F016         	call	_ler_atuador
  3888  000D22  0900               	iorlw	0
  3889  000D24  A4D8               	btfss	status,2,c
  3890  000D26  EF97  F006         	goto	u4471
  3891  000D2A  EF99  F006         	goto	u4470
  3892  000D2E                     u4471:
  3893  000D2E  EFA0  F006         	goto	l6184
  3894  000D32                     u4470:
  3895  000D32  0E00               	movlw	0
  3896  000D34  0100               	movlb	0	; () banked
  3897  000D36  6F93               	movwf	(_main$573+1)& (0+255),b
  3898  000D38  0E2D               	movlw	45
  3899  000D3A  6F92               	movwf	_main$573& (0+255),b
  3900  000D3C  EFA5  F006         	goto	l6186
  3901  000D40                     l6184:
  3902  000D40  0E00               	movlw	0
  3903  000D42  0100               	movlb	0	; () banked
  3904  000D44  6F93               	movwf	(_main$573+1)& (0+255),b
  3905  000D46  0E2B               	movlw	43
  3906  000D48  6F92               	movwf	_main$573& (0+255),b
  3907  000D4A                     l6186:
  3908                           
  3909                           ; BSR set to: 0
  3910  000D4A  5192               	movf	_main$573& (0+255),w,b
  3911  000D4C  EC24  F01A         	call	_dispLCD_dataReg
  3912  000D50  EFA4  F00D         	goto	l6534
  3913  000D54                     l6188:
  3914                           
  3915                           ; BSR set to: 0
  3916  000D54  51BC               	movf	main@tecla& (0+255),w,b
  3917  000D56  EC45  F017         	call	_alt_atuador
  3918  000D5A  0E08               	movlw	8
  3919  000D5C  6E28               	movwf	dispLCD_lincol@col^0,c
  3920  000D5E  0E03               	movlw	3
  3921  000D60  EC8C  F018         	call	_dispLCD_lincol
  3922  000D64  0E42               	movlw	66
  3923  000D66  ECF5  F016         	call	_ler_atuador
  3924  000D6A  0900               	iorlw	0
  3925  000D6C  A4D8               	btfss	status,2,c
  3926  000D6E  EFBB  F006         	goto	u4481
  3927  000D72  EFBD  F006         	goto	u4480
  3928  000D76                     u4481:
  3929  000D76  EFC4  F006         	goto	l6192
  3930  000D7A                     u4480:
  3931  000D7A  0E00               	movlw	0
  3932  000D7C  0100               	movlb	0	; () banked
  3933  000D7E  6F95               	movwf	(_main$574+1)& (0+255),b
  3934  000D80  0E2D               	movlw	45
  3935  000D82  6F94               	movwf	_main$574& (0+255),b
  3936  000D84  EFC9  F006         	goto	l6194
  3937  000D88                     l6192:
  3938  000D88  0E00               	movlw	0
  3939  000D8A  0100               	movlb	0	; () banked
  3940  000D8C  6F95               	movwf	(_main$574+1)& (0+255),b
  3941  000D8E  0E2B               	movlw	43
  3942  000D90  6F94               	movwf	_main$574& (0+255),b
  3943  000D92                     l6194:
  3944                           
  3945                           ; BSR set to: 0
  3946  000D92  5194               	movf	_main$574& (0+255),w,b
  3947  000D94  EC24  F01A         	call	_dispLCD_dataReg
  3948  000D98  EFA4  F00D         	goto	l6534
  3949  000D9C                     l6196:
  3950                           
  3951                           ; BSR set to: 0
  3952  000D9C  51BC               	movf	main@tecla& (0+255),w,b
  3953  000D9E  EC45  F017         	call	_alt_atuador
  3954  000DA2  0E0C               	movlw	12
  3955  000DA4  6E28               	movwf	dispLCD_lincol@col^0,c
  3956  000DA6  0E03               	movlw	3
  3957  000DA8  EC8C  F018         	call	_dispLCD_lincol
  3958  000DAC  0E43               	movlw	67
  3959  000DAE  ECF5  F016         	call	_ler_atuador
  3960  000DB2  0900               	iorlw	0
  3961  000DB4  A4D8               	btfss	status,2,c
  3962  000DB6  EFDF  F006         	goto	u4491
  3963  000DBA  EFE1  F006         	goto	u4490
  3964  000DBE                     u4491:
  3965  000DBE  EFE8  F006         	goto	l6200
  3966  000DC2                     u4490:
  3967  000DC2  0E00               	movlw	0
  3968  000DC4  0100               	movlb	0	; () banked
  3969  000DC6  6F97               	movwf	(_main$575+1)& (0+255),b
  3970  000DC8  0E2D               	movlw	45
  3971  000DCA  6F96               	movwf	_main$575& (0+255),b
  3972  000DCC  EFED  F006         	goto	l6202
  3973  000DD0                     l6200:
  3974  000DD0  0E00               	movlw	0
  3975  000DD2  0100               	movlb	0	; () banked
  3976  000DD4  6F97               	movwf	(_main$575+1)& (0+255),b
  3977  000DD6  0E2B               	movlw	43
  3978  000DD8  6F96               	movwf	_main$575& (0+255),b
  3979  000DDA                     l6202:
  3980                           
  3981                           ; BSR set to: 0
  3982  000DDA  5196               	movf	_main$575& (0+255),w,b
  3983  000DDC  EC24  F01A         	call	_dispLCD_dataReg
  3984  000DE0  EFA4  F00D         	goto	l6534
  3985  000DE4                     l6204:
  3986                           
  3987                           ; BSR set to: 0
  3988  000DE4  51BC               	movf	main@tecla& (0+255),w,b
  3989  000DE6  EC45  F017         	call	_alt_atuador
  3990  000DEA  0E10               	movlw	16
  3991  000DEC  6E28               	movwf	dispLCD_lincol@col^0,c
  3992  000DEE  0E03               	movlw	3
  3993  000DF0  EC8C  F018         	call	_dispLCD_lincol
  3994  000DF4  0E44               	movlw	68
  3995  000DF6  ECF5  F016         	call	_ler_atuador
  3996  000DFA  0900               	iorlw	0
  3997  000DFC  A4D8               	btfss	status,2,c
  3998  000DFE  EF03  F007         	goto	u4501
  3999  000E02  EF05  F007         	goto	u4500
  4000  000E06                     u4501:
  4001  000E06  EF0C  F007         	goto	l6208
  4002  000E0A                     u4500:
  4003  000E0A  0E00               	movlw	0
  4004  000E0C  0100               	movlb	0	; () banked
  4005  000E0E  6F99               	movwf	(_main$576+1)& (0+255),b
  4006  000E10  0E2D               	movlw	45
  4007  000E12  6F98               	movwf	_main$576& (0+255),b
  4008  000E14  EF11  F007         	goto	l6210
  4009  000E18                     l6208:
  4010  000E18  0E00               	movlw	0
  4011  000E1A  0100               	movlb	0	; () banked
  4012  000E1C  6F99               	movwf	(_main$576+1)& (0+255),b
  4013  000E1E  0E2B               	movlw	43
  4014  000E20  6F98               	movwf	_main$576& (0+255),b
  4015  000E22                     l6210:
  4016                           
  4017                           ; BSR set to: 0
  4018  000E22  5198               	movf	_main$576& (0+255),w,b
  4019  000E24  EC24  F01A         	call	_dispLCD_dataReg
  4020  000E28  EFA4  F00D         	goto	l6534
  4021  000E2C                     l6212:
  4022                           
  4023                           ; BSR set to: 0
  4024  000E2C  0E0A               	movlw	10
  4025  000E2E  6FBB               	movwf	main@estado& (0+255),b
  4026  000E30  EFA4  F00D         	goto	l6534
  4027  000E34                     l6218:
  4028                           
  4029                           ; BSR set to: 0
  4030  000E34  51BC               	movf	main@tecla& (0+255),w,b
  4031  000E36  6E44               	movwf	??_main^0,c
  4032  000E38  6A45               	clrf	(??_main+1)^0,c
  4033                           
  4034                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4035                           ; Switch size 1, requested type "simple"
  4036                           ; Number of cases is 1, Range of values is 0 to 0
  4037                           ; switch strategies available:
  4038                           ; Name         Instructions Cycles
  4039                           ; simple_byte            4     3 (average)
  4040                           ;	Chosen strategy is simple_byte
  4041  000E3A  5045               	movf	(??_main+1)^0,w,c
  4042  000E3C  0A00               	xorlw	0	; case 0
  4043  000E3E  B4D8               	btfsc	status,2,c
  4044  000E40  EF24  F007         	goto	l7336
  4045  000E44  EFA4  F00D         	goto	l6534
  4046  000E48                     l7336:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ; Switch size 1, requested type "simple"
  4050                           ; Number of cases is 6, Range of values is 35 to 68
  4051                           ; switch strategies available:
  4052                           ; Name         Instructions Cycles
  4053                           ; simple_byte           19    10 (average)
  4054                           ;	Chosen strategy is simple_byte
  4055  000E48  5044               	movf	??_main^0,w,c
  4056  000E4A  0A23               	xorlw	35	; case 35
  4057  000E4C  B4D8               	btfsc	status,2,c
  4058  000E4E  EF16  F007         	goto	l6212
  4059  000E52  0A09               	xorlw	9	; case 42
  4060  000E54  B4D8               	btfsc	status,2,c
  4061  000E56  EF2B  F001         	goto	l5874
  4062  000E5A  0A6B               	xorlw	107	; case 65
  4063  000E5C  B4D8               	btfsc	status,2,c
  4064  000E5E  EF86  F006         	goto	l6180
  4065  000E62  0A03               	xorlw	3	; case 66
  4066  000E64  B4D8               	btfsc	status,2,c
  4067  000E66  EFAA  F006         	goto	l6188
  4068  000E6A  0A01               	xorlw	1	; case 67
  4069  000E6C  B4D8               	btfsc	status,2,c
  4070  000E6E  EFCE  F006         	goto	l6196
  4071  000E72  0A07               	xorlw	7	; case 68
  4072  000E74  B4D8               	btfsc	status,2,c
  4073  000E76  EFF2  F006         	goto	l6204
  4074  000E7A  EFA4  F00D         	goto	l6534
  4075  000E7E                     l6220:
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;main.c: 430:                             init_cond = salva_atuadores_init();
  4079  000E7E  ECDE  F017         	call	_salva_atuadores_init	;wreg free
  4080  000E82  0100               	movlb	0	; () banked
  4081  000E84  6FB2               	movwf	main@init_cond& (0+255),b
  4082  000E86                     
  4083                           ; BSR set to: 0
  4084                           ;main.c: 431:                             IHM.clr();
  4085  000E86  EE20  F0E3         	lfsr	2,_IHM+8
  4086  000E8A  D802               	call	u4518
  4087  000E8C  EF52  F007         	goto	u4519
  4088  000E90                     u4518:
  4089  000E90  0005               	push	
  4090  000E92  6EFA               	movwf	pclath,c
  4091  000E94  50DE               	movf	postinc2,w,c
  4092  000E96  6EFD               	movwf	tosl,c
  4093  000E98  50DE               	movf	postinc2,w,c
  4094  000E9A  6EFE               	movwf	tosh,c
  4095  000E9C  50F8               	movf	tblptru,w,c
  4096  000E9E  6EFF               	movwf	tosu,c
  4097  000EA0  50FA               	movf	pclath,w,c
  4098  000EA2  0012               	return		;indir
  4099  000EA4                     u4519:
  4100  000EA4                     
  4101                           ;main.c: 432:                             IHM.printpos(0, 0, "  INSIRA OS PASSOS  ");
  4102  000EA4  EE20  F0DF         	lfsr	2,_IHM+4
  4103  000EA8  D802               	call	u4528
  4104  000EAA  EF68  F007         	goto	u4529
  4105  000EAE                     u4528:
  4106  000EAE  0005               	push	
  4107  000EB0  6EFA               	movwf	pclath,c
  4108  000EB2  50DE               	movf	postinc2,w,c
  4109  000EB4  6EFD               	movwf	tosl,c
  4110  000EB6  50DE               	movf	postinc2,w,c
  4111  000EB8  6EFE               	movwf	tosh,c
  4112  000EBA  50F8               	movf	tblptru,w,c
  4113  000EBC  6EFF               	movwf	tosu,c
  4114  000EBE  50FA               	movf	pclath,w,c
  4115  000EC0  0E00               	movlw	0
  4116  000EC2  6E2D               	movwf	dispLCD@col^0,c
  4117  000EC4  0E77               	movlw	low STR_19
  4118  000EC6  6E2E               	movwf	dispLCD@str^0,c
  4119  000EC8  0E7F               	movlw	high STR_19
  4120  000ECA  6E2F               	movwf	(dispLCD@str+1)^0,c
  4121  000ECC  0E00               	movlw	0
  4122  000ECE  0012               	return		;indir
  4123  000ED0                     u4529:
  4124  000ED0                     l6226:
  4125                           
  4126                           ;main.c: 433:                             estado = 14;
  4127  000ED0  0E0E               	movlw	14
  4128  000ED2  0100               	movlb	0	; () banked
  4129  000ED4  6FBB               	movwf	main@estado& (0+255),b
  4130                           
  4131                           ;main.c: 434:                             break;
  4132  000ED6  EFA4  F00D         	goto	l6534
  4133  000EDA                     l6228:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;main.c: 437:                             tecla = teclado_borda();
  4137  000EDA  EC94  F01B         	call	_teclado_borda
  4138  000EDE  0100               	movlb	0	; () banked
  4139  000EE0  6FBC               	movwf	main@tecla& (0+255),b
  4140                           
  4141                           ;main.c: 438:                             switch( tecla )
  4142  000EE2  EFC6  F007         	goto	l6264
  4143  000EE6                     l304:
  4144  000EE6                     l6230:
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;main.c: 444:                                             if( fifo_disponivel() )
  4148  000EE6  ECEA  F01C         	call	_fifo_disponivel	;wreg free
  4149  000EEA  0900               	iorlw	0
  4150  000EEC  B4D8               	btfsc	status,2,c
  4151  000EEE  EF7B  F007         	goto	u4531
  4152  000EF2  EF7D  F007         	goto	u4530
  4153  000EF6                     u4531:
  4154  000EF6  EFA4  F00D         	goto	l6534
  4155  000EFA                     u4530:
  4156  000EFA                     
  4157                           ;main.c: 445:                                             {;main.c: 446:                
      +                                                           alt_atuador(tecla);
  4158  000EFA  0100               	movlb	0	; () banked
  4159  000EFC  51BC               	movf	main@tecla& (0+255),w,b
  4160  000EFE  EC45  F017         	call	_alt_atuador
  4161                           
  4162                           ;main.c: 447:                                                 fifo_add( ler_atuador(tecl
      +                          a) ? tecla : tecla|0x20 );
  4163  000F02  0100               	movlb	0	; () banked
  4164  000F04  51BC               	movf	main@tecla& (0+255),w,b
  4165  000F06  ECF5  F016         	call	_ler_atuador
  4166  000F0A  0900               	iorlw	0
  4167  000F0C  A4D8               	btfss	status,2,c
  4168  000F0E  EF8B  F007         	goto	u4541
  4169  000F12  EF8D  F007         	goto	u4540
  4170  000F16                     u4541:
  4171  000F16  EF98  F007         	goto	l308
  4172  000F1A                     u4540:
  4173  000F1A  0E20               	movlw	32
  4174  000F1C  C0BC  F044         	movff	main@tecla,??_main
  4175  000F20  6A45               	clrf	(??_main+1)^0,c
  4176  000F22  1044               	iorwf	??_main^0,w,c
  4177  000F24  0100               	movlb	0	; () banked
  4178  000F26  6F9A               	movwf	_main$578& (0+255),b
  4179  000F28  5045               	movf	(??_main+1)^0,w,c
  4180  000F2A  6F9B               	movwf	(_main$578+1)& (0+255),b
  4181  000F2C  EF9C  F007         	goto	l6236
  4182  000F30                     l308:
  4183  000F30  C0BC  F09A         	movff	main@tecla,_main$578
  4184  000F34  0100               	movlb	0	; () banked
  4185  000F36  6B9B               	clrf	(_main$578+1)& (0+255),b
  4186  000F38                     l6236:
  4187                           
  4188                           ; BSR set to: 0
  4189  000F38  519A               	movf	_main$578& (0+255),w,b
  4190  000F3A  ECD0  F019         	call	_fifo_add
  4191  000F3E  EFC4  F002         	goto	l5954
  4192  000F42                     l6240:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;main.c: 452:                                             fifo_indicePrint_inc();
  4196  000F42  ECED  F018         	call	_fifo_indicePrint_inc	;wreg free
  4197  000F46  EFC4  F002         	goto	l5954
  4198  000F4A                     l6244:
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;main.c: 456:                                             fifo_indicePrint_dec();
  4202  000F4A  EC15  F01D         	call	_fifo_indicePrint_dec	;wreg free
  4203  000F4E  EFC4  F002         	goto	l5954
  4204  000F52                     l6248:
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;main.c: 461:                                             if(fifo_indice() == 2 )
  4208  000F52  EC96  F01D         	call	_fifo_indice	;wreg free
  4209  000F56  0A02               	xorlw	2
  4210  000F58  A4D8               	btfss	status,2,c
  4211  000F5A  EFB1  F007         	goto	u4551
  4212  000F5E  EFB3  F007         	goto	u4550
  4213  000F62                     u4551:
  4214  000F62  EFB5  F007         	goto	l6252
  4215  000F66                     u4550:
  4216  000F66  EF6C  F001         	goto	l5890
  4217  000F6A                     l6252:
  4218                           
  4219                           ;main.c: 464:                                             {;main.c: 465:                
      +                                                           fifo_delete();
  4220  000F6A  EC92  F017         	call	_fifo_delete	;wreg free
  4221  000F6E  EFC4  F002         	goto	l5954
  4222  000F72                     l6256:
  4223  000F72  0E4A               	movlw	74
  4224  000F74  0100               	movlb	0	; () banked
  4225  000F76  6FBB               	movwf	main@estado& (0+255),b
  4226  000F78  EFA4  F00D         	goto	l6534
  4227  000F7C                     l6258:
  4228                           
  4229                           ; BSR set to: 0
  4230  000F7C  0E29               	movlw	41
  4231  000F7E  6FBB               	movwf	main@estado& (0+255),b
  4232  000F80  EFA4  F00D         	goto	l6534
  4233  000F84                     l6260:
  4234                           
  4235                           ; BSR set to: 0
  4236  000F84  0E5A               	movlw	90
  4237  000F86  6FBB               	movwf	main@estado& (0+255),b
  4238  000F88  EFA4  F00D         	goto	l6534
  4239  000F8C                     l6264:
  4240                           
  4241                           ; BSR set to: 0
  4242  000F8C  51BC               	movf	main@tecla& (0+255),w,b
  4243  000F8E  6E44               	movwf	??_main^0,c
  4244  000F90  6A45               	clrf	(??_main+1)^0,c
  4245                           
  4246                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4247                           ; Switch size 1, requested type "simple"
  4248                           ; Number of cases is 1, Range of values is 0 to 0
  4249                           ; switch strategies available:
  4250                           ; Name         Instructions Cycles
  4251                           ; simple_byte            4     3 (average)
  4252                           ;	Chosen strategy is simple_byte
  4253  000F92  5045               	movf	(??_main+1)^0,w,c
  4254  000F94  0A00               	xorlw	0	; case 0
  4255  000F96  B4D8               	btfsc	status,2,c
  4256  000F98  EFD0  F007         	goto	l7338
  4257  000F9C  EFA4  F00D         	goto	l6534
  4258  000FA0                     l7338:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ; Switch size 1, requested type "simple"
  4262                           ; Number of cases is 10, Range of values is 35 to 68
  4263                           ; switch strategies available:
  4264                           ; Name         Instructions Cycles
  4265                           ; simple_byte           31    16 (average)
  4266                           ;	Chosen strategy is simple_byte
  4267  000FA0  5044               	movf	??_main^0,w,c
  4268  000FA2  0A23               	xorlw	35	; case 35
  4269  000FA4  B4D8               	btfsc	status,2,c
  4270  000FA6  EFB9  F007         	goto	l6256
  4271  000FAA  0A09               	xorlw	9	; case 42
  4272  000FAC  B4D8               	btfsc	status,2,c
  4273  000FAE  EFA9  F007         	goto	l6248
  4274  000FB2  0A1A               	xorlw	26	; case 48
  4275  000FB4  B4D8               	btfsc	status,2,c
  4276  000FB6  EFBE  F007         	goto	l6258
  4277  000FBA  0A04               	xorlw	4	; case 52
  4278  000FBC  B4D8               	btfsc	status,2,c
  4279  000FBE  EFA5  F007         	goto	l6244
  4280  000FC2  0A02               	xorlw	2	; case 54
  4281  000FC4  B4D8               	btfsc	status,2,c
  4282  000FC6  EFA1  F007         	goto	l6240
  4283  000FCA  0A0F               	xorlw	15	; case 57
  4284  000FCC  B4D8               	btfsc	status,2,c
  4285  000FCE  EFC2  F007         	goto	l6260
  4286  000FD2  0A78               	xorlw	120	; case 65
  4287  000FD4  B4D8               	btfsc	status,2,c
  4288  000FD6  EF73  F007         	goto	l304
  4289  000FDA  0A03               	xorlw	3	; case 66
  4290  000FDC  B4D8               	btfsc	status,2,c
  4291  000FDE  EF73  F007         	goto	l6230
  4292  000FE2  0A01               	xorlw	1	; case 67
  4293  000FE4  B4D8               	btfsc	status,2,c
  4294  000FE6  EF73  F007         	goto	l6230
  4295  000FEA  0A07               	xorlw	7	; case 68
  4296  000FEC  B4D8               	btfsc	status,2,c
  4297  000FEE  EF73  F007         	goto	l6230
  4298  000FF2  EFA4  F00D         	goto	l6534
  4299  000FF6                     l6266:
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;main.c: 479:                             fifo_print();
  4303  000FF6  EC00  F00F         	call	_fifo_print	;wreg free
  4304  000FFA  EF68  F007         	goto	l6226
  4305  000FFE                     l6270:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;main.c: 484:                             IHM.printpos(3,0,"<  /  >");
  4309  000FFE  EE20  F0DF         	lfsr	2,_IHM+4
  4310  001002  D802               	call	u4568
  4311  001004  EF15  F008         	goto	u4569
  4312  001008                     u4568:
  4313  001008  0005               	push	
  4314  00100A  6EFA               	movwf	pclath,c
  4315  00100C  50DE               	movf	postinc2,w,c
  4316  00100E  6EFD               	movwf	tosl,c
  4317  001010  50DE               	movf	postinc2,w,c
  4318  001012  6EFE               	movwf	tosh,c
  4319  001014  50F8               	movf	tblptru,w,c
  4320  001016  6EFF               	movwf	tosu,c
  4321  001018  50FA               	movf	pclath,w,c
  4322  00101A  0E00               	movlw	0
  4323  00101C  6E2D               	movwf	dispLCD@col^0,c
  4324  00101E  0EF5               	movlw	low STR_20
  4325  001020  6E2E               	movwf	dispLCD@str^0,c
  4326  001022  0E7F               	movlw	high STR_20
  4327  001024  6E2F               	movwf	(dispLCD@str+1)^0,c
  4328  001026  0E03               	movlw	3
  4329  001028  0012               	return		;indir
  4330  00102A                     u4569:
  4331  00102A                     
  4332                           ;main.c: 485:                             IHM.printv(3, 1,( fifo_indice()-2 ), 2);
  4333  00102A  EE20  F0E1         	lfsr	2,_IHM+6
  4334  00102E  D802               	call	u4578
  4335  001030  EF32  F008         	goto	u4579
  4336  001034                     u4578:
  4337  001034  0005               	push	
  4338  001036  6EFA               	movwf	pclath,c
  4339  001038  50DE               	movf	postinc2,w,c
  4340  00103A  6EFD               	movwf	tosl,c
  4341  00103C  50DE               	movf	postinc2,w,c
  4342  00103E  6EFE               	movwf	tosh,c
  4343  001040  50F8               	movf	tblptru,w,c
  4344  001042  6EFF               	movwf	tosu,c
  4345  001044  50FA               	movf	pclath,w,c
  4346  001046  0E01               	movlw	1
  4347  001048  6E31               	movwf	dispLCD_num@col^0,c
  4348  00104A  EC96  F01D         	call	_fifo_indice
  4349  00104E  6E44               	movwf	??_main^0,c
  4350  001050  0EFE               	movlw	254
  4351  001052  2444               	addwf	??_main^0,w,c
  4352  001054  6E32               	movwf	dispLCD_num@num^0,c
  4353  001056  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4354  001058  0EFF               	movlw	255
  4355  00105A  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4356  00105C  0E02               	movlw	2
  4357  00105E  6E34               	movwf	dispLCD_num@tam^0,c
  4358  001060  0E03               	movlw	3
  4359  001062  0012               	return		;indir
  4360  001064                     u4579:
  4361  001064                     
  4362                           ;main.c: 486:                             IHM.printv(3, 4,( fifo_tam()-2 ), 2);
  4363  001064  EE20  F0E1         	lfsr	2,_IHM+6
  4364  001068  D802               	call	u4588
  4365  00106A  EF4F  F008         	goto	u4589
  4366  00106E                     u4588:
  4367  00106E  0005               	push	
  4368  001070  6EFA               	movwf	pclath,c
  4369  001072  50DE               	movf	postinc2,w,c
  4370  001074  6EFD               	movwf	tosl,c
  4371  001076  50DE               	movf	postinc2,w,c
  4372  001078  6EFE               	movwf	tosh,c
  4373  00107A  50F8               	movf	tblptru,w,c
  4374  00107C  6EFF               	movwf	tosu,c
  4375  00107E  50FA               	movf	pclath,w,c
  4376  001080  0E04               	movlw	4
  4377  001082  6E31               	movwf	dispLCD_num@col^0,c
  4378  001084  EC94  F01D         	call	_fifo_tam
  4379  001088  6E44               	movwf	??_main^0,c
  4380  00108A  0EFE               	movlw	254
  4381  00108C  2444               	addwf	??_main^0,w,c
  4382  00108E  6E32               	movwf	dispLCD_num@num^0,c
  4383  001090  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4384  001092  0EFF               	movlw	255
  4385  001094  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4386  001096  0E02               	movlw	2
  4387  001098  6E34               	movwf	dispLCD_num@tam^0,c
  4388  00109A  0E03               	movlw	3
  4389  00109C  0012               	return		;indir
  4390  00109E                     u4589:
  4391  00109E                     
  4392                           ;main.c: 487:                             estado = 11;
  4393  00109E  0E0B               	movlw	11
  4394  0010A0  0100               	movlb	0	; () banked
  4395  0010A2  6FBB               	movwf	main@estado& (0+255),b
  4396                           
  4397                           ;main.c: 488:                             break;
  4398  0010A4  EFA4  F00D         	goto	l6534
  4399  0010A8                     l6278:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 492:                             estado = 70;
  4403  0010A8  0E46               	movlw	70
  4404  0010AA  6FBB               	movwf	main@estado& (0+255),b
  4405                           
  4406                           ;main.c: 493:                             meAtuadores = 1;
  4407  0010AC  0E01               	movlw	1
  4408  0010AE  6FAF               	movwf	main@meAtuadores& (0+255),b
  4409                           
  4410                           ;main.c: 494:                             break;
  4411  0010B0  EFA4  F00D         	goto	l6534
  4412  0010B4                     l6280:
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;main.c: 497:                             if( meAtuadores == 3 && botao != 2 )
  4416  0010B4  0E03               	movlw	3
  4417  0010B6  19AF               	xorwf	main@meAtuadores& (0+255),w,b
  4418  0010B8  A4D8               	btfss	status,2,c
  4419  0010BA  EF61  F008         	goto	u4591
  4420  0010BE  EF63  F008         	goto	u4590
  4421  0010C2                     u4591:
  4422  0010C2  EFFD  F008         	goto	l6300
  4423  0010C6                     u4590:
  4424  0010C6                     
  4425                           ; BSR set to: 0
  4426  0010C6  0E02               	movlw	2
  4427  0010C8  19B3               	xorwf	main@botao& (0+255),w,b
  4428  0010CA  B4D8               	btfsc	status,2,c
  4429  0010CC  EF6A  F008         	goto	u4601
  4430  0010D0  EF6C  F008         	goto	u4600
  4431  0010D4                     u4601:
  4432  0010D4  EFFD  F008         	goto	l6300
  4433  0010D8                     u4600:
  4434  0010D8                     
  4435                           ; BSR set to: 0
  4436                           ;main.c: 498:                             {;main.c: 499:                                
      +                           IHM.printpos(0, 0, "       [    ]       ");
  4437  0010D8  EE20  F0DF         	lfsr	2,_IHM+4
  4438  0010DC  D802               	call	u4618
  4439  0010DE  EF82  F008         	goto	u4619
  4440  0010E2                     u4618:
  4441  0010E2  0005               	push	
  4442  0010E4  6EFA               	movwf	pclath,c
  4443  0010E6  50DE               	movf	postinc2,w,c
  4444  0010E8  6EFD               	movwf	tosl,c
  4445  0010EA  50DE               	movf	postinc2,w,c
  4446  0010EC  6EFE               	movwf	tosh,c
  4447  0010EE  50F8               	movf	tblptru,w,c
  4448  0010F0  6EFF               	movwf	tosu,c
  4449  0010F2  50FA               	movf	pclath,w,c
  4450  0010F4  0E00               	movlw	0
  4451  0010F6  6E2D               	movwf	dispLCD@col^0,c
  4452  0010F8  0EA5               	movlw	low STR_21
  4453  0010FA  6E2E               	movwf	dispLCD@str^0,c
  4454  0010FC  0E7E               	movlw	high STR_21
  4455  0010FE  6E2F               	movwf	(dispLCD@str+1)^0,c
  4456  001100  0E00               	movlw	0
  4457  001102  0012               	return		;indir
  4458  001104                     u4619:
  4459  001104                     
  4460                           ;main.c: 500:                                 printExec(1, -1);
  4461  001104  0EFF               	movlw	255
  4462  001106  6E3F               	movwf	printExec@ind^0,c
  4463  001108  0E01               	movlw	1
  4464  00110A  EC72  F010         	call	_printExec
  4465  00110E                     
  4466                           ;main.c: 501:                                 printExec(9, 0);
  4467  00110E  0E00               	movlw	0
  4468  001110  6E3F               	movwf	printExec@ind^0,c
  4469  001112  0E09               	movlw	9
  4470  001114  EC72  F010         	call	_printExec
  4471  001118                     
  4472                           ;main.c: 502:                                 printExec(14, 1);
  4473  001118  0E01               	movlw	1
  4474  00111A  6E3F               	movwf	printExec@ind^0,c
  4475  00111C  0E0E               	movlw	14
  4476  00111E  EC72  F010         	call	_printExec
  4477  001122                     
  4478                           ;main.c: 503:                                 IHM.printpos(2, 0, "<  /  > c:          ")
      +                          ;
  4479  001122  EE20  F0DF         	lfsr	2,_IHM+4
  4480  001126  D802               	call	u4628
  4481  001128  EFA7  F008         	goto	u4629
  4482  00112C                     u4628:
  4483  00112C  0005               	push	
  4484  00112E  6EFA               	movwf	pclath,c
  4485  001130  50DE               	movf	postinc2,w,c
  4486  001132  6EFD               	movwf	tosl,c
  4487  001134  50DE               	movf	postinc2,w,c
  4488  001136  6EFE               	movwf	tosh,c
  4489  001138  50F8               	movf	tblptru,w,c
  4490  00113A  6EFF               	movwf	tosu,c
  4491  00113C  50FA               	movf	pclath,w,c
  4492  00113E  0E00               	movlw	0
  4493  001140  6E2D               	movwf	dispLCD@col^0,c
  4494  001142  0E66               	movlw	low STR_22
  4495  001144  6E2E               	movwf	dispLCD@str^0,c
  4496  001146  0E7E               	movlw	high STR_22
  4497  001148  6E2F               	movwf	(dispLCD@str+1)^0,c
  4498  00114A  0E02               	movlw	2
  4499  00114C  0012               	return		;indir
  4500  00114E                     u4629:
  4501  00114E                     
  4502                           ;main.c: 504:                                 IHM.printv(2, 4,( fifo_indice() - 2 ), 2);
  4503  00114E  EE20  F0E1         	lfsr	2,_IHM+6
  4504  001152  D802               	call	u4638
  4505  001154  EFC4  F008         	goto	u4639
  4506  001158                     u4638:
  4507  001158  0005               	push	
  4508  00115A  6EFA               	movwf	pclath,c
  4509  00115C  50DE               	movf	postinc2,w,c
  4510  00115E  6EFD               	movwf	tosl,c
  4511  001160  50DE               	movf	postinc2,w,c
  4512  001162  6EFE               	movwf	tosh,c
  4513  001164  50F8               	movf	tblptru,w,c
  4514  001166  6EFF               	movwf	tosu,c
  4515  001168  50FA               	movf	pclath,w,c
  4516  00116A  0E04               	movlw	4
  4517  00116C  6E31               	movwf	dispLCD_num@col^0,c
  4518  00116E  EC96  F01D         	call	_fifo_indice
  4519  001172  6E44               	movwf	??_main^0,c
  4520  001174  0EFE               	movlw	254
  4521  001176  2444               	addwf	??_main^0,w,c
  4522  001178  6E32               	movwf	dispLCD_num@num^0,c
  4523  00117A  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4524  00117C  0EFF               	movlw	255
  4525  00117E  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4526  001180  0E02               	movlw	2
  4527  001182  6E34               	movwf	dispLCD_num@tam^0,c
  4528  001184  0E02               	movlw	2
  4529  001186  0012               	return		;indir
  4530  001188                     u4639:
  4531  001188                     
  4532                           ;main.c: 505:                                 IHM.printv(2, 1, ( getIndicePassos() - 1 )
      +                          , 2);
  4533  001188  EE20  F0E1         	lfsr	2,_IHM+6
  4534  00118C  D802               	call	u4648
  4535  00118E  EFE1  F008         	goto	u4649
  4536  001192                     u4648:
  4537  001192  0005               	push	
  4538  001194  6EFA               	movwf	pclath,c
  4539  001196  50DE               	movf	postinc2,w,c
  4540  001198  6EFD               	movwf	tosl,c
  4541  00119A  50DE               	movf	postinc2,w,c
  4542  00119C  6EFE               	movwf	tosh,c
  4543  00119E  50F8               	movf	tblptru,w,c
  4544  0011A0  6EFF               	movwf	tosu,c
  4545  0011A2  50FA               	movf	pclath,w,c
  4546  0011A4  0E01               	movlw	1
  4547  0011A6  6E31               	movwf	dispLCD_num@col^0,c
  4548  0011A8  EC92  F01D         	call	_getIndicePassos
  4549  0011AC  6E44               	movwf	??_main^0,c
  4550  0011AE  0EFF               	movlw	255
  4551  0011B0  2444               	addwf	??_main^0,w,c
  4552  0011B2  6E32               	movwf	dispLCD_num@num^0,c
  4553  0011B4  6A33               	clrf	(dispLCD_num@num+1)^0,c
  4554  0011B6  0EFF               	movlw	255
  4555  0011B8  2233               	addwfc	(dispLCD_num@num+1)^0,f,c
  4556  0011BA  0E02               	movlw	2
  4557  0011BC  6E34               	movwf	dispLCD_num@tam^0,c
  4558  0011BE  0E02               	movlw	2
  4559  0011C0  0012               	return		;indir
  4560  0011C2                     u4649:
  4561  0011C2                     
  4562                           ;main.c: 506:                                 IHM.printv(2, 11, ( getContCiclos() + 1 ),
      +                           5);
  4563  0011C2  EE20  F0E1         	lfsr	2,_IHM+6
  4564  0011C6  D802               	call	u4658
  4565  0011C8  EFFD  F008         	goto	u4659
  4566  0011CC                     u4658:
  4567  0011CC  0005               	push	
  4568  0011CE  6EFA               	movwf	pclath,c
  4569  0011D0  50DE               	movf	postinc2,w,c
  4570  0011D2  6EFD               	movwf	tosl,c
  4571  0011D4  50DE               	movf	postinc2,w,c
  4572  0011D6  6EFE               	movwf	tosh,c
  4573  0011D8  50F8               	movf	tblptru,w,c
  4574  0011DA  6EFF               	movwf	tosu,c
  4575  0011DC  50FA               	movf	pclath,w,c
  4576  0011DE  0E0B               	movlw	11
  4577  0011E0  6E31               	movwf	dispLCD_num@col^0,c
  4578  0011E2  EC76  F01D         	call	_getContCiclos
  4579  0011E6  0E01               	movlw	1
  4580  0011E8  2426               	addwf	?_getContCiclos^0,w,c
  4581  0011EA  6E32               	movwf	dispLCD_num@num^0,c
  4582  0011EC  0E00               	movlw	0
  4583  0011EE  2027               	addwfc	(?_getContCiclos+1)^0,w,c
  4584  0011F0  6E33               	movwf	(dispLCD_num@num+1)^0,c
  4585  0011F2  0E05               	movlw	5
  4586  0011F4  6E34               	movwf	dispLCD_num@tam^0,c
  4587  0011F6  0E02               	movlw	2
  4588  0011F8  0012               	return		;indir
  4589  0011FA                     u4659:
  4590  0011FA                     l6300:
  4591                           
  4592                           ;main.c: 509:                             if(meAtuadores == 0)
  4593  0011FA  0100               	movlb	0	; () banked
  4594  0011FC  51AF               	movf	main@meAtuadores& (0+255),w,b
  4595  0011FE  A4D8               	btfss	status,2,c
  4596  001200  EF04  F009         	goto	u4661
  4597  001204  EF06  F009         	goto	u4660
  4598  001208                     u4661:
  4599  001208  EF17  F009         	goto	l6306
  4600  00120C                     u4660:
  4601  00120C                     
  4602                           ; BSR set to: 0
  4603                           ;main.c: 510:                             {;main.c: 511:                                
      +                           estado = 16;
  4604  00120C  0E10               	movlw	16
  4605  00120E  6FBB               	movwf	main@estado& (0+255),b
  4606  001210                     
  4607                           ; BSR set to: 0
  4608                           ;main.c: 512:                                 IHM.clr();
  4609  001210  EE20  F0E3         	lfsr	2,_IHM+8
  4610  001214  D802               	call	u4678
  4611  001216  EF17  F009         	goto	u4679
  4612  00121A                     u4678:
  4613  00121A  0005               	push	
  4614  00121C  6EFA               	movwf	pclath,c
  4615  00121E  50DE               	movf	postinc2,w,c
  4616  001220  6EFD               	movwf	tosl,c
  4617  001222  50DE               	movf	postinc2,w,c
  4618  001224  6EFE               	movwf	tosh,c
  4619  001226  50F8               	movf	tblptru,w,c
  4620  001228  6EFF               	movwf	tosu,c
  4621  00122A  50FA               	movf	pclath,w,c
  4622  00122C  0012               	return		;indir
  4623  00122E                     u4679:
  4624  00122E                     l6306:
  4625                           
  4626                           ;main.c: 514:                             tecla = teclado_borda();
  4627  00122E  EC94  F01B         	call	_teclado_borda
  4628  001232  0100               	movlb	0	; () banked
  4629  001234  6FBC               	movwf	main@tecla& (0+255),b
  4630                           
  4631                           ;main.c: 515:                             switch(tecla)
  4632  001236  EF36  F009         	goto	l6320
  4633  00123A                     l6308:
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;main.c: 518:                                     botao = 1;
  4637  00123A  0E01               	movlw	1
  4638  00123C  6FB3               	movwf	main@botao& (0+255),b
  4639                           
  4640                           ;main.c: 519:                                     break;
  4641  00123E  EFA4  F00D         	goto	l6534
  4642  001242                     l6310:
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;main.c: 522:                                     botao = 2;
  4646  001242  0E02               	movlw	2
  4647  001244  6FB3               	movwf	main@botao& (0+255),b
  4648                           
  4649                           ;main.c: 523:                                     break;
  4650  001246  EFA4  F00D         	goto	l6534
  4651  00124A                     l6312:
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;main.c: 526:                                     botao = 0;
  4655  00124A  0E00               	movlw	0
  4656  00124C  6FB3               	movwf	main@botao& (0+255),b
  4657                           
  4658                           ;main.c: 527:                                     break;
  4659  00124E  EFA4  F00D         	goto	l6534
  4660  001252                     l6314:
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;main.c: 530:                                     if(botao == 2)
  4664  001252  0E02               	movlw	2
  4665  001254  19B3               	xorwf	main@botao& (0+255),w,b
  4666  001256  A4D8               	btfss	status,2,c
  4667  001258  EF30  F009         	goto	u4681
  4668  00125C  EF32  F009         	goto	u4680
  4669  001260                     u4681:
  4670  001260  EFA4  F00D         	goto	l6534
  4671  001264                     u4680:
  4672  001264                     
  4673                           ; BSR set to: 0
  4674                           ;main.c: 531:                                         botao = 3;
  4675  001264  0E03               	movlw	3
  4676  001266  6FB3               	movwf	main@botao& (0+255),b
  4677  001268  EFA4  F00D         	goto	l6534
  4678  00126C                     l6320:
  4679                           
  4680                           ; BSR set to: 0
  4681  00126C  51BC               	movf	main@tecla& (0+255),w,b
  4682  00126E  6E44               	movwf	??_main^0,c
  4683  001270  6A45               	clrf	(??_main+1)^0,c
  4684                           
  4685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4686                           ; Switch size 1, requested type "simple"
  4687                           ; Number of cases is 1, Range of values is 0 to 0
  4688                           ; switch strategies available:
  4689                           ; Name         Instructions Cycles
  4690                           ; simple_byte            4     3 (average)
  4691                           ;	Chosen strategy is simple_byte
  4692  001272  5045               	movf	(??_main+1)^0,w,c
  4693  001274  0A00               	xorlw	0	; case 0
  4694  001276  B4D8               	btfsc	status,2,c
  4695  001278  EF40  F009         	goto	l7340
  4696  00127C  EFA4  F00D         	goto	l6534
  4697  001280                     l7340:
  4698                           
  4699                           ; BSR set to: 0
  4700                           ; Switch size 1, requested type "simple"
  4701                           ; Number of cases is 4, Range of values is 35 to 53
  4702                           ; switch strategies available:
  4703                           ; Name         Instructions Cycles
  4704                           ; simple_byte           13     7 (average)
  4705                           ;	Chosen strategy is simple_byte
  4706  001280  5044               	movf	??_main^0,w,c
  4707  001282  0A23               	xorlw	35	; case 35
  4708  001284  B4D8               	btfsc	status,2,c
  4709  001286  EF1D  F009         	goto	l6308
  4710  00128A  0A13               	xorlw	19	; case 48
  4711  00128C  B4D8               	btfsc	status,2,c
  4712  00128E  EF25  F009         	goto	l6312
  4713  001292  0A01               	xorlw	1	; case 49
  4714  001294  B4D8               	btfsc	status,2,c
  4715  001296  EF29  F009         	goto	l6314
  4716  00129A  0A04               	xorlw	4	; case 53
  4717  00129C  B4D8               	btfsc	status,2,c
  4718  00129E  EF21  F009         	goto	l6310
  4719  0012A2  EFA4  F00D         	goto	l6534
  4720  0012A6                     l6322:
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;main.c: 537:                             tecla = teclado_borda();
  4724  0012A6  EC94  F01B         	call	_teclado_borda	;wreg free
  4725  0012AA  0100               	movlb	0	; () banked
  4726  0012AC  6FBC               	movwf	main@tecla& (0+255),b
  4727  0012AE                     
  4728                           ; BSR set to: 0
  4729                           ;main.c: 538:                             if(tecla >= '0' && tecla <= '9')
  4730  0012AE  0E2F               	movlw	47
  4731  0012B0  65BC               	cpfsgt	main@tecla& (0+255),b
  4732  0012B2  EF5D  F009         	goto	u4691
  4733  0012B6  EF5F  F009         	goto	u4690
  4734  0012BA                     u4691:
  4735  0012BA  EF80  F009         	goto	l6334
  4736  0012BE                     u4690:
  4737  0012BE                     
  4738                           ; BSR set to: 0
  4739  0012BE  0E3A               	movlw	58
  4740  0012C0  61BC               	cpfslt	main@tecla& (0+255),b
  4741  0012C2  EF65  F009         	goto	u4701
  4742  0012C6  EF67  F009         	goto	u4700
  4743  0012CA                     u4701:
  4744  0012CA  EF80  F009         	goto	l6334
  4745  0012CE                     u4700:
  4746  0012CE                     
  4747                           ; BSR set to: 0
  4748                           ;main.c: 539:                             {;main.c: 540:                                
      +                           dignum_conc(tecla, &num);
  4749  0012CE  0EB4               	movlw	low main@num
  4750  0012D0  6E2C               	movwf	dignum_conc@ptrNum^0,c
  4751  0012D2  0E00               	movlw	high main@num
  4752  0012D4  6E2D               	movwf	(dignum_conc@ptrNum+1)^0,c
  4753  0012D6  51BC               	movf	main@tecla& (0+255),w,b
  4754  0012D8  EC93  F01A         	call	_dignum_conc
  4755  0012DC                     
  4756                           ;main.c: 541:                                 if(num > 120)
  4757  0012DC  0100               	movlb	0	; () banked
  4758  0012DE  51B5               	movf	(main@num+1)& (0+255),w,b
  4759  0012E0  E109               	bnz	u4710
  4760  0012E2  0E79               	movlw	121
  4761  0012E4  5DB4               	subwf	main@num& (0+255),w,b
  4762  0012E6  A0D8               	btfss	status,0,c
  4763  0012E8  EF78  F009         	goto	u4711
  4764  0012EC  EF7A  F009         	goto	u4710
  4765  0012F0                     u4711:
  4766  0012F0  EF7E  F009         	goto	l335
  4767  0012F4                     u4710:
  4768  0012F4                     
  4769                           ; BSR set to: 0
  4770                           ;main.c: 542:                                     num = 120;
  4771  0012F4  0E00               	movlw	0
  4772  0012F6  6FB5               	movwf	(main@num+1)& (0+255),b
  4773  0012F8  0E78               	movlw	120
  4774  0012FA  6FB4               	movwf	main@num& (0+255),b
  4775  0012FC                     l335:
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;main.c: 543:                                 estado = 41;
  4779  0012FC  0E29               	movlw	41
  4780  0012FE  6FBB               	movwf	main@estado& (0+255),b
  4781  001300                     l6334:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;main.c: 545:                             if(tecla == '*')
  4785  001300  0E2A               	movlw	42
  4786  001302  19BC               	xorwf	main@tecla& (0+255),w,b
  4787  001304  A4D8               	btfss	status,2,c
  4788  001306  EF87  F009         	goto	u4721
  4789  00130A  EF89  F009         	goto	u4720
  4790  00130E                     u4721:
  4791  00130E  EF92  F009         	goto	l6340
  4792  001312                     u4720:
  4793  001312                     
  4794                           ; BSR set to: 0
  4795                           ;main.c: 546:                             {;main.c: 547:                                
      +                           dignum_apagar(&num);
  4796  001312  0EB4               	movlw	low main@num
  4797  001314  6E2D               	movwf	dignum_apagar@ptrNum^0,c
  4798  001316  0E00               	movlw	high main@num
  4799  001318  6E2E               	movwf	(dignum_apagar@ptrNum+1)^0,c
  4800  00131A  ECF9  F01B         	call	_dignum_apagar	;wreg free
  4801  00131E                     
  4802                           ;main.c: 548:                                 estado = 41;
  4803  00131E  0E29               	movlw	41
  4804  001320  0100               	movlb	0	; () banked
  4805  001322  6FBB               	movwf	main@estado& (0+255),b
  4806  001324                     l6340:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;main.c: 550:                             if(tecla == '#')
  4810  001324  0E23               	movlw	35
  4811  001326  19BC               	xorwf	main@tecla& (0+255),w,b
  4812  001328  A4D8               	btfss	status,2,c
  4813  00132A  EF99  F009         	goto	u4731
  4814  00132E  EF9B  F009         	goto	u4730
  4815  001332                     u4731:
  4816  001332  EFA4  F00D         	goto	l6534
  4817  001336                     u4730:
  4818  001336                     
  4819                           ; BSR set to: 0
  4820                           ;main.c: 551:                                 estado = 42;
  4821  001336  0E2A               	movlw	42
  4822  001338  6FBB               	movwf	main@estado& (0+255),b
  4823  00133A  EFA4  F00D         	goto	l6534
  4824  00133E                     l6344:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;main.c: 556:                             IHM.printpos(2, 0, "config tempo:      s");
  4828  00133E  EE20  F0DF         	lfsr	2,_IHM+4
  4829  001342  D802               	call	u4748
  4830  001344  EFB5  F009         	goto	u4749
  4831  001348                     u4748:
  4832  001348  0005               	push	
  4833  00134A  6EFA               	movwf	pclath,c
  4834  00134C  50DE               	movf	postinc2,w,c
  4835  00134E  6EFD               	movwf	tosl,c
  4836  001350  50DE               	movf	postinc2,w,c
  4837  001352  6EFE               	movwf	tosh,c
  4838  001354  50F8               	movf	tblptru,w,c
  4839  001356  6EFF               	movwf	tosu,c
  4840  001358  50FA               	movf	pclath,w,c
  4841  00135A  0E00               	movlw	0
  4842  00135C  6E2D               	movwf	dispLCD@col^0,c
  4843  00135E  0EE0               	movlw	low STR_23
  4844  001360  6E2E               	movwf	dispLCD@str^0,c
  4845  001362  0E7F               	movlw	high STR_23
  4846  001364  6E2F               	movwf	(dispLCD@str+1)^0,c
  4847  001366  0E02               	movlw	2
  4848  001368  0012               	return		;indir
  4849  00136A                     u4749:
  4850  00136A                     
  4851                           ;main.c: 557:                             IHM.printv(2, 15, num, 3);
  4852  00136A  EE20  F0E1         	lfsr	2,_IHM+6
  4853  00136E  D802               	call	u4758
  4854  001370  EFCD  F009         	goto	u4759
  4855  001374                     u4758:
  4856  001374  0005               	push	
  4857  001376  6EFA               	movwf	pclath,c
  4858  001378  50DE               	movf	postinc2,w,c
  4859  00137A  6EFD               	movwf	tosl,c
  4860  00137C  50DE               	movf	postinc2,w,c
  4861  00137E  6EFE               	movwf	tosh,c
  4862  001380  50F8               	movf	tblptru,w,c
  4863  001382  6EFF               	movwf	tosu,c
  4864  001384  50FA               	movf	pclath,w,c
  4865  001386  0E0F               	movlw	15
  4866  001388  6E31               	movwf	dispLCD_num@col^0,c
  4867  00138A  C0B4  F032         	movff	main@num,dispLCD_num@num
  4868  00138E  C0B5  F033         	movff	main@num+1,dispLCD_num@num+1
  4869  001392  0E03               	movlw	3
  4870  001394  6E34               	movwf	dispLCD_num@tam^0,c
  4871  001396  0E02               	movlw	2
  4872  001398  0012               	return		;indir
  4873  00139A                     u4759:
  4874  00139A                     
  4875                           ;main.c: 558:                             estado = 40;
  4876  00139A  0E28               	movlw	40
  4877  00139C  0100               	movlb	0	; () banked
  4878  00139E  6FBB               	movwf	main@estado& (0+255),b
  4879                           
  4880                           ;main.c: 559:                             break;
  4881  0013A0  EFA4  F00D         	goto	l6534
  4882  0013A4                     l6350:
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;main.c: 562:                             fifo_add_tempo(num);
  4886  0013A4  51B4               	movf	main@num& (0+255),w,b
  4887  0013A6  ECA4  F019         	call	_fifo_add_tempo
  4888  0013AA                     l6352:
  4889                           
  4890                           ;main.c: 563:                             IHM.clr();
  4891  0013AA  EE20  F0E3         	lfsr	2,_IHM+8
  4892  0013AE  D802               	call	u4768
  4893  0013B0  EFE4  F009         	goto	u4769
  4894  0013B4                     u4768:
  4895  0013B4  0005               	push	
  4896  0013B6  6EFA               	movwf	pclath,c
  4897  0013B8  50DE               	movf	postinc2,w,c
  4898  0013BA  6EFD               	movwf	tosl,c
  4899  0013BC  50DE               	movf	postinc2,w,c
  4900  0013BE  6EFE               	movwf	tosh,c
  4901  0013C0  50F8               	movf	tblptru,w,c
  4902  0013C2  6EFF               	movwf	tosu,c
  4903  0013C4  50FA               	movf	pclath,w,c
  4904  0013C6  0012               	return		;indir
  4905  0013C8                     u4769:
  4906  0013C8  EFC4  F002         	goto	l5954
  4907  0013CC                     l6356:
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;main.c: 596:                             tecla = teclado_borda();
  4911  0013CC  EC94  F01B         	call	_teclado_borda	;wreg free
  4912  0013D0  0100               	movlb	0	; () banked
  4913  0013D2  6FBC               	movwf	main@tecla& (0+255),b
  4914  0013D4                     
  4915                           ; BSR set to: 0
  4916                           ;main.c: 597:                             if(tecla >= '0' && tecla <= '9')
  4917  0013D4  0E2F               	movlw	47
  4918  0013D6  65BC               	cpfsgt	main@tecla& (0+255),b
  4919  0013D8  EFF0  F009         	goto	u4771
  4920  0013DC  EFF2  F009         	goto	u4770
  4921  0013E0                     u4771:
  4922  0013E0  EF24  F00A         	goto	l6380
  4923  0013E4                     u4770:
  4924  0013E4                     
  4925                           ; BSR set to: 0
  4926  0013E4  0E3A               	movlw	58
  4927  0013E6  61BC               	cpfslt	main@tecla& (0+255),b
  4928  0013E8  EFF8  F009         	goto	u4781
  4929  0013EC  EFFA  F009         	goto	u4780
  4930  0013F0                     u4781:
  4931  0013F0  EF24  F00A         	goto	l6380
  4932  0013F4                     u4780:
  4933  0013F4                     
  4934                           ; BSR set to: 0
  4935                           ;main.c: 598:                                {;main.c: 599:                             
      +                              dignum_conc(tecla, &ciclos);
  4936  0013F4  0EB0               	movlw	low main@ciclos
  4937  0013F6  6E2C               	movwf	dignum_conc@ptrNum^0,c
  4938  0013F8  0E00               	movlw	high main@ciclos
  4939  0013FA  6E2D               	movwf	(dignum_conc@ptrNum+1)^0,c
  4940  0013FC  51BC               	movf	main@tecla& (0+255),w,b
  4941  0013FE  EC93  F01A         	call	_dignum_conc
  4942  001402                     
  4943                           ;main.c: 600:                                 if(ciclos > 10000)
  4944  001402  0E11               	movlw	17
  4945  001404  0100               	movlb	0	; () banked
  4946  001406  5DB0               	subwf	main@ciclos& (0+255),w,b
  4947  001408  0E27               	movlw	39
  4948  00140A  59B1               	subwfb	(main@ciclos+1)& (0+255),w,b
  4949  00140C  A0D8               	btfss	status,0,c
  4950  00140E  EF0B  F00A         	goto	u4791
  4951  001412  EF0D  F00A         	goto	u4790
  4952  001416                     u4791:
  4953  001416  EF11  F00A         	goto	l342
  4954  00141A                     u4790:
  4955  00141A                     
  4956                           ; BSR set to: 0
  4957                           ;main.c: 601:                                     ciclos = 10000;
  4958  00141A  0E27               	movlw	39
  4959  00141C  6FB1               	movwf	(main@ciclos+1)& (0+255),b
  4960  00141E  0E10               	movlw	16
  4961  001420  6FB0               	movwf	main@ciclos& (0+255),b
  4962  001422                     l342:
  4963                           
  4964                           ;main.c: 602:                                 estado = 53;
  4965  001422  0E35               	movlw	53
  4966  001424  0100               	movlb	0	; () banked
  4967  001426  6FBB               	movwf	main@estado& (0+255),b
  4968                           
  4969                           ;main.c: 603:                                 break;
  4970  001428  EFA4  F00D         	goto	l6534
  4971  00142C                     l346:
  4972                           
  4973                           ; BSR set to: 0
  4974  00142C  EFC2  F002         	goto	l5952
  4975  001430                     l6372:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 615:                                        estado = 54;
  4979  001430  0E36               	movlw	54
  4980  001432  6FBB               	movwf	main@estado& (0+255),b
  4981                           
  4982                           ;main.c: 616:                                        break;
  4983  001434  EFA4  F00D         	goto	l6534
  4984  001438                     l6374:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;main.c: 618:                                        dignum_apagar(&ciclos);
  4988  001438  0EB0               	movlw	low main@ciclos
  4989  00143A  6E2D               	movwf	dignum_apagar@ptrNum^0,c
  4990  00143C  0E00               	movlw	high main@ciclos
  4991  00143E  6E2E               	movwf	(dignum_apagar@ptrNum+1)^0,c
  4992  001440  ECF9  F01B         	call	_dignum_apagar	;wreg free
  4993  001444  EF11  F00A         	goto	l342
  4994  001448                     l6380:
  4995                           
  4996                           ; BSR set to: 0
  4997  001448  51BC               	movf	main@tecla& (0+255),w,b
  4998  00144A  6E44               	movwf	??_main^0,c
  4999  00144C  6A45               	clrf	(??_main+1)^0,c
  5000                           
  5001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5002                           ; Switch size 1, requested type "simple"
  5003                           ; Number of cases is 1, Range of values is 0 to 0
  5004                           ; switch strategies available:
  5005                           ; Name         Instructions Cycles
  5006                           ; simple_byte            4     3 (average)
  5007                           ;	Chosen strategy is simple_byte
  5008  00144E  5045               	movf	(??_main+1)^0,w,c
  5009  001450  0A00               	xorlw	0	; case 0
  5010  001452  B4D8               	btfsc	status,2,c
  5011  001454  EF2E  F00A         	goto	l7342
  5012  001458  EFA4  F00D         	goto	l6534
  5013  00145C                     l7342:
  5014                           
  5015                           ; BSR set to: 0
  5016                           ; Switch size 1, requested type "simple"
  5017                           ; Number of cases is 6, Range of values is 35 to 68
  5018                           ; switch strategies available:
  5019                           ; Name         Instructions Cycles
  5020                           ; simple_byte           19    10 (average)
  5021                           ;	Chosen strategy is simple_byte
  5022  00145C  5044               	movf	??_main^0,w,c
  5023  00145E  0A23               	xorlw	35	; case 35
  5024  001460  B4D8               	btfsc	status,2,c
  5025  001462  EF18  F00A         	goto	l6372
  5026  001466  0A09               	xorlw	9	; case 42
  5027  001468  B4D8               	btfsc	status,2,c
  5028  00146A  EF1C  F00A         	goto	l6374
  5029  00146E  0A6B               	xorlw	107	; case 65
  5030  001470  B4D8               	btfsc	status,2,c
  5031  001472  EF16  F00A         	goto	l346
  5032  001476  0A03               	xorlw	3	; case 66
  5033  001478  B4D8               	btfsc	status,2,c
  5034  00147A  EFC2  F002         	goto	l5952
  5035  00147E  0A01               	xorlw	1	; case 67
  5036  001480  B4D8               	btfsc	status,2,c
  5037  001482  EFC2  F002         	goto	l5952
  5038  001486  0A07               	xorlw	7	; case 68
  5039  001488  B4D8               	btfsc	status,2,c
  5040  00148A  EFC2  F002         	goto	l5952
  5041  00148E  EFA4  F00D         	goto	l6534
  5042  001492                     l6382:
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;main.c: 625:                             IHM.clr();
  5046  001492  EE20  F0E3         	lfsr	2,_IHM+8
  5047  001496  D802               	call	u4808
  5048  001498  EF58  F00A         	goto	u4809
  5049  00149C                     u4808:
  5050  00149C  0005               	push	
  5051  00149E  6EFA               	movwf	pclath,c
  5052  0014A0  50DE               	movf	postinc2,w,c
  5053  0014A2  6EFD               	movwf	tosl,c
  5054  0014A4  50DE               	movf	postinc2,w,c
  5055  0014A6  6EFE               	movwf	tosh,c
  5056  0014A8  50F8               	movf	tblptru,w,c
  5057  0014AA  6EFF               	movwf	tosu,c
  5058  0014AC  50FA               	movf	pclath,w,c
  5059  0014AE  0012               	return		;indir
  5060  0014B0                     u4809:
  5061  0014B0                     
  5062                           ;main.c: 626:                             IHM.printpos(0, 0, "Ciclos:             ");
  5063  0014B0  EE20  F0DF         	lfsr	2,_IHM+4
  5064  0014B4  D802               	call	u4818
  5065  0014B6  EF6E  F00A         	goto	u4819
  5066  0014BA                     u4818:
  5067  0014BA  0005               	push	
  5068  0014BC  6EFA               	movwf	pclath,c
  5069  0014BE  50DE               	movf	postinc2,w,c
  5070  0014C0  6EFD               	movwf	tosl,c
  5071  0014C2  50DE               	movf	postinc2,w,c
  5072  0014C4  6EFE               	movwf	tosh,c
  5073  0014C6  50F8               	movf	tblptru,w,c
  5074  0014C8  6EFF               	movwf	tosu,c
  5075  0014CA  50FA               	movf	pclath,w,c
  5076  0014CC  0E00               	movlw	0
  5077  0014CE  6E2D               	movwf	dispLCD@col^0,c
  5078  0014D0  0E51               	movlw	low STR_24
  5079  0014D2  6E2E               	movwf	dispLCD@str^0,c
  5080  0014D4  0E7E               	movlw	high STR_24
  5081  0014D6  6E2F               	movwf	(dispLCD@str+1)^0,c
  5082  0014D8  0E00               	movlw	0
  5083  0014DA  0012               	return		;indir
  5084  0014DC                     u4819:
  5085  0014DC                     
  5086                           ;main.c: 627:                             IHM.printv(0, 15, ciclos, 5);
  5087  0014DC  EE20  F0E1         	lfsr	2,_IHM+6
  5088  0014E0  D802               	call	u4828
  5089  0014E2  EF86  F00A         	goto	u4829
  5090  0014E6                     u4828:
  5091  0014E6  0005               	push	
  5092  0014E8  6EFA               	movwf	pclath,c
  5093  0014EA  50DE               	movf	postinc2,w,c
  5094  0014EC  6EFD               	movwf	tosl,c
  5095  0014EE  50DE               	movf	postinc2,w,c
  5096  0014F0  6EFE               	movwf	tosh,c
  5097  0014F2  50F8               	movf	tblptru,w,c
  5098  0014F4  6EFF               	movwf	tosu,c
  5099  0014F6  50FA               	movf	pclath,w,c
  5100  0014F8  0E0F               	movlw	15
  5101  0014FA  6E31               	movwf	dispLCD_num@col^0,c
  5102  0014FC  C0B0  F032         	movff	main@ciclos,dispLCD_num@num
  5103  001500  C0B1  F033         	movff	main@ciclos+1,dispLCD_num@num+1
  5104  001504  0E05               	movlw	5
  5105  001506  6E34               	movwf	dispLCD_num@tam^0,c
  5106  001508  0E00               	movlw	0
  5107  00150A  0012               	return		;indir
  5108  00150C                     u4829:
  5109                           
  5110                           ;main.c: 628:                             IHM.printpos(2, 0, "0 - Ciclo continuo  ");
  5111  00150C  EE20  F0DF         	lfsr	2,_IHM+4
  5112  001510  D802               	call	u4838
  5113  001512  EF9C  F00A         	goto	u4839
  5114  001516                     u4838:
  5115  001516  0005               	push	
  5116  001518  6EFA               	movwf	pclath,c
  5117  00151A  50DE               	movf	postinc2,w,c
  5118  00151C  6EFD               	movwf	tosl,c
  5119  00151E  50DE               	movf	postinc2,w,c
  5120  001520  6EFE               	movwf	tosh,c
  5121  001522  50F8               	movf	tblptru,w,c
  5122  001524  6EFF               	movwf	tosu,c
  5123  001526  50FA               	movf	pclath,w,c
  5124  001528  0E00               	movlw	0
  5125  00152A  6E2D               	movwf	dispLCD@col^0,c
  5126  00152C  0E8C               	movlw	low STR_25
  5127  00152E  6E2E               	movwf	dispLCD@str^0,c
  5128  001530  0E7F               	movlw	high STR_25
  5129  001532  6E2F               	movwf	(dispLCD@str+1)^0,c
  5130  001534  0E02               	movlw	2
  5131  001536  0012               	return		;indir
  5132  001538                     u4839:
  5133  001538                     
  5134                           ;main.c: 629:                             estado = 52;
  5135  001538  0E34               	movlw	52
  5136  00153A  0100               	movlb	0	; () banked
  5137  00153C  6FBB               	movwf	main@estado& (0+255),b
  5138                           
  5139                           ;main.c: 630:                             break;
  5140  00153E  EFA4  F00D         	goto	l6534
  5141  001542                     l6390:
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;main.c: 633:                             salvar_dado(10, 10, init_cond);
  5145  001542  0E0A               	movlw	10
  5146  001544  6E2C               	movwf	salvar_dado@col^0,c
  5147  001546  C0B2  F02D         	movff	main@init_cond,salvar_dado@data
  5148  00154A  0E0A               	movlw	10
  5149  00154C  ECA1  F01C         	call	_salvar_dado
  5150  001550                     
  5151                           ;main.c: 634:                             EEPROM.salvar(11, fifo_adrs() + 2);
  5152  001550  D802               	call	u4848
  5153  001552  EFBF  F00A         	goto	u4849
  5154  001556                     u4848:
  5155  001556  0005               	push	
  5156  001558  0100               	movlb	0	; () banked
  5157  00155A  6EFA               	movwf	pclath,c
  5158  00155C  51D1               	movf	_EEPROM& (0+255),w,b
  5159  00155E  6EFD               	movwf	tosl,c
  5160  001560  51D2               	movf	(_EEPROM+1)& (0+255),w,b
  5161  001562  6EFE               	movwf	tosh,c
  5162  001564  50F8               	movf	tblptru,w,c
  5163  001566  6EFF               	movwf	tosu,c
  5164  001568  50FA               	movf	pclath,w,c
  5165  00156A  EC7B  F01D         	call	_fifo_adrs	;wreg free
  5166  00156E  0E02               	movlw	2
  5167  001570  2426               	addwf	?_fifo_adrs^0,w,c
  5168  001572  6E2C               	movwf	salvar_receita@data^0,c
  5169  001574  0E00               	movlw	0
  5170  001576  2027               	addwfc	(?_fifo_adrs+1)^0,w,c
  5171  001578  6E2D               	movwf	(salvar_receita@data+1)^0,c
  5172  00157A  0E0B               	movlw	11
  5173  00157C  0012               	return		;indir
  5174  00157E                     u4849:
  5175  00157E                     
  5176                           ;main.c: 635:                             IHM.print("    DESEJA SALVAR   \n"
  5177  00157E  0E13               	movlw	low STR_26
  5178  001580  6E2D               	movwf	dispLCD_str@str^0,c
  5179  001582  0E7E               	movlw	high STR_26
  5180  001584  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  5181  001586  EE20  F0DD         	lfsr	2,_IHM+2
  5182  00158A  D802               	call	u4858
  5183  00158C  EFD2  F00A         	goto	u4859
  5184  001590                     u4858:
  5185  001590  0005               	push	
  5186  001592  6EFA               	movwf	pclath,c
  5187  001594  50DE               	movf	postinc2,w,c
  5188  001596  6EFD               	movwf	tosl,c
  5189  001598  50DE               	movf	postinc2,w,c
  5190  00159A  6EFE               	movwf	tosh,c
  5191  00159C  50F8               	movf	tblptru,w,c
  5192  00159E  6EFF               	movwf	tosu,c
  5193  0015A0  50FA               	movf	pclath,w,c
  5194  0015A2  0012               	return		;indir
  5195  0015A4                     u4859:
  5196  0015A4                     
  5197                           ;main.c: 639:                             tecla = teclado_borda();
  5198  0015A4  EC94  F01B         	call	_teclado_borda
  5199  0015A8  0100               	movlb	0	; () banked
  5200  0015AA  6FBC               	movwf	main@tecla& (0+255),b
  5201                           
  5202                           ;main.c: 640:                             switch(tecla)
  5203  0015AC  EFE0  F00A         	goto	l6406
  5204  0015B0                     l6398:
  5205                           
  5206                           ; BSR set to: 0
  5207  0015B0  0E4B               	movlw	75
  5208  0015B2  6FBB               	movwf	main@estado& (0+255),b
  5209  0015B4  EFA4  F00D         	goto	l6534
  5210  0015B8                     l6400:
  5211                           
  5212                           ; BSR set to: 0
  5213  0015B8  EC85  F01D         	call	_dispLCD_clr	;wreg free
  5214  0015BC  EF11  F00A         	goto	l342
  5215  0015C0                     l6406:
  5216                           
  5217                           ; BSR set to: 0
  5218  0015C0  51BC               	movf	main@tecla& (0+255),w,b
  5219  0015C2  6E44               	movwf	??_main^0,c
  5220  0015C4  6A45               	clrf	(??_main+1)^0,c
  5221                           
  5222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5223                           ; Switch size 1, requested type "simple"
  5224                           ; Number of cases is 1, Range of values is 0 to 0
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte            4     3 (average)
  5228                           ;	Chosen strategy is simple_byte
  5229  0015C6  5045               	movf	(??_main+1)^0,w,c
  5230  0015C8  0A00               	xorlw	0	; case 0
  5231  0015CA  B4D8               	btfsc	status,2,c
  5232  0015CC  EFEA  F00A         	goto	l7344
  5233  0015D0  EFA4  F00D         	goto	l6534
  5234  0015D4                     l7344:
  5235                           
  5236                           ; BSR set to: 0
  5237                           ; Switch size 1, requested type "simple"
  5238                           ; Number of cases is 2, Range of values is 35 to 42
  5239                           ; switch strategies available:
  5240                           ; Name         Instructions Cycles
  5241                           ; simple_byte            7     4 (average)
  5242                           ;	Chosen strategy is simple_byte
  5243  0015D4  5044               	movf	??_main^0,w,c
  5244  0015D6  0A23               	xorlw	35	; case 35
  5245  0015D8  B4D8               	btfsc	status,2,c
  5246  0015DA  EFD8  F00A         	goto	l6398
  5247  0015DE  0A09               	xorlw	9	; case 42
  5248  0015E0  B4D8               	btfsc	status,2,c
  5249  0015E2  EFDC  F00A         	goto	l6400
  5250  0015E6  EFA4  F00D         	goto	l6534
  5251  0015EA                     l6408:
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;main.c: 648:                             IHM.clr();
  5255  0015EA  EE20  F0E3         	lfsr	2,_IHM+8
  5256  0015EE  D802               	call	u4868
  5257  0015F0  EF04  F00B         	goto	u4869
  5258  0015F4                     u4868:
  5259  0015F4  0005               	push	
  5260  0015F6  6EFA               	movwf	pclath,c
  5261  0015F8  50DE               	movf	postinc2,w,c
  5262  0015FA  6EFD               	movwf	tosl,c
  5263  0015FC  50DE               	movf	postinc2,w,c
  5264  0015FE  6EFE               	movwf	tosh,c
  5265  001600  50F8               	movf	tblptru,w,c
  5266  001602  6EFF               	movwf	tosu,c
  5267  001604  50FA               	movf	pclath,w,c
  5268  001606  0012               	return		;indir
  5269  001608                     u4869:
  5270  001608                     
  5271                           ;main.c: 649:                             IHM.print(" ESCOLHA A MEMORIA\n"
  5272  001608  0EC5               	movlw	low STR_27
  5273  00160A  6E2D               	movwf	dispLCD_str@str^0,c
  5274  00160C  0E7D               	movlw	high STR_27
  5275  00160E  6E2E               	movwf	(dispLCD_str@str+1)^0,c
  5276  001610  EE20  F0DD         	lfsr	2,_IHM+2
  5277  001614  D802               	call	u4878
  5278  001616  EF17  F00B         	goto	u4879
  5279  00161A                     u4878:
  5280  00161A  0005               	push	
  5281  00161C  6EFA               	movwf	pclath,c
  5282  00161E  50DE               	movf	postinc2,w,c
  5283  001620  6EFD               	movwf	tosl,c
  5284  001622  50DE               	movf	postinc2,w,c
  5285  001624  6EFE               	movwf	tosh,c
  5286  001626  50F8               	movf	tblptru,w,c
  5287  001628  6EFF               	movwf	tosu,c
  5288  00162A  50FA               	movf	pclath,w,c
  5289  00162C  0012               	return		;indir
  5290  00162E                     u4879:
  5291  00162E                     
  5292                           ;main.c: 653:                             estado = 76;
  5293  00162E  0E4C               	movlw	76
  5294  001630  0100               	movlb	0	; () banked
  5295  001632  6FBB               	movwf	main@estado& (0+255),b
  5296  001634                     l6414:
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;main.c: 656:                             tecla = teclado_borda();
  5300  001634  EC94  F01B         	call	_teclado_borda	;wreg free
  5301  001638  0100               	movlb	0	; () banked
  5302  00163A  6FBC               	movwf	main@tecla& (0+255),b
  5303                           
  5304                           ;main.c: 657:                             switch(tecla)
  5305  00163C  EF66  F00B         	goto	l6428
  5306  001640                     l363:
  5307  001640                     l6416:
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;main.c: 669:                                            salvar_dado(10, tecla % 0x30, i
      +                          nit_cond);
  5311  001640  C0BC  F026         	movff	main@tecla,___awmod@dividend
  5312  001644  6A27               	clrf	(___awmod@dividend+1)^0,c
  5313  001646  0E00               	movlw	0
  5314  001648  6E29               	movwf	(___awmod@divisor+1)^0,c
  5315  00164A  0E30               	movlw	48
  5316  00164C  6E28               	movwf	___awmod@divisor^0,c
  5317  00164E  ECF7  F015         	call	___awmod	;wreg free
  5318  001652  5026               	movf	?___awmod^0,w,c
  5319  001654  6E2C               	movwf	salvar_dado@col^0,c
  5320  001656  C0B2  F02D         	movff	main@init_cond,salvar_dado@data
  5321  00165A  0E0A               	movlw	10
  5322  00165C  ECA1  F01C         	call	_salvar_dado
  5323  001660                     
  5324                           ;main.c: 670:                                            EEPROM.salvar(tecla % 0x30, fif
      +                          o_adrs() + 2);
  5325  001660  D802               	call	u4888
  5326  001662  EF50  F00B         	goto	u4889
  5327  001666                     u4888:
  5328  001666  0005               	push	
  5329  001668  0100               	movlb	0	; () banked
  5330  00166A  6EFA               	movwf	pclath,c
  5331  00166C  51D1               	movf	_EEPROM& (0+255),w,b
  5332  00166E  6EFD               	movwf	tosl,c
  5333  001670  51D2               	movf	(_EEPROM+1)& (0+255),w,b
  5334  001672  6EFE               	movwf	tosh,c
  5335  001674  50F8               	movf	tblptru,w,c
  5336  001676  6EFF               	movwf	tosu,c
  5337  001678  50FA               	movf	pclath,w,c
  5338  00167A  EC7B  F01D         	call	_fifo_adrs	;wreg free
  5339  00167E  0E02               	movlw	2
  5340  001680  2426               	addwf	?_fifo_adrs^0,w,c
  5341  001682  6E2C               	movwf	salvar_receita@data^0,c
  5342  001684  0E00               	movlw	0
  5343  001686  2027               	addwfc	(?_fifo_adrs+1)^0,w,c
  5344  001688  6E2D               	movwf	(salvar_receita@data+1)^0,c
  5345  00168A  C0BC  F026         	movff	main@tecla,___awmod@dividend
  5346  00168E  6A27               	clrf	(___awmod@dividend+1)^0,c
  5347  001690  0E00               	movlw	0
  5348  001692  6E29               	movwf	(___awmod@divisor+1)^0,c
  5349  001694  0E30               	movlw	48
  5350  001696  6E28               	movwf	___awmod@divisor^0,c
  5351  001698  ECF7  F015         	call	___awmod	;wreg free
  5352  00169C  5026               	movf	?___awmod^0,w,c
  5353  00169E  0012               	return		;indir
  5354  0016A0                     u4889:
  5355  0016A0                     
  5356                           ;main.c: 671:                                            estado = 77;
  5357  0016A0  0E4D               	movlw	77
  5358  0016A2  0100               	movlb	0	; () banked
  5359  0016A4  6FBB               	movwf	main@estado& (0+255),b
  5360                           
  5361                           ;main.c: 672:                                            break;
  5362  0016A6  EFA4  F00D         	goto	l6534
  5363  0016AA                     l6422:
  5364                           
  5365                           ; BSR set to: 0
  5366  0016AA  EE20  F0E3         	lfsr	2,_IHM+8
  5367  0016AE  D802               	call	u4898
  5368  0016B0  EF64  F00B         	goto	u4899
  5369  0016B4                     u4898:
  5370  0016B4  0005               	push	
  5371  0016B6  6EFA               	movwf	pclath,c
  5372  0016B8  50DE               	movf	postinc2,w,c
  5373  0016BA  6EFD               	movwf	tosl,c
  5374  0016BC  50DE               	movf	postinc2,w,c
  5375  0016BE  6EFE               	movwf	tosh,c
  5376  0016C0  50F8               	movf	tblptru,w,c
  5377  0016C2  6EFF               	movwf	tosu,c
  5378  0016C4  50FA               	movf	pclath,w,c
  5379  0016C6  0012               	return		;indir
  5380  0016C8                     u4899:
  5381  0016C8  EFB9  F007         	goto	l6256
  5382  0016CC                     l6428:
  5383                           
  5384                           ; BSR set to: 0
  5385  0016CC  51BC               	movf	main@tecla& (0+255),w,b
  5386  0016CE  6E44               	movwf	??_main^0,c
  5387  0016D0  6A45               	clrf	(??_main+1)^0,c
  5388                           
  5389                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5390                           ; Switch size 1, requested type "simple"
  5391                           ; Number of cases is 1, Range of values is 0 to 0
  5392                           ; switch strategies available:
  5393                           ; Name         Instructions Cycles
  5394                           ; simple_byte            4     3 (average)
  5395                           ;	Chosen strategy is simple_byte
  5396  0016D2  5045               	movf	(??_main+1)^0,w,c
  5397  0016D4  0A00               	xorlw	0	; case 0
  5398  0016D6  B4D8               	btfsc	status,2,c
  5399  0016D8  EF70  F00B         	goto	l7346
  5400  0016DC  EFA4  F00D         	goto	l6534
  5401  0016E0                     l7346:
  5402                           
  5403                           ; BSR set to: 0
  5404                           ; Switch size 1, requested type "simple"
  5405                           ; Number of cases is 11, Range of values is 42 to 57
  5406                           ; switch strategies available:
  5407                           ; Name         Instructions Cycles
  5408                           ; simple_byte           34    18 (average)
  5409                           ;	Chosen strategy is simple_byte
  5410  0016E0  5044               	movf	??_main^0,w,c
  5411  0016E2  0A2A               	xorlw	42	; case 42
  5412  0016E4  B4D8               	btfsc	status,2,c
  5413  0016E6  EF55  F00B         	goto	l6422
  5414  0016EA  0A1A               	xorlw	26	; case 48
  5415  0016EC  B4D8               	btfsc	status,2,c
  5416  0016EE  EF20  F00B         	goto	l363
  5417  0016F2  0A01               	xorlw	1	; case 49
  5418  0016F4  B4D8               	btfsc	status,2,c
  5419  0016F6  EF20  F00B         	goto	l363
  5420  0016FA  0A03               	xorlw	3	; case 50
  5421  0016FC  B4D8               	btfsc	status,2,c
  5422  0016FE  EF20  F00B         	goto	l6416
  5423  001702  0A01               	xorlw	1	; case 51
  5424  001704  B4D8               	btfsc	status,2,c
  5425  001706  EF20  F00B         	goto	l6416
  5426  00170A  0A07               	xorlw	7	; case 52
  5427  00170C  B4D8               	btfsc	status,2,c
  5428  00170E  EF20  F00B         	goto	l6416
  5429  001712  0A01               	xorlw	1	; case 53
  5430  001714  B4D8               	btfsc	status,2,c
  5431  001716  EF20  F00B         	goto	l6416
  5432  00171A  0A03               	xorlw	3	; case 54
  5433  00171C  B4D8               	btfsc	status,2,c
  5434  00171E  EF20  F00B         	goto	l6416
  5435  001722  0A01               	xorlw	1	; case 55
  5436  001724  B4D8               	btfsc	status,2,c
  5437  001726  EF20  F00B         	goto	l6416
  5438  00172A  0A0F               	xorlw	15	; case 56
  5439  00172C  B4D8               	btfsc	status,2,c
  5440  00172E  EF20  F00B         	goto	l6416
  5441  001732  0A01               	xorlw	1	; case 57
  5442  001734  B4D8               	btfsc	status,2,c
  5443  001736  EF20  F00B         	goto	l6416
  5444  00173A  EFA4  F00D         	goto	l6534
  5445  00173E                     l6430:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;main.c: 679:                             IHM.clr();
  5449  00173E  EE20  F0E3         	lfsr	2,_IHM+8
  5450  001742  D802               	call	u4908
  5451  001744  EFAE  F00B         	goto	u4909
  5452  001748                     u4908:
  5453  001748  0005               	push	
  5454  00174A  6EFA               	movwf	pclath,c
  5455  00174C  50DE               	movf	postinc2,w,c
  5456  00174E  6EFD               	movwf	tosl,c
  5457  001750  50DE               	movf	postinc2,w,c
  5458  001752  6EFE               	movwf	tosh,c
  5459  001754  50F8               	movf	tblptru,w,c
  5460  001756  6EFF               	movwf	tosu,c
  5461  001758  50FA               	movf	pclath,w,c
  5462  00175A  0012               	return		;indir
  5463  00175C                     u4909:
  5464  00175C                     
  5465                           ;main.c: 680:                             for(char i = 0; i <= 3; i++)
  5466  00175C  0E00               	movlw	0
  5467  00175E  0100               	movlb	0	; () banked
  5468  001760  6FA9               	movwf	main@i_587& (0+255),b
  5469  001762                     l6434:
  5470                           
  5471                           ; BSR set to: 0
  5472  001762  0E03               	movlw	3
  5473  001764  65A9               	cpfsgt	main@i_587& (0+255),b
  5474  001766  EFB7  F00B         	goto	u4911
  5475  00176A  EFB9  F00B         	goto	u4910
  5476  00176E                     u4911:
  5477  00176E  EFBB  F00B         	goto	l6438
  5478  001772                     u4910:
  5479  001772  EFEA  F00B         	goto	l6456
  5480  001776                     l6438:
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;main.c: 681:                             {;main.c: 682:                                
      +                           for(char j = 0; j <= 19; j++)
  5484  001776  0E00               	movlw	0
  5485  001778  6FAA               	movwf	main@j_588& (0+255),b
  5486  00177A                     l6440:
  5487                           
  5488                           ; BSR set to: 0
  5489  00177A  0E13               	movlw	19
  5490  00177C  65AA               	cpfsgt	main@j_588& (0+255),b
  5491  00177E  EFC3  F00B         	goto	u4921
  5492  001782  EFC5  F00B         	goto	u4920
  5493  001786                     u4921:
  5494  001786  EFC7  F00B         	goto	l6444
  5495  00178A                     u4920:
  5496  00178A  EFE7  F00B         	goto	l6452
  5497  00178E                     l6444:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;main.c: 683:                                 {;main.c: 684:                            
      +                                   IHM.printpos(i, j, "\377");
  5501  00178E  EE20  F0DF         	lfsr	2,_IHM+4
  5502  001792  D802               	call	u4938
  5503  001794  EFDD  F00B         	goto	u4939
  5504  001798                     u4938:
  5505  001798  0005               	push	
  5506  00179A  6EFA               	movwf	pclath,c
  5507  00179C  50DE               	movf	postinc2,w,c
  5508  00179E  6EFD               	movwf	tosl,c
  5509  0017A0  50DE               	movf	postinc2,w,c
  5510  0017A2  6EFE               	movwf	tosh,c
  5511  0017A4  50F8               	movf	tblptru,w,c
  5512  0017A6  6EFF               	movwf	tosu,c
  5513  0017A8  50FA               	movf	pclath,w,c
  5514  0017AA  C0AA  F02D         	movff	main@j_588,dispLCD@col
  5515  0017AE  0EFD               	movlw	low STR_1
  5516  0017B0  6E2E               	movwf	dispLCD@str^0,c
  5517  0017B2  0E7F               	movlw	high STR_1
  5518  0017B4  6E2F               	movwf	(dispLCD@str+1)^0,c
  5519  0017B6  51A9               	movf	main@i_587& (0+255),w,b
  5520  0017B8  0012               	return		;indir
  5521  0017BA                     u4939:
  5522  0017BA                     
  5523                           ;main.c: 685:                                     delay(10);
  5524  0017BA  0E00               	movlw	0
  5525  0017BC  6E27               	movwf	(delay@t+1)^0,c
  5526  0017BE  0E0A               	movlw	10
  5527  0017C0  6E26               	movwf	delay@t^0,c
  5528  0017C2  EC27  F01C         	call	_delay
  5529  0017C6                     
  5530                           ;main.c: 686:                                 }
  5531  0017C6  0100               	movlb	0	; () banked
  5532  0017C8  2BAA               	incf	main@j_588& (0+255),f,b
  5533  0017CA  EFBD  F00B         	goto	l6440
  5534  0017CE                     l6452:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;main.c: 687:                             }
  5538  0017CE  2BA9               	incf	main@i_587& (0+255),f,b
  5539  0017D0  EFB1  F00B         	goto	l6434
  5540  0017D4                     l6456:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;main.c: 689:                             for(char i = 0; i <= 3; i++)
  5544  0017D4  0E00               	movlw	0
  5545  0017D6  6FAB               	movwf	main@i_590& (0+255),b
  5546  0017D8                     l6458:
  5547                           
  5548                           ; BSR set to: 0
  5549  0017D8  0E03               	movlw	3
  5550  0017DA  65AB               	cpfsgt	main@i_590& (0+255),b
  5551  0017DC  EFF2  F00B         	goto	u4941
  5552  0017E0  EFF4  F00B         	goto	u4940
  5553  0017E4                     u4941:
  5554  0017E4  EFF6  F00B         	goto	l6462
  5555  0017E8                     u4940:
  5556  0017E8  EF25  F00C         	goto	l6480
  5557  0017EC                     l6462:
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;main.c: 690:                             {;main.c: 691:                                
      +                           for(char j = 0; j <= 19; j++)
  5561  0017EC  0E00               	movlw	0
  5562  0017EE  6FAC               	movwf	main@j_591& (0+255),b
  5563  0017F0                     l6464:
  5564                           
  5565                           ; BSR set to: 0
  5566  0017F0  0E13               	movlw	19
  5567  0017F2  65AC               	cpfsgt	main@j_591& (0+255),b
  5568  0017F4  EFFE  F00B         	goto	u4951
  5569  0017F8  EF00  F00C         	goto	u4950
  5570  0017FC                     u4951:
  5571  0017FC  EF02  F00C         	goto	l6468
  5572  001800                     u4950:
  5573  001800  EF22  F00C         	goto	l6476
  5574  001804                     l6468:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;main.c: 692:                                 {;main.c: 693:                            
      +                                   IHM.printpos(i, j, " ");
  5578  001804  EE20  F0DF         	lfsr	2,_IHM+4
  5579  001808  D802               	call	u4968
  5580  00180A  EF18  F00C         	goto	u4969
  5581  00180E                     u4968:
  5582  00180E  0005               	push	
  5583  001810  6EFA               	movwf	pclath,c
  5584  001812  50DE               	movf	postinc2,w,c
  5585  001814  6EFD               	movwf	tosl,c
  5586  001816  50DE               	movf	postinc2,w,c
  5587  001818  6EFE               	movwf	tosh,c
  5588  00181A  50F8               	movf	tblptru,w,c
  5589  00181C  6EFF               	movwf	tosu,c
  5590  00181E  50FA               	movf	pclath,w,c
  5591  001820  C0AC  F02D         	movff	main@j_591,dispLCD@col
  5592  001824  0E64               	movlw	low (STR_24+19)
  5593  001826  6E2E               	movwf	dispLCD@str^0,c
  5594  001828  0E7E               	movlw	high (STR_24+19)
  5595  00182A  6E2F               	movwf	(dispLCD@str+1)^0,c
  5596  00182C  51AB               	movf	main@i_590& (0+255),w,b
  5597  00182E  0012               	return		;indir
  5598  001830                     u4969:
  5599  001830                     
  5600                           ;main.c: 694:                                     delay(10);
  5601  001830  0E00               	movlw	0
  5602  001832  6E27               	movwf	(delay@t+1)^0,c
  5603  001834  0E0A               	movlw	10
  5604  001836  6E26               	movwf	delay@t^0,c
  5605  001838  EC27  F01C         	call	_delay
  5606  00183C                     
  5607                           ;main.c: 695:                                 }
  5608  00183C  0100               	movlb	0	; () banked
  5609  00183E  2BAC               	incf	main@j_591& (0+255),f,b
  5610  001840  EFF8  F00B         	goto	l6464
  5611  001844                     l6476:
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;main.c: 696:                             }
  5615  001844  2BAB               	incf	main@i_590& (0+255),f,b
  5616  001846  EFEC  F00B         	goto	l6458
  5617  00184A                     l6480:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;main.c: 697:                             IHM.printpos(1, 0, "      SEQUENCIA     ");
  5621  00184A  EE20  F0DF         	lfsr	2,_IHM+4
  5622  00184E  D802               	call	u4978
  5623  001850  EF3B  F00C         	goto	u4979
  5624  001854                     u4978:
  5625  001854  0005               	push	
  5626  001856  6EFA               	movwf	pclath,c
  5627  001858  50DE               	movf	postinc2,w,c
  5628  00185A  6EFD               	movwf	tosl,c
  5629  00185C  50DE               	movf	postinc2,w,c
  5630  00185E  6EFE               	movwf	tosh,c
  5631  001860  50F8               	movf	tblptru,w,c
  5632  001862  6EFF               	movwf	tosu,c
  5633  001864  50FA               	movf	pclath,w,c
  5634  001866  0E00               	movlw	0
  5635  001868  6E2D               	movwf	dispLCD@col^0,c
  5636  00186A  0EF9               	movlw	low STR_30
  5637  00186C  6E2E               	movwf	dispLCD@str^0,c
  5638  00186E  0E7E               	movlw	high STR_30
  5639  001870  6E2F               	movwf	(dispLCD@str+1)^0,c
  5640  001872  0E01               	movlw	1
  5641  001874  0012               	return		;indir
  5642  001876                     u4979:
  5643                           
  5644                           ;main.c: 698:                             IHM.printpos(2, 0, "        SALVA       ");
  5645  001876  EE20  F0DF         	lfsr	2,_IHM+4
  5646  00187A  D802               	call	u4988
  5647  00187C  EF51  F00C         	goto	u4989
  5648  001880                     u4988:
  5649  001880  0005               	push	
  5650  001882  6EFA               	movwf	pclath,c
  5651  001884  50DE               	movf	postinc2,w,c
  5652  001886  6EFD               	movwf	tosl,c
  5653  001888  50DE               	movf	postinc2,w,c
  5654  00188A  6EFE               	movwf	tosh,c
  5655  00188C  50F8               	movf	tblptru,w,c
  5656  00188E  6EFF               	movwf	tosu,c
  5657  001890  50FA               	movf	pclath,w,c
  5658  001892  0E00               	movlw	0
  5659  001894  6E2D               	movwf	dispLCD@col^0,c
  5660  001896  0E7B               	movlw	low STR_31
  5661  001898  6E2E               	movwf	dispLCD@str^0,c
  5662  00189A  0E7E               	movlw	high STR_31
  5663  00189C  6E2F               	movwf	(dispLCD@str+1)^0,c
  5664  00189E  0E02               	movlw	2
  5665  0018A0  0012               	return		;indir
  5666  0018A2                     u4989:
  5667  0018A2                     
  5668                           ;main.c: 700:                             setT1(1000);
  5669  0018A2  0EE8               	movlw	232
  5670  0018A4  6E2C               	movwf	setT1@c^0,c
  5671  0018A6  0E03               	movlw	3
  5672  0018A8  6E2D               	movwf	(setT1@c+1)^0,c
  5673  0018AA  0E00               	movlw	0
  5674  0018AC  6E2E               	movwf	(setT1@c+2)^0,c
  5675  0018AE  0E00               	movlw	0
  5676  0018B0  6E2F               	movwf	(setT1@c+3)^0,c
  5677  0018B2  EC0B  F01D         	call	_setT1
  5678  0018B6                     
  5679                           ;main.c: 701:                             estado = 78;
  5680  0018B6  0E4E               	movlw	78
  5681  0018B8  0100               	movlb	0	; () banked
  5682  0018BA  6FBB               	movwf	main@estado& (0+255),b
  5683                           
  5684                           ;main.c: 702:                             break;
  5685  0018BC  EFA4  F00D         	goto	l6534
  5686  0018C0                     l6486:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;main.c: 705:                             if(!statusT1())
  5690  0018C0  EC3D  F01D         	call	_statusT1	;wreg free
  5691  0018C4  5026               	movf	?_statusT1^0,w,c
  5692  0018C6  1027               	iorwf	(?_statusT1+1)^0,w,c
  5693  0018C8  1028               	iorwf	(?_statusT1+2)^0,w,c
  5694  0018CA  1029               	iorwf	(?_statusT1+3)^0,w,c
  5695  0018CC  A4D8               	btfss	status,2,c
  5696  0018CE  EF6B  F00C         	goto	u4991
  5697  0018D2  EF6D  F00C         	goto	u4990
  5698  0018D6                     u4991:
  5699  0018D6  EFA4  F00D         	goto	l6534
  5700  0018DA                     u4990:
  5701  0018DA  EF11  F00A         	goto	l342
  5702  0018DE                     l6490:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;main.c: 710:                             IHM.printpos(2, 0, "config contrl:     %");
  5706  0018DE  EE20  F0DF         	lfsr	2,_IHM+4
  5707  0018E2  D802               	call	u5008
  5708  0018E4  EF85  F00C         	goto	u5009
  5709  0018E8                     u5008:
  5710  0018E8  0005               	push	
  5711  0018EA  6EFA               	movwf	pclath,c
  5712  0018EC  50DE               	movf	postinc2,w,c
  5713  0018EE  6EFD               	movwf	tosl,c
  5714  0018F0  50DE               	movf	postinc2,w,c
  5715  0018F2  6EFE               	movwf	tosh,c
  5716  0018F4  50F8               	movf	tblptru,w,c
  5717  0018F6  6EFF               	movwf	tosu,c
  5718  0018F8  50FA               	movf	pclath,w,c
  5719  0018FA  0E00               	movlw	0
  5720  0018FC  6E2D               	movwf	dispLCD@col^0,c
  5721  0018FE  0EB6               	movlw	low STR_32
  5722  001900  6E2E               	movwf	dispLCD@str^0,c
  5723  001902  0E7F               	movlw	high STR_32
  5724  001904  6E2F               	movwf	(dispLCD@str+1)^0,c
  5725  001906  0E02               	movlw	2
  5726  001908  0012               	return		;indir
  5727  00190A                     u5009:
  5728  00190A                     
  5729                           ;main.c: 711:                             IHM.printv(2, 15, num, 3);
  5730  00190A  EE20  F0E1         	lfsr	2,_IHM+6
  5731  00190E  D802               	call	u5018
  5732  001910  EF9D  F00C         	goto	u5019
  5733  001914                     u5018:
  5734  001914  0005               	push	
  5735  001916  6EFA               	movwf	pclath,c
  5736  001918  50DE               	movf	postinc2,w,c
  5737  00191A  6EFD               	movwf	tosl,c
  5738  00191C  50DE               	movf	postinc2,w,c
  5739  00191E  6EFE               	movwf	tosh,c
  5740  001920  50F8               	movf	tblptru,w,c
  5741  001922  6EFF               	movwf	tosu,c
  5742  001924  50FA               	movf	pclath,w,c
  5743  001926  0E0F               	movlw	15
  5744  001928  6E31               	movwf	dispLCD_num@col^0,c
  5745  00192A  C0B4  F032         	movff	main@num,dispLCD_num@num
  5746  00192E  C0B5  F033         	movff	main@num+1,dispLCD_num@num+1
  5747  001932  0E03               	movlw	3
  5748  001934  6E34               	movwf	dispLCD_num@tam^0,c
  5749  001936  0E02               	movlw	2
  5750  001938  0012               	return		;indir
  5751  00193A                     u5019:
  5752  00193A                     
  5753                           ;main.c: 712:                             estado = 91;
  5754  00193A  0E5B               	movlw	91
  5755  00193C  0100               	movlb	0	; () banked
  5756  00193E  6FBB               	movwf	main@estado& (0+255),b
  5757                           
  5758                           ;main.c: 713:                             break;
  5759  001940  EFA4  F00D         	goto	l6534
  5760  001944                     l6496:
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;main.c: 716:                             tecla = teclado_borda();
  5764  001944  EC94  F01B         	call	_teclado_borda
  5765  001948  0100               	movlb	0	; () banked
  5766  00194A  6FBC               	movwf	main@tecla& (0+255),b
  5767  00194C                     
  5768                           ; BSR set to: 0
  5769                           ;main.c: 717:                             if(tecla >= '0' && tecla <= '9')
  5770  00194C  0E2F               	movlw	47
  5771  00194E  65BC               	cpfsgt	main@tecla& (0+255),b
  5772  001950  EFAC  F00C         	goto	u5021
  5773  001954  EFAE  F00C         	goto	u5020
  5774  001958                     u5021:
  5775  001958  EFCF  F00C         	goto	l6508
  5776  00195C                     u5020:
  5777  00195C                     
  5778                           ; BSR set to: 0
  5779  00195C  0E3A               	movlw	58
  5780  00195E  61BC               	cpfslt	main@tecla& (0+255),b
  5781  001960  EFB4  F00C         	goto	u5031
  5782  001964  EFB6  F00C         	goto	u5030
  5783  001968                     u5031:
  5784  001968  EFCF  F00C         	goto	l6508
  5785  00196C                     u5030:
  5786  00196C                     
  5787                           ; BSR set to: 0
  5788                           ;main.c: 718:                             {;main.c: 719:                                
      +                           dignum_conc(tecla, &num);
  5789  00196C  0EB4               	movlw	low main@num
  5790  00196E  6E2C               	movwf	dignum_conc@ptrNum^0,c
  5791  001970  0E00               	movlw	high main@num
  5792  001972  6E2D               	movwf	(dignum_conc@ptrNum+1)^0,c
  5793  001974  51BC               	movf	main@tecla& (0+255),w,b
  5794  001976  EC93  F01A         	call	_dignum_conc
  5795  00197A                     
  5796                           ;main.c: 720:                                 if(num > 100)
  5797  00197A  0100               	movlb	0	; () banked
  5798  00197C  51B5               	movf	(main@num+1)& (0+255),w,b
  5799  00197E  E109               	bnz	u5040
  5800  001980  0E65               	movlw	101
  5801  001982  5DB4               	subwf	main@num& (0+255),w,b
  5802  001984  A0D8               	btfss	status,0,c
  5803  001986  EFC7  F00C         	goto	u5041
  5804  00198A  EFC9  F00C         	goto	u5040
  5805  00198E                     u5041:
  5806  00198E  EFCD  F00C         	goto	l386
  5807  001992                     u5040:
  5808  001992                     
  5809                           ; BSR set to: 0
  5810                           ;main.c: 721:                                     num = 100;
  5811  001992  0E00               	movlw	0
  5812  001994  6FB5               	movwf	(main@num+1)& (0+255),b
  5813  001996  0E64               	movlw	100
  5814  001998  6FB4               	movwf	main@num& (0+255),b
  5815  00199A                     l386:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;main.c: 722:                                 estado = 90;
  5819  00199A  0E5A               	movlw	90
  5820  00199C  6FBB               	movwf	main@estado& (0+255),b
  5821  00199E                     l6508:
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;main.c: 724:                             if(tecla == '*')
  5825  00199E  0E2A               	movlw	42
  5826  0019A0  19BC               	xorwf	main@tecla& (0+255),w,b
  5827  0019A2  A4D8               	btfss	status,2,c
  5828  0019A4  EFD6  F00C         	goto	u5051
  5829  0019A8  EFD8  F00C         	goto	u5050
  5830  0019AC                     u5051:
  5831  0019AC  EFE1  F00C         	goto	l6514
  5832  0019B0                     u5050:
  5833  0019B0                     
  5834                           ; BSR set to: 0
  5835                           ;main.c: 725:                             {;main.c: 726:                                
      +                           dignum_apagar(&num);
  5836  0019B0  0EB4               	movlw	low main@num
  5837  0019B2  6E2D               	movwf	dignum_apagar@ptrNum^0,c
  5838  0019B4  0E00               	movlw	high main@num
  5839  0019B6  6E2E               	movwf	(dignum_apagar@ptrNum+1)^0,c
  5840  0019B8  ECF9  F01B         	call	_dignum_apagar	;wreg free
  5841  0019BC                     
  5842                           ;main.c: 727:                                 estado = 90;
  5843  0019BC  0E5A               	movlw	90
  5844  0019BE  0100               	movlb	0	; () banked
  5845  0019C0  6FBB               	movwf	main@estado& (0+255),b
  5846  0019C2                     l6514:
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;main.c: 729:                             if(tecla == '#')
  5850  0019C2  0E23               	movlw	35
  5851  0019C4  19BC               	xorwf	main@tecla& (0+255),w,b
  5852  0019C6  A4D8               	btfss	status,2,c
  5853  0019C8  EFE8  F00C         	goto	u5061
  5854  0019CC  EFEA  F00C         	goto	u5060
  5855  0019D0                     u5061:
  5856  0019D0  EFA4  F00D         	goto	l6534
  5857  0019D4                     u5060:
  5858  0019D4                     
  5859                           ; BSR set to: 0
  5860                           ;main.c: 730:                                 estado = 92;
  5861  0019D4  0E5C               	movlw	92
  5862  0019D6  6FBB               	movwf	main@estado& (0+255),b
  5863  0019D8  EFA4  F00D         	goto	l6534
  5864  0019DC                     l6518:
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;main.c: 734:                             fifo_add_control(num);
  5868  0019DC  51B4               	movf	main@num& (0+255),w,b
  5869  0019DE  EC4B  F01A         	call	_fifo_add_control
  5870  0019E2  EFD5  F009         	goto	l6352
  5871  0019E6                     l6524:
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;main.c: 740:                             fifo_add_ciclo(ciclos);
  5875  0019E6  C0B0  F026         	movff	main@ciclos,fifo_add_ciclo@ciclos
  5876  0019EA  C0B1  F027         	movff	main@ciclos+1,fifo_add_ciclo@ciclos+1
  5877  0019EE  EC80  F01D         	call	_fifo_add_ciclo	;wreg free
  5878  0019F2                     
  5879                           ;main.c: 741:                             estado = 30;
  5880  0019F2  0E1E               	movlw	30
  5881  0019F4  0100               	movlb	0	; () banked
  5882  0019F6  6FBB               	movwf	main@estado& (0+255),b
  5883  0019F8  EF1D  F009         	goto	l6308
  5884  0019FC                     l138:
  5885  0019FC                     l6532:
  5886  0019FC  0100               	movlb	0	; () banked
  5887  0019FE  51BB               	movf	main@estado& (0+255),w,b
  5888  001A00  6E44               	movwf	??_main^0,c
  5889  001A02  6A45               	clrf	(??_main+1)^0,c
  5890                           
  5891                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5892                           ; Switch size 1, requested type "simple"
  5893                           ; Number of cases is 1, Range of values is 0 to 0
  5894                           ; switch strategies available:
  5895                           ; Name         Instructions Cycles
  5896                           ; simple_byte            4     3 (average)
  5897                           ;	Chosen strategy is simple_byte
  5898  001A04  5045               	movf	(??_main+1)^0,w,c
  5899  001A06  0A00               	xorlw	0	; case 0
  5900  001A08  B4D8               	btfsc	status,2,c
  5901  001A0A  EF09  F00D         	goto	l7348
  5902  001A0E  EFA4  F00D         	goto	l6534
  5903  001A12                     l7348:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ; Switch size 1, requested type "simple"
  5907                           ; Number of cases is 38, Range of values is 0 to 100
  5908                           ; switch strategies available:
  5909                           ; Name         Instructions Cycles
  5910                           ; simple_byte          115    58 (average)
  5911                           ;	Chosen strategy is simple_byte
  5912  001A12  5044               	movf	??_main^0,w,c
  5913  001A14  0A00               	xorlw	0	; case 0
  5914  001A16  B4D8               	btfsc	status,2,c
  5915  001A18  EF4A  F000         	goto	l5798
  5916  001A1C  0A01               	xorlw	1	; case 1
  5917  001A1E  B4D8               	btfsc	status,2,c
  5918  001A20  EFC4  F000         	goto	l5848
  5919  001A24  0A03               	xorlw	3	; case 2
  5920  001A26  B4D8               	btfsc	status,2,c
  5921  001A28  EF1E  F001         	goto	l5872
  5922  001A2C  0A01               	xorlw	1	; case 3
  5923  001A2E  B4D8               	btfsc	status,2,c
  5924  001A30  EFA9  F005         	goto	l6126
  5925  001A34  0A05               	xorlw	5	; case 6
  5926  001A36  B4D8               	btfsc	status,2,c
  5927  001A38  EFE9  F005         	goto	l6134
  5928  001A3C  0A01               	xorlw	1	; case 7
  5929  001A3E  B4D8               	btfsc	status,2,c
  5930  001A40  EF80  F006         	goto	l6178
  5931  001A44  0A0F               	xorlw	15	; case 8
  5932  001A46  B4D8               	btfsc	status,2,c
  5933  001A48  EF30  F001         	goto	l5876
  5934  001A4C  0A01               	xorlw	1	; case 9
  5935  001A4E  B4D8               	btfsc	status,2,c
  5936  001A50  EF54  F001         	goto	l5884
  5937  001A54  0A03               	xorlw	3	; case 10
  5938  001A56  B4D8               	btfsc	status,2,c
  5939  001A58  EF3F  F007         	goto	l6220
  5940  001A5C  0A01               	xorlw	1	; case 11
  5941  001A5E  B4D8               	btfsc	status,2,c
  5942  001A60  EF6D  F007         	goto	l6228
  5943  001A64  0A05               	xorlw	5	; case 14
  5944  001A66  B4D8               	btfsc	status,2,c
  5945  001A68  EFFF  F007         	goto	l6270
  5946  001A6C  0A1E               	xorlw	30	; case 16
  5947  001A6E  B4D8               	btfsc	status,2,c
  5948  001A70  EFFB  F007         	goto	l6266
  5949  001A74  0A0E               	xorlw	14	; case 30
  5950  001A76  B4D8               	btfsc	status,2,c
  5951  001A78  EF54  F008         	goto	l6278
  5952  001A7C  0A36               	xorlw	54	; case 40
  5953  001A7E  B4D8               	btfsc	status,2,c
  5954  001A80  EF53  F009         	goto	l6322
  5955  001A84  0A01               	xorlw	1	; case 41
  5956  001A86  B4D8               	btfsc	status,2,c
  5957  001A88  EF9F  F009         	goto	l6344
  5958  001A8C  0A03               	xorlw	3	; case 42
  5959  001A8E  B4D8               	btfsc	status,2,c
  5960  001A90  EFD2  F009         	goto	l6350
  5961  001A94  0A1E               	xorlw	30	; case 52
  5962  001A96  B4D8               	btfsc	status,2,c
  5963  001A98  EFE6  F009         	goto	l6356
  5964  001A9C  0A01               	xorlw	1	; case 53
  5965  001A9E  B4D8               	btfsc	status,2,c
  5966  001AA0  EF49  F00A         	goto	l6382
  5967  001AA4  0A03               	xorlw	3	; case 54
  5968  001AA6  B4D8               	btfsc	status,2,c
  5969  001AA8  EFF3  F00C         	goto	l6524
  5970  001AAC  0A70               	xorlw	112	; case 70
  5971  001AAE  B4D8               	btfsc	status,2,c
  5972  001AB0  EF5A  F008         	goto	l6280
  5973  001AB4  0A01               	xorlw	1	; case 71
  5974  001AB6  B4D8               	btfsc	status,2,c
  5975  001AB8  EF66  F001         	goto	l5888
  5976  001ABC  0A0F               	xorlw	15	; case 72
  5977  001ABE  B4D8               	btfsc	status,2,c
  5978  001AC0  EF0A  F004         	goto	l6058
  5979  001AC4  0A01               	xorlw	1	; case 73
  5980  001AC6  B4D8               	btfsc	status,2,c
  5981  001AC8  EF2F  F004         	goto	l6064
  5982  001ACC  0A03               	xorlw	3	; case 74
  5983  001ACE  B4D8               	btfsc	status,2,c
  5984  001AD0  EFA1  F00A         	goto	l6390
  5985  001AD4  0A01               	xorlw	1	; case 75
  5986  001AD6  B4D8               	btfsc	status,2,c
  5987  001AD8  EFF5  F00A         	goto	l6408
  5988  001ADC  0A07               	xorlw	7	; case 76
  5989  001ADE  B4D8               	btfsc	status,2,c
  5990  001AE0  EF1A  F00B         	goto	l6414
  5991  001AE4  0A01               	xorlw	1	; case 77
  5992  001AE6  B4D8               	btfsc	status,2,c
  5993  001AE8  EF9F  F00B         	goto	l6430
  5994  001AEC  0A03               	xorlw	3	; case 78
  5995  001AEE  B4D8               	btfsc	status,2,c
  5996  001AF0  EF60  F00C         	goto	l6486
  5997  001AF4  0A1E               	xorlw	30	; case 80
  5998  001AF6  B4D8               	btfsc	status,2,c
  5999  001AF8  EFC9  F002         	goto	l5956
  6000  001AFC  0A01               	xorlw	1	; case 81
  6001  001AFE  B4D8               	btfsc	status,2,c
  6002  001B00  EFEC  F002         	goto	l5966
  6003  001B04  0A03               	xorlw	3	; case 82
  6004  001B06  B4D8               	btfsc	status,2,c
  6005  001B08  EFFE  F002         	goto	l5970
  6006  001B0C  0A06               	xorlw	6	; case 84
  6007  001B0E  B4D8               	btfsc	status,2,c
  6008  001B10  EF25  F003         	goto	l5982
  6009  001B14  0A01               	xorlw	1	; case 85
  6010  001B16  B4D8               	btfsc	status,2,c
  6011  001B18  EF6C  F003         	goto	l5996
  6012  001B1C  0A03               	xorlw	3	; case 86
  6013  001B1E  B4D8               	btfsc	status,2,c
  6014  001B20  EFFB  F003         	goto	l6054
  6015  001B24  0A0C               	xorlw	12	; case 90
  6016  001B26  B4D8               	btfsc	status,2,c
  6017  001B28  EF6F  F00C         	goto	l6490
  6018  001B2C  0A01               	xorlw	1	; case 91
  6019  001B2E  B4D8               	btfsc	status,2,c
  6020  001B30  EFA2  F00C         	goto	l6496
  6021  001B34  0A07               	xorlw	7	; case 92
  6022  001B36  B4D8               	btfsc	status,2,c
  6023  001B38  EFEE  F00C         	goto	l6518
  6024  001B3C  0A38               	xorlw	56	; case 100
  6025  001B3E  B4D8               	btfsc	status,2,c
  6026  001B40  EF9B  F001         	goto	l5902
  6027  001B44  EFA4  F00D         	goto	l6534
  6028  001B48                     l6534:
  6029                           
  6030                           ;main.c: 746:         serialIOscan();
  6031  001B48  EC78  F019         	call	_serialIOscan	;wreg free
  6032                           
  6033                           ;main.c: 748:         switch(meAtuadores)
  6034  001B4C  EFCC  F00E         	goto	l6608
  6035  001B50                     l6536:
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;main.c: 753:                             resetIndicePassos();
  6039  001B50  EC8C  F01D         	call	_resetIndicePassos	;wreg free
  6040                           
  6041                           ;main.c: 754:                             resetContCiclos();
  6042  001B54  EC6C  F01D         	call	_resetContCiclos	;wreg free
  6043  001B58                     l6538:
  6044                           
  6045                           ;main.c: 755:                             meAtuadores = 2;
  6046  001B58  0E02               	movlw	2
  6047  001B5A  0100               	movlb	0	; () banked
  6048  001B5C  6FAF               	movwf	main@meAtuadores& (0+255),b
  6049                           
  6050                           ;main.c: 756:                             break;
  6051  001B5E  EFFE  F00C         	goto	l6532
  6052  001B62                     l6540:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;main.c: 759:                             auxPasso = fifo_lerPos(getIndicePassos());
  6056  001B62  EC92  F01D         	call	_getIndicePassos	;wreg free
  6057  001B66  EC4F  F01D         	call	_fifo_lerPos
  6058  001B6A  0100               	movlb	0	; () banked
  6059  001B6C  6FBA               	movwf	main@auxPasso& (0+255),b
  6060  001B6E                     
  6061                           ; BSR set to: 0
  6062                           ;main.c: 761:                             if(botao == 1 || botao == 3 || botao == 0)
  6063  001B6E  05B3               	decf	main@botao& (0+255),w,b
  6064  001B70  B4D8               	btfsc	status,2,c
  6065  001B72  EFBD  F00D         	goto	u5071
  6066  001B76  EFBF  F00D         	goto	u5070
  6067  001B7A                     u5071:
  6068  001B7A  EFD0  F00D         	goto	l6548
  6069  001B7E                     u5070:
  6070  001B7E                     
  6071                           ; BSR set to: 0
  6072  001B7E  0E03               	movlw	3
  6073  001B80  19B3               	xorwf	main@botao& (0+255),w,b
  6074  001B82  B4D8               	btfsc	status,2,c
  6075  001B84  EFC6  F00D         	goto	u5081
  6076  001B88  EFC8  F00D         	goto	u5080
  6077  001B8C                     u5081:
  6078  001B8C  EFD0  F00D         	goto	l6548
  6079  001B90                     u5080:
  6080  001B90                     
  6081                           ; BSR set to: 0
  6082  001B90  51B3               	movf	main@botao& (0+255),w,b
  6083  001B92  A4D8               	btfss	status,2,c
  6084  001B94  EFCE  F00D         	goto	u5091
  6085  001B98  EFD0  F00D         	goto	u5090
  6086  001B9C                     u5091:
  6087  001B9C  EFFE  F00C         	goto	l138
  6088  001BA0                     u5090:
  6089  001BA0                     l6548:
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;main.c: 762:                                 meAtuadores = 3;
  6093  001BA0  0E03               	movlw	3
  6094  001BA2  6FAF               	movwf	main@meAtuadores& (0+255),b
  6095  001BA4  EFFE  F00C         	goto	l6532
  6096  001BA8                     l6550:
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;main.c: 766:                             if(auxPasso <= 0x64 || auxPasso == 0xFE)
  6100  001BA8  0E64               	movlw	100
  6101  001BAA  65BA               	cpfsgt	main@auxPasso& (0+255),b
  6102  001BAC  EFDA  F00D         	goto	u5101
  6103  001BB0  EFDC  F00D         	goto	u5100
  6104  001BB4                     u5101:
  6105  001BB4  EFE5  F00D         	goto	l6554
  6106  001BB8                     u5100:
  6107  001BB8                     
  6108                           ; BSR set to: 0
  6109  001BB8  0EFE               	movlw	254
  6110  001BBA  19BA               	xorwf	main@auxPasso& (0+255),w,b
  6111  001BBC  A4D8               	btfss	status,2,c
  6112  001BBE  EFE3  F00D         	goto	u5111
  6113  001BC2  EFE5  F00D         	goto	u5110
  6114  001BC6                     u5111:
  6115  001BC6  EF18  F00E         	goto	l6560
  6116  001BCA                     u5110:
  6117  001BCA                     l6554:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;main.c: 767:                             {;main.c: 768:                                
      +                           decodifica(&auxPasso);
  6121  001BCA  0EBA               	movlw	low main@auxPasso
  6122  001BCC  6E26               	movwf	decodifica@d^0,c
  6123  001BCE  0E00               	movlw	high main@auxPasso
  6124  001BD0  6E27               	movwf	(decodifica@d+1)^0,c
  6125  001BD2  EC9E  F012         	call	_decodifica	;wreg free
  6126  001BD6                     
  6127                           ;main.c: 769:                                 MCP4725((long)((4095L * auxPasso)/100));
  6128  001BD6  0100               	movlb	0	; () banked
  6129  001BD8  51BA               	movf	main@auxPasso& (0+255),w,b
  6130  001BDA  6E26               	movwf	___lmul@multiplier^0,c
  6131  001BDC  6A27               	clrf	(___lmul@multiplier+1)^0,c
  6132  001BDE  6A28               	clrf	(___lmul@multiplier+2)^0,c
  6133  001BE0  6A29               	clrf	(___lmul@multiplier+3)^0,c
  6134  001BE2  0EFF               	movlw	255
  6135  001BE4  6E2A               	movwf	___lmul@multiplicand^0,c
  6136  001BE6  0E0F               	movlw	15
  6137  001BE8  6E2B               	movwf	(___lmul@multiplicand+1)^0,c
  6138  001BEA  0E00               	movlw	0
  6139  001BEC  6E2C               	movwf	(___lmul@multiplicand+2)^0,c
  6140  001BEE  0E00               	movlw	0
  6141  001BF0  6E2D               	movwf	(___lmul@multiplicand+3)^0,c
  6142  001BF2  EC57  F018         	call	___lmul	;wreg free
  6143  001BF6  C026  F032         	movff	?___lmul,___aldiv@dividend
  6144  001BFA  C027  F033         	movff	?___lmul+1,___aldiv@dividend+1
  6145  001BFE  C028  F034         	movff	?___lmul+2,___aldiv@dividend+2
  6146  001C02  C029  F035         	movff	?___lmul+3,___aldiv@dividend+3
  6147  001C06  0E64               	movlw	100
  6148  001C08  6E36               	movwf	___aldiv@divisor^0,c
  6149  001C0A  0E00               	movlw	0
  6150  001C0C  6E37               	movwf	(___aldiv@divisor+1)^0,c
  6151  001C0E  0E00               	movlw	0
  6152  001C10  6E38               	movwf	(___aldiv@divisor+2)^0,c
  6153  001C12  0E00               	movlw	0
  6154  001C14  6E39               	movwf	(___aldiv@divisor+3)^0,c
  6155  001C16  EC3E  F013         	call	___aldiv	;wreg free
  6156  001C1A  C032  F040         	movff	?___aldiv,MCP4725@Vout
  6157  001C1E  C033  F041         	movff	?___aldiv+1,MCP4725@Vout+1
  6158  001C22  ECB2  F01C         	call	_MCP4725	;wreg free
  6159  001C26                     l6558:
  6160                           
  6161                           ;main.c: 770:                                 meAtuadores = 6;
  6162  001C26  0E06               	movlw	6
  6163  001C28  0100               	movlb	0	; () banked
  6164  001C2A  6FAF               	movwf	main@meAtuadores& (0+255),b
  6165                           
  6166                           ;main.c: 771:                             }
  6167  001C2C  EFFE  F00C         	goto	l6532
  6168  001C30                     l6560:
  6169                           
  6170                           ; BSR set to: 0
  6171  001C30  0E64               	movlw	100
  6172  001C32  65BA               	cpfsgt	main@auxPasso& (0+255),b
  6173  001C34  EF1E  F00E         	goto	u5121
  6174  001C38  EF20  F00E         	goto	u5120
  6175  001C3C                     u5121:
  6176  001C3C  EF43  F00E         	goto	l6570
  6177  001C40                     u5120:
  6178  001C40                     
  6179                           ; BSR set to: 0
  6180  001C40  0EDD               	movlw	221
  6181  001C42  61BA               	cpfslt	main@auxPasso& (0+255),b
  6182  001C44  EF26  F00E         	goto	u5131
  6183  001C48  EF28  F00E         	goto	u5130
  6184  001C4C                     u5131:
  6185  001C4C  EF43  F00E         	goto	l6570
  6186  001C50                     u5130:
  6187  001C50                     
  6188                           ; BSR set to: 0
  6189                           ;main.c: 773:                             {;main.c: 774:                                
      +                           auxPasso -= 0x64;
  6190  001C50  0E64               	movlw	100
  6191  001C52  5FBA               	subwf	main@auxPasso& (0+255),f,b
  6192  001C54                     
  6193                           ; BSR set to: 0
  6194                           ;main.c: 775:                                 setT1(auxPasso * 1000 );
  6195  001C54  C0BA  F026         	movff	main@auxPasso,___wmul@multiplier
  6196  001C58  6A27               	clrf	(___wmul@multiplier+1)^0,c
  6197  001C5A  0E03               	movlw	3
  6198  001C5C  6E29               	movwf	(___wmul@multiplicand+1)^0,c
  6199  001C5E  0EE8               	movlw	232
  6200  001C60  6E28               	movwf	___wmul@multiplicand^0,c
  6201  001C62  EC7C  F01C         	call	___wmul	;wreg free
  6202  001C66  C026  F02C         	movff	?___wmul,setT1@c
  6203  001C6A  C027  F02D         	movff	?___wmul+1,setT1@c+1
  6204  001C6E  0E00               	movlw	0
  6205  001C70  BE2D               	btfsc	(setT1@c+1)^0,7,c
  6206  001C72  0EFF               	movlw	-1
  6207  001C74  6E2E               	movwf	(setT1@c+2)^0,c
  6208  001C76  6E2F               	movwf	(setT1@c+3)^0,c
  6209  001C78  EC0B  F01D         	call	_setT1	;wreg free
  6210  001C7C                     
  6211                           ;main.c: 776:                                 meAtuadores = 4;
  6212  001C7C  0E04               	movlw	4
  6213  001C7E  0100               	movlb	0	; () banked
  6214  001C80  6FAF               	movwf	main@meAtuadores& (0+255),b
  6215                           
  6216                           ;main.c: 777:                             }
  6217  001C82  EFFE  F00C         	goto	l6532
  6218  001C86                     l6570:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;main.c: 779:                             {;main.c: 780:                                
      +                           decodifica(&auxPasso);
  6222  001C86  0EBA               	movlw	low main@auxPasso
  6223  001C88  6E26               	movwf	decodifica@d^0,c
  6224  001C8A  0E00               	movlw	high main@auxPasso
  6225  001C8C  6E27               	movwf	(decodifica@d+1)^0,c
  6226  001C8E  EC9E  F012         	call	_decodifica	;wreg free
  6227                           
  6228                           ;main.c: 781:                                 set_passo(auxPasso, vetorOut);
  6229  001C92  0EAE               	movlw	low main@vetorOut
  6230  001C94  6E26               	movwf	set_passo@ptr^0,c
  6231  001C96  0E00               	movlw	high main@vetorOut
  6232  001C98  6E27               	movwf	(set_passo@ptr+1)^0,c
  6233  001C9A  0100               	movlb	0	; () banked
  6234  001C9C  51BA               	movf	main@auxPasso& (0+255),w,b
  6235  001C9E  EC24  F015         	call	_set_passo
  6236  001CA2                     
  6237                           ;main.c: 782:                                 meAtuadores = 5;
  6238  001CA2  0E05               	movlw	5
  6239  001CA4  0100               	movlb	0	; () banked
  6240  001CA6  6FAF               	movwf	main@meAtuadores& (0+255),b
  6241  001CA8  EFFE  F00C         	goto	l6532
  6242  001CAC                     l6574:
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;main.c: 787:                             if(!statusT1())
  6246  001CAC  EC3D  F01D         	call	_statusT1	;wreg free
  6247  001CB0  5026               	movf	?_statusT1^0,w,c
  6248  001CB2  1027               	iorwf	(?_statusT1+1)^0,w,c
  6249  001CB4  1028               	iorwf	(?_statusT1+2)^0,w,c
  6250  001CB6  1029               	iorwf	(?_statusT1+3)^0,w,c
  6251  001CB8  A4D8               	btfss	status,2,c
  6252  001CBA  EF61  F00E         	goto	u5141
  6253  001CBE  EF63  F00E         	goto	u5140
  6254  001CC2                     u5141:
  6255  001CC2  EFFE  F00C         	goto	l138
  6256  001CC6                     u5140:
  6257  001CC6  EF13  F00E         	goto	l6558
  6258  001CCA                     l6578:
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;main.c: 792:                             if(ler_sensor(auxPasso, vetorIn))
  6262  001CCA  0EAD               	movlw	low main@vetorIn
  6263  001CCC  6E26               	movwf	ler_sensor@ptr^0,c
  6264  001CCE  0E00               	movlw	high main@vetorIn
  6265  001CD0  6E27               	movwf	(ler_sensor@ptr+1)^0,c
  6266  001CD2  51BA               	movf	main@auxPasso& (0+255),w,b
  6267  001CD4  EC3C  F014         	call	_ler_sensor
  6268  001CD8  0900               	iorlw	0
  6269  001CDA  B4D8               	btfsc	status,2,c
  6270  001CDC  EF72  F00E         	goto	u5151
  6271  001CE0  EF74  F00E         	goto	u5150
  6272  001CE4                     u5151:
  6273  001CE4  EFFE  F00C         	goto	l138
  6274  001CE8                     u5150:
  6275  001CE8  EF13  F00E         	goto	l6558
  6276  001CEC                     l6582:
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;main.c: 797:                             if(botao == 3)
  6280  001CEC  0E03               	movlw	3
  6281  001CEE  19B3               	xorwf	main@botao& (0+255),w,b
  6282  001CF0  A4D8               	btfss	status,2,c
  6283  001CF2  EF7D  F00E         	goto	u5161
  6284  001CF6  EF7F  F00E         	goto	u5160
  6285  001CFA                     u5161:
  6286  001CFA  EF81  F00E         	goto	l411
  6287  001CFE                     u5160:
  6288  001CFE                     
  6289                           ; BSR set to: 0
  6290                           ;main.c: 798:                             {;main.c: 799:                                
      +                           botao = 2;
  6291  001CFE  0E02               	movlw	2
  6292  001D00  6FB3               	movwf	main@botao& (0+255),b
  6293  001D02                     l411:
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;main.c: 801:                             meAtuadores = 7;
  6297  001D02  0E07               	movlw	7
  6298  001D04  6FAF               	movwf	main@meAtuadores& (0+255),b
  6299                           
  6300                           ;main.c: 803:                             break;
  6301  001D06  EFFE  F00C         	goto	l6532
  6302  001D0A                     l6586:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;main.c: 806:                             addIndicePassos();
  6306  001D0A  ECF5  F01C         	call	_addIndicePassos	;wreg free
  6307                           
  6308                           ;main.c: 807:                             if(getIndicePassos() < fifo_indice())
  6309  001D0E  EC92  F01D         	call	_getIndicePassos	;wreg free
  6310  001D12  6E44               	movwf	??_main^0,c
  6311  001D14  EC96  F01D         	call	_fifo_indice	;wreg free
  6312  001D18  5C44               	subwf	??_main^0,w,c
  6313  001D1A  B0D8               	btfsc	status,0,c
  6314  001D1C  EF92  F00E         	goto	u5171
  6315  001D20  EF94  F00E         	goto	u5170
  6316  001D24                     u5171:
  6317  001D24  EF96  F00E         	goto	l6590
  6318  001D28                     u5170:
  6319  001D28  EFAC  F00D         	goto	l6538
  6320  001D2C                     l6590:
  6321                           
  6322                           ;main.c: 810:                             {;main.c: 811:                                
      +                           addContCiclos();
  6323  001D2C  EC8F  F01D         	call	_addContCiclos	;wreg free
  6324  001D30                     
  6325                           ;main.c: 812:                                 meAtuadores = 8;
  6326  001D30  0E08               	movlw	8
  6327  001D32  0100               	movlb	0	; () banked
  6328  001D34  6FAF               	movwf	main@meAtuadores& (0+255),b
  6329  001D36  EFFE  F00C         	goto	l6532
  6330  001D3A                     l6594:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;main.c: 817:                             if((botao != 0) && ((getContCiclos() < getCicl
      +                          os()) || (getCiclos() == 0)))
  6334  001D3A  51B3               	movf	main@botao& (0+255),w,b
  6335  001D3C  B4D8               	btfsc	status,2,c
  6336  001D3E  EFA3  F00E         	goto	u5181
  6337  001D42  EFA5  F00E         	goto	u5180
  6338  001D46                     u5181:
  6339  001D46  EFC7  F00E         	goto	l6604
  6340  001D4A                     u5180:
  6341  001D4A                     
  6342                           ; BSR set to: 0
  6343  001D4A  EC76  F01D         	call	_getContCiclos	;wreg free
  6344  001D4E  C026  F044         	movff	?_getContCiclos,??_main
  6345  001D52  C027  F045         	movff	?_getContCiclos+1,??_main+1
  6346  001D56  ECC3  F01C         	call	_getCiclos	;wreg free
  6347  001D5A  5026               	movf	?_getCiclos^0,w,c
  6348  001D5C  5C44               	subwf	??_main^0,w,c
  6349  001D5E  5027               	movf	(?_getCiclos+1)^0,w,c
  6350  001D60  5845               	subwfb	(??_main+1)^0,w,c
  6351  001D62  A0D8               	btfss	status,0,c
  6352  001D64  EFB6  F00E         	goto	u5191
  6353  001D68  EFB8  F00E         	goto	u5190
  6354  001D6C                     u5191:
  6355  001D6C  EFC3  F00E         	goto	l6600
  6356  001D70                     u5190:
  6357  001D70  ECC3  F01C         	call	_getCiclos	;wreg free
  6358  001D74  5026               	movf	?_getCiclos^0,w,c
  6359  001D76  1027               	iorwf	(?_getCiclos+1)^0,w,c
  6360  001D78  A4D8               	btfss	status,2,c
  6361  001D7A  EFC1  F00E         	goto	u5201
  6362  001D7E  EFC3  F00E         	goto	u5200
  6363  001D82                     u5201:
  6364  001D82  EFC7  F00E         	goto	l6604
  6365  001D86                     u5200:
  6366  001D86                     l6600:
  6367                           
  6368                           ;main.c: 818:                             {;main.c: 819:                                
      +                           resetIndicePassos();
  6369  001D86  EC8C  F01D         	call	_resetIndicePassos	;wreg free
  6370  001D8A  EFAC  F00D         	goto	l6538
  6371  001D8E                     l6604:
  6372                           
  6373                           ;main.c: 823:                             {;main.c: 824:                                
      +                           meAtuadores = 0;
  6374  001D8E  0E00               	movlw	0
  6375  001D90  0100               	movlb	0	; () banked
  6376  001D92  6FAF               	movwf	main@meAtuadores& (0+255),b
  6377  001D94  EFFE  F00C         	goto	l6532
  6378  001D98                     l6608:
  6379  001D98  0100               	movlb	0	; () banked
  6380  001D9A  51AF               	movf	main@meAtuadores& (0+255),w,b
  6381  001D9C  6E44               	movwf	??_main^0,c
  6382  001D9E  6A45               	clrf	(??_main+1)^0,c
  6383                           
  6384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6385                           ; Switch size 1, requested type "simple"
  6386                           ; Number of cases is 1, Range of values is 0 to 0
  6387                           ; switch strategies available:
  6388                           ; Name         Instructions Cycles
  6389                           ; simple_byte            4     3 (average)
  6390                           ;	Chosen strategy is simple_byte
  6391  001DA0  5045               	movf	(??_main+1)^0,w,c
  6392  001DA2  0A00               	xorlw	0	; case 0
  6393  001DA4  B4D8               	btfsc	status,2,c
  6394  001DA6  EFD7  F00E         	goto	l7350
  6395  001DAA  EFFE  F00C         	goto	l6532
  6396  001DAE                     l7350:
  6397                           
  6398                           ; BSR set to: 0
  6399                           ; Switch size 1, requested type "simple"
  6400                           ; Number of cases is 9, Range of values is 0 to 8
  6401                           ; switch strategies available:
  6402                           ; Name         Instructions Cycles
  6403                           ; simple_byte           28    15 (average)
  6404                           ;	Chosen strategy is simple_byte
  6405  001DAE  5044               	movf	??_main^0,w,c
  6406  001DB0  0A00               	xorlw	0	; case 0
  6407  001DB2  B4D8               	btfsc	status,2,c
  6408  001DB4  EFFE  F00C         	goto	l6532
  6409  001DB8  0A01               	xorlw	1	; case 1
  6410  001DBA  B4D8               	btfsc	status,2,c
  6411  001DBC  EFA8  F00D         	goto	l6536
  6412  001DC0  0A03               	xorlw	3	; case 2
  6413  001DC2  B4D8               	btfsc	status,2,c
  6414  001DC4  EFB1  F00D         	goto	l6540
  6415  001DC8  0A01               	xorlw	1	; case 3
  6416  001DCA  B4D8               	btfsc	status,2,c
  6417  001DCC  EFD4  F00D         	goto	l6550
  6418  001DD0  0A07               	xorlw	7	; case 4
  6419  001DD2  B4D8               	btfsc	status,2,c
  6420  001DD4  EF56  F00E         	goto	l6574
  6421  001DD8  0A01               	xorlw	1	; case 5
  6422  001DDA  B4D8               	btfsc	status,2,c
  6423  001DDC  EF65  F00E         	goto	l6578
  6424  001DE0  0A03               	xorlw	3	; case 6
  6425  001DE2  B4D8               	btfsc	status,2,c
  6426  001DE4  EF76  F00E         	goto	l6582
  6427  001DE8  0A01               	xorlw	1	; case 7
  6428  001DEA  B4D8               	btfsc	status,2,c
  6429  001DEC  EF85  F00E         	goto	l6586
  6430  001DF0  0A0F               	xorlw	15	; case 8
  6431  001DF2  B4D8               	btfsc	status,2,c
  6432  001DF4  EF9D  F00E         	goto	l6594
  6433  001DF8  EFFE  F00C         	goto	l6532
  6434  001DFC  EF07  F000         	goto	start
  6435  001E00                     __end_of_main:
  6436                           	callstack 0
  6437                           
  6438 ;; *************** function _timer1_init *****************
  6439 ;; Defined at:
  6440 ;;		line 16 in file "timer1.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;		None
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0
  6455 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6457 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:        0 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    2
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text1
  6469  0039A4                     __ptext1:
  6470                           	callstack 0
  6471  0039A4                     _timer1_init:
  6472                           	callstack 28
  6473  0039A4                     
  6474                           ;timer1.c: 18:     T1CONbits.TMR1CS = 0;
  6475  0039A4  92CD               	bcf	205,1,c	;volatile
  6476  0039A6                     
  6477                           ;timer1.c: 19:     T1CONbits.T1CKPS = 0b11;
  6478  0039A6  0E30               	movlw	48
  6479  0039A8  12CD               	iorwf	205,f,c	;volatile
  6480  0039AA                     
  6481                           ;timer1.c: 20:     T1CONbits.nT1SYNC = 1;
  6482  0039AA  84CD               	bsf	205,2,c	;volatile
  6483                           
  6484                           ;timer1.c: 21:     TMR1H = ((65536-625)>>8) & 0x00FF;
  6485  0039AC  0EFD               	movlw	253
  6486  0039AE  6ECF               	movwf	207,c	;volatile
  6487                           
  6488                           ;timer1.c: 22:     TMR1L = (65536-625) & 0x00FF;
  6489  0039B0  0E8F               	movlw	143
  6490  0039B2  6ECE               	movwf	206,c	;volatile
  6491  0039B4                     
  6492                           ;timer1.c: 23:     T1CONbits.T1RUN = 0;
  6493  0039B4  9CCD               	bcf	205,6,c	;volatile
  6494  0039B6                     
  6495                           ;timer1.c: 25:     PIE1bits.TMR1IE = 1;
  6496  0039B6  809D               	bsf	157,0,c	;volatile
  6497  0039B8                     
  6498                           ;timer1.c: 26:     INTCONbits.PEIE = 1;
  6499  0039B8  8CF2               	bsf	242,6,c	;volatile
  6500  0039BA                     
  6501                           ;timer1.c: 27:     INTCONbits.GIE = 1;
  6502  0039BA  8EF2               	bsf	242,7,c	;volatile
  6503  0039BC  0012               	return		;funcret
  6504  0039BE                     __end_of_timer1_init:
  6505                           	callstack 0
  6506                           
  6507 ;; *************** function _teclado_init *****************
  6508 ;; Defined at:
  6509 ;;		line 29 in file "teclado.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg, status,2
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6523 ;;      Params:         0       0       0       0       0       0       0       0       0
  6524 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6526 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6527 ;;Total ram usage:        0 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    2
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_main
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           	psect	text2
  6538  003ACE                     __ptext2:
  6539                           	callstack 0
  6540  003ACE                     _teclado_init:
  6541                           	callstack 28
  6542  003ACE                     
  6543                           ;teclado.c: 31:     PORTD = 0x00;
  6544  003ACE  0E00               	movlw	0
  6545  003AD0  6E83               	movwf	131,c	;volatile
  6546                           
  6547                           ;teclado.c: 32:     TRISD = 0xF0;
  6548  003AD2  0EF0               	movlw	240
  6549  003AD4  6E95               	movwf	149,c	;volatile
  6550  003AD6  0012               	return		;funcret
  6551  003AD8                     __end_of_teclado_init:
  6552                           	callstack 0
  6553                           
  6554 ;; *************** function _teclado_borda *****************
  6555 ;; Defined at:
  6556 ;;		line 92 in file "teclado.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  tecla           1    6[COMRAM] unsigned char 
  6561 ;;  aux             1    5[COMRAM] unsigned char 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      unsigned char 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6571 ;;      Params:         0       0       0       0       0       0       0       0       0
  6572 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6574 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6575 ;;Total ram usage:        2 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    3
  6578 ;; This function calls:
  6579 ;;		_teclado_scan
  6580 ;; This function is called by:
  6581 ;;		_main
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text3
  6586  003728                     __ptext3:
  6587                           	callstack 0
  6588  003728                     _teclado_borda:
  6589                           	callstack 27
  6590  003728                     
  6591                           ;teclado.c: 95:     char aux = 0;
  6592  003728  0E00               	movlw	0
  6593  00372A  6E2B               	movwf	teclado_borda@aux^0,c
  6594  00372C                     
  6595                           ;teclado.c: 97:     tecla = teclado_scan();
  6596  00372C  EC4F  F016         	call	_teclado_scan	;wreg free
  6597  003730  6E2C               	movwf	teclado_borda@tecla^0,c
  6598  003732                     
  6599                           ;teclado.c: 99:     if(tecla && !teclaAnterior)
  6600  003732  502C               	movf	teclado_borda@tecla^0,w,c
  6601  003734  B4D8               	btfsc	status,2,c
  6602  003736  EF9F  F01B         	goto	u3381
  6603  00373A  EFA1  F01B         	goto	u3380
  6604  00373E                     u3381:
  6605  00373E  EFAB  F01B         	goto	l1005
  6606  003742                     u3380:
  6607  003742  5011               	movf	_teclaAnterior^0,w,c
  6608  003744  A4D8               	btfss	status,2,c
  6609  003746  EFA7  F01B         	goto	u3391
  6610  00374A  EFA9  F01B         	goto	u3390
  6611  00374E                     u3391:
  6612  00374E  EFAB  F01B         	goto	l1005
  6613  003752                     u3390:
  6614  003752                     
  6615                           ;teclado.c: 100:         aux = tecla;
  6616  003752  C02C  F02B         	movff	teclado_borda@tecla,teclado_borda@aux
  6617  003756                     l1005:
  6618                           
  6619                           ;teclado.c: 102:     teclaAnterior = tecla;
  6620  003756  C02C  F011         	movff	teclado_borda@tecla,_teclaAnterior
  6621  00375A                     
  6622                           ;teclado.c: 104:     return(aux);
  6623  00375A  502B               	movf	teclado_borda@aux^0,w,c
  6624  00375C  0012               	return		;funcret
  6625  00375E                     __end_of_teclado_borda:
  6626                           	callstack 0
  6627                           
  6628 ;; *************** function _teclado_scan *****************
  6629 ;; Defined at:
  6630 ;;		line 55 in file "teclado.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  c               1    4[COMRAM] unsigned char 
  6635 ;;  l               1    3[COMRAM] unsigned char 
  6636 ;;  tecla           1    2[COMRAM] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      unsigned char 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0
  6647 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6648 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6649 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6650 ;;Total ram usage:        5 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    2
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_teclado_borda
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text4
  6661  002C9E                     __ptext4:
  6662                           	callstack 0
  6663  002C9E                     _teclado_scan:
  6664                           	callstack 27
  6665  002C9E                     
  6666                           ;teclado.c: 57:    char tecla = 0;
  6667  002C9E  0E00               	movlw	0
  6668  002CA0  6E28               	movwf	teclado_scan@tecla^0,c
  6669                           
  6670                           ;teclado.c: 71:     unsigned char l,c;;teclado.c: 73:     for( l=0; l<4; l++ )
  6671  002CA2  0E00               	movlw	0
  6672  002CA4  6E29               	movwf	teclado_scan@l^0,c
  6673  002CA6                     l5018:
  6674  002CA6  0E03               	movlw	3
  6675  002CA8  6429               	cpfsgt	teclado_scan@l^0,c
  6676  002CAA  EF59  F016         	goto	u3271
  6677  002CAE  EF5B  F016         	goto	u3270
  6678  002CB2                     u3271:
  6679  002CB2  EF5D  F016         	goto	l5022
  6680  002CB6                     u3270:
  6681  002CB6  EFA1  F016         	goto	l5042
  6682  002CBA                     l5022:
  6683                           
  6684                           ;teclado.c: 74:     {;teclado.c: 75:         PORTD = (0x01 << l);
  6685  002CBA  C029  F026         	movff	teclado_scan@l,??_teclado_scan
  6686  002CBE  0E01               	movlw	1
  6687  002CC0  6E27               	movwf	(??_teclado_scan+1)^0,c
  6688  002CC2  2A26               	incf	??_teclado_scan^0,f,c
  6689  002CC4  EF66  F016         	goto	u3284
  6690  002CC8                     u3285:
  6691  002CC8  90D8               	bcf	status,0,c
  6692  002CCA  3627               	rlcf	(??_teclado_scan+1)^0,f,c
  6693  002CCC                     u3284:
  6694  002CCC  2E26               	decfsz	??_teclado_scan^0,f,c
  6695  002CCE  EF64  F016         	goto	u3285
  6696  002CD2  5027               	movf	(??_teclado_scan+1)^0,w,c
  6697  002CD4  6E83               	movwf	131,c	;volatile
  6698  002CD6                     
  6699                           ;teclado.c: 77:         for( c=0; c<4; c++ )
  6700  002CD6  0E00               	movlw	0
  6701  002CD8  6E2A               	movwf	teclado_scan@c^0,c
  6702  002CDA                     l5030:
  6703                           
  6704                           ;teclado.c: 78:         {;teclado.c: 80:             if( PORTD & (0x10<<c) )
  6705  002CDA  C02A  F026         	movff	teclado_scan@c,??_teclado_scan
  6706  002CDE  0E10               	movlw	16
  6707  002CE0  6E27               	movwf	(??_teclado_scan+1)^0,c
  6708  002CE2  2A26               	incf	??_teclado_scan^0,f,c
  6709  002CE4  EF76  F016         	goto	u3294
  6710  002CE8                     u3295:
  6711  002CE8  90D8               	bcf	status,0,c
  6712  002CEA  3627               	rlcf	(??_teclado_scan+1)^0,f,c
  6713  002CEC                     u3294:
  6714  002CEC  2E26               	decfsz	??_teclado_scan^0,f,c
  6715  002CEE  EF74  F016         	goto	u3295
  6716  002CF2  5027               	movf	(??_teclado_scan+1)^0,w,c
  6717  002CF4  1483               	andwf	131,w,c	;volatile
  6718  002CF6  0900               	iorlw	0
  6719  002CF8  B4D8               	btfsc	status,2,c
  6720  002CFA  EF81  F016         	goto	u3301
  6721  002CFE  EF83  F016         	goto	u3300
  6722  002D02                     u3301:
  6723  002D02  EF95  F016         	goto	l5034
  6724  002D06                     u3300:
  6725  002D06                     
  6726                           ;teclado.c: 81:             {;teclado.c: 82:                 tecla = teclas[l][c];
  6727  002D06  5029               	movf	teclado_scan@l^0,w,c
  6728  002D08  0D04               	mullw	4
  6729  002D0A  0E46               	movlw	low _teclas
  6730  002D0C  6E26               	movwf	??_teclado_scan^0,c
  6731  002D0E  0E00               	movlw	high _teclas
  6732  002D10  6E27               	movwf	(??_teclado_scan+1)^0,c
  6733  002D12  50F3               	movf	243,w,c
  6734  002D14  2626               	addwf	??_teclado_scan^0,f,c
  6735  002D16  50F4               	movf	244,w,c
  6736  002D18  2227               	addwfc	(??_teclado_scan+1)^0,f,c
  6737  002D1A  502A               	movf	teclado_scan@c^0,w,c
  6738  002D1C  2426               	addwf	??_teclado_scan^0,w,c
  6739  002D1E  6ED9               	movwf	fsr2l,c
  6740  002D20  0E00               	movlw	0
  6741  002D22  2027               	addwfc	(??_teclado_scan+1)^0,w,c
  6742  002D24  6EDA               	movwf	fsr2h,c
  6743  002D26  50DF               	movf	indf2,w,c
  6744  002D28  6E28               	movwf	teclado_scan@tecla^0,c
  6745  002D2A                     l5034:
  6746                           
  6747                           ;teclado.c: 85:         }
  6748  002D2A  2A2A               	incf	teclado_scan@c^0,f,c
  6749  002D2C  0E03               	movlw	3
  6750  002D2E  642A               	cpfsgt	teclado_scan@c^0,c
  6751  002D30  EF9C  F016         	goto	u3311
  6752  002D34  EF9E  F016         	goto	u3310
  6753  002D38                     u3311:
  6754  002D38  EF6D  F016         	goto	l5030
  6755  002D3C                     u3310:
  6756  002D3C                     
  6757                           ;teclado.c: 86:     }
  6758  002D3C  2A29               	incf	teclado_scan@l^0,f,c
  6759  002D3E  EF53  F016         	goto	l5018
  6760  002D42                     l5042:
  6761                           
  6762                           ;teclado.c: 87:     return( tecla );
  6763  002D42  5028               	movf	teclado_scan@tecla^0,w,c
  6764  002D44  0012               	return		;funcret
  6765  002D46                     __end_of_teclado_scan:
  6766                           	callstack 0
  6767                           
  6768 ;; *************** function _statusT1 *****************
  6769 ;; Defined at:
  6770 ;;		line 38 in file "timer1.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;		None
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  4    0[COMRAM] unsigned long 
  6777 ;; Registers used:
  6778 ;;		None
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6784 ;;      Params:         4       0       0       0       0       0       0       0       0
  6785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6787 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6788 ;;Total ram usage:        4 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    2
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		_main
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text5
  6799  003A7A                     __ptext5:
  6800                           	callstack 0
  6801  003A7A                     _statusT1:
  6802                           	callstack 28
  6803  003A7A                     
  6804                           ;timer1.c: 40:     return( t1cont );
  6805  003A7A  C001  F026         	movff	_t1cont,?_statusT1
  6806  003A7E  C002  F027         	movff	_t1cont+1,?_statusT1+1
  6807  003A82  C003  F028         	movff	_t1cont+2,?_statusT1+2
  6808  003A86  C004  F029         	movff	_t1cont+3,?_statusT1+3
  6809  003A8A  0012               	return		;funcret
  6810  003A8C                     __end_of_statusT1:
  6811                           	callstack 0
  6812                           
  6813 ;; *************** function _set_passo *****************
  6814 ;; Defined at:
  6815 ;;		line 53 in file "atuadores.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;  passo           1    wreg     unsigned char 
  6818 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  6819 ;;		 -> main@vetorOut(1), 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  passo           1    4[COMRAM] unsigned char 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6831 ;;      Params:         2       0       0       0       0       0       0       0       0
  6832 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6833 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6834 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6835 ;;Total ram usage:        5 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    2
  6838 ;; This function calls:
  6839 ;;		Nothing
  6840 ;; This function is called by:
  6841 ;;		_main
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text6
  6846  002A48                     __ptext6:
  6847                           	callstack 0
  6848  002A48                     _set_passo:
  6849                           	callstack 28
  6850                           
  6851                           ;incstack = 0
  6852                           ;set_passo@passo stored from wreg
  6853  002A48  6E2A               	movwf	set_passo@passo^0,c
  6854  002A4A                     
  6855                           ;atuadores.c: 53: void set_passo(char passo, char* ptr);atuadores.c: 54: {;atuadores.c: 
      +                          55:     switch (passo)
  6856  002A4A  EF67  F015         	goto	l5564
  6857  002A4E                     l5546:
  6858  002A4E  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6859  002A52  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6860  002A56  0E00               	movlw	0
  6861  002A58  80DB               	bsf	plusw2,0,c
  6862  002A5A  EF94  F015         	goto	l435
  6863  002A5E                     l5548:
  6864  002A5E  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6865  002A62  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6866  002A66  0EFE               	movlw	254
  6867  002A68  16DF               	andwf	indf2,f,c
  6868  002A6A  EF94  F015         	goto	l435
  6869  002A6E                     l5550:
  6870  002A6E  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6871  002A72  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6872  002A76  0E00               	movlw	0
  6873  002A78  82DB               	bsf	plusw2,1,c
  6874  002A7A  EF94  F015         	goto	l435
  6875  002A7E                     l5552:
  6876  002A7E  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6877  002A82  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6878  002A86  0EFD               	movlw	253
  6879  002A88  16DF               	andwf	indf2,f,c
  6880  002A8A  EF94  F015         	goto	l435
  6881  002A8E                     l5554:
  6882  002A8E  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6883  002A92  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6884  002A96  0E00               	movlw	0
  6885  002A98  84DB               	bsf	plusw2,2,c
  6886  002A9A  EF94  F015         	goto	l435
  6887  002A9E                     l5556:
  6888  002A9E  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6889  002AA2  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6890  002AA6  0EFB               	movlw	251
  6891  002AA8  16DF               	andwf	indf2,f,c
  6892  002AAA  EF94  F015         	goto	l435
  6893  002AAE                     l5558:
  6894  002AAE  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6895  002AB2  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6896  002AB6  0E00               	movlw	0
  6897  002AB8  86DB               	bsf	plusw2,3,c
  6898  002ABA  EF94  F015         	goto	l435
  6899  002ABE                     l5560:
  6900  002ABE  C026  FFD9         	movff	set_passo@ptr,fsr2l
  6901  002AC2  C027  FFDA         	movff	set_passo@ptr+1,fsr2h
  6902  002AC6  0EF7               	movlw	247
  6903  002AC8  16DF               	andwf	indf2,f,c
  6904  002ACA  EF94  F015         	goto	l435
  6905  002ACE                     l5564:
  6906  002ACE  502A               	movf	set_passo@passo^0,w,c
  6907  002AD0  6E28               	movwf	??_set_passo^0,c
  6908  002AD2  6A29               	clrf	(??_set_passo+1)^0,c
  6909                           
  6910                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6911                           ; Switch size 1, requested type "simple"
  6912                           ; Number of cases is 1, Range of values is 0 to 0
  6913                           ; switch strategies available:
  6914                           ; Name         Instructions Cycles
  6915                           ; simple_byte            4     3 (average)
  6916                           ;	Chosen strategy is simple_byte
  6917  002AD4  5029               	movf	(??_set_passo+1)^0,w,c
  6918  002AD6  0A00               	xorlw	0	; case 0
  6919  002AD8  B4D8               	btfsc	status,2,c
  6920  002ADA  EF71  F015         	goto	l7352
  6921  002ADE  EF94  F015         	goto	l435
  6922  002AE2                     l7352:
  6923                           
  6924                           ; Switch size 1, requested type "simple"
  6925                           ; Number of cases is 8, Range of values is 65 to 100
  6926                           ; switch strategies available:
  6927                           ; Name         Instructions Cycles
  6928                           ; simple_byte           25    13 (average)
  6929                           ;	Chosen strategy is simple_byte
  6930  002AE2  5028               	movf	??_set_passo^0,w,c
  6931  002AE4  0A41               	xorlw	65	; case 65
  6932  002AE6  B4D8               	btfsc	status,2,c
  6933  002AE8  EF27  F015         	goto	l5546
  6934  002AEC  0A03               	xorlw	3	; case 66
  6935  002AEE  B4D8               	btfsc	status,2,c
  6936  002AF0  EF37  F015         	goto	l5550
  6937  002AF4  0A01               	xorlw	1	; case 67
  6938  002AF6  B4D8               	btfsc	status,2,c
  6939  002AF8  EF47  F015         	goto	l5554
  6940  002AFC  0A07               	xorlw	7	; case 68
  6941  002AFE  B4D8               	btfsc	status,2,c
  6942  002B00  EF57  F015         	goto	l5558
  6943  002B04  0A25               	xorlw	37	; case 97
  6944  002B06  B4D8               	btfsc	status,2,c
  6945  002B08  EF2F  F015         	goto	l5548
  6946  002B0C  0A03               	xorlw	3	; case 98
  6947  002B0E  B4D8               	btfsc	status,2,c
  6948  002B10  EF3F  F015         	goto	l5552
  6949  002B14  0A01               	xorlw	1	; case 99
  6950  002B16  B4D8               	btfsc	status,2,c
  6951  002B18  EF4F  F015         	goto	l5556
  6952  002B1C  0A07               	xorlw	7	; case 100
  6953  002B1E  B4D8               	btfsc	status,2,c
  6954  002B20  EF5F  F015         	goto	l5560
  6955  002B24  EF94  F015         	goto	l435
  6956  002B28                     l435:
  6957  002B28  0012               	return		;funcret
  6958  002B2A                     __end_of_set_passo:
  6959                           	callstack 0
  6960                           
  6961 ;; *************** function _setT1 *****************
  6962 ;; Defined at:
  6963 ;;		line 31 in file "timer1.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  c               4    6[COMRAM] unsigned long 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  1    wreg      void 
  6970 ;; Registers used:
  6971 ;;		None
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6977 ;;      Params:         4       0       0       0       0       0       0       0       0
  6978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6979 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6980 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6981 ;;Total ram usage:        4 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    2
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_main
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text7
  6992  003A16                     __ptext7:
  6993                           	callstack 0
  6994  003A16                     _setT1:
  6995                           	callstack 28
  6996  003A16                     
  6997                           ;timer1.c: 31: void setT1( unsigned long int c );timer1.c: 32: {;timer1.c: 33:     t1con
      +                          t = c;
  6998  003A16  C02C  F001         	movff	setT1@c,_t1cont
  6999  003A1A  C02D  F002         	movff	setT1@c+1,_t1cont+1
  7000  003A1E  C02E  F003         	movff	setT1@c+2,_t1cont+2
  7001  003A22  C02F  F004         	movff	setT1@c+3,_t1cont+3
  7002                           
  7003                           ;timer1.c: 34:     T1CONbits.TMR1ON = 1;
  7004  003A26  80CD               	bsf	205,0,c	;volatile
  7005  003A28  0012               	return		;funcret
  7006  003A2A                     __end_of_setT1:
  7007                           	callstack 0
  7008                           
  7009 ;; *************** function _serialIOscan *****************
  7010 ;; Defined at:
  7011 ;;		line 76 in file "serialIO.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  i               1    6[COMRAM] unsigned char 
  7016 ;;  j               1    5[COMRAM] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      void 
  7019 ;; Registers used:
  7020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0
  7027 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7028 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7029 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7030 ;;Total ram usage:        4 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    3
  7033 ;; This function calls:
  7034 ;;		_serialIObyteShift
  7035 ;;		_serialIOload
  7036 ;; This function is called by:
  7037 ;;		_main
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           	psect	text8
  7042  0032F0                     __ptext8:
  7043                           	callstack 0
  7044  0032F0                     _serialIOscan:
  7045                           	callstack 27
  7046  0032F0                     
  7047                           ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  7048  0032F0  0412               	decf	_lenSerialIO^0,w,c
  7049  0032F2  6E2B               	movwf	serialIOscan@j^0,c
  7050  0032F4                     
  7051                           ;serialIO.c: 80:     serialIOload();
  7052  0032F4  EC89  F01D         	call	_serialIOload	;wreg free
  7053  0032F8                     
  7054                           ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  7055  0032F8  0E00               	movlw	0
  7056  0032FA  6E2C               	movwf	serialIOscan@i^0,c
  7057  0032FC  EF98  F019         	goto	l5536
  7058  003300                     l5532:
  7059                           
  7060                           ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
      +                          rialOut[j-i]);
  7061  003300  502C               	movf	serialIOscan@i^0,w,c
  7062  003302  240B               	addwf	_ptrSerialIn^0,w,c
  7063  003304  6ED9               	movwf	fsr2l,c
  7064  003306  0E00               	movlw	0
  7065  003308  200C               	addwfc	(_ptrSerialIn+1)^0,w,c
  7066  00330A  6EDA               	movwf	fsr2h,c
  7067  00330C  502B               	movf	serialIOscan@j^0,w,c
  7068  00330E  2409               	addwf	_ptrSerialOut^0,w,c
  7069  003310  6E29               	movwf	??_serialIOscan^0,c
  7070  003312  0E00               	movlw	0
  7071  003314  200A               	addwfc	(_ptrSerialOut+1)^0,w,c
  7072  003316  6E2A               	movwf	(??_serialIOscan+1)^0,c
  7073  003318  502C               	movf	serialIOscan@i^0,w,c
  7074  00331A  5C29               	subwf	??_serialIOscan^0,w,c
  7075  00331C  6EE1               	movwf	fsr1l,c
  7076  00331E  502A               	movf	(??_serialIOscan+1)^0,w,c
  7077  003320  A0D8               	btfss	status,0,c
  7078  003322  042A               	decf	(??_serialIOscan+1)^0,w,c
  7079  003324  6EE2               	movwf	fsr1h,c
  7080  003326  50E7               	movf	indf1,w,c
  7081  003328  EC4B  F019         	call	_serialIObyteShift
  7082  00332C  6EDF               	movwf	indf2,c
  7083  00332E                     
  7084                           ;serialIO.c: 84:     }
  7085  00332E  2A2C               	incf	serialIOscan@i^0,f,c
  7086  003330                     l5536:
  7087  003330  5012               	movf	_lenSerialIO^0,w,c
  7088  003332  5C2C               	subwf	serialIOscan@i^0,w,c
  7089  003334  A0D8               	btfss	status,0,c
  7090  003336  EF9F  F019         	goto	u3851
  7091  00333A  EFA1  F019         	goto	u3850
  7092  00333E                     u3851:
  7093  00333E  EF80  F019         	goto	l5532
  7094  003342                     u3850:
  7095  003342                     
  7096                           ;serialIO.c: 85:     serialIOload();
  7097  003342  EC89  F01D         	call	_serialIOload	;wreg free
  7098  003346  0012               	return		;funcret
  7099  003348                     __end_of_serialIOscan:
  7100                           	callstack 0
  7101                           
  7102 ;; *************** function _serialIOload *****************
  7103 ;; Defined at:
  7104 ;;		line 45 in file "serialIO.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;		None
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;		None
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		None
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7118 ;;      Params:         0       0       0       0       0       0       0       0       0
  7119 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7121 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7122 ;;Total ram usage:        0 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    2
  7125 ;; This function calls:
  7126 ;;		Nothing
  7127 ;; This function is called by:
  7128 ;;		_serialIOscan
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text9
  7133  003B12                     __ptext9:
  7134                           	callstack 0
  7135  003B12                     _serialIOload:
  7136                           	callstack 27
  7137  003B12                     
  7138                           ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  7139  003B12  9680               	bcf	128,3,c	;volatile
  7140                           
  7141                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  7142  003B14  8680               	bsf	128,3,c	;volatile
  7143  003B16  0012               	return		;funcret
  7144  003B18                     __end_of_serialIOload:
  7145                           	callstack 0
  7146                           
  7147 ;; *************** function _serialIObyteShift *****************
  7148 ;; Defined at:
  7149 ;;		line 50 in file "serialIO.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;  dataIn          1    wreg     unsigned char 
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;  dataIn          1    0[COMRAM] unsigned char 
  7154 ;;  dataBit         1    2[COMRAM] unsigned char 
  7155 ;;  dataOut         1    1[COMRAM] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7165 ;;      Params:         0       0       0       0       0       0       0       0       0
  7166 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7168 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7169 ;;Total ram usage:        3 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    2
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_serialIOscan
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text10
  7180  003296                     __ptext10:
  7181                           	callstack 0
  7182  003296                     _serialIObyteShift:
  7183                           	callstack 27
  7184                           
  7185                           ;incstack = 0
  7186                           ;serialIObyteShift@dataIn stored from wreg
  7187  003296  6E26               	movwf	serialIObyteShift@dataIn^0,c
  7188  003298                     
  7189                           ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
      +                           {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
      +                          ;serialIO.c: 55:     dataBit = 0x80;
  7190  003298  0E80               	movlw	128
  7191  00329A  6E28               	movwf	serialIObyteShift@dataBit^0,c
  7192                           
  7193                           ;serialIO.c: 56:     dataOut = 0;
  7194  00329C  0E00               	movlw	0
  7195  00329E  6E27               	movwf	serialIObyteShift@dataOut^0,c
  7196                           
  7197                           ;serialIO.c: 58:     while( dataBit )
  7198  0032A0  EF6D  F019         	goto	l5010
  7199  0032A4                     l902:
  7200                           
  7201                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  7202  0032A4  9480               	bcf	128,2,c	;volatile
  7203  0032A6                     
  7204                           ;serialIO.c: 61:         if( dataIn & dataBit )
  7205  0032A6  5026               	movf	serialIObyteShift@dataIn^0,w,c
  7206  0032A8  1428               	andwf	serialIObyteShift@dataBit^0,w,c
  7207  0032AA  0900               	iorlw	0
  7208  0032AC  B4D8               	btfsc	status,2,c
  7209  0032AE  EF5B  F019         	goto	u3241
  7210  0032B2  EF5D  F019         	goto	u3240
  7211  0032B6                     u3241:
  7212  0032B6  EF60  F019         	goto	l903
  7213  0032BA                     u3240:
  7214  0032BA                     
  7215                           ;serialIO.c: 62:             SERIALIO.OUT = 1;
  7216  0032BA  8080               	bsf	128,0,c	;volatile
  7217  0032BC  EF61  F019         	goto	l904
  7218  0032C0                     l903:
  7219                           
  7220                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  7221  0032C0  9080               	bcf	128,0,c	;volatile
  7222  0032C2                     l904:
  7223                           
  7224                           ;serialIO.c: 66:         if( SERIALIO.IN )
  7225  0032C2  A280               	btfss	128,1,c	;volatile
  7226  0032C4  EF66  F019         	goto	u3251
  7227  0032C8  EF68  F019         	goto	u3250
  7228  0032CC                     u3251:
  7229  0032CC  EF6A  F019         	goto	l5008
  7230  0032D0                     u3250:
  7231  0032D0                     
  7232                           ;serialIO.c: 67:             dataOut |= dataBit;
  7233  0032D0  5028               	movf	serialIObyteShift@dataBit^0,w,c
  7234  0032D2  1227               	iorwf	serialIObyteShift@dataOut^0,f,c
  7235  0032D4                     l5008:
  7236                           
  7237                           ;serialIO.c: 68:         SERIALIO.CLK = 1;
  7238  0032D4  8480               	bsf	128,2,c	;volatile
  7239                           
  7240                           ;serialIO.c: 69:         dataBit >>= 1;
  7241  0032D6  90D8               	bcf	status,0,c
  7242  0032D8  3228               	rrcf	serialIObyteShift@dataBit^0,f,c
  7243  0032DA                     l5010:
  7244                           
  7245                           ;serialIO.c: 58:     while( dataBit )
  7246  0032DA  5028               	movf	serialIObyteShift@dataBit^0,w,c
  7247  0032DC  A4D8               	btfss	status,2,c
  7248  0032DE  EF73  F019         	goto	u3261
  7249  0032E2  EF75  F019         	goto	u3260
  7250  0032E6                     u3261:
  7251  0032E6  EF52  F019         	goto	l902
  7252  0032EA                     u3260:
  7253  0032EA                     
  7254                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  7255  0032EA  9480               	bcf	128,2,c	;volatile
  7256  0032EC                     
  7257                           ;serialIO.c: 72:     return( dataOut );
  7258  0032EC  5027               	movf	serialIObyteShift@dataOut^0,w,c
  7259  0032EE  0012               	return		;funcret
  7260  0032F0                     __end_of_serialIObyteShift:
  7261                           	callstack 0
  7262                           
  7263 ;; *************** function _salvar_receita *****************
  7264 ;; Defined at:
  7265 ;;		line 46 in file "eeprom.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  adrs            1    wreg     unsigned char 
  7268 ;;  data            2    6[COMRAM] PTR unsigned char 
  7269 ;;		 -> fila(18), 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  adrs            1   10[COMRAM] unsigned char 
  7272 ;;  i               1   11[COMRAM] unsigned char 
  7273 ;;  aux             2    8[COMRAM] int 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      void 
  7276 ;; Registers used:
  7277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7283 ;;      Params:         2       0       0       0       0       0       0       0       0
  7284 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7286 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7287 ;;Total ram usage:        6 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    3
  7290 ;; This function calls:
  7291 ;;		_EEPROM_write
  7292 ;;		_end_receita
  7293 ;; This function is called by:
  7294 ;;		_main
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	text11
  7299  0035B6                     __ptext11:
  7300                           	callstack 0
  7301  0035B6                     _salvar_receita:
  7302                           	callstack 27
  7303                           
  7304                           ;incstack = 0
  7305                           ;salvar_receita@adrs stored from wreg
  7306  0035B6  6E30               	movwf	salvar_receita@adrs^0,c
  7307  0035B8                     
  7308                           ;eeprom.c: 46: void salvar_receita (char adrs, unsigned char *data );eeprom.c: 47: {;eep
      +                          rom.c: 48:     int aux;;eeprom.c: 49:     aux = end_receita(adrs);
  7309  0035B8  C030  F026         	movff	salvar_receita@adrs,end_receita@x
  7310  0035BC  6A27               	clrf	(end_receita@x+1)^0,c
  7311  0035BE  EC8F  F01C         	call	_end_receita	;wreg free
  7312  0035C2  C026  F02E         	movff	?_end_receita,salvar_receita@aux
  7313  0035C6  C027  F02F         	movff	?_end_receita+1,salvar_receita@aux+1
  7314  0035CA                     
  7315                           ;eeprom.c: 50:     for( char i=0 ; i<16; i++)
  7316  0035CA  0E00               	movlw	0
  7317  0035CC  6E31               	movwf	salvar_receita@i^0,c
  7318  0035CE                     l5672:
  7319                           
  7320                           ;eeprom.c: 51:          EEPROM_write( (aux+i), *(data+i) );
  7321  0035CE  5031               	movf	salvar_receita@i^0,w,c
  7322  0035D0  242C               	addwf	salvar_receita@data^0,w,c
  7323  0035D2  6ED9               	movwf	fsr2l,c
  7324  0035D4  0E00               	movlw	0
  7325  0035D6  202D               	addwfc	(salvar_receita@data+1)^0,w,c
  7326  0035D8  6EDA               	movwf	fsr2h,c
  7327  0035DA  50DF               	movf	indf2,w,c
  7328  0035DC  6E26               	movwf	EEPROM_write@data^0,c
  7329  0035DE  5031               	movf	salvar_receita@i^0,w,c
  7330  0035E0  242E               	addwf	salvar_receita@aux^0,w,c
  7331  0035E2  EC10  F01C         	call	_EEPROM_write
  7332  0035E6  2A31               	incf	salvar_receita@i^0,f,c
  7333  0035E8  0E0F               	movlw	15
  7334  0035EA  6431               	cpfsgt	salvar_receita@i^0,c
  7335  0035EC  EFFA  F01A         	goto	u3891
  7336  0035F0  EFFC  F01A         	goto	u3890
  7337  0035F4                     u3891:
  7338  0035F4  EFE7  F01A         	goto	l5672
  7339  0035F8                     u3890:
  7340  0035F8  0012               	return		;funcret
  7341  0035FA                     __end_of_salvar_receita:
  7342                           	callstack 0
  7343                           
  7344 ;; *************** function _salvar_dado *****************
  7345 ;; Defined at:
  7346 ;;		line 63 in file "eeprom.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;  adrs            1    wreg     unsigned char 
  7349 ;;  col             1    6[COMRAM] unsigned char 
  7350 ;;  data            1    7[COMRAM] unsigned char 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  adrs            1   10[COMRAM] unsigned char 
  7353 ;;  aux             2    8[COMRAM] int 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7363 ;;      Params:         2       0       0       0       0       0       0       0       0
  7364 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7366 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7367 ;;Total ram usage:        5 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    3
  7370 ;; This function calls:
  7371 ;;		_EEPROM_write
  7372 ;;		_end_receita
  7373 ;; This function is called by:
  7374 ;;		_main
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text12
  7379  003942                     __ptext12:
  7380                           	callstack 0
  7381  003942                     _salvar_dado:
  7382                           	callstack 27
  7383                           
  7384                           ;incstack = 0
  7385                           ;salvar_dado@adrs stored from wreg
  7386  003942  6E30               	movwf	salvar_dado@adrs^0,c
  7387  003944                     
  7388                           ;eeprom.c: 63: void salvar_dado (char adrs, char col, unsigned char data);eeprom.c: 64: 
      +                          {;eeprom.c: 65:     int aux;;eeprom.c: 66:     aux = end_receita(adrs);
  7389  003944  C030  F026         	movff	salvar_dado@adrs,end_receita@x
  7390  003948  6A27               	clrf	(end_receita@x+1)^0,c
  7391  00394A  EC8F  F01C         	call	_end_receita	;wreg free
  7392  00394E  C026  F02E         	movff	?_end_receita,salvar_dado@aux
  7393  003952  C027  F02F         	movff	?_end_receita+1,salvar_dado@aux+1
  7394                           
  7395                           ;eeprom.c: 67:     EEPROM_write((aux+col), data);
  7396  003956  C02D  F026         	movff	salvar_dado@data,EEPROM_write@data
  7397  00395A  502C               	movf	salvar_dado@col^0,w,c
  7398  00395C  242E               	addwf	salvar_dado@aux^0,w,c
  7399  00395E  EC10  F01C         	call	_EEPROM_write
  7400  003962  0012               	return		;funcret
  7401  003964                     __end_of_salvar_dado:
  7402                           	callstack 0
  7403                           
  7404 ;; *************** function _salva_atuadores_init *****************
  7405 ;; Defined at:
  7406 ;;		line 117 in file "fifo.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  condi_init      4    3[COMRAM] unsigned char [4]
  7411 ;;  pt              2    7[COMRAM] PTR unsigned char 
  7412 ;;		 -> salva_atuadores_init@condi_init(4), 
  7413 ;;  mask            1   10[COMRAM] unsigned char 
  7414 ;;  dado            1    9[COMRAM] unsigned char 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      unsigned char 
  7417 ;; Registers used:
  7418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7424 ;;      Params:         0       0       0       0       0       0       0       0       0
  7425 ;;      Locals:         8       0       0       0       0       0       0       0       0
  7426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7427 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7428 ;;Total ram usage:        8 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    3
  7431 ;; This function calls:
  7432 ;;		_ler_atuador
  7433 ;; This function is called by:
  7434 ;;		_main
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           	psect	text13
  7439  002FBC                     __ptext13:
  7440                           	callstack 0
  7441  002FBC                     _salva_atuadores_init:
  7442                           	callstack 27
  7443  002FBC                     
  7444                           ;fifo.c: 119:     char condi_init[4] = {ler_atuador('A'), ler_atuador('B'), ler_atuador(
      +                          'C'), ler_atuador('D')};
  7445  002FBC  0E00               	movlw	0
  7446  002FBE  6E29               	movwf	salva_atuadores_init@condi_init^0,c
  7447  002FC0  0E00               	movlw	0
  7448  002FC2  6E2A               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  7449  002FC4  0E00               	movlw	0
  7450  002FC6  6E2B               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  7451  002FC8  0E00               	movlw	0
  7452  002FCA  6E2C               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  7453  002FCC  0E41               	movlw	65
  7454  002FCE  ECF5  F016         	call	_ler_atuador
  7455  002FD2  6E29               	movwf	salva_atuadores_init@condi_init^0,c
  7456  002FD4  0E42               	movlw	66
  7457  002FD6  ECF5  F016         	call	_ler_atuador
  7458  002FDA  6E2A               	movwf	(salva_atuadores_init@condi_init+1)^0,c
  7459  002FDC  0E43               	movlw	67
  7460  002FDE  ECF5  F016         	call	_ler_atuador
  7461  002FE2  6E2B               	movwf	(salva_atuadores_init@condi_init+2)^0,c
  7462  002FE4  0E44               	movlw	68
  7463  002FE6  ECF5  F016         	call	_ler_atuador
  7464  002FEA  6E2C               	movwf	(salva_atuadores_init@condi_init+3)^0,c
  7465  002FEC                     
  7466                           ;fifo.c: 121:     char *pt = condi_init;
  7467  002FEC  0E29               	movlw	low salva_atuadores_init@condi_init
  7468  002FEE  6E2D               	movwf	salva_atuadores_init@pt^0,c
  7469  002FF0  0E00               	movlw	high salva_atuadores_init@condi_init
  7470  002FF2  6E2E               	movwf	(salva_atuadores_init@pt+1)^0,c
  7471  002FF4                     
  7472                           ;fifo.c: 122:     char dado = 0;
  7473  002FF4  0E00               	movlw	0
  7474  002FF6  6E2F               	movwf	salva_atuadores_init@dado^0,c
  7475  002FF8                     
  7476                           ;fifo.c: 123:     char mask = 0x08;
  7477  002FF8  0E08               	movlw	8
  7478  002FFA  6E30               	movwf	salva_atuadores_init@mask^0,c
  7479                           
  7480                           ;fifo.c: 125:     while( mask )
  7481  002FFC  EF13  F018         	goto	l5410
  7482  003000                     l5402:
  7483                           
  7484                           ;fifo.c: 126:     {;fifo.c: 127:         if( *pt )
  7485  003000  C02D  FFD9         	movff	salva_atuadores_init@pt,fsr2l
  7486  003004  C02E  FFDA         	movff	salva_atuadores_init@pt+1,fsr2h
  7487  003008  50DF               	movf	indf2,w,c
  7488  00300A  B4D8               	btfsc	status,2,c
  7489  00300C  EF0A  F018         	goto	u3651
  7490  003010  EF0C  F018         	goto	u3650
  7491  003014                     u3651:
  7492  003014  EF0F  F018         	goto	l5406
  7493  003018                     u3650:
  7494  003018                     
  7495                           ;fifo.c: 128:         {;fifo.c: 129:             dado = dado | mask;
  7496  003018  502F               	movf	salva_atuadores_init@dado^0,w,c
  7497  00301A  1030               	iorwf	salva_atuadores_init@mask^0,w,c
  7498  00301C  6E2F               	movwf	salva_atuadores_init@dado^0,c
  7499  00301E                     l5406:
  7500                           
  7501                           ;fifo.c: 131:         pt++;
  7502  00301E  4A2D               	infsnz	salva_atuadores_init@pt^0,f,c
  7503  003020  2A2E               	incf	(salva_atuadores_init@pt+1)^0,f,c
  7504  003022                     
  7505                           ;fifo.c: 132:         mask >>= 1;
  7506  003022  90D8               	bcf	status,0,c
  7507  003024  3230               	rrcf	salva_atuadores_init@mask^0,f,c
  7508  003026                     l5410:
  7509                           
  7510                           ;fifo.c: 125:     while( mask )
  7511  003026  5030               	movf	salva_atuadores_init@mask^0,w,c
  7512  003028  A4D8               	btfss	status,2,c
  7513  00302A  EF19  F018         	goto	u3661
  7514  00302E  EF1B  F018         	goto	u3660
  7515  003032                     u3661:
  7516  003032  EF00  F018         	goto	l5402
  7517  003036                     u3660:
  7518  003036                     
  7519                           ;fifo.c: 134:     return(dado);
  7520  003036  502F               	movf	salva_atuadores_init@dado^0,w,c
  7521  003038  0012               	return		;funcret
  7522  00303A                     __end_of_salva_atuadores_init:
  7523                           	callstack 0
  7524                           
  7525 ;; *************** function _ler_atuador *****************
  7526 ;; Defined at:
  7527 ;;		line 80 in file "fifo.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;  tecla           1    wreg     unsigned char 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  tecla           1    2[COMRAM] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      unsigned char 
  7534 ;; Registers used:
  7535 ;;		wreg, status,2, status,0
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0
  7542 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7543 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7544 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7545 ;;Total ram usage:        3 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    2
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_main
  7552 ;;		_salva_atuadores_init
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text14
  7557  002DEA                     __ptext14:
  7558                           	callstack 0
  7559  002DEA                     _ler_atuador:
  7560                           	callstack 27
  7561                           
  7562                           ;incstack = 0
  7563                           ;ler_atuador@tecla stored from wreg
  7564  002DEA  6E28               	movwf	ler_atuador@tecla^0,c
  7565  002DEC                     
  7566                           ;fifo.c: 80: char ler_atuador(char tecla);fifo.c: 81: {;fifo.c: 82:     switch(tecla)
  7567  002DEC  EF27  F017         	goto	l4816
  7568  002DF0                     l651:
  7569  002DF0  B013               	btfsc	_atuador^0,0,c
  7570  002DF2  EFFD  F016         	goto	u2991
  7571  002DF6  EF00  F017         	goto	u2990
  7572  002DFA                     u2991:
  7573  002DFA  0E01               	movlw	1
  7574  002DFC  EF01  F017         	goto	u2996
  7575  002E00                     u2990:
  7576  002E00  0E00               	movlw	0
  7577  002E02                     u2996:
  7578  002E02  EF44  F017         	goto	l652
  7579  002E06                     l654:
  7580  002E06  B213               	btfsc	_atuador^0,1,c
  7581  002E08  EF08  F017         	goto	u3001
  7582  002E0C  EF0B  F017         	goto	u3000
  7583  002E10                     u3001:
  7584  002E10  0E01               	movlw	1
  7585  002E12  EF0C  F017         	goto	u3006
  7586  002E16                     u3000:
  7587  002E16  0E00               	movlw	0
  7588  002E18                     u3006:
  7589  002E18  EF44  F017         	goto	l652
  7590  002E1C                     l655:
  7591  002E1C  B413               	btfsc	_atuador^0,2,c
  7592  002E1E  EF13  F017         	goto	u3011
  7593  002E22  EF16  F017         	goto	u3010
  7594  002E26                     u3011:
  7595  002E26  0E01               	movlw	1
  7596  002E28  EF17  F017         	goto	u3016
  7597  002E2C                     u3010:
  7598  002E2C  0E00               	movlw	0
  7599  002E2E                     u3016:
  7600  002E2E  EF44  F017         	goto	l652
  7601  002E32                     l656:
  7602  002E32  B613               	btfsc	_atuador^0,3,c
  7603  002E34  EF1E  F017         	goto	u3021
  7604  002E38  EF21  F017         	goto	u3020
  7605  002E3C                     u3021:
  7606  002E3C  0E01               	movlw	1
  7607  002E3E  EF22  F017         	goto	u3026
  7608  002E42                     u3020:
  7609  002E42  0E00               	movlw	0
  7610  002E44                     u3026:
  7611  002E44  EF44  F017         	goto	l652
  7612  002E48                     l4808:
  7613  002E48  0E00               	movlw	0
  7614  002E4A  EF44  F017         	goto	l652
  7615  002E4E                     l4816:
  7616  002E4E  5028               	movf	ler_atuador@tecla^0,w,c
  7617  002E50  6E26               	movwf	??_ler_atuador^0,c
  7618  002E52  6A27               	clrf	(??_ler_atuador+1)^0,c
  7619                           
  7620                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7621                           ; Switch size 1, requested type "simple"
  7622                           ; Number of cases is 1, Range of values is 0 to 0
  7623                           ; switch strategies available:
  7624                           ; Name         Instructions Cycles
  7625                           ; simple_byte            4     3 (average)
  7626                           ;	Chosen strategy is simple_byte
  7627  002E54  5027               	movf	(??_ler_atuador+1)^0,w,c
  7628  002E56  0A00               	xorlw	0	; case 0
  7629  002E58  B4D8               	btfsc	status,2,c
  7630  002E5A  EF31  F017         	goto	l7354
  7631  002E5E  EF24  F017         	goto	l4808
  7632  002E62                     l7354:
  7633                           
  7634                           ; Switch size 1, requested type "simple"
  7635                           ; Number of cases is 4, Range of values is 65 to 68
  7636                           ; switch strategies available:
  7637                           ; Name         Instructions Cycles
  7638                           ; simple_byte           13     7 (average)
  7639                           ;	Chosen strategy is simple_byte
  7640  002E62  5026               	movf	??_ler_atuador^0,w,c
  7641  002E64  0A41               	xorlw	65	; case 65
  7642  002E66  B4D8               	btfsc	status,2,c
  7643  002E68  EFF8  F016         	goto	l651
  7644  002E6C  0A03               	xorlw	3	; case 66
  7645  002E6E  B4D8               	btfsc	status,2,c
  7646  002E70  EF03  F017         	goto	l654
  7647  002E74  0A01               	xorlw	1	; case 67
  7648  002E76  B4D8               	btfsc	status,2,c
  7649  002E78  EF0E  F017         	goto	l655
  7650  002E7C  0A07               	xorlw	7	; case 68
  7651  002E7E  B4D8               	btfsc	status,2,c
  7652  002E80  EF19  F017         	goto	l656
  7653  002E84  EF24  F017         	goto	l4808
  7654  002E88                     l652:
  7655  002E88  0012               	return		;funcret
  7656  002E8A                     __end_of_ler_atuador:
  7657                           	callstack 0
  7658                           
  7659 ;; *************** function _resetIndicePassos *****************
  7660 ;; Defined at:
  7661 ;;		line 36 in file "fifo.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;		None
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7675 ;;      Params:         0       0       0       0       0       0       0       0       0
  7676 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7678 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7679 ;;Total ram usage:        0 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    2
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_main
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           	psect	text15
  7690  003B18                     __ptext15:
  7691                           	callstack 0
  7692  003B18                     _resetIndicePassos:
  7693                           	callstack 28
  7694  003B18                     
  7695                           ;fifo.c: 38:     indice_passos = 2;
  7696  003B18  0E02               	movlw	2
  7697  003B1A  6E56               	movwf	_indice_passos^0,c
  7698  003B1C  0012               	return		;funcret
  7699  003B1E                     __end_of_resetIndicePassos:
  7700                           	callstack 0
  7701                           
  7702 ;; *************** function _resetContCiclos *****************
  7703 ;; Defined at:
  7704 ;;		line 54 in file "fifo.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  1    wreg      void 
  7711 ;; Registers used:
  7712 ;;		wreg, status,2
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7718 ;;      Params:         0       0       0       0       0       0       0       0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7721 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7722 ;;Total ram usage:        0 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    2
  7725 ;; This function calls:
  7726 ;;		Nothing
  7727 ;; This function is called by:
  7728 ;;		_main
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text16
  7733  003AD8                     __ptext16:
  7734                           	callstack 0
  7735  003AD8                     _resetContCiclos:
  7736                           	callstack 28
  7737  003AD8                     
  7738                           ;fifo.c: 56:     cont_ciclos = 0;
  7739  003AD8  0E00               	movlw	0
  7740  003ADA  6E0E               	movwf	(_cont_ciclos+1)^0,c
  7741  003ADC  0E00               	movlw	0
  7742  003ADE  6E0D               	movwf	_cont_ciclos^0,c
  7743  003AE0  0012               	return		;funcret
  7744  003AE2                     __end_of_resetContCiclos:
  7745                           	callstack 0
  7746                           
  7747 ;; *************** function _printExec *****************
  7748 ;; Defined at:
  7749 ;;		line 520 in file "fifo.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  col             1    wreg     unsigned char 
  7752 ;;  ind             1   25[COMRAM] unsigned char 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  col             1   28[COMRAM] unsigned char 
  7755 ;;  passo           1   29[COMRAM] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      void 
  7758 ;; Registers used:
  7759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7765 ;;      Params:         1       0       0       0       0       0       0       0       0
  7766 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7768 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7769 ;;Total ram usage:        5 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    5
  7772 ;; This function calls:
  7773 ;;		_decodifica
  7774 ;;		_dignum_tam
  7775 ;;		_dispLCD_dataReg
  7776 ;;		_dispLCD_lincol
  7777 ;;		_dispLCD_num
  7778 ;;		_posAtual
  7779 ;; This function is called by:
  7780 ;;		_main
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text17
  7785  0020E4                     __ptext17:
  7786                           	callstack 0
  7787  0020E4                     _printExec:
  7788                           	callstack 25
  7789                           
  7790                           ;incstack = 0
  7791                           ;printExec@col stored from wreg
  7792  0020E4  6E42               	movwf	printExec@col^0,c
  7793  0020E6                     
  7794                           ;fifo.c: 520: void printExec (char col, char ind);fifo.c: 521: {;fifo.c: 522:     char p
      +                          asso = posAtual( ind );
  7795  0020E6  503F               	movf	printExec@ind^0,w,c
  7796  0020E8  EC46  F01D         	call	_posAtual
  7797  0020EC  6E43               	movwf	printExec@passo^0,c
  7798  0020EE                     
  7799                           ;fifo.c: 524:     if(passo > 0 && passo <= 0x64)
  7800  0020EE  5043               	movf	printExec@passo^0,w,c
  7801  0020F0  B4D8               	btfsc	status,2,c
  7802  0020F2  EF7D  F010         	goto	u3751
  7803  0020F6  EF7F  F010         	goto	u3750
  7804  0020FA                     u3751:
  7805  0020FA  EFA8  F010         	goto	l5470
  7806  0020FE                     u3750:
  7807  0020FE  0E65               	movlw	101
  7808  002100  6043               	cpfslt	printExec@passo^0,c
  7809  002102  EF85  F010         	goto	u3761
  7810  002106  EF87  F010         	goto	u3760
  7811  00210A                     u3761:
  7812  00210A  EFA8  F010         	goto	l5470
  7813  00210E                     u3760:
  7814  00210E                     
  7815                           ;fifo.c: 525:     {;fifo.c: 526:         if( dignum_tam( (int) passo ) == 3 )
  7816  00210E  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7817  002112  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7818  002114  EC3D  F01B         	call	_dignum_tam	;wreg free
  7819  002118  0A03               	xorlw	3
  7820  00211A  A4D8               	btfss	status,2,c
  7821  00211C  EF92  F010         	goto	u3771
  7822  002120  EF94  F010         	goto	u3770
  7823  002124                     u3771:
  7824  002124  EF95  F010         	goto	l5466
  7825  002128                     u3770:
  7826  002128                     
  7827                           ;fifo.c: 527:             col-=1;
  7828  002128  0642               	decf	printExec@col^0,f,c
  7829  00212A                     l5466:
  7830                           
  7831                           ;fifo.c: 528:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  7832  00212A  C042  F031         	movff	printExec@col,dispLCD_num@col
  7833  00212E  C043  F032         	movff	printExec@passo,dispLCD_num@num
  7834  002132  6A33               	clrf	(dispLCD_num@num+1)^0,c
  7835  002134  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7836  002138  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7837  00213A  EC3D  F01B         	call	_dignum_tam	;wreg free
  7838  00213E  6E34               	movwf	dispLCD_num@tam^0,c
  7839  002140  0E00               	movlw	0
  7840  002142  EC37  F011         	call	_dispLCD_num
  7841  002146                     
  7842                           ;fifo.c: 529:         dispLCD_dataReg('%');
  7843  002146  0E25               	movlw	37
  7844  002148  EC24  F01A         	call	_dispLCD_dataReg
  7845                           
  7846                           ;fifo.c: 530:     }
  7847  00214C  EF36  F011         	goto	l859
  7848  002150                     l5470:
  7849  002150  0E64               	movlw	100
  7850  002152  6443               	cpfsgt	printExec@passo^0,c
  7851  002154  EFAE  F010         	goto	u3781
  7852  002158  EFB0  F010         	goto	u3780
  7853  00215C                     u3781:
  7854  00215C  EFDF  F010         	goto	l5484
  7855  002160                     u3780:
  7856  002160  0EDD               	movlw	221
  7857  002162  6043               	cpfslt	printExec@passo^0,c
  7858  002164  EFB6  F010         	goto	u3791
  7859  002168  EFB8  F010         	goto	u3790
  7860  00216C                     u3791:
  7861  00216C  EFDF  F010         	goto	l5484
  7862  002170                     u3790:
  7863  002170                     
  7864                           ;fifo.c: 532:     {;fifo.c: 533:         decodifica(&passo);
  7865  002170  0E43               	movlw	low printExec@passo
  7866  002172  6E26               	movwf	decodifica@d^0,c
  7867  002174  0E00               	movlw	high printExec@passo
  7868  002176  6E27               	movwf	(decodifica@d+1)^0,c
  7869  002178  EC9E  F012         	call	_decodifica	;wreg free
  7870  00217C                     
  7871                           ;fifo.c: 534:         if( dignum_tam( (int) passo ) == 3 )
  7872  00217C  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7873  002180  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7874  002182  EC3D  F01B         	call	_dignum_tam	;wreg free
  7875  002186  0A03               	xorlw	3
  7876  002188  A4D8               	btfss	status,2,c
  7877  00218A  EFC9  F010         	goto	u3801
  7878  00218E  EFCB  F010         	goto	u3800
  7879  002192                     u3801:
  7880  002192  EFCC  F010         	goto	l5480
  7881  002196                     u3800:
  7882  002196                     
  7883                           ;fifo.c: 535:             col-=1;
  7884  002196  0642               	decf	printExec@col^0,f,c
  7885  002198                     l5480:
  7886                           
  7887                           ;fifo.c: 536:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  7888  002198  C042  F031         	movff	printExec@col,dispLCD_num@col
  7889  00219C  C043  F032         	movff	printExec@passo,dispLCD_num@num
  7890  0021A0  6A33               	clrf	(dispLCD_num@num+1)^0,c
  7891  0021A2  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7892  0021A6  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7893  0021A8  EC3D  F01B         	call	_dignum_tam	;wreg free
  7894  0021AC  6E34               	movwf	dispLCD_num@tam^0,c
  7895  0021AE  0E00               	movlw	0
  7896  0021B0  EC37  F011         	call	_dispLCD_num
  7897  0021B4                     
  7898                           ;fifo.c: 537:         dispLCD_dataReg('s');
  7899  0021B4  0E73               	movlw	115
  7900  0021B6  EC24  F01A         	call	_dispLCD_dataReg
  7901                           
  7902                           ;fifo.c: 538:     }
  7903  0021BA  EF36  F011         	goto	l859
  7904  0021BE                     l5484:
  7905  0021BE  0EDC               	movlw	220
  7906  0021C0  6443               	cpfsgt	printExec@passo^0,c
  7907  0021C2  EFE5  F010         	goto	u3811
  7908  0021C6  EFE7  F010         	goto	u3810
  7909  0021CA                     u3811:
  7910  0021CA  EF14  F011         	goto	l5502
  7911  0021CE                     u3810:
  7912  0021CE  0EFE               	movlw	254
  7913  0021D0  6043               	cpfslt	printExec@passo^0,c
  7914  0021D2  EFED  F010         	goto	u3821
  7915  0021D6  EFEF  F010         	goto	u3820
  7916  0021DA                     u3821:
  7917  0021DA  EF14  F011         	goto	l5502
  7918  0021DE                     u3820:
  7919  0021DE                     
  7920                           ;fifo.c: 540:     {;fifo.c: 541:         decodifica(&passo);
  7921  0021DE  0E43               	movlw	low printExec@passo
  7922  0021E0  6E26               	movwf	decodifica@d^0,c
  7923  0021E2  0E00               	movlw	high printExec@passo
  7924  0021E4  6E27               	movwf	(decodifica@d+1)^0,c
  7925  0021E6  EC9E  F012         	call	_decodifica	;wreg free
  7926  0021EA                     
  7927                           ;fifo.c: 542:         dispLCD_lincol(0, col);
  7928  0021EA  C042  F028         	movff	printExec@col,dispLCD_lincol@col
  7929  0021EE  0E00               	movlw	0
  7930  0021F0  EC8C  F018         	call	_dispLCD_lincol
  7931  0021F4                     
  7932                           ;fifo.c: 543:         dispLCD_dataReg( passo & ~0x20 );
  7933  0021F4  5043               	movf	printExec@passo^0,w,c
  7934  0021F6  0BDF               	andlw	223
  7935  0021F8  EC24  F01A         	call	_dispLCD_dataReg
  7936  0021FC                     
  7937                           ;fifo.c: 544:         dispLCD_dataReg( passo & 0x20 ? '-': '+' );
  7938  0021FC  BA43               	btfsc	printExec@passo^0,5,c
  7939  0021FE  EF03  F011         	goto	u3831
  7940  002202  EF05  F011         	goto	u3830
  7941  002206                     u3831:
  7942  002206  EF0B  F011         	goto	l5498
  7943  00220A                     u3830:
  7944  00220A  0E00               	movlw	0
  7945  00220C  6E41               	movwf	(_printExec$968+1)^0,c
  7946  00220E  0E2B               	movlw	43
  7947  002210  6E40               	movwf	_printExec$968^0,c
  7948  002212  EF0F  F011         	goto	l5500
  7949  002216                     l5498:
  7950  002216  0E00               	movlw	0
  7951  002218  6E41               	movwf	(_printExec$968+1)^0,c
  7952  00221A  0E2D               	movlw	45
  7953  00221C  6E40               	movwf	_printExec$968^0,c
  7954  00221E                     l5500:
  7955  00221E  5040               	movf	_printExec$968^0,w,c
  7956  002220  EC24  F01A         	call	_dispLCD_dataReg
  7957                           
  7958                           ;fifo.c: 545:     }
  7959  002224  EF36  F011         	goto	l859
  7960  002228                     l5502:
  7961  002228  0EFE               	movlw	254
  7962  00222A  1843               	xorwf	printExec@passo^0,w,c
  7963  00222C  A4D8               	btfss	status,2,c
  7964  00222E  EF1B  F011         	goto	u3841
  7965  002232  EF1D  F011         	goto	u3840
  7966  002236                     u3841:
  7967  002236  EF36  F011         	goto	l851
  7968  00223A                     u3840:
  7969  00223A                     
  7970                           ;fifo.c: 547:     {;fifo.c: 548:         decodifica(&passo);
  7971  00223A  0E43               	movlw	low printExec@passo
  7972  00223C  6E26               	movwf	decodifica@d^0,c
  7973  00223E  0E00               	movlw	high printExec@passo
  7974  002240  6E27               	movwf	(decodifica@d+1)^0,c
  7975  002242  EC9E  F012         	call	_decodifica	;wreg free
  7976  002246                     
  7977                           ;fifo.c: 549:         dispLCD_num(0, col, (int)passo, dignum_tam( (int)passo) );
  7978  002246  C042  F031         	movff	printExec@col,dispLCD_num@col
  7979  00224A  C043  F032         	movff	printExec@passo,dispLCD_num@num
  7980  00224E  6A33               	clrf	(dispLCD_num@num+1)^0,c
  7981  002250  C043  F02E         	movff	printExec@passo,dignum_tam@num
  7982  002254  6A2F               	clrf	(dignum_tam@num+1)^0,c
  7983  002256  EC3D  F01B         	call	_dignum_tam	;wreg free
  7984  00225A  6E34               	movwf	dispLCD_num@tam^0,c
  7985  00225C  0E00               	movlw	0
  7986  00225E  EC37  F011         	call	_dispLCD_num
  7987  002262                     
  7988                           ;fifo.c: 550:         dispLCD_dataReg('%');
  7989  002262  0E25               	movlw	37
  7990  002264  EC24  F01A         	call	_dispLCD_dataReg
  7991  002268  EF36  F011         	goto	l859
  7992  00226C                     l851:
  7993  00226C                     l859:
  7994  00226C  0012               	return		;funcret
  7995  00226E                     __end_of_printExec:
  7996                           	callstack 0
  7997                           
  7998 ;; *************** function _posAtual *****************
  7999 ;; Defined at:
  8000 ;;		line 512 in file "fifo.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;  ind             1    wreg     unsigned char 
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  ind             1    1[COMRAM] unsigned char 
  8005 ;;  passo           1    2[COMRAM] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      unsigned char 
  8008 ;; Registers used:
  8009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8015 ;;      Params:         0       0       0       0       0       0       0       0       0
  8016 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8018 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8019 ;;Total ram usage:        2 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    3
  8022 ;; This function calls:
  8023 ;;		_fifo_lerPos
  8024 ;;		_getIndicePassos
  8025 ;; This function is called by:
  8026 ;;		_printExec
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text18
  8031  003A8C                     __ptext18:
  8032                           	callstack 0
  8033  003A8C                     _posAtual:
  8034                           	callstack 26
  8035                           
  8036                           ;incstack = 0
  8037                           ;posAtual@ind stored from wreg
  8038  003A8C  6E27               	movwf	posAtual@ind^0,c
  8039  003A8E                     
  8040                           ;fifo.c: 516:     passo = fifo_lerPos( getIndicePassos() + ind );
  8041  003A8E  EC92  F01D         	call	_getIndicePassos	;wreg free
  8042  003A92  2427               	addwf	posAtual@ind^0,w,c
  8043  003A94  EC4F  F01D         	call	_fifo_lerPos
  8044  003A98  6E28               	movwf	posAtual@passo^0,c
  8045  003A9A                     
  8046                           ;fifo.c: 517:     return(passo);
  8047  003A9A  5028               	movf	posAtual@passo^0,w,c
  8048  003A9C  0012               	return		;funcret
  8049  003A9E                     __end_of_posAtual:
  8050                           	callstack 0
  8051                           
  8052 ;; *************** function _getIndicePassos *****************
  8053 ;; Defined at:
  8054 ;;		line 31 in file "fifo.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      unsigned char 
  8061 ;; Registers used:
  8062 ;;		wreg, status,2
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8068 ;;      Params:         0       0       0       0       0       0       0       0       0
  8069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8071 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8072 ;;Total ram usage:        0 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    2
  8075 ;; This function calls:
  8076 ;;		Nothing
  8077 ;; This function is called by:
  8078 ;;		_main
  8079 ;;		_posAtual
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           	psect	text19
  8084  003B24                     __ptext19:
  8085                           	callstack 0
  8086  003B24                     _getIndicePassos:
  8087                           	callstack 26
  8088  003B24                     
  8089                           ;fifo.c: 33:     return(indice_passos);
  8090  003B24  5056               	movf	_indice_passos^0,w,c
  8091  003B26  0012               	return		;funcret
  8092  003B28                     __end_of_getIndicePassos:
  8093                           	callstack 0
  8094                           
  8095 ;; *************** function _fifo_lerPos *****************
  8096 ;; Defined at:
  8097 ;;		line 168 in file "fifo.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;  i               1    wreg     unsigned char 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  i               1    0[COMRAM] unsigned char 
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      unsigned char 
  8104 ;; Registers used:
  8105 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8111 ;;      Params:         0       0       0       0       0       0       0       0       0
  8112 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8114 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8115 ;;Total ram usage:        1 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    2
  8118 ;; This function calls:
  8119 ;;		Nothing
  8120 ;; This function is called by:
  8121 ;;		_main
  8122 ;;		_posAtual
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text20
  8127  003A9E                     __ptext20:
  8128                           	callstack 0
  8129  003A9E                     _fifo_lerPos:
  8130                           	callstack 26
  8131                           
  8132                           ;incstack = 0
  8133                           ;fifo_lerPos@i stored from wreg
  8134  003A9E  6E26               	movwf	fifo_lerPos@i^0,c
  8135  003AA0                     
  8136                           ;fifo.c: 168: char fifo_lerPos(char i);fifo.c: 169: {;fifo.c: 170:     return ( fila[i] 
      +                          );
  8137  003AA0  0E14               	movlw	low _fila
  8138  003AA2  2426               	addwf	fifo_lerPos@i^0,w,c
  8139  003AA4  6ED9               	movwf	fsr2l,c
  8140  003AA6  6ADA               	clrf	fsr2h,c
  8141  003AA8  0E00               	movlw	high _fila
  8142  003AAA  22DA               	addwfc	fsr2h,f,c
  8143  003AAC  50DF               	movf	indf2,w,c
  8144  003AAE  0012               	return		;funcret
  8145  003AB0                     __end_of_fifo_lerPos:
  8146                           	callstack 0
  8147                           
  8148 ;; *************** function _dispLCD_num *****************
  8149 ;; Defined at:
  8150 ;;		line 201 in file "dispLCD4vias.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  lin             1    wreg     unsigned char 
  8153 ;;  col             1   11[COMRAM] unsigned char 
  8154 ;;  num             2   12[COMRAM] int 
  8155 ;;  tam             1   14[COMRAM] unsigned char 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  lin             1   20[COMRAM] unsigned char 
  8158 ;;  div             2   23[COMRAM] int 
  8159 ;;  sinal           1   22[COMRAM] unsigned char 
  8160 ;;  size            1   21[COMRAM] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      void 
  8163 ;; Registers used:
  8164 ;;		wreg, status,2, status,0, cstack
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8170 ;;      Params:         4       0       0       0       0       0       0       0       0
  8171 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8172 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8173 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8174 ;;Total ram usage:       14 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    4
  8177 ;; This function calls:
  8178 ;;		___awdiv
  8179 ;;		___awmod
  8180 ;;		_dispLCD_dataReg
  8181 ;;		_dispLCD_lincol
  8182 ;; This function is called by:
  8183 ;;		_printExec
  8184 ;;		_main
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           	psect	text21
  8189  00226E                     __ptext21:
  8190                           	callstack 0
  8191  00226E                     _dispLCD_num:
  8192                           	callstack 25
  8193                           
  8194                           ;incstack = 0
  8195                           ;dispLCD_num@lin stored from wreg
  8196  00226E  6E3A               	movwf	dispLCD_num@lin^0,c
  8197  002270                     
  8198                           ;dispLCD4vias.c: 201: void dispLCD_num( unsigned char lin, unsigned char col,;dispLCD4vi
      +                          as.c: 202:                     int num, unsigned char tam );dispLCD4vias.c: 203: {;dispL
      +                          CD4vias.c: 204:     int div;;dispLCD4vias.c: 205:     unsigned char size;;dispLCD4vias.c
      +                          : 206:     char sinal;;dispLCD4vias.c: 208:     sinal = num < 0;
  8199  002270  BE33               	btfsc	(dispLCD_num@num+1)^0,7,c
  8200  002272  EF3D  F011         	goto	u3031
  8201  002276  EF40  F011         	goto	u3030
  8202  00227A                     u3031:
  8203  00227A  0E01               	movlw	1
  8204  00227C  EF41  F011         	goto	u3040
  8205  002280                     u3030:
  8206  002280  0E00               	movlw	0
  8207  002282                     u3040:
  8208  002282  6E3C               	movwf	dispLCD_num@sinal^0,c
  8209  002284                     
  8210                           ;dispLCD4vias.c: 209:     if( sinal )
  8211  002284  503C               	movf	dispLCD_num@sinal^0,w,c
  8212  002286  B4D8               	btfsc	status,2,c
  8213  002288  EF48  F011         	goto	u3051
  8214  00228C  EF4A  F011         	goto	u3050
  8215  002290                     u3051:
  8216  002290  EF4E  F011         	goto	l4828
  8217  002294                     u3050:
  8218  002294                     
  8219                           ;dispLCD4vias.c: 210:         num = (~num) + 1;
  8220  002294  6C32               	negf	dispLCD_num@num^0,c
  8221  002296  1E33               	comf	(dispLCD_num@num+1)^0,f,c
  8222  002298  B0D8               	btfsc	status,0,c
  8223  00229A  2A33               	incf	(dispLCD_num@num+1)^0,f,c
  8224  00229C                     l4828:
  8225                           
  8226                           ;dispLCD4vias.c: 212:     dispLCD_lincol(lin, col);
  8227  00229C  C031  F028         	movff	dispLCD_num@col,dispLCD_lincol@col
  8228  0022A0  503A               	movf	dispLCD_num@lin^0,w,c
  8229  0022A2  EC8C  F018         	call	_dispLCD_lincol
  8230  0022A6                     
  8231                           ;dispLCD4vias.c: 214:     div=10000;
  8232  0022A6  0E27               	movlw	39
  8233  0022A8  6E3E               	movwf	(dispLCD_num@div+1)^0,c
  8234  0022AA  0E10               	movlw	16
  8235  0022AC  6E3D               	movwf	dispLCD_num@div^0,c
  8236  0022AE                     
  8237                           ;dispLCD4vias.c: 215:     size = 5;
  8238  0022AE  0E05               	movlw	5
  8239  0022B0  6E3B               	movwf	dispLCD_num@size^0,c
  8240                           
  8241                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  8242  0022B2  EF7D  F011         	goto	l4840
  8243  0022B6                     l4834:
  8244                           
  8245                           ;dispLCD4vias.c: 217:     {;dispLCD4vias.c: 218:         if( num/div == 0 )
  8246  0022B6  C032  F026         	movff	dispLCD_num@num,___awdiv@dividend
  8247  0022BA  C033  F027         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  8248  0022BE  C03D  F028         	movff	dispLCD_num@div,___awdiv@divisor
  8249  0022C2  C03E  F029         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  8250  0022C6  EC95  F015         	call	___awdiv	;wreg free
  8251  0022CA  5026               	movf	?___awdiv^0,w,c
  8252  0022CC  1027               	iorwf	(?___awdiv+1)^0,w,c
  8253  0022CE  A4D8               	btfss	status,2,c
  8254  0022D0  EF6C  F011         	goto	u3061
  8255  0022D4  EF6E  F011         	goto	u3060
  8256  0022D8                     u3061:
  8257  0022D8  EF90  F011         	goto	l4846
  8258  0022DC                     u3060:
  8259  0022DC                     
  8260                           ;dispLCD4vias.c: 219:             --size;
  8261  0022DC  063B               	decf	dispLCD_num@size^0,f,c
  8262  0022DE                     
  8263                           ;dispLCD4vias.c: 222:         div/=10;
  8264  0022DE  C03D  F026         	movff	dispLCD_num@div,___awdiv@dividend
  8265  0022E2  C03E  F027         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  8266  0022E6  0E00               	movlw	0
  8267  0022E8  6E29               	movwf	(___awdiv@divisor+1)^0,c
  8268  0022EA  0E0A               	movlw	10
  8269  0022EC  6E28               	movwf	___awdiv@divisor^0,c
  8270  0022EE  EC95  F015         	call	___awdiv	;wreg free
  8271  0022F2  C026  F03D         	movff	?___awdiv,dispLCD_num@div
  8272  0022F6  C027  F03E         	movff	?___awdiv+1,dispLCD_num@div+1
  8273  0022FA                     l4840:
  8274                           
  8275                           ;dispLCD4vias.c: 216:     while( div >= 1 )
  8276  0022FA  BE3E               	btfsc	(dispLCD_num@div+1)^0,7,c
  8277  0022FC  EF8A  F011         	goto	u3070
  8278  002300  503E               	movf	(dispLCD_num@div+1)^0,w,c
  8279  002302  E106               	bnz	u3071
  8280  002304  043D               	decf	dispLCD_num@div^0,w,c
  8281  002306  B0D8               	btfsc	status,0,c
  8282  002308  EF88  F011         	goto	u3071
  8283  00230C  EF8A  F011         	goto	u3070
  8284  002310                     u3071:
  8285  002310  EF5B  F011         	goto	l4834
  8286  002314                     u3070:
  8287  002314  EF90  F011         	goto	l4846
  8288  002318                     l4842:
  8289                           
  8290                           ;dispLCD4vias.c: 226:     {;dispLCD4vias.c: 227:         dispLCD_dataReg(' ');
  8291  002318  0E20               	movlw	32
  8292  00231A  EC24  F01A         	call	_dispLCD_dataReg
  8293  00231E                     
  8294                           ;dispLCD4vias.c: 228:         --tam;
  8295  00231E  0634               	decf	dispLCD_num@tam^0,f,c
  8296  002320                     l4846:
  8297                           
  8298                           ;dispLCD4vias.c: 225:     while( tam > (size+sinal) && tam > 1 )
  8299  002320  5034               	movf	dispLCD_num@tam^0,w,c
  8300  002322  6E35               	movwf	??_dispLCD_num^0,c
  8301  002324  6A36               	clrf	(??_dispLCD_num+1)^0,c
  8302  002326  503C               	movf	dispLCD_num@sinal^0,w,c
  8303  002328  C03B  F037         	movff	dispLCD_num@size,??_dispLCD_num+2
  8304  00232C  6A38               	clrf	(??_dispLCD_num+3)^0,c
  8305  00232E  2637               	addwf	(??_dispLCD_num+2)^0,f,c
  8306  002330  0E00               	movlw	0
  8307  002332  2238               	addwfc	(??_dispLCD_num+3)^0,f,c
  8308  002334  5035               	movf	??_dispLCD_num^0,w,c
  8309  002336  5C37               	subwf	(??_dispLCD_num+2)^0,w,c
  8310  002338  5038               	movf	(??_dispLCD_num+3)^0,w,c
  8311  00233A  0A80               	xorlw	128
  8312  00233C  6E39               	movwf	(??_dispLCD_num+4)^0,c
  8313  00233E  5036               	movf	(??_dispLCD_num+1)^0,w,c
  8314  002340  0A80               	xorlw	128
  8315  002342  5839               	subwfb	(??_dispLCD_num+4)^0,w,c
  8316  002344  B0D8               	btfsc	status,0,c
  8317  002346  EFA7  F011         	goto	u3081
  8318  00234A  EFA9  F011         	goto	u3080
  8319  00234E                     u3081:
  8320  00234E  EFB1  F011         	goto	l4850
  8321  002352                     u3080:
  8322  002352  0E02               	movlw	2
  8323  002354  6034               	cpfslt	dispLCD_num@tam^0,c
  8324  002356  EFAF  F011         	goto	u3091
  8325  00235A  EFB1  F011         	goto	u3090
  8326  00235E                     u3091:
  8327  00235E  EF8C  F011         	goto	l4842
  8328  002362                     u3090:
  8329  002362                     l4850:
  8330                           
  8331                           ;dispLCD4vias.c: 231:     if( sinal )
  8332  002362  503C               	movf	dispLCD_num@sinal^0,w,c
  8333  002364  B4D8               	btfsc	status,2,c
  8334  002366  EFB7  F011         	goto	u3101
  8335  00236A  EFB9  F011         	goto	u3100
  8336  00236E                     u3101:
  8337  00236E  EFBC  F011         	goto	l514
  8338  002372                     u3100:
  8339  002372                     
  8340                           ;dispLCD4vias.c: 232:         dispLCD_dataReg('-');
  8341  002372  0E2D               	movlw	45
  8342  002374  EC24  F01A         	call	_dispLCD_dataReg
  8343  002378                     l514:
  8344                           
  8345                           ;dispLCD4vias.c: 235:     {;dispLCD4vias.c: 236:         dispLCD_dataReg( (num / div) + 
      +                          '0' );
  8346  002378  C032  F026         	movff	dispLCD_num@num,___awdiv@dividend
  8347  00237C  C033  F027         	movff	dispLCD_num@num+1,___awdiv@dividend+1
  8348  002380  C03D  F028         	movff	dispLCD_num@div,___awdiv@divisor
  8349  002384  C03E  F029         	movff	dispLCD_num@div+1,___awdiv@divisor+1
  8350  002388  EC95  F015         	call	___awdiv	;wreg free
  8351  00238C  5026               	movf	?___awdiv^0,w,c
  8352  00238E  0F30               	addlw	48
  8353  002390  EC24  F01A         	call	_dispLCD_dataReg
  8354                           
  8355                           ;dispLCD4vias.c: 237:         num = num % div;
  8356  002394  C032  F026         	movff	dispLCD_num@num,___awmod@dividend
  8357  002398  C033  F027         	movff	dispLCD_num@num+1,___awmod@dividend+1
  8358  00239C  C03D  F028         	movff	dispLCD_num@div,___awmod@divisor
  8359  0023A0  C03E  F029         	movff	dispLCD_num@div+1,___awmod@divisor+1
  8360  0023A4  ECF7  F015         	call	___awmod	;wreg free
  8361  0023A8  C026  F032         	movff	?___awmod,dispLCD_num@num
  8362  0023AC  C027  F033         	movff	?___awmod+1,dispLCD_num@num+1
  8363                           
  8364                           ;dispLCD4vias.c: 238:         div/=10;
  8365  0023B0  C03D  F026         	movff	dispLCD_num@div,___awdiv@dividend
  8366  0023B4  C03E  F027         	movff	dispLCD_num@div+1,___awdiv@dividend+1
  8367  0023B8  0E00               	movlw	0
  8368  0023BA  6E29               	movwf	(___awdiv@divisor+1)^0,c
  8369  0023BC  0E0A               	movlw	10
  8370  0023BE  6E28               	movwf	___awdiv@divisor^0,c
  8371  0023C0  EC95  F015         	call	___awdiv	;wreg free
  8372  0023C4  C026  F03D         	movff	?___awdiv,dispLCD_num@div
  8373  0023C8  C027  F03E         	movff	?___awdiv+1,dispLCD_num@div+1
  8374  0023CC                     
  8375                           ;dispLCD4vias.c: 239:     }
  8376  0023CC  BE3E               	btfsc	(dispLCD_num@div+1)^0,7,c
  8377  0023CE  EFF3  F011         	goto	u3110
  8378  0023D2  503E               	movf	(dispLCD_num@div+1)^0,w,c
  8379  0023D4  E106               	bnz	u3111
  8380  0023D6  043D               	decf	dispLCD_num@div^0,w,c
  8381  0023D8  B0D8               	btfsc	status,0,c
  8382  0023DA  EFF1  F011         	goto	u3111
  8383  0023DE  EFF3  F011         	goto	u3110
  8384  0023E2                     u3111:
  8385  0023E2  EFBC  F011         	goto	l514
  8386  0023E6                     u3110:
  8387  0023E6  0012               	return		;funcret
  8388  0023E8                     __end_of_dispLCD_num:
  8389                           	callstack 0
  8390                           
  8391 ;; *************** function _manipula_atuadores_init *****************
  8392 ;; Defined at:
  8393 ;;		line 137 in file "fifo.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  aux             1    wreg     unsigned char 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  aux             1    4[COMRAM] unsigned char 
  8398 ;;  mask            1    5[COMRAM] unsigned char 
  8399 ;;  atuador         1    3[COMRAM] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1    wreg      void 
  8402 ;; Registers used:
  8403 ;;		wreg, status,2, status,0, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8409 ;;      Params:         0       0       0       0       0       0       0       0       0
  8410 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8411 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8412 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8413 ;;Total ram usage:        3 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    3
  8416 ;; This function calls:
  8417 ;;		_alt_atuador
  8418 ;; This function is called by:
  8419 ;;		_main
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           	psect	text22
  8424  0033F8                     __ptext22:
  8425                           	callstack 0
  8426  0033F8                     _manipula_atuadores_init:
  8427                           	callstack 27
  8428                           
  8429                           ;incstack = 0
  8430                           ;manipula_atuadores_init@aux stored from wreg
  8431  0033F8  6E2A               	movwf	manipula_atuadores_init@aux^0,c
  8432  0033FA                     
  8433                           ;fifo.c: 137: void manipula_atuadores_init(char aux);fifo.c: 138: {;fifo.c: 139:     cha
      +                          r mask = 0x08;
  8434  0033FA  0E08               	movlw	8
  8435  0033FC  6E2B               	movwf	manipula_atuadores_init@mask^0,c
  8436                           
  8437                           ;fifo.c: 140:     char atuador = 0x41;
  8438  0033FE  0E41               	movlw	65
  8439  003400  6E29               	movwf	manipula_atuadores_init@atuador^0,c
  8440  003402                     
  8441                           ;fifo.c: 142:     if(aux ==0xFF)
  8442  003402  282A               	incf	manipula_atuadores_init@aux^0,w,c
  8443  003404  A4D8               	btfss	status,2,c
  8444  003406  EF07  F01A         	goto	u3401
  8445  00340A  EF09  F01A         	goto	u3400
  8446  00340E                     u3401:
  8447  00340E  EF1B  F01A         	goto	l5198
  8448  003412                     u3400:
  8449  003412  EF23  F01A         	goto	l687
  8450  003416                     l5190:
  8451                           
  8452                           ;fifo.c: 148:         {;fifo.c: 150:             if(aux & mask)
  8453  003416  502A               	movf	manipula_atuadores_init@aux^0,w,c
  8454  003418  142B               	andwf	manipula_atuadores_init@mask^0,w,c
  8455  00341A  0900               	iorlw	0
  8456  00341C  B4D8               	btfsc	status,2,c
  8457  00341E  EF13  F01A         	goto	u3411
  8458  003422  EF15  F01A         	goto	u3410
  8459  003426                     u3411:
  8460  003426  EF18  F01A         	goto	l5194
  8461  00342A                     u3410:
  8462  00342A                     
  8463                           ;fifo.c: 151:             {;fifo.c: 152:                 alt_atuador(atuador);
  8464  00342A  5029               	movf	manipula_atuadores_init@atuador^0,w,c
  8465  00342C  EC45  F017         	call	_alt_atuador
  8466  003430                     l5194:
  8467                           
  8468                           ;fifo.c: 154:             atuador++;
  8469  003430  2A29               	incf	manipula_atuadores_init@atuador^0,f,c
  8470  003432                     
  8471                           ;fifo.c: 155:             mask >>= 1;
  8472  003432  90D8               	bcf	status,0,c
  8473  003434  322B               	rrcf	manipula_atuadores_init@mask^0,f,c
  8474  003436                     l5198:
  8475                           
  8476                           ;fifo.c: 147:         while(mask)
  8477  003436  502B               	movf	manipula_atuadores_init@mask^0,w,c
  8478  003438  A4D8               	btfss	status,2,c
  8479  00343A  EF21  F01A         	goto	u3421
  8480  00343E  EF23  F01A         	goto	u3420
  8481  003442                     u3421:
  8482  003442  EF0B  F01A         	goto	l5190
  8483  003446                     u3420:
  8484  003446                     l687:
  8485  003446  0012               	return		;funcret
  8486  003448                     __end_of_manipula_atuadores_init:
  8487                           	callstack 0
  8488                           
  8489 ;; *************** function _ler_sensor *****************
  8490 ;; Defined at:
  8491 ;;		line 68 in file "atuadores.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  passo           1    wreg     unsigned char 
  8494 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8495 ;;		 -> main@vetorIn(1), 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  passo           1    4[COMRAM] unsigned char 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      unsigned char 
  8500 ;; Registers used:
  8501 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8507 ;;      Params:         2       0       0       0       0       0       0       0       0
  8508 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8509 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8510 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8511 ;;Total ram usage:        5 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    2
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_main
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text23
  8522  002878                     __ptext23:
  8523                           	callstack 0
  8524  002878                     _ler_sensor:
  8525                           	callstack 28
  8526                           
  8527                           ;incstack = 0
  8528                           ;ler_sensor@passo stored from wreg
  8529  002878  6E2A               	movwf	ler_sensor@passo^0,c
  8530  00287A                     
  8531                           ;atuadores.c: 68: char ler_sensor(char passo, char* ptr);atuadores.c: 69: {;atuadores.c:
      +                           70:     switch (passo)
  8532  00287A  EF82  F014         	goto	l5628
  8533  00287E                     l5572:
  8534  00287E  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8535  002882  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8536  002886  50DF               	movf	indf2,w,c
  8537  002888  0B02               	andlw	2
  8538  00288A  EFAF  F014         	goto	l440
  8539  00288E                     l5578:
  8540  00288E  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8541  002892  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8542  002896  50DF               	movf	indf2,w,c
  8543  002898  0B01               	andlw	1
  8544  00289A  EFAF  F014         	goto	l440
  8545  00289E                     l5584:
  8546  00289E  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8547  0028A2  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8548  0028A6  50DF               	movf	indf2,w,c
  8549  0028A8  0B08               	andlw	8
  8550  0028AA  EFAF  F014         	goto	l440
  8551  0028AE                     l5590:
  8552  0028AE  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8553  0028B2  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8554  0028B6  50DF               	movf	indf2,w,c
  8555  0028B8  0B04               	andlw	4
  8556  0028BA  EFAF  F014         	goto	l440
  8557  0028BE                     l5596:
  8558  0028BE  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8559  0028C2  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8560  0028C6  50DF               	movf	indf2,w,c
  8561  0028C8  0B20               	andlw	32
  8562  0028CA  EFAF  F014         	goto	l440
  8563  0028CE                     l5602:
  8564  0028CE  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8565  0028D2  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8566  0028D6  50DF               	movf	indf2,w,c
  8567  0028D8  0B10               	andlw	16
  8568  0028DA  EFAF  F014         	goto	l440
  8569  0028DE                     l5608:
  8570  0028DE  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8571  0028E2  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8572  0028E6  50DF               	movf	indf2,w,c
  8573  0028E8  0B80               	andlw	128
  8574  0028EA  EFAF  F014         	goto	l440
  8575  0028EE                     l5614:
  8576  0028EE  C026  FFD9         	movff	ler_sensor@ptr,fsr2l
  8577  0028F2  C027  FFDA         	movff	ler_sensor@ptr+1,fsr2h
  8578  0028F6  50DF               	movf	indf2,w,c
  8579  0028F8  0B40               	andlw	64
  8580  0028FA  EFAF  F014         	goto	l440
  8581  0028FE                     l5620:
  8582  0028FE  0E00               	movlw	0
  8583  002900  EFAF  F014         	goto	l440
  8584  002904                     l5628:
  8585  002904  502A               	movf	ler_sensor@passo^0,w,c
  8586  002906  6E28               	movwf	??_ler_sensor^0,c
  8587  002908  6A29               	clrf	(??_ler_sensor+1)^0,c
  8588                           
  8589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8590                           ; Switch size 1, requested type "simple"
  8591                           ; Number of cases is 1, Range of values is 0 to 0
  8592                           ; switch strategies available:
  8593                           ; Name         Instructions Cycles
  8594                           ; simple_byte            4     3 (average)
  8595                           ;	Chosen strategy is simple_byte
  8596  00290A  5029               	movf	(??_ler_sensor+1)^0,w,c
  8597  00290C  0A00               	xorlw	0	; case 0
  8598  00290E  B4D8               	btfsc	status,2,c
  8599  002910  EF8C  F014         	goto	l7356
  8600  002914  EF7F  F014         	goto	l5620
  8601  002918                     l7356:
  8602                           
  8603                           ; Switch size 1, requested type "simple"
  8604                           ; Number of cases is 8, Range of values is 65 to 100
  8605                           ; switch strategies available:
  8606                           ; Name         Instructions Cycles
  8607                           ; simple_byte           25    13 (average)
  8608                           ;	Chosen strategy is simple_byte
  8609  002918  5028               	movf	??_ler_sensor^0,w,c
  8610  00291A  0A41               	xorlw	65	; case 65
  8611  00291C  B4D8               	btfsc	status,2,c
  8612  00291E  EF3F  F014         	goto	l5572
  8613  002922  0A03               	xorlw	3	; case 66
  8614  002924  B4D8               	btfsc	status,2,c
  8615  002926  EF4F  F014         	goto	l5584
  8616  00292A  0A01               	xorlw	1	; case 67
  8617  00292C  B4D8               	btfsc	status,2,c
  8618  00292E  EF5F  F014         	goto	l5596
  8619  002932  0A07               	xorlw	7	; case 68
  8620  002934  B4D8               	btfsc	status,2,c
  8621  002936  EF6F  F014         	goto	l5608
  8622  00293A  0A25               	xorlw	37	; case 97
  8623  00293C  B4D8               	btfsc	status,2,c
  8624  00293E  EF47  F014         	goto	l5578
  8625  002942  0A03               	xorlw	3	; case 98
  8626  002944  B4D8               	btfsc	status,2,c
  8627  002946  EF57  F014         	goto	l5590
  8628  00294A  0A01               	xorlw	1	; case 99
  8629  00294C  B4D8               	btfsc	status,2,c
  8630  00294E  EF67  F014         	goto	l5602
  8631  002952  0A07               	xorlw	7	; case 100
  8632  002954  B4D8               	btfsc	status,2,c
  8633  002956  EF77  F014         	goto	l5614
  8634  00295A  EF7F  F014         	goto	l5620
  8635  00295E                     l440:
  8636  00295E  0012               	return		;funcret
  8637  002960                     __end_of_ler_sensor:
  8638                           	callstack 0
  8639                           
  8640 ;; *************** function _init_atuadores *****************
  8641 ;; Defined at:
  8642 ;;		line 103 in file "fifo.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;		None
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;		None
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  1    wreg      void 
  8649 ;; Registers used:
  8650 ;;		None
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8656 ;;      Params:         0       0       0       0       0       0       0       0       0
  8657 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8658 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8659 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8660 ;;Total ram usage:        0 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    2
  8663 ;; This function calls:
  8664 ;;		Nothing
  8665 ;; This function is called by:
  8666 ;;		_main
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text24
  8671  003AE2                     __ptext24:
  8672                           	callstack 0
  8673  003AE2                     _init_atuadores:
  8674                           	callstack 28
  8675  003AE2                     
  8676                           ;fifo.c: 105:     atuador.A = 0;
  8677  003AE2  9013               	bcf	_atuador^0,0,c
  8678                           
  8679                           ;fifo.c: 106:     atuador.B = 0;
  8680  003AE4  9213               	bcf	_atuador^0,1,c
  8681                           
  8682                           ;fifo.c: 107:     atuador.C = 0;
  8683  003AE6  9413               	bcf	_atuador^0,2,c
  8684                           
  8685                           ;fifo.c: 108:     atuador.D = 0;
  8686  003AE8  9613               	bcf	_atuador^0,3,c
  8687  003AEA  0012               	return		;funcret
  8688  003AEC                     __end_of_init_atuadores:
  8689                           	callstack 0
  8690                           
  8691 ;; *************** function _initSerialIO *****************
  8692 ;; Defined at:
  8693 ;;		line 89 in file "serialIO.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  ptrIn           2    0[COMRAM] PTR unsigned char 
  8696 ;;		 -> main@vetorIn(1), 
  8697 ;;  ptrOut          2    2[COMRAM] PTR unsigned char 
  8698 ;;		 -> main@vetorOut(1), 
  8699 ;;  length          1    4[COMRAM] unsigned char 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8711 ;;      Params:         5       0       0       0       0       0       0       0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8714 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8715 ;;Total ram usage:        5 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    2
  8718 ;; This function calls:
  8719 ;;		Nothing
  8720 ;; This function is called by:
  8721 ;;		_main
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           	psect	text25
  8726  0037C4                     __ptext25:
  8727                           	callstack 0
  8728  0037C4                     _initSerialIO:
  8729                           	callstack 28
  8730  0037C4                     
  8731                           ;serialIO.c: 89: void initSerialIO( char * ptrIn, char * ptrOut, unsigned char length );
      +                          serialIO.c: 90: {;serialIO.c: 91:     ADCON1 = 0xFF;
  8732  0037C4  68C1               	setf	193,c	;volatile
  8733  0037C6                     
  8734                           ;serialIO.c: 93:     ptrSerialIn = ptrIn;
  8735  0037C6  C026  F00B         	movff	initSerialIO@ptrIn,_ptrSerialIn
  8736  0037CA  C027  F00C         	movff	initSerialIO@ptrIn+1,_ptrSerialIn+1
  8737                           
  8738                           ;serialIO.c: 94:     ptrSerialOut = ptrOut;
  8739  0037CE  C028  F009         	movff	initSerialIO@ptrOut,_ptrSerialOut
  8740  0037D2  C029  F00A         	movff	initSerialIO@ptrOut+1,_ptrSerialOut+1
  8741  0037D6                     
  8742                           ;serialIO.c: 95:     lenSerialIO = length;
  8743  0037D6  C02A  F012         	movff	initSerialIO@length,_lenSerialIO
  8744  0037DA                     
  8745                           ;serialIO.c: 97:     PORTAbits.RA3 = 0;
  8746  0037DA  9680               	bcf	128,3,c	;volatile
  8747  0037DC                     
  8748                           ;serialIO.c: 99:     TRISAbits.TRISA3 = 0;
  8749  0037DC  9692               	bcf	146,3,c	;volatile
  8750  0037DE                     
  8751                           ;serialIO.c: 102:     PORTAbits.RA2 = 0;
  8752  0037DE  9480               	bcf	128,2,c	;volatile
  8753  0037E0                     
  8754                           ;serialIO.c: 104:     TRISAbits.TRISA2 = 0;
  8755  0037E0  9492               	bcf	146,2,c	;volatile
  8756  0037E2                     
  8757                           ;serialIO.c: 107:     PORTAbits.RA0 = 0;
  8758  0037E2  9080               	bcf	128,0,c	;volatile
  8759  0037E4                     
  8760                           ;serialIO.c: 109:     TRISAbits.TRISA0 = 0;
  8761  0037E4  9092               	bcf	146,0,c	;volatile
  8762  0037E6                     
  8763                           ;serialIO.c: 112:     PORTAbits.RA1 = 0;
  8764  0037E6  9280               	bcf	128,1,c	;volatile
  8765  0037E8                     
  8766                           ;serialIO.c: 114:     TRISAbits.TRISA1 = 1;
  8767  0037E8  8292               	bsf	146,1,c	;volatile
  8768  0037EA                     
  8769                           ;serialIO.c: 117:     SERIALIO.CLK = 0;
  8770  0037EA  9480               	bcf	128,2,c	;volatile
  8771  0037EC                     
  8772                           ;serialIO.c: 118:     SERIALIO.OUT = 0;
  8773  0037EC  9080               	bcf	128,0,c	;volatile
  8774  0037EE                     
  8775                           ;serialIO.c: 119:     SERIALIO.SHLD = 1;
  8776  0037EE  8680               	bsf	128,3,c	;volatile
  8777  0037F0  0012               	return		;funcret
  8778  0037F2                     __end_of_initSerialIO:
  8779                           	callstack 0
  8780                           
  8781 ;; *************** function _getContCiclos *****************
  8782 ;; Defined at:
  8783 ;;		line 49 in file "fifo.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;		None
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;		None
  8788 ;; Return value:  Size  Location     Type
  8789 ;;                  2    0[COMRAM] unsigned int 
  8790 ;; Registers used:
  8791 ;;		None
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8797 ;;      Params:         2       0       0       0       0       0       0       0       0
  8798 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8800 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8801 ;;Total ram usage:        2 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    2
  8804 ;; This function calls:
  8805 ;;		Nothing
  8806 ;; This function is called by:
  8807 ;;		_main
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text26
  8812  003AEC                     __ptext26:
  8813                           	callstack 0
  8814  003AEC                     _getContCiclos:
  8815                           	callstack 28
  8816  003AEC                     
  8817                           ;fifo.c: 51:     return(cont_ciclos);
  8818  003AEC  C00D  F026         	movff	_cont_ciclos,?_getContCiclos
  8819  003AF0  C00E  F027         	movff	_cont_ciclos+1,?_getContCiclos+1
  8820  003AF4  0012               	return		;funcret
  8821  003AF6                     __end_of_getContCiclos:
  8822                           	callstack 0
  8823                           
  8824 ;; *************** function _getCiclos *****************
  8825 ;; Defined at:
  8826 ;;		line 41 in file "fifo.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;		None
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;  aux             2    2[COMRAM] int 
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  2    0[COMRAM] unsigned int 
  8833 ;; Registers used:
  8834 ;;		wreg, status,2, status,0
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8840 ;;      Params:         2       0       0       0       0       0       0       0       0
  8841 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8843 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8844 ;;Total ram usage:        4 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    2
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		_main
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text27
  8855  003986                     __ptext27:
  8856                           	callstack 0
  8857  003986                     _getCiclos:
  8858                           	callstack 28
  8859  003986                     
  8860                           ;fifo.c: 43:     int aux = fila[1];
  8861  003986  C015  F028         	movff	_fila+1,getCiclos@aux
  8862  00398A  6A29               	clrf	(getCiclos@aux+1)^0,c
  8863  00398C                     
  8864                           ;fifo.c: 44:     aux <<= 8;
  8865  00398C  5028               	movf	getCiclos@aux^0,w,c
  8866  00398E  6E29               	movwf	(getCiclos@aux+1)^0,c
  8867  003990  6A28               	clrf	getCiclos@aux^0,c
  8868  003992                     
  8869                           ;fifo.c: 45:     aux +=fila[0];
  8870  003992  5014               	movf	_fila^0,w,c
  8871  003994  2628               	addwf	getCiclos@aux^0,f,c
  8872  003996  0E00               	movlw	0
  8873  003998  2229               	addwfc	(getCiclos@aux+1)^0,f,c
  8874  00399A                     
  8875                           ;fifo.c: 46:     return(aux);
  8876  00399A  C028  F026         	movff	getCiclos@aux,?_getCiclos
  8877  00399E  C029  F027         	movff	getCiclos@aux+1,?_getCiclos+1
  8878  0039A2  0012               	return		;funcret
  8879  0039A4                     __end_of_getCiclos:
  8880                           	callstack 0
  8881                           
  8882 ;; *************** function _formatar_receitas *****************
  8883 ;; Defined at:
  8884 ;;		line 100 in file "eeprom.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;		None
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  i               1    2[COMRAM] unsigned char 
  8889 ;; Return value:  Size  Location     Type
  8890 ;;                  1    wreg      void 
  8891 ;; Registers used:
  8892 ;;		wreg, status,2, status,0, cstack
  8893 ;; Tracked objects:
  8894 ;;		On entry : 0/0
  8895 ;;		On exit  : 0/0
  8896 ;;		Unchanged: 0/0
  8897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8898 ;;      Params:         0       0       0       0       0       0       0       0       0
  8899 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8901 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8902 ;;Total ram usage:        1 bytes
  8903 ;; Hardware stack levels used:    1
  8904 ;; Hardware stack levels required when called:    3
  8905 ;; This function calls:
  8906 ;;		_EEPROM_write
  8907 ;; This function is called by:
  8908 ;;		_main
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           	psect	text28
  8913  0039BE                     __ptext28:
  8914                           	callstack 0
  8915  0039BE                     _formatar_receitas:
  8916                           	callstack 27
  8917  0039BE                     
  8918                           ;eeprom.c: 102:     for( char i = 0;i<256;i++)
  8919  0039BE  0E00               	movlw	0
  8920  0039C0  6E28               	movwf	formatar_receitas@i^0,c
  8921  0039C2                     l5710:
  8922                           
  8923                           ;eeprom.c: 103:            EEPROM_write(i,0);
  8924  0039C2  0E00               	movlw	0
  8925  0039C4  6E26               	movwf	EEPROM_write@data^0,c
  8926  0039C6  5028               	movf	formatar_receitas@i^0,w,c
  8927  0039C8  EC10  F01C         	call	_EEPROM_write
  8928  0039CC  2A28               	incf	formatar_receitas@i^0,f,c
  8929  0039CE  EFE1  F01C         	goto	l5710
  8930  0039D2  0012               	return		;funcret
  8931  0039D4                     __end_of_formatar_receitas:
  8932                           	callstack 0
  8933                           
  8934 ;; *************** function _fifo_tam *****************
  8935 ;; Defined at:
  8936 ;;		line 317 in file "fifo.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      unsigned char 
  8943 ;; Registers used:
  8944 ;;		wreg
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8950 ;;      Params:         0       0       0       0       0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8953 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8954 ;;Total ram usage:        0 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    2
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		_main
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           	psect	text29
  8965  003B28                     __ptext29:
  8966                           	callstack 0
  8967  003B28                     _fifo_tam:
  8968                           	callstack 28
  8969  003B28                     
  8970                           ;fifo.c: 319:     return( 18 );
  8971  003B28  0E12               	movlw	18
  8972  003B2A  0012               	return		;funcret
  8973  003B2C                     __end_of_fifo_tam:
  8974                           	callstack 0
  8975                           
  8976 ;; *************** function _fifo_print *****************
  8977 ;; Defined at:
  8978 ;;		line 342 in file "fifo.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  comando         1   16[COMRAM] unsigned char 
  8983 ;;  atraso          1   15[COMRAM] unsigned char 
  8984 ;;  i               1   14[COMRAM] unsigned char 
  8985 ;;  indPrint        1   13[COMRAM] unsigned char 
  8986 ;;  completar       1   12[COMRAM] unsigned char 
  8987 ;; Return value:  Size  Location     Type
  8988 ;;                  1    wreg      void 
  8989 ;; Registers used:
  8990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0
  8997 ;;      Locals:         7       0       0       0       0       0       0       0       0
  8998 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8999 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9000 ;;Total ram usage:        9 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    4
  9003 ;; This function calls:
  9004 ;;		___awdiv
  9005 ;;		___awmod
  9006 ;;		_decodifica
  9007 ;;		_dispLCD_dataReg
  9008 ;;		_dispLCD_lincol
  9009 ;; This function is called by:
  9010 ;;		_main
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           	psect	text30
  9015  001E00                     __ptext30:
  9016                           	callstack 0
  9017  001E00                     _fifo_print:
  9018                           	callstack 26
  9019  001E00                     
  9020                           ;fifo.c: 344:     char completar = 0;
  9021  001E00  0E00               	movlw	0
  9022  001E02  6E32               	movwf	fifo_print@completar^0,c
  9023                           
  9024                           ;fifo.c: 346:     char atraso = 0;
  9025  001E04  0E00               	movlw	0
  9026  001E06  6E35               	movwf	fifo_print@atraso^0,c
  9027                           
  9028                           ;fifo.c: 347:     char i = 0;
  9029  001E08  0E00               	movlw	0
  9030  001E0A  6E34               	movwf	fifo_print@i^0,c
  9031  001E0C                     
  9032                           ;fifo.c: 348:     char indPrint = ind_print;
  9033  001E0C  C057  F033         	movff	_ind_print,fifo_print@indPrint
  9034  001E10                     
  9035                           ;fifo.c: 350:     dispLCD_lincol(0, 0);
  9036  001E10  0E00               	movlw	0
  9037  001E12  6E28               	movwf	dispLCD_lincol@col^0,c
  9038  001E14  0E00               	movlw	0
  9039  001E16  EC8C  F018         	call	_dispLCD_lincol
  9040  001E1A                     l5246:
  9041                           
  9042                           ;fifo.c: 352:     {;fifo.c: 353:         if( completar )
  9043  001E1A  5032               	movf	fifo_print@completar^0,w,c
  9044  001E1C  B4D8               	btfsc	status,2,c
  9045  001E1E  EF13  F00F         	goto	u3481
  9046  001E22  EF15  F00F         	goto	u3480
  9047  001E26                     u3481:
  9048  001E26  EF1B  F00F         	goto	l5252
  9049  001E2A                     u3480:
  9050  001E2A                     
  9051                           ;fifo.c: 354:         {;fifo.c: 355:             dispLCD_dataReg(' ');
  9052  001E2A  0E20               	movlw	32
  9053  001E2C  EC24  F01A         	call	_dispLCD_dataReg
  9054  001E30                     l5250:
  9055                           
  9056                           ;fifo.c: 356:             ++i;
  9057  001E30  2A34               	incf	fifo_print@i^0,f,c
  9058                           
  9059                           ;fifo.c: 357:         }
  9060  001E32  EF69  F010         	goto	l5366
  9061  001E36                     l5252:
  9062                           
  9063                           ;fifo.c: 359:         {;fifo.c: 360:             comando = fila[indPrint++];
  9064  001E36  0E14               	movlw	low _fila
  9065  001E38  2433               	addwf	fifo_print@indPrint^0,w,c
  9066  001E3A  6ED9               	movwf	fsr2l,c
  9067  001E3C  6ADA               	clrf	fsr2h,c
  9068  001E3E  0E00               	movlw	high _fila
  9069  001E40  22DA               	addwfc	fsr2h,f,c
  9070  001E42  50DF               	movf	indf2,w,c
  9071  001E44  6E36               	movwf	fifo_print@comando^0,c
  9072  001E46  2A33               	incf	fifo_print@indPrint^0,f,c
  9073  001E48                     
  9074                           ;fifo.c: 362:             if( comando == 0 )
  9075  001E48  5036               	movf	fifo_print@comando^0,w,c
  9076  001E4A  A4D8               	btfss	status,2,c
  9077  001E4C  EF2A  F00F         	goto	u3491
  9078  001E50  EF2C  F00F         	goto	u3490
  9079  001E54                     u3491:
  9080  001E54  EF30  F00F         	goto	l5260
  9081  001E58                     u3490:
  9082  001E58                     
  9083                           ;fifo.c: 363:                 completar = 1;
  9084  001E58  0E01               	movlw	1
  9085  001E5A  6E32               	movwf	fifo_print@completar^0,c
  9086  001E5C  EF69  F010         	goto	l5366
  9087  001E60                     l5260:
  9088  001E60  0E65               	movlw	101
  9089  001E62  6036               	cpfslt	fifo_print@comando^0,c
  9090  001E64  EF36  F00F         	goto	u3501
  9091  001E68  EF38  F00F         	goto	u3500
  9092  001E6C                     u3501:
  9093  001E6C  EF88  F00F         	goto	l5292
  9094  001E70                     u3500:
  9095  001E70                     
  9096                           ;fifo.c: 365:             {;fifo.c: 366:                 atraso = comando;
  9097  001E70  C036  F035         	movff	fifo_print@comando,fifo_print@atraso
  9098  001E74                     
  9099                           ;fifo.c: 367:                 if( atraso >= 100 )
  9100  001E74  0E63               	movlw	99
  9101  001E76  6435               	cpfsgt	fifo_print@atraso^0,c
  9102  001E78  EF40  F00F         	goto	u3511
  9103  001E7C  EF42  F00F         	goto	u3510
  9104  001E80                     u3511:
  9105  001E80  EF5D  F00F         	goto	l5278
  9106  001E84                     u3510:
  9107  001E84                     
  9108                           ;fifo.c: 368:                 {;fifo.c: 369:                     dispLCD_dataReg('1');
  9109  001E84  0E31               	movlw	49
  9110  001E86  EC24  F01A         	call	_dispLCD_dataReg
  9111  001E8A                     
  9112                           ;fifo.c: 370:                     ++i;
  9113  001E8A  2A34               	incf	fifo_print@i^0,f,c
  9114  001E8C                     
  9115                           ;fifo.c: 371:                     atraso %= 100;
  9116  001E8C  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  9117  001E90  6A27               	clrf	(___awmod@dividend+1)^0,c
  9118  001E92  0E00               	movlw	0
  9119  001E94  6E29               	movwf	(___awmod@divisor+1)^0,c
  9120  001E96  0E64               	movlw	100
  9121  001E98  6E28               	movwf	___awmod@divisor^0,c
  9122  001E9A  ECF7  F015         	call	___awmod	;wreg free
  9123  001E9E  5026               	movf	?___awmod^0,w,c
  9124  001EA0  6E35               	movwf	fifo_print@atraso^0,c
  9125  001EA2                     
  9126                           ;fifo.c: 372:                     if(atraso < 10)
  9127  001EA2  0E0A               	movlw	10
  9128  001EA4  6035               	cpfslt	fifo_print@atraso^0,c
  9129  001EA6  EF57  F00F         	goto	u3521
  9130  001EAA  EF59  F00F         	goto	u3520
  9131  001EAE                     u3521:
  9132  001EAE  EF5D  F00F         	goto	l5278
  9133  001EB2                     u3520:
  9134  001EB2                     
  9135                           ;fifo.c: 373:                     {;fifo.c: 374:                         dispLCD_dataReg
      +                          ('0');
  9136  001EB2  0E30               	movlw	48
  9137  001EB4  EC24  F01A         	call	_dispLCD_dataReg
  9138  001EB8                     
  9139                           ;fifo.c: 375:                         ++i;
  9140  001EB8  2A34               	incf	fifo_print@i^0,f,c
  9141  001EBA                     l5278:
  9142                           
  9143                           ;fifo.c: 378:                 if( atraso >= 10 )
  9144  001EBA  0E09               	movlw	9
  9145  001EBC  6435               	cpfsgt	fifo_print@atraso^0,c
  9146  001EBE  EF63  F00F         	goto	u3531
  9147  001EC2  EF65  F00F         	goto	u3530
  9148  001EC6                     u3531:
  9149  001EC6  EF7E  F00F         	goto	l5286
  9150  001ECA                     u3530:
  9151  001ECA                     
  9152                           ;fifo.c: 379:                 {;fifo.c: 380:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  9153  001ECA  C035  F026         	movff	fifo_print@atraso,___awdiv@dividend
  9154  001ECE  6A27               	clrf	(___awdiv@dividend+1)^0,c
  9155  001ED0  0E00               	movlw	0
  9156  001ED2  6E29               	movwf	(___awdiv@divisor+1)^0,c
  9157  001ED4  0E0A               	movlw	10
  9158  001ED6  6E28               	movwf	___awdiv@divisor^0,c
  9159  001ED8  EC95  F015         	call	___awdiv	;wreg free
  9160  001EDC  5026               	movf	?___awdiv^0,w,c
  9161  001EDE  0F30               	addlw	48
  9162  001EE0  EC24  F01A         	call	_dispLCD_dataReg
  9163  001EE4                     
  9164                           ;fifo.c: 381:                     ++i;
  9165  001EE4  2A34               	incf	fifo_print@i^0,f,c
  9166  001EE6                     
  9167                           ;fifo.c: 382:                     atraso %= 10;
  9168  001EE6  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  9169  001EEA  6A27               	clrf	(___awmod@dividend+1)^0,c
  9170  001EEC  0E00               	movlw	0
  9171  001EEE  6E29               	movwf	(___awmod@divisor+1)^0,c
  9172  001EF0  0E0A               	movlw	10
  9173  001EF2  6E28               	movwf	___awmod@divisor^0,c
  9174  001EF4  ECF7  F015         	call	___awmod	;wreg free
  9175  001EF8  5026               	movf	?___awmod^0,w,c
  9176  001EFA  6E35               	movwf	fifo_print@atraso^0,c
  9177  001EFC                     l5286:
  9178                           
  9179                           ;fifo.c: 385:                 dispLCD_dataReg(atraso + '0');
  9180  001EFC  5035               	movf	fifo_print@atraso^0,w,c
  9181  001EFE  0F30               	addlw	48
  9182  001F00  EC24  F01A         	call	_dispLCD_dataReg
  9183  001F04                     
  9184                           ;fifo.c: 386:                 ++i;
  9185  001F04  2A34               	incf	fifo_print@i^0,f,c
  9186                           
  9187                           ;fifo.c: 388:                 dispLCD_dataReg('%');
  9188  001F06  0E25               	movlw	37
  9189  001F08  EC24  F01A         	call	_dispLCD_dataReg
  9190  001F0C  EF18  F00F         	goto	l5250
  9191  001F10                     l5292:
  9192  001F10  0E64               	movlw	100
  9193  001F12  6436               	cpfsgt	fifo_print@comando^0,c
  9194  001F14  EF8E  F00F         	goto	u3541
  9195  001F18  EF90  F00F         	goto	u3540
  9196  001F1C                     u3541:
  9197  001F1C  EFEE  F00F         	goto	l5328
  9198  001F20                     u3540:
  9199  001F20  0EDD               	movlw	221
  9200  001F22  6036               	cpfslt	fifo_print@comando^0,c
  9201  001F24  EF96  F00F         	goto	u3551
  9202  001F28  EF98  F00F         	goto	u3550
  9203  001F2C                     u3551:
  9204  001F2C  EFEE  F00F         	goto	l5328
  9205  001F30                     u3550:
  9206  001F30                     
  9207                           ;fifo.c: 393:             {;fifo.c: 394:                 decodifica(&comando);
  9208  001F30  0E36               	movlw	low fifo_print@comando
  9209  001F32  6E26               	movwf	decodifica@d^0,c
  9210  001F34  0E00               	movlw	high fifo_print@comando
  9211  001F36  6E27               	movwf	(decodifica@d+1)^0,c
  9212  001F38  EC9E  F012         	call	_decodifica	;wreg free
  9213  001F3C                     
  9214                           ;fifo.c: 395:                 atraso = comando;
  9215  001F3C  C036  F035         	movff	fifo_print@comando,fifo_print@atraso
  9216  001F40                     
  9217                           ;fifo.c: 397:                 if( atraso >= 100 )
  9218  001F40  0E63               	movlw	99
  9219  001F42  6435               	cpfsgt	fifo_print@atraso^0,c
  9220  001F44  EFA6  F00F         	goto	u3561
  9221  001F48  EFA8  F00F         	goto	u3560
  9222  001F4C                     u3561:
  9223  001F4C  EFC3  F00F         	goto	l5314
  9224  001F50                     u3560:
  9225  001F50                     
  9226                           ;fifo.c: 398:                 {;fifo.c: 399:                     dispLCD_dataReg('1');
  9227  001F50  0E31               	movlw	49
  9228  001F52  EC24  F01A         	call	_dispLCD_dataReg
  9229  001F56                     
  9230                           ;fifo.c: 400:                     ++i;
  9231  001F56  2A34               	incf	fifo_print@i^0,f,c
  9232  001F58                     
  9233                           ;fifo.c: 401:                     atraso %= 100;
  9234  001F58  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  9235  001F5C  6A27               	clrf	(___awmod@dividend+1)^0,c
  9236  001F5E  0E00               	movlw	0
  9237  001F60  6E29               	movwf	(___awmod@divisor+1)^0,c
  9238  001F62  0E64               	movlw	100
  9239  001F64  6E28               	movwf	___awmod@divisor^0,c
  9240  001F66  ECF7  F015         	call	___awmod	;wreg free
  9241  001F6A  5026               	movf	?___awmod^0,w,c
  9242  001F6C  6E35               	movwf	fifo_print@atraso^0,c
  9243  001F6E                     
  9244                           ;fifo.c: 402:                     if(atraso < 10)
  9245  001F6E  0E0A               	movlw	10
  9246  001F70  6035               	cpfslt	fifo_print@atraso^0,c
  9247  001F72  EFBD  F00F         	goto	u3571
  9248  001F76  EFBF  F00F         	goto	u3570
  9249  001F7A                     u3571:
  9250  001F7A  EFC3  F00F         	goto	l5314
  9251  001F7E                     u3570:
  9252  001F7E                     
  9253                           ;fifo.c: 403:                     {;fifo.c: 404:                         dispLCD_dataReg
      +                          ('0');
  9254  001F7E  0E30               	movlw	48
  9255  001F80  EC24  F01A         	call	_dispLCD_dataReg
  9256  001F84                     
  9257                           ;fifo.c: 405:                         ++i;
  9258  001F84  2A34               	incf	fifo_print@i^0,f,c
  9259  001F86                     l5314:
  9260                           
  9261                           ;fifo.c: 408:                 if( atraso >= 10 )
  9262  001F86  0E09               	movlw	9
  9263  001F88  6435               	cpfsgt	fifo_print@atraso^0,c
  9264  001F8A  EFC9  F00F         	goto	u3581
  9265  001F8E  EFCB  F00F         	goto	u3580
  9266  001F92                     u3581:
  9267  001F92  EFE4  F00F         	goto	l5322
  9268  001F96                     u3580:
  9269  001F96                     
  9270                           ;fifo.c: 409:                 {;fifo.c: 410:                     dispLCD_dataReg(atraso/
      +                          10 + '0');
  9271  001F96  C035  F026         	movff	fifo_print@atraso,___awdiv@dividend
  9272  001F9A  6A27               	clrf	(___awdiv@dividend+1)^0,c
  9273  001F9C  0E00               	movlw	0
  9274  001F9E  6E29               	movwf	(___awdiv@divisor+1)^0,c
  9275  001FA0  0E0A               	movlw	10
  9276  001FA2  6E28               	movwf	___awdiv@divisor^0,c
  9277  001FA4  EC95  F015         	call	___awdiv	;wreg free
  9278  001FA8  5026               	movf	?___awdiv^0,w,c
  9279  001FAA  0F30               	addlw	48
  9280  001FAC  EC24  F01A         	call	_dispLCD_dataReg
  9281  001FB0                     
  9282                           ;fifo.c: 411:                     ++i;
  9283  001FB0  2A34               	incf	fifo_print@i^0,f,c
  9284  001FB2                     
  9285                           ;fifo.c: 412:                     atraso %= 10;
  9286  001FB2  C035  F026         	movff	fifo_print@atraso,___awmod@dividend
  9287  001FB6  6A27               	clrf	(___awmod@dividend+1)^0,c
  9288  001FB8  0E00               	movlw	0
  9289  001FBA  6E29               	movwf	(___awmod@divisor+1)^0,c
  9290  001FBC  0E0A               	movlw	10
  9291  001FBE  6E28               	movwf	___awmod@divisor^0,c
  9292  001FC0  ECF7  F015         	call	___awmod	;wreg free
  9293  001FC4  5026               	movf	?___awmod^0,w,c
  9294  001FC6  6E35               	movwf	fifo_print@atraso^0,c
  9295  001FC8                     l5322:
  9296                           
  9297                           ;fifo.c: 415:                 dispLCD_dataReg(atraso + '0');
  9298  001FC8  5035               	movf	fifo_print@atraso^0,w,c
  9299  001FCA  0F30               	addlw	48
  9300  001FCC  EC24  F01A         	call	_dispLCD_dataReg
  9301  001FD0                     
  9302                           ;fifo.c: 416:                 ++i;
  9303  001FD0  2A34               	incf	fifo_print@i^0,f,c
  9304                           
  9305                           ;fifo.c: 418:                 dispLCD_dataReg('s');
  9306  001FD2  0E73               	movlw	115
  9307  001FD4  EC24  F01A         	call	_dispLCD_dataReg
  9308  001FD8  EF18  F00F         	goto	l5250
  9309  001FDC                     l5328:
  9310  001FDC  0EDC               	movlw	220
  9311  001FDE  6436               	cpfsgt	fifo_print@comando^0,c
  9312  001FE0  EFF4  F00F         	goto	u3591
  9313  001FE4  EFF6  F00F         	goto	u3590
  9314  001FE8                     u3591:
  9315  001FE8  EF4E  F010         	goto	l5352
  9316  001FEC                     u3590:
  9317  001FEC  0EFE               	movlw	254
  9318  001FEE  6036               	cpfslt	fifo_print@comando^0,c
  9319  001FF0  EFFC  F00F         	goto	u3601
  9320  001FF4  EFFE  F00F         	goto	u3600
  9321  001FF8                     u3601:
  9322  001FF8  EF4E  F010         	goto	l5352
  9323  001FFC                     u3600:
  9324  001FFC                     
  9325                           ;fifo.c: 422:             {;fifo.c: 423:                 decodifica(&comando);
  9326  001FFC  0E36               	movlw	low fifo_print@comando
  9327  001FFE  6E26               	movwf	decodifica@d^0,c
  9328  002000  0E00               	movlw	high fifo_print@comando
  9329  002002  6E27               	movwf	(decodifica@d+1)^0,c
  9330  002004  EC9E  F012         	call	_decodifica	;wreg free
  9331                           
  9332                           ;fifo.c: 424:                 switch( comando )
  9333  002008  EF21  F010         	goto	l5350
  9334  00200C                     l804:
  9335  00200C                     l5334:
  9336                           
  9337                           ;fifo.c: 434:                                 dispLCD_dataReg( comando & ~0x20 );
  9338  00200C  5036               	movf	fifo_print@comando^0,w,c
  9339  00200E  0BDF               	andlw	223
  9340  002010  EC24  F01A         	call	_dispLCD_dataReg
  9341  002014                     
  9342                           ;fifo.c: 435:                                 ++i;
  9343  002014  2A34               	incf	fifo_print@i^0,f,c
  9344  002016                     
  9345                           ;fifo.c: 436:                                 dispLCD_dataReg( comando & 0x20 ? '-': '+'
      +                           );
  9346  002016  BA36               	btfsc	fifo_print@comando^0,5,c
  9347  002018  EF10  F010         	goto	u3611
  9348  00201C  EF12  F010         	goto	u3610
  9349  002020                     u3611:
  9350  002020  EF18  F010         	goto	l5342
  9351  002024                     u3610:
  9352  002024  0E00               	movlw	0
  9353  002026  6E31               	movwf	(_fifo_print$946+1)^0,c
  9354  002028  0E2B               	movlw	43
  9355  00202A  6E30               	movwf	_fifo_print$946^0,c
  9356  00202C  EF1C  F010         	goto	l5344
  9357  002030                     l5342:
  9358  002030  0E00               	movlw	0
  9359  002032  6E31               	movwf	(_fifo_print$946+1)^0,c
  9360  002034  0E2D               	movlw	45
  9361  002036  6E30               	movwf	_fifo_print$946^0,c
  9362  002038                     l5344:
  9363  002038  5030               	movf	_fifo_print$946^0,w,c
  9364  00203A  EC24  F01A         	call	_dispLCD_dataReg
  9365  00203E  EF18  F00F         	goto	l5250
  9366  002042                     l5350:
  9367  002042  5036               	movf	fifo_print@comando^0,w,c
  9368  002044  6E2E               	movwf	??_fifo_print^0,c
  9369  002046  6A2F               	clrf	(??_fifo_print+1)^0,c
  9370                           
  9371                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9372                           ; Switch size 1, requested type "simple"
  9373                           ; Number of cases is 1, Range of values is 0 to 0
  9374                           ; switch strategies available:
  9375                           ; Name         Instructions Cycles
  9376                           ; simple_byte            4     3 (average)
  9377                           ;	Chosen strategy is simple_byte
  9378  002048  502F               	movf	(??_fifo_print+1)^0,w,c
  9379  00204A  0A00               	xorlw	0	; case 0
  9380  00204C  B4D8               	btfsc	status,2,c
  9381  00204E  EF2B  F010         	goto	l7358
  9382  002052  EF69  F010         	goto	l793
  9383  002056                     l7358:
  9384                           
  9385                           ; Switch size 1, requested type "simple"
  9386                           ; Number of cases is 8, Range of values is 65 to 100
  9387                           ; switch strategies available:
  9388                           ; Name         Instructions Cycles
  9389                           ; simple_byte           25    13 (average)
  9390                           ;	Chosen strategy is simple_byte
  9391  002056  502E               	movf	??_fifo_print^0,w,c
  9392  002058  0A41               	xorlw	65	; case 65
  9393  00205A  B4D8               	btfsc	status,2,c
  9394  00205C  EF06  F010         	goto	l804
  9395  002060  0A03               	xorlw	3	; case 66
  9396  002062  B4D8               	btfsc	status,2,c
  9397  002064  EF06  F010         	goto	l5334
  9398  002068  0A01               	xorlw	1	; case 67
  9399  00206A  B4D8               	btfsc	status,2,c
  9400  00206C  EF06  F010         	goto	l5334
  9401  002070  0A07               	xorlw	7	; case 68
  9402  002072  B4D8               	btfsc	status,2,c
  9403  002074  EF06  F010         	goto	l5334
  9404  002078  0A25               	xorlw	37	; case 97
  9405  00207A  B4D8               	btfsc	status,2,c
  9406  00207C  EF06  F010         	goto	l5334
  9407  002080  0A03               	xorlw	3	; case 98
  9408  002082  B4D8               	btfsc	status,2,c
  9409  002084  EF06  F010         	goto	l5334
  9410  002088  0A01               	xorlw	1	; case 99
  9411  00208A  B4D8               	btfsc	status,2,c
  9412  00208C  EF06  F010         	goto	l5334
  9413  002090  0A07               	xorlw	7	; case 100
  9414  002092  B4D8               	btfsc	status,2,c
  9415  002094  EF06  F010         	goto	l5334
  9416  002098  EF69  F010         	goto	l793
  9417  00209C                     l5352:
  9418                           
  9419                           ;fifo.c: 442:             {;fifo.c: 443:                 if(comando == 0xFE)
  9420  00209C  0EFE               	movlw	254
  9421  00209E  1836               	xorwf	fifo_print@comando^0,w,c
  9422  0020A0  A4D8               	btfss	status,2,c
  9423  0020A2  EF55  F010         	goto	u3621
  9424  0020A6  EF57  F010         	goto	u3620
  9425  0020AA                     u3621:
  9426  0020AA  EF69  F010         	goto	l793
  9427  0020AE                     u3620:
  9428  0020AE                     
  9429                           ;fifo.c: 444:                 {;fifo.c: 445:                     decodifica(&comando);
  9430  0020AE  0E36               	movlw	low fifo_print@comando
  9431  0020B0  6E26               	movwf	decodifica@d^0,c
  9432  0020B2  0E00               	movlw	high fifo_print@comando
  9433  0020B4  6E27               	movwf	(decodifica@d+1)^0,c
  9434  0020B6  EC9E  F012         	call	_decodifica	;wreg free
  9435  0020BA                     
  9436                           ;fifo.c: 446:                     atraso = comando;
  9437  0020BA  C036  F035         	movff	fifo_print@comando,fifo_print@atraso
  9438  0020BE                     
  9439                           ;fifo.c: 448:                     dispLCD_dataReg(atraso + '0');
  9440  0020BE  5035               	movf	fifo_print@atraso^0,w,c
  9441  0020C0  0F30               	addlw	48
  9442  0020C2  EC24  F01A         	call	_dispLCD_dataReg
  9443  0020C6                     
  9444                           ;fifo.c: 449:                     ++i;
  9445  0020C6  2A34               	incf	fifo_print@i^0,f,c
  9446  0020C8                     
  9447                           ;fifo.c: 451:                     dispLCD_dataReg('%');
  9448  0020C8  0E25               	movlw	37
  9449  0020CA  EC24  F01A         	call	_dispLCD_dataReg
  9450  0020CE  EF18  F00F         	goto	l5250
  9451  0020D2                     l793:
  9452  0020D2                     l5366:
  9453                           
  9454                           ;fifo.c: 456:     }
  9455  0020D2  0E14               	movlw	20
  9456  0020D4  6434               	cpfsgt	fifo_print@i^0,c
  9457  0020D6  EF6F  F010         	goto	u3631
  9458  0020DA  EF71  F010         	goto	u3630
  9459  0020DE                     u3631:
  9460  0020DE  EF0D  F00F         	goto	l5246
  9461  0020E2                     u3630:
  9462  0020E2  0012               	return		;funcret
  9463  0020E4                     __end_of_fifo_print:
  9464                           	callstack 0
  9465                           
  9466 ;; *************** function ___awmod *****************
  9467 ;; Defined at:
  9468 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awmod.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  dividend        2    0[COMRAM] int 
  9471 ;;  divisor         2    2[COMRAM] int 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  sign            1    5[COMRAM] unsigned char 
  9474 ;;  counter         1    4[COMRAM] unsigned char 
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  2    0[COMRAM] int 
  9477 ;; Registers used:
  9478 ;;		wreg, status,2, status,0
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9484 ;;      Params:         4       0       0       0       0       0       0       0       0
  9485 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9487 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9488 ;;Total ram usage:        6 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    2
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_main
  9495 ;;		_dispLCD_num
  9496 ;;		_fifo_print
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           	psect	text31
  9501  002BEE                     __ptext31:
  9502                           	callstack 0
  9503  002BEE                     ___awmod:
  9504                           	callstack 26
  9505  002BEE  0E00               	movlw	0
  9506  002BF0  6E2B               	movwf	___awmod@sign^0,c
  9507  002BF2  BE27               	btfsc	(___awmod@dividend+1)^0,7,c
  9508  002BF4  EF00  F016         	goto	u2830
  9509  002BF8  EFFE  F015         	goto	u2831
  9510  002BFC                     u2831:
  9511  002BFC  EF06  F016         	goto	l4726
  9512  002C00                     u2830:
  9513  002C00  6C26               	negf	___awmod@dividend^0,c
  9514  002C02  1E27               	comf	(___awmod@dividend+1)^0,f,c
  9515  002C04  B0D8               	btfsc	status,0,c
  9516  002C06  2A27               	incf	(___awmod@dividend+1)^0,f,c
  9517  002C08  0E01               	movlw	1
  9518  002C0A  6E2B               	movwf	___awmod@sign^0,c
  9519  002C0C                     l4726:
  9520  002C0C  BE29               	btfsc	(___awmod@divisor+1)^0,7,c
  9521  002C0E  EF0D  F016         	goto	u2840
  9522  002C12  EF0B  F016         	goto	u2841
  9523  002C16                     u2841:
  9524  002C16  EF11  F016         	goto	l4730
  9525  002C1A                     u2840:
  9526  002C1A  6C28               	negf	___awmod@divisor^0,c
  9527  002C1C  1E29               	comf	(___awmod@divisor+1)^0,f,c
  9528  002C1E  B0D8               	btfsc	status,0,c
  9529  002C20  2A29               	incf	(___awmod@divisor+1)^0,f,c
  9530  002C22                     l4730:
  9531  002C22  5028               	movf	___awmod@divisor^0,w,c
  9532  002C24  1029               	iorwf	(___awmod@divisor+1)^0,w,c
  9533  002C26  B4D8               	btfsc	status,2,c
  9534  002C28  EF18  F016         	goto	u2851
  9535  002C2C  EF1A  F016         	goto	u2850
  9536  002C30                     u2851:
  9537  002C30  EF3E  F016         	goto	l4746
  9538  002C34                     u2850:
  9539  002C34  0E01               	movlw	1
  9540  002C36  6E2A               	movwf	___awmod@counter^0,c
  9541  002C38  EF22  F016         	goto	l4736
  9542  002C3C                     l4734:
  9543  002C3C  90D8               	bcf	status,0,c
  9544  002C3E  3628               	rlcf	___awmod@divisor^0,f,c
  9545  002C40  3629               	rlcf	(___awmod@divisor+1)^0,f,c
  9546  002C42  2A2A               	incf	___awmod@counter^0,f,c
  9547  002C44                     l4736:
  9548  002C44  AE29               	btfss	(___awmod@divisor+1)^0,7,c
  9549  002C46  EF27  F016         	goto	u2861
  9550  002C4A  EF29  F016         	goto	u2860
  9551  002C4E                     u2861:
  9552  002C4E  EF1E  F016         	goto	l4734
  9553  002C52                     u2860:
  9554  002C52                     l4738:
  9555  002C52  5028               	movf	___awmod@divisor^0,w,c
  9556  002C54  5C26               	subwf	___awmod@dividend^0,w,c
  9557  002C56  5029               	movf	(___awmod@divisor+1)^0,w,c
  9558  002C58  5827               	subwfb	(___awmod@dividend+1)^0,w,c
  9559  002C5A  A0D8               	btfss	status,0,c
  9560  002C5C  EF32  F016         	goto	u2871
  9561  002C60  EF34  F016         	goto	u2870
  9562  002C64                     u2871:
  9563  002C64  EF38  F016         	goto	l4742
  9564  002C68                     u2870:
  9565  002C68  5028               	movf	___awmod@divisor^0,w,c
  9566  002C6A  5E26               	subwf	___awmod@dividend^0,f,c
  9567  002C6C  5029               	movf	(___awmod@divisor+1)^0,w,c
  9568  002C6E  5A27               	subwfb	(___awmod@dividend+1)^0,f,c
  9569  002C70                     l4742:
  9570  002C70  90D8               	bcf	status,0,c
  9571  002C72  3229               	rrcf	(___awmod@divisor+1)^0,f,c
  9572  002C74  3228               	rrcf	___awmod@divisor^0,f,c
  9573  002C76  2E2A               	decfsz	___awmod@counter^0,f,c
  9574  002C78  EF29  F016         	goto	l4738
  9575  002C7C                     l4746:
  9576  002C7C  502B               	movf	___awmod@sign^0,w,c
  9577  002C7E  B4D8               	btfsc	status,2,c
  9578  002C80  EF44  F016         	goto	u2881
  9579  002C84  EF46  F016         	goto	u2880
  9580  002C88                     u2881:
  9581  002C88  EF4A  F016         	goto	l4750
  9582  002C8C                     u2880:
  9583  002C8C  6C26               	negf	___awmod@dividend^0,c
  9584  002C8E  1E27               	comf	(___awmod@dividend+1)^0,f,c
  9585  002C90  B0D8               	btfsc	status,0,c
  9586  002C92  2A27               	incf	(___awmod@dividend+1)^0,f,c
  9587  002C94                     l4750:
  9588  002C94  C026  F026         	movff	___awmod@dividend,?___awmod
  9589  002C98  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  9590  002C9C  0012               	return		;funcret
  9591  002C9E                     __end_of___awmod:
  9592                           	callstack 0
  9593                           
  9594 ;; *************** function _fifo_indicePrint_inc *****************
  9595 ;; Defined at:
  9596 ;;		line 322 in file "fifo.c"
  9597 ;; Parameters:    Size  Location     Type
  9598 ;;		None
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;		None
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  1    wreg      void 
  9603 ;; Registers used:
  9604 ;;		wreg, status,2, status,0
  9605 ;; Tracked objects:
  9606 ;;		On entry : 0/0
  9607 ;;		On exit  : 0/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9610 ;;      Params:         0       0       0       0       0       0       0       0       0
  9611 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9612 ;;      Temps:          7       0       0       0       0       0       0       0       0
  9613 ;;      Totals:         7       0       0       0       0       0       0       0       0
  9614 ;;Total ram usage:        7 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:    2
  9617 ;; This function calls:
  9618 ;;		Nothing
  9619 ;; This function is called by:
  9620 ;;		_main
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           	psect	text32
  9625  0031DA                     __ptext32:
  9626                           	callstack 0
  9627  0031DA                     _fifo_indicePrint_inc:
  9628                           	callstack 28
  9629  0031DA                     
  9630                           ;fifo.c: 324:     if( ind_print < 18 -1 )
  9631  0031DA  0E11               	movlw	17
  9632  0031DC  6057               	cpfslt	_ind_print^0,c
  9633  0031DE  EFF3  F018         	goto	u3691
  9634  0031E2  EFF5  F018         	goto	u3690
  9635  0031E6                     u3691:
  9636  0031E6  EF19  F019         	goto	l5428
  9637  0031EA                     u3690:
  9638  0031EA                     
  9639                           ;fifo.c: 325:     {;fifo.c: 326:         if( ind_print < ind_fila-1 )
  9640  0031EA  0EFF               	movlw	255
  9641  0031EC  6E26               	movwf	??_fifo_indicePrint_inc^0,c
  9642  0031EE  0EFF               	movlw	255
  9643  0031F0  6E27               	movwf	(??_fifo_indicePrint_inc+1)^0,c
  9644  0031F2  5058               	movf	_ind_fila^0,w,c
  9645  0031F4  6E28               	movwf	(??_fifo_indicePrint_inc+2)^0,c
  9646  0031F6  6A29               	clrf	(??_fifo_indicePrint_inc+3)^0,c
  9647  0031F8  5026               	movf	??_fifo_indicePrint_inc^0,w,c
  9648  0031FA  2628               	addwf	(??_fifo_indicePrint_inc+2)^0,f,c
  9649  0031FC  5027               	movf	(??_fifo_indicePrint_inc+1)^0,w,c
  9650  0031FE  2229               	addwfc	(??_fifo_indicePrint_inc+3)^0,f,c
  9651  003200  5057               	movf	_ind_print^0,w,c
  9652  003202  6E2A               	movwf	(??_fifo_indicePrint_inc+4)^0,c
  9653  003204  6A2B               	clrf	(??_fifo_indicePrint_inc+5)^0,c
  9654  003206  5028               	movf	(??_fifo_indicePrint_inc+2)^0,w,c
  9655  003208  5C2A               	subwf	(??_fifo_indicePrint_inc+4)^0,w,c
  9656  00320A  502B               	movf	(??_fifo_indicePrint_inc+5)^0,w,c
  9657  00320C  0A80               	xorlw	128
  9658  00320E  6E2C               	movwf	(??_fifo_indicePrint_inc+6)^0,c
  9659  003210  5029               	movf	(??_fifo_indicePrint_inc+3)^0,w,c
  9660  003212  0A80               	xorlw	128
  9661  003214  582C               	subwfb	(??_fifo_indicePrint_inc+6)^0,w,c
  9662  003216  B0D8               	btfsc	status,0,c
  9663  003218  EF10  F019         	goto	u3701
  9664  00321C  EF12  F019         	goto	u3700
  9665  003220                     u3701:
  9666  003220  EF15  F019         	goto	l5426
  9667  003224                     u3700:
  9668  003224                     
  9669                           ;fifo.c: 327:             ind_print++;
  9670  003224  2A57               	incf	_ind_print^0,f,c
  9671  003226  EF1B  F019         	goto	l777
  9672  00322A                     l5426:
  9673                           
  9674                           ;fifo.c: 329:             ind_print = ind_fila-1;
  9675  00322A  0458               	decf	_ind_fila^0,w,c
  9676  00322C  6E57               	movwf	_ind_print^0,c
  9677  00322E  EF1B  F019         	goto	l777
  9678  003232                     l5428:
  9679                           
  9680                           ;fifo.c: 332:         ind_print = 18 -1;
  9681  003232  0E11               	movlw	17
  9682  003234  6E57               	movwf	_ind_print^0,c
  9683  003236                     l777:
  9684  003236  0012               	return		;funcret
  9685  003238                     __end_of_fifo_indicePrint_inc:
  9686                           	callstack 0
  9687                           
  9688 ;; *************** function _fifo_indicePrint_dec *****************
  9689 ;; Defined at:
  9690 ;;		line 334 in file "fifo.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  1    wreg      void 
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9707 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9708 ;;Total ram usage:        0 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    2
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_main
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           	psect	text33
  9719  003A2A                     __ptext33:
  9720                           	callstack 0
  9721  003A2A                     _fifo_indicePrint_dec:
  9722                           	callstack 28
  9723  003A2A                     
  9724                           ;fifo.c: 336:     if( ind_print > 2 )
  9725  003A2A  0E02               	movlw	2
  9726  003A2C  6457               	cpfsgt	_ind_print^0,c
  9727  003A2E  EF1B  F01D         	goto	u3711
  9728  003A32  EF1D  F01D         	goto	u3710
  9729  003A36                     u3711:
  9730  003A36  EF1E  F01D         	goto	l781
  9731  003A3A                     u3710:
  9732  003A3A                     
  9733                           ;fifo.c: 337:         ind_print--;
  9734  003A3A  0657               	decf	_ind_print^0,f,c
  9735  003A3C                     l781:
  9736  003A3C  0012               	return		;funcret
  9737  003A3E                     __end_of_fifo_indicePrint_dec:
  9738                           	callstack 0
  9739                           
  9740 ;; *************** function _fifo_indice *****************
  9741 ;; Defined at:
  9742 ;;		line 307 in file "fifo.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;		None
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;		None
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  1    wreg      unsigned char 
  9749 ;; Registers used:
  9750 ;;		wreg, status,2
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0
  9757 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9759 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9760 ;;Total ram usage:        0 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    2
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_main
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           	psect	text34
  9771  003B2C                     __ptext34:
  9772                           	callstack 0
  9773  003B2C                     _fifo_indice:
  9774                           	callstack 28
  9775  003B2C                     
  9776                           ;fifo.c: 309:     return ( ind_fila );
  9777  003B2C  5058               	movf	_ind_fila^0,w,c
  9778  003B2E  0012               	return		;funcret
  9779  003B30                     __end_of_fifo_indice:
  9780                           	callstack 0
  9781                           
  9782 ;; *************** function _fifo_disponivel *****************
  9783 ;; Defined at:
  9784 ;;		line 312 in file "fifo.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      unsigned char 
  9791 ;; Registers used:
  9792 ;;		wreg, status,2, status,0
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0
  9799 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9801 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9802 ;;Total ram usage:        0 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    2
  9805 ;; This function calls:
  9806 ;;		Nothing
  9807 ;; This function is called by:
  9808 ;;		_main
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text35
  9813  0039D4                     __ptext35:
  9814                           	callstack 0
  9815  0039D4                     _fifo_disponivel:
  9816                           	callstack 28
  9817  0039D4                     
  9818                           ;fifo.c: 314:     return( ind_fila < 18 );
  9819  0039D4  0E11               	movlw	17
  9820  0039D6  6458               	cpfsgt	_ind_fila^0,c
  9821  0039D8  EFF0  F01C         	goto	u3671
  9822  0039DC  EFF3  F01C         	goto	u3670
  9823  0039E0                     u3671:
  9824  0039E0  0E01               	movlw	1
  9825  0039E2  EFF4  F01C         	goto	u3680
  9826  0039E6                     u3670:
  9827  0039E6  0E00               	movlw	0
  9828  0039E8                     u3680:
  9829  0039E8  0012               	return		;funcret
  9830  0039EA                     __end_of_fifo_disponivel:
  9831                           	callstack 0
  9832                           
  9833 ;; *************** function _fifo_delete *****************
  9834 ;; Defined at:
  9835 ;;		line 183 in file "fifo.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;		None
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;		None
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9849 ;;      Params:         0       0       0       0       0       0       0       0       0
  9850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9851 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9852 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9853 ;;Total ram usage:        2 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:    5
  9856 ;; This function calls:
  9857 ;;		_alt_atuador
  9858 ;;		_codifica
  9859 ;;		_decodifica
  9860 ;;		_fifo_alinharPrint
  9861 ;; This function is called by:
  9862 ;;		_main
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text36
  9867  002F24                     __ptext36:
  9868                           	callstack 0
  9869  002F24                     _fifo_delete:
  9870                           	callstack 25
  9871  002F24                     
  9872                           ;fifo.c: 185:     if(ind_fila)
  9873  002F24  5058               	movf	_ind_fila^0,w,c
  9874  002F26  B4D8               	btfsc	status,2,c
  9875  002F28  EF98  F017         	goto	u3721
  9876  002F2C  EF9A  F017         	goto	u3720
  9877  002F30                     u3721:
  9878  002F30  EFDB  F017         	goto	l5450
  9879  002F34                     u3720:
  9880  002F34                     
  9881                           ;fifo.c: 186:     {;fifo.c: 187:         if(ind_fila > 2)
  9882  002F34  0E02               	movlw	2
  9883  002F36  6458               	cpfsgt	_ind_fila^0,c
  9884  002F38  EFA0  F017         	goto	u3731
  9885  002F3C  EFA2  F017         	goto	u3730
  9886  002F40                     u3731:
  9887  002F40  EFA3  F017         	goto	l5444
  9888  002F44                     u3730:
  9889  002F44                     
  9890                           ;fifo.c: 188:             ind_fila--;
  9891  002F44  0658               	decf	_ind_fila^0,f,c
  9892  002F46                     l5444:
  9893                           
  9894                           ;fifo.c: 189:         if(fila[ind_fila] > 0xDC)
  9895  002F46  0E14               	movlw	low _fila
  9896  002F48  2458               	addwf	_ind_fila^0,w,c
  9897  002F4A  6ED9               	movwf	fsr2l,c
  9898  002F4C  6ADA               	clrf	fsr2h,c
  9899  002F4E  0E00               	movlw	high _fila
  9900  002F50  22DA               	addwfc	fsr2h,f,c
  9901  002F52  0EDC               	movlw	220
  9902  002F54  64DF               	cpfsgt	indf2,c
  9903  002F56  EFAF  F017         	goto	u3741
  9904  002F5A  EFB1  F017         	goto	u3740
  9905  002F5E                     u3741:
  9906  002F5E  EFD3  F017         	goto	l5448
  9907  002F62                     u3740:
  9908  002F62                     
  9909                           ;fifo.c: 190:         {;fifo.c: 191:             decodifica(&fila[ind_fila]);
  9910  002F62  0E14               	movlw	low _fila
  9911  002F64  2458               	addwf	_ind_fila^0,w,c
  9912  002F66  6E26               	movwf	decodifica@d^0,c
  9913  002F68  6A27               	clrf	(decodifica@d+1)^0,c
  9914  002F6A  0E00               	movlw	high _fila
  9915  002F6C  2227               	addwfc	(decodifica@d+1)^0,f,c
  9916  002F6E  EC9E  F012         	call	_decodifica	;wreg free
  9917                           
  9918                           ;fifo.c: 192:             alt_atuador(fila[ind_fila] & ~0x20);
  9919  002F72  0E14               	movlw	low _fila
  9920  002F74  2458               	addwf	_ind_fila^0,w,c
  9921  002F76  6ED9               	movwf	fsr2l,c
  9922  002F78  6ADA               	clrf	fsr2h,c
  9923  002F7A  0E00               	movlw	high _fila
  9924  002F7C  22DA               	addwfc	fsr2h,f,c
  9925  002F7E  50DF               	movf	indf2,w,c
  9926  002F80  0BDF               	andlw	223
  9927  002F82  EC45  F017         	call	_alt_atuador
  9928                           
  9929                           ;fifo.c: 193:             codifica('a',fila[ind_fila]);
  9930  002F86  0E14               	movlw	low _fila
  9931  002F88  2458               	addwf	_ind_fila^0,w,c
  9932  002F8A  6ED9               	movwf	fsr2l,c
  9933  002F8C  6ADA               	clrf	fsr2h,c
  9934  002F8E  0E00               	movlw	high _fila
  9935  002F90  22DA               	addwfc	fsr2h,f,c
  9936  002F92  50DF               	movf	indf2,w,c
  9937  002F94  6E35               	movwf	??_fifo_delete^0,c
  9938  002F96  6A36               	clrf	(??_fifo_delete+1)^0,c
  9939  002F98  C035  F026         	movff	??_fifo_delete,codifica@dado
  9940  002F9C  C036  F027         	movff	??_fifo_delete+1,codifica@dado+1
  9941  002FA0  0E61               	movlw	97
  9942  002FA2  ECF4  F011         	call	_codifica
  9943  002FA6                     l5448:
  9944                           
  9945                           ;fifo.c: 195:         fila[ind_fila] = 0;
  9946  002FA6  0E14               	movlw	low _fila
  9947  002FA8  2458               	addwf	_ind_fila^0,w,c
  9948  002FAA  6ED9               	movwf	fsr2l,c
  9949  002FAC  6ADA               	clrf	fsr2h,c
  9950  002FAE  0E00               	movlw	high _fila
  9951  002FB0  22DA               	addwfc	fsr2h,f,c
  9952  002FB2  0E00               	movlw	0
  9953  002FB4  6EDF               	movwf	indf2,c
  9954  002FB6                     l5450:
  9955                           
  9956                           ;fifo.c: 197:     fifo_alinharPrint();
  9957  002FB6  ECB0  F014         	call	_fifo_alinharPrint	;wreg free
  9958  002FBA  0012               	return		;funcret
  9959  002FBC                     __end_of_fifo_delete:
  9960                           	callstack 0
  9961                           
  9962 ;; *************** function _decodifica *****************
  9963 ;; Defined at:
  9964 ;;		line 228 in file "fifo.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  d               2    0[COMRAM] PTR unsigned char 
  9967 ;;		 -> printExec@passo(1), fifo_print@comando(1), fila(18), main@vetor_aux(16), 
  9968 ;;		 -> main@auxPasso(1), 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9980 ;;      Params:         2       0       0       0       0       0       0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9982 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9983 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9984 ;;Total ram usage:        4 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    2
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		_main
  9991 ;;		_fifo_delete
  9992 ;;		_fifo_print
  9993 ;;		_printExec
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           	psect	text37
  9998  00253C                     __ptext37:
  9999                           	callstack 0
 10000  00253C                     _decodifica:
 10001                           	callstack 27
 10002  00253C                     
 10003                           ;fifo.c: 228: void decodifica( unsigned char *d );fifo.c: 229: {;fifo.c: 230:     if( *d
      +                           <= 100 )
 10004  00253C  C026  FFD9         	movff	decodifica@d,fsr2l
 10005  002540  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10006  002544  0E65               	movlw	101
 10007  002546  60DF               	cpfslt	indf2,c
 10008  002548  EFA8  F012         	goto	u2891
 10009  00254C  EFAA  F012         	goto	u2890
 10010  002550                     u2891:
 10011  002550  EFAC  F012         	goto	l4758
 10012  002554                     u2890:
 10013  002554  EF3D  F013         	goto	l744
 10014  002558                     l4758:
 10015  002558  C026  FFD9         	movff	decodifica@d,fsr2l
 10016  00255C  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10017  002560  0EDD               	movlw	221
 10018  002562  60DF               	cpfslt	indf2,c
 10019  002564  EFB6  F012         	goto	u2901
 10020  002568  EFB8  F012         	goto	u2900
 10021  00256C                     u2901:
 10022  00256C  EF08  F013         	goto	l4782
 10023  002570                     u2900:
 10024  002570                     
 10025                           ;fifo.c: 235:     {;fifo.c: 236:         *d -= 0x64;
 10026  002570  C026  FFD9         	movff	decodifica@d,fsr2l
 10027  002574  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10028  002578  0E64               	movlw	100
 10029  00257A  5EDF               	subwf	indf2,f,c
 10030                           
 10031                           ;fifo.c: 237:     } else
 10032  00257C  EF3D  F013         	goto	l744
 10033  002580                     l4762:
 10034  002580  C026  FFD9         	movff	decodifica@d,fsr2l
 10035  002584  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10036  002588  0E41               	movlw	65
 10037  00258A  6EDF               	movwf	indf2,c
 10038  00258C  EF3D  F013         	goto	l744
 10039  002590                     l4764:
 10040  002590  C026  FFD9         	movff	decodifica@d,fsr2l
 10041  002594  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10042  002598  0E61               	movlw	97
 10043  00259A  6EDF               	movwf	indf2,c
 10044  00259C  EF3D  F013         	goto	l744
 10045  0025A0                     l4766:
 10046  0025A0  C026  FFD9         	movff	decodifica@d,fsr2l
 10047  0025A4  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10048  0025A8  0E42               	movlw	66
 10049  0025AA  6EDF               	movwf	indf2,c
 10050  0025AC  EF3D  F013         	goto	l744
 10051  0025B0                     l4768:
 10052  0025B0  C026  FFD9         	movff	decodifica@d,fsr2l
 10053  0025B4  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10054  0025B8  0E62               	movlw	98
 10055  0025BA  6EDF               	movwf	indf2,c
 10056  0025BC  EF3D  F013         	goto	l744
 10057  0025C0                     l4770:
 10058  0025C0  C026  FFD9         	movff	decodifica@d,fsr2l
 10059  0025C4  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10060  0025C8  0E43               	movlw	67
 10061  0025CA  6EDF               	movwf	indf2,c
 10062  0025CC  EF3D  F013         	goto	l744
 10063  0025D0                     l4772:
 10064  0025D0  C026  FFD9         	movff	decodifica@d,fsr2l
 10065  0025D4  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10066  0025D8  0E63               	movlw	99
 10067  0025DA  6EDF               	movwf	indf2,c
 10068  0025DC  EF3D  F013         	goto	l744
 10069  0025E0                     l4774:
 10070  0025E0  C026  FFD9         	movff	decodifica@d,fsr2l
 10071  0025E4  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10072  0025E8  0E44               	movlw	68
 10073  0025EA  6EDF               	movwf	indf2,c
 10074  0025EC  EF3D  F013         	goto	l744
 10075  0025F0                     l4776:
 10076  0025F0  C026  FFD9         	movff	decodifica@d,fsr2l
 10077  0025F4  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10078  0025F8  0E64               	movlw	100
 10079  0025FA  6EDF               	movwf	indf2,c
 10080  0025FC  EF3D  F013         	goto	l744
 10081  002600                     l4778:
 10082  002600  C026  FFD9         	movff	decodifica@d,fsr2l
 10083  002604  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10084  002608  0E00               	movlw	0
 10085  00260A  6EDF               	movwf	indf2,c
 10086  00260C  EF3D  F013         	goto	l744
 10087  002610                     l4782:
 10088  002610  C026  FFD9         	movff	decodifica@d,fsr2l
 10089  002614  C027  FFDA         	movff	decodifica@d+1,fsr2h
 10090  002618  50DF               	movf	indf2,w,c
 10091  00261A  6E28               	movwf	??_decodifica^0,c
 10092  00261C  6A29               	clrf	(??_decodifica+1)^0,c
 10093                           
 10094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10095                           ; Switch size 1, requested type "simple"
 10096                           ; Number of cases is 1, Range of values is 0 to 0
 10097                           ; switch strategies available:
 10098                           ; Name         Instructions Cycles
 10099                           ; simple_byte            4     3 (average)
 10100                           ;	Chosen strategy is simple_byte
 10101  00261E  5029               	movf	(??_decodifica+1)^0,w,c
 10102  002620  0A00               	xorlw	0	; case 0
 10103  002622  B4D8               	btfsc	status,2,c
 10104  002624  EF16  F013         	goto	l7360
 10105  002628  EF3D  F013         	goto	l744
 10106  00262C                     l7360:
 10107                           
 10108                           ; Switch size 1, requested type "simple"
 10109                           ; Number of cases is 9, Range of values is 221 to 254
 10110                           ; switch strategies available:
 10111                           ; Name         Instructions Cycles
 10112                           ; simple_byte           28    15 (average)
 10113                           ;	Chosen strategy is simple_byte
 10114  00262C  5028               	movf	??_decodifica^0,w,c
 10115  00262E  0ADD               	xorlw	221	; case 221
 10116  002630  B4D8               	btfsc	status,2,c
 10117  002632  EFC0  F012         	goto	l4762
 10118  002636  0A03               	xorlw	3	; case 222
 10119  002638  B4D8               	btfsc	status,2,c
 10120  00263A  EFC8  F012         	goto	l4764
 10121  00263E  0A01               	xorlw	1	; case 223
 10122  002640  B4D8               	btfsc	status,2,c
 10123  002642  EFD0  F012         	goto	l4766
 10124  002646  0A3F               	xorlw	63	; case 224
 10125  002648  B4D8               	btfsc	status,2,c
 10126  00264A  EFD8  F012         	goto	l4768
 10127  00264E  0A01               	xorlw	1	; case 225
 10128  002650  B4D8               	btfsc	status,2,c
 10129  002652  EFE0  F012         	goto	l4770
 10130  002656  0A03               	xorlw	3	; case 226
 10131  002658  B4D8               	btfsc	status,2,c
 10132  00265A  EFE8  F012         	goto	l4772
 10133  00265E  0A01               	xorlw	1	; case 227
 10134  002660  B4D8               	btfsc	status,2,c
 10135  002662  EFF0  F012         	goto	l4774
 10136  002666  0A07               	xorlw	7	; case 228
 10137  002668  B4D8               	btfsc	status,2,c
 10138  00266A  EFF8  F012         	goto	l4776
 10139  00266E  0A1A               	xorlw	26	; case 254
 10140  002670  B4D8               	btfsc	status,2,c
 10141  002672  EF00  F013         	goto	l4778
 10142  002676  EF3D  F013         	goto	l744
 10143  00267A                     l744:
 10144  00267A  0012               	return		;funcret
 10145  00267C                     __end_of_decodifica:
 10146                           	callstack 0
 10147                           
 10148 ;; *************** function _alt_atuador *****************
 10149 ;; Defined at:
 10150 ;;		line 92 in file "fifo.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  tecla           1    wreg     unsigned char 
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;  tecla           1    2[COMRAM] unsigned char 
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      void 
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10164 ;;      Params:         0       0       0       0       0       0       0       0       0
 10165 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10166 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10167 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10168 ;;Total ram usage:        3 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    2
 10171 ;; This function calls:
 10172 ;;		Nothing
 10173 ;; This function is called by:
 10174 ;;		_main
 10175 ;;		_manipula_atuadores_init
 10176 ;;		_fifo_delete
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           	psect	text38
 10181  002E8A                     __ptext38:
 10182                           	callstack 0
 10183  002E8A                     _alt_atuador:
 10184                           	callstack 27
 10185                           
 10186                           ;incstack = 0
 10187                           ;alt_atuador@tecla stored from wreg
 10188  002E8A  6E28               	movwf	alt_atuador@tecla^0,c
 10189  002E8C                     
 10190                           ;fifo.c: 92: void alt_atuador( char tecla );fifo.c: 93: {;fifo.c: 94:     switch(tecla)
 10191  002E8C  EF74  F017         	goto	l4792
 10192  002E90                     l661:
 10193  002E90  A013               	btfss	_atuador^0,0,c
 10194  002E92  EF4D  F017         	goto	u2911
 10195  002E96  EF50  F017         	goto	u2910
 10196  002E9A                     u2911:
 10197  002E9A  8013               	bsf	_atuador^0,0,c
 10198  002E9C  EF51  F017         	goto	u2925
 10199  002EA0                     u2910:
 10200  002EA0  9013               	bcf	_atuador^0,0,c
 10201  002EA2                     u2925:
 10202  002EA2  EF91  F017         	goto	l666
 10203  002EA6                     l663:
 10204  002EA6  A213               	btfss	_atuador^0,1,c
 10205  002EA8  EF58  F017         	goto	u2931
 10206  002EAC  EF5B  F017         	goto	u2930
 10207  002EB0                     u2931:
 10208  002EB0  8213               	bsf	_atuador^0,1,c
 10209  002EB2  EF5C  F017         	goto	u2945
 10210  002EB6                     u2930:
 10211  002EB6  9213               	bcf	_atuador^0,1,c
 10212  002EB8                     u2945:
 10213  002EB8  EF91  F017         	goto	l666
 10214  002EBC                     l664:
 10215  002EBC  A413               	btfss	_atuador^0,2,c
 10216  002EBE  EF63  F017         	goto	u2951
 10217  002EC2  EF66  F017         	goto	u2950
 10218  002EC6                     u2951:
 10219  002EC6  8413               	bsf	_atuador^0,2,c
 10220  002EC8  EF67  F017         	goto	u2965
 10221  002ECC                     u2950:
 10222  002ECC  9413               	bcf	_atuador^0,2,c
 10223  002ECE                     u2965:
 10224  002ECE  EF91  F017         	goto	l666
 10225  002ED2                     l665:
 10226  002ED2  A613               	btfss	_atuador^0,3,c
 10227  002ED4  EF6E  F017         	goto	u2971
 10228  002ED8  EF71  F017         	goto	u2970
 10229  002EDC                     u2971:
 10230  002EDC  8613               	bsf	_atuador^0,3,c
 10231  002EDE  EF72  F017         	goto	u2985
 10232  002EE2                     u2970:
 10233  002EE2  9613               	bcf	_atuador^0,3,c
 10234  002EE4                     u2985:
 10235  002EE4  EF91  F017         	goto	l666
 10236  002EE8                     l4792:
 10237  002EE8  5028               	movf	alt_atuador@tecla^0,w,c
 10238  002EEA  6E26               	movwf	??_alt_atuador^0,c
 10239  002EEC  6A27               	clrf	(??_alt_atuador+1)^0,c
 10240                           
 10241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10242                           ; Switch size 1, requested type "simple"
 10243                           ; Number of cases is 1, Range of values is 0 to 0
 10244                           ; switch strategies available:
 10245                           ; Name         Instructions Cycles
 10246                           ; simple_byte            4     3 (average)
 10247                           ;	Chosen strategy is simple_byte
 10248  002EEE  5027               	movf	(??_alt_atuador+1)^0,w,c
 10249  002EF0  0A00               	xorlw	0	; case 0
 10250  002EF2  B4D8               	btfsc	status,2,c
 10251  002EF4  EF7E  F017         	goto	l7362
 10252  002EF8  EF91  F017         	goto	l666
 10253  002EFC                     l7362:
 10254                           
 10255                           ; Switch size 1, requested type "simple"
 10256                           ; Number of cases is 4, Range of values is 65 to 68
 10257                           ; switch strategies available:
 10258                           ; Name         Instructions Cycles
 10259                           ; simple_byte           13     7 (average)
 10260                           ;	Chosen strategy is simple_byte
 10261  002EFC  5026               	movf	??_alt_atuador^0,w,c
 10262  002EFE  0A41               	xorlw	65	; case 65
 10263  002F00  B4D8               	btfsc	status,2,c
 10264  002F02  EF48  F017         	goto	l661
 10265  002F06  0A03               	xorlw	3	; case 66
 10266  002F08  B4D8               	btfsc	status,2,c
 10267  002F0A  EF53  F017         	goto	l663
 10268  002F0E  0A01               	xorlw	1	; case 67
 10269  002F10  B4D8               	btfsc	status,2,c
 10270  002F12  EF5E  F017         	goto	l664
 10271  002F16  0A07               	xorlw	7	; case 68
 10272  002F18  B4D8               	btfsc	status,2,c
 10273  002F1A  EF69  F017         	goto	l665
 10274  002F1E  EF91  F017         	goto	l666
 10275  002F22                     l666:
 10276  002F22  0012               	return		;funcret
 10277  002F24                     __end_of_alt_atuador:
 10278                           	callstack 0
 10279                           
 10280 ;; *************** function _fifo_adrs *****************
 10281 ;; Defined at:
 10282 ;;		line 178 in file "fifo.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  2    0[COMRAM] PTR unsigned char 
 10289 ;; Registers used:
 10290 ;;		wreg, status,2, status,0
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10296 ;;      Params:         2       0       0       0       0       0       0       0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10299 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10300 ;;Total ram usage:        2 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    2
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_main
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text39
 10311  003AF6                     __ptext39:
 10312                           	callstack 0
 10313  003AF6                     _fifo_adrs:
 10314                           	callstack 28
 10315  003AF6                     
 10316                           ;fifo.c: 180:     return fila;
 10317  003AF6  0E14               	movlw	low _fila
 10318  003AF8  6E26               	movwf	?_fifo_adrs^0,c
 10319  003AFA  0E00               	movlw	high _fila
 10320  003AFC  6E27               	movwf	(?_fifo_adrs+1)^0,c
 10321  003AFE  0012               	return		;funcret
 10322  003B00                     __end_of_fifo_adrs:
 10323                           	callstack 0
 10324                           
 10325 ;; *************** function _fifo_add_tempo *****************
 10326 ;; Defined at:
 10327 ;;		line 269 in file "fifo.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;  t               1    wreg     const unsigned char 
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;  t               1   15[COMRAM] const unsigned char 
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  1    wreg      void 
 10334 ;; Registers used:
 10335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10341 ;;      Params:         0       0       0       0       0       0       0       0       0
 10342 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10344 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10345 ;;Total ram usage:        1 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:    5
 10348 ;; This function calls:
 10349 ;;		_codifica
 10350 ;;		_fifo_alinharPrint
 10351 ;; This function is called by:
 10352 ;;		_main
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           	psect	text40
 10357  003348                     __ptext40:
 10358                           	callstack 0
 10359  003348                     _fifo_add_tempo:
 10360                           	callstack 25
 10361                           
 10362                           ;incstack = 0
 10363                           ;fifo_add_tempo@t stored from wreg
 10364  003348  6E35               	movwf	fifo_add_tempo@t^0,c
 10365  00334A                     
 10366                           ;fifo.c: 269: void fifo_add_tempo(const char t);fifo.c: 270: {;fifo.c: 271:     if(ind_f
      +                          ila < 18)
 10367  00334A  0E12               	movlw	18
 10368  00334C  6058               	cpfslt	_ind_fila^0,c
 10369  00334E  EFAB  F019         	goto	u3441
 10370  003352  EFAD  F019         	goto	u3440
 10371  003356                     u3441:
 10372  003356  EFCD  F019         	goto	l5224
 10373  00335A                     u3440:
 10374  00335A                     
 10375                           ;fifo.c: 272:     {;fifo.c: 273:         if(t)
 10376  00335A  5035               	movf	fifo_add_tempo@t^0,w,c
 10377  00335C  B4D8               	btfsc	status,2,c
 10378  00335E  EFB3  F019         	goto	u3451
 10379  003362  EFB5  F019         	goto	u3450
 10380  003366                     u3451:
 10381  003366  EFCD  F019         	goto	l5224
 10382  00336A                     u3450:
 10383  00336A                     
 10384                           ;fifo.c: 274:         {;fifo.c: 275:             codifica('t', &t);
 10385  00336A  0E35               	movlw	low fifo_add_tempo@t
 10386  00336C  6E26               	movwf	codifica@dado^0,c
 10387  00336E  0E00               	movlw	high fifo_add_tempo@t
 10388  003370  6E27               	movwf	(codifica@dado+1)^0,c
 10389  003372  0E74               	movlw	116
 10390  003374  ECF4  F011         	call	_codifica
 10391  003378                     
 10392                           ;fifo.c: 276:             fila[ind_fila] = t;
 10393  003378  0E14               	movlw	low _fila
 10394  00337A  2458               	addwf	_ind_fila^0,w,c
 10395  00337C  6ED9               	movwf	fsr2l,c
 10396  00337E  6ADA               	clrf	fsr2h,c
 10397  003380  0E00               	movlw	high _fila
 10398  003382  22DA               	addwfc	fsr2h,f,c
 10399  003384  C035  FFDF         	movff	fifo_add_tempo@t,indf2
 10400  003388                     
 10401                           ;fifo.c: 277:             ind_fila++;
 10402  003388  2A58               	incf	_ind_fila^0,f,c
 10403  00338A                     
 10404                           ;fifo.c: 278:             fila[ind_fila] = 0;
 10405  00338A  0E14               	movlw	low _fila
 10406  00338C  2458               	addwf	_ind_fila^0,w,c
 10407  00338E  6ED9               	movwf	fsr2l,c
 10408  003390  6ADA               	clrf	fsr2h,c
 10409  003392  0E00               	movlw	high _fila
 10410  003394  22DA               	addwfc	fsr2h,f,c
 10411  003396  0E00               	movlw	0
 10412  003398  6EDF               	movwf	indf2,c
 10413  00339A                     l5224:
 10414                           
 10415                           ;fifo.c: 281:     fifo_alinharPrint();
 10416  00339A  ECB0  F014         	call	_fifo_alinharPrint	;wreg free
 10417  00339E  0012               	return		;funcret
 10418  0033A0                     __end_of_fifo_add_tempo:
 10419                           	callstack 0
 10420                           
 10421 ;; *************** function _fifo_add_control *****************
 10422 ;; Defined at:
 10423 ;;		line 284 in file "fifo.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;  c               1    wreg     const unsigned char 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  c               1   15[COMRAM] const unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0
 10438 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10440 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10441 ;;Total ram usage:        1 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    5
 10444 ;; This function calls:
 10445 ;;		_codifica
 10446 ;;		_fifo_alinharPrint
 10447 ;; This function is called by:
 10448 ;;		_main
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           	psect	text41
 10453  003496                     __ptext41:
 10454                           	callstack 0
 10455  003496                     _fifo_add_control:
 10456                           	callstack 25
 10457                           
 10458                           ;incstack = 0
 10459                           ;fifo_add_control@c stored from wreg
 10460  003496  6E35               	movwf	fifo_add_control@c^0,c
 10461  003498                     
 10462                           ;fifo.c: 284: void fifo_add_control(const char c);fifo.c: 285: {;fifo.c: 286:     if(ind
      +                          _fila < 18)
 10463  003498  0E12               	movlw	18
 10464  00349A  6058               	cpfslt	_ind_fila^0,c
 10465  00349C  EF52  F01A         	goto	u3431
 10466  0034A0  EF54  F01A         	goto	u3430
 10467  0034A4                     u3431:
 10468  0034A4  EF6C  F01A         	goto	l5210
 10469  0034A8                     u3430:
 10470  0034A8                     
 10471                           ;fifo.c: 287:     {;fifo.c: 290:             codifica('p', &c);
 10472  0034A8  0E35               	movlw	low fifo_add_control@c
 10473  0034AA  6E26               	movwf	codifica@dado^0,c
 10474  0034AC  0E00               	movlw	high fifo_add_control@c
 10475  0034AE  6E27               	movwf	(codifica@dado+1)^0,c
 10476  0034B0  0E70               	movlw	112
 10477  0034B2  ECF4  F011         	call	_codifica
 10478  0034B6                     
 10479                           ;fifo.c: 291:             fila[ind_fila] = c;
 10480  0034B6  0E14               	movlw	low _fila
 10481  0034B8  2458               	addwf	_ind_fila^0,w,c
 10482  0034BA  6ED9               	movwf	fsr2l,c
 10483  0034BC  6ADA               	clrf	fsr2h,c
 10484  0034BE  0E00               	movlw	high _fila
 10485  0034C0  22DA               	addwfc	fsr2h,f,c
 10486  0034C2  C035  FFDF         	movff	fifo_add_control@c,indf2
 10487  0034C6                     
 10488                           ;fifo.c: 292:             ind_fila++;
 10489  0034C6  2A58               	incf	_ind_fila^0,f,c
 10490  0034C8                     
 10491                           ;fifo.c: 293:             fila[ind_fila] = 0;
 10492  0034C8  0E14               	movlw	low _fila
 10493  0034CA  2458               	addwf	_ind_fila^0,w,c
 10494  0034CC  6ED9               	movwf	fsr2l,c
 10495  0034CE  6ADA               	clrf	fsr2h,c
 10496  0034D0  0E00               	movlw	high _fila
 10497  0034D2  22DA               	addwfc	fsr2h,f,c
 10498  0034D4  0E00               	movlw	0
 10499  0034D6  6EDF               	movwf	indf2,c
 10500  0034D8                     l5210:
 10501                           
 10502                           ;fifo.c: 296:     fifo_alinharPrint();
 10503  0034D8  ECB0  F014         	call	_fifo_alinharPrint	;wreg free
 10504  0034DC  0012               	return		;funcret
 10505  0034DE                     __end_of_fifo_add_control:
 10506                           	callstack 0
 10507                           
 10508 ;; *************** function _fifo_add_ciclo *****************
 10509 ;; Defined at:
 10510 ;;		line 299 in file "fifo.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;  ciclos          2    0[COMRAM] unsigned int 
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;		None
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      void 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10524 ;;      Params:         2       0       0       0       0       0       0       0       0
 10525 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10526 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10527 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10528 ;;Total ram usage:        2 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    2
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_main
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           	psect	text42
 10539  003B00                     __ptext42:
 10540                           	callstack 0
 10541  003B00                     _fifo_add_ciclo:
 10542                           	callstack 28
 10543  003B00                     
 10544                           ;fifo.c: 299: void fifo_add_ciclo(unsigned int ciclos);fifo.c: 300: {;fifo.c: 301:     f
      +                          ila[0] = ciclos & 0x00ff;
 10545  003B00  C026  F014         	movff	fifo_add_ciclo@ciclos,_fila
 10546  003B04                     
 10547                           ;fifo.c: 302:     fila[1] = ciclos >> 8;
 10548  003B04  5027               	movf	(fifo_add_ciclo@ciclos+1)^0,w,c
 10549  003B06  6E15               	movwf	(_fila+1)^0,c
 10550  003B08  0012               	return		;funcret
 10551  003B0A                     __end_of_fifo_add_ciclo:
 10552                           	callstack 0
 10553                           
 10554 ;; *************** function _fifo_add *****************
 10555 ;; Defined at:
 10556 ;;		line 254 in file "fifo.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;  passo           1    wreg     const unsigned char 
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  passo           1   15[COMRAM] const unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      void 
 10563 ;; Registers used:
 10564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0
 10571 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10573 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10574 ;;Total ram usage:        1 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    5
 10577 ;; This function calls:
 10578 ;;		_codifica
 10579 ;;		_fifo_alinharPrint
 10580 ;; This function is called by:
 10581 ;;		_main
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           	psect	text43
 10586  0033A0                     __ptext43:
 10587                           	callstack 0
 10588  0033A0                     _fifo_add:
 10589                           	callstack 25
 10590                           
 10591                           ;incstack = 0
 10592                           ;fifo_add@passo stored from wreg
 10593  0033A0  6E35               	movwf	fifo_add@passo^0,c
 10594  0033A2                     
 10595                           ;fifo.c: 254: void fifo_add(const char passo);fifo.c: 255: {;fifo.c: 256:     if(ind_fil
      +                          a < 18)
 10596  0033A2  0E12               	movlw	18
 10597  0033A4  6058               	cpfslt	_ind_fila^0,c
 10598  0033A6  EFD7  F019         	goto	u3461
 10599  0033AA  EFD9  F019         	goto	u3460
 10600  0033AE                     u3461:
 10601  0033AE  EFF9  F019         	goto	l5238
 10602  0033B2                     u3460:
 10603  0033B2                     
 10604                           ;fifo.c: 257:     {;fifo.c: 258:         if(passo)
 10605  0033B2  5035               	movf	fifo_add@passo^0,w,c
 10606  0033B4  B4D8               	btfsc	status,2,c
 10607  0033B6  EFDF  F019         	goto	u3471
 10608  0033BA  EFE1  F019         	goto	u3470
 10609  0033BE                     u3471:
 10610  0033BE  EFF9  F019         	goto	l5238
 10611  0033C2                     u3470:
 10612  0033C2                     
 10613                           ;fifo.c: 259:         {;fifo.c: 260:             codifica('a', &passo);
 10614  0033C2  0E35               	movlw	low fifo_add@passo
 10615  0033C4  6E26               	movwf	codifica@dado^0,c
 10616  0033C6  0E00               	movlw	high fifo_add@passo
 10617  0033C8  6E27               	movwf	(codifica@dado+1)^0,c
 10618  0033CA  0E61               	movlw	97
 10619  0033CC  ECF4  F011         	call	_codifica
 10620  0033D0                     
 10621                           ;fifo.c: 261:             fila[ind_fila] = passo;
 10622  0033D0  0E14               	movlw	low _fila
 10623  0033D2  2458               	addwf	_ind_fila^0,w,c
 10624  0033D4  6ED9               	movwf	fsr2l,c
 10625  0033D6  6ADA               	clrf	fsr2h,c
 10626  0033D8  0E00               	movlw	high _fila
 10627  0033DA  22DA               	addwfc	fsr2h,f,c
 10628  0033DC  C035  FFDF         	movff	fifo_add@passo,indf2
 10629  0033E0                     
 10630                           ;fifo.c: 262:             ind_fila++;
 10631  0033E0  2A58               	incf	_ind_fila^0,f,c
 10632  0033E2                     
 10633                           ;fifo.c: 263:             fila[ind_fila] = 0;
 10634  0033E2  0E14               	movlw	low _fila
 10635  0033E4  2458               	addwf	_ind_fila^0,w,c
 10636  0033E6  6ED9               	movwf	fsr2l,c
 10637  0033E8  6ADA               	clrf	fsr2h,c
 10638  0033EA  0E00               	movlw	high _fila
 10639  0033EC  22DA               	addwfc	fsr2h,f,c
 10640  0033EE  0E00               	movlw	0
 10641  0033F0  6EDF               	movwf	indf2,c
 10642  0033F2                     l5238:
 10643                           
 10644                           ;fifo.c: 266:      fifo_alinharPrint();
 10645  0033F2  ECB0  F014         	call	_fifo_alinharPrint	;wreg free
 10646  0033F6  0012               	return		;funcret
 10647  0033F8                     __end_of_fifo_add:
 10648                           	callstack 0
 10649                           
 10650 ;; *************** function _fifo_alinharPrint *****************
 10651 ;; Defined at:
 10652 ;;		line 482 in file "fifo.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;		None
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;  aux             1   14[COMRAM] unsigned char 
 10657 ;;  i               1   13[COMRAM] unsigned char 
 10658 ;;  cont            1   12[COMRAM] unsigned char 
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  1    wreg      void 
 10661 ;; Registers used:
 10662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10668 ;;      Params:         0       0       0       0       0       0       0       0       0
 10669 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10670 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10671 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10672 ;;Total ram usage:        4 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    4
 10675 ;; This function calls:
 10676 ;;		_dignum_tam
 10677 ;; This function is called by:
 10678 ;;		_fifo_delete
 10679 ;;		_fifo_add
 10680 ;;		_fifo_add_tempo
 10681 ;;		_fifo_add_control
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           	psect	text44
 10686  002960                     __ptext44:
 10687                           	callstack 0
 10688  002960                     _fifo_alinharPrint:
 10689                           	callstack 25
 10690  002960                     
 10691                           ;fifo.c: 484:     unsigned char i;;fifo.c: 485:     unsigned char aux;;fifo.c: 486:     
      +                          unsigned char cont = 0;
 10692  002960  0E00               	movlw	0
 10693  002962  6E32               	movwf	fifo_alinharPrint@cont^0,c
 10694  002964                     
 10695                           ;fifo.c: 488:     for( i=ind_fila-1; i>=2; i-- )
 10696  002964  0458               	decf	_ind_fila^0,w,c
 10697  002966  6E33               	movwf	fifo_alinharPrint@i^0,c
 10698  002968                     l4930:
 10699  002968  0E02               	movlw	2
 10700  00296A  6033               	cpfslt	fifo_alinharPrint@i^0,c
 10701  00296C  EFBA  F014         	goto	u3141
 10702  002970  EFBC  F014         	goto	u3140
 10703  002974                     u3141:
 10704  002974  EFBE  F014         	goto	l4934
 10705  002978                     u3140:
 10706  002978  EF23  F015         	goto	l840
 10707  00297C                     l4934:
 10708                           
 10709                           ;fifo.c: 489:     {;fifo.c: 490:         aux = fila[i];
 10710  00297C  0E14               	movlw	low _fila
 10711  00297E  2433               	addwf	fifo_alinharPrint@i^0,w,c
 10712  002980  6ED9               	movwf	fsr2l,c
 10713  002982  6ADA               	clrf	fsr2h,c
 10714  002984  0E00               	movlw	high _fila
 10715  002986  22DA               	addwfc	fsr2h,f,c
 10716  002988  50DF               	movf	indf2,w,c
 10717  00298A  6E34               	movwf	fifo_alinharPrint@aux^0,c
 10718  00298C                     
 10719                           ;fifo.c: 491:         if( aux <= 0x64 )
 10720  00298C  0E65               	movlw	101
 10721  00298E  6034               	cpfslt	fifo_alinharPrint@aux^0,c
 10722  002990  EFCC  F014         	goto	u3151
 10723  002994  EFCE  F014         	goto	u3150
 10724  002998                     u3151:
 10725  002998  EFD6  F014         	goto	l4940
 10726  00299C                     u3150:
 10727  00299C                     
 10728                           ;fifo.c: 492:             cont += dignum_tam( aux )+1;
 10729  00299C  C034  F02E         	movff	fifo_alinharPrint@aux,dignum_tam@num
 10730  0029A0  6A2F               	clrf	(dignum_tam@num+1)^0,c
 10731  0029A2  EC3D  F01B         	call	_dignum_tam	;wreg free
 10732  0029A6  6E31               	movwf	??_fifo_alinharPrint^0,c
 10733  0029A8  2831               	incf	??_fifo_alinharPrint^0,w,c
 10734  0029AA  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10735  0029AC                     l4940:
 10736                           
 10737                           ;fifo.c: 494:         if( aux > 0x64 && aux <= 0xDC )
 10738  0029AC  0E64               	movlw	100
 10739  0029AE  6434               	cpfsgt	fifo_alinharPrint@aux^0,c
 10740  0029B0  EFDC  F014         	goto	u3161
 10741  0029B4  EFDE  F014         	goto	u3160
 10742  0029B8                     u3161:
 10743  0029B8  EFF1  F014         	goto	l4946
 10744  0029BC                     u3160:
 10745  0029BC  0EDD               	movlw	221
 10746  0029BE  6034               	cpfslt	fifo_alinharPrint@aux^0,c
 10747  0029C0  EFE4  F014         	goto	u3171
 10748  0029C4  EFE6  F014         	goto	u3170
 10749  0029C8                     u3171:
 10750  0029C8  EFF1  F014         	goto	l4946
 10751  0029CC                     u3170:
 10752  0029CC                     
 10753                           ;fifo.c: 495:             cont += dignum_tam( aux - 0x64 )+1;
 10754  0029CC  0E9C               	movlw	156
 10755  0029CE  2434               	addwf	fifo_alinharPrint@aux^0,w,c
 10756  0029D0  6E2E               	movwf	dignum_tam@num^0,c
 10757  0029D2  6A2F               	clrf	(dignum_tam@num+1)^0,c
 10758  0029D4  0EFF               	movlw	255
 10759  0029D6  222F               	addwfc	(dignum_tam@num+1)^0,f,c
 10760  0029D8  EC3D  F01B         	call	_dignum_tam	;wreg free
 10761  0029DC  6E31               	movwf	??_fifo_alinharPrint^0,c
 10762  0029DE  2831               	incf	??_fifo_alinharPrint^0,w,c
 10763  0029E0  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10764  0029E2                     l4946:
 10765                           
 10766                           ;fifo.c: 497:         if( aux > 0xDC && aux < 0xFE )
 10767  0029E2  0EDC               	movlw	220
 10768  0029E4  6434               	cpfsgt	fifo_alinharPrint@aux^0,c
 10769  0029E6  EFF7  F014         	goto	u3181
 10770  0029EA  EFF9  F014         	goto	u3180
 10771  0029EE                     u3181:
 10772  0029EE  EF03  F015         	goto	l836
 10773  0029F2                     u3180:
 10774  0029F2  0EFE               	movlw	254
 10775  0029F4  6034               	cpfslt	fifo_alinharPrint@aux^0,c
 10776  0029F6  EFFF  F014         	goto	u3191
 10777  0029FA  EF01  F015         	goto	u3190
 10778  0029FE                     u3191:
 10779  0029FE  EF03  F015         	goto	l836
 10780  002A02                     u3190:
 10781  002A02                     
 10782                           ;fifo.c: 498:             cont += 2;
 10783  002A02  0E02               	movlw	2
 10784  002A04  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10785  002A06                     l836:
 10786                           
 10787                           ;fifo.c: 500:         if( aux == 0xFE )
 10788  002A06  0EFE               	movlw	254
 10789  002A08  1834               	xorwf	fifo_alinharPrint@aux^0,w,c
 10790  002A0A  A4D8               	btfss	status,2,c
 10791  002A0C  EF0A  F015         	goto	u3201
 10792  002A10  EF0C  F015         	goto	u3200
 10793  002A14                     u3201:
 10794  002A14  EF14  F015         	goto	l4954
 10795  002A18                     u3200:
 10796  002A18                     
 10797                           ;fifo.c: 501:             cont += dignum_tam( aux )+1;
 10798  002A18  C034  F02E         	movff	fifo_alinharPrint@aux,dignum_tam@num
 10799  002A1C  6A2F               	clrf	(dignum_tam@num+1)^0,c
 10800  002A1E  EC3D  F01B         	call	_dignum_tam	;wreg free
 10801  002A22  6E31               	movwf	??_fifo_alinharPrint^0,c
 10802  002A24  2831               	incf	??_fifo_alinharPrint^0,w,c
 10803  002A26  2632               	addwf	fifo_alinharPrint@cont^0,f,c
 10804  002A28                     l4954:
 10805                           
 10806                           ;fifo.c: 503:         if( cont > 20 )
 10807  002A28  0E14               	movlw	20
 10808  002A2A  6432               	cpfsgt	fifo_alinharPrint@cont^0,c
 10809  002A2C  EF1A  F015         	goto	u3211
 10810  002A30  EF1C  F015         	goto	u3210
 10811  002A34                     u3211:
 10812  002A34  EF1E  F015         	goto	l838
 10813  002A38                     u3210:
 10814  002A38  EF23  F015         	goto	l840
 10815  002A3C                     l838:
 10816                           
 10817                           ;fifo.c: 508:             ind_print = i;
 10818  002A3C  C033  F057         	movff	fifo_alinharPrint@i,_ind_print
 10819  002A40                     
 10820                           ;fifo.c: 509:     }
 10821  002A40  0633               	decf	fifo_alinharPrint@i^0,f,c
 10822  002A42  EFB4  F014         	goto	l4930
 10823  002A46                     l840:
 10824  002A46  0012               	return		;funcret
 10825  002A48                     __end_of_fifo_alinharPrint:
 10826                           	callstack 0
 10827                           
 10828 ;; *************** function _dignum_tam *****************
 10829 ;; Defined at:
 10830 ;;		line 470 in file "fifo.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  num             2    8[COMRAM] int 
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;  tam             1   10[COMRAM] unsigned char 
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      unsigned char 
 10837 ;; Registers used:
 10838 ;;		wreg, status,2, status,0, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : 0/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10844 ;;      Params:         2       0       0       0       0       0       0       0       0
 10845 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10846 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10847 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10848 ;;Total ram usage:        3 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:    3
 10851 ;; This function calls:
 10852 ;;		___awdiv
 10853 ;; This function is called by:
 10854 ;;		_fifo_alinharPrint
 10855 ;;		_printExec
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           	psect	text45
 10860  00367A                     __ptext45:
 10861                           	callstack 0
 10862  00367A                     _dignum_tam:
 10863                           	callstack 26
 10864  00367A                     
 10865                           ;fifo.c: 470: unsigned char dignum_tam(int num);fifo.c: 471: {;fifo.c: 472:     unsigned
      +                           char tam = 0;
 10866  00367A  0E00               	movlw	0
 10867  00367C  6E30               	movwf	dignum_tam@tam^0,c
 10868                           
 10869                           ;fifo.c: 474:     while(num != 0)
 10870  00367E  EF50  F01B         	goto	l4706
 10871  003682                     l4702:
 10872                           
 10873                           ;fifo.c: 475:     {;fifo.c: 476:         num /= 10;
 10874  003682  C02E  F026         	movff	dignum_tam@num,___awdiv@dividend
 10875  003686  C02F  F027         	movff	dignum_tam@num+1,___awdiv@dividend+1
 10876  00368A  0E00               	movlw	0
 10877  00368C  6E29               	movwf	(___awdiv@divisor+1)^0,c
 10878  00368E  0E0A               	movlw	10
 10879  003690  6E28               	movwf	___awdiv@divisor^0,c
 10880  003692  EC95  F015         	call	___awdiv	;wreg free
 10881  003696  C026  F02E         	movff	?___awdiv,dignum_tam@num
 10882  00369A  C027  F02F         	movff	?___awdiv+1,dignum_tam@num+1
 10883  00369E                     
 10884                           ;fifo.c: 477:         tam++;
 10885  00369E  2A30               	incf	dignum_tam@tam^0,f,c
 10886  0036A0                     l4706:
 10887                           
 10888                           ;fifo.c: 474:     while(num != 0)
 10889  0036A0  502E               	movf	dignum_tam@num^0,w,c
 10890  0036A2  102F               	iorwf	(dignum_tam@num+1)^0,w,c
 10891  0036A4  A4D8               	btfss	status,2,c
 10892  0036A6  EF57  F01B         	goto	u2791
 10893  0036AA  EF59  F01B         	goto	u2790
 10894  0036AE                     u2791:
 10895  0036AE  EF41  F01B         	goto	l4702
 10896  0036B2                     u2790:
 10897  0036B2                     
 10898                           ;fifo.c: 479:     return ( tam );
 10899  0036B2  5030               	movf	dignum_tam@tam^0,w,c
 10900  0036B4  0012               	return		;funcret
 10901  0036B6                     __end_of_dignum_tam:
 10902                           	callstack 0
 10903                           
 10904 ;; *************** function ___awdiv *****************
 10905 ;; Defined at:
 10906 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;  dividend        2    0[COMRAM] int 
 10909 ;;  divisor         2    2[COMRAM] int 
 10910 ;; Auto vars:     Size  Location     Type
 10911 ;;  quotient        2    6[COMRAM] int 
 10912 ;;  sign            1    5[COMRAM] unsigned char 
 10913 ;;  counter         1    4[COMRAM] unsigned char 
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  2    0[COMRAM] int 
 10916 ;; Registers used:
 10917 ;;		wreg, status,2, status,0
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10923 ;;      Params:         4       0       0       0       0       0       0       0       0
 10924 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10926 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10927 ;;Total ram usage:        8 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    2
 10930 ;; This function calls:
 10931 ;;		Nothing
 10932 ;; This function is called by:
 10933 ;;		_dispLCD_num
 10934 ;;		_fifo_print
 10935 ;;		_dignum_tam
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           	psect	text46
 10940  002B2A                     __ptext46:
 10941                           	callstack 0
 10942  002B2A                     ___awdiv:
 10943                           	callstack 26
 10944  002B2A  0E00               	movlw	0
 10945  002B2C  6E2B               	movwf	___awdiv@sign^0,c
 10946  002B2E  BE29               	btfsc	(___awdiv@divisor+1)^0,7,c
 10947  002B30  EF9E  F015         	goto	u2720
 10948  002B34  EF9C  F015         	goto	u2721
 10949  002B38                     u2721:
 10950  002B38  EFA4  F015         	goto	l4614
 10951  002B3C                     u2720:
 10952  002B3C  6C28               	negf	___awdiv@divisor^0,c
 10953  002B3E  1E29               	comf	(___awdiv@divisor+1)^0,f,c
 10954  002B40  B0D8               	btfsc	status,0,c
 10955  002B42  2A29               	incf	(___awdiv@divisor+1)^0,f,c
 10956  002B44  0E01               	movlw	1
 10957  002B46  6E2B               	movwf	___awdiv@sign^0,c
 10958  002B48                     l4614:
 10959  002B48  BE27               	btfsc	(___awdiv@dividend+1)^0,7,c
 10960  002B4A  EFAB  F015         	goto	u2730
 10961  002B4E  EFA9  F015         	goto	u2731
 10962  002B52                     u2731:
 10963  002B52  EFB1  F015         	goto	l4620
 10964  002B56                     u2730:
 10965  002B56  6C26               	negf	___awdiv@dividend^0,c
 10966  002B58  1E27               	comf	(___awdiv@dividend+1)^0,f,c
 10967  002B5A  B0D8               	btfsc	status,0,c
 10968  002B5C  2A27               	incf	(___awdiv@dividend+1)^0,f,c
 10969  002B5E  0E01               	movlw	1
 10970  002B60  1A2B               	xorwf	___awdiv@sign^0,f,c
 10971  002B62                     l4620:
 10972  002B62  0E00               	movlw	0
 10973  002B64  6E2D               	movwf	(___awdiv@quotient+1)^0,c
 10974  002B66  0E00               	movlw	0
 10975  002B68  6E2C               	movwf	___awdiv@quotient^0,c
 10976  002B6A  5028               	movf	___awdiv@divisor^0,w,c
 10977  002B6C  1029               	iorwf	(___awdiv@divisor+1)^0,w,c
 10978  002B6E  B4D8               	btfsc	status,2,c
 10979  002B70  EFBC  F015         	goto	u2741
 10980  002B74  EFBE  F015         	goto	u2740
 10981  002B78                     u2741:
 10982  002B78  EFE6  F015         	goto	l4642
 10983  002B7C                     u2740:
 10984  002B7C  0E01               	movlw	1
 10985  002B7E  6E2A               	movwf	___awdiv@counter^0,c
 10986  002B80  EFC6  F015         	goto	l4628
 10987  002B84                     l4626:
 10988  002B84  90D8               	bcf	status,0,c
 10989  002B86  3628               	rlcf	___awdiv@divisor^0,f,c
 10990  002B88  3629               	rlcf	(___awdiv@divisor+1)^0,f,c
 10991  002B8A  2A2A               	incf	___awdiv@counter^0,f,c
 10992  002B8C                     l4628:
 10993  002B8C  AE29               	btfss	(___awdiv@divisor+1)^0,7,c
 10994  002B8E  EFCB  F015         	goto	u2751
 10995  002B92  EFCD  F015         	goto	u2750
 10996  002B96                     u2751:
 10997  002B96  EFC2  F015         	goto	l4626
 10998  002B9A                     u2750:
 10999  002B9A                     l4630:
 11000  002B9A  90D8               	bcf	status,0,c
 11001  002B9C  362C               	rlcf	___awdiv@quotient^0,f,c
 11002  002B9E  362D               	rlcf	(___awdiv@quotient+1)^0,f,c
 11003  002BA0  5028               	movf	___awdiv@divisor^0,w,c
 11004  002BA2  5C26               	subwf	___awdiv@dividend^0,w,c
 11005  002BA4  5029               	movf	(___awdiv@divisor+1)^0,w,c
 11006  002BA6  5827               	subwfb	(___awdiv@dividend+1)^0,w,c
 11007  002BA8  A0D8               	btfss	status,0,c
 11008  002BAA  EFD9  F015         	goto	u2761
 11009  002BAE  EFDB  F015         	goto	u2760
 11010  002BB2                     u2761:
 11011  002BB2  EFE0  F015         	goto	l4638
 11012  002BB6                     u2760:
 11013  002BB6  5028               	movf	___awdiv@divisor^0,w,c
 11014  002BB8  5E26               	subwf	___awdiv@dividend^0,f,c
 11015  002BBA  5029               	movf	(___awdiv@divisor+1)^0,w,c
 11016  002BBC  5A27               	subwfb	(___awdiv@dividend+1)^0,f,c
 11017  002BBE  802C               	bsf	___awdiv@quotient^0,0,c
 11018  002BC0                     l4638:
 11019  002BC0  90D8               	bcf	status,0,c
 11020  002BC2  3229               	rrcf	(___awdiv@divisor+1)^0,f,c
 11021  002BC4  3228               	rrcf	___awdiv@divisor^0,f,c
 11022  002BC6  2E2A               	decfsz	___awdiv@counter^0,f,c
 11023  002BC8  EFCD  F015         	goto	l4630
 11024  002BCC                     l4642:
 11025  002BCC  502B               	movf	___awdiv@sign^0,w,c
 11026  002BCE  B4D8               	btfsc	status,2,c
 11027  002BD0  EFEC  F015         	goto	u2771
 11028  002BD4  EFEE  F015         	goto	u2770
 11029  002BD8                     u2771:
 11030  002BD8  EFF2  F015         	goto	l4646
 11031  002BDC                     u2770:
 11032  002BDC  6C2C               	negf	___awdiv@quotient^0,c
 11033  002BDE  1E2D               	comf	(___awdiv@quotient+1)^0,f,c
 11034  002BE0  B0D8               	btfsc	status,0,c
 11035  002BE2  2A2D               	incf	(___awdiv@quotient+1)^0,f,c
 11036  002BE4                     l4646:
 11037  002BE4  C02C  F026         	movff	___awdiv@quotient,?___awdiv
 11038  002BE8  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
 11039  002BEC  0012               	return		;funcret
 11040  002BEE                     __end_of___awdiv:
 11041                           	callstack 0
 11042                           
 11043 ;; *************** function _codifica *****************
 11044 ;; Defined at:
 11045 ;;		line 200 in file "fifo.c"
 11046 ;; Parameters:    Size  Location     Type
 11047 ;;  tipo            1    wreg     unsigned char 
 11048 ;;  dado            2    0[COMRAM] PTR unsigned char 
 11049 ;;		 -> fifo_add_control@c(1), fifo_add_tempo@t(1), fifo_add@passo(1), RAM(2047), 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  tipo            1    4[COMRAM] unsigned char 
 11052 ;; Return value:  Size  Location     Type
 11053 ;;                  1    wreg      void 
 11054 ;; Registers used:
 11055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11061 ;;      Params:         2       0       0       0       0       0       0       0       0
 11062 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11063 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11064 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11065 ;;Total ram usage:        5 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    2
 11068 ;; This function calls:
 11069 ;;		Nothing
 11070 ;; This function is called by:
 11071 ;;		_fifo_delete
 11072 ;;		_fifo_add
 11073 ;;		_fifo_add_tempo
 11074 ;;		_fifo_add_control
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           	psect	text47
 11079  0023E8                     __ptext47:
 11080                           	callstack 0
 11081  0023E8                     _codifica:
 11082                           	callstack 27
 11083                           
 11084                           ;incstack = 0
 11085                           ;codifica@tipo stored from wreg
 11086  0023E8  6E2A               	movwf	codifica@tipo^0,c
 11087  0023EA                     
 11088                           ;fifo.c: 200: void codifica( unsigned char tipo, unsigned char *dado );fifo.c: 201: {;fi
      +                          fo.c: 202:     switch( tipo )
 11089  0023EA  EF84  F012         	goto	l4916
 11090  0023EE                     l4888:
 11091  0023EE  C026  FFD9         	movff	codifica@dado,fsr2l
 11092  0023F2  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11093  0023F6  50DF               	movf	indf2,w,c
 11094  0023F8  A4D8               	btfss	status,2,c
 11095  0023FA  EF01  F012         	goto	u3131
 11096  0023FE  EF03  F012         	goto	u3130
 11097  002402                     u3131:
 11098  002402  EF9D  F012         	goto	l726
 11099  002406                     u3130:
 11100  002406                     
 11101                           ;fifo.c: 205:                        *dado = 254;
 11102  002406  C026  FFD9         	movff	codifica@dado,fsr2l
 11103  00240A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11104  00240E  0EFE               	movlw	254
 11105  002410  6EDF               	movwf	indf2,c
 11106  002412  EF9D  F012         	goto	l726
 11107  002416                     l4892:
 11108  002416  C026  FFD9         	movff	codifica@dado,fsr2l
 11109  00241A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11110  00241E  0E64               	movlw	100
 11111  002420  26DF               	addwf	indf2,f,c
 11112  002422  EF9D  F012         	goto	l726
 11113  002426                     l4894:
 11114  002426  C026  FFD9         	movff	codifica@dado,fsr2l
 11115  00242A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11116  00242E  0EDD               	movlw	221
 11117  002430  6EDF               	movwf	indf2,c
 11118  002432  EF9D  F012         	goto	l726
 11119  002436                     l4896:
 11120  002436  C026  FFD9         	movff	codifica@dado,fsr2l
 11121  00243A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11122  00243E  0EDE               	movlw	222
 11123  002440  6EDF               	movwf	indf2,c
 11124  002442  EF9D  F012         	goto	l726
 11125  002446                     l4898:
 11126  002446  C026  FFD9         	movff	codifica@dado,fsr2l
 11127  00244A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11128  00244E  0EDF               	movlw	223
 11129  002450  6EDF               	movwf	indf2,c
 11130  002452  EF9D  F012         	goto	l726
 11131  002456                     l4900:
 11132  002456  C026  FFD9         	movff	codifica@dado,fsr2l
 11133  00245A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11134  00245E  0EE0               	movlw	224
 11135  002460  6EDF               	movwf	indf2,c
 11136  002462  EF9D  F012         	goto	l726
 11137  002466                     l4902:
 11138  002466  C026  FFD9         	movff	codifica@dado,fsr2l
 11139  00246A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11140  00246E  0EE1               	movlw	225
 11141  002470  6EDF               	movwf	indf2,c
 11142  002472  EF9D  F012         	goto	l726
 11143  002476                     l4904:
 11144  002476  C026  FFD9         	movff	codifica@dado,fsr2l
 11145  00247A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11146  00247E  0EE2               	movlw	226
 11147  002480  6EDF               	movwf	indf2,c
 11148  002482  EF9D  F012         	goto	l726
 11149  002486                     l4906:
 11150  002486  C026  FFD9         	movff	codifica@dado,fsr2l
 11151  00248A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11152  00248E  0EE3               	movlw	227
 11153  002490  6EDF               	movwf	indf2,c
 11154  002492  EF9D  F012         	goto	l726
 11155  002496                     l4908:
 11156  002496  C026  FFD9         	movff	codifica@dado,fsr2l
 11157  00249A  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11158  00249E  0EE4               	movlw	228
 11159  0024A0  6EDF               	movwf	indf2,c
 11160  0024A2  EF9D  F012         	goto	l726
 11161  0024A6                     l4912:
 11162  0024A6  C026  FFD9         	movff	codifica@dado,fsr2l
 11163  0024AA  C027  FFDA         	movff	codifica@dado+1,fsr2h
 11164  0024AE  50DF               	movf	indf2,w,c
 11165  0024B0  6E28               	movwf	??_codifica^0,c
 11166  0024B2  6A29               	clrf	(??_codifica+1)^0,c
 11167                           
 11168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11169                           ; Switch size 1, requested type "simple"
 11170                           ; Number of cases is 1, Range of values is 0 to 0
 11171                           ; switch strategies available:
 11172                           ; Name         Instructions Cycles
 11173                           ; simple_byte            4     3 (average)
 11174                           ;	Chosen strategy is simple_byte
 11175  0024B4  5029               	movf	(??_codifica+1)^0,w,c
 11176  0024B6  0A00               	xorlw	0	; case 0
 11177  0024B8  B4D8               	btfsc	status,2,c
 11178  0024BA  EF61  F012         	goto	l7364
 11179  0024BE  EF9D  F012         	goto	l726
 11180  0024C2                     l7364:
 11181                           
 11182                           ; Switch size 1, requested type "simple"
 11183                           ; Number of cases is 8, Range of values is 65 to 100
 11184                           ; switch strategies available:
 11185                           ; Name         Instructions Cycles
 11186                           ; simple_byte           25    13 (average)
 11187                           ;	Chosen strategy is simple_byte
 11188  0024C2  5028               	movf	??_codifica^0,w,c
 11189  0024C4  0A41               	xorlw	65	; case 65
 11190  0024C6  B4D8               	btfsc	status,2,c
 11191  0024C8  EF13  F012         	goto	l4894
 11192  0024CC  0A03               	xorlw	3	; case 66
 11193  0024CE  B4D8               	btfsc	status,2,c
 11194  0024D0  EF23  F012         	goto	l4898
 11195  0024D4  0A01               	xorlw	1	; case 67
 11196  0024D6  B4D8               	btfsc	status,2,c
 11197  0024D8  EF33  F012         	goto	l4902
 11198  0024DC  0A07               	xorlw	7	; case 68
 11199  0024DE  B4D8               	btfsc	status,2,c
 11200  0024E0  EF43  F012         	goto	l4906
 11201  0024E4  0A25               	xorlw	37	; case 97
 11202  0024E6  B4D8               	btfsc	status,2,c
 11203  0024E8  EF1B  F012         	goto	l4896
 11204  0024EC  0A03               	xorlw	3	; case 98
 11205  0024EE  B4D8               	btfsc	status,2,c
 11206  0024F0  EF2B  F012         	goto	l4900
 11207  0024F4  0A01               	xorlw	1	; case 99
 11208  0024F6  B4D8               	btfsc	status,2,c
 11209  0024F8  EF3B  F012         	goto	l4904
 11210  0024FC  0A07               	xorlw	7	; case 100
 11211  0024FE  B4D8               	btfsc	status,2,c
 11212  002500  EF4B  F012         	goto	l4908
 11213  002504  EF9D  F012         	goto	l726
 11214  002508                     l4916:
 11215  002508  502A               	movf	codifica@tipo^0,w,c
 11216  00250A  6E28               	movwf	??_codifica^0,c
 11217  00250C  6A29               	clrf	(??_codifica+1)^0,c
 11218                           
 11219                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11220                           ; Switch size 1, requested type "simple"
 11221                           ; Number of cases is 1, Range of values is 0 to 0
 11222                           ; switch strategies available:
 11223                           ; Name         Instructions Cycles
 11224                           ; simple_byte            4     3 (average)
 11225                           ;	Chosen strategy is simple_byte
 11226  00250E  5029               	movf	(??_codifica+1)^0,w,c
 11227  002510  0A00               	xorlw	0	; case 0
 11228  002512  B4D8               	btfsc	status,2,c
 11229  002514  EF8E  F012         	goto	l7366
 11230  002518  EF9D  F012         	goto	l726
 11231  00251C                     l7366:
 11232                           
 11233                           ; Switch size 1, requested type "simple"
 11234                           ; Number of cases is 3, Range of values is 97 to 116
 11235                           ; switch strategies available:
 11236                           ; Name         Instructions Cycles
 11237                           ; simple_byte           10     6 (average)
 11238                           ;	Chosen strategy is simple_byte
 11239  00251C  5028               	movf	??_codifica^0,w,c
 11240  00251E  0A61               	xorlw	97	; case 97
 11241  002520  B4D8               	btfsc	status,2,c
 11242  002522  EF53  F012         	goto	l4912
 11243  002526  0A11               	xorlw	17	; case 112
 11244  002528  B4D8               	btfsc	status,2,c
 11245  00252A  EFF7  F011         	goto	l4888
 11246  00252E  0A04               	xorlw	4	; case 116
 11247  002530  B4D8               	btfsc	status,2,c
 11248  002532  EF0B  F012         	goto	l4892
 11249  002536  EF9D  F012         	goto	l726
 11250  00253A                     l726:
 11251  00253A  0012               	return		;funcret
 11252  00253C                     __end_of_codifica:
 11253                           	callstack 0
 11254                           
 11255 ;; *************** function _dispLCD_str *****************
 11256 ;; Defined at:
 11257 ;;		line 250 in file "dispLCD4vias.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;  str             2    7[COMRAM] PTR const unsigned char 
 11260 ;;		 -> STR_27(78), STR_26(62), STR_15(81), STR_4(83), 
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;  c               1   10[COMRAM] unsigned char 
 11263 ;;  lin             1    9[COMRAM] unsigned char 
 11264 ;; Return value:  Size  Location     Type
 11265 ;;                  1    wreg      void 
 11266 ;; Registers used:
 11267 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11268 ;; Tracked objects:
 11269 ;;		On entry : 0/0
 11270 ;;		On exit  : 0/0
 11271 ;;		Unchanged: 0/0
 11272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11273 ;;      Params:         2       0       0       0       0       0       0       0       0
 11274 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11275 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11276 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11277 ;;Total ram usage:        4 bytes
 11278 ;; Hardware stack levels used:    1
 11279 ;; Hardware stack levels required when called:    4
 11280 ;; This function calls:
 11281 ;;		_dispLCD_dataReg
 11282 ;;		_dispLCD_lincol
 11283 ;; This function is called by:
 11284 ;;		_main
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text48
 11289  003238                     __ptext48:
 11290                           	callstack 0
 11291  003238                     _dispLCD_str:
 11292                           	callstack 26
 11293  003238                     
 11294                           ;dispLCD4vias.c: 250: void dispLCD_str( const char * str );dispLCD4vias.c: 251: {;dispLC
      +                          D4vias.c: 252:     char lin = 0;
 11295  003238  0E00               	movlw	0
 11296  00323A  6E2F               	movwf	dispLCD_str@lin^0,c
 11297  00323C                     
 11298                           ;dispLCD4vias.c: 253:     char c;;dispLCD4vias.c: 254:     dispLCD_lincol(0,0);
 11299  00323C  0E00               	movlw	0
 11300  00323E  6E28               	movwf	dispLCD_lincol@col^0,c
 11301  003240  0E00               	movlw	0
 11302  003242  EC8C  F018         	call	_dispLCD_lincol
 11303                           
 11304                           ;dispLCD4vias.c: 256:     while( c = *str )
 11305  003246  EF3B  F019         	goto	l5662
 11306  00324A                     l5654:
 11307                           
 11308                           ;dispLCD4vias.c: 257:     {;dispLCD4vias.c: 258:         if( c != '\n' )
 11309  00324A  0E0A               	movlw	10
 11310  00324C  1830               	xorwf	dispLCD_str@c^0,w,c
 11311  00324E  B4D8               	btfsc	status,2,c
 11312  003250  EF2C  F019         	goto	u3871
 11313  003254  EF2E  F019         	goto	u3870
 11314  003258                     u3871:
 11315  003258  EF33  F019         	goto	l5658
 11316  00325C                     u3870:
 11317  00325C                     
 11318                           ;dispLCD4vias.c: 259:             dispLCD_dataReg( c );
 11319  00325C  5030               	movf	dispLCD_str@c^0,w,c
 11320  00325E  EC24  F01A         	call	_dispLCD_dataReg
 11321  003262  EF39  F019         	goto	l5660
 11322  003266                     l5658:
 11323                           
 11324                           ;dispLCD4vias.c: 261:             dispLCD_lincol(++lin,0);
 11325  003266  0E00               	movlw	0
 11326  003268  6E28               	movwf	dispLCD_lincol@col^0,c
 11327  00326A  2A2F               	incf	dispLCD_str@lin^0,f,c
 11328  00326C  502F               	movf	dispLCD_str@lin^0,w,c
 11329  00326E  EC8C  F018         	call	_dispLCD_lincol
 11330  003272                     l5660:
 11331                           
 11332                           ;dispLCD4vias.c: 262:         ++str;
 11333  003272  4A2D               	infsnz	dispLCD_str@str^0,f,c
 11334  003274  2A2E               	incf	(dispLCD_str@str+1)^0,f,c
 11335  003276                     l5662:
 11336                           
 11337                           ;dispLCD4vias.c: 256:     while( c = *str )
 11338  003276  C02D  FFF6         	movff	dispLCD_str@str,tblptrl
 11339  00327A  C02E  FFF7         	movff	dispLCD_str@str+1,tblptrh
 11340  00327E                     	if	0	;tblptru may be non-zero
 11341  00327E                     	endif
 11342  00327E                     	if	0	;tblptru may be non-zero
 11343  00327E                     	endif
 11344  00327E  0008               	tblrd		*
 11345  003280  CFF5 F030          	movff	tablat,dispLCD_str@c
 11346  003284  5030               	movf	dispLCD_str@c^0,w,c
 11347  003286  A4D8               	btfss	status,2,c
 11348  003288  EF48  F019         	goto	u3881
 11349  00328C  EF4A  F019         	goto	u3880
 11350  003290                     u3881:
 11351  003290  EF25  F019         	goto	l5654
 11352  003294                     u3880:
 11353  003294  0012               	return		;funcret
 11354  003296                     __end_of_dispLCD_str:
 11355                           	callstack 0
 11356                           
 11357 ;; *************** function _dispLCD_init *****************
 11358 ;; Defined at:
 11359 ;;		line 165 in file "dispLCD4vias.c"
 11360 ;; Parameters:    Size  Location     Type
 11361 ;;		None
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;		None
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  1    wreg      void 
 11366 ;; Registers used:
 11367 ;;		wreg, status,2, status,0, cstack
 11368 ;; Tracked objects:
 11369 ;;		On entry : 0/0
 11370 ;;		On exit  : 0/0
 11371 ;;		Unchanged: 0/0
 11372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11373 ;;      Params:         0       0       0       0       0       0       0       0       0
 11374 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11375 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11376 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11377 ;;Total ram usage:        0 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:    3
 11380 ;; This function calls:
 11381 ;;		_delay
 11382 ;;		_dispLCD_instReg
 11383 ;; This function is called by:
 11384 ;;		_main
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text49
 11389  00375E                     __ptext49:
 11390                           	callstack 0
 11391  00375E                     _dispLCD_init:
 11392                           	callstack 27
 11393  00375E                     
 11394                           ;dispLCD4vias.c: 167:     ADCON1 = 0xFF;
 11395  00375E  68C1               	setf	193,c	;volatile
 11396                           
 11397                           ;dispLCD4vias.c: 170:     TRISBbits.TRISB2 = 0;
 11398  003760  9493               	bcf	147,2,c	;volatile
 11399                           
 11400                           ;dispLCD4vias.c: 171:     TRISBbits.TRISB3 = 0;
 11401  003762  9693               	bcf	147,3,c	;volatile
 11402                           
 11403                           ;dispLCD4vias.c: 172:     TRISBbits.TRISB4 = 0;
 11404  003764  9893               	bcf	147,4,c	;volatile
 11405                           
 11406                           ;dispLCD4vias.c: 173:     TRISBbits.TRISB5 = 0;
 11407  003766  9A93               	bcf	147,5,c	;volatile
 11408                           
 11409                           ;dispLCD4vias.c: 175:     TRISBbits.TRISB6 = 0;
 11410  003768  9C93               	bcf	147,6,c	;volatile
 11411                           
 11412                           ;dispLCD4vias.c: 176:     TRISBbits.TRISB7 = 0;
 11413  00376A  9E93               	bcf	147,7,c	;volatile
 11414                           
 11415                           ;dispLCD4vias.c: 178:     LCDbits.EN = 1;
 11416  00376C  8E8A               	bsf	138,7,c	;volatile
 11417  00376E                     
 11418                           ;dispLCD4vias.c: 179:     delay(5);
 11419  00376E  0E00               	movlw	0
 11420  003770  6E27               	movwf	(delay@t+1)^0,c
 11421  003772  0E05               	movlw	5
 11422  003774  6E26               	movwf	delay@t^0,c
 11423  003776  EC27  F01C         	call	_delay	;wreg free
 11424                           
 11425                           ;dispLCD4vias.c: 180:     dispLCD_instReg( 0x20|0x00|0x08);
 11426  00377A  0E28               	movlw	40
 11427  00377C  ECC4  F013         	call	_dispLCD_instReg
 11428                           
 11429                           ;dispLCD4vias.c: 181:     dispLCD_instReg( 0x08|0x04|0x00|0x00 );
 11430  003780  0E0C               	movlw	12
 11431  003782  ECC4  F013         	call	_dispLCD_instReg
 11432                           
 11433                           ;dispLCD4vias.c: 182:     dispLCD_instReg( 0x01 );
 11434  003786  0E01               	movlw	1
 11435  003788  ECC4  F013         	call	_dispLCD_instReg
 11436                           
 11437                           ;dispLCD4vias.c: 183:     dispLCD_instReg( 0x02 );
 11438  00378C  0E02               	movlw	2
 11439  00378E  ECC4  F013         	call	_dispLCD_instReg
 11440  003792  0012               	return		;funcret
 11441  003794                     __end_of_dispLCD_init:
 11442                           	callstack 0
 11443                           
 11444 ;; *************** function _dispLCD_clr *****************
 11445 ;; Defined at:
 11446 ;;		line 244 in file "dispLCD4vias.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;		None
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;		None
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  1    wreg      void 
 11453 ;; Registers used:
 11454 ;;		wreg, status,2, status,0, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11460 ;;      Params:         0       0       0       0       0       0       0       0       0
 11461 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11462 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11463 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11464 ;;Total ram usage:        0 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; Hardware stack levels required when called:    3
 11467 ;; This function calls:
 11468 ;;		_dispLCD_instReg
 11469 ;; This function is called by:
 11470 ;;		_main
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           	psect	text50
 11475  003B0A                     __ptext50:
 11476                           	callstack 0
 11477  003B0A                     _dispLCD_clr:
 11478                           	callstack 27
 11479  003B0A                     
 11480                           ;dispLCD4vias.c: 246:     dispLCD_instReg(0x01);
 11481  003B0A  0E01               	movlw	1
 11482  003B0C  ECC4  F013         	call	_dispLCD_instReg
 11483  003B10  0012               	return		;funcret
 11484  003B12                     __end_of_dispLCD_clr:
 11485                           	callstack 0
 11486                           
 11487 ;; *************** function _dispLCD *****************
 11488 ;; Defined at:
 11489 ;;		line 187 in file "dispLCD4vias.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;  lin             1    wreg     unsigned char 
 11492 ;;  col             1    7[COMRAM] unsigned char 
 11493 ;;  str             2    8[COMRAM] PTR const unsigned char 
 11494 ;;		 -> STR_32(21), STR_31(21), STR_30(21), STR_29(2), 
 11495 ;;		 -> STR_28(2), STR_25(21), STR_24(21), STR_23(21), 
 11496 ;;		 -> STR_22(21), STR_21(21), STR_20(8), STR_19(21), 
 11497 ;;		 -> STR_18(21), STR_17(21), STR_16(21), STR_14(21), 
 11498 ;;		 -> STR_13(21), STR_12(2), STR_11(2), STR_10(21), 
 11499 ;;		 -> STR_9(21), STR_8(21), STR_7(21), STR_6(21), 
 11500 ;;		 -> STR_5(21), STR_3(21), STR_2(2), STR_1(2), 
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;  lin             1   11[COMRAM] unsigned char 
 11503 ;;  pos             1   10[COMRAM] unsigned char 
 11504 ;; Return value:  Size  Location     Type
 11505 ;;                  1    wreg      void 
 11506 ;; Registers used:
 11507 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11513 ;;      Params:         3       0       0       0       0       0       0       0       0
 11514 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11515 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11516 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11517 ;;Total ram usage:        5 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    4
 11520 ;; This function calls:
 11521 ;;		_dispLCD_dataReg
 11522 ;;		_dispLCD_lincol
 11523 ;; This function is called by:
 11524 ;;		_main
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           	psect	text51
 11529  0034DE                     __ptext51:
 11530                           	callstack 0
 11531  0034DE                     _dispLCD:
 11532                           	callstack 26
 11533                           
 11534                           ;incstack = 0
 11535                           ;dispLCD@lin stored from wreg
 11536  0034DE  6E31               	movwf	dispLCD@lin^0,c
 11537  0034E0                     
 11538                           ;dispLCD4vias.c: 187: void dispLCD( unsigned char lin, unsigned char col, const char * s
      +                          tr );dispLCD4vias.c: 188: {;dispLCD4vias.c: 189:     char pos = col;
 11539  0034E0  C02D  F030         	movff	dispLCD@col,dispLCD@pos
 11540  0034E4                     
 11541                           ;dispLCD4vias.c: 190:     dispLCD_lincol( lin, col );
 11542  0034E4  C02D  F028         	movff	dispLCD@col,dispLCD_lincol@col
 11543  0034E8  5031               	movf	dispLCD@lin^0,w,c
 11544  0034EA  EC8C  F018         	call	_dispLCD_lincol
 11545                           
 11546                           ;dispLCD4vias.c: 192:     while( *str )
 11547  0034EE  EF84  F01A         	goto	l5384
 11548  0034F2                     l5378:
 11549                           
 11550                           ;dispLCD4vias.c: 193:     {;dispLCD4vias.c: 194:         dispLCD_dataReg( *str );
 11551  0034F2  C02E  FFF6         	movff	dispLCD@str,tblptrl
 11552  0034F6  C02F  FFF7         	movff	dispLCD@str+1,tblptrh
 11553  0034FA                     	if	0	;tblptru may be non-zero
 11554  0034FA                     	endif
 11555  0034FA                     	if	0	;tblptru may be non-zero
 11556  0034FA                     	endif
 11557  0034FA  0008               	tblrd		*
 11558  0034FC  50F5               	movf	tablat,w,c
 11559  0034FE  EC24  F01A         	call	_dispLCD_dataReg
 11560  003502                     
 11561                           ;dispLCD4vias.c: 195:         ++str;
 11562  003502  4A2E               	infsnz	dispLCD@str^0,f,c
 11563  003504  2A2F               	incf	(dispLCD@str+1)^0,f,c
 11564  003506                     
 11565                           ;dispLCD4vias.c: 196:         ++pos;
 11566  003506  2A30               	incf	dispLCD@pos^0,f,c
 11567  003508                     l5384:
 11568                           
 11569                           ;dispLCD4vias.c: 192:     while( *str )
 11570  003508  C02E  FFF6         	movff	dispLCD@str,tblptrl
 11571  00350C  C02F  FFF7         	movff	dispLCD@str+1,tblptrh
 11572  003510                     	if	0	;tblptru may be non-zero
 11573  003510                     	endif
 11574  003510                     	if	0	;tblptru may be non-zero
 11575  003510                     	endif
 11576  003510  0008               	tblrd		*
 11577  003512  50F5               	movf	tablat,w,c
 11578  003514  0900               	iorlw	0
 11579  003516  A4D8               	btfss	status,2,c
 11580  003518  EF90  F01A         	goto	u3641
 11581  00351C  EF92  F01A         	goto	u3640
 11582  003520                     u3641:
 11583  003520  EF79  F01A         	goto	l5378
 11584  003524                     u3640:
 11585  003524  0012               	return		;funcret
 11586  003526                     __end_of_dispLCD:
 11587                           	callstack 0
 11588                           
 11589 ;; *************** function _dispLCD_lincol *****************
 11590 ;; Defined at:
 11591 ;;		line 150 in file "dispLCD4vias.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;  lin             1    wreg     unsigned char 
 11594 ;;  col             1    2[COMRAM] unsigned char 
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  lin             1    5[COMRAM] unsigned char 
 11597 ;;  aux             1    6[COMRAM] unsigned char 
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  1    wreg      void 
 11600 ;; Registers used:
 11601 ;;		wreg, status,2, status,0, cstack
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11607 ;;      Params:         1       0       0       0       0       0       0       0       0
 11608 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11609 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11610 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11611 ;;Total ram usage:        5 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    3
 11614 ;; This function calls:
 11615 ;;		_dispLCD_instReg
 11616 ;; This function is called by:
 11617 ;;		_main
 11618 ;;		_dispLCD
 11619 ;;		_dispLCD_num
 11620 ;;		_dispLCD_str
 11621 ;;		_fifo_print
 11622 ;;		_printExec
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           	psect	text52
 11627  003118                     __ptext52:
 11628                           	callstack 0
 11629  003118                     _dispLCD_lincol:
 11630                           	callstack 25
 11631                           
 11632                           ;incstack = 0
 11633                           ;dispLCD_lincol@lin stored from wreg
 11634  003118  6E2B               	movwf	dispLCD_lincol@lin^0,c
 11635  00311A                     
 11636                           ;dispLCD4vias.c: 150: void dispLCD_lincol( unsigned char lin, unsigned char col);dispLCD
      +                          4vias.c: 151: {;dispLCD4vias.c: 152:     char aux = 0x00;
 11637  00311A  0E00               	movlw	0
 11638  00311C  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11639                           
 11640                           ;dispLCD4vias.c: 154:     switch(lin)
 11641  00311E  EF9D  F018         	goto	l4666
 11642  003122                     l4658:
 11643  003122  0E40               	movlw	64
 11644  003124  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11645  003126  EFB6  F018         	goto	l4668
 11646  00312A                     l4660:
 11647  00312A  0E14               	movlw	20
 11648  00312C  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11649  00312E  EFB6  F018         	goto	l4668
 11650  003132                     l4662:
 11651  003132  0E54               	movlw	84
 11652  003134  6E2C               	movwf	dispLCD_lincol@aux^0,c
 11653  003136  EFB6  F018         	goto	l4668
 11654  00313A                     l4666:
 11655  00313A  502B               	movf	dispLCD_lincol@lin^0,w,c
 11656  00313C  6E29               	movwf	??_dispLCD_lincol^0,c
 11657  00313E  6A2A               	clrf	(??_dispLCD_lincol+1)^0,c
 11658                           
 11659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11660                           ; Switch size 1, requested type "simple"
 11661                           ; Number of cases is 1, Range of values is 0 to 0
 11662                           ; switch strategies available:
 11663                           ; Name         Instructions Cycles
 11664                           ; simple_byte            4     3 (average)
 11665                           ;	Chosen strategy is simple_byte
 11666  003140  502A               	movf	(??_dispLCD_lincol+1)^0,w,c
 11667  003142  0A00               	xorlw	0	; case 0
 11668  003144  B4D8               	btfsc	status,2,c
 11669  003146  EFA7  F018         	goto	l7368
 11670  00314A  EFB6  F018         	goto	l4668
 11671  00314E                     l7368:
 11672                           
 11673                           ; Switch size 1, requested type "simple"
 11674                           ; Number of cases is 3, Range of values is 1 to 3
 11675                           ; switch strategies available:
 11676                           ; Name         Instructions Cycles
 11677                           ; simple_byte           10     6 (average)
 11678                           ;	Chosen strategy is simple_byte
 11679  00314E  5029               	movf	??_dispLCD_lincol^0,w,c
 11680  003150  0A01               	xorlw	1	; case 1
 11681  003152  B4D8               	btfsc	status,2,c
 11682  003154  EF91  F018         	goto	l4658
 11683  003158  0A03               	xorlw	3	; case 2
 11684  00315A  B4D8               	btfsc	status,2,c
 11685  00315C  EF95  F018         	goto	l4660
 11686  003160  0A01               	xorlw	1	; case 3
 11687  003162  B4D8               	btfsc	status,2,c
 11688  003164  EF99  F018         	goto	l4662
 11689  003168  EFB6  F018         	goto	l4668
 11690  00316C                     l4668:
 11691                           
 11692                           ;dispLCD4vias.c: 161:     dispLCD_instReg( (0x80+(aux + (col + 0x00) & 0x7F)) );
 11693  00316C  502C               	movf	dispLCD_lincol@aux^0,w,c
 11694  00316E  2428               	addwf	dispLCD_lincol@col^0,w,c
 11695  003170  0B7F               	andlw	127
 11696  003172  0F80               	addlw	128
 11697  003174  ECC4  F013         	call	_dispLCD_instReg
 11698  003178  0012               	return		;funcret
 11699  00317A                     __end_of_dispLCD_lincol:
 11700                           	callstack 0
 11701                           
 11702 ;; *************** function _dispLCD_instReg *****************
 11703 ;; Defined at:
 11704 ;;		line 101 in file "dispLCD4vias.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  i               1    wreg     unsigned char 
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  i               1    1[COMRAM] unsigned char 
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  1    wreg      void 
 11711 ;; Registers used:
 11712 ;;		wreg, status,2, status,0
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11718 ;;      Params:         0       0       0       0       0       0       0       0       0
 11719 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11720 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11721 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11722 ;;Total ram usage:        2 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    2
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_dispLCD_lincol
 11729 ;;		_dispLCD_init
 11730 ;;		_dispLCD_clr
 11731 ;; This function uses a non-reentrant model
 11732 ;;
 11733                           
 11734                           	psect	text53
 11735  002788                     __ptext53:
 11736                           	callstack 0
 11737  002788                     _dispLCD_instReg:
 11738                           	callstack 25
 11739                           
 11740                           ;incstack = 0
 11741                           ;dispLCD_instReg@i stored from wreg
 11742  002788  6E27               	movwf	dispLCD_instReg@i^0,c
 11743  00278A                     
 11744                           ;dispLCD4vias.c: 101: void dispLCD_instReg( unsigned char i );dispLCD4vias.c: 102: {;dis
      +                          pLCD4vias.c: 103:     LCDbits.RS = 0;
 11745  00278A  9C8A               	bcf	138,6,c	;volatile
 11746  00278C                     
 11747                           ;dispLCD4vias.c: 104:     LCDbits.BUS = (i>>4);
 11748  00278C  C027  F026         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 11749  002790  3A26               	swapf	??_dispLCD_instReg^0,f,c
 11750  002792  0E0F               	movlw	15
 11751  002794  1626               	andwf	??_dispLCD_instReg^0,f,c
 11752  002796  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11753  002798  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11754  00279A  508A               	movf	138,w,c	;volatile
 11755  00279C  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11756  00279E  0BC3               	andlw	-61
 11757  0027A0  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11758  0027A2  6E8A               	movwf	138,c	;volatile
 11759  0027A4                     
 11760                           ;dispLCD4vias.c: 106:     LCDbits.EN = 0;
 11761  0027A4  9E8A               	bcf	138,7,c	;volatile
 11762                           
 11763                           ;dispLCD4vias.c: 107:     if( i == 0x01 || i == 0x02 )
 11764  0027A6  0427               	decf	dispLCD_instReg@i^0,w,c
 11765  0027A8  B4D8               	btfsc	status,2,c
 11766  0027AA  EFD9  F013         	goto	u2671
 11767  0027AE  EFDB  F013         	goto	u2670
 11768  0027B2                     u2671:
 11769  0027B2  EFE4  F013         	goto	l4572
 11770  0027B6                     u2670:
 11771  0027B6  0E02               	movlw	2
 11772  0027B8  1827               	xorwf	dispLCD_instReg@i^0,w,c
 11773  0027BA  A4D8               	btfss	status,2,c
 11774  0027BC  EFE2  F013         	goto	u2681
 11775  0027C0  EFE4  F013         	goto	u2680
 11776  0027C4                     u2681:
 11777  0027C4  EFED  F013         	goto	l4574
 11778  0027C8                     u2680:
 11779  0027C8                     l4572:
 11780                           
 11781                           ;dispLCD4vias.c: 108:         _delay((unsigned long)((2)*(20000000/4000.0)));
 11782  0027C8  0E0D               	movlw	13
 11783  0027CA  6E26               	movwf	??_dispLCD_instReg^0,c
 11784  0027CC  0EFC               	movlw	252
 11785  0027CE                     u5227:
 11786  0027CE  2EE8               	decfsz	wreg,f,c
 11787  0027D0  D7FE               	bra	u5227
 11788  0027D2  2E26               	decfsz	??_dispLCD_instReg^0,f,c
 11789  0027D4  D7FC               	bra	u5227
 11790  0027D6  EFF1  F013         	goto	l4576
 11791  0027DA                     l4574:
 11792                           
 11793                           ;dispLCD4vias.c: 110:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 11794  0027DA  0E42               	movlw	66
 11795  0027DC                     u5237:
 11796  0027DC  2EE8               	decfsz	wreg,f,c
 11797  0027DE  D7FE               	bra	u5237
 11798  0027E0  D000               	nop2	
 11799  0027E2                     l4576:
 11800                           
 11801                           ;dispLCD4vias.c: 111:     LCDbits.EN = 1;
 11802  0027E2  8E8A               	bsf	138,7,c	;volatile
 11803  0027E4                     
 11804                           ;dispLCD4vias.c: 114:     if( (i & 0xF0) == (0x20 | 0x00) )
 11805  0027E4  5027               	movf	dispLCD_instReg@i^0,w,c
 11806  0027E6  0BF0               	andlw	240
 11807  0027E8  0A20               	xorlw	32
 11808  0027EA  A4D8               	btfss	status,2,c
 11809  0027EC  EFFA  F013         	goto	u2691
 11810  0027F0  EFFC  F013         	goto	u2690
 11811  0027F4                     u2691:
 11812  0027F4  EF0F  F014         	goto	l4590
 11813  0027F8                     u2690:
 11814  0027F8                     
 11815                           ;dispLCD4vias.c: 115:     {;dispLCD4vias.c: 116:         LCDbits.RS = 0;
 11816  0027F8  9C8A               	bcf	138,6,c	;volatile
 11817  0027FA                     
 11818                           ;dispLCD4vias.c: 117:         LCDbits.BUS = i>>4;
 11819  0027FA  C027  F026         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 11820  0027FE  3A26               	swapf	??_dispLCD_instReg^0,f,c
 11821  002800  0E0F               	movlw	15
 11822  002802  1626               	andwf	??_dispLCD_instReg^0,f,c
 11823  002804  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11824  002806  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11825  002808  508A               	movf	138,w,c	;volatile
 11826  00280A  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11827  00280C  0BC3               	andlw	-61
 11828  00280E  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11829  002810  6E8A               	movwf	138,c	;volatile
 11830  002812                     
 11831                           ;dispLCD4vias.c: 118:         LCDbits.EN = 0;
 11832  002812  9E8A               	bcf	138,7,c	;volatile
 11833  002814                     
 11834                           ;dispLCD4vias.c: 119:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 11835  002814  0E42               	movlw	66
 11836  002816                     u5247:
 11837  002816  2EE8               	decfsz	wreg,f,c
 11838  002818  D7FE               	bra	u5247
 11839  00281A  D000               	nop2	
 11840  00281C                     
 11841                           ;dispLCD4vias.c: 120:         LCDbits.EN = 1;
 11842  00281C  8E8A               	bsf	138,7,c	;volatile
 11843  00281E                     l4590:
 11844                           
 11845                           ;dispLCD4vias.c: 123:     LCDbits.RS = 0;
 11846  00281E  9C8A               	bcf	138,6,c	;volatile
 11847  002820                     
 11848                           ;dispLCD4vias.c: 124:     LCDbits.BUS = i & 0x0F;
 11849  002820  C027  F026         	movff	dispLCD_instReg@i,??_dispLCD_instReg
 11850  002824  0E0F               	movlw	15
 11851  002826  1626               	andwf	??_dispLCD_instReg^0,f,c
 11852  002828  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11853  00282A  4626               	rlncf	??_dispLCD_instReg^0,f,c
 11854  00282C  508A               	movf	138,w,c	;volatile
 11855  00282E  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11856  002830  0BC3               	andlw	-61
 11857  002832  1826               	xorwf	??_dispLCD_instReg^0,w,c
 11858  002834  6E8A               	movwf	138,c	;volatile
 11859  002836                     
 11860                           ;dispLCD4vias.c: 125:     LCDbits.EN = 0;
 11861  002836  9E8A               	bcf	138,7,c	;volatile
 11862  002838                     
 11863                           ;dispLCD4vias.c: 126:     if( i == 0x01 || i == 0x02 )
 11864  002838  0427               	decf	dispLCD_instReg@i^0,w,c
 11865  00283A  B4D8               	btfsc	status,2,c
 11866  00283C  EF22  F014         	goto	u2701
 11867  002840  EF24  F014         	goto	u2700
 11868  002844                     u2701:
 11869  002844  EF2D  F014         	goto	l4600
 11870  002848                     u2700:
 11871  002848  0E02               	movlw	2
 11872  00284A  1827               	xorwf	dispLCD_instReg@i^0,w,c
 11873  00284C  A4D8               	btfss	status,2,c
 11874  00284E  EF2B  F014         	goto	u2711
 11875  002852  EF2D  F014         	goto	u2710
 11876  002856                     u2711:
 11877  002856  EF36  F014         	goto	l4602
 11878  00285A                     u2710:
 11879  00285A                     l4600:
 11880                           
 11881                           ;dispLCD4vias.c: 127:         _delay((unsigned long)((2)*(20000000/4000.0)));
 11882  00285A  0E0D               	movlw	13
 11883  00285C  6E26               	movwf	??_dispLCD_instReg^0,c
 11884  00285E  0EFC               	movlw	252
 11885  002860                     u5257:
 11886  002860  2EE8               	decfsz	wreg,f,c
 11887  002862  D7FE               	bra	u5257
 11888  002864  2E26               	decfsz	??_dispLCD_instReg^0,f,c
 11889  002866  D7FC               	bra	u5257
 11890  002868  EF3A  F014         	goto	l4604
 11891  00286C                     l4602:
 11892                           
 11893                           ;dispLCD4vias.c: 129:         _delay((unsigned long)((40)*(20000000/4000000.0)));
 11894  00286C  0E42               	movlw	66
 11895  00286E                     u5267:
 11896  00286E  2EE8               	decfsz	wreg,f,c
 11897  002870  D7FE               	bra	u5267
 11898  002872  D000               	nop2	
 11899  002874                     l4604:
 11900                           
 11901                           ;dispLCD4vias.c: 130:     LCDbits.EN = 1;
 11902  002874  8E8A               	bsf	138,7,c	;volatile
 11903  002876  0012               	return		;funcret
 11904  002878                     __end_of_dispLCD_instReg:
 11905                           	callstack 0
 11906                           
 11907 ;; *************** function _dispLCD_dataReg *****************
 11908 ;; Defined at:
 11909 ;;		line 134 in file "dispLCD4vias.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;  d               1    wreg     unsigned char 
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  d               1    1[COMRAM] unsigned char 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, status,2, status,0
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0
 11924 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11925 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11926 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11927 ;;Total ram usage:        2 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:    2
 11930 ;; This function calls:
 11931 ;;		Nothing
 11932 ;; This function is called by:
 11933 ;;		_main
 11934 ;;		_dispLCD
 11935 ;;		_dispLCD_num
 11936 ;;		_dispLCD_str
 11937 ;;		_fifo_print
 11938 ;;		_printExec
 11939 ;; This function uses a non-reentrant model
 11940 ;;
 11941                           
 11942                           	psect	text54
 11943  003448                     __ptext54:
 11944                           	callstack 0
 11945  003448                     _dispLCD_dataReg:
 11946                           	callstack 26
 11947                           
 11948                           ;incstack = 0
 11949                           ;dispLCD_dataReg@d stored from wreg
 11950  003448  6E27               	movwf	dispLCD_dataReg@d^0,c
 11951  00344A                     
 11952                           ;dispLCD4vias.c: 134: void dispLCD_dataReg( unsigned char d );dispLCD4vias.c: 135: {;dis
      +                          pLCD4vias.c: 136:     LCDbits.RS = 1;
 11953  00344A  8C8A               	bsf	138,6,c	;volatile
 11954  00344C                     
 11955                           ;dispLCD4vias.c: 137:     LCDbits.BUS = d >> 4;
 11956  00344C  C027  F026         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 11957  003450  3A26               	swapf	??_dispLCD_dataReg^0,f,c
 11958  003452  0E0F               	movlw	15
 11959  003454  1626               	andwf	??_dispLCD_dataReg^0,f,c
 11960  003456  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11961  003458  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11962  00345A  508A               	movf	138,w,c	;volatile
 11963  00345C  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11964  00345E  0BC3               	andlw	-61
 11965  003460  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11966  003462  6E8A               	movwf	138,c	;volatile
 11967  003464                     
 11968                           ;dispLCD4vias.c: 138:     LCDbits.EN = 0;
 11969  003464  9E8A               	bcf	138,7,c	;volatile
 11970  003466                     
 11971                           ;dispLCD4vias.c: 139:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 11972  003466  0E42               	movlw	66
 11973  003468                     u5277:
 11974  003468  2EE8               	decfsz	wreg,f,c
 11975  00346A  D7FE               	bra	u5277
 11976  00346C  D000               	nop2	
 11977  00346E                     
 11978                           ;dispLCD4vias.c: 140:     LCDbits.EN = 1;
 11979  00346E  8E8A               	bsf	138,7,c	;volatile
 11980  003470                     
 11981                           ;dispLCD4vias.c: 142:     LCDbits.RS = 1;
 11982  003470  8C8A               	bsf	138,6,c	;volatile
 11983  003472                     
 11984                           ;dispLCD4vias.c: 143:     LCDbits.BUS = d & 0x0F;
 11985  003472  C027  F026         	movff	dispLCD_dataReg@d,??_dispLCD_dataReg
 11986  003476  0E0F               	movlw	15
 11987  003478  1626               	andwf	??_dispLCD_dataReg^0,f,c
 11988  00347A  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11989  00347C  4626               	rlncf	??_dispLCD_dataReg^0,f,c
 11990  00347E  508A               	movf	138,w,c	;volatile
 11991  003480  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11992  003482  0BC3               	andlw	-61
 11993  003484  1826               	xorwf	??_dispLCD_dataReg^0,w,c
 11994  003486  6E8A               	movwf	138,c	;volatile
 11995  003488                     
 11996                           ;dispLCD4vias.c: 144:     LCDbits.EN = 0;
 11997  003488  9E8A               	bcf	138,7,c	;volatile
 11998                           
 11999                           ;dispLCD4vias.c: 145:     _delay((unsigned long)((40)*(20000000/4000000.0)));
 12000  00348A  0E42               	movlw	66
 12001  00348C                     u5287:
 12002  00348C  2EE8               	decfsz	wreg,f,c
 12003  00348E  D7FE               	bra	u5287
 12004  003490  D000               	nop2	
 12005  003492                     
 12006                           ;dispLCD4vias.c: 146:     LCDbits.EN = 1;
 12007  003492  8E8A               	bsf	138,7,c	;volatile
 12008  003494  0012               	return		;funcret
 12009  003496                     __end_of_dispLCD_dataReg:
 12010                           	callstack 0
 12011                           
 12012 ;; *************** function _dignum_conc *****************
 12013 ;; Defined at:
 12014 ;;		line 460 in file "fifo.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;  dig             1    wreg     unsigned char 
 12017 ;;  ptrNum          2    6[COMRAM] PTR unsigned int 
 12018 ;;		 -> main@ciclos(2), main@num(2), 
 12019 ;; Auto vars:     Size  Location     Type
 12020 ;;  dig             1   10[COMRAM] unsigned char 
 12021 ;; Return value:  Size  Location     Type
 12022 ;;                  1    wreg      void 
 12023 ;; Registers used:
 12024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12025 ;; Tracked objects:
 12026 ;;		On entry : 0/0
 12027 ;;		On exit  : 0/0
 12028 ;;		Unchanged: 0/0
 12029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12030 ;;      Params:         2       0       0       0       0       0       0       0       0
 12031 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12032 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12033 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12034 ;;Total ram usage:        5 bytes
 12035 ;; Hardware stack levels used:    1
 12036 ;; Hardware stack levels required when called:    3
 12037 ;; This function calls:
 12038 ;;		___wmul
 12039 ;; This function is called by:
 12040 ;;		_main
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           	psect	text55
 12045  003526                     __ptext55:
 12046                           	callstack 0
 12047  003526                     _dignum_conc:
 12048                           	callstack 27
 12049                           
 12050                           ;incstack = 0
 12051                           ;dignum_conc@dig stored from wreg
 12052  003526  6E30               	movwf	dignum_conc@dig^0,c
 12053  003528                     
 12054                           ;fifo.c: 460: void dignum_conc(char dig, unsigned int * ptrNum );fifo.c: 461: {;fifo.c: 
      +                          462:     *ptrNum = (*ptrNum * 10) + (dig - '0');
 12055  003528  0ED0               	movlw	208
 12056  00352A  6E2E               	movwf	??_dignum_conc^0,c
 12057  00352C  0EFF               	movlw	255
 12058  00352E  6E2F               	movwf	(??_dignum_conc+1)^0,c
 12059  003530  C02C  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12060  003534  C02D  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12061  003538  CFDE F026          	movff	postinc2,___wmul@multiplier
 12062  00353C  CFDD F027          	movff	postdec2,___wmul@multiplier+1
 12063  003540  0E00               	movlw	0
 12064  003542  6E29               	movwf	(___wmul@multiplicand+1)^0,c
 12065  003544  0E0A               	movlw	10
 12066  003546  6E28               	movwf	___wmul@multiplicand^0,c
 12067  003548  EC7C  F01C         	call	___wmul	;wreg free
 12068  00354C  5030               	movf	dignum_conc@dig^0,w,c
 12069  00354E  2626               	addwf	?___wmul^0,f,c
 12070  003550  0E00               	movlw	0
 12071  003552  2227               	addwfc	(?___wmul+1)^0,f,c
 12072  003554  502E               	movf	??_dignum_conc^0,w,c
 12073  003556  2626               	addwf	?___wmul^0,f,c
 12074  003558  502F               	movf	(??_dignum_conc+1)^0,w,c
 12075  00355A  2227               	addwfc	(?___wmul+1)^0,f,c
 12076  00355C  C02C  FFD9         	movff	dignum_conc@ptrNum,fsr2l
 12077  003560  C02D  FFDA         	movff	dignum_conc@ptrNum+1,fsr2h
 12078  003564  C026  FFDE         	movff	?___wmul,postinc2
 12079  003568  C027  FFDD         	movff	?___wmul+1,postdec2
 12080  00356C  0012               	return		;funcret
 12081  00356E                     __end_of_dignum_conc:
 12082                           	callstack 0
 12083                           
 12084 ;; *************** function ___wmul *****************
 12085 ;; Defined at:
 12086 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;  multiplier      2    0[COMRAM] unsigned int 
 12089 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12090 ;; Auto vars:     Size  Location     Type
 12091 ;;  product         2    4[COMRAM] unsigned int 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  2    0[COMRAM] unsigned int 
 12094 ;; Registers used:
 12095 ;;		wreg, status,2, status,0, prodl, prodh
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12101 ;;      Params:         4       0       0       0       0       0       0       0       0
 12102 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12103 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12104 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12105 ;;Total ram usage:        6 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    2
 12108 ;; This function calls:
 12109 ;;		Nothing
 12110 ;; This function is called by:
 12111 ;;		_main
 12112 ;;		_dignum_conc
 12113 ;; This function uses a non-reentrant model
 12114 ;;
 12115                           
 12116                           	psect	text56
 12117  0038F8                     __ptext56:
 12118                           	callstack 0
 12119  0038F8                     ___wmul:
 12120                           	callstack 27
 12121  0038F8  5026               	movf	___wmul@multiplier^0,w,c
 12122  0038FA  0228               	mulwf	___wmul@multiplicand^0,c
 12123  0038FC  CFF3 F02A          	movff	prodl,___wmul@product
 12124  003900  CFF4 F02B          	movff	prodh,___wmul@product+1
 12125  003904  5026               	movf	___wmul@multiplier^0,w,c
 12126  003906  0229               	mulwf	(___wmul@multiplicand+1)^0,c
 12127  003908  50F3               	movf	243,w,c
 12128  00390A  262B               	addwf	(___wmul@product+1)^0,f,c
 12129  00390C  5027               	movf	(___wmul@multiplier+1)^0,w,c
 12130  00390E  0228               	mulwf	___wmul@multiplicand^0,c
 12131  003910  50F3               	movf	243,w,c
 12132  003912  262B               	addwf	(___wmul@product+1)^0,f,c
 12133  003914  C02A  F026         	movff	___wmul@product,?___wmul
 12134  003918  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 12135  00391C  0012               	return		;funcret
 12136  00391E                     __end_of___wmul:
 12137                           	callstack 0
 12138                           
 12139 ;; *************** function _dignum_apagar *****************
 12140 ;; Defined at:
 12141 ;;		line 465 in file "fifo.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;  ptrNum          2    7[COMRAM] PTR unsigned int 
 12144 ;;		 -> main@ciclos(2), main@num(2), 
 12145 ;; Auto vars:     Size  Location     Type
 12146 ;;		None
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  1    wreg      void 
 12149 ;; Registers used:
 12150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12156 ;;      Params:         2       0       0       0       0       0       0       0       0
 12157 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12158 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12159 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12160 ;;Total ram usage:        2 bytes
 12161 ;; Hardware stack levels used:    1
 12162 ;; Hardware stack levels required when called:    3
 12163 ;; This function calls:
 12164 ;;		___lwdiv
 12165 ;; This function is called by:
 12166 ;;		_main
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170                           	psect	text57
 12171  0037F2                     __ptext57:
 12172                           	callstack 0
 12173  0037F2                     _dignum_apagar:
 12174                           	callstack 27
 12175  0037F2                     
 12176                           ;fifo.c: 465: void dignum_apagar(unsigned int * ptrNum );fifo.c: 466: {;fifo.c: 467:    
      +                           *ptrNum /= 10;
 12177  0037F2  C02D  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 12178  0037F6  C02E  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 12179  0037FA  CFDE F026          	movff	postinc2,___lwdiv@dividend
 12180  0037FE  CFDD F027          	movff	postdec2,___lwdiv@dividend+1
 12181  003802  0E00               	movlw	0
 12182  003804  6E29               	movwf	(___lwdiv@divisor+1)^0,c
 12183  003806  0E0A               	movlw	10
 12184  003808  6E28               	movwf	___lwdiv@divisor^0,c
 12185  00380A  EC1D  F018         	call	___lwdiv	;wreg free
 12186  00380E  C02D  FFD9         	movff	dignum_apagar@ptrNum,fsr2l
 12187  003812  C02E  FFDA         	movff	dignum_apagar@ptrNum+1,fsr2h
 12188  003816  C026  FFDE         	movff	?___lwdiv,postinc2
 12189  00381A  C027  FFDD         	movff	?___lwdiv+1,postdec2
 12190  00381E  0012               	return		;funcret
 12191  003820                     __end_of_dignum_apagar:
 12192                           	callstack 0
 12193                           
 12194 ;; *************** function ___lwdiv *****************
 12195 ;; Defined at:
 12196 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  dividend        2    0[COMRAM] unsigned int 
 12199 ;;  divisor         2    2[COMRAM] unsigned int 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  quotient        2    4[COMRAM] unsigned int 
 12202 ;;  counter         1    6[COMRAM] unsigned char 
 12203 ;; Return value:  Size  Location     Type
 12204 ;;                  2    0[COMRAM] unsigned int 
 12205 ;; Registers used:
 12206 ;;		wreg, status,2, status,0
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12212 ;;      Params:         4       0       0       0       0       0       0       0       0
 12213 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12214 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12215 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12216 ;;Total ram usage:        7 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; Hardware stack levels required when called:    2
 12219 ;; This function calls:
 12220 ;;		Nothing
 12221 ;; This function is called by:
 12222 ;;		_dignum_apagar
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           	psect	text58
 12227  00303A                     __ptext58:
 12228                           	callstack 0
 12229  00303A                     ___lwdiv:
 12230                           	callstack 27
 12231  00303A  0E00               	movlw	0
 12232  00303C  6E2B               	movwf	(___lwdiv@quotient+1)^0,c
 12233  00303E  0E00               	movlw	0
 12234  003040  6E2A               	movwf	___lwdiv@quotient^0,c
 12235  003042  5028               	movf	___lwdiv@divisor^0,w,c
 12236  003044  1029               	iorwf	(___lwdiv@divisor+1)^0,w,c
 12237  003046  B4D8               	btfsc	status,2,c
 12238  003048  EF28  F018         	goto	u3351
 12239  00304C  EF2A  F018         	goto	u3350
 12240  003050                     u3351:
 12241  003050  EF52  F018         	goto	l1542
 12242  003054                     u3350:
 12243  003054  0E01               	movlw	1
 12244  003056  6E2C               	movwf	___lwdiv@counter^0,c
 12245  003058  EF32  F018         	goto	l5082
 12246  00305C                     l5080:
 12247  00305C  90D8               	bcf	status,0,c
 12248  00305E  3628               	rlcf	___lwdiv@divisor^0,f,c
 12249  003060  3629               	rlcf	(___lwdiv@divisor+1)^0,f,c
 12250  003062  2A2C               	incf	___lwdiv@counter^0,f,c
 12251  003064                     l5082:
 12252  003064  AE29               	btfss	(___lwdiv@divisor+1)^0,7,c
 12253  003066  EF37  F018         	goto	u3361
 12254  00306A  EF39  F018         	goto	u3360
 12255  00306E                     u3361:
 12256  00306E  EF2E  F018         	goto	l5080
 12257  003072                     u3360:
 12258  003072                     l5084:
 12259  003072  90D8               	bcf	status,0,c
 12260  003074  362A               	rlcf	___lwdiv@quotient^0,f,c
 12261  003076  362B               	rlcf	(___lwdiv@quotient+1)^0,f,c
 12262  003078  5028               	movf	___lwdiv@divisor^0,w,c
 12263  00307A  5C26               	subwf	___lwdiv@dividend^0,w,c
 12264  00307C  5029               	movf	(___lwdiv@divisor+1)^0,w,c
 12265  00307E  5827               	subwfb	(___lwdiv@dividend+1)^0,w,c
 12266  003080  A0D8               	btfss	status,0,c
 12267  003082  EF45  F018         	goto	u3371
 12268  003086  EF47  F018         	goto	u3370
 12269  00308A                     u3371:
 12270  00308A  EF4C  F018         	goto	l5092
 12271  00308E                     u3370:
 12272  00308E  5028               	movf	___lwdiv@divisor^0,w,c
 12273  003090  5E26               	subwf	___lwdiv@dividend^0,f,c
 12274  003092  5029               	movf	(___lwdiv@divisor+1)^0,w,c
 12275  003094  5A27               	subwfb	(___lwdiv@dividend+1)^0,f,c
 12276  003096  802A               	bsf	___lwdiv@quotient^0,0,c
 12277  003098                     l5092:
 12278  003098  90D8               	bcf	status,0,c
 12279  00309A  3229               	rrcf	(___lwdiv@divisor+1)^0,f,c
 12280  00309C  3228               	rrcf	___lwdiv@divisor^0,f,c
 12281  00309E  2E2C               	decfsz	___lwdiv@counter^0,f,c
 12282  0030A0  EF39  F018         	goto	l5084
 12283  0030A4                     l1542:
 12284  0030A4  C02A  F026         	movff	___lwdiv@quotient,?___lwdiv
 12285  0030A8  C02B  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12286  0030AC  0012               	return		;funcret
 12287  0030AE                     __end_of___lwdiv:
 12288                           	callstack 0
 12289                           
 12290 ;; *************** function _deletar_receita *****************
 12291 ;; Defined at:
 12292 ;;		line 77 in file "eeprom.c"
 12293 ;; Parameters:    Size  Location     Type
 12294 ;;  receita         1    wreg     unsigned char 
 12295 ;; Auto vars:     Size  Location     Type
 12296 ;;  receita         1    6[COMRAM] unsigned char 
 12297 ;;  i               1    7[COMRAM] unsigned char 
 12298 ;;  aux             2    4[COMRAM] int 
 12299 ;; Return value:  Size  Location     Type
 12300 ;;                  1    wreg      void 
 12301 ;; Registers used:
 12302 ;;		wreg, status,2, status,0, cstack
 12303 ;; Tracked objects:
 12304 ;;		On entry : 0/0
 12305 ;;		On exit  : 0/0
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12308 ;;      Params:         0       0       0       0       0       0       0       0       0
 12309 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12310 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12311 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12312 ;;Total ram usage:        4 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; Hardware stack levels required when called:    3
 12315 ;; This function calls:
 12316 ;;		_EEPROM_write
 12317 ;;		_end_receita
 12318 ;; This function is called by:
 12319 ;;		_main
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           	psect	text59
 12324  0036F0                     __ptext59:
 12325                           	callstack 0
 12326  0036F0                     _deletar_receita:
 12327                           	callstack 27
 12328                           
 12329                           ;incstack = 0
 12330                           ;deletar_receita@receita stored from wreg
 12331  0036F0  6E2C               	movwf	deletar_receita@receita^0,c
 12332  0036F2                     
 12333                           ;eeprom.c: 77: void deletar_receita (char receita);eeprom.c: 78: {;eeprom.c: 79:    int 
      +                          aux;;eeprom.c: 80:    aux = end_receita(receita);
 12334  0036F2  C02C  F026         	movff	deletar_receita@receita,end_receita@x
 12335  0036F6  6A27               	clrf	(end_receita@x+1)^0,c
 12336  0036F8  EC8F  F01C         	call	_end_receita	;wreg free
 12337  0036FC  C026  F02A         	movff	?_end_receita,deletar_receita@aux
 12338  003700  C027  F02B         	movff	?_end_receita+1,deletar_receita@aux+1
 12339  003704                     
 12340                           ;eeprom.c: 81:    for( char i=0 ; i<16; i++)
 12341  003704  0E00               	movlw	0
 12342  003706  6E2D               	movwf	deletar_receita@i^0,c
 12343  003708                     l5700:
 12344                           
 12345                           ;eeprom.c: 82:         EEPROM_write((aux+i),0);
 12346  003708  0E00               	movlw	0
 12347  00370A  6E26               	movwf	EEPROM_write@data^0,c
 12348  00370C  502D               	movf	deletar_receita@i^0,w,c
 12349  00370E  242A               	addwf	deletar_receita@aux^0,w,c
 12350  003710  EC10  F01C         	call	_EEPROM_write
 12351  003714  2A2D               	incf	deletar_receita@i^0,f,c
 12352  003716  0E0F               	movlw	15
 12353  003718  642D               	cpfsgt	deletar_receita@i^0,c
 12354  00371A  EF91  F01B         	goto	u3911
 12355  00371E  EF93  F01B         	goto	u3910
 12356  003722                     u3911:
 12357  003722  EF84  F01B         	goto	l5700
 12358  003726                     u3910:
 12359  003726  0012               	return		;funcret
 12360  003728                     __end_of_deletar_receita:
 12361                           	callstack 0
 12362                           
 12363 ;; *************** function _EEPROM_write *****************
 12364 ;; Defined at:
 12365 ;;		line 24 in file "eeprom.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;  addr            1    wreg     unsigned char 
 12368 ;;  data            1    0[COMRAM] unsigned char 
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;  addr            1    1[COMRAM] unsigned char 
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  1    wreg      void 
 12373 ;; Registers used:
 12374 ;;		wreg, status,2
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12380 ;;      Params:         1       0       0       0       0       0       0       0       0
 12381 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12382 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12383 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12384 ;;Total ram usage:        2 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    2
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_salvar_receita
 12391 ;;		_salvar_dado
 12392 ;;		_deletar_receita
 12393 ;;		_formatar_receitas
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           	psect	text60
 12398  003820                     __ptext60:
 12399                           	callstack 0
 12400  003820                     _EEPROM_write:
 12401                           	callstack 27
 12402                           
 12403                           ;incstack = 0
 12404                           ;EEPROM_write@addr stored from wreg
 12405  003820  6E27               	movwf	EEPROM_write@addr^0,c
 12406  003822                     
 12407                           ;eeprom.c: 24: void EEPROM_write( unsigned char addr, unsigned char data );eeprom.c: 25:
      +                           {;eeprom.c: 26:     INTCONbits.GIE = 0;
 12408  003822  9EF2               	bcf	242,7,c	;volatile
 12409  003824                     
 12410                           ;eeprom.c: 27:     EEADR = addr;
 12411  003824  C027  FFA9         	movff	EEPROM_write@addr,4009	;volatile
 12412  003828                     
 12413                           ;eeprom.c: 28:     EEDATA = data;
 12414  003828  C026  FFA8         	movff	EEPROM_write@data,4008	;volatile
 12415  00382C                     
 12416                           ;eeprom.c: 29:     EECON1bits.EEPGD = 0;
 12417  00382C  9EA6               	bcf	166,7,c	;volsfr
 12418  00382E                     
 12419                           ;eeprom.c: 30:     EECON1bits.WREN = 1;
 12420  00382E  84A6               	bsf	166,2,c	;volsfr
 12421  003830                     
 12422                           ;eeprom.c: 31:     EECON2 = 0x55;
 12423  003830  0E55               	movlw	85
 12424  003832  6EA7               	movwf	167,c	;volsfr
 12425  003834                     
 12426                           ;eeprom.c: 32:     EECON2 = 0xAA;
 12427  003834  0EAA               	movlw	170
 12428  003836  6EA7               	movwf	167,c	;volsfr
 12429  003838                     
 12430                           ;eeprom.c: 33:     EECON1bits.WR = 1;
 12431  003838  82A6               	bsf	166,1,c	;volsfr
 12432  00383A                     l555:
 12433  00383A  B2A6               	btfsc	166,1,c	;volsfr
 12434  00383C  EF22  F01C         	goto	u3121
 12435  003840  EF24  F01C         	goto	u3120
 12436  003844                     u3121:
 12437  003844  EF1D  F01C         	goto	l555
 12438  003848                     u3120:
 12439  003848                     
 12440                           ;eeprom.c: 37:     EECON1bits.WREN = 0;
 12441  003848  94A6               	bcf	166,2,c	;volsfr
 12442                           
 12443                           ;eeprom.c: 38:     INTCONbits.GIE = 1;
 12444  00384A  8EF2               	bsf	242,7,c	;volatile
 12445  00384C  0012               	return		;funcret
 12446  00384E                     __end_of_EEPROM_write:
 12447                           	callstack 0
 12448                           
 12449 ;; *************** function _buscar_receita *****************
 12450 ;; Defined at:
 12451 ;;		line 55 in file "eeprom.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;  adrs            1    wreg     unsigned char 
 12454 ;;  data            2    6[COMRAM] PTR unsigned char 
 12455 ;;		 -> main@vetor_aux(16), 
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;  adrs            1   10[COMRAM] unsigned char 
 12458 ;;  i               1   11[COMRAM] unsigned char 
 12459 ;;  aux             2    8[COMRAM] int 
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  1    wreg      void 
 12462 ;; Registers used:
 12463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12469 ;;      Params:         2       0       0       0       0       0       0       0       0
 12470 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12472 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12473 ;;Total ram usage:        6 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; Hardware stack levels required when called:    3
 12476 ;; This function calls:
 12477 ;;		_EEPROM_read
 12478 ;;		_end_receita
 12479 ;; This function is called by:
 12480 ;;		_main
 12481 ;; This function uses a non-reentrant model
 12482 ;;
 12483                           
 12484                           	psect	text61
 12485  0035FA                     __ptext61:
 12486                           	callstack 0
 12487  0035FA                     _buscar_receita:
 12488                           	callstack 27
 12489                           
 12490                           ;incstack = 0
 12491                           ;buscar_receita@adrs stored from wreg
 12492  0035FA  6E30               	movwf	buscar_receita@adrs^0,c
 12493  0035FC                     
 12494                           ;eeprom.c: 55: void buscar_receita (char adrs, unsigned char * data );eeprom.c: 56: {;ee
      +                          prom.c: 57:     int aux;;eeprom.c: 58:     aux = end_receita(adrs);
 12495  0035FC  C030  F026         	movff	buscar_receita@adrs,end_receita@x
 12496  003600  6A27               	clrf	(end_receita@x+1)^0,c
 12497  003602  EC8F  F01C         	call	_end_receita	;wreg free
 12498  003606  C026  F02E         	movff	?_end_receita,buscar_receita@aux
 12499  00360A  C027  F02F         	movff	?_end_receita+1,buscar_receita@aux+1
 12500  00360E                     
 12501                           ;eeprom.c: 59:     for( char i=0; i<16; i++ )
 12502  00360E  0E00               	movlw	0
 12503  003610  6E31               	movwf	buscar_receita@i^0,c
 12504  003612                     l5686:
 12505                           
 12506                           ;eeprom.c: 60:        *(data+i) = EEPROM_read(aux+i);
 12507  003612  5031               	movf	buscar_receita@i^0,w,c
 12508  003614  242C               	addwf	buscar_receita@data^0,w,c
 12509  003616  6ED9               	movwf	fsr2l,c
 12510  003618  0E00               	movlw	0
 12511  00361A  202D               	addwfc	(buscar_receita@data+1)^0,w,c
 12512  00361C  6EDA               	movwf	fsr2h,c
 12513  00361E  5031               	movf	buscar_receita@i^0,w,c
 12514  003620  242E               	addwf	buscar_receita@aux^0,w,c
 12515  003622  EC60  F01D         	call	_EEPROM_read
 12516  003626  6EDF               	movwf	indf2,c
 12517  003628  2A31               	incf	buscar_receita@i^0,f,c
 12518  00362A  0E0F               	movlw	15
 12519  00362C  6431               	cpfsgt	buscar_receita@i^0,c
 12520  00362E  EF1B  F01B         	goto	u3901
 12521  003632  EF1D  F01B         	goto	u3900
 12522  003636                     u3901:
 12523  003636  EF09  F01B         	goto	l5686
 12524  00363A                     u3900:
 12525  00363A  0012               	return		;funcret
 12526  00363C                     __end_of_buscar_receita:
 12527                           	callstack 0
 12528                           
 12529 ;; *************** function _buscar_dado *****************
 12530 ;; Defined at:
 12531 ;;		line 70 in file "eeprom.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;  adrs            1    wreg     unsigned char 
 12534 ;;  col             1    6[COMRAM] unsigned char 
 12535 ;;  data            2    7[COMRAM] PTR unsigned char 
 12536 ;;		 -> main@init_cond(1), 
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;  adrs            1   11[COMRAM] unsigned char 
 12539 ;;  aux             2    9[COMRAM] int 
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  1    wreg      void 
 12542 ;; Registers used:
 12543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12549 ;;      Params:         3       0       0       0       0       0       0       0       0
 12550 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12551 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12552 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12553 ;;Total ram usage:        6 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; Hardware stack levels required when called:    3
 12556 ;; This function calls:
 12557 ;;		_EEPROM_read
 12558 ;;		_end_receita
 12559 ;; This function is called by:
 12560 ;;		_main
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           	psect	text62
 12565  0038D0                     __ptext62:
 12566                           	callstack 0
 12567  0038D0                     _buscar_dado:
 12568                           	callstack 27
 12569                           
 12570                           ;incstack = 0
 12571                           ;buscar_dado@adrs stored from wreg
 12572  0038D0  6E31               	movwf	buscar_dado@adrs^0,c
 12573  0038D2                     
 12574                           ;eeprom.c: 70: void buscar_dado (char adrs, char col, unsigned char *data);eeprom.c: 71:
      +                           {;eeprom.c: 72:     int aux;;eeprom.c: 73:     aux = end_receita(adrs);
 12575  0038D2  C031  F026         	movff	buscar_dado@adrs,end_receita@x
 12576  0038D6  6A27               	clrf	(end_receita@x+1)^0,c
 12577  0038D8  EC8F  F01C         	call	_end_receita	;wreg free
 12578  0038DC  C026  F02F         	movff	?_end_receita,buscar_dado@aux
 12579  0038E0  C027  F030         	movff	?_end_receita+1,buscar_dado@aux+1
 12580  0038E4                     
 12581                           ;eeprom.c: 74:     *data = EEPROM_read((aux+col));
 12582  0038E4  502C               	movf	buscar_dado@col^0,w,c
 12583  0038E6  242F               	addwf	buscar_dado@aux^0,w,c
 12584  0038E8  EC60  F01D         	call	_EEPROM_read
 12585  0038EC  C02D  FFD9         	movff	buscar_dado@data,fsr2l
 12586  0038F0  C02E  FFDA         	movff	buscar_dado@data+1,fsr2h
 12587  0038F4  6EDF               	movwf	indf2,c
 12588  0038F6  0012               	return		;funcret
 12589  0038F8                     __end_of_buscar_dado:
 12590                           	callstack 0
 12591                           
 12592 ;; *************** function _end_receita *****************
 12593 ;; Defined at:
 12594 ;;		line 41 in file "eeprom.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;  x               2    0[COMRAM] int 
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;		None
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  2    0[COMRAM] int 
 12601 ;; Registers used:
 12602 ;;		wreg, status,2, status,0
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12608 ;;      Params:         2       0       0       0       0       0       0       0       0
 12609 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12610 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12611 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12612 ;;Total ram usage:        4 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    2
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_salvar_receita
 12619 ;;		_buscar_receita
 12620 ;;		_salvar_dado
 12621 ;;		_buscar_dado
 12622 ;;		_deletar_receita
 12623 ;;		_receita_livre
 12624 ;; This function uses a non-reentrant model
 12625 ;;
 12626                           
 12627                           	psect	text63
 12628  00391E                     __ptext63:
 12629                           	callstack 0
 12630  00391E                     _end_receita:
 12631                           	callstack 27
 12632  00391E                     
 12633                           ;eeprom.c: 41: int end_receita (int x);eeprom.c: 42: {;eeprom.c: 43:     return(x*16);
 12634  00391E  C026  F028         	movff	end_receita@x,??_end_receita
 12635  003922  C027  F029         	movff	end_receita@x+1,??_end_receita+1
 12636  003926  3A28               	swapf	??_end_receita^0,f,c
 12637  003928  3A29               	swapf	(??_end_receita+1)^0,f,c
 12638  00392A  0EF0               	movlw	240
 12639  00392C  1629               	andwf	(??_end_receita+1)^0,f,c
 12640  00392E  5028               	movf	??_end_receita^0,w,c
 12641  003930  0B0F               	andlw	15
 12642  003932  1229               	iorwf	(??_end_receita+1)^0,f,c
 12643  003934  0EF0               	movlw	240
 12644  003936  1628               	andwf	??_end_receita^0,f,c
 12645  003938  C028  F026         	movff	??_end_receita,?_end_receita
 12646  00393C  C029  F027         	movff	??_end_receita+1,?_end_receita+1
 12647  003940  0012               	return		;funcret
 12648  003942                     __end_of_end_receita:
 12649                           	callstack 0
 12650                           
 12651 ;; *************** function _EEPROM_read *****************
 12652 ;; Defined at:
 12653 ;;		line 14 in file "eeprom.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;  addr            1    wreg     unsigned char 
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;  addr            1    0[COMRAM] unsigned char 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      unsigned char 
 12660 ;; Registers used:
 12661 ;;		wreg, status,2
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0
 12668 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12669 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12670 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12671 ;;Total ram usage:        1 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    2
 12674 ;; This function calls:
 12675 ;;		Nothing
 12676 ;; This function is called by:
 12677 ;;		_buscar_receita
 12678 ;;		_buscar_dado
 12679 ;;		_receita_livre
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           	psect	text64
 12684  003AC0                     __ptext64:
 12685                           	callstack 0
 12686  003AC0                     _EEPROM_read:
 12687                           	callstack 27
 12688                           
 12689                           ;incstack = 0
 12690                           ;EEPROM_read@addr stored from wreg
 12691  003AC0  6E26               	movwf	EEPROM_read@addr^0,c
 12692  003AC2                     
 12693                           ;eeprom.c: 14: char EEPROM_read( unsigned char addr );eeprom.c: 15: {;eeprom.c: 17:     
      +                          EEADR = addr;
 12694  003AC2  C026  FFA9         	movff	EEPROM_read@addr,4009	;volatile
 12695  003AC6                     
 12696                           ;eeprom.c: 18:     EECON1bits.EEPGD = 0;
 12697  003AC6  9EA6               	bcf	166,7,c	;volsfr
 12698  003AC8                     
 12699                           ;eeprom.c: 19:     EECON1bits.RD = 1;
 12700  003AC8  80A6               	bsf	166,0,c	;volsfr
 12701  003ACA                     
 12702                           ;eeprom.c: 20:     return( EEDATA );
 12703  003ACA  50A8               	movf	168,w,c	;volatile
 12704  003ACC  0012               	return		;funcret
 12705  003ACE                     __end_of_EEPROM_read:
 12706                           	callstack 0
 12707                           
 12708 ;; *************** function _addIndicePassos *****************
 12709 ;; Defined at:
 12710 ;;		line 19 in file "fifo.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;		None
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      void 
 12717 ;; Registers used:
 12718 ;;		wreg, status,2, status,0
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12724 ;;      Params:         0       0       0       0       0       0       0       0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12727 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12728 ;;Total ram usage:        0 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    2
 12731 ;; This function calls:
 12732 ;;		Nothing
 12733 ;; This function is called by:
 12734 ;;		_main
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           	psect	text65
 12739  0039EA                     __ptext65:
 12740                           	callstack 0
 12741  0039EA                     _addIndicePassos:
 12742                           	callstack 28
 12743  0039EA                     
 12744                           ;fifo.c: 21:     if(indice_passos < ind_fila)
 12745  0039EA  5058               	movf	_ind_fila^0,w,c
 12746  0039EC  5C56               	subwf	_indice_passos^0,w,c
 12747  0039EE  B0D8               	btfsc	status,0,c
 12748  0039F0  EFFC  F01C         	goto	u3861
 12749  0039F4  EFFE  F01C         	goto	u3860
 12750  0039F8                     u3861:
 12751  0039F8  EFFF  F01C         	goto	l623
 12752  0039FC                     u3860:
 12753  0039FC                     
 12754                           ;fifo.c: 22:         indice_passos++;
 12755  0039FC  2A56               	incf	_indice_passos^0,f,c
 12756  0039FE                     l623:
 12757  0039FE  0012               	return		;funcret
 12758  003A00                     __end_of_addIndicePassos:
 12759                           	callstack 0
 12760                           
 12761 ;; *************** function _addContCiclos *****************
 12762 ;; Defined at:
 12763 ;;		line 59 in file "fifo.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;		None
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;		None
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  1    wreg      void 
 12770 ;; Registers used:
 12771 ;;		status,2, status,0
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0
 12778 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12779 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12780 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12781 ;;Total ram usage:        0 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    2
 12784 ;; This function calls:
 12785 ;;		Nothing
 12786 ;; This function is called by:
 12787 ;;		_main
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           	psect	text66
 12792  003B1E                     __ptext66:
 12793                           	callstack 0
 12794  003B1E                     _addContCiclos:
 12795                           	callstack 28
 12796  003B1E                     
 12797                           ;fifo.c: 61:     cont_ciclos++;
 12798  003B1E  4A0D               	infsnz	_cont_ciclos^0,f,c
 12799  003B20  2A0E               	incf	(_cont_ciclos+1)^0,f,c
 12800  003B22  0012               	return		;funcret
 12801  003B24                     __end_of_addContCiclos:
 12802                           	callstack 0
 12803                           
 12804 ;; *************** function ___lmul *****************
 12805 ;; Defined at:
 12806 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul32.c"
 12807 ;; Parameters:    Size  Location     Type
 12808 ;;  multiplier      4    0[COMRAM] unsigned long 
 12809 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;  product         4    8[COMRAM] unsigned long 
 12812 ;; Return value:  Size  Location     Type
 12813 ;;                  4    0[COMRAM] unsigned long 
 12814 ;; Registers used:
 12815 ;;		wreg, status,2, status,0
 12816 ;; Tracked objects:
 12817 ;;		On entry : 0/0
 12818 ;;		On exit  : 0/0
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12821 ;;      Params:         8       0       0       0       0       0       0       0       0
 12822 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12823 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12824 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12825 ;;Total ram usage:       12 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; Hardware stack levels required when called:    2
 12828 ;; This function calls:
 12829 ;;		Nothing
 12830 ;; This function is called by:
 12831 ;;		_main
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           	psect	text67
 12836  0030AE                     __ptext67:
 12837                           	callstack 0
 12838  0030AE                     ___lmul:
 12839                           	callstack 28
 12840  0030AE  0E00               	movlw	0
 12841  0030B0  6E2E               	movwf	___lmul@product^0,c
 12842  0030B2  0E00               	movlw	0
 12843  0030B4  6E2F               	movwf	(___lmul@product+1)^0,c
 12844  0030B6  0E00               	movlw	0
 12845  0030B8  6E30               	movwf	(___lmul@product+2)^0,c
 12846  0030BA  0E00               	movlw	0
 12847  0030BC  6E31               	movwf	(___lmul@product+3)^0,c
 12848  0030BE                     l5716:
 12849  0030BE  A026               	btfss	___lmul@multiplier^0,0,c
 12850  0030C0  EF64  F018         	goto	u3921
 12851  0030C4  EF66  F018         	goto	u3920
 12852  0030C8                     u3921:
 12853  0030C8  EF6E  F018         	goto	l5720
 12854  0030CC                     u3920:
 12855  0030CC  502A               	movf	___lmul@multiplicand^0,w,c
 12856  0030CE  262E               	addwf	___lmul@product^0,f,c
 12857  0030D0  502B               	movf	(___lmul@multiplicand+1)^0,w,c
 12858  0030D2  222F               	addwfc	(___lmul@product+1)^0,f,c
 12859  0030D4  502C               	movf	(___lmul@multiplicand+2)^0,w,c
 12860  0030D6  2230               	addwfc	(___lmul@product+2)^0,f,c
 12861  0030D8  502D               	movf	(___lmul@multiplicand+3)^0,w,c
 12862  0030DA  2231               	addwfc	(___lmul@product+3)^0,f,c
 12863  0030DC                     l5720:
 12864  0030DC  90D8               	bcf	status,0,c
 12865  0030DE  362A               	rlcf	___lmul@multiplicand^0,f,c
 12866  0030E0  362B               	rlcf	(___lmul@multiplicand+1)^0,f,c
 12867  0030E2  362C               	rlcf	(___lmul@multiplicand+2)^0,f,c
 12868  0030E4  362D               	rlcf	(___lmul@multiplicand+3)^0,f,c
 12869  0030E6  90D8               	bcf	status,0,c
 12870  0030E8  3229               	rrcf	(___lmul@multiplier+3)^0,f,c
 12871  0030EA  3228               	rrcf	(___lmul@multiplier+2)^0,f,c
 12872  0030EC  3227               	rrcf	(___lmul@multiplier+1)^0,f,c
 12873  0030EE  3226               	rrcf	___lmul@multiplier^0,f,c
 12874  0030F0  5026               	movf	___lmul@multiplier^0,w,c
 12875  0030F2  1027               	iorwf	(___lmul@multiplier+1)^0,w,c
 12876  0030F4  1028               	iorwf	(___lmul@multiplier+2)^0,w,c
 12877  0030F6  1029               	iorwf	(___lmul@multiplier+3)^0,w,c
 12878  0030F8  A4D8               	btfss	status,2,c
 12879  0030FA  EF81  F018         	goto	u3931
 12880  0030FE  EF83  F018         	goto	u3930
 12881  003102                     u3931:
 12882  003102  EF5F  F018         	goto	l5716
 12883  003106                     u3930:
 12884  003106  C02E  F026         	movff	___lmul@product,?___lmul
 12885  00310A  C02F  F027         	movff	___lmul@product+1,?___lmul+1
 12886  00310E  C030  F028         	movff	___lmul@product+2,?___lmul+2
 12887  003112  C031  F029         	movff	___lmul@product+3,?___lmul+3
 12888  003116  0012               	return		;funcret
 12889  003118                     __end_of___lmul:
 12890                           	callstack 0
 12891                           
 12892 ;; *************** function ___aldiv *****************
 12893 ;; Defined at:
 12894 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aldiv.c"
 12895 ;; Parameters:    Size  Location     Type
 12896 ;;  dividend        4   12[COMRAM] long 
 12897 ;;  divisor         4   16[COMRAM] long 
 12898 ;; Auto vars:     Size  Location     Type
 12899 ;;  quotient        4   22[COMRAM] long 
 12900 ;;  sign            1   21[COMRAM] unsigned char 
 12901 ;;  counter         1   20[COMRAM] unsigned char 
 12902 ;; Return value:  Size  Location     Type
 12903 ;;                  4   12[COMRAM] long 
 12904 ;; Registers used:
 12905 ;;		wreg, status,2, status,0
 12906 ;; Tracked objects:
 12907 ;;		On entry : 0/0
 12908 ;;		On exit  : 0/0
 12909 ;;		Unchanged: 0/0
 12910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12911 ;;      Params:         8       0       0       0       0       0       0       0       0
 12912 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12913 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12914 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12915 ;;Total ram usage:       14 bytes
 12916 ;; Hardware stack levels used:    1
 12917 ;; Hardware stack levels required when called:    2
 12918 ;; This function calls:
 12919 ;;		Nothing
 12920 ;; This function is called by:
 12921 ;;		_main
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           	psect	text68
 12926  00267C                     __ptext68:
 12927                           	callstack 0
 12928  00267C                     ___aldiv:
 12929                           	callstack 28
 12930  00267C  0E00               	movlw	0
 12931  00267E  6E3B               	movwf	___aldiv@sign^0,c
 12932  002680  BE39               	btfsc	(___aldiv@divisor+3)^0,7,c
 12933  002682  EF47  F013         	goto	u3940
 12934  002686  EF45  F013         	goto	u3941
 12935  00268A                     u3941:
 12936  00268A  EF51  F013         	goto	l5732
 12937  00268E                     u3940:
 12938  00268E  1E39               	comf	(___aldiv@divisor+3)^0,f,c
 12939  002690  1E38               	comf	(___aldiv@divisor+2)^0,f,c
 12940  002692  1E37               	comf	(___aldiv@divisor+1)^0,f,c
 12941  002694  6C36               	negf	___aldiv@divisor^0,c
 12942  002696  0E00               	movlw	0
 12943  002698  2237               	addwfc	(___aldiv@divisor+1)^0,f,c
 12944  00269A  2238               	addwfc	(___aldiv@divisor+2)^0,f,c
 12945  00269C  2239               	addwfc	(___aldiv@divisor+3)^0,f,c
 12946  00269E  0E01               	movlw	1
 12947  0026A0  6E3B               	movwf	___aldiv@sign^0,c
 12948  0026A2                     l5732:
 12949  0026A2  BE35               	btfsc	(___aldiv@dividend+3)^0,7,c
 12950  0026A4  EF58  F013         	goto	u3950
 12951  0026A8  EF56  F013         	goto	u3951
 12952  0026AC                     u3951:
 12953  0026AC  EF62  F013         	goto	l5738
 12954  0026B0                     u3950:
 12955  0026B0  1E35               	comf	(___aldiv@dividend+3)^0,f,c
 12956  0026B2  1E34               	comf	(___aldiv@dividend+2)^0,f,c
 12957  0026B4  1E33               	comf	(___aldiv@dividend+1)^0,f,c
 12958  0026B6  6C32               	negf	___aldiv@dividend^0,c
 12959  0026B8  0E00               	movlw	0
 12960  0026BA  2233               	addwfc	(___aldiv@dividend+1)^0,f,c
 12961  0026BC  2234               	addwfc	(___aldiv@dividend+2)^0,f,c
 12962  0026BE  2235               	addwfc	(___aldiv@dividend+3)^0,f,c
 12963  0026C0  0E01               	movlw	1
 12964  0026C2  1A3B               	xorwf	___aldiv@sign^0,f,c
 12965  0026C4                     l5738:
 12966  0026C4  0E00               	movlw	0
 12967  0026C6  6E3C               	movwf	___aldiv@quotient^0,c
 12968  0026C8  0E00               	movlw	0
 12969  0026CA  6E3D               	movwf	(___aldiv@quotient+1)^0,c
 12970  0026CC  0E00               	movlw	0
 12971  0026CE  6E3E               	movwf	(___aldiv@quotient+2)^0,c
 12972  0026D0  0E00               	movlw	0
 12973  0026D2  6E3F               	movwf	(___aldiv@quotient+3)^0,c
 12974  0026D4  5036               	movf	___aldiv@divisor^0,w,c
 12975  0026D6  1037               	iorwf	(___aldiv@divisor+1)^0,w,c
 12976  0026D8  1038               	iorwf	(___aldiv@divisor+2)^0,w,c
 12977  0026DA  1039               	iorwf	(___aldiv@divisor+3)^0,w,c
 12978  0026DC  B4D8               	btfsc	status,2,c
 12979  0026DE  EF73  F013         	goto	u3961
 12980  0026E2  EF75  F013         	goto	u3960
 12981  0026E6                     u3961:
 12982  0026E6  EFAB  F013         	goto	l5760
 12983  0026EA                     u3960:
 12984  0026EA  0E01               	movlw	1
 12985  0026EC  6E3A               	movwf	___aldiv@counter^0,c
 12986  0026EE  EF7F  F013         	goto	l5746
 12987  0026F2                     l5744:
 12988  0026F2  90D8               	bcf	status,0,c
 12989  0026F4  3636               	rlcf	___aldiv@divisor^0,f,c
 12990  0026F6  3637               	rlcf	(___aldiv@divisor+1)^0,f,c
 12991  0026F8  3638               	rlcf	(___aldiv@divisor+2)^0,f,c
 12992  0026FA  3639               	rlcf	(___aldiv@divisor+3)^0,f,c
 12993  0026FC  2A3A               	incf	___aldiv@counter^0,f,c
 12994  0026FE                     l5746:
 12995  0026FE  AE39               	btfss	(___aldiv@divisor+3)^0,7,c
 12996  002700  EF84  F013         	goto	u3971
 12997  002704  EF86  F013         	goto	u3970
 12998  002708                     u3971:
 12999  002708  EF79  F013         	goto	l5744
 13000  00270C                     u3970:
 13001  00270C                     l5748:
 13002  00270C  90D8               	bcf	status,0,c
 13003  00270E  363C               	rlcf	___aldiv@quotient^0,f,c
 13004  002710  363D               	rlcf	(___aldiv@quotient+1)^0,f,c
 13005  002712  363E               	rlcf	(___aldiv@quotient+2)^0,f,c
 13006  002714  363F               	rlcf	(___aldiv@quotient+3)^0,f,c
 13007  002716  5036               	movf	___aldiv@divisor^0,w,c
 13008  002718  5C32               	subwf	___aldiv@dividend^0,w,c
 13009  00271A  5037               	movf	(___aldiv@divisor+1)^0,w,c
 13010  00271C  5833               	subwfb	(___aldiv@dividend+1)^0,w,c
 13011  00271E  5038               	movf	(___aldiv@divisor+2)^0,w,c
 13012  002720  5834               	subwfb	(___aldiv@dividend+2)^0,w,c
 13013  002722  5039               	movf	(___aldiv@divisor+3)^0,w,c
 13014  002724  5835               	subwfb	(___aldiv@dividend+3)^0,w,c
 13015  002726  A0D8               	btfss	status,0,c
 13016  002728  EF98  F013         	goto	u3981
 13017  00272C  EF9A  F013         	goto	u3980
 13018  002730                     u3981:
 13019  002730  EFA3  F013         	goto	l5756
 13020  002734                     u3980:
 13021  002734  5036               	movf	___aldiv@divisor^0,w,c
 13022  002736  5E32               	subwf	___aldiv@dividend^0,f,c
 13023  002738  5037               	movf	(___aldiv@divisor+1)^0,w,c
 13024  00273A  5A33               	subwfb	(___aldiv@dividend+1)^0,f,c
 13025  00273C  5038               	movf	(___aldiv@divisor+2)^0,w,c
 13026  00273E  5A34               	subwfb	(___aldiv@dividend+2)^0,f,c
 13027  002740  5039               	movf	(___aldiv@divisor+3)^0,w,c
 13028  002742  5A35               	subwfb	(___aldiv@dividend+3)^0,f,c
 13029  002744  803C               	bsf	___aldiv@quotient^0,0,c
 13030  002746                     l5756:
 13031  002746  90D8               	bcf	status,0,c
 13032  002748  3239               	rrcf	(___aldiv@divisor+3)^0,f,c
 13033  00274A  3238               	rrcf	(___aldiv@divisor+2)^0,f,c
 13034  00274C  3237               	rrcf	(___aldiv@divisor+1)^0,f,c
 13035  00274E  3236               	rrcf	___aldiv@divisor^0,f,c
 13036  002750  2E3A               	decfsz	___aldiv@counter^0,f,c
 13037  002752  EF86  F013         	goto	l5748
 13038  002756                     l5760:
 13039  002756  503B               	movf	___aldiv@sign^0,w,c
 13040  002758  B4D8               	btfsc	status,2,c
 13041  00275A  EFB1  F013         	goto	u3991
 13042  00275E  EFB3  F013         	goto	u3990
 13043  002762                     u3991:
 13044  002762  EFBB  F013         	goto	l5764
 13045  002766                     u3990:
 13046  002766  1E3F               	comf	(___aldiv@quotient+3)^0,f,c
 13047  002768  1E3E               	comf	(___aldiv@quotient+2)^0,f,c
 13048  00276A  1E3D               	comf	(___aldiv@quotient+1)^0,f,c
 13049  00276C  6C3C               	negf	___aldiv@quotient^0,c
 13050  00276E  0E00               	movlw	0
 13051  002770  223D               	addwfc	(___aldiv@quotient+1)^0,f,c
 13052  002772  223E               	addwfc	(___aldiv@quotient+2)^0,f,c
 13053  002774  223F               	addwfc	(___aldiv@quotient+3)^0,f,c
 13054  002776                     l5764:
 13055  002776  C03C  F032         	movff	___aldiv@quotient,?___aldiv
 13056  00277A  C03D  F033         	movff	___aldiv@quotient+1,?___aldiv+1
 13057  00277E  C03E  F034         	movff	___aldiv@quotient+2,?___aldiv+2
 13058  002782  C03F  F035         	movff	___aldiv@quotient+3,?___aldiv+3
 13059  002786  0012               	return		;funcret
 13060  002788                     __end_of___aldiv:
 13061                           	callstack 0
 13062                           
 13063 ;; *************** function _MCP4725 *****************
 13064 ;; Defined at:
 13065 ;;		line 35 in file "MCP4725.c"
 13066 ;; Parameters:    Size  Location     Type
 13067 ;;  Vout            2   26[COMRAM] unsigned int 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;		None
 13070 ;; Return value:  Size  Location     Type
 13071 ;;                  1    wreg      void 
 13072 ;; Registers used:
 13073 ;;		wreg, status,2, status,0, cstack
 13074 ;; Tracked objects:
 13075 ;;		On entry : 0/0
 13076 ;;		On exit  : 0/0
 13077 ;;		Unchanged: 0/0
 13078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13079 ;;      Params:         2       0       0       0       0       0       0       0       0
 13080 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13081 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13082 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13083 ;;Total ram usage:        2 bytes
 13084 ;; Hardware stack levels used:    1
 13085 ;; Hardware stack levels required when called:    4
 13086 ;; This function calls:
 13087 ;;		_I2C_stop
 13088 ;;		_dac_init
 13089 ;;		_dac_write
 13090 ;;		_delay
 13091 ;; This function is called by:
 13092 ;;		_main
 13093 ;; This function uses a non-reentrant model
 13094 ;;
 13095                           
 13096                           	psect	text69
 13097  003964                     __ptext69:
 13098                           	callstack 0
 13099  003964                     _MCP4725:
 13100                           	callstack 26
 13101  003964                     
 13102                           ;MCP4725.c: 35: void MCP4725 (unsigned int Vout);MCP4725.c: 36: {;MCP4725.c: 37:     dac
      +                          _init();
 13103  003964  EC1E  F01B         	call	_dac_init	;wreg free
 13104                           
 13105                           ;MCP4725.c: 38:     dac_write(Vout);
 13106  003968  C040  F029         	movff	MCP4725@Vout,dac_write@code
 13107  00396C  C041  F02A         	movff	MCP4725@Vout+1,dac_write@code+1
 13108  003970  ECB7  F01A         	call	_dac_write	;wreg free
 13109  003974                     
 13110                           ;MCP4725.c: 39:     I2C_stop();
 13111  003974  EC29  F01D         	call	_I2C_stop	;wreg free
 13112  003978                     
 13113                           ;MCP4725.c: 40:     delay(1);
 13114  003978  0E00               	movlw	0
 13115  00397A  6E27               	movwf	(delay@t+1)^0,c
 13116  00397C  0E01               	movlw	1
 13117  00397E  6E26               	movwf	delay@t^0,c
 13118  003980  EC27  F01C         	call	_delay	;wreg free
 13119  003984  0012               	return		;funcret
 13120  003986                     __end_of_MCP4725:
 13121                           	callstack 0
 13122                           
 13123 ;; *************** function _dac_write *****************
 13124 ;; Defined at:
 13125 ;;		line 25 in file "MCP4725.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;  code            2    3[COMRAM] unsigned int 
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;		None
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  1    wreg      void 
 13132 ;; Registers used:
 13133 ;;		wreg, status,2, status,0, cstack
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13139 ;;      Params:         2       0       0       0       0       0       0       0       0
 13140 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13141 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13142 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13143 ;;Total ram usage:        5 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    3
 13146 ;; This function calls:
 13147 ;;		_I2C_ack_receive
 13148 ;;		_I2C_tx
 13149 ;;		_delay
 13150 ;; This function is called by:
 13151 ;;		_MCP4725
 13152 ;;		_MCP4725X
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           	psect	text70
 13157  00356E                     __ptext70:
 13158                           	callstack 0
 13159  00356E                     _dac_write:
 13160                           	callstack 26
 13161  00356E                     
 13162                           ;MCP4725.c: 25: void dac_write ( unsigned int code );MCP4725.c: 26: {;MCP4725.c: 27:    
      +                           I2C_tx( code >> 4 );
 13163  00356E  C029  F02B         	movff	dac_write@code,??_dac_write
 13164  003572  C02A  F02C         	movff	dac_write@code+1,??_dac_write+1
 13165  003576  0E04               	movlw	4
 13166  003578  6E2D               	movwf	(??_dac_write+2)^0,c
 13167  00357A                     u3225:
 13168  00357A  90D8               	bcf	status,0,c
 13169  00357C  322C               	rrcf	(??_dac_write+1)^0,f,c
 13170  00357E  322B               	rrcf	??_dac_write^0,f,c
 13171  003580  2E2D               	decfsz	(??_dac_write+2)^0,f,c
 13172  003582  EFBD  F01A         	goto	u3225
 13173  003586  502B               	movf	??_dac_write^0,w,c
 13174  003588  EC00  F01D         	call	_I2C_tx
 13175  00358C                     
 13176                           ;MCP4725.c: 28:     I2C_ack_receive();
 13177  00358C  EC58  F01D         	call	_I2C_ack_receive	;wreg free
 13178  003590                     
 13179                           ;MCP4725.c: 29:     delay(1);
 13180  003590  0E00               	movlw	0
 13181  003592  6E27               	movwf	(delay@t+1)^0,c
 13182  003594  0E01               	movlw	1
 13183  003596  6E26               	movwf	delay@t^0,c
 13184  003598  EC27  F01C         	call	_delay	;wreg free
 13185  00359C                     
 13186                           ;MCP4725.c: 30:     I2C_tx( code << 4);
 13187  00359C  3829               	swapf	dac_write@code^0,w,c
 13188  00359E  0BF0               	andlw	240
 13189  0035A0  EC00  F01D         	call	_I2C_tx
 13190  0035A4                     
 13191                           ;MCP4725.c: 31:     I2C_ack_receive();
 13192  0035A4  EC58  F01D         	call	_I2C_ack_receive	;wreg free
 13193                           
 13194                           ;MCP4725.c: 32:     delay(1);
 13195  0035A8  0E00               	movlw	0
 13196  0035AA  6E27               	movwf	(delay@t+1)^0,c
 13197  0035AC  0E01               	movlw	1
 13198  0035AE  6E26               	movwf	delay@t^0,c
 13199  0035B0  EC27  F01C         	call	_delay	;wreg free
 13200  0035B4  0012               	return		;funcret
 13201  0035B6                     __end_of_dac_write:
 13202                           	callstack 0
 13203                           
 13204 ;; *************** function _dac_init *****************
 13205 ;; Defined at:
 13206 ;;		line 13 in file "MCP4725.c"
 13207 ;; Parameters:    Size  Location     Type
 13208 ;;		None
 13209 ;; Auto vars:     Size  Location     Type
 13210 ;;		None
 13211 ;; Return value:  Size  Location     Type
 13212 ;;                  1    wreg      void 
 13213 ;; Registers used:
 13214 ;;		wreg, status,2, status,0, cstack
 13215 ;; Tracked objects:
 13216 ;;		On entry : 0/0
 13217 ;;		On exit  : 0/0
 13218 ;;		Unchanged: 0/0
 13219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13220 ;;      Params:         0       0       0       0       0       0       0       0       0
 13221 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13222 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13223 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13224 ;;Total ram usage:        0 bytes
 13225 ;; Hardware stack levels used:    1
 13226 ;; Hardware stack levels required when called:    3
 13227 ;; This function calls:
 13228 ;;		_I2C_ack_receive
 13229 ;;		_I2C_start
 13230 ;;		_I2C_tx
 13231 ;;		_delay
 13232 ;; This function is called by:
 13233 ;;		_MCP4725
 13234 ;;		_MCP4725X
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           	psect	text71
 13239  00363C                     __ptext71:
 13240                           	callstack 0
 13241  00363C                     _dac_init:
 13242                           	callstack 26
 13243  00363C                     
 13244                           ;MCP4725.c: 15:     I2C_start();
 13245  00363C  EC1F  F01D         	call	_I2C_start	;wreg free
 13246  003640                     
 13247                           ;MCP4725.c: 16:     delay(1);
 13248  003640  0E00               	movlw	0
 13249  003642  6E27               	movwf	(delay@t+1)^0,c
 13250  003644  0E01               	movlw	1
 13251  003646  6E26               	movwf	delay@t^0,c
 13252  003648  EC27  F01C         	call	_delay	;wreg free
 13253  00364C                     
 13254                           ;MCP4725.c: 17:     I2C_tx( 0b11000000 );
 13255  00364C  0EC0               	movlw	192
 13256  00364E  EC00  F01D         	call	_I2C_tx
 13257  003652                     
 13258                           ;MCP4725.c: 18:     I2C_ack_receive();
 13259  003652  EC58  F01D         	call	_I2C_ack_receive	;wreg free
 13260  003656                     
 13261                           ;MCP4725.c: 19:     delay(1);
 13262  003656  0E00               	movlw	0
 13263  003658  6E27               	movwf	(delay@t+1)^0,c
 13264  00365A  0E01               	movlw	1
 13265  00365C  6E26               	movwf	delay@t^0,c
 13266  00365E  EC27  F01C         	call	_delay	;wreg free
 13267                           
 13268                           ;MCP4725.c: 20:     I2C_tx( 0b01100000 );
 13269  003662  0E60               	movlw	96
 13270  003664  EC00  F01D         	call	_I2C_tx
 13271  003668                     
 13272                           ;MCP4725.c: 21:     I2C_ack_receive();
 13273  003668  EC58  F01D         	call	_I2C_ack_receive	;wreg free
 13274  00366C                     
 13275                           ;MCP4725.c: 22:     delay(1);
 13276  00366C  0E00               	movlw	0
 13277  00366E  6E27               	movwf	(delay@t+1)^0,c
 13278  003670  0E01               	movlw	1
 13279  003672  6E26               	movwf	delay@t^0,c
 13280  003674  EC27  F01C         	call	_delay	;wreg free
 13281  003678  0012               	return		;funcret
 13282  00367A                     __end_of_dac_init:
 13283                           	callstack 0
 13284                           
 13285 ;; *************** function _delay *****************
 13286 ;; Defined at:
 13287 ;;		line 10 in file "delay.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  t               2    0[COMRAM] unsigned int 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;		None
 13292 ;; Return value:  Size  Location     Type
 13293 ;;                  1    wreg      void 
 13294 ;; Registers used:
 13295 ;;		wreg, status,2, status,0
 13296 ;; Tracked objects:
 13297 ;;		On entry : 0/0
 13298 ;;		On exit  : 0/0
 13299 ;;		Unchanged: 0/0
 13300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13301 ;;      Params:         2       0       0       0       0       0       0       0       0
 13302 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13303 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13304 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13305 ;;Total ram usage:        3 bytes
 13306 ;; Hardware stack levels used:    1
 13307 ;; Hardware stack levels required when called:    2
 13308 ;; This function calls:
 13309 ;;		Nothing
 13310 ;; This function is called by:
 13311 ;;		_main
 13312 ;;		_dispLCD_init
 13313 ;;		_dac_init
 13314 ;;		_dac_write
 13315 ;;		_MCP4725
 13316 ;;		_MCP4725X
 13317 ;; This function uses a non-reentrant model
 13318 ;;
 13319                           
 13320                           	psect	text72
 13321  00384E                     __ptext72:
 13322                           	callstack 0
 13323  00384E                     _delay:
 13324                           	callstack 27
 13325  00384E                     
 13326                           ;delay.c: 10: void delay( unsigned int t );delay.c: 11: {;delay.c: 12:     while( t )
 13327  00384E  EF34  F01C         	goto	l454
 13328  003852                     l4652:
 13329                           
 13330                           ;delay.c: 13:     {;delay.c: 14:         _delay((unsigned long)((1)*(20000000/4000.0)));
 13331  003852  0E07               	movlw	7
 13332  003854  6E28               	movwf	??_delay^0,c
 13333  003856  0E7D               	movlw	125
 13334  003858                     u5297:
 13335  003858  2EE8               	decfsz	wreg,f,c
 13336  00385A  D7FE               	bra	u5297
 13337  00385C  2E28               	decfsz	??_delay^0,f,c
 13338  00385E  D7FC               	bra	u5297
 13339  003860  F000               	nop	
 13340  003862                     
 13341                           ;delay.c: 15:         --t;
 13342  003862  0626               	decf	delay@t^0,f,c
 13343  003864  A0D8               	btfss	status,0,c
 13344  003866  0627               	decf	(delay@t+1)^0,f,c
 13345  003868                     l454:
 13346                           
 13347                           ;delay.c: 12:     while( t )
 13348  003868  5026               	movf	delay@t^0,w,c
 13349  00386A  1027               	iorwf	(delay@t+1)^0,w,c
 13350  00386C  A4D8               	btfss	status,2,c
 13351  00386E  EF3B  F01C         	goto	u2781
 13352  003872  EF3D  F01C         	goto	u2780
 13353  003876                     u2781:
 13354  003876  EF29  F01C         	goto	l4652
 13355  00387A                     u2780:
 13356  00387A  0012               	return		;funcret
 13357  00387C                     __end_of_delay:
 13358                           	callstack 0
 13359                           
 13360 ;; *************** function _I2C_tx *****************
 13361 ;; Defined at:
 13362 ;;		line 36 in file "spi_i2c.c"
 13363 ;; Parameters:    Size  Location     Type
 13364 ;;  b               1    wreg     unsigned char 
 13365 ;; Auto vars:     Size  Location     Type
 13366 ;;  b               1    0[COMRAM] unsigned char 
 13367 ;; Return value:  Size  Location     Type
 13368 ;;                  1    wreg      void 
 13369 ;; Registers used:
 13370 ;;		wreg
 13371 ;; Tracked objects:
 13372 ;;		On entry : 0/0
 13373 ;;		On exit  : 0/0
 13374 ;;		Unchanged: 0/0
 13375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13376 ;;      Params:         0       0       0       0       0       0       0       0       0
 13377 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13378 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13379 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13380 ;;Total ram usage:        1 bytes
 13381 ;; Hardware stack levels used:    1
 13382 ;; Hardware stack levels required when called:    2
 13383 ;; This function calls:
 13384 ;;		Nothing
 13385 ;; This function is called by:
 13386 ;;		_dac_init
 13387 ;;		_dac_write
 13388 ;; This function uses a non-reentrant model
 13389 ;;
 13390                           
 13391                           	psect	text73
 13392  003A00                     __ptext73:
 13393                           	callstack 0
 13394  003A00                     _I2C_tx:
 13395                           	callstack 26
 13396                           
 13397                           ;incstack = 0
 13398                           ;I2C_tx@b stored from wreg
 13399  003A00  6E26               	movwf	I2C_tx@b^0,c
 13400  003A02                     
 13401                           ;spi_i2c.c: 36: void I2C_tx( unsigned char b );spi_i2c.c: 37: {;spi_i2c.c: 38:     SSPBU
      +                          F = b;
 13402  003A02  C026  FFC9         	movff	I2C_tx@b,4041	;volatile
 13403  003A06                     l951:
 13404  003A06  B0C7               	btfsc	199,0,c	;volatile
 13405  003A08  EF08  F01D         	goto	u2811
 13406  003A0C  EF0A  F01D         	goto	u2810
 13407  003A10                     u2811:
 13408  003A10  EF03  F01D         	goto	l951
 13409  003A14                     u2810:
 13410  003A14  0012               	return		;funcret
 13411  003A16                     __end_of_I2C_tx:
 13412                           	callstack 0
 13413                           
 13414 ;; *************** function _I2C_start *****************
 13415 ;; Defined at:
 13416 ;;		line 22 in file "spi_i2c.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;		None
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;		None
 13421 ;; Return value:  Size  Location     Type
 13422 ;;                  1    wreg      void 
 13423 ;; Registers used:
 13424 ;;		None
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13430 ;;      Params:         0       0       0       0       0       0       0       0       0
 13431 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13432 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13433 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13434 ;;Total ram usage:        0 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    2
 13437 ;; This function calls:
 13438 ;;		Nothing
 13439 ;; This function is called by:
 13440 ;;		_dac_init
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text74
 13445  003A3E                     __ptext74:
 13446                           	callstack 0
 13447  003A3E                     _I2C_start:
 13448                           	callstack 26
 13449  003A3E                     
 13450                           ;spi_i2c.c: 24:     SSPCON2bits.SEN = 1;
 13451  003A3E  80C5               	bsf	197,0,c	;volatile
 13452  003A40                     l936:
 13453  003A40  A69E               	btfss	158,3,c	;volatile
 13454  003A42  EF25  F01D         	goto	u2801
 13455  003A46  EF27  F01D         	goto	u2800
 13456  003A4A                     u2801:
 13457  003A4A  EF20  F01D         	goto	l936
 13458  003A4E                     u2800:
 13459  003A4E                     
 13460                           ;spi_i2c.c: 26:     PIR1bits.SSPIF = 0;
 13461  003A4E  969E               	bcf	158,3,c	;volatile
 13462  003A50  0012               	return		;funcret
 13463  003A52                     __end_of_I2C_start:
 13464                           	callstack 0
 13465                           
 13466 ;; *************** function _I2C_ack_receive *****************
 13467 ;; Defined at:
 13468 ;;		line 56 in file "spi_i2c.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;		None
 13471 ;; Auto vars:     Size  Location     Type
 13472 ;;		None
 13473 ;; Return value:  Size  Location     Type
 13474 ;;                  1    wreg      void 
 13475 ;; Registers used:
 13476 ;;		None
 13477 ;; Tracked objects:
 13478 ;;		On entry : 0/0
 13479 ;;		On exit  : 0/0
 13480 ;;		Unchanged: 0/0
 13481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13482 ;;      Params:         0       0       0       0       0       0       0       0       0
 13483 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13484 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13485 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13486 ;;Total ram usage:        0 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; Hardware stack levels required when called:    2
 13489 ;; This function calls:
 13490 ;;		Nothing
 13491 ;; This function is called by:
 13492 ;;		_dac_init
 13493 ;;		_dac_write
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           	psect	text75
 13498  003AB0                     __ptext75:
 13499                           	callstack 0
 13500  003AB0                     _I2C_ack_receive:
 13501                           	callstack 26
 13502  003AB0                     l972:
 13503  003AB0  BCC5               	btfsc	197,6,c	;volatile
 13504  003AB2  EF5D  F01D         	goto	u2821
 13505  003AB6  EF5F  F01D         	goto	u2820
 13506  003ABA                     u2821:
 13507  003ABA  EF58  F01D         	goto	l972
 13508  003ABE                     u2820:
 13509  003ABE  0012               	return		;funcret
 13510  003AC0                     __end_of_I2C_ack_receive:
 13511                           	callstack 0
 13512                           
 13513 ;; *************** function _I2C_stop *****************
 13514 ;; Defined at:
 13515 ;;		line 41 in file "spi_i2c.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;		None
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  1    wreg      void 
 13522 ;; Registers used:
 13523 ;;		None
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13529 ;;      Params:         0       0       0       0       0       0       0       0       0
 13530 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13532 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13533 ;;Total ram usage:        0 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:    2
 13536 ;; This function calls:
 13537 ;;		Nothing
 13538 ;; This function is called by:
 13539 ;;		_MCP4725
 13540 ;;		_MCP4725X
 13541 ;; This function uses a non-reentrant model
 13542 ;;
 13543                           
 13544                           	psect	text76
 13545  003A52                     __ptext76:
 13546                           	callstack 0
 13547  003A52                     _I2C_stop:
 13548                           	callstack 27
 13549  003A52                     
 13550                           ;spi_i2c.c: 43:     SSPCON2bits.PEN = 1;
 13551  003A52  84C5               	bsf	197,2,c	;volatile
 13552  003A54                     l957:
 13553  003A54  A69E               	btfss	158,3,c	;volatile
 13554  003A56  EF2F  F01D         	goto	u3231
 13555  003A5A  EF31  F01D         	goto	u3230
 13556  003A5E                     u3231:
 13557  003A5E  EF2A  F01D         	goto	l957
 13558  003A62                     u3230:
 13559  003A62                     
 13560                           ;spi_i2c.c: 45:     PIR1bits.SSPIF = 0;
 13561  003A62  969E               	bcf	158,3,c	;volatile
 13562  003A64  0012               	return		;funcret
 13563  003A66                     __end_of_I2C_stop:
 13564                           	callstack 0
 13565                           
 13566 ;; *************** function _I2C_init *****************
 13567 ;; Defined at:
 13568 ;;		line 12 in file "spi_i2c.c"
 13569 ;; Parameters:    Size  Location     Type
 13570 ;;  freq            4   13[COMRAM] unsigned long 
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;		None
 13573 ;; Return value:  Size  Location     Type
 13574 ;;                  1    wreg      void 
 13575 ;; Registers used:
 13576 ;;		wreg, status,2, status,0, cstack
 13577 ;; Tracked objects:
 13578 ;;		On entry : 0/0
 13579 ;;		On exit  : 0/0
 13580 ;;		Unchanged: 0/0
 13581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13582 ;;      Params:         4       0       0       0       0       0       0       0       0
 13583 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13584 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13585 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13586 ;;Total ram usage:        4 bytes
 13587 ;; Hardware stack levels used:    1
 13588 ;; Hardware stack levels required when called:    3
 13589 ;; This function calls:
 13590 ;;		___lldiv
 13591 ;; This function is called by:
 13592 ;;		_main
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	text77
 13597  0036B6                     __ptext77:
 13598                           	callstack 0
 13599  0036B6                     _I2C_init:
 13600                           	callstack 27
 13601  0036B6                     
 13602                           ;spi_i2c.c: 12: void I2C_init( unsigned long freq );spi_i2c.c: 13: {;spi_i2c.c: 14:     
      +                          TRISBbits.TRISB0 = 1;
 13603  0036B6  8093               	bsf	147,0,c	;volatile
 13604                           
 13605                           ;spi_i2c.c: 15:     TRISBbits.TRISB1 = 1;
 13606  0036B8  8293               	bsf	147,1,c	;volatile
 13607  0036BA                     
 13608                           ;spi_i2c.c: 16:     SSPCON1bits.SSPM = 0x8;
 13609  0036BA  50C6               	movf	198,w,c	;volatile
 13610  0036BC  0BF0               	andlw	-16
 13611  0036BE  0908               	iorlw	8
 13612  0036C0  6EC6               	movwf	198,c	;volatile
 13613  0036C2                     
 13614                           ;spi_i2c.c: 17:     SSPADD = ((20000000>>2) / (freq))-1;
 13615  0036C2  0E40               	movlw	64
 13616  0036C4  6E26               	movwf	___lldiv@dividend^0,c
 13617  0036C6  0E4B               	movlw	75
 13618  0036C8  6E27               	movwf	(___lldiv@dividend+1)^0,c
 13619  0036CA  0E4C               	movlw	76
 13620  0036CC  6E28               	movwf	(___lldiv@dividend+2)^0,c
 13621  0036CE  0E00               	movlw	0
 13622  0036D0  6E29               	movwf	(___lldiv@dividend+3)^0,c
 13623  0036D2  C033  F02A         	movff	I2C_init@freq,___lldiv@divisor
 13624  0036D6  C034  F02B         	movff	I2C_init@freq+1,___lldiv@divisor+1
 13625  0036DA  C035  F02C         	movff	I2C_init@freq+2,___lldiv@divisor+2
 13626  0036DE  C036  F02D         	movff	I2C_init@freq+3,___lldiv@divisor+3
 13627  0036E2  ECA3  F016         	call	___lldiv	;wreg free
 13628  0036E6  0426               	decf	?___lldiv^0,w,c
 13629  0036E8  6EC8               	movwf	200,c	;volatile
 13630  0036EA                     
 13631                           ;spi_i2c.c: 18:     SSPSTATbits.SMP = 1;
 13632  0036EA  8EC7               	bsf	199,7,c	;volatile
 13633  0036EC                     
 13634                           ;spi_i2c.c: 19:     SSPCON1bits.SSPEN = 1;
 13635  0036EC  8AC6               	bsf	198,5,c	;volatile
 13636  0036EE  0012               	return		;funcret
 13637  0036F0                     __end_of_I2C_init:
 13638                           	callstack 0
 13639                           
 13640 ;; *************** function ___lldiv *****************
 13641 ;; Defined at:
 13642 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\__lldiv.c"
 13643 ;; Parameters:    Size  Location     Type
 13644 ;;  dividend        4    0[COMRAM] unsigned long 
 13645 ;;  divisor         4    4[COMRAM] unsigned long 
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;  quotient        4    8[COMRAM] unsigned long 
 13648 ;;  counter         1   12[COMRAM] unsigned char 
 13649 ;; Return value:  Size  Location     Type
 13650 ;;                  4    0[COMRAM] unsigned long 
 13651 ;; Registers used:
 13652 ;;		wreg, status,2, status,0
 13653 ;; Tracked objects:
 13654 ;;		On entry : 0/0
 13655 ;;		On exit  : 0/0
 13656 ;;		Unchanged: 0/0
 13657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13658 ;;      Params:         8       0       0       0       0       0       0       0       0
 13659 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13660 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13661 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13662 ;;Total ram usage:       13 bytes
 13663 ;; Hardware stack levels used:    1
 13664 ;; Hardware stack levels required when called:    2
 13665 ;; This function calls:
 13666 ;;		Nothing
 13667 ;; This function is called by:
 13668 ;;		_I2C_init
 13669 ;; This function uses a non-reentrant model
 13670 ;;
 13671                           
 13672                           	psect	text78
 13673  002D46                     __ptext78:
 13674                           	callstack 0
 13675  002D46                     ___lldiv:
 13676                           	callstack 27
 13677  002D46  0E00               	movlw	0
 13678  002D48  6E2E               	movwf	___lldiv@quotient^0,c
 13679  002D4A  0E00               	movlw	0
 13680  002D4C  6E2F               	movwf	(___lldiv@quotient+1)^0,c
 13681  002D4E  0E00               	movlw	0
 13682  002D50  6E30               	movwf	(___lldiv@quotient+2)^0,c
 13683  002D52  0E00               	movlw	0
 13684  002D54  6E31               	movwf	(___lldiv@quotient+3)^0,c
 13685  002D56  502A               	movf	___lldiv@divisor^0,w,c
 13686  002D58  102B               	iorwf	(___lldiv@divisor+1)^0,w,c
 13687  002D5A  102C               	iorwf	(___lldiv@divisor+2)^0,w,c
 13688  002D5C  102D               	iorwf	(___lldiv@divisor+3)^0,w,c
 13689  002D5E  B4D8               	btfsc	status,2,c
 13690  002D60  EFB4  F016         	goto	u3321
 13691  002D64  EFB6  F016         	goto	u3320
 13692  002D68                     u3321:
 13693  002D68  EFEC  F016         	goto	l1078
 13694  002D6C                     u3320:
 13695  002D6C  0E01               	movlw	1
 13696  002D6E  6E32               	movwf	___lldiv@counter^0,c
 13697  002D70  EFC0  F016         	goto	l5060
 13698  002D74                     l5058:
 13699  002D74  90D8               	bcf	status,0,c
 13700  002D76  362A               	rlcf	___lldiv@divisor^0,f,c
 13701  002D78  362B               	rlcf	(___lldiv@divisor+1)^0,f,c
 13702  002D7A  362C               	rlcf	(___lldiv@divisor+2)^0,f,c
 13703  002D7C  362D               	rlcf	(___lldiv@divisor+3)^0,f,c
 13704  002D7E  2A32               	incf	___lldiv@counter^0,f,c
 13705  002D80                     l5060:
 13706  002D80  AE2D               	btfss	(___lldiv@divisor+3)^0,7,c
 13707  002D82  EFC5  F016         	goto	u3331
 13708  002D86  EFC7  F016         	goto	u3330
 13709  002D8A                     u3331:
 13710  002D8A  EFBA  F016         	goto	l5058
 13711  002D8E                     u3330:
 13712  002D8E                     l5062:
 13713  002D8E  90D8               	bcf	status,0,c
 13714  002D90  362E               	rlcf	___lldiv@quotient^0,f,c
 13715  002D92  362F               	rlcf	(___lldiv@quotient+1)^0,f,c
 13716  002D94  3630               	rlcf	(___lldiv@quotient+2)^0,f,c
 13717  002D96  3631               	rlcf	(___lldiv@quotient+3)^0,f,c
 13718  002D98  502A               	movf	___lldiv@divisor^0,w,c
 13719  002D9A  5C26               	subwf	___lldiv@dividend^0,w,c
 13720  002D9C  502B               	movf	(___lldiv@divisor+1)^0,w,c
 13721  002D9E  5827               	subwfb	(___lldiv@dividend+1)^0,w,c
 13722  002DA0  502C               	movf	(___lldiv@divisor+2)^0,w,c
 13723  002DA2  5828               	subwfb	(___lldiv@dividend+2)^0,w,c
 13724  002DA4  502D               	movf	(___lldiv@divisor+3)^0,w,c
 13725  002DA6  5829               	subwfb	(___lldiv@dividend+3)^0,w,c
 13726  002DA8  A0D8               	btfss	status,0,c
 13727  002DAA  EFD9  F016         	goto	u3341
 13728  002DAE  EFDB  F016         	goto	u3340
 13729  002DB2                     u3341:
 13730  002DB2  EFE4  F016         	goto	l5070
 13731  002DB6                     u3340:
 13732  002DB6  502A               	movf	___lldiv@divisor^0,w,c
 13733  002DB8  5E26               	subwf	___lldiv@dividend^0,f,c
 13734  002DBA  502B               	movf	(___lldiv@divisor+1)^0,w,c
 13735  002DBC  5A27               	subwfb	(___lldiv@dividend+1)^0,f,c
 13736  002DBE  502C               	movf	(___lldiv@divisor+2)^0,w,c
 13737  002DC0  5A28               	subwfb	(___lldiv@dividend+2)^0,f,c
 13738  002DC2  502D               	movf	(___lldiv@divisor+3)^0,w,c
 13739  002DC4  5A29               	subwfb	(___lldiv@dividend+3)^0,f,c
 13740  002DC6  802E               	bsf	___lldiv@quotient^0,0,c
 13741  002DC8                     l5070:
 13742  002DC8  90D8               	bcf	status,0,c
 13743  002DCA  322D               	rrcf	(___lldiv@divisor+3)^0,f,c
 13744  002DCC  322C               	rrcf	(___lldiv@divisor+2)^0,f,c
 13745  002DCE  322B               	rrcf	(___lldiv@divisor+1)^0,f,c
 13746  002DD0  322A               	rrcf	___lldiv@divisor^0,f,c
 13747  002DD2  2E32               	decfsz	___lldiv@counter^0,f,c
 13748  002DD4  EFC7  F016         	goto	l5062
 13749  002DD8                     l1078:
 13750  002DD8  C02E  F026         	movff	___lldiv@quotient,?___lldiv
 13751  002DDC  C02F  F027         	movff	___lldiv@quotient+1,?___lldiv+1
 13752  002DE0  C030  F028         	movff	___lldiv@quotient+2,?___lldiv+2
 13753  002DE4  C031  F029         	movff	___lldiv@quotient+3,?___lldiv+3
 13754  002DE8  0012               	return		;funcret
 13755  002DEA                     __end_of___lldiv:
 13756                           	callstack 0
 13757                           
 13758 ;; *************** function _irq *****************
 13759 ;; Defined at:
 13760 ;;		line 56 in file "main.c"
 13761 ;; Parameters:    Size  Location     Type
 13762 ;;		None
 13763 ;; Auto vars:     Size  Location     Type
 13764 ;;		None
 13765 ;; Return value:  Size  Location     Type
 13766 ;;                  1    wreg      void 
 13767 ;; Registers used:
 13768 ;;		wreg, status,2, status,0, cstack
 13769 ;; Tracked objects:
 13770 ;;		On entry : 0/0
 13771 ;;		On exit  : 0/0
 13772 ;;		Unchanged: 0/0
 13773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13774 ;;      Params:         0       0       0       0       0       0       0       0       0
 13775 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13776 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13777 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13778 ;;Total ram usage:        0 bytes
 13779 ;; Hardware stack levels used:    1
 13780 ;; Hardware stack levels required when called:    1
 13781 ;; This function calls:
 13782 ;;		_intt1_1ms
 13783 ;; This function is called by:
 13784 ;;		Interrupt level 2
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           	psect	intcode
 13789  000008                     __pintcode:
 13790                           	callstack 0
 13791  000008                     _irq:
 13792                           	callstack 25
 13793                           
 13794                           ;incstack = 0
 13795  000008  8259               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 13796  00000A  ED3E  F01C         	call	int_func,f	;refresh shadow registers
 13797                           
 13798                           	psect	intcode_body
 13799  00387C                     __pintcode_body:
 13800                           	callstack 25
 13801  00387C                     int_func:
 13802                           	callstack 25
 13803  00387C  0006               	pop		; remove dummy address from shadow register refresh
 13804  00387E                     
 13805                           ;main.c: 58:     INTCONbits.GIE = 0;
 13806  00387E  9EF2               	bcf	242,7,c	;volatile
 13807                           
 13808                           ;main.c: 59:     if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 13809  003880  A09E               	btfss	158,0,c	;volatile
 13810  003882  EF45  F01C         	goto	i2u135_41
 13811  003886  EF47  F01C         	goto	i2u135_40
 13812  00388A                     i2u135_41:
 13813  00388A  EF51  F01C         	goto	i2l2942
 13814  00388E                     i2u135_40:
 13815  00388E  A09D               	btfss	157,0,c	;volatile
 13816  003890  EF4C  F01C         	goto	i2u136_41
 13817  003894  EF4E  F01C         	goto	i2u136_40
 13818  003898                     i2u136_41:
 13819  003898  EF51  F01C         	goto	i2l2942
 13820  00389C                     i2u136_40:
 13821  00389C                     
 13822                           ;main.c: 60:     {;main.c: 61:         PIR1bits.TMR1IF = 0;
 13823  00389C  909E               	bcf	158,0,c	;volatile
 13824  00389E                     
 13825                           ;main.c: 63:         intt1_1ms();
 13826  00389E  ECCA  F01B         	call	_intt1_1ms	;wreg free
 13827  0038A2                     i2l2942:
 13828                           
 13829                           ;main.c: 65:     INTCONbits.GIE = 1;
 13830  0038A2  8EF2               	bsf	242,7,c	;volatile
 13831  0038A4  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 13832  0038A6  0011               	retfie		f
 13833  0038A8                     __end_of_irq:
 13834                           	callstack 0
 13835                           
 13836 ;; *************** function _intt1_1ms *****************
 13837 ;; Defined at:
 13838 ;;		line 5 in file "timer1.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;		None
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;		None
 13843 ;; Return value:  Size  Location     Type
 13844 ;;                  1    wreg      void 
 13845 ;; Registers used:
 13846 ;;		wreg, status,2, status,0
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13852 ;;      Params:         0       0       0       0       0       0       0       0       0
 13853 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13854 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13855 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13856 ;;Total ram usage:        0 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; This function calls:
 13859 ;;		Nothing
 13860 ;; This function is called by:
 13861 ;;		_irq
 13862 ;; This function uses a non-reentrant model
 13863 ;;
 13864                           
 13865                           	psect	text80
 13866  003794                     __ptext80:
 13867                           	callstack 0
 13868  003794                     _intt1_1ms:
 13869                           	callstack 25
 13870  003794                     
 13871                           ;timer1.c: 7:     TMR1H = ((65536-625)>>8) & 0x00FF;
 13872  003794  0EFD               	movlw	253
 13873  003796  6ECF               	movwf	207,c	;volatile
 13874                           
 13875                           ;timer1.c: 8:     TMR1L = (65536-625) & 0x00FF;
 13876  003798  0E8F               	movlw	143
 13877  00379A  6ECE               	movwf	206,c	;volatile
 13878  00379C                     
 13879                           ;timer1.c: 10:     if(t1cont)
 13880  00379C  5001               	movf	_t1cont^0,w,c
 13881  00379E  1002               	iorwf	(_t1cont+1)^0,w,c
 13882  0037A0  1003               	iorwf	(_t1cont+2)^0,w,c
 13883  0037A2  1004               	iorwf	(_t1cont+3)^0,w,c
 13884  0037A4  B4D8               	btfsc	status,2,c
 13885  0037A6  EFD7  F01B         	goto	i2u72_41
 13886  0037AA  EFD9  F01B         	goto	i2u72_40
 13887  0037AE                     i2u72_41:
 13888  0037AE  EFE0  F01B         	goto	i2l1037
 13889  0037B2                     i2u72_40:
 13890  0037B2                     
 13891                           ;timer1.c: 11:         --t1cont;
 13892  0037B2  0601               	decf	_t1cont^0,f,c
 13893  0037B4  0E00               	movlw	0
 13894  0037B6  5A02               	subwfb	(_t1cont+1)^0,f,c
 13895  0037B8  5A03               	subwfb	(_t1cont+2)^0,f,c
 13896  0037BA  5A04               	subwfb	(_t1cont+3)^0,f,c
 13897  0037BC  EFE1  F01B         	goto	i2l1039
 13898  0037C0                     i2l1037:
 13899                           
 13900                           ;timer1.c: 13:         T1CONbits.TMR1ON = 0;
 13901  0037C0  90CD               	bcf	205,0,c	;volatile
 13902  0037C2                     i2l1039:
 13903  0037C2  0012               	return		;funcret
 13904  0037C4                     __end_of_intt1_1ms:
 13905                           	callstack 0
 13906                           
 13907                           	psect	text81
 13908  000000                     __ptext81:
 13909                           	callstack 0
 13910  000000                     
 13911                           	psect	rparam
 13912  0000                     
 13913                           	psect	temp
 13914  000059                     btemp:
 13915                           	callstack 0
 13916  000059                     	ds	1
 13917  0000                     int$flags	set	btemp
 13918  0000                     wtemp8	set	btemp+1
 13919  0000                     ttemp5	set	btemp+1
 13920  0000                     ttemp6	set	btemp+4
 13921  0000                     ttemp7	set	btemp+8
 13922                           
 13923                           	psect	idloc
 13924                           
 13925                           ;Config register IDLOC0 @ 0x200000
 13926                           ;	unspecified, using default values
 13927  200000                     	org	2097152
 13928  200000  FF                 	db	255
 13929                           
 13930                           ;Config register IDLOC1 @ 0x200001
 13931                           ;	unspecified, using default values
 13932  200001                     	org	2097153
 13933  200001  FF                 	db	255
 13934                           
 13935                           ;Config register IDLOC2 @ 0x200002
 13936                           ;	unspecified, using default values
 13937  200002                     	org	2097154
 13938  200002  FF                 	db	255
 13939                           
 13940                           ;Config register IDLOC3 @ 0x200003
 13941                           ;	unspecified, using default values
 13942  200003                     	org	2097155
 13943  200003  FF                 	db	255
 13944                           
 13945                           ;Config register IDLOC4 @ 0x200004
 13946                           ;	unspecified, using default values
 13947  200004                     	org	2097156
 13948  200004  FF                 	db	255
 13949                           
 13950                           ;Config register IDLOC5 @ 0x200005
 13951                           ;	unspecified, using default values
 13952  200005                     	org	2097157
 13953  200005  FF                 	db	255
 13954                           
 13955                           ;Config register IDLOC6 @ 0x200006
 13956                           ;	unspecified, using default values
 13957  200006                     	org	2097158
 13958  200006  FF                 	db	255
 13959                           
 13960                           ;Config register IDLOC7 @ 0x200007
 13961                           ;	unspecified, using default values
 13962  200007                     	org	2097159
 13963  200007  FF                 	db	255
 13964                           
 13965                           	psect	config
 13966                           
 13967                           ;Config register CONFIG1L @ 0x300000
 13968                           ;	PLL Prescaler Selection bits
 13969                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
 13970                           ;	System Clock Postscaler Selection bits
 13971                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 13972                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 13973                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 13974  300000                     	org	3145728
 13975  300000  04                 	db	4
 13976                           
 13977                           ;Config register CONFIG1H @ 0x300001
 13978                           ;	Oscillator Selection bits
 13979                           ;	FOSC = HS, HS oscillator (HS)
 13980                           ;	Fail-Safe Clock Monitor Enable bit
 13981                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 13982                           ;	Internal/External Oscillator Switchover bit
 13983                           ;	IESO = OFF, Oscillator Switchover mode disabled
 13984  300001                     	org	3145729
 13985  300001  0C                 	db	12
 13986                           
 13987                           ;Config register CONFIG2L @ 0x300002
 13988                           ;	Power-up Timer Enable bit
 13989                           ;	PWRT = ON, PWRT enabled
 13990                           ;	Brown-out Reset Enable bits
 13991                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 13992                           ;	Brown-out Reset Voltage bits
 13993                           ;	BORV = 3, Minimum setting 2.05V
 13994                           ;	USB Voltage Regulator Enable bit
 13995                           ;	VREGEN = OFF, USB voltage regulator disabled
 13996  300002                     	org	3145730
 13997  300002  18                 	db	24
 13998                           
 13999                           ;Config register CONFIG2H @ 0x300003
 14000                           ;	Watchdog Timer Enable bit
 14001                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 14002                           ;	Watchdog Timer Postscale Select bits
 14003                           ;	WDTPS = 32768, 1:32768
 14004  300003                     	org	3145731
 14005  300003  1E                 	db	30
 14006                           
 14007                           ; Padding undefined space
 14008  300004                     	org	3145732
 14009  300004  FF                 	db	255
 14010                           
 14011                           ;Config register CONFIG3H @ 0x300005
 14012                           ;	CCP2 MUX bit
 14013                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 14014                           ;	PORTB A/D Enable bit
 14015                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 14016                           ;	Low-Power Timer 1 Oscillator Enable bit
 14017                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 14018                           ;	MCLR Pin Enable bit
 14019                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
 14020  300005                     	org	3145733
 14021  300005  01                 	db	1
 14022                           
 14023                           ;Config register CONFIG4L @ 0x300006
 14024                           ;	Stack Full/Underflow Reset Enable bit
 14025                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
 14026                           ;	Single-Supply ICSP Enable bit
 14027                           ;	LVP = OFF, Single-Supply ICSP disabled
 14028                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 14029                           ;	ICPRT = OFF, ICPORT disabled
 14030                           ;	Extended Instruction Set Enable bit
 14031                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 14032                           ;	Background Debugger Enable bit
 14033                           ;	DEBUG = 0x1, unprogrammed default
 14034  300006                     	org	3145734
 14035  300006  80                 	db	128
 14036                           
 14037                           ; Padding undefined space
 14038  300007                     	org	3145735
 14039  300007  FF                 	db	255
 14040                           
 14041                           ;Config register CONFIG5L @ 0x300008
 14042                           ;	Code Protection bit
 14043                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 14044                           ;	Code Protection bit
 14045                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 14046                           ;	Code Protection bit
 14047                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 14048                           ;	Code Protection bit
 14049                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 14050  300008                     	org	3145736
 14051  300008  0F                 	db	15
 14052                           
 14053                           ;Config register CONFIG5H @ 0x300009
 14054                           ;	Boot Block Code Protection bit
 14055                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 14056                           ;	Data EEPROM Code Protection bit
 14057                           ;	CPD = OFF, Data EEPROM is not code-protected
 14058  300009                     	org	3145737
 14059  300009  C0                 	db	192
 14060                           
 14061                           ;Config register CONFIG6L @ 0x30000A
 14062                           ;	Write Protection bit
 14063                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 14064                           ;	Write Protection bit
 14065                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 14066                           ;	Write Protection bit
 14067                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 14068                           ;	Write Protection bit
 14069                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 14070  30000A                     	org	3145738
 14071  30000A  0F                 	db	15
 14072                           
 14073                           ;Config register CONFIG6H @ 0x30000B
 14074                           ;	Configuration Register Write Protection bit
 14075                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 14076                           ;	Boot Block Write Protection bit
 14077                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 14078                           ;	Data EEPROM Write Protection bit
 14079                           ;	WRTD = OFF, Data EEPROM is not write-protected
 14080  30000B                     	org	3145739
 14081  30000B  E0                 	db	224
 14082                           
 14083                           ;Config register CONFIG7L @ 0x30000C
 14084                           ;	Table Read Protection bit
 14085                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14086                           ;	Table Read Protection bit
 14087                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14088                           ;	Table Read Protection bit
 14089                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14090                           ;	Table Read Protection bit
 14091                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14092  30000C                     	org	3145740
 14093  30000C  0F                 	db	15
 14094                           
 14095                           ;Config register CONFIG7H @ 0x30000D
 14096                           ;	Boot Block Table Read Protection bit
 14097                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 14098  30000D                     	org	3145741
 14099  30000D  40                 	db	64
 14100                           tosu	equ	0xFFF
 14101                           tosh	equ	0xFFE
 14102                           tosl	equ	0xFFD
 14103                           stkptr	equ	0xFFC
 14104                           pclatu	equ	0xFFB
 14105                           pclath	equ	0xFFA
 14106                           pcl	equ	0xFF9
 14107                           tblptru	equ	0xFF8
 14108                           tblptrh	equ	0xFF7
 14109                           tblptrl	equ	0xFF6
 14110                           tablat	equ	0xFF5
 14111                           prodh	equ	0xFF4
 14112                           prodl	equ	0xFF3
 14113                           indf0	equ	0xFEF
 14114                           postinc0	equ	0xFEE
 14115                           postdec0	equ	0xFED
 14116                           preinc0	equ	0xFEC
 14117                           plusw0	equ	0xFEB
 14118                           fsr0h	equ	0xFEA
 14119                           fsr0l	equ	0xFE9
 14120                           wreg	equ	0xFE8
 14121                           indf1	equ	0xFE7
 14122                           postinc1	equ	0xFE6
 14123                           postdec1	equ	0xFE5
 14124                           preinc1	equ	0xFE4
 14125                           plusw1	equ	0xFE3
 14126                           fsr1h	equ	0xFE2
 14127                           fsr1l	equ	0xFE1
 14128                           bsr	equ	0xFE0
 14129                           indf2	equ	0xFDF
 14130                           postinc2	equ	0xFDE
 14131                           postdec2	equ	0xFDD
 14132                           preinc2	equ	0xFDC
 14133                           plusw2	equ	0xFDB
 14134                           fsr2h	equ	0xFDA
 14135                           fsr2l	equ	0xFD9
 14136                           status	equ	0xFD8

Data Sizes:
    Strings     734
    Constant    0
    Data        59
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      88
    BANK0           160     93     135
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    S85$3$0	PTR unsigned char  size(2) Largest target is 0

    S85$0$1	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    S85$1$1	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    S29$1$0	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_27(CODE[78]), STR_26(CODE[62]), STR_15(CODE[81]), STR_4(CODE[83]), 

    S29$2$2	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[21]), STR_24(CODE[21]), STR_23(CODE[21]), 
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[8]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_14(CODE[21]), 
		 -> STR_13(CODE[21]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), STR_3(CODE[21]), STR_2(CODE[2]), STR_1(CODE[2]), 

    initSerialIO@ptrOut	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorOut(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@vetorIn(BANK0[1]), 

    dignum_apagar@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    dignum_conc@ptrNum	PTR unsigned int  size(2) Largest target is 2
		 -> main@ciclos(BANK0[2]), main@num(BANK0[2]), 

    decodifica@d	PTR unsigned char  size(2) Largest target is 18
		 -> printExec@passo(COMRAM[1]), fifo_print@comando(COMRAM[1]), fila(COMRAM[18]), main@vetor_aux(BANK0[16]), 
		 -> main@auxPasso(BANK0[1]), 

    codifica@dado	PTR unsigned char  size(2) Largest target is 2047
		 -> fifo_add_control@c(COMRAM[1]), fifo_add_tempo@t(COMRAM[1]), fifo_add@passo(COMRAM[1]), RAM(DATA[2047]), 

    salva_atuadores_init@pt	PTR unsigned char  size(2) Largest target is 4
		 -> salva_atuadores_init@condi_init(COMRAM[4]), 

    buscar_dado@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@init_cond(BANK0[1]), 

    buscar_receita@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    salvar_receita@data	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    dispLCD_str@str	PTR const unsigned char  size(2) Largest target is 83
		 -> STR_27(CODE[78]), STR_26(CODE[62]), STR_15(CODE[81]), STR_4(CODE[83]), 

    dispLCD@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_25(CODE[21]), STR_24(CODE[21]), STR_23(CODE[21]), 
		 -> STR_22(CODE[21]), STR_21(CODE[21]), STR_20(CODE[8]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_14(CODE[21]), 
		 -> STR_13(CODE[21]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[21]), STR_6(CODE[21]), 
		 -> STR_5(CODE[21]), STR_3(CODE[21]), STR_2(CODE[2]), STR_1(CODE[2]), 

    ler_sensor@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorIn(BANK0[1]), 

    set_passo@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> main@vetorOut(BANK0[1]), 

    sp__fifo_adrs	PTR unsigned char  size(2) Largest target is 18
		 -> fila(COMRAM[18]), 

    main@ptr_564	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr_545	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@pt	PTR unsigned char  size(2) Largest target is 16
		 -> main@vetor_aux(BANK0[16]), 

    main@ptr	PTR unsigned char  size(2) Largest target is 20
		 -> main@lema(BANK0[20]), 

    S85$formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    EEPROM.formatar	PTR FTN()void  size(2) Largest target is 1
		 -> formatar_receitas(), 

    S85$livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    EEPROM.livre	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> receita_livre(), 

    S85$deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    EEPROM.deletar	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> deletar_receita(), 

    S85$buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    EEPROM.buscar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> buscar_receita(), 

    S85$salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    EEPROM.salvar	PTR FTN(unsigned char ,PTR unsigned char ,)void  size(2) Largest target is 1
		 -> salvar_receita(), 

    S29$clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    IHM.clr	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_clr(), 

    S29$printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    IHM.printv	PTR FTN(unsigned char ,unsigned char ,int ,unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_num(), 

    S29$printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    IHM.printpos	PTR FTN(unsigned char ,unsigned char ,PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD(), 

    S29$print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    IHM.print	PTR FTN(PTR const unsigned char ,)void  size(2) Largest target is 1
		 -> dispLCD_str(), 

    S29$init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 

    IHM.init	PTR FTN()void  size(2) Largest target is 1
		 -> dispLCD_init(), 


Critical Paths under _main in COMRAM

    _main->_printExec
    _teclado_borda->_teclado_scan
    _setT1->___wmul
    _serialIOscan->_serialIObyteShift
    _salvar_receita->___awmod
    _salvar_dado->___awmod
    _salva_atuadores_init->_ler_atuador
    _printExec->_dispLCD_num
    _posAtual->_fifo_lerPos
    _dispLCD_num->_dignum_tam
    _manipula_atuadores_init->_alt_atuador
    _formatar_receitas->_EEPROM_write
    _fifo_print->___awdiv
    _fifo_delete->_fifo_alinharPrint
    _fifo_add_tempo->_fifo_alinharPrint
    _fifo_add_control->_fifo_alinharPrint
    _fifo_add->_fifo_alinharPrint
    _fifo_alinharPrint->_dignum_tam
    _dignum_tam->___awdiv
    _dispLCD_str->_dispLCD_lincol
    _dispLCD_init->_delay
    _dispLCD_clr->_dispLCD_instReg
    _dispLCD->_dispLCD_lincol
    _dispLCD_lincol->_dispLCD_instReg
    _dignum_conc->___wmul
    _dignum_apagar->___lwdiv
    _deletar_receita->_end_receita
    _buscar_receita->___awmod
    _buscar_dado->___awmod
    ___aldiv->___lmul
    _MCP4725->___aldiv
    _dac_write->_delay
    _dac_init->_delay
    _I2C_init->___lldiv

Critical Paths under _irq in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _irq in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _irq in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _irq in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _irq in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _irq in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _irq in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _irq in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _irq in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                96    96      0   73974
                                             30 COMRAM     2     2      0
                                              0 BANK0     93    93      0
                           _I2C_init
                            _MCP4725
                            ___aldiv
                            ___awmod
                             ___lmul
                             ___wmul
                      _addContCiclos
                    _addIndicePassos
                        _alt_atuador
                        _buscar_dado
                     _buscar_receita *
                         _decodifica
                              _delay
                    _deletar_receita *
                      _dignum_apagar
                        _dignum_conc
                            _dispLCD *
                        _dispLCD_clr *
                    _dispLCD_dataReg
                       _dispLCD_init
                     _dispLCD_lincol
                        _dispLCD_num *
                        _dispLCD_str *
                           _fifo_add
                     _fifo_add_ciclo
                   _fifo_add_control
                     _fifo_add_tempo
                          _fifo_adrs
                        _fifo_delete
                    _fifo_disponivel
                        _fifo_indice
               _fifo_indicePrint_dec
               _fifo_indicePrint_inc
                        _fifo_lerPos
                         _fifo_print
                           _fifo_tam
                  _formatar_receitas *
                          _getCiclos
                      _getContCiclos
                    _getIndicePassos
                       _initSerialIO
                     _init_atuadores
                        _ler_atuador
                         _ler_sensor
            _manipula_atuadores_init
                          _printExec
                    _resetContCiclos
                  _resetIndicePassos
               _salva_atuadores_init
                        _salvar_dado
                     _salvar_receita *
                       _serialIOscan
                              _setT1
                          _set_passo
                           _statusT1
                      _teclado_borda
                       _teclado_init
                        _timer1_init
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _teclado_borda                                        2     2      0     296
                                              5 COMRAM     2     2      0
                       _teclado_scan
 ---------------------------------------------------------------------------------
 (2) _teclado_scan                                         5     5      0     204
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _statusT1                                             4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_passo                                            5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _setT1                                                4     0      4     478
                                              6 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         4     4      0     205
                                              3 COMRAM     4     4      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    3     3      0     114
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _salvar_receita                                       6     4      2    1089
                                              6 COMRAM     6     4      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
                          _fifo_adrs (ARG)
 ---------------------------------------------------------------------------------
 (1) _salvar_dado                                          5     3      2    1219
                                              6 COMRAM     5     3      2
                       _EEPROM_write
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _salva_atuadores_init                                 8     8      0     235
                                              3 COMRAM     8     8      0
                        _ler_atuador
 ---------------------------------------------------------------------------------
 (2) _ler_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetIndicePassos                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetContCiclos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printExec                                            5     4      1   12960
                                             25 COMRAM     5     4      1
                         _decodifica
                         _dignum_tam
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _dispLCD_num
                           _posAtual
 ---------------------------------------------------------------------------------
 (2) _posAtual                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _fifo_lerPos
                    _getIndicePassos
 ---------------------------------------------------------------------------------
 (3) _getIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fifo_lerPos                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _dispLCD_num                                         14    10      4    7167
                                             11 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                         _dignum_tam (ARG)
                    _dispLCD_dataReg
                     _dispLCD_lincol
                        _fifo_indice (ARG)
                           _fifo_tam (ARG)
                      _getContCiclos (ARG)
                    _getIndicePassos (ARG)
 ---------------------------------------------------------------------------------
 (1) _manipula_atuadores_init                              3     3      0     136
                                              3 COMRAM     3     3      0
                        _alt_atuador
 ---------------------------------------------------------------------------------
 (1) _ler_sensor                                           5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_atuadores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         5     0      5     294
                                              0 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _getContCiclos                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getCiclos                                            4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _formatar_receitas                                    1     1      0     372
                                              2 COMRAM     1     1      0
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _fifo_tam                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_print                                           9     9      0    7013
                                              8 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                         _decodifica
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_inc                                 7     7      0       0
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _fifo_indicePrint_dec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_indice                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_disponivel                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fifo_delete                                          2     2      0    4395
                                             15 COMRAM     2     2      0
                        _alt_atuador
                           _codifica
                         _decodifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _decodifica                                           4     2      2    1426
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _alt_atuador                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _fifo_adrs                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add_tempo                                       1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_control                                     1     1      0    3013
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (1) _fifo_add_ciclo                                       2     0      2     120
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_add                                             1     1      0    3035
                                             15 COMRAM     1     1      0
                           _codifica
                  _fifo_alinharPrint
 ---------------------------------------------------------------------------------
 (2) _fifo_alinharPrint                                    4     4      0    2357
                                             11 COMRAM     4     4      0
                         _dignum_tam
 ---------------------------------------------------------------------------------
 (2) _dignum_tam                                           3     1      2    2041
                                              8 COMRAM     3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _codifica                                             5     3      2     590
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _dispLCD_str                                          4     2      2    1733
                                              7 COMRAM     4     2      2
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (1) _dispLCD_init                                         0     0      0    1415
                              _delay
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD_clr                                          0     0      0     176
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              5     2      3    4971
                                              7 COMRAM     5     2      3
                    _dispLCD_dataReg
                     _dispLCD_lincol
 ---------------------------------------------------------------------------------
 (3) _dispLCD_lincol                                       5     4      1    1386
                                              2 COMRAM     5     4      1
                    _dispLCD_instReg
 ---------------------------------------------------------------------------------
 (4) _dispLCD_instReg                                      2     2      0     176
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dispLCD_dataReg                                      2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dignum_conc                                          5     3      2     757
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _dignum_apagar                                        2     0      2     540
                                              7 COMRAM     2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _deletar_receita                                      4     4      0     939
                                              4 COMRAM     4     4      0
                       _EEPROM_write
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _EEPROM_write                                         2     1      1     348
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _buscar_receita                                       6     4      2     763
                                              6 COMRAM     6     4      2
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (1) _buscar_dado                                          6     3      3     893
                                              6 COMRAM     6     3      3
                        _EEPROM_read
                            ___awmod (ARG)
                        _end_receita
 ---------------------------------------------------------------------------------
 (2) _end_receita                                          4     2      2     478
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _EEPROM_read                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _addIndicePassos                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _addContCiclos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _MCP4725                                              2     0      2    4207
                                             26 COMRAM     2     0      2
                           _I2C_stop
                            ___aldiv (ARG)
                             ___lmul (ARG)
                           _dac_init
                          _dac_write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_write                                            5     3      2    1533
                                              3 COMRAM     5     3      2
                    _I2C_ack_receive
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _dac_init                                             0     0      0    1261
                    _I2C_ack_receive
                          _I2C_start
                             _I2C_tx
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     1      2    1239
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _I2C_tx                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ack_receive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             4     0      4     412
                                             13 COMRAM     4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _irq                                                  0     0      0       0
                          _intt1_1ms
 ---------------------------------------------------------------------------------
 (6) _intt1_1ms                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     ___lldiv
   _MCP4725
     _I2C_stop
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
     _dac_init (ARG)
       _I2C_ack_receive
       _I2C_start
       _I2C_tx
       _delay
     _dac_write (ARG)
       _I2C_ack_receive
       _I2C_tx
       _delay
     _delay (ARG)
   ___aldiv
     ___lmul (ARG)
   ___awmod
   ___lmul
   ___wmul
   _addContCiclos
   _addIndicePassos
   _alt_atuador
   _buscar_dado
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _buscar_receita *
     _EEPROM_read
     ___awmod (ARG)
     _end_receita (ARG)
   _decodifica *
   _delay *
   _deletar_receita *
     _EEPROM_write
     _end_receita
   _dignum_apagar *
     ___lwdiv
   _dignum_conc *
     ___wmul
   _dispLCD *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _dispLCD_clr *
     _dispLCD_instReg
   _dispLCD_dataReg *
   _dispLCD_init *
     _delay
     _dispLCD_instReg
   _dispLCD_lincol *
     _dispLCD_instReg
   _dispLCD_num *
     ___awdiv
     ___awmod
     _dignum_tam (ARG)
       ___awdiv
     _dispLCD_dataReg (ARG)
     _dispLCD_lincol (ARG)
       _dispLCD_instReg
     _fifo_indice (ARG)
     _fifo_tam (ARG)
     _getContCiclos (ARG)
     _getIndicePassos (ARG)
   _dispLCD_str *
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_add *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_ciclo *
   _fifo_add_control *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_add_tempo *
     _codifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_adrs *
   _fifo_delete *
     _alt_atuador
     _codifica
     _decodifica
     _fifo_alinharPrint
       _dignum_tam
         ___awdiv
   _fifo_disponivel *
   _fifo_indice *
   _fifo_indicePrint_dec *
   _fifo_indicePrint_inc *
   _fifo_lerPos *
   _fifo_print *
     ___awdiv
     ___awmod
     _decodifica
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
   _fifo_tam *
   _formatar_receitas *
     _EEPROM_write
   _getCiclos *
   _getContCiclos *
   _getIndicePassos *
   _initSerialIO *
   _init_atuadores *
   _ler_atuador *
   _ler_sensor *
   _manipula_atuadores_init *
     _alt_atuador
   _printExec *
     _decodifica
     _dignum_tam
       ___awdiv
     _dispLCD_dataReg
     _dispLCD_lincol
       _dispLCD_instReg
     _dispLCD_num
       ___awdiv
       ___awmod
       _dignum_tam (ARG)
         ___awdiv
       _dispLCD_dataReg (ARG)
       _dispLCD_lincol (ARG)
         _dispLCD_instReg
       _fifo_indice (ARG)
       _fifo_tam (ARG)
       _getContCiclos (ARG)
       _getIndicePassos (ARG)
     _posAtual
       _fifo_lerPos
       _getIndicePassos
   _resetContCiclos *
   _resetIndicePassos *
   _salva_atuadores_init *
     _ler_atuador
   _salvar_dado *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
   _salvar_receita *
     _EEPROM_write
     ___awmod (ARG)
     _end_receita (ARG)
     _fifo_adrs (ARG)
   _serialIOscan *
     _serialIObyteShift
     _serialIOload
   _setT1 *
     ___wmul (ARG)
   _set_passo *
   _statusT1 *
   _teclado_borda *
     _teclado_scan
   _teclado_init *
   _timer1_init *

 _irq (ROOT)
   _intt1_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5D      87       5       84.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      58       1       93.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DF      20        0.0%
DATA                 0      0      DF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Nov 15 14:04:02 2021

              ??_fifo_add_control 0035                     dac_write@code 0029  
                ??_fifo_add_tempo 0035     __size_of_fifo_indicePrint_dec 0014  
   __size_of_fifo_indicePrint_inc 005E                       _SSPSTATbits 000FC7  
                    ___awdiv@sign 002B           __end_of_dispLCD_dataReg 3496  
             ___wmul@multiplicand 0028                      printExec@col 0042  
                    printExec@ind 003F                    salvar_dado@col 002C  
                  salvar_dado@aux 002E                __size_of_I2C_start 0014  
                             l223 086A                               l304 0EE6  
                             l138 19FC                               l411 1D02  
                             l243 09E4                               l308 0F30  
                             l181 048C                               l342 1422  
                             l335 12FC                               l440 295E  
                             l514 2378                               l346 142C  
                             l435 2B28                               l363 1640  
                             l516 23E6                               l701 3AFE  
                             l454 3868                               l630 3B26  
                             l623 39FE                               l519 3B10  
                             l527 3294                               l552 3ACC  
                             l457 387A                               l561 3940  
                             l633 3B1C                               l482 3494  
                             l490 3178                               l642 3AE0  
                             l386 199A                               l571 363A  
                             l555 383A                               l707 2FBA  
                             l651 2DF0                               l820 356C  
                             l804 200C                               l636 39A2  
                             l652 2E88                               l645 3B22  
                             l557 3848                               l493 3792  
                             l661 2E90                               l558 384C  
                             l582 3726                               l726 253A  
                             l654 2E06                               l574 3962  
                             l566 35F8                               l902 32A4  
                             l823 381E                               l479 2876  
                             l663 2EA6                               l639 3AF4  
                             l655 2E1C                               l903 32C0  
                             l840 2A46                               l664 2EBC  
                             l744 267A                               l656 2E32  
                             l904 32C2                               l577 38F6  
                             l761 3B08                               l665 2ED2  
                             l817 20E2                               l913 3346  
                             l754 339E                               l666 2F22  
                             l770 3B2A                               l906 32EA  
                             l499 3524                               l843 3A9C  
                             l851 226C                               l907 32EE  
                             l836 2A06                               l764 3B2E  
                             l916 37F0                               l933 36EE  
                             l829 36B4                               l749 33F6  
                             l781 3A3C                               l669 3AEA  
                             l838 2A3C                               l758 34DC  
                             l678 3038                               l951 3A06  
                             l767 39E8                               l687 3446  
                             l695 3AAE                               l960 3A64  
                             l936 3A40                               l872 3678  
                             l777 3236                               l793 20D2  
                             l938 3A4E                               l954 3A14  
                             l939 3A50                               l875 35B4  
                             l859 226C                               l972 3AB0  
                             l957 3A54                               l878 3984  
                             l990 3AD6                               l959 3A62  
                             l975 3ABE                               l898 3B16  
                             _IHM 00DB                deletar_receita@aux 002A  
                             _irq 0008           __size_of_buscar_receita 0042  
               fp__buscar_receita 0000           __end_of_dispLCD_instReg 2878  
                    ___awmod@sign 002B                               tosl 000FFD  
                             wreg 000FE8                   __end_of_MCP4725 3986  
                 salvar_dado@data 002D                   salvar_dado@adrs 0030  
                alt_atuador@tecla 0028                      ?_buscar_dado 002C  
                            l1000 2D44                              l1005 3756  
                            l1006 375C                              l1130 2786  
                            l1042 39BC                              l1051 391C  
                            l1045 3A28                              l1062 3106  
                            l1063 3116                              l1048 3A8A  
                            l1085 2DE8                              l1078 2DD8  
                            l1282 2BEC                              l1542 30A4  
                            l1295 2C9C                              l5000 3298  
                            l5002 32A6                              l5010 32DA  
                            l5012 32EC                              l5004 32BA  
                            l5100 3ACE                              l1549 30AC  
                            l5006 32D0                              l5030 2CDA  
                            l5022 2CBA                              l5110 39B6  
                            l5102 39A4                              l5120 36C2  
                            l5200 3498                              l5008 32D4  
                            l5032 2D06                              l5024 2CD6  
                            l5016 2C9E                              l5112 39B8  
                            l5104 39A6                              l6000 06FA  
                            l5122 36EA                              l5130 3978  
                            l5202 34A8                              l5210 34D8  
                            l5034 2D2A                              l5042 2D42  
                            l5018 2CA6                              l5114 39BA  
                            l5106 39AA                              l6002 0700  
                            l5060 2D80                              l5052 2D46  
                            l5124 36EC                              l5116 36B6  
                            l5204 34B6                              l5220 3388  
                            l5212 334A                              l5300 1F40  
                            l5140 37DC                              l5132 37C4  
                            l5036 2D2C                              l5108 39B4  
                            l6100 09F4                              l6020 0752  
                            l6012 072C                              l5070 2DC8  
                            l5062 2D8E                              l5054 2D56  
                            l5118 36BA                              l5126 3964  
                            l5046 38F8                              l5230 33C2  
                            l5206 34C6                              l5222 338A  
                            l5214 335A                              l5310 1F7E  
                            l5302 1F50                              l5150 37E6  
                            l5142 37DE                              l5134 37C6  
                            l5038 2D3C                              l6102 0A56  
                            l6110 0ABA                              l6030 0770  
                            l6014 073E                              l6006 0714  
                            l5072 2DD2                              l5064 2D98  
                            l5056 2D6C                              l5128 3974  
                            l5080 305C                              l5048 3914  
                            l4600 285A                              l5232 33D0  
                            l5208 34C8                              l5216 336A  
                            l5224 339A                              l5320 1FB2  
                            l5312 1F84                              l5304 1F56  
                            l5240 1E00                              l5152 37E8  
                            l5144 37E0                              l5136 37D6  
                            l5400 2FF8                              l5160 3A16  
                            l6200 0DD0                              l6112 0ABE  
                            l6104 0A82                              l6040 07A6  
                            l6032 0774                              l6016 074A  
                            l6008 0718                              l6024 0758  
                            l5066 2DB6                              l5058 2D74  
                            l5090 3096                              l5082 3064  
                            l5074 303A                              l4602 286C  
                            l4610 2B3C                              l5234 33E0  
                            l5226 33A2                              l5218 3378  
                            l5330 1FEC                              l5322 1FC8  
                            l5306 1F58                              l5314 1F86  
                            l5250 1E30                              l5242 1E0C  
                            l5154 37EA                              l5146 37E2  
                            l5138 37DA                              l5402 3000  
                            l5410 3026                              l5162 3A7A  
                            l5170 3732                              l6210 0E22  
                            l6202 0DDA                              l6130 0B9C  
                            l6106 0AA0                              l6114 0AC4  
                            l6050 07D8                              l6026 075C  
                            l5068 2DC6                              l5180 38D2  
                            l5092 3098                              l5084 3072  
                            l5076 3042                              l4604 2874  
                            l4620 2B62                              l4612 2B44  
                            l4700 367A                              l5236 33E2  
                            l5228 33B2                              l5420 31DA  
                            l5340 2024                              l5332 1FFC  
                            l5324 1FD0                              l5316 1F96  
                            l5308 1F6E                              l5260 1E60  
                            l5252 1E36                              l5244 1E10  
                            l5156 37EC                              l5148 37E4  
                            l5164 3AE2                              l5500 221E  
                            l5412 3036                              l5404 3018  
                            l5172 3742                              l6300 11FA  
                            l6220 0E7E                              l6212 0E2C  
                            l6204 0DE4                              l6140 0C1E  
                            l6132 0BC8                              l6108 0AB4  
                            l6124 0AE0                              l6060 0832  
                            l6052 07EC                              l6044 07AE  
                            l6036 0788                              l5182 38E4  
                            l5094 309E                              l5086 3078  
                            l5078 3054                              l4630 2B9A  
                            l4622 2B6A                              l4614 2B48  
                            l4606 2B2A                              l4702 3682  
                            l5238 33F2                              l5430 3A2A  
                            l5422 31EA                              l5342 2030  
                            l5334 200C                              l5350 2042  
                            l5318 1FB0                              l5270 1E8C  
                            l5262 1E70                              l5254 1E46  
                            l5246 1E1A                              l5510 3AEC  
                            l5158 37EE                              l5190 3416  
                            l5502 2228                              l5406 301E  
                            l5174 3752                              l5166 3728  
                            l6310 1242                              l6302 120C  
                            l6230 0EE6                              l6222 0E86  
                            l6206 0E0A                              l6150 0C5C  
                            l6142 0C2C                              l6134 0BD2  
                            l6126 0B52                              l6070 0896  
                            l6062 0858                              l6054 07F6  
                            l6038 079A                              l4712 3A3E  
                            l5088 308E                              l5512 3528  
                            l5096 375E                              l4640 2BC6  
                            l4632 2BA0                              l4624 2B7C  
                            l4616 2B56                              l4608 2B2E  
                            l4704 369E                              l5440 2F34  
                            l5416 39D4                              l5432 3A3A  
                            l5424 3224                              l4720 2BF2  
                            l5360 20C6                              l5344 2038  
                            l5336 2014                              l5352 209C  
                            l5328 1FDC                              l5280 1ECA  
                            l5272 1EA2                              l5264 1E74  
                            l5256 1E48                              l5248 1E2A  
                            l5192 342A                              l5184 33FA  
                            l5504 223A                              l5408 3022  
                            l5176 375A                              l5168 372C  
                            l6400 15B8                              l6312 124A  
                            l6320 126C                              l6304 1210  
                            l6240 0F42                              l6232 0EFA  
                            l6224 0EA4                              l6208 0E18  
                            l6160 0C9A                              l6152 0C6A  
                            l6144 0C36                              l6136 0BFE  
                            l6128 0B70                              l6080 092A  
                            l6072 08D0                              l6064 085E  
                            l6048 07B4                              l4714 3A02  
                            l4650 384E                              l5514 37F2  
                            l4570 27B6                              l5098 376E  
                            l4634 2BB6                              l4626 2B84  
                            l4642 2BCC                              l4618 2B5E  
                            l4706 36A0                              l5522 3B00  
                            l5442 2F44                              l5450 2FB6  
                            l5434 3B2C                              l5426 322A  
                            l4730 2C22                              l4722 2C00  
                            l5362 20C8                              l5354 20AE  
                            l5338 2016                              l5282 1EE4  
                            l5274 1EB2                              l5266 1E84  
                            l5258 1E58                              l5602 28CE  
                            l5194 3430                              l5186 3402  
                            l5506 2246                              l5530 32F8  
                            l6410 1608                              l6330 12DC  
                            l6322 12A6                              l6314 1252  
                            l6306 122E                              l6234 0F1A  
                            l6226 0ED0                              l6218 0E34  
                            l6170 0CD8                              l6162 0CA8  
                            l6154 0C74                              l6146 0C3C  
                            l6138 0C08                              l6090 099E  
                            l6082 0936                              l6074 08DA  
                            l6066 086A                              l6058 0814  
                            l4716 3AB0                              l4652 3852  
                            l5700 3708                              l4580 27F8  
                            l4572 27C8                              l4564 278A  
                            l4660 312A                              l5380 3502  
                            l5372 3B0A                              l4900 2456  
                            l4644 2BDC                              l4636 2BBE  
                            l4628 2B8C                              l4708 36B2  
                            l5524 3B04                              l5444 2F46  
                            l5428 3232                              l4740 2C68  
                            l4732 2C34                              l4724 2C08  
                            l5356 20BA                              l5284 1EE6  
                            l5276 1EB8                              l5268 1E8A  
                            l5292 1F10                              l5452 3B28  
                            l5620 28FE                              l5196 3432  
                            l5508 2262                              l5460 20FE  
                            l5540 3B18                              l5516 3944  
                            l5532 3300                              l6500 195C  
                            l6420 16A0                              l6412 162E  
                            l6340 1324                              l6332 12F4  
                            l6324 12AE                              l6316 1264  
                            l6308 123A                              l6260 0F84  
                            l6252 0F6A                              l6244 0F4A  
                            l6236 0F38                              l6228 0EDA  
                            l6180 0D0C                              l6172 0CE6  
                            l6164 0CB2                              l6156 0C7A  
                            l6148 0C46                              l6092 09B6  
                            l6084 094E                              l6076 08F2  
                            l6068 088E                              l4654 3862  
                            l5702 3714                              l4582 27FA  
                            l4590 281E                              l4574 27DA  
                            l4566 278C                              l4662 3132  
                            l5382 3506                              l5374 34E0  
                            l4902 2466                              l4646 2BE4  
                            l4638 2BC0                              l5518 3AF6  
                            l5446 2F62                              l5438 2F24  
                            l4750 2C94                              l4742 2C70  
                            l4734 2C3C                              l4726 2C0C  
                            l4718 2BEE                              l5358 20BE  
                            l5294 1F20                              l5286 1EFC  
                            l5278 1EBA                              l5366 20D2  
                            l5710 39C2                              l5614 28EE  
                            l5198 3436                              l4830 22A6  
                            l4822 2270                              l5462 210E  
                            l5470 2150                              l5542 3AD8  
                            l5390 2FD4                              l5534 332E  
                            l5526 32F0                              l5550 2A6E  
                            l6510 19B0                              l6502 196C  
                            l6430 173E                              l6422 16AA  
                            l6414 1634                              l6406 15C0  
                            l6350 13A4                              l6342 1336  
                            l6326 12BE                              l6334 1300  
                            l6270 0FFE                              l6190 0D7A  
                            l6182 0D32                              l6174 0CF0  
                            l6166 0CB8                              l6158 0C84  
                            l6094 09D4                              l6086 0968  
                            l6078 0924                              l5720 30DC  
                            l5704 3716                              l4680 3466  
                            l4592 2820                              l4584 2812  
                            l4576 27E2                              l4568 27A4  
                            l4656 311A                              l5384 3508  
                            l5376 34E4                              l4912 24A6  
                            l4904 2476                              l4760 2570  
                            l5448 2FA6                              l4744 2C76  
                            l4736 2C44                              l4728 2C1A  
                            l5296 1F30                              l5288 1F04  
                            l5712 39CC                              l5640 3986  
                            l5608 28DE                              l4840 22FA  
                            l4832 22AE                              l4824 2284  
                            l5480 2198                              l5472 2160  
                            l5464 2128                              l5456 20E6  
                            l4808 2E48                              l4816 2E4E  
                            l5392 2FDC                              l5536 3330  
                            l5528 32F4                              l5560 2ABE  
                            l5552 2A7E                              l5544 2A4A  
                            l6600 1D86                              l6512 19BC  
                            l6504 197A                              l6440 177A  
                            l6432 175C                              l6416 1640  
                            l6408 15EA                              l6360 13E4  
                            l6352 13AA                              l6344 133E  
                            l6336 1312                              l6328 12CE  
                            l6280 10B4                              l6272 102A  
                            l6256 0F72                              l6248 0F52  
                            l6264 0F8C                              l6192 0D88  
                            l6184 0D40                              l6176 0CF6  
                            l6168 0CC2                              l6096 09E4  
                            l6088 0986                              l5800 0098  
                            l5730 269E                              l5722 30E6  
                            l5714 30AE                              l5634 39EA  
                            l4690 3492                              l4682 346E  
                            l4674 344A                              l4594 2836  
                            l4586 2814                              l4578 27E4  
                            l4658 3122                              l4666 313A  
                            l5378 34F2                              l5650 3238  
                            l4906 2486                              l4930 2968  
                            l4770 25C0                              l4762 2580  
                            l4754 253C                              l4738 2C52  
                            l4746 2C7C                              l5298 1F3C  
                            l5706 39BE                              l5642 398C  
                            l5570 287A                              l4850 2362  
                            l4842 2318                              l4834 22B6  
                            l4826 2294                              l5490 21EA  
                            l5482 21B4                              l5474 2170  
                            l5466 212A                              l5458 20EE  
                            l5394 2FE4                              l5386 2FBC  
                            l5538 3342                              l5554 2A8E  
                            l5546 2A4E                              l6514 19C2  
                            l6506 1992                              l6434 1762  
                            l6418 1660                              l6362 13F4  
                            l6346 136A                              l6338 131E  
                            l6290 1118                              l6282 10C6  
                            l6274 1064                              l6266 0FF6  
                            l6258 0F7C                              l6194 0D92  
                            l6186 0D4A                              l6178 0D00  
                            l7330 06C2                              l5810 00C4  
                            l5740 26D4                              l5732 26A2  
                            l5724 267C                              l5716 30BE  
                            l5636 39FC                              l4860 3AC8  
                            l4684 3470                              l4676 344C  
                            l4596 2838                              l4588 281C  
                            l4668 316C                              l5660 3272  
                            l5652 323C                              l4908 2496  
                            l4916 2508                              l4940 29AC  
                            l4772 25D0                              l4764 2590  
                            l4748 2C8C                              l5644 3992  
                            l5572 287E                              l5628 2904  
                            l4852 2372                              l4844 231E  
                            l4836 22DC                              l4828 229C  
                            l4692 3B24                              l5492 21F4  
                            l5476 217C                              l5484 21BE  
                            l5468 2146                              l5396 2FEC  
                            l5388 2FCC                              l5556 2A9E  
                            l5548 2A5E                              l5564 2ACE  
                            l6604 1D8E                              l6540 1B62  
                            l6524 19E6                              l6516 19D4  
                            l6508 199E                              l6452 17CE  
                            l6444 178E                              l6428 16CC  
                            l6372 1430                              l6364 1402  
                            l6380 1448                              l6356 13CC  
                            l6348 139A                              l7340 1280  
                            l6292 1122                              l6284 10D8  
                            l6276 109E                              l6196 0D9C  
                            l6188 0D54                              l7332 0A10  
                            l7324 0310                              l5900 02FC  
                            l5812 00F0                              l5804 00AC  
                            l6532 19FC                              l5750 2716  
                            l5742 26EA                              l5734 26B0  
                            l5726 2680                              l5718 30CC  
                            l5638 3B1E                              l4862 3ACA  
                            l4870 3828                              l4686 3472  
                            l4678 3464                              l4598 2848  
                            l5654 324A                              l5662 3276  
                            l4950 2A02                              l4942 29BC  
                            l4934 297C                              l4926 2960  
                            l4774 25E0                              l4766 25A0  
                            l4782 2610                              l4758 2558  
                            l5646 399A                              l5590 28AE  
                            l4854 23CC                              l4838 22DE  
                            l4846 2320                              l5494 21FC  
                            l5486 21CE                              l5478 2196  
                            l5398 2FF4                              l5558 2AAE  
                            l7350 1DAE                              l6550 1BA8  
                            l6542 1B6E                              l6526 19F2  
                            l6518 19DC                              l6470 1830  
                            l6462 17EC                              l6446 17BA  
                            l6438 1776                              l6390 1542  
                            l6382 1492                              l7342 145C  
                            l6374 1438                              l6366 141A  
                            l6358 13D4                              l6294 114E  
                            l6286 1104                              l6278 10A8  
                            l6198 0DC2                              l7334 0AF4  
                            l7326 04B8                              l5910 0382  
                            l5902 0336                              l6534 1B48  
                            l5830 0126                              l5814 00FC  
                            l5806 00B0                              l5822 010A  
                            l5752 2734                              l5744 26F2  
                            l5760 2756                              l5736 26C0  
                            l5728 268E                              l4856 3AC2  
                            l5680 360E                              l4880 3838  
                            l4872 382C                              l4688 3488  
                            l5656 325C                              l4960 2A40  
                            l4952 2A18                              l4944 29CC  
                            l4936 298C                              l4928 2964  
                            l4792 2EE8                              l7360 262C  
                            l4776 25F0                              l4768 25B0  
                            l5584 289E                              l4848 2352  
                            l4696 3AA0                              l5496 220A  
                            l5488 21DE                              l5672 35CE  
                            l5664 35B8                              l7352 2AE2  
                            l6560 1C30                              l6552 1BB8  
                            l6544 1B7E                              l6536 1B50  
                            l6608 1D98                              l6472 183C  
                            l6464 17F0                              l6480 184A  
                            l6448 17C6                              l6456 17D4  
                            l7344 15D4                              l6392 1550  
                            l6384 14B0                              l6296 1188  
                            l6288 110E                              l7336 0E48  
                            l7328 062C                              l5920 03F6  
                            l5912 039A                              l5904 0348  
                            l5824 010E                              ?_irq 0026  
                            l5762 2766                              l5754 2744  
                            l5746 26FE                              l5738 26C4  
                            l4858 3AC6                              l4882 391E  
                            l5690 362A                              l4874 382E  
                            l4866 3822                              l5658 3266  
                            l4890 2406                              l4954 2A28  
                            l4946 29E2                              l4938 299C  
                            l7362 2EFC                              l4778 2600  
                            l5578 288E                              l5498 2216  
                            l7354 2E62                              l5674 35E6  
                            l5666 35CA                              l6562 1C40  
                            l6570 1C86                              l6554 1BCA  
                            l6546 1B90                              l6538 1B58  
                            l6490 18DE                              l6482 18A2  
                            l6458 17D8                              l7346 16E0  
                            l6394 157E                              l6386 14DC  
                            l6298 11C2                              l7338 0FA0  
                            l5930 047C                              l5922 0410  
                            l5914 03CC                              l5906 0350  
                            l5850 01B4                              l5842 017A  
                            l5834 013A                              l5818 0104  
                            l5770 0016                              l4980 3656  
                            l4972 363C                              l5764 2776  
                            l5756 2746                              l5748 270C  
                            l4876 3830                              l4868 3824  
                            l5692 36F2                              l7364 24C2  
                            l4892 2416                              l4948 29F2  
                            l4788 2E8C                              l7356 2918  
                            l5596 28BE                              l4964 3A8E  
                            l5676 35E8                              l6572 1CA2  
                            l6564 1C50                              l6556 1BD6  
                            l6548 1BA0                              l7348 1A12  
                            l6492 190A                              l6484 18B6  
                            l6476 1844                              l6468 1804  
                            l6396 15A4                              l6388 1538  
                            l5940 052A                              l5932 048C  
                            l5924 042E                              l5916 03D2  
                            l5908 0378                              l5860 01F0  
                            l5852 01C6                              l5836 0166  
                            l5828 0122                              l5780 004C  
                            l5772 001A                              l4982 3668  
                            l4974 3640                              l4990 3590  
                            l5758 2750                              l5686 3612  
                            l5678 35FC                              l4878 3834  
                            l5694 3704                              l7366 251C  
                            l4894 2426                              l4886 23EA  
                            l7358 2056                              l4966 3A8E  
                            l4798 2DEC                              l6590 1D2C  
                            l6582 1CEC                              l6574 1CAC  
                            l6566 1C54                              l6558 1C26  
                            l6494 193A                              l6486 18C0  
                            l6398 15B0                              l5942 0548  
                            l5926 0446                              l5918 03DE  
                            l5950 056C                              l5870 0232  
                            l5862 01F4                              l5854 01CC  
                            l5838 0172                              l5846 0180  
                            l5790 0078                              l5782 0050  
                            l5774 003E                              l4984 366C  
                            l4976 364C                              l4992 359C  
                            l5688 3628                              l7368 314E  
                            l4896 2436                              l4888 23EE  
                            l4968 3A9A                              l6592 1D30  
                            l6584 1CFE                              l6568 1C7C  
                            l6496 1944                              l5960 05A8  
                            l5952 0584                              l5944 055C  
                            l5936 049C                              l5928 045E  
                            l5880 028A                              l5872 023C  
                            l5864 0200                              l5856 01D8  
                            l5848 0188                              l5792 007C  
                            l5784 0054                              l5776 0044  
                            l5768 0012                              l4978 3652  
                            l4994 35A4                              l4986 356E  
                            l4898 2446                              l6594 1D3A  
                            l6586 1D0A                              l6578 1CCA  
                            l6498 194C                              l5970 05FC  
                            l5962 05BA                              l5954 0588  
                            l5938 04FE                              l5946 0562  
                            l5890 02D8                              l5882 029E  
                            l5874 0256                              l5858 01E2  
                            l5866 0206                              l5794 0084  
                            l5786 0070                              l5778 0048  
                            l4996 3A52                              l4988 358C  
                            l6596 1D4A                              l5972 0608  
                            l5980 0618                              l5964 05CE  
                            l5956 0592                              l5948 0566  
                            l5892 02E2                              l5884 02A8  
                            l5876 0260                              l5868 021E  
                            l5796 008C                              l5788 0074  
                            l4998 3B12                              l6598 1D70  
                            l5982 064A                              l5974 0610  
                            l5966 05D8                              l5958 0596  
                            l5894 02EA                              l5886 02C2  
                            l5878 0264                              l5798 0094  
                            l5984 0692                              l5968 05F2  
                            l5896 02F2                              l5888 02CC  
                            l5986 069E                              l5994 06AE  
                            l5996 06D8                              l5988 06A6  
                            l5998 06F6           __end_of_getIndicePassos 3B28  
                            STR_1 7FFD                              STR_2 7E64  
                            STR_3 7E90                              STR_4 7D21  
                            STR_5 7FCB                              STR_6 7F4D  
                            STR_7 7FA1                              STR_8 7F38  
                            STR_9 7EE4                              u3000 2E16  
                            u3001 2E10                              u3010 2E2C  
                            u3011 2E26                              u3100 2372  
                            u3020 2E42                              u3101 236E  
                            u3021 2E3C                              u3110 23E6  
                            u3030 2280                              u3006 2E18  
                            u3111 23E2                              u3031 227A  
                            u3120 3848                              u3200 2A18  
                            u3040 2282                              u3016 2E2E  
                            u4000 00A8                              u3121 3844  
                            u3201 2A14                              u4001 00A4  
                            u3130 2406                              u3210 2A38  
                            u3050 2294                              u3026 2E44  
                            u4010 00C0                              u3131 2402  
                            u3211 2A34                              u3051 2290  
                            u4011 00BC                              u3140 2978  
                            u3060 22DC                              u3300 2D06  
                            u3141 2974                              u3061 22D8  
                            u3301 2D02                              u3230 3A62  
                            u3150 299C                              u3070 2314  
                            u3310 2D3C                              u4110 02C2  
                            u4030 011E                              u3231 3A5E  
                            u3151 2998                              u3071 2310  
                            u3311 2D38                              u4111 02BE  
                            u4031 011A                              u3320 2D6C  
                            u3160 29BC                              u3400 3412  
                            u3080 2352                              u3240 32BA  
                            u4200 0584                              u4040 0136  
                            u3321 2D68                              u3225 357A  
                            u3161 29B8                              u3401 340E  
                            u3081 234E                              u3241 32B6  
                            u4201 0580                              u4041 0132  
                            u3330 2D8E                              u3170 29CC  
                            u3410 342A                              u3090 2362  
                            u3250 32D0                              u4210 05F2  
                            u4130 039A                              u3331 2D8A  
                            u3171 29C8                              u3411 3426  
                            u3091 235E                              u3251 32CC  
                            u4211 05EE                              u4131 0396  
                            u3340 2DB6                              u2700 2848  
                            u3180 29F2                              u3500 1E70  
                            u3420 3446                              u3260 32EA  
                            u5100 1BB8                              u5020 195C  
                            u4108 0276                              u4028 00CE  
                            u3341 2DB2                              u2701 2844  
                            u3181 29EE                              u3501 1E6C  
                            u3421 3442                              u3261 32E6  
                            u5101 1BB4                              u5021 1958  
                            u4109 028A                              u4029 00F0  
                            u3350 3054                              u2710 285A  
                            u3190 2A02                              u3430 34A8  
                            u3510 1E84                              u3270 2CB6  
                            u5110 1BCA                              u5030 196C  
                            u4310 08F2                              u4230 0710  
                            u4150 03F6                              u3351 3050  
                            u2711 2856                              u3191 29FE  
                            u3431 34A4                              u3511 1E80  
                            u3271 2CB2                              u5111 1BC6  
                            u5031 1968                              u4311 08EE  
                            u4231 070C                              u4151 03F2  
                            u4071 01BE                              u2800 3A4E  
                            u3360 3072                              u2720 2B3C  
                            u3440 335A                              u3600 1FFC  
                            u3520 1EB2                              u5200 1D86  
                            u5120 1C40                              u5040 1992  
                            u5008 18E8                              u4240 0728  
                            u4160 0410                              u4128 035A  
                            u4080 021E                              u2801 3A4A  
                            u3361 306E                              u2721 2B38  
                            u3441 3356                              u3601 1FF8  
                            u3521 1EAE                              u5201 1D82  
                            u5121 1C3C                              u5041 198E  
                            u5009 190A                              u4241 0724  
                            u4161 040C                              u4129 0378  
                            u4081 021A                              u2810 3A14  
                            u3370 308E                              u2730 2B56  
                            u3450 336A                              u3610 2024  
                            u3530 1ECA                              u5130 1C50  
                            u5050 19B0                              u5018 1914  
                            u4330 094E                              u4250 076C  
                            u4170 0446                              u4090 0256  
                            u4058 0144                              u2811 3A10  
                            u3371 308A                              u2731 2B52  
                            u3451 3366                              u3611 2020  
                            u3531 1EC6                              u5131 1C4C  
                            u5051 19AC                              u5019 193A  
                            u4331 094A                              u4251 0768  
                            u4171 0442                              u4091 0252  
                            u4059 0166                              u2820 3ABE  
                            u2740 2B7C                              u3460 33B2  
                            u2900 2570                              u3700 3224  
                            u3620 20AE                              u3540 1F20  
                            u3284 2CCC                              u3380 3742  
                            u5140 1CC6                              u5060 19D4  
                            u4500 0E0A                              u4340 0968  
                            u4308 08A0                              u4260 0784  
                            u4228 06E2                              u4180 045E  
                            u4148 03A4                              u4068 0192  
                            u2821 3ABA                              u2741 2B78  
                            u3461 33AE                              u2901 256C  
                            u3701 3220                              u3621 20AA  
                            u3541 1F1C                              u3285 2CC8  
                            u3381 373E                              u5141 1CC2  
                            u5061 19D0                              u4501 0E06  
                            u4341 0964                              u4309 08D0  
                            u4261 0780                              u4229 06F6  
                            u4181 045A                              u4149 03CC  
                            u4069 01B4                              u2670 27B6  
                            u2750 2B9A                              u3470 33C2  
                            u2910 2EA0                              u3710 3A3A  
                            u2830 2C00                              u3630 20E2  
                            u3550 1F30                              u3294 2CEC  
                            u3390 3752                              u5150 1CE8  
                            u5070 1B7E                              u4430 0C1E  
                            u4350 099E                              u4270 0810  
                            u4190 052A                              u2671 27B2  
                            u2751 2B96                              u3471 33BE  
                            u2911 2E9A                              u3711 3A36  
                            u2831 2BFC                              u3631 20DE  
                            u3551 1F2C                              u3295 2CE8  
                            u3391 374E                              u5151 1CE4  
                            u5071 1B7A                              u4431 0C1A  
                            u4351 099A                              u4271 080C  
                            u4191 0526                              u2680 27C8  
                            u3640 3524                              u2760 2BB6  
                            u3720 2F34                              u2840 2C1A  
                            u3560 1F50                              u3480 1E2A  
                            u3800 2196                              u5160 1CFE  
                            u5080 1B90                              u4600 10D8  
                            u4440 0C5C                              u4408 0B7A  
                            u4360 09B6                              u4328 08FC  
                            u2681 27C4                              u3641 3520  
                            u2761 2BB2                              u3721 2F30  
                            u2841 2C16                              u3561 1F4C  
                            u3481 1E26                              u3801 2192  
                            u5161 1CFA                              u5081 1B8C  
                            u4601 10D4                              u4441 0C58  
                            u4409 0B9C                              u4361 09B2  
                            u4329 0924                              u2690 27F8  
                            u2770 2BDC                              u2930 2EB6  
                            u3730 2F44                              u2850 2C34  
                            u3570 1F7E                              u3490 1E58  
                            u3810 21CE                              u3650 3018  
                            u5170 1D28                              u5090 1BA0  
                            u4530 0EFA                              u4450 0C9A  
                            u4418 0BA6                              u4370 0A82  
                            u2691 27F4                              u5227 27CE  
                            u2771 2BD8                              u2931 2EB0  
                            u3731 2F40                              u2851 2C30  
                            u3571 1F7A                              u3491 1E54  
                            u3811 21CA                              u3651 3014  
                            u5171 1D24                              u5091 1B9C  
                            u4531 0EF6                              u4451 0C96  
                            u4419 0BC8                              u4371 0A7E  
                            u2780 387A                              u3900 363A  
                            u3740 2F62                              u2860 2C52  
                            u3580 1F96                              u3820 21DE  
                            u3660 3036                              u5180 1D4A  
                            u4700 12CE                              u4540 0F1A  
                            u4460 0CD8                              u4428 0BDC  
                            u4380 0ADC                              u2781 3876  
                            u3901 3636                              u5237 27DC  
                            u2925 2EA2                              u3741 2F5E  
                            u2861 2C4E                              u3581 1F92  
                            u3821 21DA                              u3661 3032  
                            u5181 1D46                              u4701 12CA  
                            u4541 0F16                              u4461 0CD4  
                            u4429 0BFE                              u4381 0AD8  
                            u3910 3726                              u2790 36B2  
                            u2950 2ECC                              u3670 39E6  
                            u2870 2C68                              u3590 1FEC  
                            u3830 220A                              u3750 20FE  
                            u5190 1D70                              u4710 12F4  
                            u4550 0F66                              u4518 0E90  
                            u4470 0D32                              u3911 3722  
                            u5247 2816                              u2791 36AE  
                            u2951 2EC6                              u3671 39E0  
                            u2871 2C64                              u3591 1FE8  
                            u3831 2206                              u3751 20FA  
                            u5191 1D6C                              u4711 12F0  
                            u4551 0F62                              u4519 0EA4  
                            u4471 0D2E                              u3920 30CC  
                            u3680 39E8                              u2880 2C8C  
                            u3840 223A                              u3760 210E  
                            u4720 1312                              u4528 0EAE  
                            u4480 0D7A                              u4288 081E  
                            u3921 30C8                              u5257 2860  
                            u2945 2EB8                              u2881 2C88  
                            u3841 2236                              u3761 210A  
                            u4721 130E                              u4529 0ED0  
                            u4481 0D76                              u4289 0832  
                            u3930 3106                              u2970 2EE2  
                            u2890 2554                              u3690 31EA  
                            u3770 2128                              u3850 3342  
                            u4730 1336                              u4618 10E2  
                            u4490 0DC2                              u4298 0844  
                            u3931 3102                              u5267 286E  
                            u2971 2EDC                              u2891 2550  
                            u3691 31E6                              u3771 2124  
                            u3851 333E                              u4731 1332  
                            u4619 1104                              u4491 0DBE  
                            u4299 0858                              u3940 268E  
                            u3860 39FC                              u3780 2160  
                            u4660 120C                              u4628 112C  
                            u3941 268A                              u3861 39F8  
                            u5277 3468                              u2965 2ECE  
                            u3781 215C                              u4661 1208  
                            u4629 114E                              u3950 26B0  
                            u3870 325C                              u3790 2170  
                            u2990 2E00                              u4910 1772  
                            u4638 1158                              u4590 10C6  
                            u4398 0B5C                              u3951 26AC  
                            u5287 348C                              u3871 3258  
                            u3791 216C                              u2991 2DFA  
                            u4911 176E                              u4639 1188  
                            u4591 10C2                              u4399 0B70  
                            u3960 26EA                              u3880 3294  
                            u4920 178A                              u4808 149C  
                            u4680 1264                              u4648 1192  
                            u4568 1008                              u5297 3858  
                            u3961 26E6                              u3881 3290  
                            u2985 2EE4                              u4921 1786  
                            u4809 14B0                              u4681 1260  
                            u4649 11C2                              u4569 102A  
                            u3970 270C                              u3890 35F8  
                            u4818 14BA                              u4770 13E4  
                            u4690 12BE                              u4658 11CC  
                            u4578 1034                              u3971 2708  
                            u3891 35F4                              u4819 14DC  
                            u4771 13E0                              u4691 12BA  
                            u4659 11FA                              u4579 1064  
                            u3980 2734                              u2996 2E02  
                            u4940 17E8                              u4908 1748  
                            u4828 14E6                              u4780 13F4  
                            u4748 1348                              u4588 106E  
                            u3981 2730                              u4941 17E4  
                            u4909 175C                              u4829 150C  
                            u4781 13F0                              u4749 136A  
                            u4589 109E                              u3990 2766  
                            u4950 1800                              u4838 1516  
                            u4790 141A                              u4758 1374  
                            u4678 121A                              u3991 2762  
                            u4951 17FC                              u4839 1538  
                            u4791 1416                              u4759 139A  
                            u4679 122E                              u4848 1556  
                            u4768 13B4                              u4849 157E  
                            u4769 13C8                              u4938 1798  
                            u4858 1590                              u4939 17BA  
                            u4859 15A4                              u4868 15F4  
                            u4869 1608                              u4990 18DA  
                            u4878 161A                              u4991 18D6  
                            u4879 162E                              u4968 180E  
                            u4888 1666                              u4969 1830  
                            u4889 16A0                              u4978 1854  
                            u4898 16B4                              u4979 1876  
                            u4899 16C8                              u4988 1880  
                            u4989 18A2                       main@ptr_545 00B6  
                     main@ptr_564 00B8                              _fila 0014  
                            _main 0012                              fsr2h 000FDA  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0059                    ?_addContCiclos 0026  
                __end_of_I2C_init 36F0                              prodh 000FF4  
                            prodl 000FF3                       main@vetorIn 00AD  
                            start 000E           __size_of_salvar_receita 0044  
               fp__salvar_receita 0000                  __end_of_I2C_stop 3A66  
               _formatar_receitas 39BE                      ___param_bank 000000  
                    ?_ler_atuador 0026                    printExec@passo 0043  
              ?_formatar_receitas 0026      __end_of_salva_atuadores_init 303A  
                           ??_irq 0026                   _addIndicePassos 39EA  
            __end_of_EEPROM_write 384E                      main@auxPasso 00BA  
                 __end_of___aldiv 2788                             ?_main 0026  
                 __end_of___awdiv 2BEE                             _EEADR 000FA9  
                           STR_10 7E3C                             STR_11 7FFD  
                           STR_12 7E64                             STR_20 7FF5  
                           STR_13 7EBA                             STR_21 7EA5  
                           STR_30 7EF9                             STR_14 7ECF  
                           STR_22 7E66                             STR_23 7FE0  
                           STR_31 7E7B                             STR_15 7D74  
                           STR_32 7FB6                             STR_16 7F62  
                           STR_24 7E51                             STR_25 7F8C  
                           STR_17 7F0E                             STR_18 7F23  
                           STR_26 7E13                             STR_19 7F77  
                           STR_27 7DC5                             STR_28 7FFD  
                 __end_of___awmod 2C9E                             STR_29 7E64  
                 __end_of___lldiv 2DEA                   ___awdiv@divisor 0028  
             ??_formatar_receitas 0028                   __end_of___lwdiv 30AE  
                           i2l128 38A4                   ___awdiv@counter 002A  
                           _TMR1H 000FCF                             _TMR1L 000FCE  
                           _PORTD 000F83                             _TRISD 000F95  
__size_of_manipula_atuadores_init 0050               ___lmul@multiplicand 002A  
                 __end_of_dispLCD 3526                 ??_fifo_disponivel 0026  
           __end_of_teclado_borda 375E                             _delay 384E  
                           _setT1 3A16                   salvar_receita@i 0031  
                           main@i 00A1                             main@j 00A2  
                           pclath 000FFA                             tablat 000FF5  
                 _I2C_ack_receive 3AB0                             plusw1 000FE3  
                           plusw2 000FDB                      main@vetorOut 00AE  
                           ttemp5 005A                             ttemp6 005D  
                           ttemp7 0061                             status 000FD8  
               __end_of_I2C_start 3A52                             wtemp8 005A  
       __end_of_formatar_receitas 39D4                   EEPROM_read@addr 0026  
                   _indice_passos 0056              __end_of_dispLCD_init 3794  
            __size_of_EEPROM_read 000E                   __initialization 317A  
                    __end_of_main 1E00                  ?_dispLCD_dataReg 0026  
                          ??_main 0044                         ??_MCP4725 0042  
                   __activetblptr 000002                     ?_initSerialIO 0026  
            __size_of_dispLCD_clr 0008              __size_of_dispLCD_num 017A  
            __size_of_dispLCD_str 005E              __size_of_alt_atuador 009A  
                ?_dispLCD_instReg 0026                            ?_delay 0026  
                    ?_salvar_dado 002C                            _ADCON1 000FC1  
                          ?_setT1 002C                            _EEDATA 000FA8  
                          _EECON2 000FA7                  ___awdiv@dividend 0026  
                          _I2C_tx 3A00              __size_of_dignum_conc 0048  
                          _EEPROM 00D1                  ?_getIndicePassos 0026  
                          i2l1037 37C0                            i2l1039 37C2  
                          i2l2260 37B2                            i2l2256 3794  
                          i2l2258 379C                            i2l2940 389E  
                          i2l2942 38A2                            i2l2934 387E  
                          i2l2936 388E                            i2l2938 389C  
            __size_of_fifo_delete 0098                  __end_of_dac_init 367A  
                 ??_addContCiclos 0026              __size_of_end_receita 0024  
            __size_of_fifo_indice 0004              __size_of_fifo_lerPos 0012  
                          _SSPADD 000FC8                            _SSPBUF 000FC9  
                   main@init_cond 00B2                   ler_sensor@passo 002A  
                __end_of_codifica 253C                  __end_of_fifo_add 33F8  
                __end_of_fifo_tam 3B2C           __end_of_addIndicePassos 3A00  
                          _t1cont 0001                            ___lmul 30AE  
                       ??___aldiv 003A                            ___wmul 38F8  
                       ??___awdiv 002A                         ??___awmod 002A  
                          _ciclos 000F                         ??___lldiv 002E  
               _fifo_alinharPrint 2960                      ?_timer1_init 0026  
                       ??___lwdiv 002A                            delay@t 0026  
                          clear_0 31C6                  ___awdiv@quotient 002C  
                          _teclas 0046                   ___awmod@divisor 0028  
              ?_fifo_alinharPrint 0026                         ??_dispLCD 0030  
                 ___awmod@counter 002A                    ??_initSerialIO 002B  
                          main@pt 009D                    _buscar_receita 35FA  
                __end_of_posAtual 3A9E                            setT1@c 002C  
                    __pdataCOMRAM 0046                      __mediumconst 7D20  
                       ?_I2C_init 0033                            tblptrh 000FF7  
                          tblptrl 000FF6               ??_fifo_alinharPrint 0031  
                          tblptru 000FF8                         ?_I2C_stop 0026  
         __end_of_I2C_ack_receive 3AC0             __end_of_getContCiclos 3AF6  
                   main@vetor_aux 0076                  __end_of_statusT1 3A8C  
          salva_atuadores_init@pt 002D              _salva_atuadores_init 2FBC  
                      __accesstop 0060           __end_of__initialization 31CC  
            __size_of_buscar_dado 0028          __size_of_deletar_receita 0038  
              fp__deletar_receita 0000                 _serialIObyteShift 3296  
                  _salvar_receita 35B6        __size_of_formatar_receitas 0016  
         __size_of_dispLCD_lincol 0062                     ___rparam_used 000001  
              ?_serialIObyteShift 0026                __size_of_dac_write 0048  
       __end_of_fifo_alinharPrint 2A48                    __pcstackCOMRAM 0026  
           __size_of_EEPROM_write 002E          __size_of_resetContCiclos 000A  
                    __pidataBANK0 38A8                     __end_of_delay 387C  
                   __end_of_setT1 3A2A                 fifo_add_control@c 0035  
            __size_of_ler_atuador 00A0               ??_serialIObyteShift 0026  
          __end_of_buscar_receita 363C                __size_of_getCiclos 001E  
         _manipula_atuadores_init 33F8         __size_of_fifo_add_control 0048  
               initSerialIO@ptrIn 0026                __size_of_fifo_adrs 000A  
                         I2C_tx@b 0026                        ??_I2C_init 0037  
    __end_of_fifo_indicePrint_dec 3A3E                        ??_I2C_stop 0026  
    __end_of_fifo_indicePrint_inc 3238                           ??_delay 0028  
                         ??_setT1 0030                teclado_borda@tecla 002C  
                         ?_I2C_tx 0026             ?_salva_atuadores_init 0026  
                      __pbssBANK0 00E5             __size_of_dispLCD_init 0036  
       __end_of_serialIObyteShift 32F0            __end_of_salvar_receita 35FA  
                      _decodifica 253C                     ?_teclado_init 0026  
                   ?_teclado_scan 0026                __size_of_intt1_1ms 0030  
                    _EEPROM_write 3820                  teclado_borda@aux 002B  
           __end_of_dignum_apagar 3820                  ?_addIndicePassos 0026  
                  main@contPassos 0074                           ?___lmul 0026  
                         ?___wmul 0026                   _fifo_disponivel 39D4  
                  ___lmul@product 002E           serialIObyteShift@dataIn 0026  
                 ?_buscar_receita 002C                        _dignum_tam 367A  
              __size_of_set_passo 00E2                           _MCP4725 3964  
                       ?_dac_init 0026                        _fifo_print 1E00  
              __size_of_printExec 018A                           _LCDbits 000F8A  
                    _dispLCD_init 375E                           i2u72_40 37B2  
                ?_I2C_ack_receive 0026                           i2u72_41 37AE  
               __end_of_dac_write 35B6                         ?_codifica 0026  
                       ?_fifo_add 0026                         ?_fifo_tam 0026  
                 __size_of_I2C_tx 0016              __size_of_salvar_dado 0022  
                  ??_teclado_init 0026                    ??_teclado_scan 0026  
                 ?_salvar_receita 002C                     ?_serialIOload 0026  
                   ?_serialIOscan 0026                 __end_of_getCiclos 39A4  
            __end_of_initSerialIO 37F2                       posAtual@ind 0027  
                EEPROM_write@addr 0027                  EEPROM_write@data 0026  
                         __Hparam 0000                 __end_of_fifo_adrs 3B00  
                       ?_posAtual 0026                           __Lparam 0000  
                       _I2C_start 3A3E        __size_of_fifo_alinharPrint 00E8  
               ??_deletar_receita 002A                           ___aldiv 267C  
                         ___awdiv 2B2A                   __size_of___lmul 006A  
                         ___awmod 2BEE                        _ler_sensor 2878  
                         ___lldiv 2D46                   __size_of___wmul 0026  
         __size_of_init_atuadores 000A                           ___lwdiv 303A  
                       ?_statusT1 0026            deletar_receita@receita 002C  
       ??_manipula_atuadores_init 0029                           __pcinit 317A  
                         __ramtop 0800                           _dispLCD 34DE  
            __size_of_timer1_init 001A                           __ptext0 0012  
                         __ptext1 39A4                           __ptext2 3ACE  
                         __ptext3 3728                           __ptext4 2C9E  
                         __ptext5 3A7A                           __ptext6 2A48  
                         __ptext7 3A16                           __ptext8 32F0  
                         __ptext9 3B12                     teclado_scan@c 002A  
                   teclado_scan@l 0029                        ??_dac_init 0029  
               __end_of_intt1_1ms 37C4                 ??_resetContCiclos 0026  
                         _atuador 0013           __size_of_fifo_add_ciclo 000A  
                       _T1CONbits 000FCD                      __size_of_irq 38A0  
         __size_of_fifo_add_tempo 0058                  ___awmod@dividend 0026  
               salvar_receita@aux 002E                  ___aldiv@dividend 0032  
                   _receita_livre 000000                        ??_codifica 0028  
          ??_salva_atuadores_init 0029                        ??_fifo_add 0035  
                      ??_fifo_tam 0026                           main@aux 0075  
                         main@num 00B4                           main@ptr 009F  
                  __pintcode_body 387C              end_of_initialization 31CC  
                  ??_serialIOload 0026                    ??_serialIOscan 0029  
      __size_of_serialIObyteShift 005A                       ?_decodifica 0026  
                   __Lmediumconst 7D20                           int_func 387C  
                  dispLCD_num@col 0031                    dispLCD_num@div 003D  
                  dispLCD_num@lin 003A                    dispLCD_num@tam 0034  
                  dispLCD_num@num 0032                    _dispLCD_lincol 3118  
                   ??_EEPROM_read 0026                 __end_of_set_passo 2B2A  
                  dispLCD_str@lin 002F                    dispLCD_str@str 002D  
                      dispLCD@col 002D                   ___lldiv@divisor 002A  
                      dispLCD@lin 0031                        dispLCD@pos 0030  
                      dispLCD@str 002E           __end_of_fifo_disponivel 39EA  
               __end_of_printExec 226E                   ___lldiv@counter 0032  
                      ??_posAtual 0027                        ?_I2C_start 0026  
                    I2C_init@freq 0033              _fifo_indicePrint_dec 3A2A  
                ___aldiv@quotient 003C              _fifo_indicePrint_inc 31DA  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
          __size_of_teclado_borda 0036                fifo_alinharPrint@i 0033  
                      ??_statusT1 002A                     ??_dispLCD_clr 0028  
                   ??_dispLCD_num 0035                     ??_dispLCD_str 002F  
                   ??_alt_atuador 0026                       ?_dignum_tam 002E  
                       _PORTAbits 000F80                  _fifo_add_control 3496  
            fp__formatar_receitas 0000                       ?_fifo_print 0026  
                      fp__dispLCD 0000                     ??_dignum_conc 002E  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
        __size_of_dispLCD_dataReg 004E                     ??_fifo_delete 0035  
                   ??_end_receita 0028                     ??_fifo_indice 0026  
                   ??_fifo_lerPos 0026                 __size_of_I2C_init 003A  
               __size_of_I2C_stop 0014                     _teclaAnterior 0011  
 __end_of_manipula_atuadores_init 3448            __end_of_dispLCD_lincol 317A  
                  __end_of_I2C_tx 3A16    manipula_atuadores_init@atuador 0029  
        __size_of_dispLCD_instReg 00F0                        main@ciclos 00B0  
             dignum_apagar@ptrNum 002D                        main@estado 00BB  
           __end_of_addContCiclos 3B24          __size_of_getIndicePassos 0004  
           ?_fifo_indicePrint_dec 0026             ?_fifo_indicePrint_inc 0026  
             __end_of_EEPROM_read 3ACE                       ?_ler_sensor 0026  
                  __end_of___lmul 3118                    __end_of___wmul 391E  
                   __pidataCOMRAM 3A66                    set_passo@passo 002A  
            __end_of_teclado_init 3AD8              __end_of_teclado_scan 2D46  
             __size_of_decodifica 0140               start_initialization 317A  
             __end_of_dispLCD_clr 3B12                     posAtual@passo 0028  
             __end_of_dispLCD_num 23E8               __end_of_dispLCD_str 3296  
             __end_of_alt_atuador 2F24                       __end_of_irq 38A8  
                   _teclado_borda 3728                     ??_buscar_dado 002F  
                        ??_I2C_tx 0026             __size_of_initSerialIO 002E  
                 fifo_add_tempo@t 0035                   ?_dispLCD_lincol 0028  
             __end_of_dignum_conc 356E                initSerialIO@length 002A  
             __size_of_dignum_tam 003C               __end_of_fifo_delete 2FBC  
              initSerialIO@ptrOut 0028               __end_of_end_receita 3942  
             __end_of_fifo_indice 3B30               __end_of_fifo_lerPos 3AB0  
             __size_of_fifo_print 02E4                  ?_fifo_disponivel 0026  
               dispLCD_lincol@col 0028                 dispLCD_lincol@aux 002C  
               dispLCD_lincol@lin 002B                       ??_I2C_start 0026  
                 main@meAtuadores 00AF                     ??_ler_atuador 0026  
                ??_buscar_receita 002E                          ??___lmul 002E  
                        ??___wmul 002A                    _init_atuadores 3AE2  
          __size_of_getContCiclos 000A                       __pdataBANK0 00BD  
            __end_of_serialIOload 3B18              __end_of_serialIOscan 3348  
                        ?_MCP4725 0040                    _fifo_add_ciclo 3B00  
                ler_atuador@tecla 0028                      _initSerialIO 37C4  
                  _fifo_add_tempo 3348                       __pbssCOMRAM 0001  
               __size_of_dac_init 003E                     __pcstackBANK0 0060  
                ??_salvar_receita 002E                    ?_teclado_borda 0026  
             __size_of_ler_sensor 00E8                 __size_of_codifica 0154  
               __size_of_fifo_add 0058                         _dac_write 356E  
               __size_of_fifo_tam 0004                   _deletar_receita 36F0  
               ??_dispLCD_dataReg 0026                       _EEPROM_read 3AC0  
             __end_of_buscar_dado 38F8            ??_fifo_indicePrint_dec 0026  
          ??_fifo_indicePrint_inc 0026                  ___lwdiv@dividend 0026  
          __end_of_init_atuadores 3AEC                   _resetContCiclos 3AD8  
                       _getCiclos 3986                 ??_dispLCD_instReg 0026  
                       __pintcode 0008                     __pmediumconst 7D20  
                        ?___aldiv 0032                          ?___awdiv 0026  
               __size_of_posAtual 0012                          ?___awmod 0026  
                        ?___lldiv 0026                          ?___lwdiv 0026  
                       _fifo_adrs 3AF6                     serialIOscan@i 002C  
                   serialIOscan@j 002B            __end_of_fifo_add_ciclo 3B0A  
                     _dispLCD_clr 3B0A                       _dispLCD_num 226E  
                     _dispLCD_str 3238                 ??_getIndicePassos 0026  
          __end_of_fifo_add_tempo 33A0                          ?_dispLCD 002D  
                     _alt_atuador 2E8A               __end_of_ler_atuador 2E8A  
               __size_of_statusT1 0012          __size_of_addIndicePassos 0016  
                       _ind_print 0057                          _I2C_init 36B6  
        serialIObyteShift@dataBit 0028                          _I2C_stop 3A52  
          __size_of_dignum_apagar 002E                       _dignum_conc 3526  
        serialIObyteShift@dataOut 0027                         _intt1_1ms 3794  
                   ??_salvar_dado 002E                  ___lwdiv@quotient 002A  
                   _getContCiclos 3AEC                    __size_of_delay 002E  
                     _fifo_delete 2F24                    __size_of_setT1 0014  
                     _end_receita 391E                       _fifo_indice 3B2C  
                     _fifo_lerPos 3A9E                        ?_dac_write 0029  
                    ??_decodifica 0028                 teclado_scan@tecla 0028  
                 ___aldiv@divisor 0036                    _fifo_print$946 0030  
                 ___aldiv@counter 003A                    ___wmul@product 002A  
        __size_of_I2C_ack_receive 0010          __end_of_fifo_add_control 34DE  
                        _PIE1bits 000F9D                          i2u135_40 388E  
                        i2u135_41 388A                          i2u136_40 389C  
                        i2u136_41 3898                          _PIR1bits 000F9E  
                 ?_init_atuadores 0026                          _SERIALIO 000F80  
                      ?_getCiclos 0026                         _set_passo 2A48  
           __size_of_teclado_init 000A                         main@F3405 00BD  
           __size_of_teclado_scan 00A8                         main@F3381 00E5  
                       main@F3379 00E6                    dignum_conc@dig 0030  
                   ??_timer1_init 0026                        ?_fifo_adrs 0026  
                       _printExec 20E4                  dispLCD_dataReg@d 0027  
                 ?_fifo_add_ciclo 0026                      ??_dignum_tam 0030  
                     _cont_ciclos 000D                   ?_fifo_add_tempo 0026  
                       main@i_542 009C                         main@i_536 00A3  
                       main@i_554 00A5                         main@i_557 00A7  
                       main@i_590 00AB                         main@i_587 00A9  
                       main@j_537 00A4                         main@j_555 00A6  
               ___wmul@multiplier 0026                         main@j_558 00A8  
                       main@j_591 00AC                         main@j_588 00AA  
             fifo_print@completar 0032                  deletar_receita@i 002D  
                    ??_fifo_print 002E                __end_of_decodifica 267C  
                __size_of_MCP4725 0022                         main@botao 00B3  
                     _lenSerialIO 0012                   ??_teclado_borda 002B  
                       main@tecla 00BC           __end_of_deletar_receita 3728  
                      ?_intt1_1ms 0026                    ?_getContCiclos 0026  
               _resetIndicePassos 3B18                 ___lmul@multiplier 0026  
                       copy_data0 318E                         copy_data1 31AE  
                     _buscar_dado 38D0     __size_of_salva_atuadores_init 007E  
              ?_resetIndicePassos 0026           __end_of_resetContCiclos 3AE2  
                    _teclado_init 3ACE               __end_of_salvar_dado 3964  
                    _teclado_scan 2C9E                        _EECON1bits 000FA6  
              __end_of_dignum_tam 36B6               ??_resetIndicePassos 0026  
                        __Hrparam 0000                     _dignum_apagar 37F2  
                   ler_sensor@ptr 0026                __end_of_fifo_print 20E4  
                        __Lrparam 0000          ?_manipula_atuadores_init 0026  
                      ?_set_passo 0026             __size_of_serialIOload 0006  
           __size_of_serialIOscan 0058                      getCiclos@aux 0028  
                dispLCD_instReg@i 0027                       _ler_atuador 2DEA  
                    ??_ler_sensor 0028                        ?_printExec 003F  
                __size_of___aldiv 010C                  __size_of___awdiv 00C4  
                __size_of___awmod 00B0                  __size_of___lldiv 00A4  
                __size_of___lwdiv 0074                   fp__dispLCD_init 0000  
              buscar_receita@data 002C                buscar_receita@adrs 0030  
                dispLCD_num@sinal 003C             fifo_alinharPrint@cont 0032  
     manipula_atuadores_init@mask 002B                          _dac_init 363C  
                __size_of_dispLCD 0048               __end_of_timer1_init 39BE  
       __end_of_resetIndicePassos 3B1E                       decodifica@d 0026  
                        _main$570 008C                          _main$546 0086  
                        _main$571 008E                          _main$572 0090  
                        _main$573 0092                          _main$565 0088  
                        _main$574 0094                          _main$575 0096  
                        _main$576 0098                          _main$569 008A  
                        _main$578 009A                  ??_dispLCD_lincol 0029  
                 ___lwdiv@divisor 0028                   ___lwdiv@counter 002C  
                        _codifica 23E8                          __ptext10 3296  
                        __ptext11 35B6                          __ptext20 3A9E  
                        __ptext12 3942                          __ptext21 226E  
                        __ptext13 2FBC                          __ptext30 1E00  
                        __ptext22 33F8                          __ptext14 2DEA  
                        __ptext31 2BEE                          __ptext23 2878  
                        __ptext15 3B18                          __ptext40 3348  
                        __ptext32 31DA                          __ptext24 3AE2  
                        __ptext16 3AD8                          __ptext41 3496  
                        __ptext33 3A2A                          __ptext25 37C4  
                        __ptext17 20E4                          __ptext50 3B0A  
                        __ptext42 3B00                          __ptext34 3B2C  
                        __ptext26 3AEC                          __ptext18 3A8C  
                        __ptext51 34DE                          __ptext43 33A0  
                        __ptext35 39D4                          __ptext27 3986  
                        __ptext19 3B24                          __ptext60 3820  
                        __ptext52 3118                          __ptext44 2960  
                        __ptext36 2F24                          __ptext28 39BE  
                        __ptext61 35FA                          __ptext53 2788  
                        __ptext45 367A                          __ptext37 253C  
                        __ptext29 3B28                          __ptext70 356E  
                        __ptext62 38D0                          __ptext54 3448  
                        __ptext46 2B2A                          __ptext38 2E8A  
                        __ptext71 363C                          __ptext63 391E  
                        __ptext55 3526                          __ptext47 23E8  
                        __ptext39 3AF6                          __ptext80 3794  
                        __ptext72 384E                          __ptext64 3AC0  
                        __ptext56 38F8                          __ptext48 3238  
                        __ptext81 0000                          __ptext73 3A00  
                        __ptext65 39EA                          __ptext57 37F2  
                        __ptext49 375E                          __ptext74 3A3E  
                        __ptext66 3B1E                          __ptext58 303A  
                        __ptext75 3AB0                          __ptext67 30AE  
                        __ptext59 36F0                          __ptext76 3A52  
                        __ptext68 267C                          __ptext77 36B6  
                        __ptext69 3964                          __ptext78 2D46  
                        _fifo_add 33A0                 ??_addIndicePassos 0026  
                        _fifo_tam 3B28                          _ind_fila 0058  
                     ??_dac_write 002B                __end_of_ler_sensor 2960  
                   ?_EEPROM_write 0026                      _serialIOload 3B12  
                    _serialIOscan 32F0                     __size_of_main 1DEE  
              salvar_receita@data 002C                salvar_receita@adrs 0030  
                  ?_dignum_apagar 002D                          _posAtual 3A8C  
                    dispLCD_str@c 0030                       ??_getCiclos 0028  
               ??_I2C_ack_receive 0026                     _printExec$968 0040  
                        int$flags 0059                       ??_fifo_adrs 0028  
              fifo_print@indPrint 0033                     fifo_add@passo 0035  
                        _statusT1 3A7A                       MCP4725@Vout 0040  
                   dignum_tam@tam 0030                     dignum_tam@num 002E  
                        main@lema 0060                      set_passo@ptr 0026  
  salva_atuadores_init@condi_init 0029                   ??_getContCiclos 0028  
                      _INTCONbits 000FF2                     ?_dispLCD_init 0026  
          __size_of_addContCiclos 0006                      codifica@dado 0026  
                 _dispLCD_dataReg 3448                      codifica@tipo 002A  
                     ??_intt1_1ms 0026                  ?_deletar_receita 0026  
              formatar_receitas@i 0028                   buscar_dado@data 002D  
                 buscar_dado@adrs 0031                       _salvar_dado 3942  
                  fp__dispLCD_clr 0000                    fp__dispLCD_num 0000  
                  fp__dispLCD_str 0000                 buscar_receita@aux 002E  
                 dispLCD_num@size 003B              fifo_alinharPrint@aux 0034  
      manipula_atuadores_init@aux 002A                   _dispLCD_instReg 2788  
                        intlevel2 0000                    ??_EEPROM_write 0027  
                ?_resetContCiclos 0026                  ___lldiv@dividend 0026  
                    ?_EEPROM_read 0026                   _getIndicePassos 3B24  
               dignum_conc@ptrNum 002C                       ??_set_passo 0028  
               fifo_print@comando 0036                       ??_printExec 0040  
        salva_atuadores_init@F108 0005                       _timer1_init 39A4  
                    _ptrSerialOut 0009                      ?_dispLCD_clr 0026  
                    ?_dispLCD_num 0031                      ?_dispLCD_str 002D  
        __size_of_fifo_disponivel 0016                      ?_alt_atuador 0026  
        salva_atuadores_init@dado 002F                    buscar_dado@col 002C  
                  buscar_dado@aux 002F              fifo_add_ciclo@ciclos 0026  
        salva_atuadores_init@mask 0030                    ??_dispLCD_init 0029  
                ___lldiv@quotient 002E        __size_of_resetIndicePassos 0006  
                    ___aldiv@sign 003B                      ?_dignum_conc 002C  
                     _SSPCON1bits 000FC6                      end_receita@x 0026  
                     _SSPCON2bits 000FC5                  fifo_print@atraso 0035  
                    ?_fifo_delete 0026                       _ptrSerialIn 000B  
                    fifo_lerPos@i 0026                      ?_end_receita 0026  
                    ?_fifo_indice 0026                      ?_fifo_lerPos 0026  
                 buscar_receita@i 0031                  ??_init_atuadores 0026  
                 ??_dignum_apagar 002F                 ?_fifo_add_control 0026  
                   _addContCiclos 3B1E                  ??_fifo_add_ciclo 0028  
                     fifo_print@i 0034  
